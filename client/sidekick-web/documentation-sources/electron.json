[
  {
    "title": "Breaking Changes",
    "source": "https://github.com/electron/electron/tree/main/docs/breaking-changes.md",
    "content": "Breaking Changes\nBreaking changes will be documented here, and deprecation warnings added to JS code where possible, at least one major version before the change is made.\nTypes of Breaking Changes\nThis document uses the following convention to categorize breaking changes:\n\nAPI Changed: An API was changed in such a way that code that has not been updated is guaranteed to throw an exception.\nBehavior Changed: The behavior of Electron has changed, but not in such a way that an exception will necessarily be thrown.\nDefault Changed: Code depending on the old default may break, not necessarily throwing an exception. The old behavior can be restored by explicitly specifying the value.\nDeprecated: An API was marked as deprecated. The API will continue to function, but will emit a deprecation warning, and will be removed in a future release.\nRemoved: An API or feature was removed, and is no longer supported by Electron.\n\nPlanned Breaking API Changes (24.0)\nDeprecated: `BrowserWindow.setTrafficLightPosition(position)`\n`BrowserWindow.setTrafficLightPosition(position)` has been deprecated, the\n`BrowserWindow.setWindowButtonPosition(position)` API should be used instead\nwhich accepts `null` instead of `{ x: 0, y: 0 }` to reset the position to\nsystem default.\n```js\n// Removed in Electron 24\nwin.setTrafficLightPosition({ x: 10, y: 10 })\nwin.setTrafficLightPosition({ x: 0, y: 0 })\n// Replace with\nwin.setWindowButtonPosition({ x: 10, y: 10 })\nwin.setWindowButtonPosition(null)\n```\nDeprecated: `BrowserWindow.getTrafficLightPosition()`\n`BrowserWindow.getTrafficLightPosition()` has been deprecated, the\n`BrowserWindow.getWindowButtonPosition()` API should be used instead\nwhich returns `null` instead of `{ x: 0, y: 0 }` when there is no custom\nposition.\n```js\n// Removed in Electron 24\nconst pos = win.getTrafficLightPosition()\nif (pos.x === 0 && pos.y === 0) {\n  // No custom position.\n}\n// Replace with\nconst ret = win.getWindowButtonPosition()\nif (ret === null) {\n  // No custom position.\n}\n```\nPlanned Breaking API Changes (23.0)\nBehavior Changed: Draggable Regions on macOS\nThe implementation of draggable regions (using the CSS property `-webkit-app-region: drag`) has changed on macOS to bring it in line with Windows and Linux. Previously, when a region with `-webkit-app-region: no-drag` overlapped a region with `-webkit-app-region: drag`, the `no-drag` region would always take precedence on macOS, regardless of CSS layering. That is, if a `drag` region was above a `no-drag` region, it would be ignored. Beginning in Electron 23, a `drag` region on top of a `no-drag` region will correctly cause the region to be draggable.\nAdditionally, the `customButtonsOnHover` BrowserWindow property previously created a draggable region which ignored the `-webkit-app-region` CSS property. This has now been fixed (see #37210 for discussion).\nAs a result, if your app uses a frameless window with draggable regions on macOS, the regions which are draggable in your app may change in Electron 23.\nRemoved: Windows 7 / 8 / 8.1 support\nWindows 7, Windows 8, and Windows 8.1 are no longer supported. Electron follows the planned Chromium deprecation policy, which will deprecate Windows 7 support beginning in Chromium 109.\nOlder versions of Electron will continue to run on these operating systems, but Windows 10 or later will be required to run Electron v23.0.0 and higher.\nRemoved: BrowserWindow `scroll-touch-*` events\nThe deprecated `scroll-touch-begin`, `scroll-touch-end` and `scroll-touch-edge`\nevents on BrowserWindow have been removed. Instead, use the newly available\ninput-event event on WebContents.\n```js\n// Removed in Electron 23.0\nwin.on('scroll-touch-begin', scrollTouchBegin)\nwin.on('scroll-touch-edge', scrollTouchEdge)\nwin.on('scroll-touch-end', scrollTouchEnd)\n// Replace with\nwin.webContents.on('input-event', (_, event) => {\n  if (event.type === 'gestureScrollBegin') {\n    scrollTouchBegin()\n  } else if (event.type === 'gestureScrollUpdate') {\n    scrollTouchEdge()\n  } else if (event.type === 'gestureScrollEnd') {\n    scrollTouchEnd()\n  }\n})\n```\nRemoved: `webContents.incrementCapturerCount(stayHidden, stayAwake)`\nThe `webContents.incrementCapturerCount(stayHidden, stayAwake)` function has been removed.\nIt is now automatically handled by `webContents.capturePage` when a page capture completes.\n```js\nconst w = new BrowserWindow({ show: false })\n// Removed in Electron 23\nw.webContents.incrementCapturerCount()\nw.capturePage().then(image => {\n  console.log(image.toDataURL())\n  w.webContents.decrementCapturerCount()\n})\n// Replace with\nw.capturePage().then(image => {\n  console.log(image.toDataURL())\n})\n```\nRemoved: `webContents.decrementCapturerCount(stayHidden, stayAwake)`\nThe `webContents.decrementCapturerCount(stayHidden, stayAwake)` function has been removed.\nIt is now automatically handled by `webContents.capturePage` when a page capture completes.\n```js\nconst w = new BrowserWindow({ show: false })\n// Removed in Electron 23\nw.webContents.incrementCapturerCount()\nw.capturePage().then(image => {\n  console.log(image.toDataURL())\n  w.webContents.decrementCapturerCount()\n})\n// Replace with\nw.capturePage().then(image => {\n  console.log(image.toDataURL())\n})\n```\nPlanned Breaking API Changes (22.0)\nDeprecated: `webContents.incrementCapturerCount(stayHidden, stayAwake)`\n`webContents.incrementCapturerCount(stayHidden, stayAwake)` has been deprecated.\nIt is now automatically handled by `webContents.capturePage` when a page capture completes.\n```js\nconst w = new BrowserWindow({ show: false })\n// Removed in Electron 23\nw.webContents.incrementCapturerCount()\nw.capturePage().then(image => {\n  console.log(image.toDataURL())\n  w.webContents.decrementCapturerCount()\n})\n// Replace with\nw.capturePage().then(image => {\n  console.log(image.toDataURL())\n})\n```\nDeprecated: `webContents.decrementCapturerCount(stayHidden, stayAwake)`\n`webContents.decrementCapturerCount(stayHidden, stayAwake)` has been deprecated.\nIt is now automatically handled by `webContents.capturePage` when a page capture completes.\n```js\nconst w = new BrowserWindow({ show: false })\n// Removed in Electron 23\nw.webContents.incrementCapturerCount()\nw.capturePage().then(image => {\n  console.log(image.toDataURL())\n  w.webContents.decrementCapturerCount()\n})\n// Replace with\nw.capturePage().then(image => {\n  console.log(image.toDataURL())\n})\n```\nRemoved: WebContents `new-window` event\nThe `new-window` event of WebContents has been removed. It is replaced by webContents.setWindowOpenHandler().\n```js\n// Removed in Electron 22\nwebContents.on('new-window', (event) => {\n  event.preventDefault()\n})\n// Replace with\nwebContents.setWindowOpenHandler((details) => {\n  return { action: 'deny' }\n})\n```\nDeprecated: BrowserWindow `scroll-touch-*` events\nThe `scroll-touch-begin`, `scroll-touch-end` and `scroll-touch-edge` events on\nBrowserWindow are deprecated. Instead, use the newly available input-event\nevent on WebContents.\n```js\n// Deprecated\nwin.on('scroll-touch-begin', scrollTouchBegin)\nwin.on('scroll-touch-edge', scrollTouchEdge)\nwin.on('scroll-touch-end', scrollTouchEnd)\n// Replace with\nwin.webContents.on('input-event', (_, event) => {\n  if (event.type === 'gestureScrollBegin') {\n    scrollTouchBegin()\n  } else if (event.type === 'gestureScrollUpdate') {\n    scrollTouchEdge()\n  } else if (event.type === 'gestureScrollEnd') {\n    scrollTouchEnd()\n  }\n})\n```\nPlanned Breaking API Changes (21.0)\nBehavior Changed: V8 Memory Cage enabled\nThe V8 memory cage has been enabled, which has implications for native modules\nwhich wrap non-V8 memory with `ArrayBuffer` or `Buffer`. See the blog post\nabout the V8 memory cage for\nmore details.\nAPI Changed: `webContents.printToPDF()`\n`webContents.printToPDF()` has been modified to conform to Page.printToPDF in the Chrome DevTools Protocol. This has been changes in order to\naddress changes upstream that made our previous implementation untenable and rife with bugs.\nArguments Changed\n\n`pageRanges`\n\nArguments Removed\n\n`printSelectionOnly`\n`marginsType`\n`headerFooter`\n`scaleFactor`\n\nArguments Added\n\n`headerTemplate`\n`footerTemplate`\n`displayHeaderFooter`\n`margins`\n`scale`\n`preferCSSPageSize`\n\n```js\n// Main process\nconst { webContents } = require('electron')\nwebContents.printToPDF({\n  landscape: true,\n  displayHeaderFooter: true,\n  printBackground: true,\n  scale: 2,\n  pageSize: 'Ledger',\n  margins: {\n    top: 2,\n    bottom: 2,\n    left: 2,\n    right: 2\n  },\n  pageRanges: '1-5, 8, 11-13',\n  headerTemplate: 'Title',\n  footerTemplate: '',\n  preferCSSPageSize: true\n}).then(data => {\n  fs.writeFile(pdfPath, data, (error) => {\n    if (error) throw error\n    console.log(`Wrote PDF successfully to ${pdfPath}`)\n  })\n}).catch(error => {\n  console.log(`Failed to write PDF to ${pdfPath}:`, error)\n})\n```\nPlanned Breaking API Changes (20.0)\nRemoved: macOS 10.11 / 10.12 support\nmacOS 10.11 (El Capitan) and macOS 10.12 (Sierra) are no longer supported by Chromium.\nOlder versions of Electron will continue to run on these operating systems, but macOS 10.13 (High Sierra)\nor later will be required to run Electron v20.0.0 and higher.\nDefault Changed: renderers without `nodeIntegration: true` are sandboxed by default\nPreviously, renderers that specified a preload script defaulted to being\nunsandboxed. This meant that by default, preload scripts had access to Node.js.\nIn Electron 20, this default has changed. Beginning in Electron 20, renderers\nwill be sandboxed by default, unless `nodeIntegration: true` or `sandbox: false`\nis specified.\nIf your preload scripts do not depend on Node, no action is needed. If your\npreload scripts do depend on Node, either refactor them to remove Node usage\nfrom the renderer, or explicitly specify `sandbox: false` for the relevant\nrenderers.\nRemoved: `skipTaskbar` on Linux\nOn X11, `skipTaskbar` sends a `_NET_WM_STATE_SKIP_TASKBAR` message to the X11\nwindow manager. There is not a direct equivalent for Wayland, and the known\nworkarounds have unacceptable tradeoffs (e.g. Window.is_skip_taskbar in GNOME\nrequires unsafe mode), so Electron is unable to support this feature on Linux.\nAPI Changed: `session.setDevicePermissionHandler(handler)`\nThe handler invoked when `session.setDevicePermissionHandler(handler)` is used\nhas a change to its arguments.  This handler no longer is passed a frame\nWebFrameMain, but instead is passed the `origin`, which\nis the origin that is checking for device permission.\nPlanned Breaking API Changes (19.0)\nRemoved: IA32 Linux binaries\nThis is a result of Chromium 102.0.4999.0 dropping support for IA32 Linux.\nThis concludes the removal of support for IA32 Linux.\nPlanned Breaking API Changes (18.0)\nRemoved: `nativeWindowOpen`\nPrior to Electron 15, `window.open` was by default shimmed to use\n`BrowserWindowProxy`. This meant that `window.open('about:blank')` did not work\nto open synchronously scriptable child windows, among other incompatibilities.\nSince Electron 15, `nativeWindowOpen` has been enabled by default.\nSee the documentation for window.open in Electron\nfor more details.\nPlanned Breaking API Changes (17.0)\nRemoved: `desktopCapturer.getSources` in the renderer\nThe `desktopCapturer.getSources` API is now only available in the main process.\nThis has been changed in order to improve the default security of Electron\napps.\nIf you need this functionality, it can be replaced as follows:\n```js\n// Main process\nconst { ipcMain, desktopCapturer } = require('electron')\nipcMain.handle(\n  'DESKTOP_CAPTURER_GET_SOURCES',\n  (event, opts) => desktopCapturer.getSources(opts)\n)\n```\n```js\n// Renderer process\nconst { ipcRenderer } = require('electron')\nconst desktopCapturer = {\n  getSources: (opts) => ipcRenderer.invoke('DESKTOP_CAPTURER_GET_SOURCES', opts)\n}\n```\nHowever, you should consider further restricting the information returned to\nthe renderer; for instance, displaying a source selector to the user and only\nreturning the selected source.\nDeprecated: `nativeWindowOpen`\nPrior to Electron 15, `window.open` was by default shimmed to use\n`BrowserWindowProxy`. This meant that `window.open('about:blank')` did not work\nto open synchronously scriptable child windows, among other incompatibilities.\nSince Electron 15, `nativeWindowOpen` has been enabled by default.\nSee the documentation for window.open in Electron\nfor more details.\nPlanned Breaking API Changes (16.0)\nBehavior Changed: `crashReporter` implementation switched to Crashpad on Linux\nThe underlying implementation of the `crashReporter` API on Linux has changed\nfrom Breakpad to Crashpad, bringing it in line with Windows and Mac. As a\nresult of this, child processes are now automatically monitored, and calling\n`process.crashReporter.start` in Node child processes is no longer needed (and\nis not advisable, as it will start a second instance of the Crashpad reporter).\nThere are also some subtle changes to how annotations will be reported on\nLinux, including that long values will no longer be split between annotations\nappended with `__1`, `__2` and so on, and instead will be truncated at the\n(new, longer) annotation value limit.\nDeprecated: `desktopCapturer.getSources` in the renderer\nUsage of the `desktopCapturer.getSources` API in the renderer has been\ndeprecated and will be removed. This change improves the default security of\nElectron apps.\nSee here for details on\nhow to replace this API in your app.\nPlanned Breaking API Changes (15.0)\nDefault Changed: `nativeWindowOpen` defaults to `true`\nPrior to Electron 15, `window.open` was by default shimmed to use\n`BrowserWindowProxy`. This meant that `window.open('about:blank')` did not work\nto open synchronously scriptable child windows, among other incompatibilities.\n`nativeWindowOpen` is no longer experimental, and is now the default.\nSee the documentation for window.open in Electron\nfor more details.\nPlanned Breaking API Changes (14.0)\nRemoved: `remote` module\nThe `remote` module was deprecated in Electron 12, and will be removed in\nElectron 14. It is replaced by the\n@electron/remote module.\n`js\n// Deprecated in Electron 12:\nconst { BrowserWindow } = require('electron').remote`\n```js\n// Replace with:\nconst { BrowserWindow } = require('@electron/remote')\n// In the main process:\nrequire('@electron/remote/main').initialize()\n```\nRemoved: `app.allowRendererProcessReuse`\nThe `app.allowRendererProcessReuse` property will be removed as part of our plan to\nmore closely align with Chromium's process model for security, performance and maintainability.\nFor more detailed information see #18397.\nRemoved: Browser Window Affinity\nThe `affinity` option when constructing a new `BrowserWindow` will be removed\nas part of our plan to more closely align with Chromium's process model for security,\nperformance and maintainability.\nFor more detailed information see #18397.\nAPI Changed: `window.open()`\nThe optional parameter `frameName` will no longer set the title of the window. This now follows the specification described by the native documentation under the corresponding parameter `windowName`.\nIf you were using this parameter to set the title of a window, you can instead use win.setTitle(title).\nRemoved: `worldSafeExecuteJavaScript`\nIn Electron 14, `worldSafeExecuteJavaScript` will be removed.  There is no alternative, please\nensure your code works with this property enabled.  It has been enabled by default since Electron\n12.\nYou will be affected by this change if you use either `webFrame.executeJavaScript` or `webFrame.executeJavaScriptInIsolatedWorld`. You will need to ensure that values returned by either of those methods are supported by the Context Bridge API as these methods use the same value passing semantics.\nRemoved: BrowserWindowConstructorOptions inheriting from parent windows\nPrior to Electron 14, windows opened with `window.open` would inherit\nBrowserWindow constructor options such as `transparent` and `resizable` from\ntheir parent window. Beginning with Electron 14, this behavior is removed, and\nwindows will not inherit any BrowserWindow constructor options from their\nparents.\nInstead, explicitly set options for the new window with `setWindowOpenHandler`:\n`js\nwebContents.setWindowOpenHandler((details) => {\n  return {\n    action: 'allow',\n    overrideBrowserWindowOptions: {\n      // ...\n    }\n  }\n})`\nRemoved: `additionalFeatures`\nThe deprecated `additionalFeatures` property in the `new-window` and\n`did-create-window` events of WebContents has been removed. Since `new-window`\nuses positional arguments, the argument is still present, but will always be\nthe empty array `[]`. (Though note, the `new-window` event itself is\ndeprecated, and is replaced by `setWindowOpenHandler`.) Bare keys in window\nfeatures will now present as keys with the value `true` in the options object.\n```js\n// Removed in Electron 14\n// Triggered by window.open('...', '', 'my-key')\nwebContents.on('did-create-window', (window, details) => {\n  if (details.additionalFeatures.includes('my-key')) {\n    // ...\n  }\n})\n// Replace with\nwebContents.on('did-create-window', (window, details) => {\n  if (details.options['my-key']) {\n    // ...\n  }\n})\n```\nPlanned Breaking API Changes (13.0)\nAPI Changed: `session.setPermissionCheckHandler(handler)`\nThe `handler` methods first parameter was previously always a `webContents`, it can now sometimes be `null`.  You should use the `requestingOrigin`, `embeddingOrigin` and `securityOrigin` properties to respond to the permission check correctly.  As the `webContents` can be `null` it can no longer be relied on.\n```js\n// Old code\nsession.setPermissionCheckHandler((webContents, permission) => {\n  if (webContents.getURL().startsWith('https://google.com/') && permission === 'notification') {\n    return true\n  }\n  return false\n})\n// Replace with\nsession.setPermissionCheckHandler((webContents, permission, requestingOrigin) => {\n  if (new URL(requestingOrigin).hostname === 'google.com' && permission === 'notification') {\n    return true\n  }\n  return false\n})\n```\nRemoved: `shell.moveItemToTrash()`\nThe deprecated synchronous `shell.moveItemToTrash()` API has been removed. Use\nthe asynchronous `shell.trashItem()` instead.\n`js\n// Removed in Electron 13\nshell.moveItemToTrash(path)\n// Replace with\nshell.trashItem(path).then(/* ... */)`\nRemoved: `BrowserWindow` extension APIs\nThe deprecated extension APIs have been removed:\n\n`BrowserWindow.addExtension(path)`\n`BrowserWindow.addDevToolsExtension(path)`\n`BrowserWindow.removeExtension(name)`\n`BrowserWindow.removeDevToolsExtension(name)`\n`BrowserWindow.getExtensions()`\n`BrowserWindow.getDevToolsExtensions()`\n\nUse the session APIs instead:\n\n`ses.loadExtension(path)`\n`ses.removeExtension(extension_id)`\n`ses.getAllExtensions()`\n\n`js\n// Removed in Electron 13\nBrowserWindow.addExtension(path)\nBrowserWindow.addDevToolsExtension(path)\n// Replace with\nsession.defaultSession.loadExtension(path)`\n`js\n// Removed in Electron 13\nBrowserWindow.removeExtension(name)\nBrowserWindow.removeDevToolsExtension(name)\n// Replace with\nsession.defaultSession.removeExtension(extension_id)`\n`js\n// Removed in Electron 13\nBrowserWindow.getExtensions()\nBrowserWindow.getDevToolsExtensions()\n// Replace with\nsession.defaultSession.getAllExtensions()`\nRemoved: methods in `systemPreferences`\nThe following `systemPreferences` methods have been deprecated:\n\n`systemPreferences.isDarkMode()`\n`systemPreferences.isInvertedColorScheme()`\n`systemPreferences.isHighContrastColorScheme()`\n\nUse the following `nativeTheme` properties instead:\n\n`nativeTheme.shouldUseDarkColors`\n`nativeTheme.shouldUseInvertedColorScheme`\n`nativeTheme.shouldUseHighContrastColors`\n\n```js\n// Removed in Electron 13\nsystemPreferences.isDarkMode()\n// Replace with\nnativeTheme.shouldUseDarkColors\n// Removed in Electron 13\nsystemPreferences.isInvertedColorScheme()\n// Replace with\nnativeTheme.shouldUseInvertedColorScheme\n// Removed in Electron 13\nsystemPreferences.isHighContrastColorScheme()\n// Replace with\nnativeTheme.shouldUseHighContrastColors\n```\nDeprecated: WebContents `new-window` event\nThe `new-window` event of WebContents has been deprecated. It is replaced by webContents.setWindowOpenHandler().\n```js\n// Deprecated in Electron 13\nwebContents.on('new-window', (event) => {\n  event.preventDefault()\n})\n// Replace with\nwebContents.setWindowOpenHandler((details) => {\n  return { action: 'deny' }\n})\n```\nPlanned Breaking API Changes (12.0)\nRemoved: Pepper Flash support\nChromium has removed support for Flash, and so we must follow suit. See\nChromium's Flash Roadmap for more\ndetails.\nDefault Changed: `worldSafeExecuteJavaScript` defaults to `true`\nIn Electron 12, `worldSafeExecuteJavaScript` will be enabled by default.  To restore\nthe previous behavior, `worldSafeExecuteJavaScript: false` must be specified in WebPreferences.\nPlease note that setting this option to `false` is insecure.\nThis option will be removed in Electron 14 so please migrate your code to support the default\nvalue.\nDefault Changed: `contextIsolation` defaults to `true`\nIn Electron 12, `contextIsolation` will be enabled by default.  To restore\nthe previous behavior, `contextIsolation: false` must be specified in WebPreferences.\nWe recommend having contextIsolation enabled for the security of your application.\nAnother implication is that `require()` cannot be used in the renderer process unless\n`nodeIntegration` is `true` and `contextIsolation` is `false`.\nFor more details see: https://github.com/electron/electron/issues/23506\nRemoved: `crashReporter.getCrashesDirectory()`\nThe `crashReporter.getCrashesDirectory` method has been removed. Usage\nshould be replaced by `app.getPath('crashDumps')`.\n`js\n// Removed in Electron 12\ncrashReporter.getCrashesDirectory()\n// Replace with\napp.getPath('crashDumps')`\nRemoved: `crashReporter` methods in the renderer process\nThe following `crashReporter` methods are no longer available in the renderer\nprocess:\n\n`crashReporter.start`\n`crashReporter.getLastCrashReport`\n`crashReporter.getUploadedReports`\n`crashReporter.getUploadToServer`\n`crashReporter.setUploadToServer`\n`crashReporter.getCrashesDirectory`\n\nThey should be called only from the main process.\nSee #23265 for more details.\nDefault Changed: `crashReporter.start({ compress: true })`\nThe default value of the `compress` option to `crashReporter.start` has changed\nfrom `false` to `true`. This means that crash dumps will be uploaded to the\ncrash ingestion server with the `Content-Encoding: gzip` header, and the body\nwill be compressed.\nIf your crash ingestion server does not support compressed payloads, you can\nturn off compression by specifying `{ compress: false }` in the crash reporter\noptions.\nDeprecated: `remote` module\nThe `remote` module is deprecated in Electron 12, and will be removed in\nElectron 14. It is replaced by the\n@electron/remote module.\n`js\n// Deprecated in Electron 12:\nconst { BrowserWindow } = require('electron').remote`\n```js\n// Replace with:\nconst { BrowserWindow } = require('@electron/remote')\n// In the main process:\nrequire('@electron/remote/main').initialize()\n```\nDeprecated: `shell.moveItemToTrash()`\nThe synchronous `shell.moveItemToTrash()` has been replaced by the new,\nasynchronous `shell.trashItem()`.\n`js\n// Deprecated in Electron 12\nshell.moveItemToTrash(path)\n// Replace with\nshell.trashItem(path).then(/* ... */)`\nPlanned Breaking API Changes (11.0)\nRemoved: `BrowserView.{destroy, fromId, fromWebContents, getAllViews}` and `id` property of `BrowserView`\nThe experimental APIs `BrowserView.{destroy, fromId, fromWebContents, getAllViews}`\nhave now been removed. Additionally, the `id` property of `BrowserView`\nhas also been removed.\nFor more detailed information, see #23578.\nPlanned Breaking API Changes (10.0)\nDeprecated: `companyName` argument to `crashReporter.start()`\nThe `companyName` argument to `crashReporter.start()`, which was previously\nrequired, is now optional, and further, is deprecated. To get the same\nbehavior in a non-deprecated way, you can pass a `companyName` value in\n`globalExtra`.\n`js\n// Deprecated in Electron 10\ncrashReporter.start({ companyName: 'Umbrella Corporation' })\n// Replace with\ncrashReporter.start({ globalExtra: { _companyName: 'Umbrella Corporation' } })`\nDeprecated: `crashReporter.getCrashesDirectory()`\nThe `crashReporter.getCrashesDirectory` method has been deprecated. Usage\nshould be replaced by `app.getPath('crashDumps')`.\n`js\n// Deprecated in Electron 10\ncrashReporter.getCrashesDirectory()\n// Replace with\napp.getPath('crashDumps')`\nDeprecated: `crashReporter` methods in the renderer process\nCalling the following `crashReporter` methods from the renderer process is\ndeprecated:\n\n`crashReporter.start`\n`crashReporter.getLastCrashReport`\n`crashReporter.getUploadedReports`\n`crashReporter.getUploadToServer`\n`crashReporter.setUploadToServer`\n`crashReporter.getCrashesDirectory`\n\nThe only non-deprecated methods remaining in the `crashReporter` module in the\nrenderer are `addExtraParameter`, `removeExtraParameter` and `getParameters`.\nAll above methods remain non-deprecated when called from the main process.\nSee #23265 for more details.\nDeprecated: `crashReporter.start({ compress: false })`\nSetting `{ compress: false }` in `crashReporter.start` is deprecated. Nearly\nall crash ingestion servers support gzip compression. This option will be\nremoved in a future version of Electron.\nDefault Changed: `enableRemoteModule` defaults to `false`\nIn Electron 9, using the remote module without explicitly enabling it via the\n`enableRemoteModule` WebPreferences option began emitting a warning. In\nElectron 10, the remote module is now disabled by default. To use the remote\nmodule, `enableRemoteModule: true` must be specified in WebPreferences:\n`js\nconst w = new BrowserWindow({\n  webPreferences: {\n    enableRemoteModule: true\n  }\n})`\nWe recommend moving away from the remote\nmodule.\n`protocol.unregisterProtocol`\n`protocol.uninterceptProtocol`\nThe APIs are now synchronous and the optional callback is no longer needed.\n`javascript\n// Deprecated\nprotocol.unregisterProtocol(scheme, () => { /* ... */ })\n// Replace with\nprotocol.unregisterProtocol(scheme)`\n`protocol.registerFileProtocol`\n`protocol.registerBufferProtocol`\n`protocol.registerStringProtocol`\n`protocol.registerHttpProtocol`\n`protocol.registerStreamProtocol`\n`protocol.interceptFileProtocol`\n`protocol.interceptStringProtocol`\n`protocol.interceptBufferProtocol`\n`protocol.interceptHttpProtocol`\n`protocol.interceptStreamProtocol`\nThe APIs are now synchronous and the optional callback is no longer needed.\n`javascript\n// Deprecated\nprotocol.registerFileProtocol(scheme, handler, () => { /* ... */ })\n// Replace with\nprotocol.registerFileProtocol(scheme, handler)`\nThe registered or intercepted protocol does not have effect on current page\nuntil navigation happens.\n`protocol.isProtocolHandled`\nThis API is deprecated and users should use `protocol.isProtocolRegistered`\nand `protocol.isProtocolIntercepted` instead.\n`javascript\n// Deprecated\nprotocol.isProtocolHandled(scheme).then(() => { /* ... */ })\n// Replace with\nconst isRegistered = protocol.isProtocolRegistered(scheme)\nconst isIntercepted = protocol.isProtocolIntercepted(scheme)`\nPlanned Breaking API Changes (9.0)\nDefault Changed: Loading non-context-aware native modules in the renderer process is disabled by default\nAs of Electron 9 we do not allow loading of non-context-aware native modules in\nthe renderer process.  This is to improve security, performance and maintainability\nof Electron as a project.\nIf this impacts you, you can temporarily set `app.allowRendererProcessReuse` to `false`\nto revert to the old behavior.  This flag will only be an option until Electron 11 so\nyou should plan to update your native modules to be context aware.\nFor more detailed information see #18397.\nDeprecated: `BrowserWindow` extension APIs\nThe following extension APIs have been deprecated:\n\n`BrowserWindow.addExtension(path)`\n`BrowserWindow.addDevToolsExtension(path)`\n`BrowserWindow.removeExtension(name)`\n`BrowserWindow.removeDevToolsExtension(name)`\n`BrowserWindow.getExtensions()`\n`BrowserWindow.getDevToolsExtensions()`\n\nUse the session APIs instead:\n\n`ses.loadExtension(path)`\n`ses.removeExtension(extension_id)`\n`ses.getAllExtensions()`\n\n`js\n// Deprecated in Electron 9\nBrowserWindow.addExtension(path)\nBrowserWindow.addDevToolsExtension(path)\n// Replace with\nsession.defaultSession.loadExtension(path)`\n`js\n// Deprecated in Electron 9\nBrowserWindow.removeExtension(name)\nBrowserWindow.removeDevToolsExtension(name)\n// Replace with\nsession.defaultSession.removeExtension(extension_id)`\n`js\n// Deprecated in Electron 9\nBrowserWindow.getExtensions()\nBrowserWindow.getDevToolsExtensions()\n// Replace with\nsession.defaultSession.getAllExtensions()`\nRemoved: `<webview>.getWebContents()`\nThis API, which was deprecated in Electron 8.0, is now removed.\n`js\n// Removed in Electron 9.0\nwebview.getWebContents()\n// Replace with\nconst { remote } = require('electron')\nremote.webContents.fromId(webview.getWebContentsId())`\nRemoved: `webFrame.setLayoutZoomLevelLimits()`\nChromium has removed support for changing the layout zoom level limits, and it\nis beyond Electron's capacity to maintain it. The function was deprecated in\nElectron 8.x, and has been removed in Electron 9.x. The layout zoom level limits\nare now fixed at a minimum of 0.25 and a maximum of 5.0, as defined\nhere.\nBehavior Changed: Sending non-JS objects over IPC now throws an exception\nIn Electron 8.0, IPC was changed to use the Structured Clone Algorithm,\nbringing significant performance improvements. To help ease the transition, the\nold IPC serialization algorithm was kept and used for some objects that aren't\nserializable with Structured Clone. In particular, DOM objects (e.g. `Element`,\n`Location` and `DOMMatrix`), Node.js objects backed by C++ classes (e.g.\n`process.env`, some members of `Stream`), and Electron objects backed by C++\nclasses (e.g. `WebContents`, `BrowserWindow` and `WebFrame`) are not\nserializable with Structured Clone. Whenever the old algorithm was invoked, a\ndeprecation warning was printed.\nIn Electron 9.0, the old serialization algorithm has been removed, and sending\nsuch non-serializable objects will now throw an \"object could not be cloned\"\nerror.\nAPI Changed: `shell.openItem` is now `shell.openPath`\nThe `shell.openItem` API has been replaced with an asynchronous `shell.openPath` API.\nYou can see the original API proposal and reasoning here.\nPlanned Breaking API Changes (8.0)\nBehavior Changed: Values sent over IPC are now serialized with Structured Clone Algorithm\nThe algorithm used to serialize objects sent over IPC (through\n`ipcRenderer.send`, `ipcRenderer.sendSync`, `WebContents.send` and related\nmethods) has been switched from a custom algorithm to V8's built-in Structured\nClone Algorithm, the same algorithm used to serialize messages for\n`postMessage`. This brings about a 2x performance improvement for large\nmessages, but also brings some breaking changes in behavior.\n\nSending Functions, Promises, WeakMaps, WeakSets, or objects containing any\n  such values, over IPC will now throw an exception, instead of silently\n  converting the functions to `undefined`.\n\n```js\n// Previously:\nipcRenderer.send('channel', { value: 3, someFunction: () => {} })\n// => results in { value: 3 } arriving in the main process\n// From Electron 8:\nipcRenderer.send('channel', { value: 3, someFunction: () => {} })\n// => throws Error(\"() => {} could not be cloned.\")\n```\n\n`NaN`, `Infinity` and `-Infinity` will now be correctly serialized, instead\n  of being converted to `null`.\nObjects containing cyclic references will now be correctly serialized,\n  instead of being converted to `null`.\n`Set`, `Map`, `Error` and `RegExp` values will be correctly serialized,\n  instead of being converted to `{}`.\n`BigInt` values will be correctly serialized, instead of being converted to\n  `null`.\nSparse arrays will be serialized as such, instead of being converted to dense\n  arrays with `null`s.\n`Date` objects will be transferred as `Date` objects, instead of being\n  converted to their ISO string representation.\nTyped Arrays (such as `Uint8Array`, `Uint16Array`, `Uint32Array` and so on)\n  will be transferred as such, instead of being converted to Node.js `Buffer`.\nNode.js `Buffer` objects will be transferred as `Uint8Array`s. You can\n  convert a `Uint8Array` back to a Node.js `Buffer` by wrapping the underlying\n  `ArrayBuffer`:\n\n`js\nBuffer.from(value.buffer, value.byteOffset, value.byteLength)`\nSending any objects that aren't native JS types, such as DOM objects (e.g.\n`Element`, `Location`, `DOMMatrix`), Node.js objects (e.g. `process.env`,\n`Stream`), or Electron objects (e.g. `WebContents`, `BrowserWindow`,\n`WebFrame`) is deprecated. In Electron 8, these objects will be serialized as\nbefore with a DeprecationWarning message, but starting in Electron 9, sending\nthese kinds of objects will throw a 'could not be cloned' error.\nDeprecated: `<webview>.getWebContents()`\nThis API is implemented using the `remote` module, which has both performance\nand security implications. Therefore its usage should be explicit.\n`js\n// Deprecated\nwebview.getWebContents()\n// Replace with\nconst { remote } = require('electron')\nremote.webContents.fromId(webview.getWebContentsId())`\nHowever, it is recommended to avoid using the `remote` module altogether.\n```js\n// main\nconst { ipcMain, webContents } = require('electron')\nconst getGuestForWebContents = (webContentsId, contents) => {\n  const guest = webContents.fromId(webContentsId)\n  if (!guest) {\n    throw new Error(`Invalid webContentsId: ${webContentsId}`)\n  }\n  if (guest.hostWebContents !== contents) {\n    throw new Error('Access denied to webContents')\n  }\n  return guest\n}\nipcMain.handle('openDevTools', (event, webContentsId) => {\n  const guest = getGuestForWebContents(webContentsId, event.sender)\n  guest.openDevTools()\n})\n// renderer\nconst { ipcRenderer } = require('electron')\nipcRenderer.invoke('openDevTools', webview.getWebContentsId())\n```\nDeprecated: `webFrame.setLayoutZoomLevelLimits()`\nChromium has removed support for changing the layout zoom level limits, and it\nis beyond Electron's capacity to maintain it. The function will emit a warning\nin Electron 8.x, and cease to exist in Electron 9.x. The layout zoom level\nlimits are now fixed at a minimum of 0.25 and a maximum of 5.0, as defined\nhere.\nDeprecated events in `systemPreferences`\nThe following `systemPreferences` events have been deprecated:\n\n`inverted-color-scheme-changed`\n`high-contrast-color-scheme-changed`\n\nUse the new `updated` event on the `nativeTheme` module instead.\n```js\n// Deprecated\nsystemPreferences.on('inverted-color-scheme-changed', () => { / ... / })\nsystemPreferences.on('high-contrast-color-scheme-changed', () => { / ... / })\n// Replace with\nnativeTheme.on('updated', () => { / ... / })\n```\nDeprecated: methods in `systemPreferences`\nThe following `systemPreferences` methods have been deprecated:\n\n`systemPreferences.isDarkMode()`\n`systemPreferences.isInvertedColorScheme()`\n`systemPreferences.isHighContrastColorScheme()`\n\nUse the following `nativeTheme` properties instead:\n\n`nativeTheme.shouldUseDarkColors`\n`nativeTheme.shouldUseInvertedColorScheme`\n`nativeTheme.shouldUseHighContrastColors`\n\n```js\n// Deprecated\nsystemPreferences.isDarkMode()\n// Replace with\nnativeTheme.shouldUseDarkColors\n// Deprecated\nsystemPreferences.isInvertedColorScheme()\n// Replace with\nnativeTheme.shouldUseInvertedColorScheme\n// Deprecated\nsystemPreferences.isHighContrastColorScheme()\n// Replace with\nnativeTheme.shouldUseHighContrastColors\n```\nPlanned Breaking API Changes (7.0)\nDeprecated: Atom.io Node Headers URL\nThis is the URL specified as `disturl` in a `.npmrc` file or as the `--dist-url`\ncommand line flag when building native Node modules.  Both will be supported for\nthe foreseeable future but it is recommended that you switch.\nDeprecated: https://atom.io/download/electron\nReplace with: https://electronjs.org/headers\nAPI Changed: `session.clearAuthCache()` no longer accepts options\nThe `session.clearAuthCache` API no longer accepts options for what to clear, and instead unconditionally clears the whole cache.\n`js\n// Deprecated\nsession.clearAuthCache({ type: 'password' })\n// Replace with\nsession.clearAuthCache()`\nAPI Changed: `powerMonitor.querySystemIdleState` is now `powerMonitor.getSystemIdleState`\n`js\n// Removed in Electron 7.0\npowerMonitor.querySystemIdleState(threshold, callback)\n// Replace with synchronous API\nconst idleState = powerMonitor.getSystemIdleState(threshold)`\nAPI Changed: `powerMonitor.querySystemIdleTime` is now `powerMonitor.getSystemIdleTime`\n`js\n// Removed in Electron 7.0\npowerMonitor.querySystemIdleTime(callback)\n// Replace with synchronous API\nconst idleTime = powerMonitor.getSystemIdleTime()`\nAPI Changed: `webFrame.setIsolatedWorldInfo` replaces separate methods\n`js\n// Removed in Electron 7.0\nwebFrame.setIsolatedWorldContentSecurityPolicy(worldId, csp)\nwebFrame.setIsolatedWorldHumanReadableName(worldId, name)\nwebFrame.setIsolatedWorldSecurityOrigin(worldId, securityOrigin)\n// Replace with\nwebFrame.setIsolatedWorldInfo(\n  worldId,\n  {\n    securityOrigin: 'some_origin',\n    name: 'human_readable_name',\n    csp: 'content_security_policy'\n  })`\nRemoved: `marked` property on `getBlinkMemoryInfo`\nThis property was removed in Chromium 77, and as such is no longer available.\nBehavior Changed: `webkitdirectory` attribute for `<input type=\"file\"/>` now lists directory contents\nThe `webkitdirectory` property on HTML file inputs allows them to select folders.\nPrevious versions of Electron had an incorrect implementation where the `event.target.files`\nof the input returned a `FileList` that returned one `File` corresponding to the selected folder.\nAs of Electron 7, that `FileList` is now list of all files contained within\nthe folder, similarly to Chrome, Firefox, and Edge\n(link to MDN docs).\nAs an illustration, take a folder with this structure:\n`console\nfolder\n\u251c\u2500\u2500 file1\n\u251c\u2500\u2500 file2\n\u2514\u2500\u2500 file3`\nIn Electron <=6, this would return a `FileList` with a `File` object for:\n`console\npath/to/folder`\nIn Electron 7, this now returns a `FileList` with a `File` object for:\n`console\n/path/to/folder/file3\n/path/to/folder/file2\n/path/to/folder/file1`\nNote that `webkitdirectory` no longer exposes the path to the selected folder.\nIf you require the path to the selected folder rather than the folder contents,\nsee the `dialog.showOpenDialog` API (link).\nAPI Changed: Callback-based versions of promisified APIs\nElectron 5 and Electron 6 introduced Promise-based versions of existing\nasynchronous APIs and deprecated their older, callback-based counterparts.\nIn Electron 7, all deprecated callback-based APIs are now removed.\nThese functions now only return Promises:\n\n`app.getFileIcon()` #15742\n`app.dock.show()` #16904\n`contentTracing.getCategories()` #16583\n`contentTracing.getTraceBufferUsage()` #16600\n`contentTracing.startRecording()` #16584\n`contentTracing.stopRecording()` #16584\n`contents.executeJavaScript()` #17312\n`cookies.flushStore()` #16464\n`cookies.get()` #16464\n`cookies.remove()` #16464\n`cookies.set()` #16464\n`debugger.sendCommand()` #16861\n`dialog.showCertificateTrustDialog()` #17181\n`inAppPurchase.getProducts()` #17355\n`inAppPurchase.purchaseProduct()`#17355\n`netLog.stopLogging()` #16862\n`session.clearAuthCache()` #17259\n`session.clearCache()` #17185\n`session.clearHostResolverCache()` #17229\n`session.clearStorageData()` #17249\n`session.getBlobData()` #17303\n`session.getCacheSize()` #17185\n`session.resolveProxy()` #17222\n`session.setProxy()` #17222\n`shell.openExternal()` #16176\n`webContents.loadFile()` #15855\n`webContents.loadURL()` #15855\n`webContents.hasServiceWorker()` #16535\n`webContents.printToPDF()` #16795\n`webContents.savePage()` #16742\n`webFrame.executeJavaScript()` #17312\n`webFrame.executeJavaScriptInIsolatedWorld()` #17312\n`webviewTag.executeJavaScript()` #17312\n`win.capturePage()` #15743\n\nThese functions now have two forms, synchronous and Promise-based asynchronous:\n\n`dialog.showMessageBox()`/`dialog.showMessageBoxSync()` #17298\n`dialog.showOpenDialog()`/`dialog.showOpenDialogSync()` #16973\n`dialog.showSaveDialog()`/`dialog.showSaveDialogSync()` #17054\n\nPlanned Breaking API Changes (6.0)\nAPI Changed: `win.setMenu(null)` is now `win.removeMenu()`\n`js\n// Deprecated\nwin.setMenu(null)\n// Replace with\nwin.removeMenu()`\nAPI Changed: `electron.screen` in the renderer process should be accessed via `remote`\n`js\n// Deprecated\nrequire('electron').screen\n// Replace with\nrequire('electron').remote.screen`\nAPI Changed: `require()`ing node builtins in sandboxed renderers no longer implicitly loads the `remote` version\n```js\n// Deprecated\nrequire('child_process')\n// Replace with\nrequire('electron').remote.require('child_process')\n// Deprecated\nrequire('fs')\n// Replace with\nrequire('electron').remote.require('fs')\n// Deprecated\nrequire('os')\n// Replace with\nrequire('electron').remote.require('os')\n// Deprecated\nrequire('path')\n// Replace with\nrequire('electron').remote.require('path')\n```\nDeprecated: `powerMonitor.querySystemIdleState` replaced with `powerMonitor.getSystemIdleState`\n`js\n// Deprecated\npowerMonitor.querySystemIdleState(threshold, callback)\n// Replace with synchronous API\nconst idleState = powerMonitor.getSystemIdleState(threshold)`\nDeprecated: `powerMonitor.querySystemIdleTime` replaced with `powerMonitor.getSystemIdleTime`\n`js\n// Deprecated\npowerMonitor.querySystemIdleTime(callback)\n// Replace with synchronous API\nconst idleTime = powerMonitor.getSystemIdleTime()`\nDeprecated: `app.enableMixedSandbox()` is no longer needed\n`js\n// Deprecated\napp.enableMixedSandbox()`\nMixed-sandbox mode is now enabled by default.\nDeprecated: `Tray.setHighlightMode`\nUnder macOS Catalina our former Tray implementation breaks.\nApple's native substitute doesn't support changing the highlighting behavior.\n`js\n// Deprecated\ntray.setHighlightMode(mode)\n// API will be removed in v7.0 without replacement.`\nPlanned Breaking API Changes (5.0)\nDefault Changed: `nodeIntegration` and `webviewTag` default to false, `contextIsolation` defaults to true\nThe following `webPreferences` option default values are deprecated in favor of the new defaults listed below.\n| Property | Deprecated Default | New Default |\n|----------|--------------------|-------------|\n| `contextIsolation` | `false` | `true` |\n| `nodeIntegration` | `true` | `false` |\n| `webviewTag` | `nodeIntegration` if set else `true` | `false` |\nE.g. Re-enabling the webviewTag\n`js\nconst w = new BrowserWindow({\n  webPreferences: {\n    webviewTag: true\n  }\n})`\nBehavior Changed: `nodeIntegration` in child windows opened via `nativeWindowOpen`\nChild windows opened with the `nativeWindowOpen` option will always have Node.js integration disabled, unless `nodeIntegrationInSubFrames` is `true`.\nAPI Changed: Registering privileged schemes must now be done before app ready\nRenderer process APIs `webFrame.registerURLSchemeAsPrivileged` and `webFrame.registerURLSchemeAsBypassingCSP` as well as browser process API `protocol.registerStandardSchemes` have been removed.\nA new API, `protocol.registerSchemesAsPrivileged` has been added and should be used for registering custom schemes with the required privileges. Custom schemes are required to be registered before app ready.\nDeprecated: `webFrame.setIsolatedWorld*` replaced with `webFrame.setIsolatedWorldInfo`\n`js\n// Deprecated\nwebFrame.setIsolatedWorldContentSecurityPolicy(worldId, csp)\nwebFrame.setIsolatedWorldHumanReadableName(worldId, name)\nwebFrame.setIsolatedWorldSecurityOrigin(worldId, securityOrigin)\n// Replace with\nwebFrame.setIsolatedWorldInfo(\n  worldId,\n  {\n    securityOrigin: 'some_origin',\n    name: 'human_readable_name',\n    csp: 'content_security_policy'\n  })`\nAPI Changed: `webFrame.setSpellCheckProvider` now takes an asynchronous callback\nThe `spellCheck` callback is now asynchronous, and `autoCorrectWord` parameter has been removed.\n`js\n// Deprecated\nwebFrame.setSpellCheckProvider('en-US', true, {\n  spellCheck: (text) => {\n    return !spellchecker.isMisspelled(text)\n  }\n})\n// Replace with\nwebFrame.setSpellCheckProvider('en-US', {\n  spellCheck: (words, callback) => {\n    callback(words.filter(text => spellchecker.isMisspelled(text)))\n  }\n})`\nAPI Changed: `webContents.getZoomLevel` and `webContents.getZoomFactor` are now synchronous\n`webContents.getZoomLevel` and `webContents.getZoomFactor` no longer take callback parameters,\ninstead directly returning their number values.\n`js\n// Deprecated\nwebContents.getZoomLevel((level) => {\n  console.log(level)\n})\n// Replace with\nconst level = webContents.getZoomLevel()\nconsole.log(level)`\n`js\n// Deprecated\nwebContents.getZoomFactor((factor) => {\n  console.log(factor)\n})\n// Replace with\nconst factor = webContents.getZoomFactor()\nconsole.log(factor)`\nPlanned Breaking API Changes (4.0)\nThe following list includes the breaking API changes made in Electron 4.0.\n`app.makeSingleInstance`\n`js\n// Deprecated\napp.makeSingleInstance((argv, cwd) => {\n  /* ... */\n})\n// Replace with\napp.requestSingleInstanceLock()\napp.on('second-instance', (event, argv, cwd) => {\n  /* ... */\n})`\n`app.releaseSingleInstance`\n`js\n// Deprecated\napp.releaseSingleInstance()\n// Replace with\napp.releaseSingleInstanceLock()`\n`app.getGPUInfo`\n`js\napp.getGPUInfo('complete')\n// Now behaves the same with `basic` on macOS\napp.getGPUInfo('basic')`\n`win_delay_load_hook`\nWhen building native modules for windows, the `win_delay_load_hook` variable in\nthe module's `binding.gyp` must be true (which is the default). If this hook is\nnot present, then the native module will fail to load on Windows, with an error\nmessage like `Cannot find module`. See the native module\nguide for more.\nRemoved: IA32 Linux support\nElectron 18 will no longer run on 32-bit Linux systems. See discontinuing support for 32-bit Linux for more information.\nBreaking API Changes (3.0)\nThe following list includes the breaking API changes in Electron 3.0.\n`app`\n```js\n// Deprecated\napp.getAppMemoryInfo()\n// Replace with\napp.getAppMetrics()\n// Deprecated\nconst metrics = app.getAppMetrics()\nconst { memory } = metrics[0] // Deprecated property\n```\n`BrowserWindow`\n```js\n// Deprecated\nconst optionsA = { webPreferences: { blinkFeatures: '' } }\nconst windowA = new BrowserWindow(optionsA)\n// Replace with\nconst optionsB = { webPreferences: { enableBlinkFeatures: '' } }\nconst windowB = new BrowserWindow(optionsB)\n// Deprecated\nwindow.on('app-command', (e, cmd) => {\n  if (cmd === 'media-play_pause') {\n    // do something\n  }\n})\n// Replace with\nwindow.on('app-command', (e, cmd) => {\n  if (cmd === 'media-play-pause') {\n    // do something\n  }\n})\n```\n`clipboard`\n```js\n// Deprecated\nclipboard.readRtf()\n// Replace with\nclipboard.readRTF()\n// Deprecated\nclipboard.writeRtf()\n// Replace with\nclipboard.writeRTF()\n// Deprecated\nclipboard.readHtml()\n// Replace with\nclipboard.readHTML()\n// Deprecated\nclipboard.writeHtml()\n// Replace with\nclipboard.writeHTML()\n```\n`crashReporter`\n`js\n// Deprecated\ncrashReporter.start({\n  companyName: 'Crashly',\n  submitURL: 'https://crash.server.com',\n  autoSubmit: true\n})\n// Replace with\ncrashReporter.start({\n  companyName: 'Crashly',\n  submitURL: 'https://crash.server.com',\n  uploadToServer: true\n})`\n`nativeImage`\n`js\n// Deprecated\nnativeImage.createFromBuffer(buffer, 1.0)\n// Replace with\nnativeImage.createFromBuffer(buffer, {\n  scaleFactor: 1.0\n})`\n`process`\n`js\n// Deprecated\nconst info = process.getProcessMemoryInfo()`\n`screen`\n`js\n// Deprecated\nscreen.getMenuBarHeight()\n// Replace with\nscreen.getPrimaryDisplay().workArea`\n`session`\n`js\n// Deprecated\nses.setCertificateVerifyProc((hostname, certificate, callback) => {\n  callback(true)\n})\n// Replace with\nses.setCertificateVerifyProc((request, callback) => {\n  callback(0)\n})`\n`Tray`\n```js\n// Deprecated\ntray.setHighlightMode(true)\n// Replace with\ntray.setHighlightMode('on')\n// Deprecated\ntray.setHighlightMode(false)\n// Replace with\ntray.setHighlightMode('off')\n```\n`webContents`\n```js\n// Deprecated\nwebContents.openDevTools({ detach: true })\n// Replace with\nwebContents.openDevTools({ mode: 'detach' })\n// Removed\nwebContents.setSize(options)\n// There is no replacement for this API\n```\n`webFrame`\n```js\n// Deprecated\nwebFrame.registerURLSchemeAsSecure('app')\n// Replace with\nprotocol.registerStandardSchemes(['app'], { secure: true })\n// Deprecated\nwebFrame.registerURLSchemeAsPrivileged('app', { secure: true })\n// Replace with\nprotocol.registerStandardSchemes(['app'], { secure: true })\n```\n`<webview>`\n```js\n// Removed\nwebview.setAttribute('disableguestresize', '')\n// There is no replacement for this API\n// Removed\nwebview.setAttribute('guestinstance', instanceId)\n// There is no replacement for this API\n// Keyboard listeners no longer work on webview tag\nwebview.onkeydown = () => { / handler / }\nwebview.onkeyup = () => { / handler / }\n```\nNode Headers URL\nThis is the URL specified as `disturl` in a `.npmrc` file or as the `--dist-url`\ncommand line flag when building native Node modules.\nDeprecated: https://atom.io/download/atom-shell\nReplace with: https://atom.io/download/electron\nBreaking API Changes (2.0)\nThe following list includes the breaking API changes made in Electron 2.0.\n`BrowserWindow`\n`js\n// Deprecated\nconst optionsA = { titleBarStyle: 'hidden-inset' }\nconst windowA = new BrowserWindow(optionsA)\n// Replace with\nconst optionsB = { titleBarStyle: 'hiddenInset' }\nconst windowB = new BrowserWindow(optionsB)`\n`menu`\n`js\n// Removed\nmenu.popup(browserWindow, 100, 200, 2)\n// Replaced with\nmenu.popup(browserWindow, { x: 100, y: 200, positioningItem: 2 })`\n`nativeImage`\n```js\n// Removed\nnativeImage.toPng()\n// Replaced with\nnativeImage.toPNG()\n// Removed\nnativeImage.toJpeg()\n// Replaced with\nnativeImage.toJPEG()\n```\n`process`\n\n`process.versions.electron` and `process.version.chrome` will be made\n  read-only properties for consistency with the other `process.versions`\n  properties set by Node.\n\n`webContents`\n`js\n// Removed\nwebContents.setZoomLevelLimits(1, 2)\n// Replaced with\nwebContents.setVisualZoomLevelLimits(1, 2)`\n`webFrame`\n`js\n// Removed\nwebFrame.setZoomLevelLimits(1, 2)\n// Replaced with\nwebFrame.setVisualZoomLevelLimits(1, 2)`\n`<webview>`\n`js\n// Removed\nwebview.setZoomLevelLimits(1, 2)\n// Replaced with\nwebview.setVisualZoomLevelLimits(1, 2)`\nDuplicate ARM Assets\nEach Electron release includes two identical ARM builds with slightly different\nfilenames, like `electron-v1.7.3-linux-arm.zip` and\n`electron-v1.7.3-linux-armv7l.zip`. The asset with the `v7l` prefix was added\nto clarify to users which ARM version it supports, and to disambiguate it from\nfuture armv6l and arm64 assets that may be produced.\nThe file without the prefix is still being published to avoid breaking any\nsetups that may be consuming it. Starting at 2.0, the unprefixed file will\nno longer be published.\nFor details, see\n6986\nand",
    "tag": "electron"
  },
  {
    "title": "Glossary",
    "source": "https://github.com/electron/electron/tree/main/docs/glossary.md",
    "content": "Glossary\nThis page defines some terminology that is commonly used in Electron development.\nASAR\nASAR stands for Atom Shell Archive Format. An asar archive is a simple\n`tar`-like format that concatenates files into a single file. Electron can read\narbitrary files from it without unpacking the whole file.\nThe ASAR format was created primarily to improve performance on Windows when\nreading large quantities of small files (e.g. when loading your app's JavaScript\ndependency tree from `node_modules`).\ncode signing\nCode signing is a process where an app developer digitally signs their code to\nensure that it hasn't been tampered with after packaging. Both Windows and\nmacOS implement their own version of code signing. As a desktop app developer,\nit's important that you sign your code if you plan on distributing it to the\ngeneral public.\nFor more information, read the Code Signing tutorial.\ncontext isolation\nContext isolation is a security measure in Electron that ensures that your\npreload script cannot leak privileged Electron or Node.js APIs to the web\ncontents in your renderer process. With context isolation enabled, the\nonly way to expose APIs from your preload script is through the\n`contextBridge` API.\nFor more information, read the Context Isolation tutorial.\nSee also: preload script, renderer process\nCRT\nThe C Runtime Library (CRT) is the part of the C++ Standard Library that\nincorporates the ISO C99 standard library. The Visual C++ libraries that\nimplement the CRT support native code development, and both mixed native and\nmanaged code, and pure managed code for .NET development.\nDMG\nAn Apple Disk Image is a packaging format used by macOS. DMG files are\ncommonly used for distributing application \"installers\".\nIME\nInput Method Editor. A program that allows users to enter characters and\nsymbols not found on their keyboard. For example, this allows users of Latin\nkeyboards to input Chinese, Japanese, Korean and Indic characters.\nIDL\nInterface description language. Write function signatures and data types in a\nformat that can be used to generate interfaces in Java, C++, JavaScript, etc.\nIPC\nIPC stands for inter-process communication. Electron uses IPC to send\nserialized JSON messages between the main and renderer processes.\nsee also: main process, renderer process\nmain process\nThe main process, commonly a file named `main.js`, is the entry point to every\nElectron app. It controls the life of the app, from open to close. It also\nmanages native elements such as the Menu, Menu Bar, Dock, Tray, etc. The\nmain process is responsible for creating each new renderer process in the app.\nThe full Node API is built in.\nEvery app's main process file is specified in the `main` property in\n`package.json`. This is how `electron .` knows what file to execute at startup.\nIn Chromium, this process is referred to as the \"browser process\". It is\nrenamed in Electron to avoid confusion with renderer processes.\nSee also: process, renderer process\nMAS\nAcronym for Apple's Mac App Store. For details on submitting your app to the\nMAS, see the Mac App Store Submission Guide.\nMojo\nAn IPC system for communicating intra- or inter-process, and that's important\nbecause Chrome is keen on being able to split its work into separate processes\nor not, depending on memory pressures etc.\nSee https://chromium.googlesource.com/chromium/src/+/main/mojo/README.md\nSee also: IPC\nMSI\nOn Windows, MSI packages are used by the Windows Installer\n(also known as Microsoft Installer) service to install and configure\napplications.\nMore information can be found in Microsoft's documentation.\nnative modules\nNative modules (also called addons in\nNode.js) are modules written in C or C++ that can be loaded into Node.js or\nElectron using the require() function, and used as if they were an\nordinary Node.js module. They are used primarily to provide an interface\nbetween JavaScript running in Node.js and C/C++ libraries.\nNative Node modules are supported by Electron, but since Electron is very\nlikely to use a different V8 version from the Node binary installed in your\nsystem, you have to manually specify the location of Electron\u2019s headers when\nbuilding native modules.\nFor more information, read the Native Node Modules tutorial.\nnotarization\nNotarization is a macOS-specific process where a developer can send a\ncode-signed app to Apple servers to get verified for malicious\ncomponents through an automated service.\nSee also: code signing\nOSR\nOSR (offscreen rendering) can be used for loading heavy page in\nbackground and then displaying it after (it will be much faster).\nIt allows you to render page without showing it on screen.\nFor more information, read the Offscreen Rendering tutorial.\npreload script\nPreload scripts contain code that executes in a renderer process\nbefore its web contents begin loading. These scripts run within\nthe renderer context, but are granted more privileges by having\naccess to Node.js APIs.\nSee also: renderer process, context isolation\nprocess\nA process is an instance of a computer program that is being executed. Electron\napps that make use of the main and one or many renderer process are\nactually running several programs simultaneously.\nIn Node.js and Electron, each running process has a `process` object. This\nobject is a global that provides information about, and control over, the\ncurrent process. As a global, it is always available to applications without\nusing require().\nSee also: main process, renderer process\nrenderer process\nThe renderer process is a browser window in your app. Unlike the main process,\nthere can be multiple of these and each is run in a separate process.\nThey can also be hidden.\nSee also: process, main process\nsandbox\nThe sandbox is a security feature inherited from Chromium that restricts\nyour renderer processes to a limited set of permissions.\nFor more information, read the Process Sandboxing tutorial.\nSee also: process\nSquirrel\nSquirrel is an open-source framework that enables Electron apps to update\nautomatically as new versions are released. See the autoUpdater API for\ninfo about getting started with Squirrel.\nuserland\nThis term originated in the Unix community, where \"userland\" or \"userspace\"\nreferred to programs that run outside of the operating system kernel. More\nrecently, the term has been popularized in the Node and npm community to\ndistinguish between the features available in \"Node core\" versus packages\npublished to the npm registry by the much larger \"user\" community.\nLike Node, Electron is focused on having a small set of APIs that provide\nall the necessary primitives for developing multi-platform desktop applications.\nThis design philosophy allows Electron to remain a flexible tool without being\noverly prescriptive about how it should be used. Userland enables users to\ncreate and share tools that provide additional functionality on top of what is\navailable in \"core\".\nutility process\nThe utility process is a child of the main process that allows running any\nuntrusted services that cannot be run in the main process. Chromium uses this\nprocess to perform network I/O, audio/video processing, device inputs etc.\nIn Electron, you can create this process using [UtilityProcess][] API.\nSee also: process, main process\nV8\nV8 is Google's open source JavaScript engine. It is written in C++ and is\nused in Google Chrome. V8 can run standalone, or can be embedded into any C++ application.\nElectron builds V8 as part of Chromium and then points Node to that V8 when\nbuilding it.\nV8's version numbers always correspond to those of Google Chrome. Chrome 59\nincludes V8 5.9, Chrome 58 includes V8 5.8, etc.\n\nv8.dev\nnodejs.org/api/v8.html\ndocs/development/v8-development.md\n\nwebview\n`webview` tags are used to embed 'guest' content (such as external web pages) in\nyour Electron app. They are similar to `iframe`s, but differ in that each\nwebview runs in a separate process. It doesn't have the same\npermissions as your web page and all interactions between your app and\nembedded content will be asynchronous. This keeps your app safe from the\nembedded content.",
    "tag": "electron"
  },
  {
    "title": "Electron FAQ",
    "source": "https://github.com/electron/electron/tree/main/docs/faq.md",
    "content": "Electron FAQ\nWhy am I having trouble installing Electron?\nWhen running `npm install electron`, some users occasionally encounter\ninstallation errors.\nIn almost all cases, these errors are the result of network problems and not\nactual issues with the `electron` npm package. Errors like `ELIFECYCLE`,\n`EAI_AGAIN`, `ECONNRESET`, and `ETIMEDOUT` are all indications of such\nnetwork problems. The best resolution is to try switching networks, or\nwait a bit and try installing again.\nYou can also attempt to download Electron directly from\nelectron/electron/releases\nif installing via `npm` is failing.\nWhen will Electron upgrade to latest Chrome?\nThe Chrome version of Electron is usually bumped within one or two weeks after\na new stable Chrome version gets released. This estimate is not guaranteed and\ndepends on the amount of work involved with upgrading.\nOnly the stable channel of Chrome is used. If an important fix is in beta or dev\nchannel, we will back-port it.\nFor more information, please see the security introduction.\nWhen will Electron upgrade to latest Node.js?\nWhen a new version of Node.js gets released, we usually wait for about a month\nbefore upgrading the one in Electron. So we can avoid getting affected by bugs\nintroduced in new Node.js versions, which happens very often.\nNew features of Node.js are usually brought by V8 upgrades, since Electron is\nusing the V8 shipped by Chrome browser, the shiny new JavaScript feature of a\nnew Node.js version is usually already in Electron.\nHow to share data between web pages?\nTo share data between web pages (the renderer processes) the simplest way is to\nuse HTML5 APIs which are already available in browsers. Good candidates are\nStorage API, localStorage,\nsessionStorage, and IndexedDB.\nAlternatively, you can use the IPC primitives that are provided by Electron. To\nshare data between the main and renderer processes, you can use the\nipcMain and ipcRenderer modules.\nTo communicate directly between web pages, you can send a\nMessagePort from one to the other, possibly via the main process\nusing ipcRenderer.postMessage().\nSubsequent communication over message ports is direct and does not detour through\nthe main process.\nMy app's tray disappeared after a few minutes.\nThis happens when the variable which is used to store the tray gets\ngarbage collected.\nIf you encounter this problem, the following articles may prove helpful:\n\nMemory Management\nVariable Scope\n\nIf you want a quick fix, you can make the variables global by changing your\ncode from this:\n`javascript\nconst { app, Tray } = require('electron')\napp.whenReady().then(() => {\n  const tray = new Tray('/path/to/icon.png')\n  tray.setTitle('hello world')\n})`\nto this:\n`javascript\nconst { app, Tray } = require('electron')\nlet tray = null\napp.whenReady().then(() => {\n  tray = new Tray('/path/to/icon.png')\n  tray.setTitle('hello world')\n})`\nI can not use jQuery/RequireJS/Meteor/AngularJS in Electron.\nDue to the Node.js integration of Electron, there are some extra symbols\ninserted into the DOM like `module`, `exports`, `require`. This causes problems\nfor some libraries since they want to insert the symbols with the same names.\nTo solve this, you can turn off node integration in Electron:\n`javascript\n// In the main process.\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({\n  webPreferences: {\n    nodeIntegration: false\n  }\n})\nwin.show()`\nBut if you want to keep the abilities of using Node.js and Electron APIs, you\nhave to rename the symbols in the page before including other libraries:\n```html\n\n\n\n\n```\n`require('electron').xxx` is undefined.\nWhen using Electron's built-in module you might encounter an error like this:\n```sh\n\nrequire('electron').webFrame.setZoomFactor(1.0)\nUncaught TypeError: Cannot read property 'setZoomLevel' of undefined\n```\n\nIt is very likely you are using the module in the wrong process. For example\n`electron.app` can only be used in the main process, while `electron.webFrame`\nis only available in renderer processes.\nThe font looks blurry, what is this and what can I do?\nIf sub-pixel anti-aliasing is deactivated, then fonts on LCD screens can look blurry. Example:\n\nSub-pixel anti-aliasing needs a non-transparent background of the layer containing the font glyphs. (See this issue for more info).\nTo achieve this goal, set the background in the constructor for [BrowserWindow][browser-window]:\n`javascript\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({\n  backgroundColor: '#fff'\n})`\nThe effect is visible only on (some?) LCD screens. Even if you don't see a difference, some of your users may. It is best to always set the background this way, unless you have reasons not to do so.\nNotice that just setting the background in the CSS does not have the desired effect.",
    "tag": "electron"
  },
  {
    "title": "Official Guides",
    "source": "https://github.com/electron/electron/tree/main/docs/",
    "content": "Official Guides\nPlease make sure that you use the documents that match your Electron version.\nThe version number should be a part of the page URL. If it's not, you are\nprobably using the documentation of a development branch which may contain API\nchanges that are not compatible with your Electron version. To view older\nversions of the documentation, you can\nbrowse by tag\non GitHub by opening the \"Switch branches/tags\" dropdown and selecting the tag\nthat matches your version.\nFAQ\nThere are questions that are asked quite often. Check this out before creating\nan issue:\n\nElectron FAQ\n\nGuides and Tutorials\nGetting started\n\nIntroduction\nQuick Start\nProcess Model\n\nLearning the basics\n\nAdding Features to Your App\nNotifications\nRecent Documents\nApplication Progress\nCustom Dock Menu\nCustom Windows Taskbar\nCustom Linux Desktop Actions\nKeyboard Shortcuts\nOffline/Online Detection\nRepresented File for macOS BrowserWindows\nNative File Drag & Drop\nOffscreen Rendering\nDark Mode\nWeb embeds in Electron\nBoilerplates and CLIs\nBoilerplate vs CLI\nElectron Forge\nelectron-builder\nelectron-react-boilerplate\nOther Tools and Boilerplates\n\nAdvanced steps\n\nApplication Architecture\nUsing Native Node.js Modules\nPerformance Strategies\nSecurity Strategies\nProcess Sandboxing\nAccessibility\nManually Enabling Accessibility Features\nTesting and Debugging\nDebugging the Main Process\nDebugging with Visual Studio Code\nTesting on Headless CI Systems (Travis, Jenkins)\nDevTools Extension\nAutomated Testing\nREPL\nDistribution\nCode Signing\nMac App Store\nWindows Store\nSnapcraft\nASAR Archives\nUpdates\nGetting Support\n\nDetailed Tutorials\nThese individual tutorials expand on topics discussed in the guide above.\n\nInstalling Electron\nProxies\nCustom Mirrors and Caches\nTroubleshooting\nElectron Releases & Developer Feedback\nVersioning Policy\nRelease Timelines\n\n\n\nGlossary of Terms\n\nAPI References\n\nSynopsis\nProcess Object\nSupported Command Line Switches\nEnvironment Variables\nChrome Extensions Support\nBreaking API Changes\n\nCustom DOM Elements:\n\nFile Object\n<webview> Tag\nwindow.open Function\n\nModules for the Main Process:\n\napp\nautoUpdater\nBrowserView\nBrowserWindow\ncontentTracing\ndesktopCapturer\ndialog\nglobalShortcut\ninAppPurchase\nipcMain\nMenu\nMenuItem\nMessageChannelMain\nMessagePortMain\nnativeTheme\nnet\nnetLog\nNotification\npowerMonitor\npowerSaveBlocker\nprotocol\npushNotifications\nsafeStorage\nscreen\nsession\nShareMenu\nsystemPreferences\nTouchBar\nTray\nutilityProcess\nwebContents\nwebFrameMain\n\nModules for the Renderer Process (Web Page):\n\ncontextBridge\nipcRenderer\nwebFrame\n\nModules for Both Processes:\n\nclipboard (non-sandboxed renderers only)\ncrashReporter\nnativeImage\nshell (non-sandboxed renderers only)\n\nDevelopment",
    "tag": "electron"
  },
  {
    "title": "Experimental APIs",
    "source": "https://github.com/electron/electron/tree/main/docs/experimental.md",
    "content": "Experimental APIs\nSome of Electrons APIs are tagged with `_Experimental_` in the documentation.\nThis tag indicates that the API may not be considered stable and the API may\nbe removed or modified more frequently than other APIs with less warning.\nConditions for an API to be tagged as Experimental\nAnyone can request an API be tagged as experimental in a feature PR, disagreements\non the experimental nature of a feature can be discussed in the API WG if they\ncan't be resolved in the PR.\nProcess for removing the Experimental tag\nOnce an API has been stable and in at least two major stable release lines it\ncan be nominated to have its experimental tag removed.  This discussion should\nhappen at an API WG meeting.  Things to consider when discussing / nominating:\n\nThe above \"two major stables release lines\" condition must have been met\nDuring that time no major bugs / issues should have been caused by the adoption of this feature\nThe API is stable enough and hasn't been heavily impacted by Chromium upgrades\nIs anyone using the API?\n",
    "tag": "electron"
  },
  {
    "title": "Electron Documentation Style Guide",
    "source": "https://github.com/electron/electron/tree/main/docs/styleguide.md",
    "content": "Electron Documentation Style Guide\nThese are the guidelines for writing Electron documentation.\nHeadings\n\nEach page must have a single `#`-level title at the top.\nChapters in the same page must have `##`-level headings.\nSub-chapters need to increase the number of `#` in the heading according to\n  their nesting depth.\nThe page's title must follow APA title case.\nAll chapters must follow APA sentence case.\n\nUsing `Quick Start` as example:\n```markdown\nQuick Start\n...\nMain process\n...\nRenderer process\n...\nRun your app\n...\nRun as a distribution\n...\nManually downloaded Electron binary\n...\n```\nFor API references, there are exceptions to this rule.\nMarkdown rules\nThis repository uses the [`markdownlint`][markdownlint] package to enforce consistent\nMarkdown styling. For the exact rules, see the `.markdownlint.json` file in the root\nfolder.\nThere are a few style guidelines that aren't covered by the linter rules:\n\n\nUse `sh` instead of `cmd` in code blocks (due to the syntax highlighter).\nKeep line lengths between 80 and 100 characters if possible for readability\n  purposes.\nNo nesting lists more than 2 levels (due to the markdown renderer).\nAll `js` and `javascript` code blocks are linted with\nstandard-markdown.\nFor unordered lists, use asterisks instead of dashes.\n\nPicking words\n\nUse \"will\" over \"would\" when describing outcomes.\nPrefer \"in the ___ process\" over \"on\".\n\nAPI references\nThe following rules only apply to the documentation of APIs.\nTitle and description\nEach module's API doc must use the actual object name returned by `require('electron')`\nas its title (such as `BrowserWindow`, `autoUpdater`, and `session`).\nDirectly under the page title, add a one-line description of the module\nas a markdown quote (beginning with `>`).\nUsing the `session` module as an example:\n```markdown\nsession\n\nManage browser sessions, cookies, cache, proxy settings, etc.\n```\n\nModule methods and events\nFor modules that are not classes, their methods and events must be listed under\nthe `## Methods` and `## Events` chapters.\nUsing `autoUpdater` as an example:\n```markdown\nautoUpdater\nEvents\nEvent: 'error'\nMethods\n`autoUpdater.setFeedURL(url[, requestHeaders])`\n```\nClasses\n\nAPI classes or classes that are part of modules must be listed under a\n  `## Class: TheClassName` chapter.\nOne page can have multiple classes.\nConstructors must be listed with `###`-level headings.\nStatic Methods\n  must be listed under a `### Static Methods` chapter.\nInstance Methods\n  must be listed under an `### Instance Methods` chapter.\nAll methods that have a return value must start their description with\n  \"Returns `[TYPE]` - [Return description]\"\nIf the method returns an `Object`, its structure can be specified using a colon\n    followed by a newline then an unordered list of properties in the same style as\n    function parameters.\nInstance Events must be listed under an `### Instance Events` chapter.\nInstance Properties must be listed under an `### Instance Properties` chapter.\nInstance Properties must start with \"A [Property Type] ...\"\n\nUsing the `Session` and `Cookies` classes as an example:\n```markdown\nsession\nMethods\nsession.fromPartition(partition)\nStatic Properties\nsession.defaultSession\nClass: Session\nInstance Events\nEvent: 'will-download'\nInstance Methods\n`ses.getCacheSize()`\nInstance Properties\n`ses.cookies`\nClass: Cookies\nInstance Methods\n`cookies.get(filter, callback)`\n```\nMethods and their arguments\nThe methods chapter must be in the following form:\n```markdown\n`objectName.methodName(required[, optional]))`\n\n`required` string - A parameter description.\n`optional` Integer (optional) - Another parameter description.\n\n...\n```\nHeading level\nThe heading can be `###` or `####`-levels depending on whether the method\nbelongs to a module or a class.\nFunction signature\nFor modules, the `objectName` is the module's name. For classes, it must be the\nname of the instance of the class, and must not be the same as the module's\nname.\nFor example, the methods of the `Session` class under the `session` module must\nuse `ses` as the `objectName`.\nOptional arguments are notated by square brackets `[]` surrounding the optional\nargument as well as the comma required if this optional argument follows another\nargument:\n`markdown\nrequired[, optional]`\nArgument descriptions\nMore detailed information on each of the arguments is noted in an unordered list\nbelow the method. The type of argument is notated by either JavaScript primitives\n(e.g. `string`, `Promise`, or `Object`), a custom API structure like Electron's\nCookie, or the wildcard `any`.\nIf the argument is of type `Array`, use `[]` shorthand with the type of value\ninside the array (for example,`any[]` or `string[]`).\nIf the argument is of type `Promise`, parametrize the type with what the promise\nresolves to (for example, `Promise<void>` or `Promise<string>`).\nIf an argument can be of multiple types, separate the types with `|`.\nThe description for `Function` type arguments should make it clear how it may be\ncalled and list the types of the parameters that will be passed to it.\nPlatform-specific functionality\nIf an argument or a method is unique to certain platforms, those platforms are\ndenoted using a space-delimited italicized list following the datatype. Values\ncan be `macOS`, `Windows` or `Linux`.\n`markdown\n* `animate` boolean (optional) _macOS_ _Windows_ - Animate the thing.`\nEvents\nThe events chapter must be in following form:\n```markdown\nEvent: 'wake-up'\nReturns:\n\n`time` string\n\n...\n```\nThe heading can be `###` or `####`-levels depending on whether the event\nbelongs to a module or a class.\nThe arguments of an event follow the same rules as methods.\nProperties\nThe properties chapter must be in following form:\n```markdown\nsession.defaultSession\n...\n```\nThe heading can be `###` or `####`-levels depending on whether the property\nbelongs to a module or a class.\nDocumentation translations\nSee electron/i18n",
    "tag": "electron"
  },
  {
    "title": "Boilerplates and CLIs",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/boilerplates-and-clis.md",
    "content": "Boilerplates and CLIs\nElectron development is unopinionated - there is no \"one true way\" to develop,\nbuild, package, or release an Electron application. Additional features for\nElectron, both for build- and run-time, can usually be found on\nnpm in individual packages, allowing developers to build both\nthe app and build pipeline they need.\nThat level of modularity and extendability ensures that all developers working\nwith Electron, both big and small in team-size, are never restricted in what\nthey can or cannot do at any time during their development lifecycle. However,\nfor many developers, one of the community-driven boilerplates or command line\ntools might make it dramatically easier to compile, package, and release an\napp.\nBoilerplate vs CLI\nA boilerplate is only a starting point - a canvas, so to speak - from which\nyou build your application. They usually come in the form of a repository you\ncan clone and customize to your heart's content.\nA command line tool on the other hand continues to support you throughout the\ndevelopment and release. They are more helpful and supportive but enforce\nguidelines on how your code should be structured and built. Especially for\nbeginners, using a command line tool is likely to be helpful.\nElectron Forge\nElectron Forge is a tool for packaging and publishing Electron applications. It unifies Electron's tooling ecosystem\ninto a single extensible interface so that anyone can jump right into making Electron apps.\nForge comes with a ready-to-use template using Webpack as a bundler. It includes an example typescript configuration and provides two configuration files to enable easy customization. It uses the same core modules used by the\ngreater Electron community (like electron-packager) \u2013\nchanges made by Electron maintainers (like Slack) benefit Forge's users, too.\nYou can find more information and documentation on electronforge.io.\nelectron-builder\nA \"complete solution to package and build a ready-for-distribution Electron app\"\nthat focuses on an integrated experience. electron-builder adds one\nsingle dependency focused on simplicity and manages all further requirements\ninternally.\n`electron-builder` replaces features and modules used by the Electron\nmaintainers (such as the auto-updater) with custom ones. They are generally\ntighter integrated but will have less in common with popular Electron apps\nlike Atom, Visual Studio Code, or Slack.\nYou can find more information and documentation in the repository.\nelectron-react-boilerplate\nIf you don't want any tools but only a solid boilerplate to build from,\nCT Lin's electron-react-boilerplate might be worth\na look. It's quite popular in the community and uses `electron-builder`\ninternally.\nOther Tools and Boilerplates\nThe \"Awesome Electron\" list contains more tools and boilerplates\nto choose from. If you find the length of the list intimidating, don't",
    "tag": "electron"
  },
  {
    "title": "Examples Overview",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/examples.md",
    "content": "\ntitle: 'Examples Overview'\ndescription: 'A set of examples for common Electron features'\nslug: examples\nhide_title: false\n\nExamples Overview\nIn this section, we have collected a set of guides for common features\nthat you may want to implement in your Electron application. Each guide\ncontains a practical example in a minimal, self-contained example app.\nThe easiest way to run these examples is by downloading Electron Fiddle.\nOnce Fiddle is installed, you can press on the \"Open in Fiddle\" button that you\nwill find below code samples like the following one:\n```fiddle docs/fiddles/quick-start\nwindow.addEventListener('DOMContentLoaded', () => {\n  const replaceText = (selector, text) => {\n    const element = document.getElementById(selector)\n    if (element) element.innerText = text\n  }\nfor (const type of ['chrome', 'node', 'electron']) {\n    replaceText(`${type}-version`, process.versions[type])\n  }\n})\n```\nIf there is still something that you do not know how to do, please take a look at the API\nas there is a chance it might be documented just there (and also open an issue requesting the\nguide!).\n\n| Guide                 | Description                                                                                                         |\n| :-------------------- | ------------------------------------------------------------------------------------------------------------------- |\n| Message ports       | This guide provides some examples of how you might use MessagePorts in your app to communicate different processes. |\n| Device access       | Learn how to access the device hardware (Bluetooth, USB, Serial).                                                   |\n| Keyboard shortcuts  | Configure local and global keyboard shortcuts for your Electron application.                                        |\n| Multithreading      | With Web Workers, it is possible to run JavaScript in OS-level threads                                              |\n| Offscreen rendering | Offscreen rendering lets you obtain the content of a BrowserWindow in a bitmap, so it can be rendered anywhere.     |\n| Spellchecker        | Learn how to use the built-in spellchecker, set languages, etc.                                                     |\n| [Web embeds][]          | Discover the different ways to embed third-party web content in your application.                                   |\n\nHow to...?\nYou can find the full list of \"How to?\" in the sidebar. If there is\nsomething that you would like to do that is not documented, please join\nour Discord server and let us know!",
    "tag": "electron"
  },
  {
    "title": "Dock",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/macos-dock.md",
    "content": "\ntitle: Dock\ndescription: Configure your application's Dock presence on macOS.\nslug: macos-dock\nhide_title: true\n\nDock\nElectron has APIs to configure the app's icon in the macOS Dock. A macOS-only\nAPI exists to create a custom dock menu, but Electron also uses the app dock\nicon as the entry point for cross-platform features like\nrecent documents and [application progress][progress-bar].\nThe custom dock is commonly used to add shortcuts to tasks the user wouldn't\nwant to open the whole app window for.\nDock menu of Terminal.app:\n\nTo set your custom dock menu, you need to use the\napp.dock.setMenu API,\nwhich is only available on macOS.\n```javascript fiddle='docs/fiddles/features/macos-dock-menu'\nconst { app, BrowserWindow, Menu } = require('electron')\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n  })\nwin.loadFile('index.html')\n}\nconst dockMenu = Menu.buildFromTemplate([\n  {\n    label: 'New Window',\n    click () { console.log('New Window') }\n  }, {\n    label: 'New Window with Settings',\n    submenu: [\n      { label: 'Basic' },\n      { label: 'Pro' }\n    ]\n  },\n  { label: 'New Command...' }\n])\napp.whenReady().then(() => {\n  if (process.platform === 'darwin') {\n    app.dock.setMenu(dockMenu)\n  }\n}).then(createWindow)\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow()\n  }\n})\n```\nAfter launching the Electron application, right click the application icon.\nYou should see the custom menu you just defined:\n",
    "tag": "electron"
  },
  {
    "title": "Online/Offline Event Detection",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/online-offline-events.md",
    "content": "Online/Offline Event Detection\nOverview\nOnline and offline event\ndetection can be implemented in the Renderer process using the\nnavigator.onLine\nattribute, part of standard HTML5 API.\nThe `navigator.onLine` attribute returns:\n\n`false` if all network requests are guaranteed to fail (e.g. when disconnected from the network).\n`true` in all other cases.\n\nSince many cases return `true`, you should treat with care situations of\ngetting false positives, as we cannot always assume that `true` value means\nthat Electron can access the Internet. For example, in cases when the computer\nis running a virtualization software that has virtual Ethernet adapters in \"always\nconnected\" state. Therefore, if you want to determine the Internet access\nstatus of Electron, you should develop additional means for this check.\nExample\nStarting with an HTML file `index.html`, this example will demonstrate how the `navigator.onLine` API can be used to build a connection status indicator.\n```html title=\"index.html\"\n\n\n\n\nHello World!\n\n\n\nConnection status: \n\n\n\n```\nIn order to mutate the DOM, create a `renderer.js` file that adds event listeners to the `'online'` and `'offline'` `window` events. The event handler sets the content of the `<strong id='status'>` element depending on the result of `navigator.onLine`.\n```js title='renderer.js'\nconst updateOnlineStatus = () => {\n  document.getElementById('status').innerHTML = navigator.onLine ? 'online' : 'offline'\n}\nwindow.addEventListener('online', updateOnlineStatus)\nwindow.addEventListener('offline', updateOnlineStatus)\nupdateOnlineStatus()\n```\nFinally, create a `main.js` file for main process that creates the window.\n```js title='main.js'\nconst { app, BrowserWindow } = require('electron')\nconst createWindow = () => {\n  const onlineStatusWindow = new BrowserWindow({\n    width: 400,\n    height: 100\n  })\nonlineStatusWindow.loadFile('index.html')\n}\napp.whenReady().then(() => {\n  createWindow()\napp.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow()\n    }\n  })\n})\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n```\nAfter launching the Electron application, you should see the notification:\n",
    "tag": "electron"
  },
  {
    "title": "Notifications",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/notifications.md",
    "content": "Notifications\nOverview\nAll three operating systems provide means for applications to send\nnotifications to the user. The technique of showing notifications is different\nfor the Main and Renderer processes.\nFor the Renderer process, Electron conveniently allows developers to send\nnotifications with the HTML5 Notification API,\nusing the currently running operating system's native notification APIs\nto display it.\nTo show notifications in the Main process, you need to use the\nNotification module.\nExample\nShow notifications in the Renderer process\nStarting with a working application from the\nQuick Start Guide, add the following line to the\n`index.html` file before the closing `</body>` tag:\n```html\n\n```\n...and add the `renderer.js` file:\n```javascript fiddle='docs/fiddles/features/notifications/renderer'\nconst NOTIFICATION_TITLE = 'Title'\nconst NOTIFICATION_BODY = 'Notification from the Renderer process. Click to log to console.'\nconst CLICK_MESSAGE = 'Notification clicked'\nnew Notification(NOTIFICATION_TITLE, { body: NOTIFICATION_BODY })\n  .onclick = () => console.log(CLICK_MESSAGE)\n```\nAfter launching the Electron application, you should see the notification:\n\nAdditionally, if you click on the notification, the DOM will update to show \"Notification clicked!\".\nShow notifications in the Main process\nStarting with a working application from the\nQuick Start Guide, update the `main.js` file with the following lines:\n```javascript fiddle='docs/fiddles/features/notifications/main'\nconst { Notification } = require('electron')\nconst NOTIFICATION_TITLE = 'Basic Notification'\nconst NOTIFICATION_BODY = 'Notification from the Main process'\nconst showNotification = () => {\n  new Notification({ title: NOTIFICATION_TITLE, body: NOTIFICATION_BODY }).show()\n}\napp.whenReady().then(createWindow).then(showNotification)\n```\nAfter launching the Electron application, you should see the system notification:\n\nAdditional information\nWhile code and user experience across operating systems are similar, there\nare subtle differences.\nWindows\n\nOn Windows 10, a shortcut to your app with an\nApplication User Model ID must be installed to the\nStart Menu. This can be overkill during development, so adding\n`node_modules\\electron\\dist\\electron.exe` to your Start Menu also does the\ntrick. Navigate to the file in Explorer, right-click and 'Pin to Start Menu'.\nYou will then need to add the line `app.setAppUserModelId(process.execPath)` to\nyour main process to see notifications.\n\nElectron attempts to automate the work around the Application User Model ID. When\nElectron is used together with the installation and update framework Squirrel,\n[shortcuts will automatically be set correctly][squirrel-events]. Furthermore,\nElectron will detect that Squirrel was used and will automatically call\n`app.setAppUserModelId()` with the correct value. During development, you may have\nto call app.setAppUserModelId() yourself.\nAdvanced Notifications\nLater versions of Windows allow for advanced notifications, with custom templates,\nimages, and other flexible elements. To send those notifications (from either the\nmain process or the renderer process), use the userland module\nelectron-windows-notifications,\nwhich uses native Node addons to send `ToastNotification` and `TileNotification` objects.\nWhile notifications including buttons work with `electron-windows-notifications`,\nhandling replies requires the use of\nelectron-windows-interactive-notifications,\nwhich helps with registering the required COM components and calling your\nElectron app with the entered user data.\nQuiet Hours / Presentation Mode\nTo detect whether or not you're allowed to send a notification, use the\nuserland module electron-notification-state.\nThis allows you to determine ahead of time whether or not Windows will\nsilently throw the notification away.\nmacOS\nNotifications are straight-forward on macOS, but you should be aware of\nApple's Human Interface guidelines regarding notifications.\nNote that notifications are limited to 256 bytes in size and will be truncated\nif you exceed that limit.\nDo not disturb / Session State\nTo detect whether or not you're allowed to send a notification, use the userland module\nelectron-notification-state.\nThis will allow you to detect ahead of time whether or not the notification will be displayed.\nLinux\nNotifications are sent using `libnotify` which can show notifications on any\ndesktop environment that follows Desktop Notifications\nSpecification, including Cinnamon, Enlightenment, Unity,\nGNOME, KDE.",
    "tag": "electron"
  },
  {
    "title": "SpellChecker",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/spellchecker.md",
    "content": "SpellChecker\nElectron has built-in support for Chromium's spellchecker since Electron 8.  On Windows and Linux this is powered by Hunspell dictionaries, and on macOS it makes use of the native spellchecker APIs.\nHow to enable the spellchecker?\nFor Electron 9 and higher the spellchecker is enabled by default.  For Electron 8 you need to enable it in `webPreferences`.\n`js\nconst myWindow = new BrowserWindow({\n  webPreferences: {\n    spellcheck: true\n  }\n})`\nHow to set the languages the spellchecker uses?\nOn macOS as we use the native APIs there is no way to set the language that the spellchecker uses. By default on macOS the native spellchecker will automatically detect the language being used for you.\nFor Windows and Linux there are a few Electron APIs you should use to set the languages for the spellchecker.\n```js\n// Sets the spellchecker to check English US and French\nmyWindow.session.setSpellCheckerLanguages(['en-US', 'fr'])\n// An array of all available language codes\nconst possibleLanguages = myWindow.session.availableSpellCheckerLanguages\n```\nBy default the spellchecker will enable the language matching the current OS locale.\nHow do I put the results of the spellchecker in my context menu?\nAll the required information to generate a context menu is provided in the context-menu event on each `webContents` instance.  A small example\nof how to make a context menu with this information is provided below.\n```js\nconst { Menu, MenuItem } = require('electron')\nmyWindow.webContents.on('context-menu', (event, params) => {\n  const menu = new Menu()\n// Add each spelling suggestion\n  for (const suggestion of params.dictionarySuggestions) {\n    menu.append(new MenuItem({\n      label: suggestion,\n      click: () => mainWindow.webContents.replaceMisspelling(suggestion)\n    }))\n  }\n// Allow users to add the misspelled word to the dictionary\n  if (params.misspelledWord) {\n    menu.append(\n      new MenuItem({\n        label: 'Add to dictionary',\n        click: () => mainWindow.webContents.session.addWordToSpellCheckerDictionary(params.misspelledWord)\n      })\n    )\n  }\nmenu.popup()\n})\n```\nDoes the spellchecker use any Google services?\nAlthough the spellchecker itself does not send any typings, words or user input to Google services the hunspell dictionary files are downloaded from a Google CDN by default.  If you want to avoid this you can provide an alternative URL to download the dictionaries from.\n`js\nmyWindow.session.setSpellCheckerDictionaryDownloadURL('https://example.com/dictionaries/')`",
    "tag": "electron"
  },
  {
    "title": "Deep Links",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/launch-app-from-url-in-another-app.md",
    "content": "\ntitle: Deep Links\ndescription: Set your Electron app as the default handler for a specific protocol.\nslug: launch-app-from-url-in-another-app\nhide_title: true\n\nDeep Links\nOverview\n\nThis guide will take you through the process of setting your Electron app as the default\nhandler for a specific protocol.\nBy the end of this tutorial, we will have set our app to intercept and handle\nany clicked URLs that start with a specific protocol. In this guide, the protocol\nwe will use will be \"`electron-fiddle://`\".\nExamples\nMain Process (main.js)\nFirst, we will import the required modules from `electron`. These modules help\ncontrol our application lifecycle and create a native browser window.\n`javascript\nconst { app, BrowserWindow, shell } = require('electron')\nconst path = require('path')`\nNext, we will proceed to register our application to handle all \"`electron-fiddle://`\" protocols.\n`javascript\nif (process.defaultApp) {\n  if (process.argv.length >= 2) {\n    app.setAsDefaultProtocolClient('electron-fiddle', process.execPath, [path.resolve(process.argv[1])])\n  }\n} else {\n  app.setAsDefaultProtocolClient('electron-fiddle')\n}`\nWe will now define the function in charge of creating our browser window and load our application's `index.html` file.\n```javascript\nconst createWindow = () => {\n  // Create the browser window.\n  mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\nmainWindow.loadFile('index.html')\n}\n```\nIn this next step, we will create our  `BrowserWindow` and tell our application how to handle an event in which an external protocol is clicked.\nThis code will be different in Windows compared to MacOS and Linux. This is due to Windows requiring additional code in order to open the contents of the protocol link within the same Electron instance. Read more about this here.\nWindows code:\n```javascript\nconst gotTheLock = app.requestSingleInstanceLock()\nif (!gotTheLock) {\n  app.quit()\n} else {\n  app.on('second-instance', (event, commandLine, workingDirectory) => {\n    // Someone tried to run a second instance, we should focus our window.\n    if (mainWindow) {\n      if (mainWindow.isMinimized()) mainWindow.restore()\n      mainWindow.focus()\n    }\n    // the commandLine is array of strings in which last element is deep link url\n    // the url str ends with /\n    dialog.showErrorBox('Welcome Back', `You arrived from: ${commandLine.pop().slice(0, -1)}`)\n  })\n// Create mainWindow, load the rest of the app, etc...\n  app.whenReady().then(() => {\n    createWindow()\n  })\n}\n```\nMacOS and Linux code:\n```javascript\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n  createWindow()\n})\n// Handle the protocol. In this case, we choose to show an Error Box.\napp.on('open-url', (event, url) => {\n  dialog.showErrorBox('Welcome Back', `You arrived from: ${url}`)\n})\n```\nFinally, we will add some additional code to handle when someone closes our application.\n`javascript\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') app.quit()\n})`\nImportant notes\nPackaging\nOn macOS and Linux, this feature will only work when your app is packaged. It will not work when\nyou're launching it in development from the command-line. When you package your app you'll need to\nmake sure the macOS `Info.plist` and the Linux `.desktop` files for the app are updated to include\nthe new protocol handler. Some of the Electron tools for bundling and distributing apps handle\nthis for you.\nElectron Forge\nIf you're using Electron Forge, adjust `packagerConfig` for macOS support, and the configuration for\nthe appropriate Linux makers for Linux support, in your Forge\nconfiguration (please note the following example only\nshows the bare minimum needed to add the configuration changes):\n`json\n{\n  \"config\": {\n    \"forge\": {\n      \"packagerConfig\": {\n        \"protocols\": [\n          {\n            \"name\": \"Electron Fiddle\",\n            \"schemes\": [\"electron-fiddle\"]\n          }\n        ]\n      },\n      \"makers\": [\n        {\n          \"name\": \"@electron-forge/maker-deb\",\n          \"config\": {\n            \"mimeType\": [\"x-scheme-handler/electron-fiddle\"]\n          }\n        }\n      ]\n    }\n  }\n}`\nElectron Packager\nFor macOS support:\nIf you're using Electron Packager's API, adding support for protocol handlers is similar to how\nElectron Forge is handled, except\n`protocols` is part of the Packager options passed to the `packager` function.\n```javascript\nconst packager = require('electron-packager')\npackager({\n  // ...other options...\n  protocols: [\n    {\n      name: 'Electron Fiddle',\n      schemes: ['electron-fiddle']\n    }\n  ]\n}).then(paths => console.log(`SUCCESS: Created ${paths.join(', ')}`))\n  .catch(err => console.error(`ERROR: ${err.message}`))\n```\nIf you're using Electron Packager's CLI, use the `--protocol` and `--protocol-name` flags. For\nexample:\n`shell\nnpx electron-packager . --protocol=electron-fiddle --protocol-name=\"Electron Fiddle\"`\nConclusion\nAfter you start your Electron app, you can enter in a URL in your browser that contains the custom\nprotocol, for example `\"electron-fiddle://open\"` and observe that the application will respond and\nshow an error dialog box.\n\n```fiddle docs/fiddles/system/protocol-handler/launch-app-from-URL-in-another-app\n```",
    "tag": "electron"
  },
  {
    "title": "Offscreen Rendering",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/offscreen-rendering.md",
    "content": "Offscreen Rendering\nOverview\nOffscreen rendering lets you obtain the content of a `BrowserWindow` in a\nbitmap, so it can be rendered anywhere, for example, on texture in a 3D scene.\nThe offscreen rendering in Electron uses a similar approach to that of the\nChromium Embedded Framework\nproject.\nNotes:\n\nThere are two rendering modes that can be used (see the section below) and only\nthe dirty area is passed to the `paint` event to be more efficient.\nYou can stop/continue the rendering as well as set the frame rate.\nThe maximum frame rate is 240 because greater values bring only performance\nlosses with no benefits.\nWhen nothing is happening on a webpage, no frames are generated.\nAn offscreen window is always created as a\nFrameless Window..\n\nRendering Modes\nGPU accelerated\nGPU accelerated rendering means that the GPU is used for composition. Because of\nthat, the frame has to be copied from the GPU which requires more resources,\nthus this mode is slower than the Software output device. The benefit of this\nmode is that WebGL and 3D CSS animations are supported.\nSoftware output device\nThis mode uses a software output device for rendering in the CPU, so the frame\ngeneration is much faster. As a result, this mode is preferred over the GPU\naccelerated one.\nTo enable this mode, GPU acceleration has to be disabled by calling the\n[`app.disableHardwareAcceleration()`][disablehardwareacceleration] API.\nExample\n```javascript fiddle='docs/fiddles/features/offscreen-rendering'\nconst { app, BrowserWindow } = require('electron')\nconst fs = require('fs')\napp.disableHardwareAcceleration()\nlet win\napp.whenReady().then(() => {\n  win = new BrowserWindow({ webPreferences: { offscreen: true } })\nwin.loadURL('https://github.com')\n  win.webContents.on('paint', (event, dirty, image) => {\n    fs.writeFileSync('ex.png', image.toPNG())\n  })\n  win.webContents.setFrameRate(60)\n})\n```\nAfter launching the Electron application, navigate to your application's\nworking folder, where you'll find the rendered image.",
    "tag": "electron"
  },
  {
    "title": "Learning goals",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/tutorial-6-publishing-updating.md",
    "content": "\ntitle: 'Publishing and Updating'\ndescription: \"There are several ways to update an Electron application. The easiest and officially supported one is taking advantage of the built-in Squirrel framework and Electron's autoUpdater module.\"\nslug: tutorial-publishing-updating\nhide_title: false\n\n:::info Follow along the tutorial\nThis is part 6 of the Electron tutorial.\n\nPrerequisites\nBuilding your First App\nUsing Preload Scripts\nAdding Features\nPackaging Your Application\n[Publishing and Updating][updates]\n\n:::\nLearning goals\nIf you've been following along, this is the last step of the tutorial! In this part,\nyou will publish your app to GitHub releases and integrate automatic updates\ninto your app code.\nUsing update.electronjs.org\nThe Electron maintainers provide a free auto-updating service for open-source apps\nat https://update.electronjs.org. Its requirements are:\n\nYour app runs on macOS or Windows\nYour app has a public GitHub repository\nBuilds are published to GitHub releases\nBuilds are code signed\n\nAt this point, we'll assume that you have already pushed all your\ncode to a public GitHub repository.\n:::info Alternative update services\nIf you're using an alternate repository host (e.g. GitLab or Bitbucket) or if\nyou need to keep your code repository private, please refer to our\nstep-by-step guide on hosting your own Electron update server.\n:::\nPublishing a GitHub release\nElectron Forge has Publisher plugins that can automate the distribution\nof your packaged application to various sources. In this tutorial, we will\nbe using the GitHub Publisher, which will allow us to publish\nour code to GitHub releases.\nGenerating a personal access token\nForge cannot publish to any repository on GitHub without permission. You\nneed to pass in an authenticated token that gives Forge access to\nyour GitHub releases. The easiest way to do this is to\ncreate a new personal access token (PAT)\nwith the `public_repo` scope, which gives write access to your public repositories.\nMake sure to keep this token a secret.\nSetting up the GitHub Publisher\nInstalling the module\nForge's GitHub Publisher is a plugin that\nneeds to be installed in your project's `devDependencies`:\n`sh npm2yarn\nnpm install --save-dev @electron-forge/publisher-github`\nConfiguring the publisher in Forge\nOnce you have it installed, you need to set it up in your Forge\nconfiguration. A full list of options is documented in the Forge's\n[`PublisherGitHubConfig`][] API docs.\n`js title='forge.config.js'\nmodule.exports = {\n  publishers: [\n    {\n      name: '@electron-forge/publisher-github',\n      config: {\n        repository: {\n          owner: 'github-user-name',\n          name: 'github-repo-name',\n        },\n        prerelease: false,\n        draft: true,\n      },\n    },\n  ],\n}`\n:::tip Drafting releases before publishing\nNotice that you have configured Forge to publish your release as a draft.\nThis will allow you to see the release with its generated artifacts\nwithout actually publishing it to your end users. You can manually\npublish your releases via GitHub after writing release notes and\ndouble-checking that your distributables work.\n:::\nSetting up your authentication token\nYou also need to make the Publisher aware of your authentication token.\nBy default, it will use the value stored in the `GITHUB_TOKEN` environment\nvariable.\nRunning the publish command\nAdd Forge's publish command to your npm scripts.\n`json {6} title='package.json'\n  //...\n  \"scripts\": {\n    \"start\": \"electron-forge start\",\n    \"package\": \"electron-forge package\",\n    \"make\": \"electron-forge make\",\n    \"publish\": \"electron-forge publish\"\n  },\n  //...`\nThis command will run your configured makers and publish the output distributables to a new\nGitHub release.\n`sh npm2yarn\nnpm run publish`\nBy default, this will only publish a single distributable for your host operating system and\narchitecture. You can publish for different architectures by passing in the `--arch` flag to your\nForge commands.\nThe name of this release will correspond to the `version` field in your project's package.json file.\n:::tip Tagging releases\nOptionally, you can also tag your releases in Git so that your\nrelease is associated with a labeled point in your code history. npm comes\nwith a handy npm version\ncommand that can handle the version bumping and tagging for you.\n:::\nBonus: Publishing in GitHub Actions\nPublishing locally can be painful, especially because you can only create distributables\nfor your host operating system (i.e. you can't publish a Window `.exe` file from macOS).\nA solution for this would be to publish your app via automation workflows\nsuch as GitHub Actions, which can run tasks in the\ncloud on Ubuntu, macOS, and Windows. This is the exact approach taken by Electron Fiddle.\nYou can refer to Fiddle's Build and Release pipeline\nand Forge configuration\nfor more details.\nInstrumenting your updater code\nNow that we have a functional release system via GitHub releases, we now need to tell our\nElectron app to download an update whenever a new release is out. Electron apps do this\nvia the autoUpdater module, which reads from an update server feed to check if a new version\nis available for download.\nThe update.electronjs.org service provides an updater-compatible feed. For example, Electron\nFiddle v0.28.0 will check the endpoint at https://update.electronjs.org/electron/fiddle/darwin/v0.28.0\nto see if a newer GitHub release is available.\nAfter your release is published to GitHub, the update.electronjs.org service should work\nfor your application. The only step left is to configure the feed with the autoUpdater module.\nTo make this process easier, the Electron team maintains the [`update-electron-app`][] module,\nwhich sets up the autoUpdater boilerplate for update.electronjs.org in one function\ncall \u2014 no configuration required. This module will search for the update.electronjs.org\nfeed that matches your project's package.json `\"repository\"` field.\nFirst, install the module as a runtime dependency.\n`sh npm2yarn\nnpm install update-electron-app`\nThen, import the module and call it immediately in the main process.\n`js title='main.js'\nrequire('update-electron-app')()`\nAnd that is all it takes! Once your application is packaged, it will update itself for each new\nGitHub release that you publish.\nSummary\nIn this tutorial, we configured Electron Forge's GitHub Publisher to upload your app's\ndistributables to GitHub releases. Since distributables cannot always be generated\nbetween platforms, we recommend setting up your building and publishing flow\nin a Continuous Integration pipeline if you do not have access to machines.\nElectron applications can self-update by pointing the autoUpdater module to an update server feed.\nupdate.electronjs.org is a free update server provided by Electron for open-source applications\npublished on GitHub releases. Configuring your Electron app to use this service is as easy as\ninstalling and importing the `update-electron-app` module.\nIf your application is not eligible for update.electronjs.org, you should instead deploy your\nown update server and configure the autoUpdater module yourself.\n:::info \ud83c\udf1f You're done!\nFrom here, you have officially completed our tutorial to Electron. Feel free to explore the\nrest of our docs and happy developing! If you have questions, please stop by our community\nDiscord server.\n:::\n",
    "tag": "electron"
  },
  {
    "title": "Process Sandboxing",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/sandbox.md",
    "content": "Process Sandboxing\nOne key security feature in Chromium is that processes can be executed within a sandbox.\nThe sandbox limits the harm that malicious code can cause by limiting access to most\nsystem resources \u2014 sandboxed processes can only freely use CPU cycles and memory.\nIn order to perform operations requiring additional privilege, sandboxed processes\nuse dedicated communication channels to delegate tasks to more privileged processes.\nIn Chromium, sandboxing is applied to most processes other than the main process.\nThis includes renderer processes, as well as utility processes such as the audio service,\nthe GPU service and the network service.\nSee Chromium's Sandbox design document for more information.\nStarting from Electron 20, the sandbox is enabled for renderer processes without any\nfurther configuration. If you want to disable the sandbox for a process, see the\nDisabling the sandbox for a single process\nsection.\nSandbox behaviour in Electron\nSandboxed processes in Electron behave mostly in the same way as Chromium's do, but\nElectron has a few additional concepts to consider because it interfaces with Node.js.\nRenderer processes\nWhen renderer processes in Electron are sandboxed, they behave in the same way as a\nregular Chrome renderer would. A sandboxed renderer won't have a Node.js\nenvironment initialized.\nTherefore, when the sandbox is enabled, renderer processes can only perform privileged\ntasks (such as interacting with the filesystem, making changes to the system, or spawning\nsubprocesses) by delegating these tasks to the main process via inter-process\ncommunication (IPC).\n:::note\nFor more info on inter-process communication, check out our IPC guide.\n:::\nPreload scripts\nIn order to allow renderer processes to communicate with the main process, preload\nscripts attached to sandboxed renderers will still have a polyfilled subset of Node.js\nAPIs available. A `require` function similar to Node's `require` module is exposed,\nbut can only import a subset of Electron and Node's built-in modules:\n\n`electron` (only renderer process modules)\nevents\ntimers\nurl\n\nIn addition, the preload script also polyfills certain Node.js primitives as globals:\n\nBuffer\nprocess\nclearImmediate\nsetImmediate\n\nBecause the `require` function is a polyfill with limited functionality, you will not be\nable to use CommonJS modules to separate your preload script into multiple\nfiles. If you need to split your preload code, use a bundler such as webpack\nor Parcel.\nNote that because the environment presented to the `preload` script is substantially\nmore privileged than that of a sandboxed renderer, it is still possible to leak\nprivileged APIs to untrusted code running in the renderer process unless\ncontextIsolation is enabled.\nConfiguring the sandbox\nFor most apps, sandboxing is the best choice. In certain use cases that are incompatible with\nthe sandbox (for instance, when using native node modules in the renderer),\nit is possible to disable the sandbox for specific processes. This comes with security\nrisks, especially if any untrusted code or content is present in the unsandboxed process.\nDisabling the sandbox for a single process\nIn Electron, renderer sandboxing can be disabled on a per-process basis with\nthe `sandbox: false` preference in the BrowserWindow constructor.\n`js title='main.js'\napp.whenReady().then(() => {\n  const win = new BrowserWindow({\n    webPreferences: {\n      sandbox: true\n    }\n  })\n  win.loadURL('https://google.com')\n})`\nSandboxing is also disabled whenever Node.js integration is enabled in the renderer.\nThis can be done through the BrowserWindow constructor with the `nodeIntegration: true` flag.\n`js title='main.js'\napp.whenReady().then(() => {\n  const win = new BrowserWindow({\n    webPreferences: {\n      nodeIntegration: true\n    }\n  })\n  win.loadURL('https://google.com')\n})`\nEnabling the sandbox globally\nIf you want to force sandboxing for all renderers, you can also use the\napp.enableSandbox API. Note that this API has to be called before the\napp's `ready` event.\n`js title='main.js'\napp.enableSandbox()\napp.whenReady().then(() => {\n  // any sandbox:false calls are overridden since `app.enableSandbox()` was called.\n  const win = new BrowserWindow()\n  win.loadURL('https://google.com')\n})`\nDisabling Chromium's sandbox (testing only)\nYou can also disable Chromium's sandbox entirely with the --no-sandbox\nCLI flag, which will disable the sandbox for all processes (including utility processes).\nWe highly recommend that you only use this flag for testing purposes, and never\nin production.\nNote that the `sandbox: true` option will still disable the renderer's Node.js\nenvironment.\nA note on rendering untrusted content\nRendering untrusted content in Electron is still somewhat uncharted territory,\nthough some apps are finding success (e.g. [Beaker Browser][beaker]).\nOur goal is to get as close to Chrome as we can in terms of the security of\nsandboxed content, but ultimately we will always be behind due to a few fundamental\nissues:\n\nWe do not have the dedicated resources or expertise that Chromium has to\n   apply to the security of its product. We do our best to make use of what we\n   have, to inherit everything we can from Chromium, and to respond quickly to\n   security issues, but Electron cannot be as secure as Chromium without the\n   resources that Chromium is able to dedicate.\nSome security features in Chrome (such as Safe Browsing and Certificate\n   Transparency) require a centralized authority and dedicated servers, both of\n   which run counter to the goals of the Electron project. As such, we disable\n   those features in Electron, at the cost of the associated security they\n   would otherwise bring.\nThere is only one Chromium, whereas there are many thousands of apps built\n   on Electron, all of which behave slightly differently. Accounting for those\n   differences can yield a huge possibility space, and make it challenging to\n   ensure the security of the platform in unusual use cases.\nWe can't push security updates to users directly, so we rely on app vendors\n   to upgrade the version of Electron underlying their app in order for\n   security updates to reach users.\n\nWhile we make our best effort to backport Chromium security fixes to older\nversions of Electron, we do not make a guarantee that every fix will be\nbackported. Your best chance at staying secure is to be on the latest stable\nversion of Electron.",
    "tag": "electron"
  },
  {
    "title": "Learning goals",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/tutorial-5-packaging.md",
    "content": "\ntitle: 'Packaging Your Application'\ndescription: 'To distribute your app with Electron, you need to package it and create installers.'\nslug: tutorial-packaging\nhide_title: false\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n:::info Follow along the tutorial\nThis is part 5 of the Electron tutorial.\n\nPrerequisites\nBuilding your First App\nUsing Preload Scripts\nAdding Features\nPackaging Your Application\n[Publishing and Updating][updates]\n\n:::\nLearning goals\nIn this part of the tutorial, we'll be going over the basics of packaging and distributing\nyour app with Electron Forge.\nUsing Electron Forge\nElectron does not have any tooling for packaging and distribution bundled into its core\nmodules. Once you have a working Electron app in dev mode, you need to use\nadditional tooling to create a packaged app you can distribute to your users (also known\nas a distributable). Distributables can be either installers (e.g. MSI on Windows) or\nportable executable files (e.g. `.app` on macOS).\nElectron Forge is an all-in-one tool that handles the packaging and distribution of Electron\napps. Under the hood, it combines a lot of existing Electron tools (e.g. [`electron-packager`][],\n[`@electron/osx-sign`][], [`electron-winstaller`][], etc.) into a single interface so you do not\nhave to worry about wiring them all together.\nImporting your project into Forge\nYou can install Electron Forge's CLI in your project's `devDependencies` and import your\nexisting project with a handy conversion script.\n`sh npm2yarn\nnpm install --save-dev @electron-forge/cli\nnpx electron-forge import`\nOnce the conversion script is done, Forge should have added a few scripts\nto your `package.json` file.\n`json title='package.json'\n  //...\n  \"scripts\": {\n    \"start\": \"electron-forge start\",\n    \"package\": \"electron-forge package\",\n    \"make\": \"electron-forge make\"\n  },\n  //...`\n:::info CLI documentation\nFor more information on `make` and other Forge APIs, check out\nthe Electron Forge CLI documentation.\n:::\nYou should also notice that your package.json now has a few more packages installed\nunder `devDependencies`, and a new `forge.config.js` file that exports a configuration\nobject. You should see multiple makers (packages that generate distributable app bundles) in the\npre-populated configuration, one for each target platform.\nCreating a distributable\nTo create a distributable, use your project's new `make` script, which runs the\n`electron-forge make` command.\n`sh npm2yarn\nnpm run make`\nThis `make` command contains two steps:\n\nIt will first run `electron-forge package` under the hood, which bundles your app\n   code together with the Electron binary. The packaged code is generated into a folder.\nIt will then use this packaged app folder to create a separate distributable for each\n   configured maker.\n\nAfter the script runs, you should see an `out` folder containing both the distributable\nand a folder containing the packaged application code.\n`plain title='macOS output example'\nout/\n\u251c\u2500\u2500 out/make/zip/darwin/x64/my-electron-app-darwin-x64-1.0.0.zip\n\u251c\u2500\u2500 ...\n\u2514\u2500\u2500 out/my-electron-app-darwin-x64/my-electron-app.app/Contents/MacOS/my-electron-app`\nThe distributable in the `out/make` folder should be ready to launch! You have now\ncreated your first bundled Electron application.\n:::tip Distributable formats\nElectron Forge can be configured to create distributables in different OS-specific formats\n(e.g. DMG, deb, MSI, etc.). See Forge's Makers documentation for all configuration options.\n:::\n:::tip Creating and adding application icons\nSetting custom application icons requires a few additions to your config.\nCheck out Forge's icon tutorial for more information.\n:::\n:::info Packaging without Electron Forge\nIf you want to manually package your code, or if you're just interested understanding the\nmechanics behind packaging an Electron app, check out the full Application Packaging\ndocumentation.\n:::\nImportant: signing your code\nIn order to distribute desktop applications to end users, we highly recommend that you code sign your Electron app. Code signing is an important part of shipping\ndesktop applications, and is mandatory for the auto-update step in the final part\nof the tutorial.\nCode signing is a security technology that you use to certify that a desktop app was\ncreated by a known source. Windows and macOS have their own OS-specific code signing\nsystems that will make it difficult for users to download or launch unsigned applications.\nOn macOS, code signing is done at the app packaging level. On Windows, distributable installers\nare signed instead. If you already have code signing certificates for Windows and macOS, you can set\nyour credentials in your Forge configuration.\n:::info\nFor more information on code signing, check out the\nSigning macOS Apps guide in the Forge docs.\n:::\n\n\n`js title='forge.config.js'\nmodule.exports = {\n  packagerConfig: {\n    osxSign: {},\n    //...\n    osxNotarize: {\n      tool: 'notarytool',\n      appleId: process.env.APPLE_ID,\n      appleIdPassword: process.env.APPLE_PASSWORD,\n      teamId: process.env.APPLE_TEAM_ID,\n    }\n    //...\n  }\n}`\n\n\n`js title='forge.config.js'\nmodule.exports = {\n  //...\n  makers: [\n    {\n      name: '@electron-forge/maker-squirrel',\n      config: {\n        certificateFile: './cert.pfx',\n        certificatePassword: process.env.CERTIFICATE_PASSWORD,\n      },\n    },\n  ],\n  //...\n}`\n\n\nSummary\nElectron applications need to be packaged to be distributed to users. In this tutorial,\nyou imported your app into Electron Forge and configured it to package your app and\ngenerate installers.\nIn order for your application to be trusted by the user's system, you need to digitally\ncertify that the distributable is authentic and untampered by code signing it. Your app\ncan be signed through Forge once you configure it to use your code signing certificate\ninformation.\n",
    "tag": "electron"
  },
  {
    "title": "In-App Purchases",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/in-app-purchases.md",
    "content": "\ntitle: In-App Purchases\ndescription: Add in-app purchases to your Mac App Store (MAS) application\nslug: in-app-purchases\nhide_title: true\n\nIn-App Purchases\nPreparing\nPaid Applications Agreement\nIf you haven't already, you\u2019ll need to sign the Paid Applications Agreement and set up your banking and tax information in iTunes Connect.\niTunes Connect Developer Help: Agreements, tax, and banking overview\nCreate Your In-App Purchases\nThen, you'll need to configure your in-app purchases in iTunes Connect, and include details such as name, pricing, and description that highlights the features and functionality of your in-app purchase.\niTunes Connect Developer Help: Create an in-app purchase\nChange the CFBundleIdentifier\nTo test In-App Purchase in development with Electron you'll have to change the `CFBundleIdentifier` in `node_modules/electron/dist/Electron.app/Contents/Info.plist`. You have to replace `com.github.electron` by the bundle identifier of the application you created with iTunes Connect.\n`xml\n<key>CFBundleIdentifier</key>\n<string>com.example.app</string>`\nCode example\nHere is an example that shows how to use In-App Purchases in Electron. You'll have to replace the product ids by the identifiers of the products created with iTunes Connect (the identifier of `com.example.app.product1` is `product1`). Note that you have to listen to the `transactions-updated` event as soon as possible in your app.\n```javascript\n// Main process\nconst { inAppPurchase } = require('electron')\nconst PRODUCT_IDS = ['id1', 'id2']\n// Listen for transactions as soon as possible.\ninAppPurchase.on('transactions-updated', (event, transactions) => {\n  if (!Array.isArray(transactions)) {\n    return\n  }\n// Check each transaction.\n  transactions.forEach((transaction) => {\n    const payment = transaction.payment\n\n\n```switch (transaction.transactionState) {\n  case 'purchasing':\n    console.log(`Purchasing ${payment.productIdentifier}...`)\n    break\n\n  case 'purchased': {\n    console.log(`${payment.productIdentifier} purchased.`)\n\n    // Get the receipt url.\n    const receiptURL = inAppPurchase.getReceiptURL()\n\n    console.log(`Receipt URL: ${receiptURL}`)\n\n    // Submit the receipt file to the server and check if it is valid.\n    // @see https://developer.apple.com/library/content/releasenotes/General/ValidateAppStoreReceipt/Chapters/ValidateRemotely.html\n    // ...\n    // If the receipt is valid, the product is purchased\n    // ...\n\n    // Finish the transaction.\n    inAppPurchase.finishTransactionByDate(transaction.transactionDate)\n\n    break\n  }\n\n  case 'failed':\n\n    console.log(`Failed to purchase ${payment.productIdentifier}.`)\n\n    // Finish the transaction.\n    inAppPurchase.finishTransactionByDate(transaction.transactionDate)\n\n    break\n  case 'restored':\n\n    console.log(`The purchase of ${payment.productIdentifier} has been restored.`)\n\n    break\n  case 'deferred':\n\n    console.log(`The purchase of ${payment.productIdentifier} has been deferred.`)\n\n    break\n  default:\n    break\n}\n```\n\n\n})\n})\n// Check if the user is allowed to make in-app purchase.\nif (!inAppPurchase.canMakePayments()) {\n  console.log('The user is not allowed to make in-app purchase.')\n}\n// Retrieve and display the product descriptions.\ninAppPurchase.getProducts(PRODUCT_IDS).then(products => {\n  // Check the parameters.\n  if (!Array.isArray(products) || products.length <= 0) {\n    console.log('Unable to retrieve the product informations.')\n    return\n  }\n// Display the name and price of each product.\n  products.forEach(product => {\n    console.log(`The price of ${product.localizedTitle} is ${product.formattedPrice}.`)\n  })\n// Ask the user which product they want to purchase.\n  const selectedProduct = products[0]\n  const selectedQuantity = 1\n// Purchase the selected product.\n  inAppPurchase.purchaseProduct(selectedProduct.productIdentifier, selectedQuantity).then(isProductValid => {\n    if (!isProductValid) {\n      console.log('The product is not valid.')\n      return\n    }\n\n\n```console.log('The payment has been added to the payment queue.')\n```\n\n\n})\n})",
    "tag": "electron"
  },
  {
    "title": "Web Embeds",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/web-embeds.md",
    "content": "Web Embeds\nOverview\nIf you want to embed (third-party) web content in an Electron `BrowserWindow`,\nthere are three options available to you: `<iframe>` tags, `<webview>` tags,\nand `BrowserViews`. Each one offers slightly different functionality and is\nuseful in different situations. To help you choose between these, this guide\nexplains the differences and capabilities of each option.\nIframes\nIframes in Electron behave like iframes in regular browsers. An `<iframe>`\nelement in your page can show external web pages, provided that their\nContent Security Policy\nallows it. To limit the number of capabilities of a site in an `<iframe>` tag,\nit is recommended to use the sandbox attribute\nand only allow the capabilities you want to support.\nWebViews\n\nImportant Note:\nwe do not recommend you to use WebViews,\nas this tag undergoes dramatic architectural changes that may affect stability\nof your application. Consider switching to alternatives, like `iframe` and\nElectron's `BrowserView`, or an architecture that avoids embedded content\nby design.\n\nWebViews are based on Chromium's WebViews and are not\nexplicitly supported by Electron. We do not guarantee that the WebView API will\nremain available in future versions of Electron. To use `<webview>` tags, you\nwill need to set `webviewTag` to `true` in the `webPreferences` of your\n`BrowserWindow`.\nWebView is a custom element (`<webview>`) that will only work inside Electron.\nThey are implemented as an \"out-of-process iframe\". This means that all\ncommunication with the `<webview>` is done asynchronously using IPC. The\n`<webview>` element has many custom methods and events, similar to\n`webContents`, that provide you with greater control over the content.\nCompared to an `<iframe>`, `<webview>` tends to be slightly slower but offers\nmuch greater control in loading and communicating with the third-party content\nand handling various events.\nBrowserViews\nBrowserViews are not a part of the DOM - instead,\nthey are created in and controlled by your Main process. They are simply\nanother layer of web content on top of your existing window. This means\nthat they are completely separate from your own `BrowserWindow` content and\ntheir position is not controlled by the DOM or CSS. Instead, it is controlled\nby setting the bounds in the Main process.\n`BrowserViews` offer the greatest control over their contents, since they\nimplement the `webContents` similarly to how the `BrowserWindow` does it.\nHowever, as `BrowserViews` are not a part of your DOM, but are rather overlaid",
    "tag": "electron"
  },
  {
    "title": "Testing on Headless CI Systems (Travis CI, Jenkins)",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/testing-on-headless-ci.md",
    "content": "Testing on Headless CI Systems (Travis CI, Jenkins)\nBeing based on Chromium, Electron requires a display driver to function.\nIf Chromium can't find a display driver, Electron will fail to launch -\nand therefore not executing any of your tests, regardless of how you are running\nthem. Testing Electron-based apps on Travis, CircleCI, Jenkins or similar Systems\nrequires therefore a little bit of configuration. In essence, we need to use\na virtual display driver.\nConfiguring the Virtual Display Server\nFirst, install Xvfb.\nIt's a virtual framebuffer, implementing the X11 display server protocol -\nit performs all graphical operations in memory without showing any screen output,\nwhich is exactly what we need.\nThen, create a virtual Xvfb screen and export an environment variable\ncalled DISPLAY that points to it. Chromium in Electron will automatically look\nfor `$DISPLAY`, so no further configuration of your app is required.\nThis step can be automated with Ana\u00efs Betts'\nxvfb-maybe: Prepend your test\ncommands with `xvfb-maybe` and the little tool will automatically configure\nXvfb, if required by the current system. On Windows or macOS, it will\ndo nothing.\n```sh\nOn Windows or macOS, this invokes electron-mocha\nOn Linux, if we are in a headless environment, this will be equivalent\nto xvfb-run electron-mocha ./test/*.js\nxvfb-maybe electron-mocha ./test/*.js\n```\nTravis CI\nOn Travis, your `.travis.yml` should look roughly like this:\n```yml\naddons:\n  apt:\n    packages:\n      - xvfb\ninstall:\n  - export DISPLAY=':99.0'\n  - Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &\n```\nJenkins\nFor Jenkins, a Xvfb plugin is available.\nCircleCI\nCircleCI is awesome and has Xvfb and `$DISPLAY` already set up, so no further configuration is required.\nAppVeyor\nAppVeyor runs on Windows, supporting Selenium, Chromium, Electron and similar",
    "tag": "electron"
  },
  {
    "title": "Debugging in VSCode",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/debugging-vscode.md",
    "content": "Debugging in VSCode\nThis guide goes over how to set up VSCode debugging for both your own Electron project as well as the native Electron codebase.\nDebugging your Electron app\nMain process\n1. Open an Electron project in VSCode.\n`sh\n$ git clone git@github.com:electron/electron-quick-start.git\n$ code electron-quick-start`\n2. Add a file `.vscode/launch.json` with the following configuration:\n`json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Main Process\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"cwd\": \"${workspaceFolder}\",\n      \"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/electron\",\n      \"windows\": {\n        \"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/electron.cmd\"\n      },\n      \"args\" : [\".\"],\n      \"outputCapture\": \"std\"\n    }\n  ]\n}`\n3. Debugging\nSet some breakpoints in `main.js`, and start debugging in the Debug View. You should be able to hit the breakpoints.\nHere is a pre-configured project that you can download and directly debug in VSCode: https://github.com/octref/vscode-electron-debug/tree/master/electron-quick-start\nDebugging the Electron codebase\nIf you want to build Electron from source and modify the native Electron codebase, this section will help you in testing your modifications.\nFor those unsure where to acquire this code or how to build it, Electron's Build Tools automates and explains most of this process. If you wish to manually set up the environment, you can instead use these build instructions.\nWindows (C++)\n1. Open an Electron project in VSCode.\n`sh\n$ git clone git@github.com:electron/electron-quick-start.git\n$ code electron-quick-start`\n2. Add a file `.vscode/launch.json` with the following configuration:\n`json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"(Windows) Launch\",\n      \"type\": \"cppvsdbg\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceFolder}\\\\out\\\\your-executable-location\\\\electron.exe\",\n      \"args\": [\"your-electron-project-path\"],\n      \"stopAtEntry\": false,\n      \"cwd\": \"${workspaceFolder}\",\n      \"environment\": [\n          {\"name\": \"ELECTRON_ENABLE_LOGGING\", \"value\": \"true\"},\n          {\"name\": \"ELECTRON_ENABLE_STACK_DUMPING\", \"value\": \"true\"},\n          {\"name\": \"ELECTRON_RUN_AS_NODE\", \"value\": \"\"},\n      ],\n      \"externalConsole\": false,\n      \"sourceFileMap\": {\n          \"o:\\\\\": \"${workspaceFolder}\",\n      },\n    },\n  ]\n}`\nConfiguration Notes\n\n`cppvsdbg` requires the built-in C/C++ extension be enabled.\n`${workspaceFolder}` is the full path to Chromium's `src` directory.\n`your-executable-location` will be one of the following depending on a few items:\n`Testing`: If you are using the default settings of Electron's Build-Tools or the default instructions when building from source.\n`Release`: If you built a Release build rather than a Testing build.\n`your-directory-name`: If you modified this during your build process from the default, this will be whatever you specified.\nThe `args` array string `\"your-electron-project-path\"` should be the absolute path to either the directory or `main.js` file of the Electron project you are using for testing. In this example, it should be your path to `electron-quick-start`.\n\n3. Debugging",
    "tag": "electron"
  },
  {
    "title": "Distributing Apps With Electron Forge",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/forge-overview.md",
    "content": "Distributing Apps With Electron Forge\nElectron Forge is a tool for packaging and publishing Electron applications.\nIt unifies Electron's build tooling ecosystem into\na single extensible interface so that anyone can jump right into making Electron apps.\nGetting started\nThe Electron Forge docs contain detailed information on taking your application\nfrom source code to your end users' machines.\nThis includes:\n\nPackaging your application (package)\nGenerating executables and installers for each OS (make), and,\nPublishing these files to online platforms to download (publish).\n\nFor beginners, we recommend following through Electron's [tutorial][] to develop, build,\npackage and publish your first Electron app. If you have already developed an app on your machine\nand want to start on packaging and distribution, start from step 5 of the tutorial.\nGetting help\n\nIf you need help with developing your app, our community Discord server is a great place\nto get advice from other Electron app developers.\nIf you suspect you're running into a bug with Forge, please check the GitHub issue tracker\nto see if any existing issues match your problem. If not, feel free to fill out our bug report\ntemplate and submit a new issue.\n",
    "tag": "electron"
  },
  {
    "title": "Context Isolation",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/context-isolation.md",
    "content": "Context Isolation\nWhat is it?\nContext Isolation is a feature that ensures that both your `preload` scripts and Electron's internal logic run in a separate context to the website you load in a webContents.  This is important for security purposes as it helps prevent the website from accessing Electron internals or the powerful APIs your preload script has access to.\nThis means that the `window` object that your preload script has access to is actually a different object than the website would have access to.  For example, if you set `window.hello = 'wave'` in your preload script and context isolation is enabled, `window.hello` will be undefined if the website tries to access it.\nContext isolation has been enabled by default since Electron 12, and it is a recommended security setting for all applications.\nMigration\n\nWithout context isolation, I used to provide APIs from my preload script using `window.X = apiObject`. Now what?\n\nBefore: context isolation disabled\nExposing APIs from your preload script to a loaded website in the renderer process is a common use-case. With context isolation disabled, your preload script would share a common global `window` object with the renderer. You could then attach arbitrary properties to a preload script:\n`javascript title='preload.js'\n// preload with contextIsolation disabled\nwindow.myAPI = {\n  doAThing: () => {}\n}`\nThe `doAThing()` function could then be used directly in the renderer process:\n`javascript title='renderer.js'\n// use the exposed API in the renderer\nwindow.myAPI.doAThing()`\nAfter: context isolation enabled\nThere is a dedicated module in Electron to help you do this in a painless way. The contextBridge module can be used to safely expose APIs from your preload script's isolated context to the context the website is running in. The API will also be accessible from the website on `window.myAPI` just like it was before.\n```javascript title='preload.js'\n// preload with contextIsolation enabled\nconst { contextBridge } = require('electron')\ncontextBridge.exposeInMainWorld('myAPI', {\n  doAThing: () => {}\n})\n```\n`javascript title='renderer.js'\n// use the exposed API in the renderer\nwindow.myAPI.doAThing()`\nPlease read the `contextBridge` documentation linked above to fully understand its limitations. For instance, you can't send custom prototypes or symbols over the bridge.\nSecurity considerations\nJust enabling `contextIsolation` and using `contextBridge` does not automatically mean that everything you do is safe. For instance, this code is unsafe.\n`javascript title='preload.js'\n// \u274c Bad code\ncontextBridge.exposeInMainWorld('myAPI', {\n  send: ipcRenderer.send\n})`\nIt directly exposes a powerful API without any kind of argument filtering. This would allow any website to send arbitrary IPC messages, which you do not want to be possible. The correct way to expose IPC-based APIs would instead be to provide one method per IPC message.\n`javascript title='preload.js'\n// \u2705 Good code\ncontextBridge.exposeInMainWorld('myAPI', {\n  loadPreferences: () => ipcRenderer.invoke('load-prefs')\n})`\nUsage with TypeScript\nIf you're building your Electron app with TypeScript, you'll want to add types to your APIs exposed over the context bridge. The renderer's `window` object won't have the correct typings unless you extend the types with a [declaration file][].\nFor example, given this `preload.ts` script:\n`typescript title='preload.ts'\ncontextBridge.exposeInMainWorld('electronAPI', {\n  loadPreferences: () => ipcRenderer.invoke('load-prefs')\n})`\nYou can create a `renderer.d.ts` declaration file and globally augment the `Window` interface:\n```typescript title='renderer.d.ts'\nexport interface IElectronAPI {\n  loadPreferences: () => Promise,\n}\ndeclare global {\n  interface Window {\n    electronAPI: IElectronAPI\n  }\n}\n```\nDoing so will ensure that the TypeScript compiler will know about the `electronAPI` property on your global `window` object when writing scripts in your renderer process:\n`typescript title='renderer.ts'\nwindow.electronAPI.loadPreferences()`",
    "tag": "electron"
  },
  {
    "title": "Keyboard Shortcuts",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/keyboard-shortcuts.md",
    "content": "Keyboard Shortcuts\nOverview\nThis feature allows you to configure local and global keyboard shortcuts\nfor your Electron application.\nExample\nLocal Shortcuts\nLocal keyboard shortcuts are triggered only when the application is focused.\nTo configure a local keyboard shortcut, you need to specify an [`accelerator`][]\nproperty when creating a MenuItem within the Menu module.\nStarting with a working application from the\nQuick Start Guide, update the `main.js` file with the\nfollowing lines:\n```javascript fiddle='docs/fiddles/features/keyboard-shortcuts/local'\nconst { Menu, MenuItem } = require('electron')\nconst menu = new Menu()\nmenu.append(new MenuItem({\n  label: 'Electron',\n  submenu: [{\n    role: 'help',\n    accelerator: process.platform === 'darwin' ? 'Alt+Cmd+I' : 'Alt+Shift+I',\n    click: () => { console.log('Electron rocks!') }\n  }]\n}))\nMenu.setApplicationMenu(menu)\n```\n\nNOTE: In the code above, you can see that the accelerator differs based on the\nuser's operating system. For MacOS, it is `Alt+Cmd+I`, whereas for Linux and\nWindows, it is `Alt+Shift+I`.\n\nAfter launching the Electron application, you should see the application menu\nalong with the local shortcut you just defined:\n\nIf you click `Help` or press the defined accelerator and then open the terminal\nthat you ran your Electron application from, you will see the message that was\ngenerated after triggering the `click` event: \"Electron rocks!\".\nGlobal Shortcuts\nTo configure a global keyboard shortcut, you need to use the globalShortcut\nmodule to detect keyboard events even when the application does not have\nkeyboard focus.\nStarting with a working application from the\nQuick Start Guide, update the `main.js` file with the\nfollowing lines:\n```javascript fiddle='docs/fiddles/features/keyboard-shortcuts/global'\nconst { app, globalShortcut } = require('electron')\napp.whenReady().then(() => {\n  globalShortcut.register('Alt+CommandOrControl+I', () => {\n    console.log('Electron loves global shortcuts!')\n  })\n}).then(createWindow)\n```\n\nNOTE: In the code above, the `CommandOrControl` combination uses `Command`\non macOS and `Control` on Windows/Linux.\n\nAfter launching the Electron application, if you press the defined key\ncombination then open the terminal that you ran your Electron application from,\nyou will see that Electron loves global shortcuts!\nShortcuts within a BrowserWindow\nUsing web APIs\nIf you want to handle keyboard shortcuts within a BrowserWindow, you can\nlisten for the `keyup` and `keydown` DOM events inside the\nrenderer process using the [addEventListener() API][addEventListener-api].\n```javascript fiddle='docs/fiddles/features/keyboard-shortcuts/web-apis|focus=renderer.js'\nconst handleKeyPress = (event) => {\n  // You can put code here to handle the keypress.\n  document.getElementById(\"last-keypress\").innerText = event.key;\n  console.log(`You pressed ${event.key}`);\n}\nwindow.addEventListener('keyup', handleKeyPress, true);\n```\n\nNote:  the third parameter `true` indicates that the listener will always receive\nkey presses before other listeners so they can't have `stopPropagation()`\ncalled on them.\n\nIntercepting events in the main process\nThe before-input-event event\nis emitted before dispatching `keydown` and `keyup` events in the page. It can\nbe used to catch and handle custom shortcuts that are not visible in the menu.\nStarting with a working application from the\nQuick Start Guide, update the `main.js` file with the\nfollowing lines:\n```javascript fiddle='docs/fiddles/features/keyboard-shortcuts/interception-from-main'\nconst { app, BrowserWindow } = require('electron')\napp.whenReady().then(() => {\n  const win = new BrowserWindow({ width: 800, height: 600 })\nwin.loadFile('index.html')\n  win.webContents.on('before-input-event', (event, input) => {\n    if (input.control && input.key.toLowerCase() === 'i') {\n      console.log('Pressed Control+I')\n      event.preventDefault()\n    }\n  })\n})\n```\nAfter launching the Electron application, if you open the terminal that you ran\nyour Electron application from and press `Ctrl+I` key combination, you will\nsee that this key combination was successfully intercepted.\nUsing third-party libraries\nIf you don't want to do manual shortcut parsing, there are libraries that do\nadvanced key detection, such as mousetrap. Below are examples of usage of the\n`mousetrap` running in the Renderer process:\n```js\nMousetrap.bind('4', () => { console.log('4') })\nMousetrap.bind('?', () => { console.log('show shortcuts!') })\nMousetrap.bind('esc', () => { console.log('escape') }, 'keyup')\n// combinations\nMousetrap.bind('command+shift+k', () => { console.log('command shift k') })\n// map multiple combinations to the same callback\nMousetrap.bind(['command+k', 'ctrl+k'], () => {\n  console.log('command k or control k')\n// return false to prevent default behavior and stop event from bubbling\n  return false\n})\n// gmail style sequences\nMousetrap.bind('g i', () => { console.log('go to inbox') })\nMousetrap.bind('* a', () => { console.log('select all') })\n// konami code!\nMousetrap.bind('up up down down left right left right b a enter', () => {\n  console.log('konami code')\n})\n```",
    "tag": "electron"
  },
  {
    "title": "Recent Documents",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/recent-documents.md",
    "content": "\ntitle: Recent Documents\ndescription: Provide a list of recent documents via Windows JumpList or macOS Dock\nslug: recent-documents\nhide_title: true\n\nRecent Documents\nOverview\nWindows and macOS provide access to a list of recent documents opened by\nthe application via JumpList or dock menu, respectively.\nJumpList:\n\nApplication dock menu:\n\nExample\nManaging recent documents\n```javascript fiddle='docs/fiddles/features/recent-documents'\nconst { app, BrowserWindow } = require('electron')\nconst fs = require('fs')\nconst path = require('path')\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\nwin.loadFile('index.html')\n}\nconst fileName = 'recently-used.md'\nfs.writeFile(fileName, 'Lorem Ipsum', () => {\n  app.addRecentDocument(path.join(__dirname, fileName))\n})\napp.whenReady().then(createWindow)\napp.on('window-all-closed', () => {\n  app.clearRecentDocuments()\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow()\n  }\n})\n```\nAdding a recent document\nTo add a file to recent documents, use the\napp.addRecentDocument API.\nAfter launching the Electron application, right click the application icon.\nIn this guide, the item is a Markdown file located in the root of the project.\nYou should see `recently-used.md` added to the list of recent files:\n\nClearing the list of recent documents\nTo clear the list of recent documents, use the\napp.clearRecentDocuments API.\nIn this guide, the list of documents is cleared once all windows have been\nclosed.\nAdditional information\nWindows Notes\nTo use this feature on Windows, your application has to be registered as\na handler of the file type of the document, otherwise the file won't appear\nin JumpList even after you have added it. You can find everything\non registering your application in Application Registration.\nWhen a user clicks a file from the JumpList, a new instance of your application\nwill be started with the path of the file added as a command line argument.\nmacOS Notes\nAdd the Recent Documents list to the application menu\nYou can add menu items to access and clear recent documents by adding the\nfollowing code snippet to your menu template:\n`json\n{\n  \"submenu\":[\n    {\n      \"label\":\"Open Recent\",\n      \"role\":\"recentdocuments\",\n      \"submenu\":[\n        {\n          \"label\":\"Clear Recent\",\n          \"role\":\"clearrecentdocuments\"\n        }\n      ]\n    }\n  ]\n}`\nMake sure the application menu is added after the 'ready'\nevent and not before, or the menu item will be disabled:\n```javascript\nconst { app, Menu } = require('electron')\nconst template = [\n  // Menu template here\n]\nconst menu = Menu.buildFromTemplate(template)\napp.whenReady().then(() => {\n  Menu.setApplicationMenu(menu)\n})\n```\n![macOS Recent Documents menu item][menu-item-image]\nWhen a file is requested from the recent documents menu, the `open-file` event\nof `app` module will be emitted for it.",
    "tag": "electron"
  },
  {
    "title": "Device Access",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/devices.md",
    "content": "Device Access\nLike Chromium based browsers, Electron provides access to device hardware\nthrough web APIs.  For the most part these APIs work like they do in a browser,\nbut there are some differences that need to be taken into account.  The primary\ndifference between Electron and browsers is what happens when device access is\nrequested.  In a browser, users are presented with a popup where they can grant\naccess to an individual device.  In Electron APIs are provided which can be\nused by a developer to either automatically pick a device or prompt users to\npick a device via a developer created interface.\nWeb Bluetooth API\nThe Web Bluetooth API can be used to communicate\nwith bluetooth devices. In order to use this API in Electron, developers will\nneed to handle the select-bluetooth-device event on the webContents\nassociated with the device request.\nAdditionally, ses.setBluetoothPairingHandler(handler)\ncan be used to handle pairing to bluetooth devices on Windows or Linux when\nadditional validation such as a pin is needed.\nExample\nThis example demonstrates an Electron application that automatically selects\nthe first available bluetooth device when the `Test Bluetooth` button is\nclicked.\n```javascript fiddle='docs/fiddles/features/web-bluetooth'\n```\nWebHID API\nThe WebHID API can be used to access HID devices such\nas keyboards and gamepads.  Electron provides several APIs for working with\nthe WebHID API:\n\nThe select-hid-device event on the Session\n  can be used to select a HID device when a call to\n  `navigator.hid.requestDevice` is made.  Additionally the hid-device-added\n  and hid-device-removed events\n  on the Session can be used to handle devices being plugged in or unplugged\n  when handling the `select-hid-device` event.\n  Note: These events only fire until the callback from `select-hid-device`\n  is called.  They are not intended to be used as a generic hid device listener.\nses.setDevicePermissionHandler(handler)\n  can be used to provide default permissioning to devices without first calling\n  for permission to devices via `navigator.hid.requestDevice`.  Additionally,\n  the default behavior of Electron is to store granted device permission through\n  the lifetime of the corresponding WebContents.  If longer term storage is\n  needed, a developer can store granted device permissions (eg when handling\n  the `select-hid-device` event) and then read from that storage with\n  `setDevicePermissionHandler`.\nses.setPermissionCheckHandler(handler)\n  can be used to disable HID access for specific origins.\n\nBlocklist\nBy default Electron employs the same blocklist\nused by Chromium.  If you wish to override this behavior, you can do so by\nsetting the `disable-hid-blocklist` flag:\n`javascript\napp.commandLine.appendSwitch('disable-hid-blocklist')`\nExample\nThis example demonstrates an Electron application that automatically selects\nHID devices through ses.setDevicePermissionHandler(handler)\nand through select-hid-device event on the Session\nwhen the `Test WebHID` button is clicked.\n```javascript fiddle='docs/fiddles/features/web-hid'\n```\nWeb Serial API\nThe Web Serial API can be used to access serial\ndevices that are connected via serial port, USB, or Bluetooth.  In order to use\nthis API in Electron, developers will need to handle the\nselect-serial-port event on the Session\nassociated with the serial port request.\nThere are several additional APIs for working with the Web Serial API:\n\nThe serial-port-added\n  and serial-port-removed events\n  on the Session can be used to handle devices being plugged in or unplugged\n  when handling the `select-serial-port` event.\n  Note: These events only fire until the callback from `select-serial-port`\n  is called.  They are not intended to be used as a generic serial port\n  listener.\nses.setDevicePermissionHandler(handler)\n  can be used to provide default permissioning to devices without first calling\n  for permission to devices via `navigator.serial.requestPort`.  Additionally,\n  the default behavior of Electron is to store granted device permission through\n  the lifetime of the corresponding WebContents.  If longer term storage is\n  needed, a developer can store granted device permissions (eg when handling\n  the `select-serial-port` event) and then read from that storage with\n  `setDevicePermissionHandler`.\nses.setPermissionCheckHandler(handler)\n  can be used to disable serial access for specific origins.\n\nExample\nThis example demonstrates an Electron application that automatically selects\nserial devices through ses.setDevicePermissionHandler(handler)\nas well as demonstrating selecting the first available Arduino Uno serial device (if connected) through\nselect-serial-port event on the Session\nwhen the `Test Web Serial` button is clicked.\n```javascript fiddle='docs/fiddles/features/web-serial'\n```\nWebUSB API\nThe WebUSB API can be used to access USB devices.\nElectron provides several APIs for working with the WebUSB API:\n\nThe select-usb-device event on the Session\n  can be used to select a USB device when a call to\n  `navigator.usb.requestDevice` is made.  Additionally the usb-device-added\n  and usb-device-removed events\n  on the Session can be used to handle devices being plugged in or unplugged\n  when handling the `select-usb-device` event.\n  Note: These two events only fire until the callback from `select-usb-device`\n  is called.  They are not intended to be used as a generic usb device listener.\nThe `usb-device-revoked' event on the Session can\n  be used to respond when device.forget()\n  is called on a USB device.\nses.setDevicePermissionHandler(handler)\n  can be used to provide default permissioning to devices without first calling\n  for permission to devices via `navigator.usb.requestDevice`.  Additionally,\n  the default behavior of Electron is to store granted device permission through\n  the lifetime of the corresponding WebContents.  If longer term storage is\n  needed, a developer can store granted device permissions (eg when handling\n  the `select-usb-device` event) and then read from that storage with\n  `setDevicePermissionHandler`.\nses.setPermissionCheckHandler(handler)\n  can be used to disable USB access for specific origins.\n\nExample\nThis example demonstrates an Electron application that automatically selects\nUSB devices (if they are attached) through ses.setDevicePermissionHandler(handler)\nand through select-usb-device event on the Session\nwhen the `Test WebUSB` button is clicked.\n```javascript fiddle='docs/fiddles/features/web-usb'",
    "tag": "electron"
  },
  {
    "title": "Goals",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/tutorial-1-prerequisites.md",
    "content": "\ntitle: 'Prerequisites'\ndescription: 'This guide will step you through the process of creating a barebones Hello World app in Electron, similar to electron/electron-quick-start.'\nslug: tutorial-prerequisites\nhide_title: false\n\n:::info Follow along the tutorial\nThis is part 1 of the Electron tutorial.\n\nPrerequisites\nBuilding your First App\nUsing Preload Scripts\nAdding Features\nPackaging Your Application\n[Publishing and Updating][updates]\n\n:::\nElectron is a framework for building desktop applications using JavaScript,\nHTML, and CSS. By embedding Chromium and Node.js into a\nsingle binary file, Electron allows you to create cross-platform apps that\nwork on Windows, macOS, and Linux with a single JavaScript codebase.\nThis tutorial will guide you through the process of developing a desktop\napplication with Electron and distributing it to end users.\nGoals\nThis tutorial starts by guiding you through the process of piecing together\na minimal Electron application from scratch, then teaches you how to\npackage and distribute it to users using Electron Forge.\nIf you prefer to get a project started with a single-command boilerplate, we recommend you start\nwith Electron Forge's create-electron-app command.\nAssumptions\nElectron is a native wrapper layer for web apps and is run in a Node.js environment.\nTherefore, this tutorial assumes you are generally familiar with Node and\nfront-end web development basics. If you need to do some background reading before\ncontinuing, we recommend the following resources:\n\nGetting started with the Web (MDN Web Docs)\nIntroduction to Node.js\n\nRequired tools\nCode editor\nYou will need a text editor to write your code. We recommend using Visual Studio Code,\nalthough you can choose whichever one you prefer.\nCommand line\nThroughout the tutorial, we will ask you to use various command-line interfaces (CLIs). You can\ntype these commands into your system's default terminal:\n\nWindows: Command Prompt or PowerShell\nmacOS: Terminal\nLinux: varies depending on distribution (e.g. GNOME Terminal, Konsole)\n\nMost code editors also come with an integrated terminal, which you can also use.\nGit and GitHub\nGit is a commonly-used version control system for source code, and GitHub is a collaborative\ndevelopment platform built on top of it. Although neither is strictly necessary to building\nan Electron application, we will use GitHub releases to set up automatic updates later\non in the tutorial. Therefore, we'll require you to:\n\nCreate a GitHub account\nInstall Git\n\nIf you're unfamiliar with how Git works, we recommend reading GitHub's Git guides. You can also\nuse the GitHub Desktop app if you prefer using a visual interface over the command line.\nWe recommend that you create a local Git repository and publish it to GitHub before starting\nthe tutorial, and commit your code after every step.\n:::info Installing Git via GitHub Desktop\nGitHub Desktop will install the latest version of Git on your system if you don't already have\nit installed.\n:::\nNode.js and npm\nTo begin developing an Electron app, you need to install the Node.js\nruntime and its bundled npm package manager onto your system. We recommend that you\nuse the latest long-term support (LTS) version.\n:::tip\nPlease install Node.js using pre-built installers for your platform.\nYou may encounter incompatibility issues with different development tools otherwise.\nIf you are using macOS, we recommend using a package manager like Homebrew or\nnvm to avoid any directory permission issues.\n:::\nTo check that Node.js was installed correctly, you can use the `-v` flag when\nrunning the `node` and `npm` commands. These should print out the installed\nversions.\n`sh\n$ node -v\nv16.14.2\n$ npm -v\n8.7.0`\n:::caution\nAlthough you need Node.js installed locally to scaffold an Electron project,\nElectron does not use your system's Node.js installation to run its code. Instead, it\ncomes bundled with its own Node.js runtime. This means that your end users do not\nneed to install Node.js themselves as a prerequisite to running your app.\nTo check which version of Node.js is running in your app, you can access the global\n[`process.versions`][] variable in the main process or preload script. You can also reference\nhttps://releases.electronjs.org/releases.json.\n:::\n\n",
    "tag": "electron"
  },
  {
    "title": "Multithreading",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/multithreading.md",
    "content": "Multithreading\nWith [Web Workers][web-workers], it is possible to run JavaScript in OS-level\nthreads.\nMulti-threaded Node.js\nIt is possible to use Node.js features in Electron's Web Workers, to do\nso the `nodeIntegrationInWorker` option should be set to `true` in\n`webPreferences`.\n`javascript\nconst win = new BrowserWindow({\n  webPreferences: {\n    nodeIntegrationInWorker: true\n  }\n})`\nThe `nodeIntegrationInWorker` can be used independent of `nodeIntegration`, but\n`sandbox` must not be set to `true`.\nNote: This option is not available in SharedWorkers or Service Workers owing to incompatibilities in sandboxing policies.\nAvailable APIs\nAll built-in modules of Node.js are supported in Web Workers, and `asar`\narchives can still be read with Node.js APIs. However none of Electron's\nbuilt-in modules can be used in a multi-threaded environment.\nNative Node.js modules\nAny native Node.js module can be loaded directly in Web Workers, but it is\nstrongly recommended not to do so. Most existing native modules have been\nwritten assuming single-threaded environment, using them in Web Workers will\nlead to crashes and memory corruptions.\nNote that even if a native Node.js module is thread-safe it's still not safe to\nload it in a Web Worker because the `process.dlopen` function is not thread\nsafe.\nThe only way to load a native module safely for now, is to make sure the app\nloads no native modules after the Web Workers get started.\n`javascript\nprocess.dlopen = () => {\n  throw new Error('Load native module is not safe')\n}\nconst worker = new Worker('script.js')`",
    "tag": "electron"
  },
  {
    "title": "Accessibility",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/accessibility.md",
    "content": "Accessibility\nAccessibility concerns in Electron applications are similar to those of\nwebsites because they're both ultimately HTML.\nManually enabling accessibility features\nElectron applications will automatically enable accessibility features in the\npresence of assistive technology (e.g. JAWS\non Windows or VoiceOver on macOS).\nSee Chrome's accessibility documentation for more details.\nYou can also manually toggle these features either within your Electron application\nor by setting flags in third-party native software.\nUsing Electron's API\nBy using the [`app.setAccessibilitySupportEnabled(enabled)`][setAccessibilitySupportEnabled]\nAPI, you can manually expose Chrome's accessibility tree to users in the application preferences.\nNote that the user's system assistive utilities have priority over this setting and\nwill override it.\nWithin third-party software\nmacOS\nOn macOS, third-party assistive technology can toggle accessibility features inside\nElectron applications by setting the `AXManualAccessibility` attribute\nprogrammatically:\n```objc\nCFStringRef kAXManualAccessibility = CFSTR(\"AXManualAccessibility\");\n\n\n(void)enableAccessibility:(BOOL)enable inElectronApplication:(NSRunningApplication *)app\n{\n    AXUIElementRef appRef = AXUIElementCreateApplication(app.processIdentifier);\n    if (appRef == nil)\n        return;\nCFBooleanRef value = enable ? kCFBooleanTrue : kCFBooleanFalse;\nAXUIElementSetAttributeValue(appRef, kAXManualAccessibility, value);\nCFRelease(appRef);\n}\n```\n\n",
    "tag": "electron"
  },
  {
    "title": "Electron Releases",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/electron-timelines.md",
    "content": "Electron Releases\nElectron frequently releases major versions alongside every other Chromium release.\nThis document focuses on the release cadence and version support policy.\nFor a more in-depth guide on our git branches and how Electron uses semantic versions,\ncheck out our Electron Versioning doc.\nTimeline\n| Electron | Alpha | Beta | Stable | EOL | Chrome | Node | Supported |\n| ------- | ----- | ------- | ------ | ------ | ---- | ---- | ---- |\n| 25.0.0 | 2023-Apr-10 | 2023-May-02 | 2023-May-30 | TBD | M114 | TBD | TBD |\n| 24.0.0 | 2022-Feb-09 | 2023-Mar-07 | 2023-Apr-08 | TBD | M112 | TBD | \u2705 |\n| 23.0.0 | 2022-Dec-01 | 2023-Jan-10 | 2023-Feb-07 | TBD | M110 | TBD | \u2705 |\n| 22.0.0 | 2022-Sep-29 | 2022-Oct-25 | 2022-Nov-29 | TBD | M108 | v16.17 | \u2705 |\n| 21.0.0 | 2022-Aug-04 | 2022-Aug-30 | 2022-Sep-27 | TBD | M106 | v16.16 | \u2705 |\n| 20.0.0 | 2022-May-26 | 2022-Jun-21 | 2022-Aug-02 | 2023-Feb-07 | M104 | v16.15 | \ud83d\udeab |\n| 19.0.0 | 2022-Mar-31 | 2022-Apr-26 | 2022-May-24 | 2022-Nov-29 | M102 | v16.14 | \ud83d\udeab |\n| 18.0.0 | 2022-Feb-03 | 2022-Mar-03 | 2022-Mar-29 | 2022-Sep-27 | M100 | v16.13 | \ud83d\udeab |\n| 17.0.0 | 2021-Nov-18 | 2022-Jan-06 | 2022-Feb-01 | 2022-Aug-02 | M98 | v16.13 | \ud83d\udeab |\n| 16.0.0 | 2021-Sep-23 | 2021-Oct-20 | 2021-Nov-16 | 2022-May-24 | M96 | v16.9 | \ud83d\udeab |\n| 15.0.0 | 2021-Jul-20 | 2021-Sep-01 | 2021-Sep-21 | 2022-May-24 | M94 | v16.5 | \ud83d\udeab |\n| 14.0.0 | -- | 2021-May-27 | 2021-Aug-31 | 2022-Mar-29 | M93 | v14.17 | \ud83d\udeab |\n| 13.0.0 | -- | 2021-Mar-04 | 2021-May-25 | 2022-Feb-01 | M91 | v14.16 | \ud83d\udeab |\n| 12.0.0 | -- | 2020-Nov-19 | 2021-Mar-02 | 2021-Nov-16 | M89 | v14.16 | \ud83d\udeab |\n| 11.0.0 | -- | 2020-Aug-27 | 2020-Nov-17 | 2021-Aug-31 | M87 | v12.18 | \ud83d\udeab |\n| 10.0.0 | -- | 2020-May-21 | 2020-Aug-25 | 2021-May-25 | M85 | v12.16 | \ud83d\udeab |\n| 9.0.0 | -- | 2020-Feb-06 | 2020-May-19 | 2021-Mar-02 | M83 | v12.14 | \ud83d\udeab |\n| 8.0.0 | -- | 2019-Oct-24 | 2020-Feb-04 | 2020-Nov-17 | M80 | v12.13 | \ud83d\udeab |\n| 7.0.0 | -- | 2019-Aug-01 | 2019-Oct-22 | 2020-Aug-25 | M78 | v12.8 | \ud83d\udeab |\n| 6.0.0 | -- | 2019-Apr-25 | 2019-Jul-30 | 2020-May-19 | M76 | v12.14.0 | \ud83d\udeab |\n| 5.0.0 | -- | 2019-Jan-22 | 2019-Apr-23 | 2020-Feb-04 | M73 | v12.0 | \ud83d\udeab |\n| 4.0.0 | -- | 2018-Oct-11 | 2018-Dec-20 | 2019-Oct-22 | M69 | v10.11 | \ud83d\udeab |\n| 3.0.0 | -- | 2018-Jun-21 | 2018-Sep-18 | 2019-Jul-30 | M66 | v10.2 | \ud83d\udeab |\n| 2.0.0 | -- | 2018-Feb-21 | 2018-May-01 | 2019-Apr-23 | M61 | v8.9 | \ud83d\udeab |\nNotes:\n\nThe `-alpha.1`, `-beta.1`, and `stable` dates are our solid release dates.\nWe strive for weekly alpha/beta releases, but we often release more than scheduled.\nAll dates are our goals but there may be reasons for adjusting the stable deadline, such as security bugs.\n\nHistorical changes:\n\nSince Electron 5, Electron has been publicizing its release dates (see blog post).\nSince Electron 6, Electron major versions have been targeting every other Chromium major version. Each Electron stable should happen on the same day as Chrome stable (see blog post).\nSince Electron 16, Electron has been releasing major versions on an 8-week cadence in accordance to Chrome's change to a 4-week release cadence (see blog post).\n\n:::info Chrome release dates\nChromium has the own public release schedule here.\n:::\nVersion support policy\n:::info\nBeginning in September 2021 (Electron 15), the Electron team\nwill temporarily support the latest four stable major versions. This\nextended support is intended to help Electron developers transition to\nthe new 8-week release cadence,\nand will continue until the release of Electron 19. At that time,\nthe Electron team will drop support back to the latest three stable major versions.\n:::\nThe latest three stable major versions are supported by the Electron team.\nFor example, if the latest release is 6.1.x, then the 5.0.x as well\nas the 4.2.x series are supported. We only support the latest minor release\nfor each stable release series. This means that in the case of a security fix,\n6.1.x will receive the fix, but we will not release a new version of 6.0.x.\nThe latest stable release unilaterally receives all fixes from `main`,\nand the version prior to that receives the vast majority of those fixes\nas time and bandwidth warrants. The oldest supported release line will receive\nonly security fixes directly.\nBreaking API changes\nWhen an API is changed or removed in a way that breaks existing functionality, the\nprevious functionality will be supported for a minimum of two major versions when\npossible before being removed. For example, if a function takes three arguments,\nand that number is reduced to two in major version 10, the three-argument version would\ncontinue to work until, at minimum, major version 12. Past the minimum two-version\nthreshold, we will attempt to support backwards compatibility beyond two versions\nuntil the maintainers feel the maintenance burden is too high to continue doing so.\nEnd-of-life\nWhen a release branch reaches the end of its support cycle, the series\nwill be deprecated in NPM and a final end-of-support release will be\nmade. This release will add a warning to inform that an unsupported\nversion of Electron is in use.\nThese steps are to help app developers learn when a branch they're\nusing becomes unsupported, but without being excessively intrusive\nto end users.\nIf an application has exceptional circumstances and needs to stay\non an unsupported series of Electron, developers can silence the\nend-of-support warning by omitting the final release from the app's\n`package.json` `devDependencies`. For example, since the 1-6-x series\nended with an end-of-support 1.6.18 release, developers could choose\nto stay in the 1-6-x series without warnings with `devDependency` of",
    "tag": "electron"
  },
  {
    "title": "With tooling",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/application-distribution.md",
    "content": "\ntitle: 'Application Packaging'\ndescription: 'To distribute your app with Electron, you need to package and rebrand it. To do this, you can either use specialized tooling or manual approaches.'\nslug: application-distribution\nhide_title: false\n\nTo distribute your app with Electron, you need to package and rebrand it. To do this, you\ncan either use specialized tooling or manual approaches.\nWith tooling\nThere are a couple tools out there that exist to package and distribute your Electron app.\nWe recommend using Electron Forge. You can check out\nits documentation directly, or refer to the Packaging and Distribution\npart of the Electron tutorial.\nManual packaging\nIf you prefer the manual approach, there are 2 ways to distribute your application:\n\nWith prebuilt binaries\nWith an app source code archive\n\nWith prebuilt binaries\nTo distribute your app manually, you need to download Electron's prebuilt\nbinaries. Next, the folder\ncontaining your app should be named `app` and placed in Electron's resources\ndirectory as shown in the following examples.\n:::note\nThe location of Electron's prebuilt binaries is indicated\nwith `electron/` in the examples below.\n:::\n`plain title='macOS'\nelectron/Electron.app/Contents/Resources/app/\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 main.js\n\u2514\u2500\u2500 index.html`\n`plain title='Windows and Linux'\nelectron/resources/app\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 main.js\n\u2514\u2500\u2500 index.html`\nThen execute `Electron.app` on macOS, `electron` on Linux, or `electron.exe`\non Windows, and Electron will start as your app. The `electron` directory\nwill then be your distribution to deliver to users.\nWith an app source code archive (asar)\nInstead of shipping your app by copying all of its source files, you can\npackage your app into an [asar][] archive to improve the performance of reading\nfiles on platforms like Windows, if you are not already using a bundler such\nas Parcel or Webpack.\nTo use an `asar` archive to replace the `app` folder, you need to rename the\narchive to `app.asar`, and put it under Electron's resources directory like\nbelow, and Electron will then try to read the archive and start from it.\n`plain title='macOS'\nelectron/Electron.app/Contents/Resources/\n\u2514\u2500\u2500 app.asar`\n`plain title='Windows'\nelectron/resources/\n\u2514\u2500\u2500 app.asar`\nYou can find more details on how to use `asar` in the\n[`electron/asar` repository][asar].\nRebranding with downloaded binaries\nAfter bundling your app into Electron, you will want to rebrand Electron\nbefore distributing it to users.\n\nWindows: You can rename `electron.exe` to any name you like, and edit\n  its icon and other information with tools like rcedit.\nLinux: You can rename the `electron` executable to any name you like.\n\nmacOS: You can rename `Electron.app` to any name you want, and you also have to rename\n  the `CFBundleDisplayName`, `CFBundleIdentifier` and `CFBundleName` fields in the\n  following files:\n\n\n`Electron.app/Contents/Info.plist`\n\n`Electron.app/Contents/Frameworks/Electron Helper.app/Contents/Info.plist`\n\nYou can also rename the helper app to avoid showing `Electron Helper` in the\n  Activity Monitor, but make sure you have renamed the helper app's executable\n  file's name.\nThe structure of a renamed app would be like:\n`plain\nMyApp.app/Contents\n\u251c\u2500\u2500 Info.plist\n\u251c\u2500\u2500 MacOS/\n\u2502   \u2514\u2500\u2500 MyApp\n\u2514\u2500\u2500 Frameworks/\n    \u2514\u2500\u2500 MyApp Helper.app\n        \u251c\u2500\u2500 Info.plist\n        \u2514\u2500\u2500 MacOS/\n            \u2514\u2500\u2500 MyApp Helper`\n:::note\nit is also possible to rebrand Electron by changing the product name and\nbuilding it from source. To do this you need to set the build argument\ncorresponding to the product name (`electron_product_name = \"YourProductName\"`)\nin the `args.gn` file and rebuild.\nKeep in mind this is not recommended as setting up the environment to compile\nfrom source is not trivial and takes significant time.\n:::",
    "tag": "electron"
  },
  {
    "title": "Quick Start",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/quick-start.md",
    "content": "Quick Start\nThis guide will step you through the process of creating a barebones Hello World app in\nElectron, similar to electron/electron-quick-start.\nBy the end of this tutorial, your app will open a browser window that displays a web page\nwith information about which Chromium, Node.js, and Electron versions are running.\nPrerequisites\nTo use Electron, you need to install Node.js. We recommend that you\nuse the latest `LTS` version available.\n\nPlease install Node.js using pre-built installers for your platform.\nYou may encounter incompatibility issues with different development tools otherwise.\n\nTo check that Node.js was installed correctly, type the following commands in your\nterminal client:\n`sh\nnode -v\nnpm -v`\nThe commands should print the versions of Node.js and npm accordingly.\nNote: Since Electron embeds Node.js into its binary, the version of Node.js running\nyour code is unrelated to the version running on your system.\nCreate your application\nScaffold the project\nElectron apps follow the same general structure as other Node.js projects.\nStart by creating a folder and initializing an npm package.\n`sh npm2yarn\nmkdir my-electron-app && cd my-electron-app\nnpm init`\nThe interactive `init` command will prompt you to set some fields in your config.\nThere are a few rules to follow for the purposes of this tutorial:\n\n`entry point` should be `main.js`.\n`author` and `description` can be any value, but are necessary for\napp packaging.\n\nYour `package.json` file should look something like this:\n`json\n{\n  \"name\": \"my-electron-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Hello World!\",\n  \"main\": \"main.js\",\n  \"author\": \"Jane Doe\",\n  \"license\": \"MIT\"\n}`\nThen, install the `electron` package into your app's `devDependencies`.\n`sh npm2yarn\nnpm install --save-dev electron`\n\nNote: If you're encountering any issues with installing Electron, please\nrefer to the Advanced Installation guide.\n\nFinally, you want to be able to execute Electron. In the scripts\nfield of your `package.json` config, add a `start` command like so:\n`json\n{\n  \"scripts\": {\n    \"start\": \"electron .\"\n  }\n}`\nThis `start` command will let you open your app in development mode.\n`sh npm2yarn\nnpm start`\n\nNote: This script tells Electron to run on your project's root folder. At this stage,\nyour app will immediately throw an error telling you that it cannot find an app to run.\n\nRun the main process\nThe entry point of any Electron application is its `main` script. This script controls the\nmain process, which runs in a full Node.js environment and is responsible for\ncontrolling your app's lifecycle, displaying native interfaces, performing privileged\noperations, and managing renderer processes (more on that later).\nDuring execution, Electron will look for this script in the main\nfield of the app's `package.json` config, which you should have configured during the\napp scaffolding step.\nTo initialize the `main` script, create an empty file named `main.js` in the root folder\nof your project.\n\nNote: If you run the `start` script again at this point, your app will no longer throw\nany errors! However, it won't do anything yet because we haven't added any code into\n`main.js`.\n\nCreate a web page\nBefore we can create a window for our application, we need to create the content that\nwill be loaded into it. In Electron, each window displays web contents that can be loaded\nfrom either a local HTML file or a remote URL.\nFor this tutorial, you will be doing the former. Create an `index.html` file in the root\nfolder of your project:\n```html\n\n\n\n\n\n\nHello World!\n\n\n\nHello World!\n    We are using Node.js ,\n    Chromium ,\n    and Electron .\n  \n\n```\n\nNote: Looking at this HTML document, you can observe that the version numbers are\nmissing from the body text. We'll manually insert them later using JavaScript.\n\nOpening your web page in a browser window\nNow that you have a web page, load it into an application window. To do so, you'll\nneed two Electron modules:\n\nThe app module, which controls your application's event lifecycle.\nThe BrowserWindow module, which creates and manages application\n  windows.\n\nBecause the main process runs Node.js, you can import these as CommonJS\nmodules at the top of your file:\n`js\nconst { app, BrowserWindow } = require('electron')`\nThen, add a `createWindow()` function that loads `index.html` into a new `BrowserWindow`\ninstance.\n```js\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\nwin.loadFile('index.html')\n}\n```\nNext, call this `createWindow()` function to open your window.\nIn Electron, browser windows can only be created after the `app` module's\nready event is fired. You can wait for this event by using the\napp.whenReady() API. Call `createWindow()` after `whenReady()`\nresolves its Promise.\n`js\napp.whenReady().then(() => {\n  createWindow()\n})`\n\nNote: At this point, your Electron application should successfully\nopen a window that displays your web page!\n\nManage your window's lifecycle\nAlthough you can now open a browser window, you'll need some additional boilerplate code\nto make it feel more native to each platform. Application windows behave differently on\neach OS, and Electron puts the responsibility on developers to implement these\nconventions in their app.\nIn general, you can use the `process` global's platform attribute\nto run code specifically for certain operating systems.\nQuit the app when all windows are closed (Windows & Linux)\nOn Windows and Linux, exiting all windows generally quits an application entirely.\nTo implement this, listen for the `app` module's 'window-all-closed'\nevent, and call app.quit() if the user is not on macOS (`darwin`).\n`js\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') app.quit()\n})`\nOpen a window if none are open (macOS)\nWhereas Linux and Windows apps quit when they have no windows open, macOS apps generally\ncontinue running even without any windows open, and activating the app when no windows\nare available should open a new one.\nTo implement this feature, listen for the `app` module's activate\nevent, and call your existing `createWindow()` method if no browser windows are open.\nBecause windows cannot be created before the `ready` event, you should only listen for\n`activate` events after your app is initialized. Do this by attaching your event listener\nfrom within your existing `whenReady()` callback.\n```js\napp.whenReady().then(() => {\n  createWindow()\napp.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n```\n\nNote: At this point, your window controls should be fully functional!\n\nAccess Node.js from the renderer with a preload script\nNow, the last thing to do is print out the version numbers for Electron and its\ndependencies onto your web page.\nAccessing this information is trivial to do in the main process through Node's\nglobal `process` object. However, you can't just edit the DOM from the main\nprocess because it has no access to the renderer's `document` context.\nThey're in entirely different processes!\n\nNote: If you need a more in-depth look at Electron processes, see the\nProcess Model document.\n\nThis is where attaching a preload script to your renderer comes in handy.\nA preload script runs before the renderer process is loaded, and has access to both\nrenderer globals (e.g. `window` and `document`) and a Node.js environment.\nCreate a new script named `preload.js` as such:\n```js\nwindow.addEventListener('DOMContentLoaded', () => {\n  const replaceText = (selector, text) => {\n    const element = document.getElementById(selector)\n    if (element) element.innerText = text\n  }\nfor (const dependency of ['chrome', 'node', 'electron']) {\n    replaceText(`${dependency}-version`, process.versions[dependency])\n  }\n})\n```\nThe above code accesses the Node.js `process.versions` object and runs a basic `replaceText`\nhelper function to insert the version numbers into the HTML document.\nTo attach this script to your renderer process, pass in the path to your preload script\nto the `webPreferences.preload` option in your existing `BrowserWindow` constructor.\n```js\n// include the Node.js 'path' module at the top of your file\nconst path = require('path')\n// modify your existing createWindow() function\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\nwin.loadFile('index.html')\n}\n// ...\n```\nThere are two Node.js concepts that are used here:\n\nThe __dirname string points to the path of the currently executing script\n  (in this case, your project's root folder).\nThe path.join API joins multiple path segments together, creating a\n  combined path string that works across all platforms.\n\nWe use a path relative to the currently executing JavaScript file so that your relative\npath will work in both development and packaged mode.\nBonus: Add functionality to your web contents\nAt this point, you might be wondering how to add more functionality to your application.\nFor any interactions with your web contents, you want to add scripts to your\nrenderer process. Because the renderer runs in a normal web environment, you can add a\n`<script>` tag right before your `index.html` file's closing `</body>` tag to include\nany arbitrary scripts you want:\n```html\n\n```\nThe code contained in `renderer.js` can then use the same JavaScript APIs and tooling\nyou use for typical front-end development, such as using webpack to bundle\nand minify your code or React to manage your user interfaces.\nRecap\nAfter following the above steps, you should have a fully functional\nElectron application that looks like this:\n\n\nThe full code is available below:\n```js\n// main.js\n// Modules to control application life and create native browser window\nconst { app, BrowserWindow } = require('electron')\nconst path = require('path')\nconst createWindow = () => {\n  // Create the browser window.\n  const mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n// and load the index.html of the app.\n  mainWindow.loadFile('index.html')\n// Open the DevTools.\n  // mainWindow.webContents.openDevTools()\n}\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n  createWindow()\napp.on('activate', () => {\n    // On macOS it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') app.quit()\n})\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and require them here.\n```\n```js\n// preload.js\n// All the Node.js APIs are available in the preload process.\n// It has the same sandbox as a Chrome extension.\nwindow.addEventListener('DOMContentLoaded', () => {\n  const replaceText = (selector, text) => {\n    const element = document.getElementById(selector)\n    if (element) element.innerText = text\n  }\nfor (const dependency of ['chrome', 'node', 'electron']) {\n    replaceText(`${dependency}-version`, process.versions[dependency])\n  }\n})\n```\n```html\n\n\n\n\n\n\n\nHello World!\n\n\n\nHello World!\n    We are using Node.js ,\n    Chromium ,\n    and Electron .\n\n    \n\n\n\n```\n`fiddle docs/fiddles/quick-start`\nTo summarize all the steps we've done:\n\nWe bootstrapped a Node.js application and added Electron as a dependency.\nWe created a `main.js` script that runs our main process, which controls our app\n  and runs in a Node.js environment. In this script, we used Electron's `app` and\n  `BrowserWindow` modules to create a browser window that displays web content\n  in a separate process (the renderer).\nIn order to access certain Node.js functionality in the renderer, we attached\n  a preload script to our `BrowserWindow` constructor.\n\nPackage and distribute your application\nThe fastest way to distribute your newly created app is using\nElectron Forge.\n\nAdd Electron Forge as a development dependency of your app, and use its `import` command to set up\nForge's scaffolding:\n\n```sh npm2yarn\n   npm install --save-dev @electron-forge/cli\n   npx electron-forge import\n\u2714 Checking your system\n   \u2714 Initializing Git Repository\n   \u2714 Writing modified package.json file\n   \u2714 Installing dependencies\n   \u2714 Writing modified package.json file\n   \u2714 Fixing .gitignore\nWe have ATTEMPTED to convert your app to be in a format that electron-forge understands.\nThanks for using \"electron-forge\"!!!\n   ```\n\nCreate a distributable using Forge's `make` command:\n\n```sh npm2yarn\n   npm run make\n\nmy-electron-app@1.0.0 make /my-electron-app\nelectron-forge make\n\n\u2714 Checking your system\n   \u2714 Resolving Forge Config\n   We need to package your application before we can make it\n   \u2714 Preparing to Package Application for arch: x64\n   \u2714 Preparing native dependencies\n   \u2714 Packaging Application\n   Making for the following targets: zip\n   \u2714 Making for target: zip - On platform: darwin - For arch: x64\n   ```\nElectron Forge creates the `out` folder where your package will be located:\n```plain\n   // Example for macOS\n   out/\n   \u251c\u2500\u2500 out/make/zip/darwin/x64/my-electron-app-darwin-x64-1.0.0.zip\n   \u251c\u2500\u2500 ...\n   \u2514\u2500\u2500 out/my-electron-app-darwin-x64/my-electron-app.app/Contents/MacOS/my-electron-app",
    "tag": "electron"
  },
  {
    "title": "What is Electron?",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/introduction.md",
    "content": "\ntitle: 'Introduction'\ndescription: 'Welcome to the Electron documentation! If this is your first time developing an Electron app, read through this Getting Started section to get familiar with the basics. Otherwise, feel free to explore our guides and API documentation!'\nslug: /latest/\nhide_title: false\n\nWhat is Electron?\nElectron is a framework for building desktop applications using JavaScript,\nHTML, and CSS. By embedding Chromium and [Node.js][node] into its\nbinary, Electron allows you to maintain one JavaScript codebase and create\ncross-platform apps that work on Windows, macOS, and Linux \u2014 no native development\nexperience required.\nGetting started\nWe recommend you to start with the tutorial, which guides you through the\nprocess of developing an Electron app and distributing it to users.\nThe examples and API documentation are also good places to browse around\nand discover new things.\nRunning examples with Electron Fiddle\nElectron Fiddle is a sandbox app written with Electron and supported by\nElectron's maintainers. We highly recommend installing it as a learning tool to\nexperiment with Electron's APIs or to prototype features during development.\nFiddle also integrates nicely with our documentation. When browsing through examples\nin our tutorials, you'll frequently see an \"Open in Electron Fiddle\" button underneath\na code block. If you have Fiddle installed, this button will open a\n`fiddle.electronjs.org` link that will automatically load the example into Fiddle,\nno copy-pasting required.\n`fiddle docs/fiddles/quick-start`\nWhat is in the docs?\nAll the official documentation is available from the sidebar. These\nare the different categories and what you can expect on each one:\n\nTutorial: An end-to-end guide on how to create and publish your first Electron\n  application.\nProcesses in Electron: In-depth reference on Electron processes and how to work with them.\nBest Practices: Important checklists to keep in mind when developing an Electron app.\nExamples: Quick references to add features to your Electron app.\nDevelopment: Miscellaneous development guides.\nDistribution: Learn how to distribute your app to end users.\nTesting And Debugging: How to debug JavaScript, write tests, and other tools used\n  to create quality Electron applications.\nReferences: Useful links to better understand how the Electron project works\n  and is organized.\nContributing: Compiling Electron and making contributions can be daunting.\n  We try to make it easier in this section.\n\nGetting help\nAre you getting stuck anywhere? Here are a few links to places to look:\n\nIf you need help with developing your app, our community Discord server\n  is a great place to get advice from other Electron app developers.\nIf you suspect you're running into a bug with the `electron` package, please check\n  the GitHub issue tracker to see if any existing issues match your\n  problem. If not, feel free to fill out our bug report template and submit a new issue.\n\n",
    "tag": "electron"
  },
  {
    "title": "Dark Mode",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/dark-mode.md",
    "content": "Dark Mode\nOverview\nAutomatically update the native interfaces\n\"Native interfaces\" include the file picker, window border, dialogs, context\nmenus, and more - anything where the UI comes from your operating system and\nnot from your app. The default behavior is to opt into this automatic theming\nfrom the OS.\nAutomatically update your own interfaces\nIf your app has its own dark mode, you should toggle it on and off in sync with\nthe system's dark mode setting. You can do this by using the\nprefers-color-scheme CSS media query.\nManually update your own interfaces\nIf you want to manually switch between light/dark modes, you can do this by\nsetting the desired mode in the\nthemeSource\nproperty of the `nativeTheme` module. This property's value will be propagated\nto your Renderer process. Any CSS rules related to `prefers-color-scheme` will\nbe updated accordingly.\nmacOS settings\nIn macOS 10.14 Mojave, Apple introduced a new system-wide dark mode\nfor all macOS computers. If your Electron app has a dark mode, you can make it\nfollow the system-wide dark mode setting using\nthe nativeTheme api.\nIn macOS 10.15 Catalina, Apple introduced a new \"automatic\" dark mode option\nfor all macOS computers. In order for the `nativeTheme.shouldUseDarkColors` and\n`Tray` APIs to work correctly in this mode on Catalina, you need to use Electron\n`>=7.0.0`, or set `NSRequiresAquaSystemAppearance` to `false` in your\n`Info.plist` file for older versions. Both Electron Packager\nand Electron Forge have a\ndarwinDarkModeSupport option\nto automate the `Info.plist` changes during app build time.\nIf you wish to opt-out while using Electron > 8.0.0, you must\nset the `NSRequiresAquaSystemAppearance` key in the `Info.plist` file to\n`true`. Please note that Electron 8.0.0 and above will not let you opt-out\nof this theming, due to the use of the macOS 10.14 SDK.\nExample\nThis example demonstrates an Electron application that derives its theme colors from the\n`nativeTheme`. Additionally, it provides theme toggle and reset controls using IPC channels.\n```javascript fiddle='docs/fiddles/features/dark-mode'\n```\nHow does this work?\nStarting with the `index.html` file:\n```html title='index.html'\n\n\n\n\nHello World!\n\n\n\n\nHello World!\nCurrent theme source: System\nToggle Dark Mode\nReset to System Theme\n\n\n\n\n```\nAnd the `styles.css` file:\n```css title='styles.css'\n@media (prefers-color-scheme: dark) {\n  body { background: #333; color: white; }\n}\n@media (prefers-color-scheme: light) {\n  body { background: #ddd; color: black; }\n}\n```\nThe example renders an HTML page with a couple elements. The `<strong id=\"theme-source\">`\n element shows which theme is currently selected, and the two `<button>` elements are the\n controls. The CSS file uses the prefers-color-scheme media query\n to set the `<body>` element background and text colors.\nThe `preload.js` script adds a new API to the `window` object called `darkMode`. This API\n exposes two IPC channels to the renderer process, `'dark-mode:toggle'` and `'dark-mode:system'`.\n It also assigns two methods, `toggle` and `system`, which pass messages from the renderer to the\n main process.\n```js title='preload.js'\nconst { contextBridge, ipcRenderer } = require('electron')\ncontextBridge.exposeInMainWorld('darkMode', {\n  toggle: () => ipcRenderer.invoke('dark-mode:toggle'),\n  system: () => ipcRenderer.invoke('dark-mode:system')\n})\n```\nNow the renderer process can communicate with the main process securely and perform the necessary\n mutations to the `nativeTheme` object.\nThe `renderer.js` file is responsible for controlling the `<button>` functionality.\n```js title='renderer.js'\ndocument.getElementById('toggle-dark-mode').addEventListener('click', async () => {\n  const isDarkMode = await window.darkMode.toggle()\n  document.getElementById('theme-source').innerHTML = isDarkMode ? 'Dark' : 'Light'\n})\ndocument.getElementById('reset-to-system').addEventListener('click', async () => {\n  await window.darkMode.system()\n  document.getElementById('theme-source').innerHTML = 'System'\n})\n```\nUsing `addEventListener`, the `renderer.js` file adds `'click'` [event listeners][event-listeners]\n to each button element. Each event listener handler makes calls to the respective `window.darkMode`\n API methods.\nFinally, the `main.js` file represents the main process and contains the actual `nativeTheme` API.\n```js\nconst { app, BrowserWindow, ipcMain, nativeTheme } = require('electron')\nconst path = require('path')\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\nwin.loadFile('index.html')\nipcMain.handle('dark-mode:toggle', () => {\n    if (nativeTheme.shouldUseDarkColors) {\n      nativeTheme.themeSource = 'light'\n    } else {\n      nativeTheme.themeSource = 'dark'\n    }\n    return nativeTheme.shouldUseDarkColors\n  })\nipcMain.handle('dark-mode:system', () => {\n    nativeTheme.themeSource = 'system'\n  })\n}\napp.whenReady().then(() => {\n  createWindow()\napp.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow()\n    }\n  })\n})\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n```\nThe `ipcMain.handle` methods are how the main process responds to the click events from the buttons\n on the HTML page.\nThe `'dark-mode:toggle'` IPC channel handler method checks the `shouldUseDarkColors` boolean property,\n sets the corresponding `themeSource`, and then returns the current `shouldUseDarkColors` property.\n Looking back on the renderer process event listener for this IPC channel, the return value from this\n handler is utilized to assign the correct text to the `<strong id='theme-source'>` element.\nThe `'dark-mode:system'` IPC channel handler method assigns the string `'system'` to the `themeSource`\n and returns nothing. This also corresponds with the relative renderer process event listener as the\n method is awaited with no return value expected.\nRun the example using Electron Fiddle and then click the \"Toggle Dark Mode\" button; the app should\n start alternating between a light and dark background color.\n",
    "tag": "electron"
  },
  {
    "title": "Performance",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/performance.md",
    "content": "\ntitle: Performance\ndescription: A set of guidelines for building performant Electron apps\nslug: performance\nhide_title: true\ntoc_max_heading_level: 3\n\nPerformance\nDevelopers frequently ask about strategies to optimize the performance of\nElectron applications. Software engineers, consumers, and framework developers\ndo not always agree on one single definition of what \"performance\" means. This\ndocument outlines some of the Electron maintainers' favorite ways to reduce the\namount of memory, CPU, and disk resources being used while ensuring that your\napp is responsive to user input and completes operations as quickly as\npossible. Furthermore, we want all performance strategies to maintain a high\nstandard for your app's security.\nWisdom and information about how to build performant websites with JavaScript\ngenerally applies to Electron apps, too. To a certain extent, resources\ndiscussing how to build performant Node.js applications also apply, but be\ncareful to understand that the term \"performance\" means different things for\na Node.js backend than it does for an application running on a client.\nThis list is provided for your convenience \u2013 and is, much like our\nsecurity checklist \u2013 not meant to exhaustive. It is probably possible\nto build a slow Electron app that follows all the steps outlined below. Electron\nis a powerful development platform that enables you, the developer, to do more\nor less whatever you want. All that freedom means that performance is largely\nyour responsibility.\nMeasure, Measure, Measure\nThe list below contains a number of steps that are fairly straightforward and\neasy to implement. However, building the most performant version of your app\nwill require you to go beyond a number of steps. Instead, you will have to\nclosely examine all the code running in your app by carefully profiling and\nmeasuring. Where are the bottlenecks? When the user clicks a button, what\noperations take up the brunt of the time? While the app is simply idling, which\nobjects take up the most memory?\nTime and time again, we have seen that the most successful strategy for building\na performant Electron app is to profile the running code, find the most\nresource-hungry piece of it, and to optimize it. Repeating this seemingly\nlaborious process over and over again will dramatically increase your app's\nperformance. Experience from working with major apps like Visual Studio Code or\nSlack has shown that this practice is by far the most reliable strategy to\nimprove performance.\nTo learn more about how to profile your app's code, familiarize yourself with\nthe Chrome Developer Tools. For advanced analysis looking at multiple processes\nat once, consider the Chrome Tracing tool.\nRecommended Reading\n\nGet Started With Analyzing Runtime Performance\n[Talk: \"Visual Studio Code - The First Second\"][vscode-first-second]\n\nChecklist: Performance recommendations\nChances are that your app could be a little leaner, faster, and generally less\nresource-hungry if you attempt these steps.\n\nCarelessly including modules\nLoading and running code too soon\nBlocking the main process\nBlocking the renderer process\nUnnecessary polyfills\nUnnecessary or blocking network requests\nBundle your code\n\n1. Carelessly including modules\nBefore adding a Node.js module to your application, examine said module. How\nmany dependencies does that module include? What kind of resources does\nit need to simply be called in a `require()` statement? You might find\nthat the module with the most downloads on the NPM package registry or the most stars on GitHub\nis not in fact the leanest or smallest one available.\nWhy?\nThe reasoning behind this recommendation is best illustrated with a real-world\nexample. During the early days of Electron, reliable detection of network\nconnectivity was a problem, resulting many apps to use a module that exposed a\nsimple `isOnline()` method.\nThat module detected your network connectivity by attempting to reach out to a\nnumber of well-known endpoints. For the list of those endpoints, it depended on\na different module, which also contained a list of well-known ports. This\ndependency itself relied on a module containing information about ports, which\ncame in the form of a JSON file with more than 100,000 lines of content.\nWhenever the module was loaded (usually in a `require('module')` statement),\nit would load all its dependencies and eventually read and parse this JSON\nfile. Parsing many thousands lines of JSON is a very expensive operation. On\na slow machine it can take up whole seconds of time.\nIn many server contexts, startup time is virtually irrelevant. A Node.js server\nthat requires information about all ports is likely actually \"more performant\"\nif it loads all required information into memory whenever the server boots at\nthe benefit of serving requests faster. The module discussed in this example is\nnot a \"bad\" module. Electron apps, however, should not be loading, parsing, and\nstoring in memory information that it does not actually need.\nIn short, a seemingly excellent module written primarily for Node.js servers\nrunning Linux might be bad news for your app's performance. In this particular\nexample, the correct solution was to use no module at all, and to instead use\nconnectivity checks included in later versions of Chromium.\nHow?\nWhen considering a module, we recommend that you check:\n\nthe size of dependencies included\nthe resources required to load (`require()`) it\nthe resources required to perform the action you're interested in\n\nGenerating a CPU profile and a heap memory profile for loading a module can be done\nwith a single command on the command line. In the example below, we're looking at\nthe popular module `request`.\n`sh\nnode --cpu-prof --heap-prof -e \"require('request')\"`\nExecuting this command results in a `.cpuprofile` file and a `.heapprofile`\nfile in the directory you executed it in. Both files can be analyzed using\nthe Chrome Developer Tools, using the `Performance` and `Memory` tabs\nrespectively.\n\n\nIn this example, on the author's machine, we saw that loading `request` took\nalmost half a second, whereas `node-fetch` took dramatically less memory\nand less than 50ms.\n2. Loading and running code too soon\nIf you have expensive setup operations, consider deferring those. Inspect all\nthe work being executed right after the application starts. Instead of firing\noff all operations right away, consider staggering them in a sequence more\nclosely aligned with the user's journey.\nIn traditional Node.js development, we're used to putting all our `require()`\nstatements at the top. If you're currently writing your Electron application\nusing the same strategy and are using sizable modules that you do not\nimmediately need, apply the same strategy and defer loading to a more\nopportune time.\nWhy?\nLoading modules is a surprisingly expensive operation, especially on Windows.\nWhen your app starts, it should not make users wait for operations that are\ncurrently not necessary.\nThis might seem obvious, but many applications tend to do a large amount of\nwork immediately after the app has launched - like checking for updates,\ndownloading content used in a later flow, or performing heavy disk I/O\noperations.\nLet's consider Visual Studio Code as an example. When you open a file, it will\nimmediately display the file to you without any code highlighting, prioritizing\nyour ability to interact with the text. Once it has done that work, it will\nmove on to code highlighting.\nHow?\nLet's consider an example and assume that your application is parsing files\nin the fictitious `.foo` format. In order to do that, it relies on the\nequally fictitious `foo-parser` module. In traditional Node.js development,\nyou might write code that eagerly loads dependencies:\n```js title='parser.js'\nconst fs = require('fs')\nconst fooParser = require('foo-parser')\nclass Parser {\n  constructor () {\n    this.files = fs.readdirSync('.')\n  }\ngetParsedFiles () {\n    return fooParser.parse(this.files)\n  }\n}\nconst parser = new Parser()\nmodule.exports = { parser }\n```\nIn the above example, we're doing a lot of work that's being executed as soon\nas the file is loaded. Do we need to get parsed files right away? Could we\ndo this work a little later, when `getParsedFiles()` is actually called?\n```js title='parser.js'\n// \"fs\" is likely already being loaded, so the`require()` call is cheap\nconst fs = require('fs')\nclass Parser {\n  async getFiles () {\n    // Touch the disk as soon as `getFiles` is called, not sooner.\n    // Also, ensure that we're not blocking other operations by using\n    // the asynchronous version.\n    this.files = this.files || await fs.readdir('.')\n\n\n```return this.files\n```\n\n\n}\nasync getParsedFiles () {\n    // Our fictitious foo-parser is a big and expensive module to load, so\n    // defer that work until we actually need to parse files.\n    // Since `require()` comes with a module cache, the `require()` call\n    // will only be expensive once - subsequent calls of `getParsedFiles()`\n    // will be faster.\n    const fooParser = require('foo-parser')\n    const files = await this.getFiles()\n\n\n```return fooParser.parse(files)\n```\n\n\n}\n}\n// This operation is now a lot cheaper than in our previous example\nconst parser = new Parser()\nmodule.exports = { parser }\n```\nIn short, allocate resources \"just in time\" rather than allocating them all\nwhen your app starts.\n3. Blocking the main process\nElectron's main process (sometimes called \"browser process\") is special: It is\nthe parent process to all your app's other processes and the primary process\nthe operating system interacts with. It handles windows, interactions, and the\ncommunication between various components inside your app. It also houses the\nUI thread.\nUnder no circumstances should you block this process and the UI thread with\nlong-running operations. Blocking the UI thread means that your entire app\nwill freeze until the main process is ready to continue processing.\nWhy?\nThe main process and its UI thread are essentially the control tower for major\noperations inside your app. When the operating system tells your app about a\nmouse click, it'll go through the main process before it reaches your window.\nIf your window is rendering a buttery-smooth animation, it'll need to talk to\nthe GPU process about that \u2013 once again going through the main process.\nElectron and Chromium are careful to put heavy disk I/O and CPU-bound operations\nonto new threads to avoid blocking the UI thread. You should do the same.\nHow?\nElectron's powerful multi-process architecture stands ready to assist you with\nyour long-running tasks, but also includes a small number of performance traps.\n\n\nFor long running CPU-heavy tasks, make use of\nworker threads, consider moving them to the BrowserWindow, or\n(as a last resort) spawn a dedicated process.\n\n\nAvoid using the synchronous IPC and the `@electron/remote` module as much\nas possible. While there are legitimate use cases, it is far too easy to\nunknowingly block the UI thread.\n\n\nAvoid using blocking I/O operations in the main process. In short, whenever\ncore Node.js modules (like `fs` or `child_process`) offer a synchronous or an\nasynchronous version, you should prefer the asynchronous and non-blocking\nvariant.\n\n\n4. Blocking the renderer process\nSince Electron ships with a current version of Chrome, you can make use of the\nlatest and greatest features the Web Platform offers to defer or offload heavy\noperations in a way that keeps your app smooth and responsive.\nWhy?\nYour app probably has a lot of JavaScript to run in the renderer process. The\ntrick is to execute operations as quickly as possible without taking away\nresources needed to keep scrolling smooth, respond to user input, or animations\nat 60fps.\nOrchestrating the flow of operations in your renderer's code is\nparticularly useful if users complain about your app sometimes \"stuttering\".\nHow?\nGenerally speaking, all advice for building performant web apps for modern\nbrowsers apply to Electron's renderers, too. The two primary tools at your\ndisposal  are currently `requestIdleCallback()` for small operations and\n`Web Workers` for long-running operations.\n`requestIdleCallback()` allows developers to queue up a function to be\nexecuted as soon as the process is entering an idle period. It enables you to\nperform low-priority or background work without impacting the user experience.\nFor more information about how to use it,\ncheck out its documentation on MDN.\nWeb Workers are a powerful tool to run code on a separate thread. There are\nsome caveats to consider \u2013\u00a0consult Electron's\nmultithreading documentation and the\nMDN documentation for Web Workers. They're an ideal solution\nfor any operation that requires a lot of CPU power for an extended period of\ntime.\n5. Unnecessary polyfills\nOne of Electron's great benefits is that you know exactly which engine will\nparse your JavaScript, HTML, and CSS. If you're re-purposing code that was\nwritten for the web at large, make sure to not polyfill features included in\nElectron.\nWhy?\nWhen building a web application for today's Internet, the oldest environments\ndictate what features you can and cannot use. Even though Electron supports\nwell-performing CSS filters and animations, an older browser might not. Where\nyou could use WebGL, your developers may have chosen a more resource-hungry\nsolution to support older phones.\nWhen it comes to JavaScript, you may have included toolkit libraries like\njQuery for DOM selectors or polyfills like the `regenerator-runtime` to support\n`async/await`.\nIt is rare for a JavaScript-based polyfill to be faster than the equivalent\nnative feature in Electron. Do not slow down your Electron app by shipping your\nown version of standard web platform features.\nHow?\nOperate under the assumption that polyfills in current versions of Electron\nare unnecessary. If you have doubts, check caniuse.com\nand check if the version of Chromium used in your Electron version\nsupports the feature you desire.\nIn addition, carefully examine the libraries you use. Are they really necessary?\n`jQuery`, for example, was such a success that many of its features are now part\nof the standard JavaScript feature set available.\nIf you're using a transpiler/compiler like TypeScript, examine its configuration\nand ensure that you're targeting the latest ECMAScript version supported by\nElectron.\n6. Unnecessary or blocking network requests\nAvoid fetching rarely changing resources from the internet if they could easily\nbe bundled with your application.\nWhy?\nMany users of Electron start with an entirely web-based app that they're\nturning into a desktop application. As web developers, we are used to loading\nresources from a variety of content delivery networks. Now that you are\nshipping a proper desktop application, attempt to \"cut the cord\" where possible\nand avoid letting your users wait for resources that never change and could\neasily be included  in your app.\nA typical example is Google Fonts. Many developers make use of Google's\nimpressive collection of free fonts, which comes with a content delivery\nnetwork. The pitch is straightforward: Include a few lines of CSS and Google\nwill take care of the rest.\nWhen building an Electron app, your users are better served if you download\nthe fonts and include them in your app's bundle.\nHow?\nIn an ideal world, your application wouldn't need the network to operate at\nall. To get there, you must understand what resources your app is downloading\n- and how large those resources are.\nTo do so, open up the developer tools. Navigate to the `Network` tab and check\nthe `Disable cache` option. Then, reload your renderer. Unless your app\nprohibits such reloads, you can usually trigger a reload by hitting `Cmd + R`\nor `Ctrl + R` with the developer tools in focus.\nThe tools will now meticulously record all network requests. In a first pass,\ntake stock of all the resources being downloaded, focusing on the larger files\nfirst. Are any of them images, fonts, or media files that don't change and\ncould be included with your bundle? If so, include them.\nAs a next step, enable `Network Throttling`. Find the drop-down that currently\nreads `Online` and select a slower speed such as `Fast 3G`. Reload your\nrenderer and see if there are any resources that your app is unnecessarily\nwaiting for. In many cases, an app will wait for a network request to complete\ndespite not actually needing the involved resource.\nAs a tip, loading resources from the Internet that you might want to change\nwithout shipping an application update is a powerful strategy. For advanced\ncontrol over how resources are being loaded, consider investing in\nService Workers.\n7. Bundle your code\nAs already pointed out in\n\"Loading and running code too soon\",\ncalling `require()` is an expensive operation. If you are able to do so,\nbundle your application's code into a single file.\nWhy?\nModern JavaScript development usually involves many files and modules. While\nthat's perfectly fine for developing with Electron, we heavily recommend that\nyou bundle all your code into one single file to ensure that the overhead\nincluded in calling `require()` is only paid once when your application loads.\nHow?\nThere are numerous JavaScript bundlers out there and we know better than to\nanger the community by recommending one tool over another. We do however\nrecommend that you use a bundler that is able to handle Electron's unique\nenvironment that needs to handle both Node.js and browser environments.\nAs of writing this article, the popular choices include Webpack,\nParcel, and rollup.js.\n8. Call `Menu.setApplicationMenu(null)` when you do not need a default menu\nElectron will set a default menu on startup with some standard entries. But there are reasons your application might want to change that and it will benefit startup performance.\nWhy?\nIf you build your own menu or use a frameless window without native menu, you should tell Electron early enough to not setup the default menu.\nHow?\nCall `Menu.setApplicationMenu(null)` before `app.on(\"ready\")`. This will prevent Electron from setting a default menu. See also https://github.com/electron/electron/issues/35512 for a related discussion.",
    "tag": "electron"
  },
  {
    "title": "Learning goals",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/tutorial-3-preload.md",
    "content": "\ntitle: 'Using Preload Scripts'\ndescription: 'This guide will step you through the process of creating a barebones Hello World app in Electron, similar to electron/electron-quick-start.'\nslug: tutorial-preload\nhide_title: false\n\n:::info Follow along the tutorial\nThis is part 3 of the Electron tutorial.\n\nPrerequisites\nBuilding your First App\nUsing Preload Scripts\nAdding Features\nPackaging Your Application\n[Publishing and Updating][updates]\n\n:::\nLearning goals\nIn this part of the tutorial, you will learn what a preload script is and how to use one\nto securely expose privileged APIs into the renderer process. You will also learn how to\ncommunicate between main and renderer processes with Electron's inter-process\ncommunication (IPC) modules.\nWhat is a preload script?\nElectron's main process is a Node.js environment that has full operating system access.\nOn top of Electron modules, you can also access Node.js built-ins,\nas well as any packages installed via npm. On the other hand, renderer processes run web\npages and do not run Node.js by default for security reasons.\nTo bridge Electron's different process types together, we will need to use a special script\ncalled a preload.\nAugmenting the renderer with a preload script\nA BrowserWindow's preload script runs in a context that has access to both the HTML DOM\nand a limited subset of Node.js and Electron APIs.\n:::info Preload script sandboxing\nFrom Electron 20 onwards, preload scripts are sandboxed by default and no longer have access\nto a full Node.js environment. Practically, this means that you have a polyfilled `require`\nfunction that only has access to a limited set of APIs.\n| Available API      | Details                                                                                                                                                                                                                                                        |\n| ------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Electron modules   | Renderer process modules                                                                                                                                                                                                                                       |\n| Node.js modules    | events, timers, url                                                                                                                       |\n| Polyfilled globals | Buffer, process, clearImmediate, setImmediate |\nFor more information, check out the Process Sandboxing guide.\n:::\nPreload scripts are injected before a web page loads in the renderer,\nsimilar to a Chrome extension's content scripts. To add features to your renderer\nthat require privileged access, you can define global objects through the\ncontextBridge API.\nTo demonstrate this concept, you will create a preload script that exposes your app's\nversions of Chrome, Node, and Electron into the renderer.\nAdd a new `preload.js` script that exposes selected properties of Electron's `process.versions`\nobject to the renderer process in a `versions` global variable.\n```js title=\"preload.js\"\nconst { contextBridge } = require('electron')\ncontextBridge.exposeInMainWorld('versions', {\n  node: () => process.versions.node,\n  chrome: () => process.versions.chrome,\n  electron: () => process.versions.electron,\n  // we can also expose variables, not just functions\n})\n```\nTo attach this script to your renderer process, pass its path to the\n`webPreferences.preload` option in the BrowserWindow constructor:\n```js {2,8-10} title=\"main.js\"\nconst { app, BrowserWindow } = require('electron')\nconst path = require('path')\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js'),\n    },\n  })\nwin.loadFile('index.html')\n}\napp.whenReady().then(() => {\n  createWindow()\n})\n```\n:::info\nThere are two Node.js concepts that are used here:\n\nThe __dirname string points to the path of the currently executing script\n  (in this case, your project's root folder).\nThe path.join API joins multiple path segments together, creating a\n  combined path string that works across all platforms.\n\n:::\nAt this point, the renderer has access to the `versions` global, so let's display that\ninformation in the window. This variable can be accessed via `window.versions` or simply\n`versions`. Create a `renderer.js` script that uses the [`document.getElementById`][]\nDOM API to replace the displayed text for the HTML element with `info` as its `id` property.\n`js title=\"renderer.js\"\nconst information = document.getElementById('info')\ninformation.innerText = `This app is using Chrome (v${versions.chrome()}), Node.js (v${versions.node()}), and Electron (v${versions.electron()})``\nThen, modify your `index.html` by adding a new element with `info` as its `id` property,\nand attach your `renderer.js` script:\n```html {18,20} title=\"index.html\"\n\n\n\n\n\n\nHello from Electron renderer!\n\n\n\nHello from Electron renderer!\n\ud83d\udc4b\n\n\n\n\n```\nAfter following the above steps, your app should look something like this:\n\nAnd the code should look like this:\n```fiddle docs/fiddles/tutorial-preload\n```\nCommunicating between processes\nAs we have mentioned above, Electron's main and renderer process have distinct responsibilities\nand are not interchangeable. This means it is not possible to access the Node.js APIs directly\nfrom the renderer process, nor the HTML Document Object Model (DOM) from the main process.\nThe solution for this problem is to use Electron's `ipcMain` and `ipcRenderer` modules for\ninter-process communication (IPC). To send a message from your web page to the main process,\nyou can set up a main process handler with `ipcMain.handle` and\nthen expose a function that calls `ipcRenderer.invoke` to trigger the handler in your preload script.\nTo illustrate, we will add a global function to the renderer called `ping()`\nthat will return a string from the main process.\nFirst, set up the `invoke` call in your preload script:\n```js {1,7} title=\"preload.js\"\nconst { contextBridge, ipcRenderer } = require('electron')\ncontextBridge.exposeInMainWorld('versions', {\n  node: () => process.versions.node,\n  chrome: () => process.versions.chrome,\n  electron: () => process.versions.electron,\n  ping: () => ipcRenderer.invoke('ping'),\n  // we can also expose variables, not just functions\n})\n```\n:::caution IPC security\nNotice how we wrap the `ipcRenderer.invoke('ping')` call in a helper function rather\nthan expose the `ipcRenderer` module directly via context bridge. You never want to\ndirectly expose the entire `ipcRenderer` module via preload. This would give your renderer\nthe ability to send arbitrary IPC messages to the main process, which becomes a powerful\nattack vector for malicious code.\n:::\nThen, set up your `handle` listener in the main process. We do this before\nloading the HTML file so that the handler is guaranteed to be ready before\nyou send out the `invoke` call from the renderer.\n```js {1,12} title=\"main.js\"\nconst { app, BrowserWindow, ipcMain } = require('electron')\nconst path = require('path')\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js'),\n    },\n  })\n  ipcMain.handle('ping', () => 'pong')\n  win.loadFile('index.html')\n}\napp.whenReady().then(createWindow)\n```\nOnce you have the sender and receiver set up, you can now send messages from the renderer\nto the main process through the `'ping'` channel you just defined.\n```js title='renderer.js'\nconst func = async () => {\n  const response = await window.versions.ping()\n  console.log(response) // prints out 'pong'\n}\nfunc()\n```\n:::info\nFor more in-depth explanations on using the `ipcRenderer` and `ipcMain` modules,\ncheck out the full Inter-Process Communication guide.\n:::\nSummary\nA preload script contains code that runs before your web page is loaded into the browser\nwindow. It has access to both DOM APIs and Node.js environment, and is often used to\nexpose privileged APIs to the renderer via the `contextBridge` API.\nBecause the main and renderer processes have very different responsibilities, Electron\napps often use the preload script to set up inter-process communication (IPC) interfaces\nto pass arbitrary messages between the two kinds of processes.\nIn the next part of the tutorial, we will be showing you resources on adding more\nfunctionality to your app, then teaching you distributing your app to users.\n\n",
    "tag": "electron"
  },
  {
    "title": "Packaging",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/distribution-overview.md",
    "content": "\ntitle: 'Distribution Overview'\ndescription: 'To distribute your app with Electron, you need to package and rebrand it. To do this, you can either use specialized tooling or manual approaches.'\nslug: distribution-overview\nhide_title: false\n\nOnce your app is ready for production, there are a couple steps you need to take before\nyou can deliver it to your users.\nPackaging\nTo distribute your app with Electron, you need to package all your resources and assets\ninto an executable and rebrand it. To do this, you can either use specialized tooling like Electron Forge\nor do it manually. See the Application Packaging tutorial\nfor more information.\nCode signing\nCode signing is a security technology that you use to certify that an app was\ncreated by you. You should sign your application so it does not trigger the\nsecurity checks of your user's operating system.\nTo get started with each operating system's code signing process, please read the\nCode Signing docs.\nPublishing\nOnce your app is packaged and signed, you can freely distribute your app directly\nto users by uploading your installers online.\nTo reach more users, you can also choose to upload your app to each operating system's\ndigital distribution platform (i.e. app store). These require another build step aside\nfrom your direct download app. For more information, check out each individual app store guide:\n\nMac App Store\nWindows Store\nSnapcraft (Linux)\n\nUpdating\nElectron's auto-updater allows you to deliver application updates to users\nwithout forcing them to manually download new versions of your application.\nCheck out the [Updating Applications][updates] guide for details on implementing automatic updates\nwith Electron.\n",
    "tag": "electron"
  },
  {
    "title": "Electron Fuses",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/fuses.md",
    "content": "Electron Fuses\n\nPackage time feature toggles\n\nWhat are fuses?\nFor a subset of Electron functionality it makes sense to disable certain features for an entire application.  For example, 99% of apps don't make use of `ELECTRON_RUN_AS_NODE`, these applications want to be able to ship a binary that is incapable of using that feature.  We also don't want Electron consumers building Electron from source as that is both a massive technical challenge and has a high cost of both time and money.\nFuses are the solution to this problem, at a high level they are \"magic bits\" in the Electron binary that can be flipped when packaging your Electron app to enable / disable certain features / restrictions.  Because they are flipped at package time before you code sign your app the OS becomes responsible for ensuring those bits aren't flipped back via OS level code signing validation (Gatekeeper / App Locker).\nCurrent Fuses\n`runAsNode`\nDefault: Enabled\n@electron/fuses: `FuseV1Options.RunAsNode`\nThe runAsNode fuse toggles whether the `ELECTRON_RUN_AS_NODE` environment variable is respected or not.  Please note that if this fuse is disabled then `process.fork` in the main process will not function as expected as it depends on this environment variable to function.\n`cookieEncryption`\nDefault: Disabled\n@electron/fuses: `FuseV1Options.EnableCookieEncryption`\nThe cookieEncryption fuse toggles whether the cookie store on disk is encrypted using OS level cryptography keys.  By default the sqlite database that Chromium uses to store cookies stores the values in plaintext.  If you wish to ensure your apps cookies are encrypted in the same way Chrome does then you should enable this fuse.  Please note it is a one-way transition, if you enable this fuse existing unencrypted cookies will be encrypted-on-write but if you then disable the fuse again your cookie store will effectively be corrupt and useless.  Most apps can safely enable this fuse.\n`nodeOptions`\nDefault: Enabled\n@electron/fuses: `FuseV1Options.EnableNodeOptionsEnvironmentVariable`\nThe nodeOptions fuse toggles whether the NODE_OPTIONS environment variable is respected or not.  This environment variable can be used to pass all kinds of custom options to the Node.js runtime and isn't typically used by apps in production.  Most apps can safely disable this fuse.\n`nodeCliInspect`\nDefault: Enabled\n@electron/fuses: `FuseV1Options.EnableNodeCliInspectArguments`\nThe nodeCliInspect fuse toggles whether the `--inspect`, `--inspect-brk`, etc. flags are respected or not.  When disabled it also ensures that `SIGUSR1` signal does not initialize the main process inspector.  Most apps can safely disable this fuse.\n`embeddedAsarIntegrityValidation`\nDefault: Disabled\n@electron/fuses: `FuseV1Options.EnableEmbeddedAsarIntegrityValidation`\nThe embeddedAsarIntegrityValidation fuse toggles an experimental feature on macOS that validates the content of the `app.asar` file when it is loaded.  This feature is designed to have a minimal performance impact but may marginally slow down file reads from inside the `app.asar` archive.\nFor more information on how to use asar integrity validation please read the Asar Integrity documentation.\n`onlyLoadAppFromAsar`\nDefault: Disabled\n@electron/fuses: `FuseV1Options.OnlyLoadAppFromAsar`\nThe onlyLoadAppFromAsar fuse changes the search system that Electron uses to locate your app code.  By default Electron will search in the following order `app.asar` -> `app` -> `default_app.asar`.  When this fuse is enabled the search order becomes a single entry `app.asar` thus ensuring that when combined with the `embeddedAsarIntegrityValidation` fuse it is impossible to load non-validated code.\n`loadBrowserProcessSpecificV8Snapshot`\nDefault: Disabled\n@electron/fuses: `FuseV1Options.LoadBrowserProcessSpecificV8Snapshot`\nThe loadBrowserProcessSpecificV8Snapshot fuse changes which V8 snapshot file is used for the browser process.  By default Electron's processes will all use the same V8 snapshot file.  When this fuse is enabled the browser process uses the file called `browser_v8_context_snapshot.bin` for its V8 snapshot. The other processes will use the V8 snapshot file that they normally do.\nHow do I flip the fuses?\nThe easy way\nWe've made a handy module, @electron/fuses, to make flipping these fuses easy.  Check out the README of that module for more details on usage and potential error cases.\n`js\nrequire('@electron/fuses').flipFuses(\n  // Path to electron\n  require('electron'),\n  // Fuses to flip\n  {\n    version: FuseVersion.V1,\n    [FuseV1Options.RunAsNode]: false\n  }\n)`\nYou can validate the fuses have been flipped or check the fuse status of an arbitrary Electron app using the fuses CLI.\n`bash\n npx @electron/fuses read --app /Applications/Foo.app`\nThe hard way\nQuick Glossary\n\nFuse Wire: A sequence of bytes in the Electron binary used to control the fuses\nSentinel: A static known sequence of bytes you can use to locate the fuse wire\nFuse Schema: The format / allowed values for the fuse wire\n\nManually flipping fuses requires editing the Electron binary and modifying the fuse wire to be the sequence of bytes that represent the state of the fuses you want.\nSomewhere in the Electron binary there will be a sequence of bytes that look like this:\n`text\n| ...binary | sentinel_bytes | fuse_version | fuse_wire_length | fuse_wire | ...binary |`\n\n`sentinel_bytes` is always this exact string `dL7pKGdnNz796PbbjQWNKmHXBZaB9tsX`\n`fuse_version` is a single byte whose unsigned integer value represents the version of the fuse schema\n`fuse_wire_length` is a single byte whose unsigned integer value represents the number of fuses in the following fuse wire\n`fuse_wire` is a sequence of N bytes, each byte represents a single fuse and its state.\n\"0\" (0x30) indicates the fuse is disabled\n\"1\" (0x31) indicates the fuse is enabled\n\"r\" (0x72) indicates the fuse has been removed and changing the byte to either 1 or 0 will have no effect.\n\nTo flip a fuse you find its position in the fuse wire and change it to \"0\" or \"1\" depending on the state you'd like.",
    "tag": "electron"
  },
  {
    "title": "Mac App Store Submission Guide",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/mac-app-store-submission-guide.md",
    "content": "Mac App Store Submission Guide\nThis guide provides information on:\n\nHow to sign Electron apps on macOS;\nHow to submit Electron apps to Mac App Store (MAS);\nThe limitations of the MAS build.\n\nRequirements\nTo sign Electron apps, the following tools must be installed first:\n\nXcode 11 or above.\nThe @electron/osx-sign npm module.\n\nYou also have to register an Apple Developer account and join the\nApple Developer Program.\nSign Electron apps\nElectron apps can be distributed through Mac App Store or outside it. Each way\nrequires different ways of signing and testing. This guide focuses on\ndistribution via Mac App Store, but will also mention other methods.\nThe following steps describe how to get the certificates from Apple, how to sign\nElectron apps, and how to test them.\nGet certificates\nThe simplest way to get signing certificates is to use Xcode:\n\nOpen Xcode and open \"Accounts\" preferences;\nSign in with your Apple account;\nSelect a team and click \"Manage Certificates\";\nIn the lower-left corner of the signing certificates sheet, click the Add\n   button (+), and add following certificates:\n\"Apple Development\"\n\"Apple Distribution\"\n\nThe \"Apple Development\" certificate is used to sign apps for development and\ntesting, on machines that have been registered on Apple Developer website. The\nmethod of registration will be described in\nPrepare provisioning profile.\nApps signed with the \"Apple Development\" certificate cannot be submitted to Mac\nApp Store. For that purpose, apps must be signed with the \"Apple Distribution\"\ncertificate instead. But note that apps signed with the \"Apple Distribution\"\ncertificate cannot run directly, they must be re-signed by Apple to be able to\nrun, which will only be possible after being downloaded from the Mac App Store.\nOther certificates\nYou may notice that there are also other kinds of certificates.\nThe \"Developer ID Application\" certificate is used to sign apps before\ndistributing them outside the Mac App Store.\nThe \"Developer ID Installer\" and \"Mac Installer Distribution\" certificates are\nused to sign the Mac Installer Package instead of the app itself. Most Electron\napps do not use Mac Installer Package so they are generally not needed.\nThe full list of certificate types can be found\nhere.\nApps signed with \"Apple Development\" and \"Apple Distribution\" certificates can\nonly run under App Sandbox, so they must use the MAS build of\nElectron. However, the \"Developer ID Application\" certificate does not have this\nrestrictions, so apps signed with it can use either the normal build or the MAS\nbuild of Electron.\nLegacy certificate names\nApple has been changing the names of certificates during past years, you might\nencounter them when reading old documentations, and some utilities are still\nusing one of the old names.\n\nThe \"Apple Distribution\" certificate was also named as \"3rd Party Mac\n  Developer Application\" and \"Mac App Distribution\".\nThe \"Apple Development\" certificate was also named as \"Mac Developer\" and\n  \"Development\".\n\nPrepare provisioning profile\nIf you want to test your app on your local machine before submitting your app to\nthe Mac App Store, you have to sign the app with the \"Apple Development\"\ncertificate with the provisioning profile embedded in the app bundle.\nTo create a provisioning profile,\nyou can follow the below steps:\n\nOpen the \"Certificates, Identifiers & Profiles\" page on the\n   Apple Developer website.\nAdd a new App ID for your app in the \"Identifiers\" page.\nRegister your local machine in the \"Devices\" page. You can find your\n   machine's \"Device ID\" in the \"Hardware\" page of the \"System Information\" app.\nRegister a new Provisioning Profile in the \"Profiles\" page, and download it\n   to `/path/to/yourapp.provisionprofile`.\n\nEnable Apple's App Sandbox\nApps submitted to the Mac App Store must run under Apple's\nApp Sandbox, and only the MAS build of Electron can run with\nthe App Sandbox. The standard darwin build of Electron will fail to launch\nwhen run under App Sandbox.\nWhen signing the app with `@electron/osx-sign`, it will automatically add the\nnecessary entitlements to your app's entitlements, but if you are using custom\nentitlements, you must ensure App Sandbox capacity is added:\n```xml\n\n\n\n\ncom.apple.security.app-sandbox\n\n\n\n```\nExtra steps without `electron-osx-sign`\nIf you are signing your app without using `@electron/osx-sign`, you must ensure\nthe app bundle's entitlements have at least following keys:\n```xml\n\n\n\n\ncom.apple.security.app-sandbox\n\ncom.apple.security.application-groups\n\nTEAM_ID.your.bundle.id\n\n\n\n```\nThe `TEAM_ID` should be replaced with your Apple Developer account's Team ID,\nand the `your.bundle.id` should be replaced with the App ID of the app.\nAnd the following entitlements must be added to the binaries and helpers in\nthe app's bundle:\n```xml\n\n\n\n\ncom.apple.security.app-sandbox\n\ncom.apple.security.inherit\n\n\n\n```\nAnd the app bundle's `Info.plist` must include `ElectronTeamID` key, which has\nyour Apple Developer account's Team ID as its value:\n`xml\n<plist version=\"1.0\">\n<dict>\n  ...\n  <key>ElectronTeamID</key>\n  <string>TEAM_ID</string>\n</dict>\n</plist>`\nWhen using `@electron/osx-sign` the `ElectronTeamID` key will be added\nautomatically by extracting the Team ID from the certificate's name. You may\nneed to manually add this key if `@electron/osx-sign` could not find the correct\nTeam ID.\nSign apps for development\nTo sign an app that can run on your development machine, you must sign it with\nthe \"Apple Development\" certificate and pass the provisioning profile to\n`@electron/osx-sign`.\n`bash\nelectron-osx-sign YourApp.app --identity='Apple Development' --provisioning-profile=/path/to/yourapp.provisionprofile`\nIf you are signing without `@electron/osx-sign`, you must place the provisioning\nprofile to `YourApp.app/Contents/embedded.provisionprofile`.\nThe signed app can only run on the machines that registered by the provisioning\nprofile, and this is the only way to test the signed app before submitting to\nMac App Store.\nSign apps for submitting to the Mac App Store\nTo sign an app that will be submitted to Mac App Store, you must sign it with\nthe \"Apple Distribution\" certificate. Note that apps signed with this\ncertificate will not run anywhere, unless it is downloaded from Mac App Store.\n`bash\nelectron-osx-sign YourApp.app --identity='Apple Distribution'`\nSign apps for distribution outside the Mac App Store\nIf you don't plan to submit the app to Mac App Store, you can sign it the\n\"Developer ID Application\" certificate. In this way there is no requirement on\nApp Sandbox, and you should use the normal darwin build of Electron if you don't\nuse App Sandbox.\n`bash\nelectron-osx-sign YourApp.app --identity='Developer ID Application' --no-gatekeeper-assess`\nBy passing `--no-gatekeeper-assess`, `@electron/osx-sign` will skip the macOS\nGateKeeper check as your app usually has not been notarized yet by this step.\n\nThis guide does not cover App Notarization, but you might\nwant to do it otherwise Apple may prevent users from using your app outside Mac\nApp Store.\nSubmit Apps to the Mac App Store\nAfter signing the app with the \"Apple Distribution\" certificate, you can\ncontinue to submit it to Mac App Store.\nHowever, this guide do not ensure your app will be approved by Apple; you\nstill need to read Apple's Submitting Your App guide on\nhow to meet the Mac App Store requirements.\nUpload\nApple Transporter should be used to upload the signed app to App Store\nConnect for processing, making sure you have created a record\nbefore uploading.\nIf you are seeing errors like private APIs uses, you should check if the app is\nusing the MAS build of Electron.\nSubmit for review\nAfter uploading, you should submit your app for review.\nLimitations of MAS Build\nIn order to satisfy all requirements for app sandboxing, the following modules\nhave been disabled in the MAS build:\n\n`crashReporter`\n`autoUpdater`\n\nand the following behaviors have been changed:\n\nVideo capture may not work for some machines.\nCertain accessibility features may not work.\nApps will not be aware of DNS changes.\n\nAlso, due to the usage of app sandboxing, the resources which can be accessed by\nthe app are strictly limited; you can read App Sandboxing for\nmore information.\nAdditional entitlements\nDepending on which Electron APIs your app uses, you may need to add additional\nentitlements to your app's entitlements file. Otherwise, the App Sandbox may\nprevent you from using them.\nNetwork access\nEnable outgoing network connections to allow your app to connect to a server:\n`xml\n<key>com.apple.security.network.client</key>\n<true/>`\nEnable incoming network connections to allow your app to open a network\nlistening socket:\n`xml\n<key>com.apple.security.network.server</key>\n<true/>`\nSee the [Enabling Network Access documentation][network-access] for more\ndetails.\ndialog.showOpenDialog\n`xml\n<key>com.apple.security.files.user-selected.read-only</key>\n<true/>`\nSee the Enabling User-Selected File Access documentation for\nmore details.\ndialog.showSaveDialog\n`xml\n<key>com.apple.security.files.user-selected.read-write</key>\n<true/>`\nSee the Enabling User-Selected File Access documentation for\nmore details.\nCryptographic Algorithms Used by Electron\nDepending on the countries in which you are releasing your app, you may be\nrequired to provide information on the cryptographic algorithms used in your\nsoftware. See the encryption export compliance docs for\nmore information.\nElectron uses following cryptographic algorithms:\n\nAES - NIST SP 800-38A, NIST SP 800-38D, RFC 3394\nHMAC - FIPS 198-1\nECDSA - ANS X9.62\u20132005\nECDH - ANS X9.63\u20132001\nHKDF - NIST SP 800-56C\nPBKDF2 - RFC 2898\nRSA - RFC 3447\nSHA - FIPS 180-4\nBlowfish - https://www.schneier.com/cryptography/blowfish/\nCAST - RFC 2144, RFC 2612\nDES - FIPS 46-3\nDH - RFC 2631\nDSA - ANSI X9.30\nEC - SEC 1\nIDEA - \"On the Design and Security of Block Ciphers\" book by X. Lai\nMD2 - RFC 1319\nMD4 - RFC 6150\nMD5 - RFC 1321\nMDC2 - ISO/IEC 10118-2\nRC2 - RFC 2268\nRC4 - RFC 4345\nRC5 - https://people.csail.mit.edu/rivest/Rivest-rc5rev.pdf\nRIPEMD - ISO/IEC 10118-3\n",
    "tag": "electron"
  },
  {
    "title": "Learning goals",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/tutorial-2-first-app.md",
    "content": "\ntitle: 'Building your First App'\ndescription: 'This guide will step you through the process of creating a barebones Hello World app in Electron, similar to electron/electron-quick-start.'\nslug: tutorial-first-app\nhide_title: false\n\n:::info Follow along the tutorial\nThis is part 2 of the Electron tutorial.\n\nPrerequisites\nBuilding your First App\nUsing Preload Scripts\nAdding Features\nPackaging Your Application\n[Publishing and Updating][updates]\n\n:::\nLearning goals\nIn this part of the tutorial, you will learn how to set up your Electron project\nand write a minimal starter application. By the end of this section,\nyou should be able to run a working Electron app in development mode from\nyour terminal.\nSetting up your project\n:::caution Avoid WSL\nIf you are on a Windows machine, please do not use Windows Subsystem for Linux (WSL)\nwhen following this tutorial as you will run into issues when trying to execute the\napplication.\n\n:::\nInitializing your npm project\nElectron apps are scaffolded using npm, with the package.json file\nas an entry point. Start by creating a folder and initializing an npm package\nwithin it with `npm init`.\n`sh npm2yarn\nmkdir my-electron-app && cd my-electron-app\nnpm init`\nThis command will prompt you to configure some fields in your package.json.\nThere are a few rules to follow for the purposes of this tutorial:\n\nentry point should be `main.js` (you will be creating that file soon).\nauthor, license, and description can be any value, but will be necessary for\n  packaging later on.\n\nThen, install Electron into your app's devDependencies, which is the list of external\ndevelopment-only package dependencies not required in production.\n:::info Why is Electron a devDependency?\nThis may seem counter-intuitive since your production code is running Electron APIs.\nHowever, packaged apps will come bundled with the Electron binary, eliminating the need to specify\nit as a production dependency.\n:::\n`sh npm2yarn\nnpm install electron --save-dev`\nYour package.json file should look something like this after initializing your package\nand installing Electron. You should also now have a `node_modules` folder containing\nthe Electron executable, as well as a `package-lock.json` lockfile that specifies\nthe exact dependency versions to install.\n`json title='package.json'\n{\n  \"name\": \"my-electron-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Hello World!\",\n  \"main\": \"main.js\",\n  \"author\": \"Jane Doe\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"electron\": \"19.0.0\"\n  }\n}`\n:::info Advanced Electron installation steps\nIf installing Electron directly fails, please refer to our Advanced Installation\ndocumentation for instructions on download mirrors, proxies, and troubleshooting steps.\n:::\nAdding a .gitignore\nThe .gitignore file specifies which files and directories to avoid tracking\nwith Git. You should place a copy of GitHub's Node.js gitignore template\ninto your project's root folder to avoid committing your project's `node_modules` folder.\nRunning an Electron app\n:::tip Further reading\nRead Electron's process model documentation to better\nunderstand how Electron's multiple processes work together.\n:::\nThe main script you defined in package.json is the entry point of any\nElectron application. This script controls the main process, which runs in a Node.js\nenvironment and is responsible for controlling your app's lifecycle, displaying native\ninterfaces, performing privileged operations, and managing renderer processes\n(more on that later).\nBefore creating your first Electron app, you will first use a trivial script to ensure your\nmain process entry point is configured correctly. Create a `main.js` file in the root folder\nof your project with a single line of code:\n`js title='main.js'\nconsole.log(`Hello from Electron \ud83d\udc4b`)`\nBecause Electron's main process is a Node.js runtime, you can execute arbitrary Node.js code\nwith the `electron` command (you can even use it as a REPL). To execute this script,\nadd `electron .` to the `start` command in the scripts\nfield of your package.json. This command will tell the Electron executable to look for the main\nscript in the current directory and run it in dev mode.\n`json {8-10} title='package.json'\n{\n  \"name\": \"my-electron-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Hello World!\",\n  \"main\": \"main.js\",\n  \"author\": \"Jane Doe\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"start\": \"electron .\"\n  },\n  \"devDependencies\": {\n    \"electron\": \"^19.0.0\"\n  }\n}`\n`sh npm2yarn\nnpm run start`\nYour terminal should print out `Hello from Electron \ud83d\udc4b`. Congratulations,\nyou have executed your first line of code in Electron! Next, you will learn\nhow to create user interfaces with HTML and load that into a native window.\nLoading a web page into a BrowserWindow\nIn Electron, each window displays a web page that can be loaded either from a local HTML\nfile or a remote web address. For this example, you will be loading in a local file. Start\nby creating a barebones web page in an `index.html` file in the root folder of your project:\n```html title='index.html'\n\n\n\n\n\n\n\nHello from Electron renderer!\n\n\n\nHello from Electron renderer!\n\ud83d\udc4b\n\n\n```\nNow that you have a web page, you can load it into an Electron BrowserWindow.\nReplace the contents of your `main.js` file with the following code. We will explain each\nhighlighted block separately.\n```js {1,3-10,12-14} title='main.js' showLineNumbers\nconst { app, BrowserWindow } = require('electron')\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n  })\nwin.loadFile('index.html')\n}\napp.whenReady().then(() => {\n  createWindow()\n})\n```\nImporting modules\n`js title='main.js (Line 1)'\nconst { app, BrowserWindow } = require('electron')`\nIn the first line, we are importing two Electron modules\nwith CommonJS module syntax:\n\napp, which controls your application's event lifecycle.\nBrowserWindow, which creates and manages app windows.\n\n:::info Capitalization conventions\nYou might have noticed the capitalization difference between the app\nand BrowserWindow modules. Electron follows typical JavaScript conventions here,\nwhere PascalCase modules are instantiable class constructors (e.g. BrowserWindow, Tray,\nNotification) whereas camelCase modules are not instantiable (e.g. app, ipcRenderer, webContents).\n:::\n:::warning ES Modules in Electron\nECMAScript modules (i.e. using `import` to load a module)\nare currently not directly supported in Electron. You can find more information about the\nstate of ESM in Electron in electron/electron#21457.\n:::\nWriting a reusable function to instantiate windows\nThe `createWindow()` function loads your web page into a new BrowserWindow instance:\n```js title='main.js (Lines 3-10)'\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n  })\nwin.loadFile('index.html')\n}\n```\nCalling your function when the app is ready\n`js title='main.js (Lines 12-14)'\napp.whenReady().then(() => {\n  createWindow()\n})`\nMany of Electron's core modules are Node.js event emitters that adhere to Node's asynchronous\nevent-driven architecture. The app module is one of these emitters.\nIn Electron, BrowserWindows can only be created after the app module's ready event\nis fired. You can wait for this event by using the app.whenReady() API and\ncalling `createWindow()` once its promise is fulfilled.\n:::info\nYou typically listen to Node.js events by using an emitter's `.on` function.\n`diff\n+ app.on('ready').then(() => {\n- app.whenReady().then(() => {\n  createWindow()\n})`\nHowever, Electron exposes `app.whenReady()` as a helper specifically for the `ready` event to\navoid subtle pitfalls with directly listening to that event in particular.\nSee electron/electron#21972 for details.\n:::\nAt this point, running your Electron application's `start` command should successfully\nopen a window that displays your web page!\nEach web page your app displays in a window will run in a separate process called a\nrenderer process (or simply renderer for short). Renderer processes have access\nto the same JavaScript APIs and tooling you use for typical front-end web\ndevelopment, such as using webpack to bundle and minify your code or React\nto build your user interfaces.\nManaging your app's window lifecycle\nApplication windows behave differently on each operating system. Rather than\nenforce these conventions by default, Electron gives you the choice to implement\nthem in your app code if you wish to follow them. You can implement basic window\nconventions by listening for events emitted by the app and BrowserWindow modules.\n:::tip Process-specific control flow\nChecking against Node's process.platform variable can help you\nto run code conditionally on certain platforms. Note that there are only three\npossible platforms that Electron can run in: `win32` (Windows), `linux` (Linux),\nand `darwin` (macOS).\n:::\nQuit the app when all windows are closed (Windows & Linux)\nOn Windows and Linux, closing all windows will generally quit an application entirely.\nTo implement this pattern in your Electron app, listen for the app module's\nwindow-all-closed event, and call app.quit()\nto exit your app if the user is not on macOS.\n`js\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') app.quit()\n})`\nOpen a window if none are open (macOS)\nIn contrast, macOS apps generally continue running even without any windows open.\nActivating the app when no windows are available should open a new one.\nTo implement this feature, listen for the app module's activate\nevent, and call your existing `createWindow()` method if no BrowserWindows are open.\nBecause windows cannot be created before the `ready` event, you should only listen for\n`activate` events after your app is initialized. Do this by only listening for activate\nevents inside your existing `whenReady()` callback.\n```js\napp.whenReady().then(() => {\n  createWindow()\napp.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n```\nFinal starter code\n```fiddle docs/fiddles/tutorial-first-app\n```\nOptional: Debugging from VS Code\nIf you want to debug your application using VS Code, you need to attach VS Code to\nboth the main and renderer processes. Here is a sample configuration for you to\nrun. Create a launch.json configuration in a new `.vscode` folder in your project:\n`json title='.vscode/launch.json'\n{\n  \"version\": \"0.2.0\",\n  \"compounds\": [\n    {\n      \"name\": \"Main + renderer\",\n      \"configurations\": [\"Main\", \"Renderer\"],\n      \"stopAll\": true\n    }\n  ],\n  \"configurations\": [\n    {\n      \"name\": \"Renderer\",\n      \"port\": 9222,\n      \"request\": \"attach\",\n      \"type\": \"chrome\",\n      \"webRoot\": \"${workspaceFolder}\"\n    },\n    {\n      \"name\": \"Main\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"cwd\": \"${workspaceFolder}\",\n      \"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/electron\",\n      \"windows\": {\n        \"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/electron.cmd\"\n      },\n      \"args\": [\".\", \"--remote-debugging-port=9222\"],\n      \"outputCapture\": \"std\",\n      \"console\": \"integratedTerminal\"\n    }\n  ]\n}`\nThe \"Main + renderer\" option will appear when you select \"Run and Debug\"\nfrom the sidebar, allowing you to set breakpoints and inspect all the variables among\nother things in both the main and renderer processes.\nWhat we have done in the `launch.json` file is to create 3 configurations:\n\n`Main` is used to start the main process and also expose port 9222 for remote debugging\n  (`--remote-debugging-port=9222`). This is the port that we will use to attach the debugger\n  for the `Renderer`. Because the main process is a Node.js process, the type is set to\n  `node`.\n`Renderer` is used to debug the renderer process. Because the main process is the one\n  that creates the process, we have to \"attach\" to it (`\"request\": \"attach\"`) instead of\n  creating a new one.\n  The renderer process is a web one, so the debugger we have to use is `chrome`.\n`Main + renderer` is a compound task that executes the previous ones simultaneously.\n\n:::caution\nBecause we are attaching to a process in `Renderer`, it is possible that the first lines of\nyour code will be skipped as the debugger will not have had enough time to connect before they are\nbeing executed.\nYou can work around this by refreshing the page or setting a timeout before executing the code\nin development mode.\n:::\n:::info Further reading\nIf you want to dig deeper in the debugging area, the following guides provide more information:\n\nApplication Debugging\nDevTools Extensions\n\n:::\nSummary\nElectron applications are set up using npm packages. The Electron executable should be installed\nin your project's `devDependencies` and can be run in development mode using a script in your\npackage.json file.\nThe executable runs the JavaScript entry point found in the `main` property of your package.json.\nThis file controls Electron's main process, which runs an instance of Node.js and is\nresponsible for your app's lifecycle, displaying native interfaces, performing privileged operations,\nand managing renderer processes.\nRenderer processes (or renderers for short) are responsible for displaying graphical content. You can\nload a web page into a renderer by pointing it to either a web address or a local HTML file.\nRenderers behave very similarly to regular web pages and have access to the same web APIs.\nIn the next section of the tutorial, we will be learning how to augment the renderer process with\nprivileged APIs and how to communicate between processes.\n\n",
    "tag": "electron"
  },
  {
    "title": "Snapcraft Guide (Linux)",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/snapcraft.md",
    "content": "Snapcraft Guide (Linux)\nThis guide provides information on how to package your Electron application\nfor any Snapcraft environment, including the Ubuntu Software Center.\nBackground and Requirements\nTogether with the broader Linux community, Canonical aims to fix many of the\ncommon software installation problems with the snapcraft\nproject. Snaps are containerized software packages that include required\ndependencies, auto-update, and work on all major Linux distributions without\nsystem modification.\nThere are three ways to create a `.snap` file:\n1) Using [Electron Forge][electron-forge] or\n   [`electron-builder`][electron-builder], both tools that come with `snap`\n   support out of the box. This is the easiest option.\n2) Using `electron-installer-snap`, which takes `electron-packager`'s output.\n3) Using an already created `.deb` package.\nIn some cases, you will need to have the `snapcraft` tool installed.\nInstructions to install `snapcraft` for your particular distribution are\navailable here.\nUsing `electron-installer-snap`\nThe module works like [`electron-winstaller`][electron-winstaller] and similar\nmodules in that its scope is limited to building snap packages. You can install\nit with:\n`sh\nnpm install --save-dev electron-installer-snap`\nStep 1: Package Your Electron Application\nPackage the application using [electron-packager][electron-packager] (or a\nsimilar tool). Make sure to remove `node_modules` that you don't need in your\nfinal application, since any module you don't actually need will increase\nyour application's size.\nThe output should look roughly like this:\n`plaintext\n.\n\u2514\u2500\u2500 dist\n    \u2514\u2500\u2500 app-linux-x64\n        \u251c\u2500\u2500 LICENSE\n        \u251c\u2500\u2500 LICENSES.chromium.html\n        \u251c\u2500\u2500 content_shell.pak\n        \u251c\u2500\u2500 app\n        \u251c\u2500\u2500 icudtl.dat\n        \u251c\u2500\u2500 libgcrypt.so.11\n        \u251c\u2500\u2500 libnode.so\n        \u251c\u2500\u2500 locales\n        \u251c\u2500\u2500 resources\n        \u251c\u2500\u2500 v8_context_snapshot.bin\n        \u2514\u2500\u2500 version`\nStep 2: Running `electron-installer-snap`\nFrom a terminal that has `snapcraft` in its `PATH`, run `electron-installer-snap`\nwith the only required parameter `--src`, which is the location of your packaged\nElectron application created in the first step.\n`sh\nnpx electron-installer-snap --src=out/myappname-linux-x64`\nIf you have an existing build pipeline, you can use `electron-installer-snap`\nprogrammatically. For more information, see the [Snapcraft API docs][snapcraft-syntax].\n```js\nconst snap = require('electron-installer-snap')\nsnap(options)\n  .then(snapPath => console.log(`Created snap at ${snapPath}!`))\n```\nUsing `snapcraft` with `electron-packager`\nStep 1: Create Sample Snapcraft Project\nCreate your project directory and add the following to `snap/snapcraft.yaml`:\n```yaml\nname: electron-packager-hello-world\nversion: '0.1'\nsummary: Hello World Electron app\ndescription: |\n  Simple Hello World Electron app as an example\nbase: core18\nconfinement: strict\ngrade: stable\napps:\n  electron-packager-hello-world:\n    command: electron-quick-start/electron-quick-start --no-sandbox\n    extensions: [gnome-3-34]\n    plugs:\n    - browser-support\n    - network\n    - network-bind\n    environment:\n      # Correct the TMPDIR path for Chromium Framework/Electron to ensure\n      # libappindicator has readable resources.\n      TMPDIR: $XDG_RUNTIME_DIR\nparts:\n  electron-quick-start:\n    plugin: nil\n    source: https://github.com/electron/electron-quick-start.git\n    override-build: |\n        npm install electron electron-packager\n        npx electron-packager . --overwrite --platform=linux --output=release-build --prune=true\n        cp -rv ./electron-quick-start-linux-* $SNAPCRAFT_PART_INSTALL/electron-quick-start\n    build-snaps:\n    - node/14/stable\n    build-packages:\n    - unzip\n    stage-packages:\n    - libnss3\n    - libnspr4\n```\nIf you want to apply this example to an existing project:\n\nReplace `source: https://github.com/electron/electron-quick-start.git` with `source: .`.\nReplace all instances of `electron-quick-start` with your project's name.\n\nStep 2: Build the snap\n```sh\n$ snapcraft\n\nSnapped electron-packager-hello-world_0.1_amd64.snap\n```\n\n### Step 3: Install the snap\n\n```sh\nsudo snap install electron-packager-hello-world_0.1_amd64.snap --dangerous\n```\n\n### Step 4: Run the snap\n\n```sh\nelectron-packager-hello-world\n```\n\n## Using an Existing Debian Package\n\nSnapcraft is capable of taking an existing `.deb` file and turning it into\na `.snap` file. The creation of a snap is configured using a `snapcraft.yaml`\nfile that describes the sources, dependencies, description, and other core\nbuilding blocks.\n\n### Step 1: Create a Debian Package\n\nIf you do not already have a `.deb` package, using `electron-installer-snap`\nmight be an easier path to create snap packages. However, multiple solutions\nfor creating Debian packages exist, including [Electron Forge][electron-forge],\n[`electron-builder`][electron-builder] or\n[`electron-installer-debian`][electron-installer-debian].\n\n### Step 2: Create a snapcraft.yaml\n\nFor more information on the available configuration options, see the\n[documentation on the snapcraft syntax][snapcraft-syntax].\nLet's look at an example:\n\n```yaml\nname: myApp\nversion: '2.0.0'\nsummary: A little description for the app.\ndescription: |\n You know what? This app is amazing! It does all the things\n for you. Some say it keeps you young, maybe even happy.\n\ngrade: stable\nconfinement: classic\n\nparts:\n  slack:\n    plugin: dump\n    source: my-deb.deb\n    source-type: deb\n    after:\n      - desktop-gtk3\n    stage-packages:\n      - libasound2\n      - libnotify4\n      - libnspr4\n      - libnss3\n      - libpcre3\n      - libpulse0\n      - libxss1\n      - libxtst6\n  electron-launch:\n    plugin: dump\n    source: files/\n    prepare: |\n      chmod +x bin/electron-launch\n\napps:\n  myApp:\n    command: bin/electron-launch $SNAP/usr/lib/myApp/myApp\n    desktop: usr/share/applications/myApp.desktop\n    # Correct the TMPDIR path for Chromium Framework/Electron to ensure\n    # libappindicator has readable resources.\n    environment:\n      TMPDIR: $XDG_RUNTIME_DIR\n```\n\nAs you can see, the `snapcraft.yaml` instructs the system to launch a file\ncalled `electron-launch`. In this example, it passes information on to the\napp's binary:\n\n```sh\n#!/bin/sh\n\nexec \"$@\" --executed-from=\"$(pwd)\" --pid=$$ > /dev/null 2>&1 &\n```\n\nAlternatively, if you're building your `snap` with `strict` confinement, you\ncan use the `desktop-launch` command:\n\n```yaml\napps:\n  myApp:\n    # Correct the TMPDIR path for Chromium Framework/Electron to ensure\n    # libappindicator has readable resources.\n    command: env TMPDIR=$XDG_RUNTIME_DIR PATH=/usr/local/bin:${PATH} ${SNAP}/bin/desktop-launch $SNAP/myApp/desktop\n    desktop: usr/share/applications/desktop.desktop\n```\n\n[snapcraft-syntax]: https://docs.snapcraft.io/build-snaps/syntax\n[electron-packager]: https://github.com/electron/electron-packager\n[electron-forge]: https://github.com/electron/forge\n[electron-builder]: https://github.com/electron-userland/electron-builder\n[electron-installer-debian]: https://github.com/unindented/electron-installer-debian",
    "tag": "electron"
  },
  {
    "title": "Tray",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/tray.md",
    "content": "\ntitle: Tray\ndescription: This guide will take you through the process of creating\n  a Tray icon with its own context menu to the system's notification area.\nslug: tray\nhide_title: true\n\nTray\nOverview\n\nThis guide will take you through the process of creating a\nTray icon with\nits own context menu to the system's notification area.\nOn MacOS and Ubuntu, the Tray will be located on the top\nright corner of your screen, adjacent to your battery and wifi icons.\nOn Windows, the Tray will usually be located in the bottom right corner.\nExample\nmain.js\nFirst we must import `app`, `Tray`, `Menu`, `nativeImage` from `electron`.\n`js\nconst { app, Tray, Menu, nativeImage } = require('electron')`\nNext we will create our Tray. To do this, we will use a\nNativeImage icon,\nwhich can be created through any one of these\nmethods.\nNote that we wrap our Tray creation code within an\napp.whenReady\nas we will need to wait for our electron app to finish initializing.\n```js title='main.js'\nlet tray\napp.whenReady().then(() => {\n  const icon = nativeImage.createFromPath('path/to/asset.png')\n  tray = new Tray(icon)\n// note: your contextMenu, Tooltip and Title code will go here!\n})\n```\nGreat! Now we can start attaching a context menu to our Tray, like so:\n```js\nconst contextMenu = Menu.buildFromTemplate([\n  { label: 'Item1', type: 'radio' },\n  { label: 'Item2', type: 'radio' },\n  { label: 'Item3', type: 'radio', checked: true },\n  { label: 'Item4', type: 'radio' }\n])\ntray.setContextMenu(contextMenu)\n```\nThe code above will create 4 separate radio-type items in the context menu.\nTo read more about constructing native menus, click\nhere.\nFinally, let's give our tray a tooltip and a title.\n`js\ntray.setToolTip('This is my application')\ntray.setTitle('This is my title')`\nConclusion\nAfter you start your electron app, you should see the Tray residing\nin either the top or bottom right of your screen, depending on your\noperating system.\n```fiddle docs/fiddles/native-ui/tray",
    "tag": "electron"
  },
  {
    "title": "Taskbar Customization",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/windows-taskbar.md",
    "content": "\ntitle: Taskbar Customization\ndescription: Customize the look and feel of your app's Windows taskbar presence.\nslug: windows-taskbar\nhide_title: true\n\nTaskbar Customization\nOverview\nElectron has APIs to configure the app's icon in the Windows taskbar. This API\nsupports both Windows-only features like creation of a JumpList,\ncustom thumbnails and toolbars,\nicon overlays, and the so-called\n\"Flash Frame\" effect, and cross-platform features\nlike recent documents and\n[application progress][progress-bar].\nJumpList\nWindows allows apps to define a custom context menu that shows up when users\nright-click the app's icon in the taskbar. That context menu is called\n`JumpList`. You specify custom actions in the `Tasks` category of JumpList,\nas quoted from MSDN:\n\nApplications define tasks based on both the program's features and the key\nthings a user is expected to do with them. Tasks should be context-free, in\nthat the application does not need to be running for them to work. They\nshould also be the statistically most common actions that a normal user would\nperform in an application, such as compose an email message or open the\ncalendar in a mail program, create a new document in a word processor, launch\nan application in a certain mode, or launch one of its subcommands. An\napplication should not clutter the menu with advanced features that standard\nusers won't need or one-time actions such as registration. Do not use tasks\nfor promotional items such as upgrades or special offers.\nIt is strongly recommended that the task list be static. It should remain the\nsame regardless of the state or status of the application. While it is\npossible to vary the list dynamically, you should consider that this could\nconfuse the user who does not expect that portion of the destination list to\nchange.\n\n\n\nNOTE: The screenshot above is an example of general tasks for Microsoft Edge\n\nUnlike the dock menu in macOS which is a real menu, user tasks in Windows work\nlike application shortcuts. For example, when a user clicks a task, the program\nwill be executed with specified arguments.\nTo set user tasks for your application, you can use\napp.setUserTasks API.\nExamples\nSet user tasks\nStarting with a working application from the\nQuick Start Guide, update the `main.js` file with the\nfollowing lines:\n```javascript\nconst { app } = require('electron')\napp.setUserTasks([\n  {\n    program: process.execPath,\n    arguments: '--new-window',\n    iconPath: process.execPath,\n    iconIndex: 0,\n    title: 'New Window',\n    description: 'Create a new window'\n  }\n])\n```\nClear tasks list\nTo clear your tasks list, you need to call `app.setUserTasks` with an empty\narray in the `main.js` file.\n```javascript\nconst { app } = require('electron')\napp.setUserTasks([])\n```\n\nNOTE: The user tasks will still be displayed even after closing your\napplication, so the icon and program path specified for a task should exist until your application is uninstalled.\n\nThumbnail Toolbars\nOn Windows, you can add a thumbnail toolbar with specified buttons to a taskbar\nlayout of an application window. It provides users with a way to access a\nparticular window's command without restoring or activating the window.\nAs quoted from MSDN:\n\nThis toolbar is the familiar standard toolbar common control. It has a\nmaximum of seven buttons. Each button's ID, image, tooltip, and state are defined\nin a structure, which is then passed to the taskbar. The application can show,\nenable, disable, or hide buttons from the thumbnail toolbar as required by its\ncurrent state.\nFor example, Windows Media Player might offer standard media transport controls\nsuch as play, pause, mute, and stop.\n\n\n\nNOTE: The screenshot above is an example of thumbnail toolbar of Windows\nMedia Player\n\nTo set thumbnail toolbar in your application, you need to use\nBrowserWindow.setThumbarButtons\nExamples\nSet thumbnail toolbar\nStarting with a working application from the\nQuick Start Guide, update the `main.js` file with the\nfollowing lines:\n```javascript\nconst { BrowserWindow } = require('electron')\nconst path = require('path')\nconst win = new BrowserWindow()\nwin.setThumbarButtons([\n  {\n    tooltip: 'button1',\n    icon: path.join(__dirname, 'button1.png'),\n    click () { console.log('button1 clicked') }\n  }, {\n    tooltip: 'button2',\n    icon: path.join(__dirname, 'button2.png'),\n    flags: ['enabled', 'dismissonclick'],\n    click () { console.log('button2 clicked.') }\n  }\n])\n```\nClear thumbnail toolbar\nTo clear thumbnail toolbar buttons, you need to call\n`BrowserWindow.setThumbarButtons` with an empty array in the `main.js` file.\n```javascript\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\nwin.setThumbarButtons([])\n```\nIcon Overlays in Taskbar\nOn Windows, a taskbar button can use a small overlay to display application\nstatus.\nAs quoted from MSDN:\n\nIcon overlays serve as a contextual notification of status, and are intended\nto negate the need for a separate notification area status icon to communicate\nthat information to the user. For instance, the new mail status in Microsoft\nOutlook, currently shown in the notification area, can now be indicated\nthrough an overlay on the taskbar button. Again, you must decide during your\ndevelopment cycle which method is best for your application. Overlay icons are\nintended to supply important, long-standing status or notifications such as\nnetwork status, messenger status, or new mail. The user should not be\npresented with constantly changing overlays or animations.\n\n\n\nNOTE: The screenshot above is an example of overlay on a taskbar button\n\nTo set the overlay icon for a window, you need to use the\nBrowserWindow.setOverlayIcon API.\nExample\nStarting with a working application from the\nQuick Start Guide, update the `main.js` file with the\nfollowing lines:\n```javascript\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\nwin.setOverlayIcon('path/to/overlay.png', 'Description for overlay')\n```\nFlash Frame\nOn Windows, you can highlight the taskbar button to get the user's attention.\nThis is similar to bouncing the dock icon in macOS.\nAs quoted from MSDN:\n\nTypically, a window is flashed to inform the user that the window requires\nattention but that it does not currently have the keyboard focus.\n\nTo flash the BrowserWindow taskbar button, you need to use the\nBrowserWindow.flashFrame API.\nExample\nStarting with a working application from the\nQuick Start Guide, update the `main.js` file with the\nfollowing lines:\n```javascript\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\nwin.once('focus', () => win.flashFrame(false))\nwin.flashFrame(true)\n```\n\nNOTE: Don't forget to call `win.flashFrame(false)` to turn off the flash.\nIn the above example, it is called when the window comes into focus,\nbut you might use a timeout or some other event to disable it.\n",
    "tag": "electron"
  },
  {
    "title": "Window Customization",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/window-customization.md",
    "content": "Window Customization\nThe `BrowserWindow` module is the foundation of your Electron application, and it exposes\nmany APIs that can change the look and behavior of your browser windows. In this\ntutorial, we will be going over the various use-cases for window customization on\nmacOS, Windows, and Linux.\nCreate frameless windows\nA frameless window is a window that has no chrome. Not to be confused with the Google\nChrome browser, window chrome refers to the parts of the window (e.g. toolbars, controls)\nthat are not a part of the web page.\nTo create a frameless window, you need to set `frame` to `false` in the `BrowserWindow`\nconstructor.\n`javascript title='main.js'\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({ frame: false })`\nApply custom title bar styles macOS Windows\nTitle bar styles allow you to hide most of a BrowserWindow's chrome while keeping the\nsystem's native window controls intact and can be configured with the `titleBarStyle`\noption in the `BrowserWindow` constructor.\nApplying the `hidden` title bar style results in a hidden title bar and a full-size\ncontent window.\n`javascript title='main.js'\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({ titleBarStyle: 'hidden' })`\nControl the traffic lights macOS\nOn macOS, applying the `hidden` title bar style will still expose the standard window\ncontrols (\u201ctraffic lights\u201d) in the top left.\nCustomize the look of your traffic lights macOS\nThe `customButtonsOnHover` title bar style will hide the traffic lights until you hover\nover them. This is useful if you want to create custom traffic lights in your HTML but still\nuse the native UI to control the window.\n`javascript\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({ titleBarStyle: 'customButtonsOnHover' })`\nCustomize the traffic light position macOS\nTo modify the position of the traffic light window controls, there are two configuration\noptions available.\nApplying `hiddenInset` title bar style will shift the vertical inset of the traffic lights\nby a fixed amount.\n`javascript title='main.js'\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({ titleBarStyle: 'hiddenInset' })`\nIf you need more granular control over the positioning of the traffic lights, you can pass\na set of coordinates to the `trafficLightPosition` option in the `BrowserWindow`\nconstructor.\n`javascript title='main.js'\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({\n  titleBarStyle: 'hidden',\n  trafficLightPosition: { x: 10, y: 10 }\n})`\nShow and hide the traffic lights programmatically macOS\nYou can also show and hide the traffic lights programmatically from the main process.\nThe `win.setWindowButtonVisibility` forces traffic lights to be show or hidden depending\non the value of its boolean parameter.\n`javascript title='main.js'\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\n// hides the traffic lights\nwin.setWindowButtonVisibility(false)`\n\nNote: Given the number of APIs available, there are many ways of achieving this. For instance,\ncombining `frame: false` with `win.setWindowButtonVisibility(true)` will yield the same\nlayout outcome as setting `titleBarStyle: 'hidden'`.\n\nWindow Controls Overlay macOS Windows\nThe [Window Controls Overlay API][] is a web standard that gives web apps the ability to\ncustomize their title bar region when installed on desktop. Electron exposes this API\nthrough the `BrowserWindow` constructor option `titleBarOverlay`.\nThis option only works whenever a custom `titlebarStyle` is applied on macOS or Windows.\nWhen `titleBarOverlay` is enabled, the window controls become exposed in their default\nposition, and DOM elements cannot use the area underneath this region.\nThe `titleBarOverlay` option accepts two different value formats.\nSpecifying `true` on either platform will result in an overlay region with default\nsystem colors:\n`javascript title='main.js'\n// on macOS or Windows\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({\n  titleBarStyle: 'hidden',\n  titleBarOverlay: true\n})`\nOn either platform `titleBarOverlay` can also be an object. On both macOS and Windows, the height of the overlay can be specified with the `height` property. On Windows, the color of the overlay and its symbols can be specified using the `color` and `symbolColor` properties respectively.\nIf a color option is not specified, the color will default to its system color for the window control buttons. Similarly, if the height option is not specified it will default to the default height:\n`javascript title='main.js'\n// on Windows\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({\n  titleBarStyle: 'hidden',\n  titleBarOverlay: {\n    color: '#2f3241',\n    symbolColor: '#74b1be',\n    height: 60\n  }\n})`\n\nNote: Once your title bar overlay is enabled from the main process, you can access the overlay's\ncolor and dimension values from a renderer using a set of readonly\nJavaScript APIs and CSS Environment Variables.\n\nLimitations\n\nTransparent colors are currently not supported. Progress updates for this feature can be found in PR #33567.\n\nCreate transparent windows\nBy setting the `transparent` option to `true`, you can make a fully transparent window.\n`javascript title='main.js'\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({ transparent: true })`\nLimitations\n\nYou cannot click through the transparent area. See\n  #1335 for details.\nTransparent windows are not resizable. Setting `resizable` to `true` may make\n  a transparent window stop working on some platforms.\nThe CSS [`blur()`][] filter only applies to the window's web contents, so there is no way to apply\n  blur effect to the content below the window (i.e. other applications open on\n  the user's system).\nThe window will not be transparent when DevTools is opened.\nOn Windows:\nTransparent windows will not work when DWM is disabled.\nTransparent windows can not be maximized using the Windows system menu or by double\n  clicking the title bar. The reasoning behind this can be seen on\n  PR #28207.\nOn macOS:\nThe native window shadow will not be shown on a transparent window.\n\nCreate click-through windows\nTo create a click-through window, i.e. making the window ignore all mouse\nevents, you can call the win.setIgnoreMouseEvents(ignore)\nAPI:\n`javascript title='main.js'\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\nwin.setIgnoreMouseEvents(true)`\nForward mouse events macOS Windows\nIgnoring mouse messages makes the web contents oblivious to mouse movement,\nmeaning that mouse movement events will not be emitted. On Windows and macOS, an\noptional parameter can be used to forward mouse move messages to the web page,\nallowing events such as `mouseleave` to be emitted:\n```javascript title='main.js'\nconst { BrowserWindow, ipcMain } = require('electron')\nconst path = require('path')\nconst win = new BrowserWindow({\n  webPreferences: {\n    preload: path.join(__dirname, 'preload.js')\n  }\n})\nipcMain.on('set-ignore-mouse-events', (event, ...args) => {\n  const win = BrowserWindow.fromWebContents(event.sender)\n  win.setIgnoreMouseEvents(...args)\n})\n```\n`javascript title='preload.js'\nwindow.addEventListener('DOMContentLoaded', () => {\n  const el = document.getElementById('clickThroughElement')\n  el.addEventListener('mouseenter', () => {\n    ipcRenderer.send('set-ignore-mouse-events', true, { forward: true })\n  })\n  el.addEventListener('mouseleave', () => {\n    ipcRenderer.send('set-ignore-mouse-events', false)\n  })\n})`\nThis makes the web page click-through when over the `#clickThroughElement` element,\nand returns to normal outside it.\nSet custom draggable region\nBy default, the frameless window is non-draggable. Apps need to specify\n`-webkit-app-region: drag` in CSS to tell Electron which regions are draggable\n(like the OS's standard titlebar), and apps can also use\n`-webkit-app-region: no-drag` to exclude the non-draggable area from the\n draggable region. Note that only rectangular shapes are currently supported.\nTo make the whole window draggable, you can add `-webkit-app-region: drag` as\n`body`'s style:\n`css title='styles.css'\nbody {\n  -webkit-app-region: drag;\n}`\nAnd note that if you have made the whole window draggable, you must also mark\nbuttons as non-draggable, otherwise it would be impossible for users to click on\nthem:\n`css title='styles.css'\nbutton {\n  -webkit-app-region: no-drag;\n}`\nIf you're only setting a custom titlebar as draggable, you also need to make all\nbuttons in titlebar non-draggable.\nTip: disable text selection\nWhen creating a draggable region, the dragging behavior may conflict with text selection.\nFor example, when you drag the titlebar, you may accidentally select its text contents.\nTo prevent this, you need to disable text selection within a draggable area like this:\n`css\n.titlebar {\n  -webkit-user-select: none;\n  -webkit-app-region: drag;\n}`\nTip: disable context menus\nOn some platforms, the draggable area will be treated as a non-client frame, so\nwhen you right click on it, a system menu will pop up. To make the context menu\nbehave correctly on all platforms, you should never use a custom context menu on\ndraggable areas.",
    "tag": "electron"
  },
  {
    "title": "Native Node Modules",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/using-native-node-modules.md",
    "content": "Native Node Modules\nNative Node.js modules are supported by Electron, but since Electron has a different\napplication binary interface (ABI) from a given Node.js binary (due to\ndifferences such as using Chromium's BoringSSL instead of OpenSSL), the native\nmodules you use will need to be recompiled for Electron. Otherwise,\nyou will get the following class of error when you try to run your app:\n`sh\nError: The module '/path/to/native/module.node'\nwas compiled against a different Node.js version using\nNODE_MODULE_VERSION $XYZ. This version of Node.js requires\nNODE_MODULE_VERSION $ABC. Please try re-compiling or re-installing\nthe module (for instance, using `npm rebuild` or `npm install`).`\nHow to install native modules\nThere are several different ways to install native modules:\nInstalling modules and rebuilding for Electron\nYou can install modules like other Node projects, and then rebuild the modules\nfor Electron with the electron-rebuild package. This\nmodule can automatically determine the version of Electron and handle the\nmanual steps of downloading headers and rebuilding native modules for your app.\nIf you are using Electron Forge, this tool is used automatically\nin both development mode and when making distributables.\nFor example, to install the standalone `electron-rebuild` tool and then rebuild\nmodules with it via the command line:\n```sh\nnpm install --save-dev electron-rebuild\nEvery time you run \"npm install\", run this:\n./node_modules/.bin/electron-rebuild\nIf you have trouble on Windows, try:\n.\\node_modules.bin\\electron-rebuild.cmd\n```\nFor more information on usage and integration with other tools such as Electron\nPackager, consult the project's README.\nUsing `npm`\nBy setting a few environment variables, you can use `npm` to install modules\ndirectly.\nFor example, to install all dependencies for Electron:\n```sh\nElectron's version.\nexport npm_config_target=1.2.3\nThe architecture of Electron, see https://electronjs.org/docs/tutorial/support#supported-platforms\nfor supported architectures.\nexport npm_config_arch=x64\nexport npm_config_target_arch=x64\nDownload headers for Electron.\nexport npm_config_disturl=https://electronjs.org/headers\nTell node-pre-gyp that we are building for Electron.\nexport npm_config_runtime=electron\nTell node-pre-gyp to build module from source code.\nexport npm_config_build_from_source=true\nInstall all dependencies, and store cache to ~/.electron-gyp.\nHOME=~/.electron-gyp npm install\n```\nManually building for Electron\nIf you are a developer developing a native module and want to test it against\nElectron, you might want to rebuild the module for Electron manually. You can\nuse `node-gyp` directly to build for Electron:\n`sh\ncd /path-to-module/\nHOME=~/.electron-gyp node-gyp rebuild --target=1.2.3 --arch=x64 --dist-url=https://electronjs.org/headers`\n\n`HOME=~/.electron-gyp` changes where to find development headers.\n`--target=1.2.3` is the version of Electron.\n`--dist-url=...` specifies where to download the headers.\n`--arch=x64` says the module is built for a 64-bit system.\n\nManually building for a custom build of Electron\nTo compile native Node modules against a custom build of Electron that doesn't\nmatch a public release, instruct `npm` to use the version of Node you have bundled\nwith your custom build.\n`sh\nnpm rebuild --nodedir=/path/to/src/out/Default/gen/node_headers`\nTroubleshooting\nIf you installed a native module and found it was not working, you need to check\nthe following things:\n\nWhen in doubt, run `electron-rebuild` first.\nMake sure the native module is compatible with the target platform and\n  architecture for your Electron app.\nMake sure `win_delay_load_hook` is not set to `false` in the module's `binding.gyp`.\nAfter you upgrade Electron, you usually need to rebuild the modules.\n\nA note about `win_delay_load_hook`\nOn Windows, by default, `node-gyp` links native modules against `node.dll`.\nHowever, in Electron 4.x and higher, the symbols needed by native modules are\nexported by `electron.exe`, and there is no `node.dll`. In order to load native\nmodules on Windows, `node-gyp` installs a delay-load\nhook that triggers\nwhen the native module is loaded, and redirects the `node.dll` reference to use\nthe loading executable instead of looking for `node.dll` in the library search\npath (which would turn up nothing). As such, on Electron 4.x and higher,\n`'win_delay_load_hook': 'true'` is required to load native modules.\nIf you get an error like `Module did not self-register`, or `The specified\nprocedure could not be found`, it may mean that the module you're trying to use\ndid not correctly include the delay-load hook.  If the module is built with\nnode-gyp, ensure that the `win_delay_load_hook` variable is set to `true` in\nthe `binding.gyp` file, and isn't getting overridden anywhere.  If the module\nis built with another system, you'll need to ensure that you build with a\ndelay-load hook installed in the main `.node` file. Your `link.exe` invocation\nshould look like this:\n`plaintext\n link.exe /OUT:\"foo.node\" \"...\\node.lib\" delayimp.lib /DELAYLOAD:node.exe /DLL\n     \"my_addon.obj\" \"win_delay_load_hook.obj\"`\nIn particular, it's important that:\n\nyou link against `node.lib` from Electron and not Node. If you link against\n  the wrong `node.lib` you will get load-time errors when you require the\n  module in Electron.\nyou include the flag `/DELAYLOAD:node.exe`. If the `node.exe` link is not\n  delayed, then the delay-load hook won't get a chance to fire and the node\n  symbols won't be correctly resolved.\n`win_delay_load_hook.obj` is linked directly into the final DLL. If the hook\n  is set up in a dependent DLL, it won't fire at the right time.\n\nSee node-gyp\nfor an example delay-load hook if you're implementing your own.\nModules that rely on `prebuild`\nprebuild provides a way to publish\nnative Node modules with prebuilt binaries for multiple versions of Node\nand Electron.\nIf the `prebuild`-powered module provide binaries for the usage in Electron,\nmake sure to omit `--build-from-source` and the `npm_config_build_from_source`\nenvironment variable in order to take full advantage of the prebuilt binaries.\nModules that rely on `node-pre-gyp`\nThe [`node-pre-gyp` tool][node-pre-gyp] provides a way to deploy native Node\nmodules with prebuilt binaries, and many popular modules are using it.\nSometimes those modules work fine under Electron, but when there are no\nElectron-specific binaries available, you'll need to build from source.\nBecause of this, it is recommended to use `electron-rebuild` for these modules.\nIf you are following the `npm` way of installing modules, you'll need to pass\n`--build-from-source` to `npm`, or set the `npm_config_build_from_source`\nenvironment variable.",
    "tag": "electron"
  },
  {
    "title": "Representing Files in a BrowserWindow",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/represented-file.md",
    "content": "\ntitle: Representing Files in a BrowserWindow\ndescription: Set a represented file in the macOS title bar.\nslug: represented-file\nhide_title: true\n\nRepresenting Files in a BrowserWindow\nOverview\nOn macOS, you can set a represented file for any window in your application.\nThe represented file's icon will be shown in the title bar, and when users\n`Command-Click` or `Control-Click`, a popup with a path to the file will be\nshown.\n\n\nNOTE: The screenshot above is an example where this feature is used to indicate the currently opened file in the Atom text editor.\n\nYou can also set the edited state for a window so that the file icon can\nindicate whether the document in this window has been modified.\nTo set the represented file of window, you can use the\nBrowserWindow.setRepresentedFilename and\n[BrowserWindow.setDocumentEdited][setdocumentedited] APIs.\nExample\n```javascript fiddle='docs/fiddles/features/represented-file'\nconst { app, BrowserWindow } = require('electron')\nconst os = require('os');\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n}\napp.whenReady().then(() => {\n  const win = new BrowserWindow()\nwin.setRepresentedFilename(os.homedir())\n  win.setDocumentEdited(true)\n})\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow()\n  }\n})\n```\nAfter launching the Electron application, click on the title with `Command` or\n`Control` key pressed. You should see a popup with the represented file at the top.\nIn this guide, this is the current user's home directory:\n",
    "tag": "electron"
  },
  {
    "title": "Windows on ARM",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/windows-arm.md",
    "content": "Windows on ARM\nIf your app runs with Electron 6.0.8 or later, you can now build it for Windows 10 on Arm. This considerably improves performance, but requires recompilation of any native modules used in your app. It may also require small fixups to your build and packaging scripts.\nRunning a basic app\nIf your app doesn't use any native modules, then it's really easy to create an Arm version of your app.\n\nMake sure that your app's `node_modules` directory is empty.\nUsing a Command Prompt, run `set npm_config_arch=arm64` before running `npm install`/`yarn install` as usual.\nIf you have Electron installed as a development dependency, npm will download and unpack the arm64 version. You can then package and distribute your app as normal.\n\nGeneral considerations\nArchitecture-specific code\nLots of Windows-specific code contains if... else logic that selects between either the x64 or x86 architectures.\n`js\nif (process.arch === 'x64') {\n  // Do 64-bit thing...\n} else {\n  // Do 32-bit thing...\n}`\nIf you want to target arm64, logic like this will typically select the wrong architecture, so carefully check your application and build scripts for conditions like this. In custom build and packaging scripts, you should always check the value of `npm_config_arch` in the environment, rather than relying on the current process arch.\nNative modules\nIf you use native modules, you must make sure that they compile against v142 of the MSVC compiler (provided in Visual Studio 2017). You must also check that any pre-built `.dll` or `.lib` files provided or referenced by the native module are available for Windows on Arm.\nTesting your app\nTo test your app, use a Windows on Arm device running Windows 10 (version 1903 or later). Make sure that you copy your application over to the target device - Chromium's sandbox will not work correctly when loading your application assets from a network location.\nDevelopment prerequisites\nNode.js/node-gyp\nNode.js v12.9.0 or later is recommended. If updating to a new version of Node is  undesirable, you can instead update npm's copy of node-gyp manually to version 5.0.2 or later, which contains the required changes to compile native modules for Arm.\nVisual Studio 2017\nVisual Studio 2017 (any edition) is required for cross-compiling native modules. You can download Visual Studio Community 2017 via Microsoft's Visual Studio Dev Essentials program. After installation, you can add the Arm-specific components by running the following from a Command Prompt:\n`powershell\nvs_installer.exe ^\n--add Microsoft.VisualStudio.Workload.NativeDesktop ^\n--add Microsoft.VisualStudio.Component.VC.ATLMFC ^\n--add Microsoft.VisualStudio.Component.VC.Tools.ARM64 ^\n--add Microsoft.VisualStudio.Component.VC.MFC.ARM64 ^\n--includeRecommended`\nCreating a cross-compilation command prompt\nSetting `npm_config_arch=arm64` in the environment creates the correct arm64 `.obj` files, but the standard Developer Command Prompt for VS 2017 will use the x64 linker. To fix this:\n\nDuplicate the x64_x86 Cross Tools Command Prompt for VS 2017 shortcut (e.g. by locating it in the start menu, right clicking, selecting Open File Location, copying and pasting) to somewhere convenient.\nRight click the new shortcut and choose Properties.\nChange the Target field to read `vcvarsamd64_arm64.bat` at the end instead of `vcvarsamd64_x86.bat`.\n\nIf done successfully, the command prompt should print something similar to this on startup:\n```bat\n\n Visual Studio 2017 Developer Command Prompt v15.9.15\n Copyright (c) 2017 Microsoft Corporation\n\n[vcvarsall.bat] Environment initialized for: 'x64_arm64'\n```\nIf you want to develop your application directly on a Windows on Arm device, substitute `vcvarsx86_arm64.bat` in Target so that cross-compilation can happen with the device's x86 emulation.\nLinking against the correct `node.lib`\nBy default, `node-gyp` unpacks Electron's node headers and downloads the x86 and x64 versions of `node.lib` into `%APPDATA%\\..\\Local\\node-gyp\\Cache`, but it does not download the arm64 version (a fix for this is in development.) To fix this:\n\nDownload the arm64 `node.lib` from https://electronjs.org/headers/v6.0.9/win-arm64/node.lib\nMove it to `%APPDATA%\\..\\Local\\node-gyp\\Cache\\6.0.9\\arm64\\node.lib`\n\nSubstitute `6.0.9` for the version you're using.\nCross-compiling native modules\nAfter completing all of the above, open your cross-compilation command prompt and run `set npm_config_arch=arm64`. Then use `npm install` to build your project as normal. As with cross-compiling x86 modules, you may need to remove `node_modules` to force recompilation of native modules if they were previously compiled for another architecture.\nDebugging native modules\nDebugging native modules can be done with Visual Studio 2017 (running on your development machine) and corresponding Visual Studio Remote Debugger running on the target device. To debug:\n\nLaunch your app `.exe` on the target device via the Command Prompt (passing `--inspect-brk` to pause it before any native modules are loaded).\nLaunch Visual Studio 2017 on your development machine.\nConnect to the target device by selecting Debug > Attach to Process... and enter the device's IP address and the port number displayed by the Visual Studio Remote Debugger tool.\nClick Refresh and select the appropriate Electron process to attach.\nYou may need to make sure that any symbols for native modules in your app are loaded correctly. To configure this, head to Debug > Options... in Visual Studio 2017, and add the folders containing your `.pdb` symbols under Debugging > Symbols.\nOnce attached, set any appropriate breakpoints and resume JavaScript execution using Chrome's remote tools for Node.\n\nGetting additional help",
    "tag": "electron"
  },
  {
    "title": "Native File Drag & Drop",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/native-file-drag-drop.md",
    "content": "Native File Drag & Drop\nOverview\nCertain kinds of applications that manipulate files might want to support\nthe operating system's native file drag & drop feature. Dragging files into\nweb content is common and supported by many websites. Electron additionally\nsupports dragging files and content out from web content into the operating\nsystem's world.\nTo implement this feature in your app, you need to call the\nwebContents.startDrag(item)\nAPI in response to the `ondragstart` event.\nExample\nAn example demonstrating how you can create a file on the fly to be dragged out of the window.\nPreload.js\nIn `preload.js` use the [`contextBridge`][] to inject a method `window.electron.startDrag(...)` that will send an IPC message to the main process.\n```js\nconst { contextBridge, ipcRenderer } = require('electron')\ncontextBridge.exposeInMainWorld('electron', {\n  startDrag: (fileName) => {\n    ipcRenderer.send('ondragstart', path.join(process.cwd(), fileName))\n  }\n})\n```\nIndex.html\nAdd a draggable element to `index.html`, and reference your renderer script:\n```html\nDrag me\n\n```\nRenderer.js\nIn `renderer.js` set up the renderer process to handle drag events by calling the method you added via the [`contextBridge`][] above.\n`javascript\ndocument.getElementById('drag').ondragstart = (event) => {\n  event.preventDefault()\n  window.electron.startDrag('drag-and-drop.md')\n}`\nMain.js\nIn the Main process (`main.js` file), expand the received event with a path to the file that is\nbeing dragged and an icon:\n```javascript fiddle='docs/fiddles/features/drag-and-drop'\nconst { ipcMain } = require('electron')\nipcMain.on('ondragstart', (event, filePath) => {\n  event.sender.startDrag({\n    file: filePath,\n    icon: '/path/to/icon.png'\n  })\n})\n```\nAfter launching the Electron application, try dragging and dropping\nthe item from the BrowserWindow onto your desktop. In this guide,\nthe item is a Markdown file located in the root of the project:\n",
    "tag": "electron"
  },
  {
    "title": "Automated Testing",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/automated-testing.md",
    "content": "Automated Testing\nTest automation is an efficient way of validating that your application code works as intended.\nWhile Electron doesn't actively maintain its own testing solution, this guide will go over a couple\nways you can run end-to-end automated tests on your Electron app.\nUsing the WebDriver interface\nFrom ChromeDriver - WebDriver for Chrome:\n\nWebDriver is an open source tool for automated testing of web apps across many\nbrowsers. It provides capabilities for navigating to web pages, user input,\nJavaScript execution, and more. ChromeDriver is a standalone server which\nimplements WebDriver's wire protocol for Chromium. It is being developed by\nmembers of the Chromium and WebDriver teams.\n\nThere are a few ways that you can set up testing using WebDriver.\nWith WebdriverIO\nWebdriverIO (WDIO) is a test automation framework that provides a\nNode.js package for testing with WebDriver. Its ecosystem also includes various plugins\n(e.g. reporter and services) that can help you put together your test setup.\nInstall the test runner\nFirst you need to run the WebdriverIO starter toolkit in your project root directory:\n`sh npm2yarn\nnpx wdio . --yes`\nThis installs all necessary packages for you and generates a `wdio.conf.js` configuration file.\nConnect WDIO to your Electron app\nUpdate the capabilities in your configuration file to point to your Electron app binary:\n`javascript title='wdio.conf.js'\nexport.config = {\n  // ...\n  capabilities: [{\n    browserName: 'chrome',\n    'goog:chromeOptions': {\n      binary: '/path/to/your/electron/binary', // Path to your Electron binary.\n      args: [/* cli arguments */] // Optional, perhaps 'app=' + /path/to/your/app/\n    }\n  }]\n  // ...\n}`\nRun your tests\nTo run your tests:\n`sh\n$ npx wdio run wdio.conf.js`\nWith Selenium\nSelenium is a web automation framework that\nexposes bindings to WebDriver APIs in many languages. Their Node.js bindings\nare available under the `selenium-webdriver` package on NPM.\nRun a ChromeDriver server\nIn order to use Selenium with Electron, you need to download the `electron-chromedriver`\nbinary, and run it:\n`sh npm2yarn\nnpm install --save-dev electron-chromedriver\n./node_modules/.bin/chromedriver\nStarting ChromeDriver (v2.10.291558) on port 9515\nOnly local connections are allowed.`\nRemember the port number `9515`, which will be used later.\nConnect Selenium to ChromeDriver\nNext, install Selenium into your project:\n`sh npm2yarn\nnpm install --save-dev selenium-webdriver`\nUsage of `selenium-webdriver` with Electron is the same as with\nnormal websites, except that you have to manually specify how to connect\nChromeDriver and where to find the binary of your Electron app:\n`js title='test.js'\nconst webdriver = require('selenium-webdriver')\nconst driver = new webdriver.Builder()\n  // The \"9515\" is the port opened by ChromeDriver.\n  .usingServer('http://localhost:9515')\n  .withCapabilities({\n    'goog:chromeOptions': {\n      // Here is the path to your Electron binary.\n      binary: '/Path-to-Your-App.app/Contents/MacOS/Electron'\n    }\n  })\n  .forBrowser('chrome') // note: use .forBrowser('electron') for selenium-webdriver <= 3.6.0\n  .build()\ndriver.get('http://www.google.com')\ndriver.findElement(webdriver.By.name('q')).sendKeys('webdriver')\ndriver.findElement(webdriver.By.name('btnG')).click()\ndriver.wait(() => {\n  return driver.getTitle().then((title) => {\n    return title === 'webdriver - Google Search'\n  })\n}, 1000)\ndriver.quit()`\nUsing Playwright\nMicrosoft Playwright is an end-to-end testing framework built\nusing browser-specific remote debugging protocols, similar to the Puppeteer headless\nNode.js API but geared towards end-to-end testing. Playwright has experimental Electron\nsupport via Electron's support for the [Chrome DevTools Protocol][] (CDP).\nInstall dependencies\nYou can install Playwright through your preferred Node.js package manager. The Playwright team\nrecommends using the `PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD` environment variable to avoid\nunnecessary browser downloads when testing an Electron app.\n`sh npm2yarn\nPLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 npm install --save-dev playwright`\nPlaywright also comes with its own test runner, Playwright Test, which is built for end-to-end\ntesting. You can also install it as a dev dependency in your project:\n`sh npm2yarn\nnpm install --save-dev @playwright/test`\n:::caution Dependencies\nThis tutorial was written `playwright@1.16.3` and `@playwright/test@1.16.3`. Check out\nPlaywright's releases page to learn about\nchanges that might affect the code below.\n:::\n:::info Using third-party test runners\nIf you're interested in using an alternative test runner (e.g. Jest or Mocha), check out\nPlaywright's Third-Party Test Runner guide.\n:::\nWrite your tests\nPlaywright launches your app in development mode through the `_electron.launch` API.\nTo point this API to your Electron app, you can pass the path to your main process\nentry point (here, it is `main.js`).\n```js {5}\nconst { _electron: electron } = require('playwright')\nconst { test } = require('@playwright/test')\ntest('launch app', async () => {\n  const electronApp = await electron.launch({ args: ['main.js'] })\n  // close app\n  await electronApp.close()\n})\n```\nAfter that, you will access to an instance of Playwright's `ElectronApp` class. This\nis a powerful class that has access to main process modules for example:\n```js {6-11}\nconst { _electron: electron } = require('playwright')\nconst { test } = require('@playwright/test')\ntest('get isPackaged', async () => {\n  const electronApp = await electron.launch({ args: ['main.js'] })\n  const isPackaged = await electronApp.evaluate(async ({ app }) => {\n    // This runs in Electron's main process, parameter here is always\n    // the result of the require('electron') in the main app script.\n    return app.isPackaged\n  })\n  console.log(isPackaged) // false (because we're in development mode)\n  // close app\n  await electronApp.close()\n})\n```\nIt can also create individual Page objects from Electron BrowserWindow instances.\nFor example, to grab the first BrowserWindow and save a screenshot:\n```js {6-7}\nconst { _electron: electron } = require('playwright')\nconst { test } = require('@playwright/test')\ntest('save screenshot', async () => {\n  const electronApp = await electron.launch({ args: ['main.js'] })\n  const window = await electronApp.firstWindow()\n  await window.screenshot({ path: 'intro.png' })\n  // close app\n  await electronApp.close()\n})\n```\nPutting all this together using the PlayWright Test runner, let's create a `example.spec.js`\ntest file with a single test and assertion:\n```js title='example.spec.js'\nconst { _electron: electron } = require('playwright')\nconst { test, expect } = require('@playwright/test')\ntest('example test', async () => {\n  const electronApp = await electron.launch({ args: ['.'] })\n  const isPackaged = await electronApp.evaluate(async ({ app }) => {\n    // This runs in Electron's main process, parameter here is always\n    // the result of the require('electron') in the main app script.\n    return app.isPackaged;\n  });\nexpect(isPackaged).toBe(false);\n// Wait for the first BrowserWindow to open\n  // and return its Page object\n  const window = await electronApp.firstWindow()\n  await window.screenshot({ path: 'intro.png' })\n// close app\n  await electronApp.close()\n});\n```\nThen, run Playwright Test using `npx playwright test`. You should see the test pass in your\nconsole, and have an `intro.png` screenshot on your filesystem.\n```console\n\u2601  $ npx playwright test\nRunning 1 test using 1 worker\n\u2713  example.spec.js:4:1 \u203a example test (1s)\n```\n:::info\nPlaywright Test will automatically run any files matching the `.*(test|spec)\\.(js|ts|mjs)` regex.\nYou can customize this match in the Playwright Test configuration options.\n:::\n:::tip Further reading\nCheck out Playwright's documentation for the full Electron\nand ElectronApplication class APIs.\n:::\nUsing a custom test driver\nIt's also possible to write your own custom driver using Node.js' built-in IPC-over-STDIO.\nCustom test drivers require you to write additional app code, but have lower overhead and let you\nexpose custom methods to your test suite.\nTo create a custom driver, we'll use Node.js' child_process API.\nThe test suite will spawn the Electron process, then establish a simple messaging protocol:\n```js title='testDriver.js'\nconst childProcess = require('child_process')\nconst electronPath = require('electron')\n// spawn the process\nconst env = { / ... / }\nconst stdio = ['inherit', 'inherit', 'inherit', 'ipc']\nconst appProcess = childProcess.spawn(electronPath, ['./app'], { stdio, env })\n// listen for IPC messages from the app\nappProcess.on('message', (msg) => {\n  // ...\n})\n// send an IPC message to the app\nappProcess.send({ my: 'message' })\n```\nFrom within the Electron app, you can listen for messages and send replies using the Node.js\nprocess API:\n```js title='main.js'\n// listen for messages from the test suite\nprocess.on('message', (msg) => {\n  // ...\n})\n// send a message to the test suite\nprocess.send({ my: 'message' })\n```\nWe can now communicate from the test suite to the Electron app using the `appProcess` object.\nFor convenience, you may want to wrap `appProcess` in a driver object that provides more\nhigh-level functions. Here is an example of how you can do this. Let's start by creating\na `TestDriver` class:\n```js title='testDriver.js'\nclass TestDriver {\n  constructor ({ path, args, env }) {\n    this.rpcCalls = []\n\n\n```// start child process\nenv.APP_TEST_DRIVER = 1 // let the app know it should listen for messages\nthis.process = childProcess.spawn(path, args, { stdio: ['inherit', 'inherit', 'inherit', 'ipc'], env })\n\n// handle rpc responses\nthis.process.on('message', (message) => {\n  // pop the handler\n  const rpcCall = this.rpcCalls[message.msgId]\n  if (!rpcCall) return\n  this.rpcCalls[message.msgId] = null\n  // reject/resolve\n  if (message.reject) rpcCall.reject(message.reject)\n  else rpcCall.resolve(message.resolve)\n})\n\n// wait for ready\nthis.isReady = this.rpc('isReady').catch((err) => {\n  console.error('Application failed to start', err)\n  this.stop()\n  process.exit(1)\n})\n```\n\n\n}\n// simple RPC call\n  // to use: driver.rpc('method', 1, 2, 3).then(...)\n  async rpc (cmd, ...args) {\n    // send rpc request\n    const msgId = this.rpcCalls.length\n    this.process.send({ msgId, cmd, args })\n    return new Promise((resolve, reject) => this.rpcCalls.push({ resolve, reject }))\n  }\nstop () {\n    this.process.kill()\n  }\n}\nmodule.exports = { TestDriver };\n```\nIn your app code, can then write a simple handler to receive RPC calls:\n```js title='main.js'\nconst METHODS = {\n  isReady () {\n    // do any setup needed\n    return true\n  }\n  // define your RPC-able methods here\n}\nconst onMessage = async ({ msgId, cmd, args }) => {\n  let method = METHODS[cmd]\n  if (!method) method = () => new Error('Invalid method: ' + cmd)\n  try {\n    const resolve = await method(...args)\n    process.send({ msgId, resolve })\n  } catch (err) {\n    const reject = {\n      message: err.message,\n      stack: err.stack,\n      name: err.name\n    }\n    process.send({ msgId, reject })\n  }\n}\nif (process.env.APP_TEST_DRIVER) {\n  process.on('message', onMessage)\n}\n```\nThen, in your test suite, you can use your `TestDriver` class with the test automation\nframework of your choosing. The following example uses\nava, but other popular choices like Jest\nor Mocha would work as well:\n```js title='test.js'\nconst test = require('ava')\nconst electronPath = require('electron')\nconst { TestDriver } = require('./testDriver')\nconst app = new TestDriver({\n  path: electronPath,\n  args: ['./app'],\n  env: {\n    NODE_ENV: 'test'\n  }\n})\ntest.before(async t => {\n  await app.isReady\n})\ntest.after.always('cleanup', async t => {\n  await app.stop()\n})\n```",
    "tag": "electron"
  },
  {
    "title": "Debugging the Main Process",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/debugging-main-process.md",
    "content": "Debugging the Main Process\nThe DevTools in an Electron browser window can only debug JavaScript that's\nexecuted in that window (i.e. the web pages). To debug JavaScript that's\nexecuted in the main process you will need to use an external debugger and\nlaunch Electron with the `--inspect` or `--inspect-brk` switch.\nCommand Line Switches\nUse one of the following command line switches to enable debugging of the main\nprocess:\n`--inspect=[port]`\nElectron will listen for V8 inspector protocol messages on the specified `port`,\nan external debugger will need to connect on this port. The default `port` is\n`5858`.\n`shell\nelectron --inspect=5858 your/app`\n`--inspect-brk=[port]`\nLike `--inspect` but pauses execution on the first line of JavaScript.\nExternal Debuggers\nYou will need to use a debugger that supports the V8 inspector protocol.\n\nConnect Chrome by visiting `chrome://inspect` and selecting to inspect the\n  launched Electron app present there.\n",
    "tag": "electron"
  },
  {
    "title": "Platform Support",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/asar-integrity.md",
    "content": "\ntitle: 'ASAR Integrity'\ndescription: 'An experimental feature that ensures the validity of ASAR contents at runtime.'\nslug: asar-integrity\nhide_title: false\n\nPlatform Support\nCurrently ASAR integrity checking is only supported on macOS.\nRequirements\nElectron Forge / Electron Packager\nIf you are using `>= electron-packager@15.4.0` or `>= @electron-forge/core@6.0.0-beta.61` then all these requirements are met for you automatically and you can skip to Toggling the Fuse.\nOther build systems\nIn order to enable ASAR integrity checking you need to ensure that your `app.asar` file was generated by a version of the `asar` npm package that supports asar integrity.  Support was introduced in version `3.1.0`.\nYour must then populate a valid `ElectronAsarIntegrity` dictionary block in your packaged apps `Info.plist`.  An example is included below.\n`plist\n<key>ElectronAsarIntegrity</key>\n<dict>\n  <key>Resources/app.asar</key>\n  <dict>\n    <key>algorithm</key>\n    <string>SHA256</string>\n    <key>hash</key>\n    <string>9d1f61ea03c4bb62b4416387a521101b81151da0cfbe18c9f8c8b818c5cebfac</string>\n  </dict>\n</dict>`\nValid `algorithm` values are currently `SHA256` only.  The `hash` is a hash of the ASAR header using the given algorithm.  The `asar` package exposes a `getRawHeader` method whose result can then be hashed to generate this value.\nToggling the Fuse\nASAR integrity checking is currently disabled by default and can be enabled by toggling a fuse. See Electron Fuses for more information on what Electron Fuses are and how they work.  When enabling this fuse you typically also want to enable the `onlyLoadAppFromAsar` fuse otherwise the validity checking can be bypassed via the Electron app code search path.\n```js\nrequire('@electron/fuses').flipFuses(\n  // E.g. /a/b/Foo.app\n  pathToPackagedApp,\n  {\n    version: FuseVersion.V1,\n    [FuseV1Options.EnableEmbeddedAsarIntegrityValidation]: true,\n    [FuseV1Options.OnlyLoadAppFromAsar]: true\n  }\n)",
    "tag": "electron"
  },
  {
    "title": "Using ASAR Archives",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/asar-archives.md",
    "content": "\ntitle: ASAR Archives\ndescription: What is ASAR archive and how does it affect the application.\nslug: asar-archives\nhide_title: false\n\nAfter creating an application distribution, the\napp's source code are usually bundled into an ASAR\narchive, which is a simple extensive archive\nformat designed for Electron apps. By bundling the app we can mitigate issues\naround long path names on Windows, speed up `require` and conceal your source\ncode from cursory inspection.\nThe bundled app runs in a virtual file system and most APIs would just work\nnormally, but for some cases you might want to work on ASAR archives explicitly\ndue to a few caveats.\nUsing ASAR Archives\nIn Electron there are two sets of APIs: Node APIs provided by Node.js and Web\nAPIs provided by Chromium. Both APIs support reading files from ASAR archives.\nNode API\nWith special patches in Electron, Node APIs like `fs.readFile` and `require`\ntreat ASAR archives as virtual directories, and the files in it as normal\nfiles in the filesystem.\nFor example, suppose we have an `example.asar` archive under `/path/to`:\n`sh\n$ asar list /path/to/example.asar\n/app.js\n/file.txt\n/dir/module.js\n/static/index.html\n/static/main.css\n/static/jquery.min.js`\nRead a file in the ASAR archive:\n`javascript\nconst fs = require('fs')\nfs.readFileSync('/path/to/example.asar/file.txt')`\nList all files under the root of the archive:\n`javascript\nconst fs = require('fs')\nfs.readdirSync('/path/to/example.asar')`\nUse a module from the archive:\n`javascript\nrequire('./path/to/example.asar/dir/module.js')`\nYou can also display a web page in an ASAR archive with `BrowserWindow`:\n```javascript\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\nwin.loadURL('file:///path/to/example.asar/static/index.html')\n```\nWeb API\nIn a web page, files in an archive can be requested with the `file:` protocol.\nLike the Node API, ASAR archives are treated as directories.\nFor example, to get a file with `$.get`:\n```html\n\n```\nTreating an ASAR archive as a Normal File\nFor some cases like verifying the ASAR archive's checksum, we need to read the\ncontent of an ASAR archive as a file. For this purpose you can use the built-in\n`original-fs` module which provides original `fs` APIs without `asar` support:\n`javascript\nconst originalFs = require('original-fs')\noriginalFs.readFileSync('/path/to/example.asar')`\nYou can also set `process.noAsar` to `true` to disable the support for `asar` in\nthe `fs` module:\n`javascript\nconst fs = require('fs')\nprocess.noAsar = true\nfs.readFileSync('/path/to/example.asar')`\nLimitations of the Node API\nEven though we tried hard to make ASAR archives in the Node API work like\ndirectories as much as possible, there are still limitations due to the\nlow-level nature of the Node API.\nArchives Are Read-only\nThe archives can not be modified so all Node APIs that can modify files will not\nwork with ASAR archives.\nWorking Directory Can Not Be Set to Directories in Archive\nThough ASAR archives are treated as directories, there are no actual\ndirectories in the filesystem, so you can never set the working directory to\ndirectories in ASAR archives. Passing them as the `cwd` option of some APIs\nwill also cause errors.\nExtra Unpacking on Some APIs\nMost `fs` APIs can read a file or get a file's information from ASAR archives\nwithout unpacking, but for some APIs that rely on passing the real file path to\nunderlying system calls, Electron will extract the needed file into a\ntemporary file and pass the path of the temporary file to the APIs to make them\nwork. This adds a little overhead for those APIs.\nAPIs that requires extra unpacking are:\n\n`child_process.execFile`\n`child_process.execFileSync`\n`fs.open`\n`fs.openSync`\n`process.dlopen` - Used by `require` on native modules\n\nFake Stat Information of `fs.stat`\nThe `Stats` object returned by `fs.stat` and its friends on files in `asar`\narchives is generated by guessing, because those files do not exist on the\nfilesystem. So you should not trust the `Stats` object except for getting file\nsize and checking file type.\nExecuting Binaries Inside ASAR archive\nThere are Node APIs that can execute binaries like `child_process.exec`,\n`child_process.spawn` and `child_process.execFile`, but only `execFile` is\nsupported to execute binaries inside ASAR archive.\nThis is because `exec` and `spawn` accept `command` instead of `file` as input,\nand `command`s are executed under shell. There is no reliable way to determine\nwhether a command uses a file in asar archive, and even if we do, we can not be\nsure whether we can replace the path in command without side effects.\nAdding Unpacked Files to ASAR archives\nAs stated above, some Node APIs will unpack the file to the filesystem when\ncalled. Apart from the performance issues, various anti-virus scanners might\nbe triggered by this behavior.\nAs a workaround, you can leave various files unpacked using the `--unpack` option.\nIn the following example, shared libraries of native Node.js modules will not be\npacked:\n`sh\n$ asar pack app app.asar --unpack *.node`\nAfter running the command, you will notice that a folder named `app.asar.unpacked`\nwas created together with the `app.asar` file. It contains the unpacked files",
    "tag": "electron"
  },
  {
    "title": "Desktop Launcher Actions",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/linux-desktop-actions.md",
    "content": "\ntitle: Desktop Launcher Actions\ndescription: Add actions to the system launcher on Linux environments.\nslug: linux-desktop-actions\nhide_title: true\n\nDesktop Launcher Actions\nOverview\nOn many Linux environments, you can add custom entries to the system launcher\nby modifying the `.desktop` file. For Canonical's Unity documentation, see\nAdding Shortcuts to a Launcher. For details on a more generic\nimplementation, see the [freedesktop.org Specification][spec].\n\n\nNOTE: The screenshot above is an example of launcher shortcuts in Audacious\naudio player\n\nTo create a shortcut, you need to provide `Name` and `Exec` properties for the\nentry you want to add to the shortcut menu. Unity will execute the command\ndefined in the `Exec` field after the user clicked the shortcut menu item.\nAn example of the `.desktop` file may look as follows:\n```plaintext\nActions=PlayPause;Next;Previous\n[Desktop Action PlayPause]\nName=Play-Pause\nExec=audacious -t\nOnlyShowIn=Unity;\n[Desktop Action Next]\nName=Next\nExec=audacious -f\nOnlyShowIn=Unity;\n[Desktop Action Previous]\nName=Previous\nExec=audacious -r\nOnlyShowIn=Unity;\n```\nThe preferred way for Unity to instruct your application on what to do is using\nparameters. You can find them in your application in the global variable\n`process.argv`.",
    "tag": "electron"
  },
  {
    "title": "Signing & notarizing macOS builds",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/code-signing.md",
    "content": "\ntitle: 'Code Signing'\ndescription: 'Code signing is a security technology that you use to certify that an app was created by you.'\nslug: code-signing\nhide_title: false\n\nCode signing is a security technology that you use to certify that an app was\ncreated by you. You should sign your application so it does not trigger any\noperating system security checks.\nOn macOS, the system can detect any change to the app, whether the change is\nintroduced accidentally or by malicious code.\nOn Windows, the system assigns a trust level to your code signing certificate\nwhich if you don't have, or if your trust level is low, will cause security\ndialogs to appear when users start using your application. Trust level builds\nover time so it's better to start code signing as early as possible.\nWhile it is possible to distribute unsigned apps, it is not recommended. Both\nWindows and macOS will, by default, prevent either the download or the execution\nof unsigned applications. Starting with macOS Catalina (version 10.15), users\nhave to go through multiple manual steps to open unsigned applications.\n\nAs you can see, users get two options: Move the app straight to the trash or\ncancel running it. You don't want your users to see that dialog.\nIf you are building an Electron app that you intend to package and distribute,\nit should be code signed.\nSigning & notarizing macOS builds\nProperly preparing macOS applications for release requires two steps. First, the\napp needs to be code signed. Then, the app needs to be uploaded to Apple for a\nprocess called notarization, where automated systems will further verify that\nyour app isn't doing anything to endanger its users.\nTo start the process, ensure that you fulfill the requirements for signing and\nnotarizing your app:\n\nEnroll in the Apple Developer Program (requires an annual fee)\nDownload and install Xcode - this requires a computer running macOS\nGenerate, download, and install signing certificates\n\nElectron's ecosystem favors configuration and freedom, so there are multiple\nways to get your application signed and notarized.\nUsing Electron Forge\nIf you're using Electron's favorite build tool, getting your application signed\nand notarized requires a few additions to your configuration. Forge is a\ncollection of the official Electron tools, using [`electron-packager`][],\n[`@electron/osx-sign`][], and [`@electron/notarize`][] under the hood.\nDetailed instructions on how to configure your application can be found in the\nSigning macOS Apps guide in\nthe Electron Forge docs.\nUsing Electron Packager\nIf you're not using an integrated build pipeline like Forge, you\nare likely using [`electron-packager`][], which includes [`@electron/osx-sign`][] and\n[`@electron/notarize`][].\nIf you're using Packager's API, you can pass in configuration that both signs\nand notarizes your application.\n```js\nconst packager = require('electron-packager')\npackager({\n  dir: '/path/to/my/app',\n  osxSign: {},\n  osxNotarize: {\n    appleId: 'felix@felix.fun',\n    appleIdPassword: 'my-apple-id-password'\n  }\n})\n```\nSigning Mac App Store applications\nSee the Mac App Store Guide.\nSigning Windows builds\nBefore signing Windows builds, you must do the following:\n\nGet a Windows Authenticode code signing certificate (requires an annual fee)\nInstall Visual Studio to get the signing utility (the free Community\n   Edition is enough)\n\nYou can get a code signing certificate from a lot of resellers. Prices vary, so\nit may be worth your time to shop around. Popular resellers include:\n\ndigicert\nSectigo\nAmongst others, please shop around to find one that suits your needs! \ud83d\ude04\n\n:::caution Keep your certificate password private\nYour certificate password should be a secret. Do not share it publicly or\ncommit it to your source code.\n:::\nUsing Electron Forge\nElectron Forge is the recommended way to sign your `Squirrel.Windows` and `WiX MSI` installers. Detailed instructions on how to configure your application can be found in the Electron Forge Code Signing Tutorial.\nUsing electron-winstaller (Squirrel.Windows)\n[`electron-winstaller`][] is a package that can generate Squirrel.Windows installers for your\nElectron app. This is the tool used under the hood by Electron Forge's\nSquirrel.Windows Maker. If you're not using Electron Forge and want to use\n`electron-winstaller` directly, use the `certificateFile` and `certificatePassword` configuration\noptions when creating your installer.\n`js {10-11}\nconst electronInstaller = require('electron-winstaller')\n// NB: Use this syntax within an async function, Node does not have support for\n//     top-level await as of Node 12.\ntry {\n  await electronInstaller.createWindowsInstaller({\n    appDirectory: '/tmp/build/my-app-64',\n    outputDirectory: '/tmp/build/installer64',\n    authors: 'My App Inc.',\n    exe: 'myapp.exe',\n    certificateFile: './cert.pfx',\n    certificatePassword: 'this-is-a-secret',\n  })\n  console.log('It worked!')\n} catch (e) {\n  console.log(`No dice: ${e.message}`)\n}`\nFor full configuration options, check out the [`electron-winstaller`][] repository!\nUsing electron-wix-msi (WiX MSI)\n[`electron-wix-msi`][] is a package that can generate MSI installers for your\nElectron app. This is the tool used under the hood by Electron Forge's MSI Maker.\nIf you're not using Electron Forge and want to use `electron-wix-msi` directly, use the\n`certificateFile` and `certificatePassword` configuration options\nor pass in parameters directly to [SignTool.exe][] with the `signWithParams` option.\n```js {12-13}\nimport { MSICreator } from 'electron-wix-msi'\n// Step 1: Instantiate the MSICreator\nconst msiCreator = new MSICreator({\n  appDirectory: '/path/to/built/app',\n  description: 'My amazing Kitten simulator',\n  exe: 'kittens',\n  name: 'Kittens',\n  manufacturer: 'Kitten Technologies',\n  version: '1.1.2',\n  outputDirectory: '/path/to/output/folder',\n  certificateFile: './cert.pfx',\n  certificatePassword: 'this-is-a-secret',\n})\n// Step 2: Create a .wxs template file\nconst supportBinaries = await msiCreator.create()\n// \ud83c\udd95 Step 2a: optionally sign support binaries if you\n// sign you binaries as part of of your packaging script\nsupportBinaries.forEach(async (binary) => {\n  // Binaries are the new stub executable and optionally\n  // the Squirrel auto updater.\n  await signFile(binary)\n})\n// Step 3: Compile the template to a .msi file\nawait msiCreator.compile()\n```\nFor full configuration options, check out the [`electron-wix-msi`][] repository!\nUsing Electron Builder\nElectron Builder comes with a custom solution for signing your application. You\ncan find its documentation here.\nSigning Windows Store applications\nSee the Windows Store Guide.",
    "tag": "electron"
  },
  {
    "title": "Application Debugging",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/application-debugging.md",
    "content": "Application Debugging\nWhenever your Electron application is not behaving the way you wanted it to,\nan array of debugging tools might help you find coding errors, performance\nbottlenecks, or optimization opportunities.\nRenderer Process\nThe most comprehensive tool to debug individual renderer processes is the\nChromium Developer Toolset. It is available for all renderer processes,\nincluding instances of `BrowserWindow`, `BrowserView`, and `WebView`. You\ncan open them programmatically by calling the `openDevTools()` API on the\n`webContents` of the instance:\n```javascript\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\nwin.webContents.openDevTools()\n```\nGoogle offers excellent documentation for their developer tools.\nWe recommend that you make yourself familiar with them - they are usually one\nof the most powerful utilities in any Electron Developer's tool belt.\nMain Process\nDebugging the main process is a bit trickier, since you cannot open\ndeveloper tools for them. The Chromium Developer Tools can be used\nto debug Electron's main process thanks to a closer collaboration\nbetween Google / Chrome and Node.js, but you might encounter oddities like\n`require` not being present in the console.\nFor more information, see the Debugging the Main Process documentation.\nV8 Crashes\nIf the V8 context crashes, the DevTools will display this message.\n`DevTools was disconnected from the page. Once page is reloaded, DevTools will automatically reconnect.`\nChromium logs can be enabled via the `ELECTRON_ENABLE_LOGGING` environment variable. For more information, see the environment variables documentation.",
    "tag": "electron"
  },
  {
    "title": "Electron Versioning",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/electron-versioning.md",
    "content": "Electron Versioning\n\nA detailed look at our versioning policy and implementation.\n\nAs of version 2.0.0, Electron follows the SemVer spec. The following command will install the most recent stable build of Electron:\n`sh npm2yarn\nnpm install --save-dev electron`\nTo update an existing project to use the latest stable version:\n`sh npm2yarn\nnpm install --save-dev electron@latest`\nVersioning scheme\nThere are several major changes from our 1.x strategy outlined below. Each change is intended to satisfy the needs and priorities of developers/maintainers and app developers.\n\nStrict use of the SemVer spec\nIntroduction of semver-compliant `-beta` tags\nIntroduction of conventional commit messages\nWell-defined stabilization branches\nThe `main` branch is versionless; only stabilization branches contain version information\n\nWe will cover in detail how git branching works, how npm tagging works, what developers should expect to see, and how one can backport changes.\nSemVer\nBelow is a table explicitly mapping types of changes to their corresponding category of SemVer (e.g. Major, Minor, Patch).\n| Major Version Increments        | Minor Version Increments           | Patch Version Increments      |\n| ------------------------------- | ---------------------------------- | ----------------------------- |\n| Electron breaking API changes   | Electron non-breaking API changes  | Electron bug fixes            |\n| Node.js major version updates   | Node.js minor version updates      | Node.js patch version updates |\n| Chromium version updates        |                                    | fix-related chromium patches  |\nFor more information, see the Semantic Versioning 2.0.0 spec.\nNote that most Chromium updates will be considered breaking. Fixes that can be backported will likely be cherry-picked as patches.\nStabilization branches\nStabilization branches are branches that run parallel to `main`, taking in only cherry-picked commits that are related to security or stability. These branches are never merged back to `main`.\n\nSince Electron 8, stabilization branches are always major version lines, and named against the following template `$MAJOR-x-y` e.g. `8-x-y`.  Prior to that we used minor version lines and named them as `$MAJOR-$MINOR-x` e.g. `2-0-x`.\nWe allow for multiple stabilization branches to exist simultaneously, one for each supported version. For more details on which versions are supported, see our Electron Releases doc.\n\nOlder lines will not be supported by the Electron project, but other groups can take ownership and backport stability and security fixes on their own. We discourage this, but recognize that it makes life easier for many app developers.\nBeta releases and bug fixes\nDevelopers want to know which releases are safe to use. Even seemingly innocent features can introduce regressions in complex applications. At the same time, locking to a fixed version is dangerous because you\u2019re ignoring security patches and bug fixes that may have come out since your version. Our goal is to allow the following standard semver ranges in `package.json` :\n\nUse `~2.0.0` to admit only stability or security related fixes to your `2.0.0` release.\nUse `^2.0.0` to admit non-breaking reasonably stable feature work as well as security and bug fixes.\n\nWhat\u2019s important about the second point is that apps using `^` should still be able to expect a reasonable level of stability. To accomplish this, SemVer allows for a pre-release identifier to indicate a particular version is not yet safe or stable.\nWhatever you choose, you will periodically have to bump the version in your `package.json` as breaking changes are a fact of Chromium life.\nThe process is as follows:\n\nAll new major and minor releases lines begin with a beta series indicated by SemVer prerelease tags of `beta.N`, e.g. `2.0.0-beta.1`. After the first beta, subsequent beta releases must meet all of the following conditions:\nThe change is backwards API-compatible (deprecations are allowed)\nThe risk to meeting our stability timeline must be low.\n\n\nIf allowed changes need to be made once a release is beta, they are applied and the prerelease tag is incremented, e.g. `2.0.0-beta.2`.\nIf a particular beta release is generally regarded as stable, it will be re-released as a stable build, changing only the version information. e.g. `2.0.0`. After the first stable, all changes must be backwards-compatible bug or security fixes.\nIf future bug fixes or security patches need to be made once a release is stable, they are applied and the patch version is incremented\ne.g. `2.0.1`.\n\nSpecifically, the above means:\n\nAdmitting non-breaking-API changes before Week 3 in the beta cycle is okay, even if those changes have the potential to cause moderate side-effects.\nAdmitting feature-flagged changes, that do not otherwise alter existing code paths, at most points in the beta cycle is okay. Users can explicitly enable those flags in their apps.\nAdmitting features of any sort after Week 3 in the beta cycle is \ud83d\udc4e without a very good reason.\n\nFor each major and minor bump, you should expect to see something like the following:\n`plaintext\n2.0.0-beta.1\n2.0.0-beta.2\n2.0.0-beta.3\n2.0.0\n2.0.1\n2.0.2`\nAn example lifecycle in pictures:\n\nA new release branch is created that includes the latest set of features. It is published as `2.0.0-beta.1`.\n\nA bug fix comes into master that can be backported to the release branch. The patch is applied, and a new beta is published as `2.0.0-beta.2`.\n\nThe beta is considered generally stable and it is published again as a non-beta under `2.0.0`.\n\nLater, a zero-day exploit is revealed and a fix is applied to master. We backport the fix to the `2-0-x` line and release `2.0.1`.\n\n\nA few examples of how various SemVer ranges will pick up new releases:\n\nBackport request process\nAll supported release lines will accept external pull requests to backport\nfixes previously merged to `main`, though this may be on a case-by-case\nbasis for some older supported lines. All contested decisions around release\nline backports will be resolved by the\nReleases Working Group\nas an agenda item at their weekly meeting the week the backport PR is raised.\nFeature flags\nFeature flags are a common practice in Chromium, and are well-established in the web-development ecosystem. In the context of Electron, a feature flag or soft branch must have the following properties:\n\nit is enabled/disabled either at runtime, or build-time; we do not support the concept of a request-scoped feature flag\nit completely segments new and old code paths; refactoring old code to support a new feature violates the feature-flag contract\nfeature flags are eventually removed after the feature is released\n\nSemantic commits\nAll pull requests must adhere to the Conventional Commits spec, which can be summarized as follows:\n\nCommits that would result in a SemVer major bump must start their body with `BREAKING CHANGE:`.\nCommits that would result in a SemVer minor bump must start with `feat:`.\nCommits that would result in a SemVer patch bump must start with `fix:`.\n\nThe `electron/electron` repository also enforces squash merging, so you only need to make sure that your pull request has the correct title prefix.\nVersioned `main` branch\n\nThe `main` branch will always contain the next major version `X.0.0-nightly.DATE` in its `package.json`.\nRelease branches are never merged back to `main`.\nRelease branches do contain the correct version in their `package.json`.\nAs soon as a release branch is cut for a major, `main` must be bumped to the next major (i.e. `main` is always versioned as the next theoretical release branch).\n\nHistorical versioning (Electron 1.X)\nElectron versions < 2.0 did not conform to the SemVer spec: major versions corresponded to end-user API changes, minor versions corresponded to Chromium major releases, and patch versions corresponded to new features and bug fixes. While convenient for developers merging features, it creates problems for developers of client-facing applications. The QA testing cycles of major apps like Slack, Teams, Skype, VS Code, and GitHub Desktop can be lengthy and stability is a highly desired outcome. There is a high risk in adopting new features while trying to absorb bug fixes.\nHere is an example of the 1.x strategy:\n",
    "tag": "electron"
  },
  {
    "title": "Progress Bars",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/progress-bar.md",
    "content": "\ntitle: Progress Bars\ndescription: Provide progress information to users outside of a BrowserWindow.\nslug: progress-bar\nhide_title: true\n\nProgress Bars\nOverview\nA progress bar enables a window to provide progress information to the user\nwithout the need of switching to the window itself.\nOn Windows, you can use a taskbar button to display a progress bar.\n\nOn macOS, the progress bar will be displayed as a part of the dock icon.\n\nOn Linux, the Unity graphical interface also has a similar feature that allows\nyou to specify the progress bar in the launcher.\n\n\nNOTE: on Windows, each window can have its own progress bar, whereas on macOS\nand Linux (Unity) there can be only one progress bar for the application.\n\n\nAll three cases are covered by the same API - the\n[`setProgressBar()`][setprogressbar] method available on an instance of\n`BrowserWindow`. To indicate your progress, call this method with a number\nbetween `0` and `1`. For example, if you have a long-running task that is\ncurrently at 63% towards completion, you would call it as\n`setProgressBar(0.63)`.\nSetting the parameter to negative values (e.g. `-1`) will remove the progress\nbar. Setting it to a value greater than `1` will indicate an indeterminate progress bar\nin Windows or clamp to 100% in other operating systems. An indeterminate progress bar\nremains active but does not show an actual percentage, and is used for situations when\nyou do not know how long an operation will take to complete.\nSee the [API documentation for more options and modes][setprogressbar].\nExample\nIn this example, we add a progress bar to the main window that increments over time\nusing Node.js timers.\n```javascript fiddle='docs/fiddles/features/progress-bar'\nconst { app, BrowserWindow } = require('electron')\nlet progressInterval\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\nwin.loadFile('index.html')\nconst INCREMENT = 0.03\n  const INTERVAL_DELAY = 100 // ms\nlet c = 0\n  progressInterval = setInterval(() => {\n    // update progress bar to next value\n    // values between 0 and 1 will show progress, >1 will show indeterminate or stick at 100%\n    win.setProgressBar(c)\n\n\n```// increment or reset progress bar\nif (c < 2) c += INCREMENT\nelse c = 0\n```\n\n\n}, INTERVAL_DELAY)\n}\napp.whenReady().then(createWindow)\n// before the app is terminated, clear both timers\napp.on('before-quit', () => {\n  clearInterval(progressInterval)\n})\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow()\n  }\n})\n```\nAfter launching the Electron application, the dock (macOS) or taskbar (Windows, Unity)\nshould show a progress bar that starts at zero and progresses through 100% to completion.\nIt should then show indeterminate (Windows) or pin to 100% (other operating systems)\nbriefly and then loop.\n\nFor macOS, the progress bar will also be indicated for your application\nwhen using Mission Control:\n",
    "tag": "electron"
  },
  {
    "title": "Advanced Installation Instructions",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/installation.md",
    "content": "Advanced Installation Instructions\nTo install prebuilt Electron binaries, use npm.\nThe preferred method is to install Electron as a development dependency in your\napp:\n`sh\nnpm install electron --save-dev`\nSee the Electron versioning doc for info on how to\nmanage Electron versions in your apps.\nRunning Electron ad-hoc\nIf you're in a pinch and would prefer to not use `npm install` in your local\nproject, you can also run Electron ad-hoc using the npx command runner\nbundled with `npm`:\n`sh\nnpx electron .`\nThe above command will run the current working directory with Electron. Note that\nany dependencies in your app will not be installed.\nCustomization\nIf you want to change the architecture that is downloaded (e.g., `ia32` on an\n`x64` machine), you can use the `--arch` flag with npm install or set the\n`npm_config_arch` environment variable:\n`shell\nnpm install --arch=ia32 electron`\nIn addition to changing the architecture, you can also specify the platform\n(e.g., `win32`, `linux`, etc.) using the `--platform` flag:\n`shell\nnpm install --platform=win32 electron`\nProxies\nIf you need to use an HTTP proxy, you need to set the `ELECTRON_GET_USE_PROXY` variable to any\nvalue, plus additional environment variables depending on your host system's Node version:\n\nNode 10 and above\nBefore Node 10\n\nCustom Mirrors and Caches\nDuring installation, the `electron` module will call out to\n@electron/get to download prebuilt binaries of\nElectron for your platform. It will do so by contacting GitHub's\nrelease download page (`https://github.com/electron/electron/releases/tag/v$VERSION`,\nwhere `$VERSION` is the exact version of Electron).\nIf you are unable to access GitHub or you need to provide a custom build, you\ncan do so by either providing a mirror or an existing cache directory.\nMirror\nYou can use environment variables to override the base URL, the path at which to\nlook for Electron binaries, and the binary filename. The URL used by `@electron/get`\nis composed as follows:\n`javascript\nurl = ELECTRON_MIRROR + ELECTRON_CUSTOM_DIR + '/' + ELECTRON_CUSTOM_FILENAME`\nFor instance, to use the China CDN mirror:\n`shell\nELECTRON_MIRROR=\"https://npmmirror.com/mirrors/electron/\"`\nBy default, `ELECTRON_CUSTOM_DIR` is set to `v$VERSION`. To change the format,\nuse the `{{ version }}` placeholder. For example, `version-{{ version }}`\nresolves to `version-5.0.0`, `{{ version }}` resolves to `5.0.0`, and\n`v{{ version }}` is equivalent to the default. As a more concrete example, to\nuse the China non-CDN mirror:\n`shell\nELECTRON_MIRROR=\"https://npmmirror.com/mirrors/electron/\"\nELECTRON_CUSTOM_DIR=\"{{ version }}\"`\nThe above configuration will download from URLs such as\n`https://npmmirror.com/mirrors/electron/8.0.0/electron-v8.0.0-linux-x64.zip`.\nIf your mirror serves artifacts with different checksums to the official\nElectron release you may have to set `electron_use_remote_checksums=1` to\nforce Electron to use the remote `SHASUMS256.txt` file to verify the checksum\ninstead of the embedded checksums.\nCache\nAlternatively, you can override the local cache. `@electron/get` will cache\ndownloaded binaries in a local directory to not stress your network. You can use\nthat cache folder to provide custom builds of Electron or to avoid making contact\nwith the network at all.\n\nLinux: `$XDG_CACHE_HOME` or `~/.cache/electron/`\nmacOS: `~/Library/Caches/electron/`\nWindows: `$LOCALAPPDATA/electron/Cache` or `~/AppData/Local/electron/Cache/`\n\nOn environments that have been using older versions of Electron, you might find the\ncache also in `~/.electron`.\nYou can also override the local cache location by providing a `electron_config_cache`\nenvironment variable.\nThe cache contains the version's official zip file as well as a checksum, and is stored as\n`[checksum]/[filename]`. A typical cache might look like this:\n`sh\n\u251c\u2500\u2500 a91b089b5dc5b1279966511344b805ec84869b6cd60af44f800b363bba25b915\n\u2502   \u2514\u2500\u2500 electron-v15.3.1-darwin-x64.zip`\nSkip binary download\nUnder the hood, Electron's JavaScript API binds to a binary that contains its\nimplementations. Because this binary is crucial to the function of any Electron app,\nit is downloaded by default in the `postinstall` step every time you install `electron`\nfrom the npm registry.\nHowever, if you want to install your project's dependencies but don't need to use\nElectron functionality, you can set the `ELECTRON_SKIP_BINARY_DOWNLOAD` environment\nvariable to prevent the binary from being downloaded. For instance, this feature can\nbe useful in continuous integration environments when running unit tests that mock\nout the `electron` module.\n`sh npm2yarn\nELECTRON_SKIP_BINARY_DOWNLOAD=1 npm install`\nTroubleshooting\nWhen running `npm install electron`, some users occasionally encounter\ninstallation errors.\nIn almost all cases, these errors are the result of network problems and not\nactual issues with the `electron` npm package. Errors like `ELIFECYCLE`,\n`EAI_AGAIN`, `ECONNRESET`, and `ETIMEDOUT` are all indications of such\nnetwork problems. The best resolution is to try switching networks, or\nwait a bit and try installing again.\nYou can also attempt to download Electron directly from\nelectron/electron/releases\nif installing via `npm` is failing.\nIf installation fails with an `EACCESS` error you may need to\nfix your npm permissions.\nIf the above error persists, the [unsafe-perm][unsafe-perm] flag may need to be\nset to true:\n`sh\nsudo npm install electron --unsafe-perm=true`\nOn slower networks, it may be advisable to use the `--verbose` flag in order to\nshow download progress:\n`sh\nnpm install --verbose electron`\nIf you need to force a re-download of the asset and the SHASUM file set the\n`force_no_cache` environment variable to `true`.",
    "tag": "electron"
  },
  {
    "title": "Using update.electronjs.org",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/updates.md",
    "content": "\ntitle: 'Updating Applications'\ndescription: \"There are several ways to update an Electron application. The easiest and officially supported one is taking advantage of the built-in Squirrel framework and Electron's autoUpdater module.\"\nslug: updates\nhide_title: false\n\nThere are several ways to provide automatic updates to your Electron application.\nThe easiest and officially supported one is taking advantage of the built-in\nSquirrel framework and\nElectron's autoUpdater module.\nUsing update.electronjs.org\nThe Electron team maintains update.electronjs.org, a free and open-source\nwebservice that Electron apps can use to self-update. The service is designed\nfor Electron apps that meet the following criteria:\n\nApp runs on macOS or Windows\nApp has a public GitHub repository\nBuilds are published to GitHub Releases\nBuilds are code-signed\n\nThe easiest way to use this service is by installing [update-electron-app][],\na Node.js module preconfigured for use with update.electronjs.org.\nInstall the module using your Node.js package manager of choice:\n`sh npm2yarn\nnpm install update-electron-app`\nThen, invoke the updater from your app's main process file:\n`js title=\"main.js\"\nrequire('update-electron-app')()`\nBy default, this module will check for updates at app startup, then every ten\nminutes. When an update is found, it will automatically be downloaded in the background.\nWhen the download completes, a dialog is displayed allowing the user to restart the app.\nIf you need to customize your configuration, you can\n[pass options to update-electron-app][update-electron-app]\nor\nuse the update service directly.\nUsing other update services\nIf you're developing a private Electron application, or if you're not\npublishing releases to GitHub Releases, it may be necessary to run your own\nupdate server.\nStep 1: Deploying an update server\nDepending on your needs, you can choose from one of these:\n\nHazel \u2013 Update server for private or open-source apps which can be\n  deployed for free on Vercel. It pulls from GitHub Releases\n  and leverages the power of GitHub's CDN.\nNuts \u2013 Also uses GitHub Releases, but caches app\n  updates on disk and supports private repositories.\nelectron-release-server \u2013 Provides a dashboard for\n  handling releases and does not require releases to originate on GitHub.\nNucleus \u2013 A complete update server for Electron apps maintained by\n  Atlassian. Supports multiple applications and channels; uses a static file store\n  to minify server cost.\n\nOnce you've deployed your update server, you can instrument your app code to receive and\napply the updates with Electron's autoUpdater module.\nStep 2: Receiving updates in your app\nFirst, import the required modules in your main process code. The following code might\nvary for different server software, but it works like described when using Hazel.\n:::warning Check your execution environment!\nPlease ensure that the code below will only be executed in your packaged app, and not in development.\nYou can use the app.isPackaged API to check the environment.\n:::\n`javascript title='main.js'\nconst { app, autoUpdater, dialog } = require('electron')`\nNext, construct the URL of the update server feed and tell\nautoUpdater about it:\n```javascript title='main.js'\nconst server = 'https://your-deployment-url.com'\nconst url =`${server}/update/${process.platform}/${app.getVersion()}`\nautoUpdater.setFeedURL({ url })\n```\nAs the final step, check for updates. The example below will check every minute:\n`javascript title='main.js'\nsetInterval(() => {\n  autoUpdater.checkForUpdates()\n}, 60000)`\nOnce your application is packaged,\nit will receive an update for each new\nGitHub Release that you\npublish.\nStep 3: Notifying users when updates are available\nNow that you've configured the basic update mechanism for your application, you\nneed to ensure that the user will get notified when there's an update. This\ncan be achieved using the autoUpdater API events:\n```javascript title=\"main.js\"\nautoUpdater.on('update-downloaded', (event, releaseNotes, releaseName) => {\n  const dialogOpts = {\n    type: 'info',\n    buttons: ['Restart', 'Later'],\n    title: 'Application Update',\n    message: process.platform === 'win32' ? releaseNotes : releaseName,\n    detail:\n      'A new version has been downloaded. Restart the application to apply the updates.',\n  }\ndialog.showMessageBox(dialogOpts).then((returnValue) => {\n    if (returnValue.response === 0) autoUpdater.quitAndInstall()\n  })\n})\n```\nAlso make sure that errors are\nbeing handled. Here's an example\nfor logging them to `stderr`:\n`javascript title=\"main.js\"\nautoUpdater.on('error', (message) => {\n  console.error('There was a problem updating the application')\n  console.error(message)\n})`\n:::info Handling updates manually\nBecause the requests made by autoUpdate aren't under your direct control, you may find situations\nthat are difficult to handle (such as if the update server is behind authentication). The `url`\nfield supports the `file://` protocol, which means that with some effort, you can sidestep the\nserver-communication aspect of the process by loading your update from a local directory.\nHere's an example of how this could work.\n:::",
    "tag": "electron"
  },
  {
    "title": "Process Model",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/process-model.md",
    "content": "\ntitle: 'Process Model'\ndescription: 'Electron inherits its multi-process architecture from Chromium, which makes the framework architecturally very similar to a modern web browser. This guide will expand on the concepts applied in the tutorial.'\nslug: process-model\nhide_title: false\n\nProcess Model\nElectron inherits its multi-process architecture from Chromium, which makes the framework\narchitecturally very similar to a modern web browser. This guide will expand on the\nconcepts applied in the Tutorial.\nWhy not a single process?\nWeb browsers are incredibly complicated applications. Aside from their primary ability\nto display web content, they have many secondary responsibilities,\nsuch as managing multiple windows (or tabs) and loading third-party extensions.\nIn the earlier days, browsers usually used a single process for all of this\nfunctionality. Although this pattern meant less overhead for each tab you had open,\nit also meant that one website crashing or hanging would affect the entire browser.\nThe multi-process model\nTo solve this problem, the Chrome team decided that each tab would render in its own\nprocess, limiting the harm that buggy or malicious code on a web page could cause to\nthe app as a whole. A single browser process then controls these processes, as well\nas the application lifecycle as a whole. This diagram below from the Chrome Comic\nvisualizes this model:\n\nElectron applications are structured very similarly. As an app developer, you control\ntwo types of processes: main and renderer.\nThese are analogous to Chrome's own browser and renderer processes outlined above.\nThe main process\nEach Electron app has a single main process, which acts as the application's entry\npoint. The main process runs in a Node.js environment, meaning it has the ability\nto `require` modules and use all of Node.js APIs.\nWindow management\nThe main process' primary purpose is to create and manage application windows with the\nBrowserWindow module.\nEach instance of the `BrowserWindow` class creates an application window that loads\na web page in a separate renderer process. You can interact with this web content\nfrom the main process using the window's webContents object.\n```js title='main.js'\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({ width: 800, height: 1500 })\nwin.loadURL('https://github.com')\nconst contents = win.webContents\nconsole.log(contents)\n```\n\nNote: A renderer process is also created for web embeds such as the\n`BrowserView` module. The `webContents` object is also accessible for embedded\nweb content.\n\nBecause the `BrowserWindow` module is an EventEmitter, you can also\nadd handlers for various user events (for example, minimizing or maximizing your window).\nWhen a `BrowserWindow` instance is destroyed, its corresponding renderer process gets\nterminated as well.\nApplication lifecycle\nThe main process also controls your application's lifecycle through Electron's\napp module. This module provides a large set of events and methods\nthat you can use to add custom application behaviour (for instance, programmatically\nquitting your application, modifying the application dock, or showing an About panel).\nAs a practical example, the app shown in the quick start guide\nuses `app` APIs to create a more native application window experience.\n`js title='main.js'\n// quitting the app when no windows are open on non-macOS platforms\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') app.quit()\n})`\nNative APIs\nTo extend Electron's features beyond being a Chromium wrapper for web contents, the\nmain process also adds custom APIs to interact with the user's operating system.\nElectron exposes various modules that control native desktop functionality, such\nas menus, dialogs, and tray icons.\nFor a full list of Electron's main process modules, check out our API documentation.\nThe renderer process\nEach Electron app spawns a separate renderer process for each open `BrowserWindow`\n(and each web embed). As its name implies, a renderer is responsible for\nrendering web content. For all intents and purposes, code ran in renderer processes\nshould behave according to web standards (insofar as Chromium does, at least).\nTherefore, all user interfaces and app functionality within a single browser\nwindow should be written with the same tools and paradigms that you use on the\nweb.\nAlthough explaining every web spec is out of scope for this guide, the bare minimum\nto understand is:\n\nAn HTML file is your entry point for the renderer process.\nUI styling is added through Cascading Style Sheets (CSS).\nExecutable JavaScript code can be added through `<script>` elements.\n\nMoreover, this also means that the renderer has no direct access to `require`\nor other Node.js APIs. In order to directly include NPM modules in the renderer,\nyou must use the same bundler toolchains (for example, `webpack` or `parcel`) that you\nuse on the web.\n:::warning\nRenderer processes can be spawned with a full Node.js environment for ease of\ndevelopment. Historically, this used to be the default, but this feature was disabled\nfor security reasons.\n:::\nAt this point, you might be wondering how your renderer process user interfaces\ncan interact with Node.js and Electron's native desktop functionality if these\nfeatures are only accessible from the main process. In fact, there is no direct\nway to import Electron's content scripts.\nPreload scripts\n\nPreload scripts contain code that executes in a renderer process before its web content\nbegins loading. These scripts run within the renderer context, but are granted more\nprivileges by having access to Node.js APIs.\nA preload script can be attached to the main process in the `BrowserWindow` constructor's\n`webPreferences` option.\n`js title='main.js'\nconst { BrowserWindow } = require('electron')\n//...\nconst win = new BrowserWindow({\n  webPreferences: {\n    preload: 'path/to/preload.js',\n  },\n})\n//...`\nBecause the preload script shares a global Window interface with the\nrenderers and can access Node.js APIs, it serves to enhance your renderer by exposing\narbitrary APIs in the `window` global that your web contents can then consume.\nAlthough preload scripts share a `window` global with the renderer they're attached to,\nyou cannot directly attach any variables from the preload script to `window` because of\nthe contextIsolation default.\n`js title='preload.js'\nwindow.myAPI = {\n  desktop: true,\n}`\n`js title='renderer.js'\nconsole.log(window.myAPI)\n// => undefined`\nContext Isolation means that preload scripts are isolated from the renderer's main world\nto avoid leaking any privileged APIs into your web content's code.\nInstead, use the contextBridge module to accomplish this\nsecurely:\n```js title='preload.js'\nconst { contextBridge } = require('electron')\ncontextBridge.exposeInMainWorld('myAPI', {\n  desktop: true,\n})\n```\n`js title='renderer.js'\nconsole.log(window.myAPI)\n// => { desktop: true }`\nThis feature is incredibly useful for two main purposes:\n\nBy exposing ipcRenderer helpers to the renderer, you can use\n  inter-process communication (IPC) to trigger main process tasks from the\n  renderer (and vice-versa).\nIf you're developing an Electron wrapper for an existing web app hosted on a remote\n  URL, you can add custom properties onto the renderer's `window` global that can\n  be used for desktop-only logic on the web client's side.\n\nThe utility process\nEach Electron app can spawn multiple child processes from the main process using\nthe [UtilityProcess][] API. The utility process runs in a Node.js environment,\nmeaning it has the ability to `require` modules and use all of Node.js APIs.\nThe utility process can be used to host for example: untrusted services,\nCPU intensive tasks or crash prone components which would have previously\nbeen hosted in the main process or process spawned with Node.js [`child_process.fork`][] API.\nThe primary difference between the utility process and process spawned by Node.js\nchild_process module is that the utility process can establish a communication\nchannel with a renderer process using [`MessagePort`][]s. An Electron app can\nalways prefer the [UtilityProcess][] API over Node.js [`child_process.fork`][] API when\nthere is need to fork a child process from the main process.",
    "tag": "electron"
  },
  {
    "title": "REPL",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/repl.md",
    "content": "REPL\nRead-Eval-Print-Loop (REPL)\nis a simple, interactive computer programming environment that takes single user\ninputs (i.e. single expressions), evaluates them, and returns the result to the user.\nMain process\nElectron exposes the Node.js repl module\nthrough the `--interactive` CLI flag. Assuming you have `electron` installed as a local project\ndependency, you should be able to access the REPL with the following command:\n`sh\n  ./node_modules/.bin/electron --interactive`\nNote: `electron --interactive` is not available on Windows\n(see electron/electron#5776 for more details).\nRenderer process\nYou can use the DevTools Console tab to get a REPL for any renderer process.",
    "tag": "electron"
  },
  {
    "title": "Inter-Process Communication",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/ipc.md",
    "content": "\ntitle: Inter-Process Communication\ndescription: Use the ipcMain and ipcRenderer modules to communicate between Electron processes\nslug: ipc\nhide_title: false\n\nInter-Process Communication\nInter-process communication (IPC) is a key part of building feature-rich desktop applications\nin Electron. Because the main and renderer processes have different responsibilities in\nElectron's process model, IPC is the only way to perform many common tasks, such as calling a\nnative API from your UI or triggering changes in your web contents from native menus.\nIPC channels\nIn Electron, processes communicate by passing messages through developer-defined \"channels\"\nwith the [`ipcMain`][] and [`ipcRenderer`][] modules. These channels are\narbitrary (you can name them anything you want) and bidirectional (you can use the\nsame channel name for both modules).\nIn this guide, we'll be going over some fundamental IPC patterns with concrete examples that\nyou can use as a reference for your app code.\nUnderstanding context-isolated processes\nBefore proceeding to implementation details, you should be familiar with the idea of using a\npreload script to import Node.js and Electron modules in a context-isolated renderer process.\n\nFor a full overview of Electron's process model, you can read the process model docs.\nFor a primer into exposing APIs from your preload script using the `contextBridge` module, check\nout the context isolation tutorial.\n\nPattern 1: Renderer to main (one-way)\nTo fire a one-way IPC message from a renderer process to the main process, you can use the\n[`ipcRenderer.send`][] API to send a message that is then received by the [`ipcMain.on`][] API.\nYou usually use this pattern to call a main process API from your web contents. We'll demonstrate\nthis pattern by creating a simple app that can programmatically change its window title.\nFor this demo, you'll need to add code to your main process, your renderer process, and a preload\nscript. The full code is below, but we'll be explaining each file individually in the following\nsections.\n`fiddle docs/fiddles/ipc/pattern-1`\n1. Listen for events with `ipcMain.on`\nIn the main process, set an IPC listener on the `set-title` channel with the `ipcMain.on` API:\n```javascript {6-10,22} title='main.js (Main Process)'\nconst {app, BrowserWindow, ipcMain} = require('electron')\nconst path = require('path')\n//...\nfunction handleSetTitle (event, title) {\n  const webContents = event.sender\n  const win = BrowserWindow.fromWebContents(webContents)\n  win.setTitle(title)\n}\nfunction createWindow () {\n  const mainWindow = new BrowserWindow({\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n  mainWindow.loadFile('index.html')\n}\napp.whenReady().then(() => {\n  ipcMain.on('set-title', handleSetTitle)\n  createWindow()\n}\n//...\n```\nThe above `handleSetTitle` callback has two parameters: an IpcMainEvent structure and a\n`title` string. Whenever a message comes through the `set-title` channel, this function will\nfind the BrowserWindow instance attached to the message sender and use the `win.setTitle`\nAPI on it.\n:::info\nMake sure you're loading the `index.html` and `preload.js` entry points for the following steps!\n:::\n2. Expose `ipcRenderer.send` via preload\nTo send messages to the listener created above, you can use the `ipcRenderer.send` API.\nBy default, the renderer process has no Node.js or Electron module access. As an app developer,\nyou need to choose which APIs to expose from your preload script using the `contextBridge` API.\nIn your preload script, add the following code, which will expose a global `window.electronAPI`\nvariable to your renderer process.\n```javascript title='preload.js (Preload Script)'\nconst { contextBridge, ipcRenderer } = require('electron')\ncontextBridge.exposeInMainWorld('electronAPI', {\n    setTitle: (title) => ipcRenderer.send('set-title', title)\n})\n```\nAt this point, you'll be able to use the `window.electronAPI.setTitle()` function in the renderer\nprocess.\n:::caution Security warning\nWe don't directly expose the whole `ipcRenderer.send` API for security reasons. Make sure to\nlimit the renderer's access to Electron APIs as much as possible.\n:::\n3. Build the renderer process UI\nIn our BrowserWindow's loaded HTML file, add a basic user interface consisting of a text input\nand a button:\n```html {11-12} title='index.html'\n\n\n\n\n\n\nHello World!\n\n\n\n    Title: \nSet\n\n\n\n```\nTo make these elements interactive, we'll be adding a few lines of code in the imported\n`renderer.js` file that leverages the `window.electronAPI` functionality exposed from the preload\nscript:\n`javascript title='renderer.js (Renderer Process)'\nconst setButton = document.getElementById('btn')\nconst titleInput = document.getElementById('title')\nsetButton.addEventListener('click', () => {\n    const title = titleInput.value\n    window.electronAPI.setTitle(title)\n});`\nAt this point, your demo should be fully functional. Try using the input field and see what happens\nto your BrowserWindow title!\nPattern 2: Renderer to main (two-way)\nA common application for two-way IPC is calling a main process module from your renderer process\ncode and waiting for a result. This can be done by using [`ipcRenderer.invoke`][] paired with\n[`ipcMain.handle`][].\nIn the following example, we'll be opening a native file dialog from the renderer process and\nreturning the selected file's path.\nFor this demo, you'll need to add code to your main process, your renderer process, and a preload\nscript. The full code is below, but we'll be explaining each file individually in the following\nsections.\n`fiddle docs/fiddles/ipc/pattern-2`\n1. Listen for events with `ipcMain.handle`\nIn the main process, we'll be creating a `handleFileOpen()` function that calls\n`dialog.showOpenDialog` and returns the value of the file path selected by the user. This function\nis used as a callback whenever an `ipcRender.invoke` message is sent through the `dialog:openFile`\nchannel from the renderer process. The return value is then returned as a Promise to the original\n`invoke` call.\n:::caution A word on error handling\nErrors thrown through `handle` in the main process are not transparent as they\nare serialized and only the `message` property from the original error is\nprovided to the renderer process. Please refer to\n#24427 for details.\n:::\n```javascript {6-13,25} title='main.js (Main Process)'\nconst { BrowserWindow, dialog, ipcMain } = require('electron')\nconst path = require('path')\n//...\nasync function handleFileOpen() {\n  const { canceled, filePaths } = await dialog.showOpenDialog()\n  if (canceled) {\n    return\n  } else {\n    return filePaths[0]\n  }\n}\nfunction createWindow () {\n  const mainWindow = new BrowserWindow({\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n  mainWindow.loadFile('index.html')\n}\napp.whenReady(() => {\n  ipcMain.handle('dialog:openFile', handleFileOpen)\n  createWindow()\n})\n//...\n```\n:::tip on channel names\nThe `dialog:` prefix on the IPC channel name has no effect on the code. It only serves\nas a namespace that helps with code readability.\n:::\n:::info\nMake sure you're loading the `index.html` and `preload.js` entry points for the following steps!\n:::\n2. Expose `ipcRenderer.invoke` via preload\nIn the preload script, we expose a one-line `openFile` function that calls and returns the value of\n`ipcRenderer.invoke('dialog:openFile')`. We'll be using this API in the next step to call the\nnative dialog from our renderer's user interface.\n```javascript title='preload.js (Preload Script)'\nconst { contextBridge, ipcRenderer } = require('electron')\ncontextBridge.exposeInMainWorld('electronAPI', {\n  openFile: () => ipcRenderer.invoke('dialog:openFile')\n})\n```\n:::caution Security warning\nWe don't directly expose the whole `ipcRenderer.invoke` API for security reasons. Make sure to\nlimit the renderer's access to Electron APIs as much as possible.\n:::\n3. Build the renderer process UI\nFinally, let's build the HTML file that we load into our BrowserWindow.\n```html {10-11} title='index.html'\n\n\n\n\n\n\nDialog\n\n\n\nOpen a File\n    File path: \n\n\n\n```\nThe UI consists of a single `#btn` button element that will be used to trigger our preload API, and\na `#filePath` element that will be used to display the path of the selected file. Making these\npieces work will take a few lines of code in the renderer process script:\n```javascript title='renderer.js (Renderer Process)'\nconst btn = document.getElementById('btn')\nconst filePathElement = document.getElementById('filePath')\nbtn.addEventListener('click', async () => {\n  const filePath = await window.electronAPI.openFile()\n  filePathElement.innerText = filePath\n})\n```\nIn the above snippet, we listen for clicks on the `#btn` button, and call our\n`window.electronAPI.openFile()` API to activate the native Open File dialog. We then display the\nselected file path in the `#filePath` element.\nNote: legacy approaches\nThe `ipcRenderer.invoke` API was added in Electron 7 as a developer-friendly way to tackle two-way\nIPC from the renderer process. However, there exist a couple alternative approaches to this IPC\npattern.\n:::warning Avoid legacy approaches if possible\nWe recommend using `ipcRenderer.invoke` whenever possible. The following two-way renderer-to-main\npatterns are documented for historical purposes.\n:::\n:::info\nFor the following examples, we're calling `ipcRenderer` directly from the preload script to keep\nthe code samples small.\n:::\nUsing `ipcRenderer.send`\nThe `ipcRenderer.send` API that we used for single-way communication can also be leveraged to\nperform two-way communication. This was the recommended way for asynchronous two-way communication\nvia IPC prior to Electron 7.\n```javascript title='preload.js (Preload Script)'\n// You can also put expose this code to the renderer\n// process with the`contextBridge` API\nconst { ipcRenderer } = require('electron')\nipcRenderer.on('asynchronous-reply', (_event, arg) => {\n  console.log(arg) // prints \"pong\" in the DevTools console\n})\nipcRenderer.send('asynchronous-message', 'ping')\n```\n`javascript title='main.js (Main Process)'\nipcMain.on('asynchronous-message', (event, arg) => {\n  console.log(arg) // prints \"ping\" in the Node console\n  // works like `send`, but returning a message back\n  // to the renderer that sent the original message\n  event.reply('asynchronous-reply', 'pong')\n})`\nThere are a couple downsides to this approach:\n\nYou need to set up a second `ipcRenderer.on` listener to handle the response in the renderer\nprocess. With `invoke`, you get the response value returned as a Promise to the original API call.\nThere's no obvious way to pair the `asynchronous-reply` message to the original\n`asynchronous-message` one. If you have very frequent messages going back and forth through these\nchannels, you would need to add additional app code to track each call and response individually.\n\nUsing `ipcRenderer.sendSync`\nThe `ipcRenderer.sendSync` API sends a message to the main process and waits synchronously for a\nresponse.\n`javascript title='main.js (Main Process)'\nconst { ipcMain } = require('electron')\nipcMain.on('synchronous-message', (event, arg) => {\n  console.log(arg) // prints \"ping\" in the Node console\n  event.returnValue = 'pong'\n})`\n```javascript title='preload.js (Preload Script)'\n// You can also put expose this code to the renderer\n// process with the`contextBridge` API\nconst { ipcRenderer } = require('electron')\nconst result = ipcRenderer.sendSync('synchronous-message', 'ping')\nconsole.log(result) // prints \"pong\" in the DevTools console\n```\nThe structure of this code is very similar to the `invoke` model, but we recommend\navoiding this API for performance reasons. Its synchronous nature means that it'll block the\nrenderer process until a reply is received.\nPattern 3: Main to renderer\nWhen sending a message from the main process to a renderer process, you need to specify which\nrenderer is receiving the message. Messages need to be sent to a renderer process\nvia its [`WebContents`][] instance. This WebContents instance contains a [`send`][webcontents-send] method\nthat can be used in the same way as `ipcRenderer.send`.\nTo demonstrate this pattern, we'll be building a number counter controlled by the native operating\nsystem menu.\nFor this demo, you'll need to add code to your main process, your renderer process, and a preload\nscript. The full code is below, but we'll be explaining each file individually in the following\nsections.\n`fiddle docs/fiddles/ipc/pattern-3`\n1. Send messages with the `webContents` module\nFor this demo, we'll need to first build a custom menu in the main process using Electron's `Menu`\nmodule that uses the `webContents.send` API to send an IPC message from the main process to the\ntarget renderer.\n```javascript {11-26} title='main.js (Main Process)'\nconst {app, BrowserWindow, Menu, ipcMain} = require('electron')\nconst path = require('path')\nfunction createWindow () {\n  const mainWindow = new BrowserWindow({\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\nconst menu = Menu.buildFromTemplate([\n    {\n      label: app.name,\n      submenu: [\n        {\n          click: () => mainWindow.webContents.send('update-counter', 1),\n          label: 'Increment',\n        },\n        {\n          click: () => mainWindow.webContents.send('update-counter', -1),\n          label: 'Decrement',\n        }\n      ]\n    }\n  ])\n  Menu.setApplicationMenu(menu)\nmainWindow.loadFile('index.html')\n}\n//...\n```\nFor the purposes of the tutorial, it's important to note that the `click` handler\nsends a message (either `1` or `-1`) to the renderer process through the `update-counter` channel.\n`javascript\nclick: () => mainWindow.webContents.send('update-counter', -1)`\n:::info\nMake sure you're loading the `index.html` and `preload.js` entry points for the following steps!\n:::\n2. Expose `ipcRenderer.on` via preload\nLike in the previous renderer-to-main example, we use the `contextBridge` and `ipcRenderer`\nmodules in the preload script to expose IPC functionality to the renderer process:\n```javascript title='preload.js (Preload Script)'\nconst { contextBridge, ipcRenderer } = require('electron')\ncontextBridge.exposeInMainWorld('electronAPI', {\n    onUpdateCounter: (callback) => ipcRenderer.on('update-counter', callback)\n})\n```\nAfter loading the preload script, your renderer process should have access to the\n`window.electronAPI.onUpdateCounter()` listener function.\n:::caution Security warning\nWe don't directly expose the whole `ipcRenderer.on` API for security reasons. Make sure to\nlimit the renderer's access to Electron APIs as much as possible.\n:::\n:::info\nIn the case of this minimal example, you can call `ipcRenderer.on` directly in the preload script\nrather than exposing it over the context bridge.\n```javascript title='preload.js (Preload Script)'\nconst { ipcRenderer } = require('electron')\nwindow.addEventListener('DOMContentLoaded', () => {\n    const counter = document.getElementById('counter')\n    ipcRenderer.on('update-counter', (_event, value) => {\n        const oldValue = Number(counter.innerText)\n        const newValue = oldValue + value\n        counter.innerText = newValue\n    })\n})\n```\nHowever, this approach has limited flexibility compared to exposing your preload APIs\nover the context bridge, since your listener can't directly interact with your renderer code.\n:::\n3. Build the renderer process UI\nTo tie it all together, we'll create an interface in the loaded HTML file that contains a\n`#counter` element that we'll use to display the values:\n```html {10} title='index.html'\n\n\n\n\n\n\nMenu Counter\n\n\n\n    Current value: 0\n\n\n\n```\nFinally, to make the values update in the HTML document, we'll add a few lines of DOM manipulation\nso that the value of the `#counter` element is updated whenever we fire an `update-counter` event.\n```javascript title='renderer.js (Renderer Process)'\nconst counter = document.getElementById('counter')\nwindow.electronAPI.onUpdateCounter((_event, value) => {\n    const oldValue = Number(counter.innerText)\n    const newValue = oldValue + value\n    counter.innerText = newValue\n})\n```\nIn the above code, we're passing in a callback to the `window.electronAPI.onUpdateCounter` function\nexposed from our preload script. The second `value` parameter corresponds to the `1` or `-1` we\nwere passing in from the `webContents.send` call from the native menu.\nOptional: returning a reply\nThere's no equivalent for `ipcRenderer.invoke` for main-to-renderer IPC. Instead, you can\nsend a reply back to the main process from within the `ipcRenderer.on` callback.\nWe can demonstrate this with slight modifications to the code from the previous example. In the\nrenderer process, use the `event` parameter to send a reply back to the main process through the\n`counter-value` channel.\n```javascript title='renderer.js (Renderer Process)'\nconst counter = document.getElementById('counter')\nwindow.electronAPI.onUpdateCounter((event, value) => {\n  const oldValue = Number(counter.innerText)\n  const newValue = oldValue + value\n  counter.innerText = newValue\n  event.sender.send('counter-value', newValue)\n})\n```\nIn the main process, listen for `counter-value` events and handle them appropriately.\n`javascript title='main.js (Main Process)'\n//...\nipcMain.on('counter-value', (_event, value) => {\n  console.log(value) // will print value to Node console\n})\n//...`\nPattern 4: Renderer to renderer\nThere's no direct way to send messages between renderer processes in Electron using the `ipcMain`\nand `ipcRenderer` modules. To achieve this, you have two options:\n\nUse the main process as a message broker between renderers. This would involve sending a message\nfrom one renderer to the main process, which would forward the message to the other renderer.\nPass a MessagePort from the main process to both renderers. This will allow direct communication\nbetween renderers after the initial setup.\n\nObject serialization\nElectron's IPC implementation uses the HTML standard\nStructured Clone Algorithm to serialize objects passed between processes, meaning that\nonly certain types of objects can be passed through IPC channels.\nIn particular, DOM objects (e.g. `Element`, `Location` and `DOMMatrix`), Node.js objects\nbacked by C++ classes (e.g. `process.env`, some members of `Stream`), and Electron objects\nbacked by C++ classes (e.g. `WebContents`, `BrowserWindow` and `WebFrame`) are not serializable\nwith Structured Clone.",
    "tag": "electron"
  },
  {
    "title": "Adding application complexity",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/tutorial-4-adding-features.md",
    "content": "\ntitle: 'Adding Features'\ndescription: 'In this step of the tutorial, we will share some resources you should read to add features to your application'\nslug: tutorial-adding-features\nhide_title: false\n\n:::info Follow along the tutorial\nThis is part 4 of the Electron tutorial.\n\nPrerequisites\nBuilding your First App\nUsing Preload Scripts\nAdding Features\nPackaging Your Application\n[Publishing and Updating][updates]\n\n:::\nAdding application complexity\nIf you have been following along, you should have a functional Electron application\nwith a static user interface. From this starting point, you can generally progress\nin developing your app in two broad directions:\n\nAdding complexity to your renderer process' web app code\nDeeper integrations with the operating system and Node.js\n\nIt is important to understand the distinction between these two broad concepts. For the\nfirst point, Electron-specific resources are not necessary. Building a pretty to-do\nlist in Electron is just pointing your Electron BrowserWindow to a pretty\nto-do list web app. Ultimately, you are building your renderer's UI using the same tools\n(HTML, CSS, JavaScript) that you would on the web. Therefore, Electron's docs will\nnot go in-depth on how to use standard web tools.\nOn the other hand, Electron also provides a rich set of tools that allow\nyou to integrate with the desktop environment, from creating tray icons to adding\nglobal shortcuts to displaying native menus. It also gives you all the power of a\nNode.js environment in the main process. This set of capabilities separates\nElectron applications from running a website in a browser tab, and are the\nfocus of Electron's documentation.\nHow-to examples\nElectron's documentation has many tutorials to help you with more advanced topics\nand deeper operating system integrations. To get started, check out the\nHow-To Examples doc.\n:::note Let us know if something is missing!\nIf you can't find what you are looking for, please let us know on GitHub or in\nour Discord server!\n:::\nWhat's next?\nFor the rest of the tutorial, we will be shifting away from application code\nand giving you a look at how you can get your app from your developer machine\ninto end users' hands.\n\n",
    "tag": "electron"
  },
  {
    "title": "MessagePorts in Electron",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/message-ports.md",
    "content": "MessagePorts in Electron\n[`MessagePort`][]s are a web feature that allow passing messages between\ndifferent contexts. It's like `window.postMessage`, but on different channels.\nThe goal of this document is to describe how Electron extends the Channel\nMessaging model, and to give some examples of how you might use MessagePorts in\nyour app.\nHere is a very brief example of what a MessagePort is and how it works:\n```js title='renderer.js (Renderer Process)'\n// MessagePorts are created in pairs. A connected pair of message ports is\n// called a channel.\nconst channel = new MessageChannel()\n// The only difference between port1 and port2 is in how you use them. Messages\n// sent to port1 will be received by port2 and vice-versa.\nconst port1 = channel.port1\nconst port2 = channel.port2\n// It's OK to send a message on the channel before the other end has registered\n// a listener. Messages will be queued until a listener is registered.\nport2.postMessage({ answer: 42 })\n// Here we send the other end of the channel, port1, to the main process. It's\n// also possible to send MessagePorts to other frames, or to Web Workers, etc.\nipcRenderer.postMessage('port', null, [port1])\n```\n```js title='main.js (Main Process)'\n// In the main process, we receive the port.\nipcMain.on('port', (event) => {\n  // When we receive a MessagePort in the main process, it becomes a\n  // MessagePortMain.\n  const port = event.ports[0]\n// MessagePortMain uses the Node.js-style events API, rather than the\n  // web-style events API. So .on('message', ...) instead of .onmessage = ...\n  port.on('message', (event) => {\n    // data is { answer: 42 }\n    const data = event.data\n  })\n// MessagePortMain queues messages until the .start() method has been called.\n  port.start()\n})\n```\nThe [Channel Messaging API][] documentation is a great way to learn more about\nhow MessagePorts work.\nMessagePorts in the main process\nIn the renderer, the `MessagePort` class behaves exactly as it does on the web.\nThe main process is not a web page, though\u2014it has no Blink integration\u2014and so\nit does not have the `MessagePort` or `MessageChannel` classes. In order to\nhandle and interact with MessagePorts in the main process, Electron adds two\nnew classes: [`MessagePortMain`][] and [`MessageChannelMain`][]. These behave\nsimilarly to the analogous classes in the renderer.\n`MessagePort` objects can be created in either the renderer or the main\nprocess, and passed back and forth using the [`ipcRenderer.postMessage`][] and\n[`WebContents.postMessage`][] methods. Note that the usual IPC methods like\n`send` and `invoke` cannot be used to transfer `MessagePort`s, only the\n`postMessage` methods can transfer `MessagePort`s.\nBy passing `MessagePort`s via the main process, you can connect two pages that\nmight not otherwise be able to communicate (e.g. due to same-origin\nrestrictions).\nExtension: `close` event\nElectron adds one feature to `MessagePort` that isn't present on the web, in\norder to make MessagePorts more useful. That is the `close` event, which is\nemitted when the other end of the channel is closed. Ports can also be\nimplicitly closed by being garbage-collected.\nIn the renderer, you can listen for the `close` event either by assigning to\n`port.onclose` or by calling `port.addEventListener('close', ...)`. In the main\nprocess, you can listen for the `close` event by calling `port.on('close',\n...)`.\nExample use cases\nSetting up a MessageChannel between two renderers\nIn this example, the main process sets up a MessageChannel, then sends each port\nto a different renderer. This allows renderers to send messages to each other\nwithout needing to use the main process as an in-between.\n```js title='main.js (Main Process)'\nconst { BrowserWindow, app, MessageChannelMain } = require('electron')\napp.whenReady().then(async () => {\n  // create the windows.\n  const mainWindow = new BrowserWindow({\n    show: false,\n    webPreferences: {\n      contextIsolation: false,\n      preload: 'preloadMain.js'\n    }\n  })\nconst secondaryWindow = new BrowserWindow({\n    show: false,\n    webPreferences: {\n      contextIsolation: false,\n      preload: 'preloadSecondary.js'\n    }\n  })\n// set up the channel.\n  const { port1, port2 } = new MessageChannelMain()\n// once the webContents are ready, send a port to each webContents with postMessage.\n  mainWindow.once('ready-to-show', () => {\n    mainWindow.webContents.postMessage('port', null, [port1])\n  })\nsecondaryWindow.once('ready-to-show', () => {\n    secondaryWindow.webContents.postMessage('port', null, [port2])\n  })\n})\n```\nThen, in your preload scripts you receive the port through IPC and set up the\nlisteners.\n```js title='preloadMain.js and preloadSecondary.js (Preload scripts)'\nconst { ipcRenderer } = require('electron')\nipcRenderer.on('port', e => {\n  // port received, make it globally available.\n  window.electronMessagePort = e.ports[0]\nwindow.electronMessagePort.onmessage = messageEvent => {\n    // handle message\n  }\n})\n```\nIn this example messagePort is bound to the `window` object directly. It is better\nto use `contextIsolation` and set up specific contextBridge calls for each of your\nexpected messages, but for the simplicity of this example we don't. You can find an\nexample of context isolation further down this page at Communicating directly between the main process and the main world of a context-isolated page\nThat means window.electronMessagePort is globally available and you can call\n`postMessage` on it from anywhere in your app to send a message to the other\nrenderer.\n`js title='renderer.js (Renderer Process)'\n// elsewhere in your code to send a message to the other renderers message handler\nwindow.electronMessagePort.postmessage('ping')`\nWorker process\nIn this example, your app has a worker process implemented as a hidden window.\nYou want the app page to be able to communicate directly with the worker\nprocess, without the performance overhead of relaying via the main process.\n```js title='main.js (Main Process)'\nconst { BrowserWindow, app, ipcMain, MessageChannelMain } = require('electron')\napp.whenReady().then(async () => {\n  // The worker process is a hidden BrowserWindow, so that it will have access\n  // to a full Blink context (including e.g. , audio, fetch(), etc.)\n  const worker = new BrowserWindow({\n    show: false,\n    webPreferences: { nodeIntegration: true }\n  })\n  await worker.loadFile('worker.html')\n// The main window will send work to the worker process and receive results\n  // over a MessagePort.\n  const mainWindow = new BrowserWindow({\n    webPreferences: { nodeIntegration: true }\n  })\n  mainWindow.loadFile('app.html')\n// We can't use ipcMain.handle() here, because the reply needs to transfer a\n  // MessagePort.\n  // Listen for message sent from the top-level frame\n  mainWindow.webContents.mainFrame.on('request-worker-channel', (event) => {\n    // Create a new channel ...\n    const { port1, port2 } = new MessageChannelMain()\n    // ... send one end to the worker ...\n    worker.webContents.postMessage('new-client', null, [port1])\n    // ... and the other end to the main window.\n    event.senderFrame.postMessage('provide-worker-channel', null, [port2])\n    // Now the main window and the worker can communicate with each other\n    // without going through the main process!\n  })\n})\n```\n```html  title='worker.html'\n\n```\n```html  title='app.html'\n\n```\nReply streams\nElectron's built-in IPC methods only support two modes: fire-and-forget\n(e.g. `send`), or request-response (e.g. `invoke`). Using MessageChannels, you\ncan implement a \"response stream\", where a single request responds with a\nstream of data.\n```js title='renderer.js (Renderer Process)'\nconst makeStreamingRequest = (element, callback) => {\n  // MessageChannels are lightweight--it's cheap to create a new one for each\n  // request.\n  const { port1, port2 } = new MessageChannel()\n// We send one end of the port to the main process ...\n  ipcRenderer.postMessage(\n    'give-me-a-stream',\n    { element, count: 10 },\n    [port2]\n  )\n// ... and we hang on to the other end. The main process will send messages\n  // to its end of the port, and close it when it's finished.\n  port1.onmessage = (event) => {\n    callback(event.data)\n  }\n  port1.onclose = () => {\n    console.log('stream ended')\n  }\n}\nmakeStreamingRequest(42, (data) => {\n  console.log('got response data:', data)\n})\n// We will see \"got response data: 42\" 10 times.\n```\n```js  title='main.js (Main Process)'\nipcMain.on('give-me-a-stream', (event, msg) => {\n  // The renderer has sent us a MessagePort that it wants us to send our\n  // response over.\n  const [replyPort] = event.ports\n// Here we send the messages synchronously, but we could just as easily store\n  // the port somewhere and send messages asynchronously.\n  for (let i = 0; i < msg.count; i++) {\n    replyPort.postMessage(msg.element)\n  }\n// We close the port when we're done to indicate to the other end that we\n  // won't be sending any more messages. This isn't strictly necessary--if we\n  // didn't explicitly close the port, it would eventually be garbage\n  // collected, which would also trigger the 'close' event in the renderer.\n  replyPort.close()\n})\n```\nCommunicating directly between the main process and the main world of a context-isolated page\nWhen context isolation is enabled, IPC messages from the main process to\nthe renderer are delivered to the isolated world, rather than to the main\nworld. Sometimes you want to deliver messages to the main world directly,\nwithout having to step through the isolated world.\n```js title='main.js (Main Process)'\nconst { BrowserWindow, app, MessageChannelMain } = require('electron')\nconst path = require('path')\napp.whenReady().then(async () => {\n  // Create a BrowserWindow with contextIsolation enabled.\n  const bw = new BrowserWindow({\n    webPreferences: {\n      contextIsolation: true,\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n  bw.loadURL('index.html')\n// We'll be sending one end of this channel to the main world of the\n  // context-isolated page.\n  const { port1, port2 } = new MessageChannelMain()\n// It's OK to send a message on the channel before the other end has\n  // registered a listener. Messages will be queued until a listener is\n  // registered.\n  port2.postMessage({ test: 21 })\n// We can also receive messages from the main world of the renderer.\n  port2.on('message', (event) => {\n    console.log('from renderer main world:', event.data)\n  })\n  port2.start()\n// The preload script will receive this IPC message and transfer the port\n  // over to the main world.\n  bw.webContents.postMessage('main-world-port', null, [port1])\n})\n```\n```js title='preload.js (Preload Script)'\nconst { ipcRenderer } = require('electron')\n// We need to wait until the main world is ready to receive the message before\n// sending the port. We create this promise in the preload so it's guaranteed\n// to register the onload listener before the load event is fired.\nconst windowLoaded = new Promise(resolve => {\n  window.onload = resolve\n})\nipcRenderer.on('main-world-port', async (event) => {\n  await windowLoaded\n  // We use regular window.postMessage to transfer the port from the isolated\n  // world to the main world.\n  window.postMessage('main-world-port', '*', event.ports)\n})\n```\n```html title='index.html'\n\n```",
    "tag": "electron"
  },
  {
    "title": "DevTools Extension",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/devtools-extension.md",
    "content": "DevTools Extension\nElectron supports Chrome DevTools extensions, which can\nbe used to extend the ability of Chrome's developer tools for debugging\npopular web frameworks.\nLoading a DevTools extension with tooling\nThe easiest way to load a DevTools extension is to use third-party tooling to automate the\nprocess for you. electron-devtools-installer is a popular\nNPM package that does just that.\nManually loading a DevTools extension\nIf you don't want to use the tooling approach, you can also do all of the necessary\noperations by hand. To load an extension in Electron, you need to download it via Chrome,\nlocate its filesystem path, and then load it into your Session by calling the\nses.loadExtension API.\nUsing the React Developer Tools as an example:\n\nInstall the extension in Google Chrome.\nNavigate to `chrome://extensions`, and find its extension ID, which is a hash\n   string like `fmkadmapgofadopljbjfkapdkoienihi`.\nFind out the filesystem location used by Chrome for storing extensions:\non Windows it is `%LOCALAPPDATA%\\Google\\Chrome\\User Data\\Default\\Extensions`;\non Linux it could be:\n`~/.config/google-chrome/Default/Extensions/`\n`~/.config/google-chrome-beta/Default/Extensions/`\n`~/.config/google-chrome-canary/Default/Extensions/`\n`~/.config/chromium/Default/Extensions/`\n\n\non macOS it is `~/Library/Application Support/Google/Chrome/Default/Extensions`.\nPass the location of the extension to the ses.loadExtension\n   API. For React Developer Tools `v4.9.0`, it looks something like:\n\n```javascript\n    const { app, session } = require('electron')\n    const path = require('path')\n    const os = require('os')\n\n\n```// on macOS\nconst reactDevToolsPath = path.join(\n  os.homedir(),\n  '/Library/Application Support/Google/Chrome/Default/Extensions/fmkadmapgofadopljbjfkapdkoienihi/4.9.0_0'\n)\n\napp.whenReady().then(async () => {\n  await session.defaultSession.loadExtension(reactDevToolsPath)\n})\n```\n\n\n```\nNotes:\n\n`loadExtension` returns a Promise with an Extension object,\nwhich contains metadata about the extension that was loaded. This promise needs to\nresolve (e.g. with an `await` expression) before loading a page. Otherwise, the\nextension won't be guaranteed to load.\n`loadExtension` cannot be called before the `ready` event of the `app` module\nis emitted, nor can it be called on in-memory (non-persistent) sessions.\n`loadExtension` must be called on every boot of your app if you want the\nextension to be loaded.\n\nRemoving a DevTools extension\nYou can pass the extension's ID to the ses.removeExtension API to\nremove it from your Session. Loaded extensions are not persisted between\napp launches.\nDevTools extension support\nElectron only supports\na limited set of chrome.* APIs,\nso extensions using unsupported `chrome.*` APIs under the hood may not work.\nThe following Devtools extensions have been tested to work in Electron:\n\nEmber Inspector\nReact Developer Tools\nBackbone Debugger\njQuery Debugger\nAngularJS Batarang\nVue.js devtools\nCerebral Debugger\nRedux DevTools Extension\nMobX Developer Tools\n\nWhat should I do if a DevTools extension is not working?\nFirst, please make sure the extension is still being maintained and is compatible\nwith the latest version of Google Chrome. We cannot provide additional support for\nunsupported extensions.\nIf the extension works on Chrome but not on Electron, file a bug in Electron's\n[issue tracker][issue-tracker] and describe which part\nof the extension is not working as expected.",
    "tag": "electron"
  },
  {
    "title": "Windows Store Guide",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/windows-store-guide.md",
    "content": "Windows Store Guide\nWith Windows 10, the good old win32 executable got a new sibling: The Universal\nWindows Platform. The new `.appx` format does not only enable a number of new\npowerful APIs like Cortana or Push Notifications, but through the Windows Store,\nalso simplifies installation and updating.\nMicrosoft developed a tool that compiles Electron apps as .appx packages,\nenabling developers to use some of the goodies found in the new application\nmodel. This guide explains how to use it - and what the capabilities and\nlimitations of an Electron AppX package are.\nBackground and Requirements\nWindows 10 \"Anniversary Update\" is able to run win32 `.exe` binaries by\nlaunching them together with a virtualized filesystem and registry. Both are\ncreated during compilation by running app and installer inside a Windows\nContainer, allowing Windows to identify exactly which modifications to the\noperating system are done during installation. Pairing the executable with a\nvirtual filesystem and a virtual registry allows Windows to enable one-click\ninstallation and uninstallation.\nIn addition, the exe is launched inside the appx model - meaning that it can use\nmany of the APIs available to the Universal Windows Platform. To gain even more\ncapabilities, an Electron app can pair up with an invisible UWP background task\nlaunched together with the `exe` - sort of launched as a sidekick to run tasks\nin the background, receive push notifications, or to communicate with other UWP\napplications.\nTo compile any existing Electron app, ensure that you have the following\nrequirements:\n\nWindows 10 with Anniversary Update (released August 2nd, 2016)\nThe Windows 10 SDK, downloadable here\nAt least Node 4 (to check, run `node -v`)\n\nThen, go and install the `electron-windows-store` CLI:\n`sh\nnpm install -g electron-windows-store`\nStep 1: Package Your Electron Application\nPackage the application using electron-packager (or a similar tool).\nMake sure to remove `node_modules` that you don't need in your final application, since\nany module you don't actually need will increase your application's size.\nThe output should look roughly like this:\n`plaintext\n\u251c\u2500\u2500 Ghost.exe\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 content_resources_200_percent.pak\n\u251c\u2500\u2500 content_shell.pak\n\u251c\u2500\u2500 d3dcompiler_47.dll\n\u251c\u2500\u2500 ffmpeg.dll\n\u251c\u2500\u2500 icudtl.dat\n\u251c\u2500\u2500 libEGL.dll\n\u251c\u2500\u2500 libGLESv2.dll\n\u251c\u2500\u2500 locales\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 am.pak\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ar.pak\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 [...]\n\u251c\u2500\u2500 node.dll\n\u251c\u2500\u2500 resources\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 app.asar\n\u251c\u2500\u2500 v8_context_snapshot.bin\n\u251c\u2500\u2500 squirrel.exe\n\u2514\u2500\u2500 ui_resources_200_percent.pak`\nStep 2: Running electron-windows-store\nFrom an elevated PowerShell (run it \"as Administrator\"), run\n`electron-windows-store` with the required parameters, passing both the input\nand output directories, the app's name and version, and confirmation that\n`node_modules` should be flattened.\n`powershell\nelectron-windows-store `\n    --input-directory C:\\myelectronapp `\n    --output-directory C:\\output\\myelectronapp `\n    --package-version 1.0.0.0 `\n    --package-name myelectronapp`\nOnce executed, the tool goes to work: It accepts your Electron app as an input,\nflattening the `node_modules`. Then, it archives your application as `app.zip`.\nUsing an installer and a Windows Container, the tool creates an \"expanded\" AppX\npackage - including the Windows Application Manifest (`AppXManifest.xml`) as\nwell as the virtual file system and the virtual registry inside your output\nfolder.\nOnce the expanded AppX files are created, the tool uses the Windows App Packager\n(`MakeAppx.exe`) to create a single-file AppX package from those files on disk.\nFinally, the tool can be used to create a trusted certificate on your computer\nto sign the new AppX package. With the signed AppX package, the CLI can also\nautomatically install the package on your machine.\nStep 3: Using the AppX Package\nIn order to run your package, your users will need Windows 10 with the so-called\n\"Anniversary Update\" - details on how to update Windows can be found [here][how-to-update].\nIn opposition to traditional UWP apps, packaged apps currently need to undergo a\nmanual verification process, for which you can apply here.\nIn the meantime, all users will be able to install your package by double-clicking it,\nso a submission to the store might not be necessary if you're looking for an\neasier installation method. In managed environments (usually enterprises), the\n`Add-AppxPackage` PowerShell Cmdlet can be used to install it in an automated fashion.\nAnother important limitation is that the compiled AppX package still contains a\nwin32 executable - and will therefore not run on Xbox, HoloLens, or Phones.\nOptional: Add UWP Features using a BackgroundTask\nYou can pair your Electron app up with an invisible UWP background task that\ngets to make full use of Windows 10 features - like push notifications,\nCortana integration, or live tiles.\nTo check out how an Electron app that uses a background task to send toast\nnotifications and live tiles, check out the Microsoft-provided sample.\nOptional: Convert using Container Virtualization\nTo generate the AppX package, the `electron-windows-store` CLI uses a template\nthat should work for most Electron apps. However, if you are using a custom\ninstaller, or should you experience any trouble with the generated package, you\ncan attempt to create a package using compilation with a Windows Container - in\nthat mode, the CLI will install and run your application in blank Windows Container\nto determine what modifications your application is exactly doing to the operating\nsystem.\nBefore running the CLI for the first time, you will have to setup the \"Windows Desktop App\nConverter\". This will take a few minutes, but don't worry - you only have to do\nthis once. Download and Desktop App Converter from here.\nYou will receive two files: `DesktopAppConverter.zip` and `BaseImage-14316.wim`.\n\nUnzip `DesktopAppConverter.zip`. From an elevated PowerShell (opened with\n  \"run as Administrator\", ensure that your systems execution policy allows us to\n  run everything we intend to run by calling `Set-ExecutionPolicy bypass`.\nThen, run the installation of the Desktop App Converter, passing in the\n  location of the Windows base Image (downloaded as `BaseImage-14316.wim`), by\n  calling `.\\DesktopAppConverter.ps1 -Setup -BaseImage .\\BaseImage-14316.wim`.\nIf running the above command prompts you for a reboot, please restart your\n  machine and run the above command again after a successful restart.\n\nOnce installation succeeded, you can move on to compiling your Electron app.",
    "tag": "electron"
  },
  {
    "title": "Security",
    "source": "https://github.com/electron/electron/tree/main/docs/tutorial/security.md",
    "content": "\ntitle: Security\ndescription: A set of guidelines for building secure Electron apps\nslug: security\nhide_title: true\ntoc_max_heading_level: 3\n\nSecurity\n:::info Reporting security issues\nFor information on how to properly disclose an Electron vulnerability,\nsee SECURITY.md.\nFor upstream Chromium vulnerabilities: Electron keeps up to date with alternating\nChromium releases. For more information, see the\nElectron Release Timelines document.\n:::\nPreface\nAs web developers, we usually enjoy the strong security net of the browser \u2014\nthe risks associated with the code we write are relatively small. Our websites\nare granted limited powers in a sandbox, and we trust that our users enjoy a\nbrowser built by a large team of engineers that is able to quickly respond to\nnewly discovered security threats.\nWhen working with Electron, it is important to understand that Electron is not\na web browser. It allows you to build feature-rich desktop applications with\nfamiliar web technologies, but your code wields much greater power. JavaScript\ncan access the filesystem, user shell, and more. This allows you to build\nhigh quality native applications, but the inherent security risks scale with\nthe additional powers granted to your code.\nWith that in mind, be aware that displaying arbitrary content from untrusted\nsources poses a severe security risk that Electron is not intended to handle.\nIn fact, the most popular Electron apps (Atom, Slack, Visual Studio Code, etc)\ndisplay primarily local content (or trusted, secure remote content without Node\nintegration) \u2014 if your application executes code from an online source, it is\nyour responsibility to ensure that the code is not malicious.\nGeneral guidelines\nSecurity is everyone's responsibility\nIt is important to remember that the security of your Electron application is\nthe result of the overall security of the framework foundation\n(Chromium, Node.js), Electron itself, all NPM dependencies and\nyour code. As such, it is your responsibility to follow a few important best\npractices:\n\n\nKeep your application up-to-date with the latest Electron framework release.\nWhen releasing your product, you\u2019re also shipping a bundle composed of Electron,\nChromium shared library and Node.js. Vulnerabilities affecting these components\nmay impact the security of your application. By updating Electron to the latest\nversion, you ensure that critical vulnerabilities (such as nodeIntegration bypasses)\nare already patched and cannot be exploited in your application. For more information,\nsee \"Use a current version of Electron\".\n\n\nEvaluate your dependencies. While NPM provides half a million reusable packages,\nit is your responsibility to choose trusted 3rd-party libraries. If you use outdated\nlibraries affected by known vulnerabilities or rely on poorly maintained code,\nyour application security could be in jeopardy.\n\n\nAdopt secure coding practices. The first line of defense for your application\nis your own code. Common web vulnerabilities, such as Cross-Site Scripting (XSS),\nhave a higher security impact on Electron applications hence it is highly recommended\nto adopt secure software development best practices and perform security testing.\n\n\nIsolation for untrusted content\nA security issue exists whenever you receive code from an untrusted source (e.g.\na remote server) and execute it locally. As an example, consider a remote\nwebsite being displayed inside a default BrowserWindow. If\nan attacker somehow manages to change said content (either by attacking the\nsource directly, or by sitting between your app and the actual destination), they\nwill be able to execute native code on the user's machine.\n:::warning\nUnder no circumstances should you load and execute remote code with\nNode.js integration enabled. Instead, use only local files (packaged together\nwith your application) to execute Node.js code. To display remote content, use\nthe <webview> tag or BrowserView, make sure\nto disable the `nodeIntegration` and enable `contextIsolation`.\n:::\n:::info Electron security warnings\nSecurity warnings and recommendations are printed to the developer console.\nThey only show up when the binary's name is Electron, indicating that a developer\nis currently looking at the console.\nYou can force-enable or force-disable these warnings by setting\n`ELECTRON_ENABLE_SECURITY_WARNINGS` or `ELECTRON_DISABLE_SECURITY_WARNINGS` on\neither `process.env` or the `window` object.\n:::\nChecklist: Security recommendations\nYou should at least follow these steps to improve the security of your application:\n\nOnly load secure content\nDisable the Node.js integration in all renderers that display remote content\nEnable context isolation in all renderers\nEnable process sandboxing\nUse ses.setPermissionRequestHandler() in all sessions that load remote content\nDo not disable webSecurity\nDefine a Content-Security-Policy and use restrictive rules (i.e. `script-src 'self'`)\nDo not enable allowRunningInsecureContent\nDo not enable experimental features\nDo not use enableBlinkFeatures\n<webview>: Do not use allowpopups\n<webview>: Verify options and params\nDisable or limit navigation\nDisable or limit creation of new windows\nDo not use shell.openExternal with untrusted content\nUse a current version of Electron\nValidate the sender of all IPC messages\n\nTo automate the detection of misconfigurations and insecure patterns, it is\npossible to use\nElectronegativity. For\nadditional details on potential weaknesses and implementation bugs when\ndeveloping applications using Electron, please refer to this guide for\ndevelopers and auditors.\n1. Only load secure content\nAny resources not included with your application should be loaded using a\nsecure protocol like `HTTPS`. In other words, do not use insecure protocols\nlike `HTTP`. Similarly, we recommend the use of `WSS` over `WS`, `FTPS` over\n`FTP`, and so on.\nWhy?\n`HTTPS` has two main benefits:\n\nIt ensures data integrity, asserting that the data was not modified while in\n   transit between your application and the host.\nIt encrypts the traffic between your user and the destination host, making it\n   more difficult to eavesdrop on the information sent between your app and\n   the host.\n\nHow?\n```js title='main.js (Main Process)'\n// Bad\nbrowserWindow.loadURL('http://example.com')\n// Good\nbrowserWindow.loadURL('https://example.com')\n```\n```html title='index.html (Renderer Process)'\n\n\n\n\n\n\n```\n2. Do not enable Node.js integration for remote content\n:::info\nThis recommendation is the default behavior in Electron since 5.0.0.\n:::\nIt is paramount that you do not enable Node.js integration in any renderer\n(BrowserWindow, BrowserView, or\n<webview>) that loads remote content. The goal is to limit the\npowers you grant to remote content, thus making it dramatically more difficult\nfor an attacker to harm your users should they gain the ability to execute\nJavaScript on your website.\nAfter this, you can grant additional permissions for specific hosts. For example,\nif you are opening a BrowserWindow pointed at `https://example.com/`, you can\ngive that website exactly the abilities it needs, but no more.\nWhy?\nA cross-site-scripting (XSS) attack is more dangerous if an attacker can jump\nout of the renderer process and execute code on the user's computer.\nCross-site-scripting attacks are fairly common - and while an issue, their\npower is usually limited to messing with the website that they are executed on.\nDisabling Node.js integration helps prevent an XSS from being escalated into a\nso-called \"Remote Code Execution\" (RCE) attack.\nHow?\n```js title='main.js (Main Process)'\n// Bad\nconst mainWindow = new BrowserWindow({\n  webPreferences: {\n    contextIsolation: false,\n    nodeIntegration: true,\n    nodeIntegrationInWorker: true\n  }\n})\nmainWindow.loadURL('https://example.com')\n```\n```js title='main.js (Main Process)'\n// Good\nconst mainWindow = new BrowserWindow({\n  webPreferences: {\n    preload: path.join(app.getAppPath(), 'preload.js')\n  }\n})\nmainWindow.loadURL('https://example.com')\n```\n```html title='index.html (Renderer Process)'\n\n\n\n\n```\nWhen disabling Node.js integration, you can still expose APIs to your website that\ndo consume Node.js modules or features. Preload scripts continue to have access\nto `require` and other Node.js features, allowing developers to expose a custom\nAPI to remotely loaded content via the contextBridge API.\n3. Enable Context Isolation\n:::info\nThis recommendation is the default behavior in Electron since 12.0.0.\n:::\nContext isolation is an Electron feature that allows developers to run code\nin preload scripts and in Electron APIs in a dedicated JavaScript context. In\npractice, that means that global objects like `Array.prototype.push` or\n`JSON.parse` cannot be modified by scripts running in the renderer process.\nElectron uses the same technology as Chromium's Content Scripts\nto enable this behavior.\nEven when `nodeIntegration: false` is used, to truly enforce strong isolation\nand prevent the use of Node primitives `contextIsolation` must also be used.\n:::info\nFor more information on what `contextIsolation` is and how to enable it please\nsee our dedicated Context Isolation document.\n:::info\n4. Enable process sandboxing\nSandboxing\nis a Chromium feature that uses the operating system to\nsignificantly limit what renderer processes have access to. You should enable\nthe sandbox in all renderers. Loading, reading or processing any untrusted\ncontent in an unsandboxed process, including the main process, is not advised.\n:::info\nFor more information on what Process Sandboxing is and how to enable it please\nsee our dedicated Process Sandboxing document.\n:::info\n5. Handle session permission requests from remote content\nYou may have seen permission requests while using Chrome: they pop up whenever\nthe website attempts to use a feature that the user has to manually approve (\nlike notifications).\nThe API is based on the Chromium permissions API\nand implements the same types of permissions.\nWhy?\nBy default, Electron will automatically approve all permission requests unless\nthe developer has manually configured a custom handler. While a solid default,\nsecurity-conscious developers might want to assume the very opposite.\nHow?\n```js title='main.js (Main Process)'\nconst { session } = require('electron')\nconst URL = require('url').URL\nsession\n  .fromPartition('some-partition')\n  .setPermissionRequestHandler((webContents, permission, callback) => {\n    const parsedUrl = new URL(webContents.getURL())\n\n\n```if (permission === 'notifications') {\n  // Approves the permissions request\n  callback(true)\n}\n\n// Verify URL\nif (parsedUrl.protocol !== 'https:' || parsedUrl.host !== 'example.com') {\n  // Denies the permissions request\n  return callback(false)\n}\n```\n\n\n})\n```\n6. Do not disable `webSecurity`\n:::info\nThis recommendation is Electron's default.\n:::\nYou may have already guessed that disabling the `webSecurity` property on a\nrenderer process (BrowserWindow,\nBrowserView, or <webview>) disables crucial\nsecurity features.\nDo not disable `webSecurity` in production applications.\nWhy?\nDisabling `webSecurity` will disable the same-origin policy and set\n`allowRunningInsecureContent` property to `true`. In other words, it allows\nthe execution of insecure code from different domains.\nHow?\n`js title='main.js (Main Process)'\n// Bad\nconst mainWindow = new BrowserWindow({\n  webPreferences: {\n    webSecurity: false\n  }\n})`\n`js title='main.js (Main Process)'\n// Good\nconst mainWindow = new BrowserWindow()`\n```html title='index.html (Renderer Process)'\n\n\n\n\n```\n7. Define a Content Security Policy\nA Content Security Policy (CSP) is an additional layer of protection against\ncross-site-scripting attacks and data injection attacks. We recommend that they\nbe enabled by any website you load inside Electron.\nWhy?\nCSP allows the server serving content to restrict and control the resources\nElectron can load for that given web page. `https://example.com` should\nbe allowed to load scripts from the origins you defined while scripts from\n`https://evil.attacker.com` should not be allowed to run. Defining a CSP is an\neasy way to improve your application's security.\nHow?\nThe following CSP will allow Electron to execute scripts from the current\nwebsite and from `apis.example.com`.\n```plaintext\n// Bad\nContent-Security-Policy: '*'\n// Good\nContent-Security-Policy: script-src 'self' https://apis.example.com\n```\nCSP HTTP headers\nElectron respects the Content-Security-Policy HTTP header\nwhich can be set using Electron's\nwebRequest.onHeadersReceived\nhandler:\n```javascript title='main.js (Main Process)'\nconst { session } = require('electron')\nsession.defaultSession.webRequest.onHeadersReceived((details, callback) => {\n  callback({\n    responseHeaders: {\n      ...details.responseHeaders,\n      'Content-Security-Policy': ['default-src \\'none\\'']\n    }\n  })\n})\n```\nCSP meta tag\nCSP's preferred delivery mechanism is an HTTP header. However, it is not possible\nto use this method when loading a resource using the `file://` protocol. It can\nbe useful in some cases to set a policy on a page directly in the markup using a\n`<meta>` tag:\n`html title='index.html (Renderer Process)'\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'\">`\n8. Do not enable `allowRunningInsecureContent`\n:::info\nThis recommendation is Electron's default.\n:::\nBy default, Electron will not allow websites loaded over `HTTPS` to load and\nexecute scripts, CSS, or plugins from insecure sources (`HTTP`). Setting the\nproperty `allowRunningInsecureContent` to `true` disables that protection.\nLoading the initial HTML of a website over `HTTPS` and attempting to load\nsubsequent resources via `HTTP` is also known as \"mixed content\".\nWhy?\nLoading content over `HTTPS` assures the authenticity and integrity\nof the loaded resources while encrypting the traffic itself. See the section on\nonly displaying secure content for more details.\nHow?\n`js title='main.js (Main Process)'\n// Bad\nconst mainWindow = new BrowserWindow({\n  webPreferences: {\n    allowRunningInsecureContent: true\n  }\n})`\n`js title='main.js (Main Process)'\n// Good\nconst mainWindow = new BrowserWindow({})`\n9. Do not enable experimental features\n:::info\nThis recommendation is Electron's default.\n:::\nAdvanced users of Electron can enable experimental Chromium features using the\n`experimentalFeatures` property.\nWhy?\nExperimental features are, as the name suggests, experimental and have not been\nenabled for all Chromium users. Furthermore, their impact on Electron as a whole\nhas likely not been tested.\nLegitimate use cases exist, but unless you know what you are doing, you should\nnot enable this property.\nHow?\n`js title='main.js (Main Process)'\n// Bad\nconst mainWindow = new BrowserWindow({\n  webPreferences: {\n    experimentalFeatures: true\n  }\n})`\n`js title='main.js (Main Process)'\n// Good\nconst mainWindow = new BrowserWindow({})`\n10. Do not use `enableBlinkFeatures`\n:::info\nThis recommendation is Electron's default.\n:::\nBlink is the name of the rendering engine behind Chromium. As with\n`experimentalFeatures`, the `enableBlinkFeatures` property allows developers to\nenable features that have been disabled by default.\nWhy?\nGenerally speaking, there are likely good reasons if a feature was not enabled\nby default. Legitimate use cases for enabling specific features exist. As a\ndeveloper, you should know exactly why you need to enable a feature, what the\nramifications are, and how it impacts the security of your application. Under\nno circumstances should you enable features speculatively.\nHow?\n`js title='main.js (Main Process)'\n// Bad\nconst mainWindow = new BrowserWindow({\n  webPreferences: {\n    enableBlinkFeatures: 'ExecCommandInJavaScript'\n  }\n})`\n`js title='main.js (Main Process)'\n// Good\nconst mainWindow = new BrowserWindow()`\n11. Do not use `allowpopups` for WebViews\n:::info\nThis recommendation is Electron's default.\n:::\nIf you are using <webview>, you might need the pages and scripts\nloaded in your `<webview>` tag to open new windows. The `allowpopups` attribute\nenables them to create new BrowserWindows using the\n`window.open()` method. `<webview>` tags are otherwise not allowed to create new\nwindows.\nWhy?\nIf you do not need popups, you are better off not allowing the creation of\nnew BrowserWindows by default. This follows the principle\nof minimally required access: Don't let a website create new popups unless\nyou know it needs that feature.\nHow?\n```html title='index.html (Renderer Process)'\n\n\n\n\n```\n12. Verify WebView options before creation\nA WebView created in a renderer process that does not have Node.js integration\nenabled will not be able to enable integration itself. However, a WebView will\nalways create an independent renderer process with its own `webPreferences`.\nIt is a good idea to control the creation of new <webview> tags\nfrom the main process and to verify that their webPreferences do not disable\nsecurity features.\nWhy?\nSince `<webview>` live in the DOM, they can be created by a script running on your\nwebsite even if Node.js integration is otherwise disabled.\nElectron enables developers to disable various security features that control\na renderer process. In most cases, developers do not need to disable any of\nthose features - and you should therefore not allow different configurations\nfor newly created <webview> tags.\nHow?\nBefore a <webview> tag is attached, Electron will fire the\n`will-attach-webview` event on the hosting `webContents`. Use the event to\nprevent the creation of `webViews` with possibly insecure options.\n```js title='main.js (Main Process)'\napp.on('web-contents-created', (event, contents) => {\n  contents.on('will-attach-webview', (event, webPreferences, params) => {\n    // Strip away preload scripts if unused or verify their location is legitimate\n    delete webPreferences.preload\n\n\n```// Disable Node.js integration\nwebPreferences.nodeIntegration = false\n\n// Verify URL being loaded\nif (!params.src.startsWith('https://example.com/')) {\n  event.preventDefault()\n}\n```\n\n\n})\n})\n```\nAgain, this list merely minimizes the risk, but does not remove it. If your goal\nis to display a website, a browser will be a more secure option.\n13. Disable or limit navigation\nIf your app has no need to navigate or only needs to navigate to known pages,\nit is a good idea to limit navigation outright to that known scope, disallowing\nany other kinds of navigation.\nWhy?\nNavigation is a common attack vector. If an attacker can convince your app to\nnavigate away from its current page, they can possibly force your app to open\nweb sites on the Internet. Even if your `webContents` are configured to be more\nsecure (like having `nodeIntegration` disabled or `contextIsolation` enabled),\ngetting your app to open a random web site will make the work of exploiting your\napp a lot easier.\nA common attack pattern is that the attacker convinces your app's users to\ninteract with the app in such a way that it navigates to one of the attacker's\npages. This is usually done via links, plugins, or other user-generated content.\nHow?\nIf your app has no need for navigation, you can call `event.preventDefault()`\nin a will-navigate handler. If you know which pages your app\nmight navigate to, check the URL in the event handler and only let navigation\noccur if it matches the URLs you're expecting.\nWe recommend that you use Node's parser for URLs. Simple string comparisons can\nsometimes be fooled - a `startsWith('https://example.com')` test would let\n`https://example.com.attacker.com` through.\n```js title='main.js (Main Process)'\nconst URL = require('url').URL\napp.on('web-contents-created', (event, contents) => {\n  contents.on('will-navigate', (event, navigationUrl) => {\n    const parsedUrl = new URL(navigationUrl)\n\n\n```if (parsedUrl.origin !== 'https://example.com') {\n  event.preventDefault()\n}\n```\n\n\n})\n})\n```\n14. Disable or limit creation of new windows\nIf you have a known set of windows, it's a good idea to limit the creation of\nadditional windows in your app.\nWhy?\nMuch like navigation, the creation of new `webContents` is a common attack\nvector. Attackers attempt to convince your app to create new windows, frames,\nor other renderer processes with more privileges than they had before; or\nwith pages opened that they couldn't open before.\nIf you have no need to create windows in addition to the ones you know you'll\nneed to create, disabling the creation buys you a little bit of extra\nsecurity at no cost. This is commonly the case for apps that open one\n`BrowserWindow` and do not need to open an arbitrary number of additional\nwindows at runtime.\nHow?\nwebContents will delegate to its window open\nhandler before creating new windows. The handler will\nreceive, amongst other parameters, the `url` the window was requested to open\nand the options used to create it. We recommend that you register a handler to\nmonitor the creation of windows, and deny any unexpected window creation.\n```js title='main.js (Main Process)'\nconst { shell } = require('electron')\napp.on('web-contents-created', (event, contents) => {\n  contents.setWindowOpenHandler(({ url }) => {\n    // In this example, we'll ask the operating system\n    // to open this event's url in the default browser.\n    //\n    // See the following item for considerations regarding what\n    // URLs should be allowed through to shell.openExternal.\n    if (isSafeForExternalOpen(url)) {\n      setImmediate(() => {\n        shell.openExternal(url)\n      })\n    }\n\n\n```return { action: 'deny' }\n```\n\n\n})\n})\n```\n15. Do not use `shell.openExternal` with untrusted content\nThe shell module's openExternal API allows opening a given\nprotocol URI with the desktop's native utilities. On macOS, for instance, this\nfunction is similar to the `open` terminal command utility and will open the\nspecific application based on the URI and filetype association.\nWhy?\nImproper use of openExternal can be leveraged to compromise\nthe user's host. When openExternal is used with untrusted content, it can be\nleveraged to execute arbitrary commands.\nHow?\n`js title='main.js (Main Process)'\n//  Bad\nconst { shell } = require('electron')\nshell.openExternal(USER_CONTROLLED_DATA_HERE)`\n`js title='main.js (Main Process)'\n//  Good\nconst { shell } = require('electron')\nshell.openExternal('https://example.com/index.html')`\n16. Use a current version of Electron\nYou should strive for always using the latest available version of Electron.\nWhenever a new major version is released, you should attempt to update your\napp as quickly as possible.\nWhy?\nAn application built with an older version of Electron, Chromium, and Node.js\nis an easier target than an application that is using more recent versions of\nthose components. Generally speaking, security issues and exploits for older\nversions of Chromium and Node.js are more widely available.\nBoth Chromium and Node.js are impressive feats of engineering built by\nthousands of talented developers. Given their popularity, their security is\ncarefully tested and analyzed by equally skilled security researchers. Many of\nthose researchers [disclose vulnerabilities responsibly][responsible-disclosure],\nwhich generally means that researchers will give Chromium and Node.js some time\nto fix issues before publishing them. Your application will be more secure if\nit is running a recent version of Electron (and thus, Chromium and Node.js) for\nwhich potential security issues are not as widely known.\nHow?\nMigrate your app one major version at a time, while referring to Electron's\nBreaking Changes document to see if any code needs to\nbe updated.\n17. Validate the `sender` of all IPC messages\nYou should always validate incoming IPC messages `sender` property to ensure you\naren't performing actions or sending information to untrusted renderers.\nWhy?\nAll Web Frames can in theory send IPC messages to the main process, including\niframes and child windows in some scenarios.  If you have an IPC message that returns\nuser data to the sender via `event.reply` or performs privileged actions that the renderer\ncan't natively, you should ensure you aren't listening to third party web frames.\nYou should be validating the `sender` of all IPC messages by default.\nHow?\n```js title='main.js (Main Process)'\n// Bad\nipcMain.handle('get-secrets', () => {\n  return getSecrets();\n});\n// Good\nipcMain.handle('get-secrets', (e) => {\n  if (!validateSender(e.senderFrame)) return null;\n  return getSecrets();\n});\nfunction validateSender(frame) {\n  // Value the host of the URL using an actual URL parser and an allowlist\n  if ((new URL(frame.url)).host === 'electronjs.org') return true;\n  return false;\n}\n```",
    "tag": "electron"
  },
  {
    "title": "Setting Up Symbol Server in Debugger",
    "source": "https://github.com/electron/electron/tree/main/docs/development/debugging-with-symbol-server.md",
    "content": "Setting Up Symbol Server in Debugger\nDebug symbols allow you to have better debugging sessions. They have information\nabout the functions contained in executables and dynamic libraries and provide\nyou with information to get clean call stacks. A Symbol Server allows the\ndebugger to load the correct symbols, binaries and sources automatically without\nforcing users to download large debugging files. The server functions like\nMicrosoft's symbol server so the\ndocumentation there can be useful.\nNote that because released Electron builds are heavily optimized, debugging is\nnot always easy. The debugger will not be able to show you the content of all\nvariables and the execution path can seem strange because of inlining, tail\ncalls, and other compiler optimizations. The only workaround is to build an\nunoptimized local build.\nThe official symbol server URL for Electron is\nhttps://symbols.electronjs.org.\nYou cannot visit this URL directly, you must add it to the symbol path of your\ndebugging tool. In the examples below, a local cache directory is used to avoid\nrepeatedly fetching the PDB from the server. Replace `c:\\code\\symbols` with an\nappropriate cache directory on your machine.\nUsing the Symbol Server in Windbg\nThe Windbg symbol path is configured with a string value delimited with asterisk\ncharacters. To use only the Electron symbol server, add the following entry to\nyour symbol path (Note: you can replace `c:\\code\\symbols` with any writable\ndirectory on your computer, if you'd prefer a different location for downloaded\nsymbols):\n`powershell\nSRV*c:\\code\\symbols\\*https://symbols.electronjs.org`\nSet this string as `_NT_SYMBOL_PATH` in the environment, using the Windbg menus,\nor by typing the `.sympath` command. If you would like to get symbols from\nMicrosoft's symbol server as well, you should list that first:\n`powershell\nSRV*c:\\code\\symbols\\*https://msdl.microsoft.com/download/symbols;SRV*c:\\code\\symbols\\*https://symbols.electronjs.org`\nUsing the symbol server in Visual Studio\n\n\nTroubleshooting: Symbols will not load\nType the following commands in Windbg to print why symbols are not loading:\n```powershell\n\n!sym noisy\n.reload /f electron.exe\n",
    "tag": "electron"
  },
  {
    "title": "Debugging on Windows",
    "source": "https://github.com/electron/electron/tree/main/docs/development/debugging-on-windows.md",
    "content": "Debugging on Windows\nIf you experience crashes or issues in Electron that you believe are not caused\nby your JavaScript application, but instead by Electron itself, debugging can\nbe a little bit tricky, especially for developers not used to native/C++\ndebugging. However, using Visual Studio, Electron's hosted Symbol Server,\nand the Electron source code, you can enable step-through debugging\nwith breakpoints inside Electron's source code.\nSee also: There's a wealth of information on debugging Chromium, much of which also applies to Electron, on the Chromium developers site: Debugging Chromium on Windows.\nRequirements\n\n\nA debug build of Electron: The easiest way is usually building it\n  yourself, using the tools and prerequisites listed in the\n  build instructions for Windows. While you can\n  attach to and debug Electron as you can download it directly, you will\n  find that it is heavily optimized, making debugging substantially more\n  difficult: The debugger will not be able to show you the content of all\n  variables and the execution path can seem strange because of inlining,\n  tail calls, and other compiler optimizations.\n\n\nVisual Studio with C++ Tools: The free community editions of Visual\n  Studio 2013 and Visual Studio 2015 both work. Once installed,\n  configure Visual Studio to use Electron's Symbol server.\n  It will enable Visual Studio to gain a better understanding of what happens\n  inside Electron, making it easier to present variables in a human-readable\n  format.\n\n\nProcMon: The free SysInternals tool allows you to inspect\n  a processes parameters, file handles, and registry operations.\n\n\nAttaching to and Debugging Electron\nTo start a debugging session, open up PowerShell/CMD and execute your debug\nbuild of Electron, using the application to open as a parameter.\n`powershell\n$ ./out/Testing/electron.exe ~/my-electron-app/`\nSetting Breakpoints\nThen, open up Visual Studio. Electron is not built with Visual Studio and hence\ndoes not contain a project file - you can however open up the source code files\n\"As File\", meaning that Visual Studio will open them up by themselves. You can\nstill set breakpoints - Visual Studio will automatically figure out that the\nsource code matches the code running in the attached process and break\naccordingly.\nRelevant code files can be found in `./shell/`.\nAttaching\nYou can attach the Visual Studio debugger to a running process on a local or\nremote computer. After the process is running, click Debug / Attach to Process\n(or press `CTRL+ALT+P`) to open the \"Attach to Process\" dialog box. You can use\nthis capability to debug apps that are running on a local or remote computer,\ndebug multiple processes simultaneously.\nIf Electron is running under a different user account, select the\n`Show processes from all users` check box. Notice that depending on how many\nBrowserWindows your app opened, you will see multiple processes. A typical\none-window app will result in Visual Studio presenting you with two\n`Electron.exe` entries - one for the main process and one for the renderer\nprocess. Since the list only gives you names, there's currently no reliable\nway of figuring out which is which.\nWhich Process Should I Attach to?\nCode executed within the main process (that is, code found in or eventually run\nby your main JavaScript file) will run inside the main process, while other\ncode will execute inside its respective renderer process.\nYou can be attached to multiple programs when you are debugging, but only one\nprogram is active in the debugger at any time. You can set the active program\nin the `Debug Location` toolbar or the `Processes window`.\nUsing ProcMon to Observe a Process\nWhile Visual Studio is fantastic for inspecting specific code paths, ProcMon's\nstrength is really in observing everything your application is doing with the\noperating system - it captures File, Registry, Network, Process, and Profiling\ndetails of processes. It attempts to log all events occurring and can be\nquite overwhelming, but if you seek to understand what and how your application\nis doing to the operating system, it can be a valuable resource.\nFor an introduction to ProcMon's basic and advanced debugging features, go check\nout this video tutorial provided by Microsoft.\nUsing WinDbg\n\nIt's possible to debug crashes and issues in the Renderer process with WinDbg.\nTo attach to a debug a process with WinDbg:\n\nAdd `--renderer-startup-dialog` as a command line flag to Electron.\nLaunch the app you are intending to debug.\nA dialog box will appear with a pid: \u201cRenderer starting with pid: 1234\u201d.\nLaunch WinDbg and choose \u201cFile > Attach to process\u201d in the application menu.\nEnter in pid from the dialog box in Step 3.\nSee that the debugger will be in a paused state, and that there is a command line in the app to enter text into.\nType \u201cg\u201d into the above command line to start the debuggee.\nPress the enter key to continue the program.\n",
    "tag": "electron"
  },
  {
    "title": "Build Instructions (Linux)",
    "source": "https://github.com/electron/electron/tree/main/docs/development/build-instructions-linux.md",
    "content": "Build Instructions (Linux)\nFollow the guidelines below for building Electron itself on Linux, for the purposes of creating custom Electron binaries. For bundling and distributing your app code with the prebuilt Electron binaries, see the application distribution guide.\nPrerequisites\n\nAt least 25GB disk space and 8GB RAM.\nPython >= 3.7.\nNode.js. There are various ways to install Node. You can download\n  source code from nodejs.org and compile it.\n  Doing so permits installing Node on your own home directory as a standard user.\n  Or try repositories such as NodeSource.\nclang 3.4 or later.\nDevelopment headers of GTK 3 and libnotify.\n\nOn Ubuntu >= 20.04, install the following libraries:\n`sh\n$ sudo apt-get install build-essential clang libdbus-1-dev libgtk-3-dev \\\n                       libnotify-dev libasound2-dev libcap-dev \\\n                       libcups2-dev libxtst-dev \\\n                       libxss1 libnss3-dev gcc-multilib g++-multilib curl \\\n                       gperf bison python3-dbusmock openjdk-8-jre`\nOn Ubuntu < 20.04, install the following libraries:\n`sh\n$ sudo apt-get install build-essential clang libdbus-1-dev libgtk-3-dev \\\n                       libnotify-dev libgnome-keyring-dev \\\n                       libasound2-dev libcap-dev libcups2-dev libxtst-dev \\\n                       libxss1 libnss3-dev gcc-multilib g++-multilib curl \\\n                       gperf bison python-dbusmock openjdk-8-jre`\nOn RHEL / CentOS, install the following libraries:\n`sh\n$ sudo yum install clang dbus-devel gtk3-devel libnotify-devel \\\n                   libgnome-keyring-devel xorg-x11-server-utils libcap-devel \\\n                   cups-devel libXtst-devel alsa-lib-devel libXrandr-devel \\\n                   nss-devel python-dbusmock openjdk-8-jre`\nOn Fedora, install the following libraries:\n`sh\n$ sudo dnf install clang dbus-devel gperf gtk3-devel \\\n                   libnotify-devel libgnome-keyring-devel libcap-devel \\\n                   cups-devel libXtst-devel alsa-lib-devel libXrandr-devel \\\n                   nss-devel python-dbusmock`\nOn Arch Linux / Manjaro, install the following libraries:\n`sh\n$ sudo pacman -Syu base-devel clang libdbus gtk2 libnotify \\\n                   libgnome-keyring alsa-lib libcap libcups libxtst \\\n                   libxss nss gcc-multilib curl gperf bison \\\n                   python2 python-dbusmock jdk8-openjdk`\nOther distributions may offer similar packages for installation via package\nmanagers such as pacman. Or one can compile from source code.\nCross compilation\nIf you want to build for an `arm` target you should also install the following\ndependencies:\n`sh\n$ sudo apt-get install libc6-dev-armhf-cross linux-libc-dev-armhf-cross \\\n                       g++-arm-linux-gnueabihf`\nSimilarly for `arm64`, install the following:\n`sh\n$ sudo apt-get install libc6-dev-arm64-cross linux-libc-dev-arm64-cross \\\n                       g++-aarch64-linux-gnu`\nAnd to cross-compile for `arm` or targets, you should pass the\n`target_cpu` parameter to `gn gen`:\n`sh\n$ gn gen out/Testing --args='import(...) target_cpu=\"arm\"'`\nBuilding\nSee Build Instructions: GN\nTroubleshooting\nError While Loading Shared Libraries: libtinfo.so.5\nPrebuilt `clang` will try to link to `libtinfo.so.5`. Depending on the host\narchitecture, symlink to appropriate `libncurses`:\n`sh\n$ sudo ln -s /usr/lib/libncurses.so.5 /usr/lib/libtinfo.so.5`\nAdvanced topics\nThe default building configuration is targeted for major desktop Linux\ndistributions. To build for a specific distribution or device, the following\ninformation may help you.\nUsing system `clang` instead of downloaded `clang` binaries\nBy default Electron is built with prebuilt\nclang binaries provided by the\nChromium project. If for some reason you want to build with the `clang`\ninstalled in your system, you can specify the `clang_base_path` argument in the\nGN args.\nFor example if you installed `clang` under `/usr/local/bin/clang`:\n`sh\n$ gn gen out/Testing --args='import(\"//electron/build/args/testing.gn\") clang_base_path = \"/usr/local/bin\"'`\nUsing compilers other than `clang`",
    "tag": "electron"
  },
  {
    "title": "Build Instructions (Windows)",
    "source": "https://github.com/electron/electron/tree/main/docs/development/build-instructions-windows.md",
    "content": "Build Instructions (Windows)\nFollow the guidelines below for building Electron itself on Windows, for the purposes of creating custom Electron binaries. For bundling and distributing your app code with the prebuilt Electron binaries, see the application distribution guide.\nPrerequisites\n\nWindows 10 / Server 2012 R2 or higher\nVisual Studio 2019 (>=16.0.0) to build, but Visual Studio 2022 (>=17.0.0) is preferred - download VS 2022 Community Edition for free\nSee the Chromium build documentation for more details on which Visual Studio\n  components are required.\nIf your Visual Studio is installed in a directory other than the default, you'll need to\n  set a few environment variables to point the toolchains to your installation path.\n`vs2022_install = DRIVE:\\path\\to\\Microsoft Visual Studio\\2022\\Community`, replacing `2022` and `Community` with your installed versions and replacing `DRIVE:` with the drive that Visual Studio is on. Often, this will be `C:`.\n`WINDOWSSDKDIR = DRIVE:\\path\\to\\Windows Kits\\10`, replacing `DRIVE:` with the drive that Windows Kits is on. Often, this will be `C:`.\n\n\nNode.js\nGit\nDebugging Tools for Windows of Windows SDK 10.0.15063.468 if you plan on\ncreating a full distribution since `symstore.exe` is used for creating a symbol\nstore from `.pdb` files.\nDifferent versions of the SDK can be installed side by side. To install the\n  SDK, open Visual Studio Installer, select\n  `Modify` \u2192 `Individual Components`, scroll down and select the appropriate\n  Windows SDK to install. Another option would be to look at the\n  Windows SDK and emulator archive\n  and download the standalone version of the SDK respectively.\nThe SDK Debugging Tools must also be installed. If the Windows 10 SDK was installed\n  via the Visual Studio installer, then they can be installed by going to:\n  `Control Panel` \u2192 `Programs` \u2192 `Programs and Features` \u2192 Select the \"Windows Software Development Kit\" \u2192\n  `Change` \u2192 `Change` \u2192 Check \"Debugging Tools For Windows\" \u2192 `Change`.\n  Or, you can download the standalone SDK installer and use it to install the Debugging Tools.\n\nIf you don't currently have a Windows installation,\ndev.microsoftedge.com\nhas timebombed versions of Windows that you can use to build Electron.\nBuilding Electron is done entirely with command-line scripts and cannot be done\nwith Visual Studio. You can develop Electron with any editor but support for\nbuilding with Visual Studio will come in the future.\nNote: Even though Visual Studio is not used for building, it's still\nrequired because we need the build toolchains it provides.\nExclude source tree from Windows Security\nWindows Security doesn't like one of the files in the Chromium source code\n(see https://crbug.com/441184), so it will constantly delete it, causing `gclient sync` issues.\nYou can exclude the source tree from being monitored by Windows Security by\nfollowing these instructions.\nBuilding\nSee Build Instructions: GN\n32bit Build\nTo build for the 32bit target, you need to pass `target_cpu = \"x86\"` as a GN\narg. You can build the 32bit target alongside the 64bit target by using a\ndifferent output directory for GN, e.g. `out/Release-x86`, with different\narguments.\n`powershell\n$ gn gen out/Release-x86 --args=\"import(\\\"//electron/build/args/release.gn\\\") target_cpu=\\\"x86\\\"\"`\nThe other building steps are exactly the same.\nVisual Studio project\nTo generate a Visual Studio project, you can pass the `--ide=vs2017` parameter\nto `gn gen`:\n`powershell\n$ gn gen out/Testing --ide=vs2017`\nTroubleshooting\nCommand xxxx not found\nIf you encountered an error like `Command xxxx not found`, you may try to use\nthe `VS2015 Command Prompt` console to execute the build scripts.\nFatal internal compiler error: C1001\nMake sure you have the latest Visual Studio update installed.\nLNK1181: cannot open input file 'kernel32.lib'\nTry reinstalling 32bit Node.js.\nError: ENOENT, stat 'C:\\Users\\USERNAME\\AppData\\Roaming\\npm'\nCreating that directory should fix the problem:\n`powershell\n$ mkdir ~\\AppData\\Roaming\\npm`\nnode-gyp is not recognized as an internal or external command\nYou may get this error if you are using Git Bash for building, you should use\nPowerShell or VS2015 Command Prompt instead.\ncannot create directory at '...': Filename too long\nnode.js has some extremely long pathnames, and by default git on windows doesn't handle long pathnames correctly (even though windows supports them). This should fix it:\n`sh\n$ git config --system core.longpaths true`\nerror: use of undeclared identifier 'DefaultDelegateCheckMode'\nThis can happen during build, when Debugging Tools for Windows has been installed with Windows Driver Kit. Uninstall Windows Driver Kit and install Debugging Tools with steps described above.\nBuild Scripts Hang Until Keypress\nThis bug is a \"feature\" of Windows' command prompt. It happens when clicking inside the prompt window with\n`QuickEdit` enabled and is intended to allow selecting and copying output text easily.\nSince each accidental click will pause the build process, you might want to disable this",
    "tag": "electron"
  },
  {
    "title": "Goma",
    "source": "https://github.com/electron/electron/tree/main/docs/development/goma.md",
    "content": "Goma\n\nGoma is a distributed compiler service for open-source projects such as\nChromium and Android.\n\nElectron has a deployment of a custom Goma Backend that we make available to\nall Electron Maintainers.  See the Access section below for details\non authentication.  There is also a `cache-only` Goma endpoint that will be\nused by default if you do not have credentials.  Requests to the cache-only\nGoma will not hit our cluster, but will read from our cache and should result\nin significantly faster build times.\nEnabling Goma\nCurrently the only supported way to use Goma is to use our Build Tools.\nGoma configuration is automatically included when you set up `build-tools`.\nIf you are a maintainer and have access to our cluster, please ensure that you run\n`e init` with `--goma=cluster` in order to configure `build-tools` to use\nthe Goma cluster.  If you have an existing config, you can just set `\"goma\": \"cluster\"`\nin your config file.\nBuilding with Goma\nWhen you are using Goma you can run `ninja` with a substantially higher `j`\nvalue than would normally be supported by your machine.\nPlease do not set a value higher than 200. We monitor Goma system usage, and users\nfound to be abusing it with unreasonable concurrency will be de-activated.\n`bash\nninja -C out/Testing electron -j 200`\nIf you're using `build-tools`, appropriate `-j` values will automatically be used for you.\nMonitoring Goma\nIf you access http://localhost:8088 on your local\nmachine you can monitor compile jobs as they flow through the goma system.\nAccess\nFor security and cost reasons, access to Electron's Goma cluster is currently restricted\nto Electron Maintainers.  If you want access please head to `#access-requests` in\nSlack and ping `@goma-squad` to ask for access.  Please be aware that being a\nmaintainer does not automatically grant access and access is determined on a\ncase by case basis.\nUptime / Support\nWe have automated monitoring of our Goma cluster and cache at https://status.notgoma.com\nWe do not provide support for usage of Goma and any issues raised asking for help / having\nissues will probably be closed without much reason, we do not have the capacity to handle",
    "tag": "electron"
  },
  {
    "title": "Coding Style",
    "source": "https://github.com/electron/electron/tree/main/docs/development/coding-style.md",
    "content": "Coding Style\nThese are the style guidelines for coding in Electron.\nYou can run `npm run lint` to show any style issues detected by `cpplint` and\n`eslint`.\nGeneral Code\n\nEnd files with a newline.\nPlace requires in the following order:\nBuilt in Node Modules (such as `path`)\nBuilt in Electron Modules (such as `ipc`, `app`)\nLocal Modules (using relative paths)\nPlace class properties in the following order:\nClass methods and properties (methods starting with a `@`)\nInstance methods and properties\nAvoid platform-dependent code:\nUse `path.join()` to concatenate filenames.\nUse `os.tmpdir()` rather than `/tmp` when you need to reference the\n    temporary directory.\nUsing a plain `return` when returning explicitly at the end of a function.\nNot `return null`, `return undefined`, `null` or `undefined`\n\nC++ and Python\nFor C++ and Python, we follow Chromium's Coding\nStyle.\nThere is also a script `script/cpplint.py` to check whether all files conform.\nThe Python version we are using now is Python 3.9.\nThe C++ code uses a lot of Chromium's abstractions and types, so it's\nrecommended to get acquainted with them. A good place to start is\nChromium's Important Abstractions and Data Structures\ndocument. The document mentions some special types, scoped types (that\nautomatically release their memory when going out of scope), logging mechanisms\netc.\nDocumentation\n\nWrite remark markdown style.\n\nYou can run `npm run lint-docs` to ensure that your documentation changes are\nformatted correctly.\nJavaScript\n\nWrite standard JavaScript style.\nFile names should be concatenated with `-` instead of `_`, e.g.\n  `file-name.js` rather than `file_name.js`, because in\n  github/atom module names are usually in\n  the `module-name` form. This rule only applies to `.js` files.\nUse newer ES6/ES2015 syntax where appropriate\nconst\n    for requires and other constants.  If the value is a primitive, use uppercase naming (eg `const NUMBER_OF_RETRIES = 5`).\nlet\n    for defining variables\nArrow functions\n    instead of `function () { }`\nTemplate literals\n    instead of string concatenation using `+`\n\nNaming Things\nElectron APIs uses the same capitalization scheme as Node.js:\n\nWhen the module itself is a class like `BrowserWindow`, use `PascalCase`.\nWhen the module is a set of APIs, like `globalShortcut`, use `camelCase`.\nWhen the API is a property of object, and it is complex enough to be in a\n  separate chapter like `win.webContents`, use `mixedCase`.\nFor other non-module APIs, use natural titles, like `<webview> Tag` or\n  `Process Object`.\n\nWhen creating a new API, it is preferred to use getters and setters instead of\njQuery's one-function style. For example, `.getText()` and `.setText(text)`\nare preferred to `.text([text])`. There is a",
    "tag": "electron"
  },
  {
    "title": "Patches in Electron",
    "source": "https://github.com/electron/electron/tree/main/docs/development/patches.md",
    "content": "Patches in Electron\nElectron is built on two major upstream projects: Chromium and Node.js. Each of these projects has several of their own dependencies, too. We try our best to use these dependencies exactly as they are but sometimes we can't achieve our goals without patching those upstream dependencies to fit our use cases.\nPatch justification\nEvery patch in Electron is a maintenance burden. When upstream code changes, patches can break\u2014sometimes without even a patch conflict or a compilation error. It's an ongoing effort to keep our patch set up-to-date and effective. So we strive to keep our patch count at a minimum. To that end, every patch must describe its reason for existence in its commit message. That reason must be one of the following:\n\nThe patch is temporary, and is intended to be (or has been) committed upstream or otherwise eventually removed. Include a link to an upstream PR or code review if available, or a procedure for verifying whether the patch is still needed at a later date.\nThe patch allows the code to compile in the Electron environment, but cannot be upstreamed because it's Electron-specific (e.g. patching out references to Chrome's `Profile`). Include reasoning about why the change cannot be implemented without a patch (e.g. by subclassing or copying the code).\nThe patch makes Electron-specific changes in functionality which are fundamentally incompatible with upstream.\n\nIn general, all the upstream projects we work with are friendly folks and are often happy to accept refactorings that allow the code in question to be compatible with both Electron and the upstream project. (See e.g. this change in Chromium, which allowed us to remove a patch that did the same thing, or this change in Node, which was a no-op for Node but fixed a bug in Electron.) We should aim to upstream changes whenever we can, and avoid indefinite-lifetime patches.\nPatch system\nIf you find yourself in the unfortunate position of having to make a change which can only be made through patching an upstream project, you'll need to know how to manage patches in Electron.\nAll patches to upstream projects in Electron are contained in the `patches/` directory. Each subdirectory of `patches/` contains several patch files, along with a `.patches` file which lists the order in which the patches should be applied. Think of these files as making up a series of git commits that are applied on top of the upstream project after we check it out.\n`text\npatches\n\u251c\u2500\u2500 config.json   <-- this describes which patchset directory is applied to what project\n\u251c\u2500\u2500 chromium\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 .patches\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 accelerator.patch\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 add_contentgpuclient_precreatemessageloop_callback.patch\n\u2502   \u22ee\n\u251c\u2500\u2500 node\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 .patches\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 add_openssl_is_boringssl_guard_to_oaep_hash_check.patch\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 build_add_gn_build_files.patch\n\u2502\u00a0\u00a0 \u22ee\n\u22ee`\nTo help manage these patch sets, we provide two tools: `git-import-patches` and `git-export-patches`. `git-import-patches` imports a set of patch files into a git repository by applying each patch in the correct order and creating a commit for each one. `git-export-patches` does the reverse; it exports a series of git commits in a repository into a set of files in a directory and an accompanying `.patches` file.\n\nSide note: the reason we use a `.patches` file to maintain the order of applied patches, rather than prepending a number like `001-` to each file, is because it reduces conflicts related to patch ordering. It prevents the situation where two PRs both add a patch at the end of the series with the same numbering and end up both getting merged resulting in a duplicate identifier, and it also reduces churn when a patch is added or deleted in the middle of the series.\n\nUsage\nAdding a new patch\n`bash\n$ cd src/third_party/electron_node\n$ vim some/code/file.cc\n$ git commit\n$ ../../electron/script/git-export-patches -o ../../electron/patches/node`\n\nNOTE: `git-export-patches` ignores any uncommitted files, so you must create a commit if you want your changes to be exported. The subject line of the commit message will be used to derive the patch file name, and the body of the commit message should include the reason for the patch's existence.\n\nRe-exporting patches will sometimes cause shasums in unrelated patches to change. This is generally harmless and can be ignored (but go ahead and add those changes to your PR, it'll stop them from showing up for other people).\nEditing an existing patch\n```bash\n$ cd src/v8\n$ vim some/code/file.cc\n$ git log\nFind the commit sha of the patch you want to edit.\n$ git commit --fixup [COMMIT_SHA]\n$ git rebase --autosquash -i [COMMIT_SHA]^\n$ ../electron/script/git-export-patches -o ../electron/patches/v8\n```\nRemoving a patch\n```bash\n$ vim src/electron/patches/node/.patches\nDelete the line with the name of the patch you want to remove\n$ cd src/third_party/electron_node\n$ git reset --hard refs/patches/upstream-head\n$ ../../electron/script/git-import-patches ../../electron/patches/node\n$ ../../electron/script/git-export-patches -o ../../electron/patches/node\n```\nNote that `git-import-patches` will mark the commit that was `HEAD` when it was run as `refs/patches/upstream-head`. This lets you keep track of which commits are from Electron patches (those that come after `refs/patches/upstream-head`) and which commits are in upstream (those before `refs/patches/upstream-head`).\nResolving conflicts\nWhen updating an upstream dependency, patches may fail to apply cleanly. Often, the conflict can be resolved automatically by git with a 3-way merge. You can instruct `git-import-patches` to use the 3-way merge algorithm by passing the `-3` argument:\n```bash\n$ cd src/third_party/electron_node\nIf the patch application failed midway through, you can reset it with:\n$ git am --abort\nAnd then retry with 3-way merge:\n$ ../../electron/script/git-import-patches -3 ../../electron/patches/node\n```",
    "tag": "electron"
  },
  {
    "title": "Debugging on macOS",
    "source": "https://github.com/electron/electron/tree/main/docs/development/debugging-on-macos.md",
    "content": "Debugging on macOS\nIf you experience crashes or issues in Electron that you believe are not caused\nby your JavaScript application, but instead by Electron itself, debugging can\nbe a little bit tricky especially for developers not used to native/C++\ndebugging. However, using `lldb` and the Electron source code, you can enable\nstep-through debugging with breakpoints inside Electron's source code.\nYou can also use XCode for debugging if you prefer a graphical interface.\nRequirements\n\n\nA testing build of Electron: The easiest way is usually to build it from source,\n  which you can do by following the instructions in the build instructions. While you can attach to and debug Electron as you can download it directly, you will\n  find that it is heavily optimized, making debugging substantially more difficult.\n  In this case the debugger will not be able to show you the content of all\n  variables and the execution path can seem strange because of inlining,\n  tail calls, and other compiler optimizations.\n\n\nXcode: In addition to Xcode, you should also install the Xcode command line tools.\n  They include LLDB, the default debugger in Xcode on macOS. It supports\n  debugging C, Objective-C and C++ on the desktop and iOS devices and simulator.\n\n\n.lldbinit: Create or edit `~/.lldbinit` to allow Chromium code to be properly source-mapped.\n\n\n`text\n   # e.g: ['~/electron/src/tools/lldb']\n   script sys.path[:0] = ['<...path/to/electron/src/tools/lldb>']\n   script import lldbinit`\nAttaching to and Debugging Electron\nTo start a debugging session, open up Terminal and start `lldb`, passing a non-release\nbuild of Electron as a parameter.\n`sh\n$ lldb ./out/Testing/Electron.app\n(lldb) target create \"./out/Testing/Electron.app\"\nCurrent executable set to './out/Testing/Electron.app' (x86_64).`\nSetting Breakpoints\nLLDB is a powerful tool and supports multiple strategies for code inspection. For\nthis basic introduction, let's assume that you're calling a command from JavaScript\nthat isn't behaving correctly - so you'd like to break on that command's C++\ncounterpart inside the Electron source.\nRelevant code files can be found in `./shell/`.\nLet's assume that you want to debug `app.setName()`, which is defined in `browser.cc`\nas `Browser::SetName()`. Set the breakpoint using the `breakpoint` command, specifying\nfile and line to break on:\n`sh\n(lldb) breakpoint set --file browser.cc --line 117\nBreakpoint 1: where = Electron Framework`atom::Browser::SetName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) + 20 at browser.cc:118, address = 0x000000000015fdb4`\nThen, start Electron:\n`sh\n(lldb) run`\nThe app will immediately be paused, since Electron sets the app's name on launch:\n`sh\n(lldb) run\nProcess 25244 launched: '/Users/fr/Code/electron/out/Testing/Electron.app/Contents/MacOS/Electron' (x86_64)\nProcess 25244 stopped\n* thread #1: tid = 0x839a4c, 0x0000000100162db4 Electron Framework`atom::Browser::SetName(this=0x0000000108b14f20, name=\"Electron\") + 20 at browser.cc:118, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x0000000100162db4 Electron Framework`atom::Browser::SetName(this=0x0000000108b14f20, name=\"Electron\") + 20 at browser.cc:118\n   115  }\n   116\n   117  void Browser::SetName(const std::string& name) {\n-> 118    name_override_ = name;\n   119  }\n   120\n   121  int Browser::GetBadgeCount() {\n(lldb)`\nTo show the arguments and local variables for the current frame, run `frame variable` (or `fr v`),\nwhich will show you that the app is currently setting the name to \"Electron\".\n`sh\n(lldb) frame variable\n(atom::Browser *) this = 0x0000000108b14f20\n(const string &) name = \"Electron\": {\n    [...]\n}`\nTo do a source level single step in the currently selected thread, execute `step` (or `s`).\nThis would take you into `name_override_.empty()`. To proceed and do a step over,\nrun `next` (or `n`).\n`sh\n(lldb) step\nProcess 25244 stopped\n* thread #1: tid = 0x839a4c, 0x0000000100162dcc Electron Framework`atom::Browser::SetName(this=0x0000000108b14f20, name=\"Electron\") + 44 at browser.cc:119, queue = 'com.apple.main-thread', stop reason = step in\n    frame #0: 0x0000000100162dcc Electron Framework`atom::Browser::SetName(this=0x0000000108b14f20, name=\"Electron\") + 44 at browser.cc:119\n   116\n   117  void Browser::SetName(const std::string& name) {\n   118    name_override_ = name;\n-> 119  }\n   120\n   121  int Browser::GetBadgeCount() {\n   122    return badge_count_;`\nNOTE: If you don't see source code when you think you should, you may not have added the `~/.lldbinit` file above.\nTo finish debugging at this point, run `process continue`. You can also continue until a certain\nline is hit in this thread (`thread until 100`). This command will run the thread in the current\nframe till it reaches line 100 in this frame or stops if it leaves the current frame.\nNow, if you open up Electron's developer tools and call `setName`, you will once again hit the\nbreakpoint.\nFurther Reading\nLLDB is a powerful tool with a great documentation. To learn more about it, consider\nApple's debugging documentation, for instance the LLDB Command Structure Reference\nor the introduction to Using LLDB as a Standalone Debugger.\nYou can also check out LLDB's fantastic [manual and tutorial][lldb-tutorial], which\nwill explain more complex debugging scenarios.",
    "tag": "electron"
  },
  {
    "title": "Debugging with XCode",
    "source": "https://github.com/electron/electron/tree/main/docs/development/debugging-with-xcode.md",
    "content": "Debugging with XCode\nGenerate xcode project for debugging sources (cannot build code from xcode)\nRun `gn gen` with the --ide=xcode argument.\n`sh\n$ gn gen out/Testing --ide=xcode`\nThis will generate the electron.ninja.xcworkspace. You will have to open this workspace\nto set breakpoints and inspect.\nSee `gn help gen` for more information on generating IDE projects with GN.\nDebugging and breakpoints\nLaunch Electron app after build.\nYou can now open the xcode workspace created above and attach to the Electron process\nthrough the Debug > Attach To Process > Electron debug menu. [Note: If you want to debug\nthe renderer process, you need to attach to the Electron Helper as well.]\nYou can now set breakpoints in any of the indexed files. However, you will not be able\nto set breakpoints directly in the Chromium source.\nTo set break points in the Chromium source, you can choose Debug > Breakpoints > Create\nSymbolic Breakpoint and set any function name as the symbol. This will set the breakpoint\nfor all functions with that name, from all the classes if there are more than one.\nYou can also do this step of setting break points prior to attaching the debugger,\nhowever, actual breakpoints for symbolic breakpoint functions may not show up until the",
    "tag": "electron"
  },
  {
    "title": "Source Code Directory Structure",
    "source": "https://github.com/electron/electron/tree/main/docs/development/source-code-directory-structure.md",
    "content": "Source Code Directory Structure\nThe source code of Electron is separated into a few parts, mostly\nfollowing Chromium on the separation conventions.\nYou may need to become familiar with Chromium's multi-process\narchitecture\nto understand the source code better.\nStructure of Source Code\n`diff\nElectron\n\u251c\u2500\u2500 build/ - Build configuration files needed to build with GN.\n\u251c\u2500\u2500 buildflags/ - Determines the set of features that can be conditionally built.\n\u251c\u2500\u2500 chromium_src/ - Source code copied from Chromium that isn't part of the content layer.\n\u251c\u2500\u2500 default_app/ - A default app run when Electron is started without\n|                  providing a consumer app.\n\u251c\u2500\u2500 docs/ - Electron's documentation.\n|   \u251c\u2500\u2500 api/ - Documentation for Electron's externally-facing modules and APIs.\n|   \u251c\u2500\u2500 development/ - Documentation to aid in developing for and with Electron.\n|   \u251c\u2500\u2500 fiddles/ - A set of code snippets one can run in Electron Fiddle.\n|   \u251c\u2500\u2500 images/ - Images used in documentation.\n|   \u2514\u2500\u2500 tutorial/ - Tutorial documents for various aspects of Electron.\n\u251c\u2500\u2500 lib/ - JavaScript/TypeScript source code.\n|   \u251c\u2500\u2500 browser/ - Main process initialization code.\n|   |   \u251c\u2500\u2500 api/ - API implementation for main process modules.\n|   |   \u2514\u2500\u2500 remote/ - Code related to the remote module as it is\n|   |                 used in the main process.\n|   \u251c\u2500\u2500 common/ - Relating to logic needed by both main and renderer processes.\n|   |   \u2514\u2500\u2500 api/ - API implementation for modules that can be used in\n|   |              both the main and renderer processes\n|   \u251c\u2500\u2500 isolated_renderer/ - Handles creation of isolated renderer processes when\n|   |                        contextIsolation is enabled.\n|   \u251c\u2500\u2500 renderer/ - Renderer process initialization code.\n|   |   \u251c\u2500\u2500 api/ - API implementation for renderer process modules.\n|   |   \u251c\u2500\u2500 extension/ - Code related to use of Chrome Extensions\n|   |   |                in Electron's renderer process.\n|   |   \u251c\u2500\u2500 remote/ - Logic that handles use of the remote module in\n|   |   |             the main process.\n|   |   \u2514\u2500\u2500 web-view/ - Logic that handles the use of webviews in the\n|   |                   renderer process.\n|   \u251c\u2500\u2500 sandboxed_renderer/ - Logic that handles creation of sandboxed renderer\n|   |   |                     processes.\n|   |   \u2514\u2500\u2500 api/ - API implementation for sandboxed renderer processes.\n|   \u2514\u2500\u2500 worker/ - Logic that handles proper functionality of Node.js\n|                 environments in Web Workers.\n\u251c\u2500\u2500 patches/ - Patches applied on top of Electron's core dependencies\n|   |          in order to handle differences between our use cases and\n|   |          default functionality.\n|   \u251c\u2500\u2500 boringssl/ - Patches applied to Google's fork of OpenSSL, BoringSSL.\n|   \u251c\u2500\u2500 chromium/ - Patches applied to Chromium.\n|   \u251c\u2500\u2500 node/ - Patches applied on top of Node.js.\n|   \u2514\u2500\u2500 v8/ - Patches applied on top of Google's V8 engine.\n\u251c\u2500\u2500 shell/ - C++ source code.\n|   \u251c\u2500\u2500 app/ - System entry code.\n|   \u251c\u2500\u2500 browser/ - The frontend including the main window, UI, and all of the\n|   |   |          main process things. This talks to the renderer to manage web\n|   |   |          pages.\n|   |   \u251c\u2500\u2500 ui/ - Implementation of UI stuff for different platforms.\n|   |   |   \u251c\u2500\u2500 cocoa/ - Cocoa specific source code.\n|   |   |   \u251c\u2500\u2500 win/ - Windows GUI specific source code.\n|   |   |   \u2514\u2500\u2500 x/ - X11 specific source code.\n|   |   \u251c\u2500\u2500 api/ - The implementation of the main process APIs.\n|   |   \u251c\u2500\u2500 net/ - Network related code.\n|   |   \u251c\u2500\u2500 mac/ - Mac specific Objective-C source code.\n|   |   \u2514\u2500\u2500 resources/ - Icons, platform-dependent files, etc.\n|   \u251c\u2500\u2500 renderer/ - Code that runs in renderer process.\n|   |   \u2514\u2500\u2500 api/ - The implementation of renderer process APIs.\n|   \u2514\u2500\u2500 common/ - Code that used by both the main and renderer processes,\n|       |         including some utility functions and code to integrate node's\n|       |         message loop into Chromium's message loop.\n|       \u2514\u2500\u2500 api/ - The implementation of common APIs, and foundations of\n|                  Electron's built-in modules.\n\u251c\u2500\u2500 spec/ - Components of Electron's test suite run in the main process.\n\u2514\u2500\u2500 BUILD.gn - Building rules of Electron.`\nStructure of Other Directories\n\n.circleci - Config file for CI with CircleCI.\n.github - GitHub-specific config files including issues templates and CODEOWNERS.\ndist - Temporary directory created by `script/create-dist.py` script\n  when creating a distribution.\nnode_modules - Third party node modules used for building.\nnpm - Logic for installation of Electron via npm.\nout - Temporary output directory of `ninja`.\nscript - Scripts used for development purpose like building, packaging,\n  testing, etc.\n\n`diff\nscript/ - The set of all scripts Electron runs for a variety of purposes.\n\u251c\u2500\u2500 codesign/ - Fakes codesigning for Electron apps; used for testing.\n\u251c\u2500\u2500 lib/ - Miscellaneous python utility scripts.\n\u2514\u2500\u2500 release/ - Scripts run during Electron's release process.\n    \u251c\u2500\u2500 notes/ - Generates release notes for new Electron versions.\n    \u2514\u2500\u2500 uploaders/ - Uploads various release-related files during release.`",
    "tag": "electron"
  },
  {
    "title": "Testing",
    "source": "https://github.com/electron/electron/tree/main/docs/development/testing.md",
    "content": "Testing\nWe aim to keep the code coverage of Electron high. We ask that all pull\nrequest not only pass all existing tests, but ideally also add new tests\nto cover changed code and new scenarios. Ensuring that we capture as\nmany code paths and use cases of Electron as possible ensures that we\nall ship apps with fewer bugs.\nThis repository comes with linting rules for both JavaScript and C++ \u2013\nas well as unit and integration tests. To learn more about Electron's\ncoding style, please see the coding-style document.\nLinting\nTo ensure that your changes are in compliance with the Electron coding\nstyle, run `npm run lint`, which will run a variety of linting checks\nagainst your changes depending on which areas of the code they touch.\nMany of these checks are included as precommit hooks, so it's likely\nyou error would be caught at commit time.\nUnit Tests\nIf you are not using build-tools,\nensure that the name you have configured for your\nlocal build of Electron is one of `Testing`, `Release`, `Default`, or\nyou have set `process.env.ELECTRON_OUT_DIR`. Without these set, Electron will fail\nto perform some pre-testing steps.\nTo run all unit tests, run `npm run test`. The unit tests are an Electron\napp (surprise!) that can be found in the `spec` folder. Note that it has\nits own `package.json` and that its dependencies are therefore not defined\nin the top-level `package.json`.\nTo run only specific tests matching a pattern, run `npm run test --\n-g=PATTERN`, replacing the `PATTERN` with a regex that matches the tests\nyou would like to run. As an example: If you want to run only IPC tests, you\nwould run `npm run test -- -g ipc`.\nNode.js Smoke Tests\nIf you've made changes that might affect the way Node.js is embedded into Electron,\nwe have a test runner that runs all of the tests from Node.js, using Electron's custom fork\nof Node.js.\nTo run all of the Node.js tests:\n`bash\n$ node script/node-spec-runner.js`\nTo run a single Node.js test:\n`bash\n$ node script/node-spec-runner.js parallel/test-crypto-keygen`\nwhere the argument passed to the runner is the path to the test in\nthe Node.js source tree.\nTesting on Windows 10 devices\nExtra steps to run the unit test:\n\nVisual Studio 2019 must be installed.\nNode headers have to be compiled for your configuration.\n\n`powershell\n   ninja -C out\\Testing third_party\\electron_node:headers`\n\nThe electron.lib has to be copied as node.lib.\n\n`powershell\n   cd out\\Testing\n   mkdir gen\\node_headers\\Release\n   copy electron.lib gen\\node_headers\\Release\\node.lib`\nMissing fonts\nSome Windows 10 devices do not ship with the Meiryo font installed, which may cause a font fallback test to fail. To install Meiryo:\n\nPush the Windows key and search for Manage optional features.\nClick Add a feature.\nSelect Japanese Supplemental Fonts and click Install.\n\nPixel measurements\nSome tests which rely on precise pixel measurements may not work correctly on\ndevices with Hi-DPI screen settings due to floating point precision errors.\nTo run these tests correctly, make sure the device is set to 100% scaling.\nTo configure display scaling:\n\nPush the Windows key and search for Display settings.\n",
    "tag": "electron"
  },
  {
    "title": "Developing Electron",
    "source": "https://github.com/electron/electron/tree/main/docs/development",
    "content": "Developing Electron\nThese guides are intended for people working on the Electron project itself.\nFor guides on Electron app development, see\n/docs/README.md.\nTable of Contents\n\nIssues\nPull Requests\nDocumentation Styleguide\nSource Code Directory Structure\nCoding Style\nUsing clang-tidy on C++ Code\nBuild Instructions\nmacOS\nWindows\nLinux\nChromium Development\nV8 Development\nTesting\nDebugging\nPatches\n\nGetting Started\nIn order to contribute to Electron, the first thing you'll want to do is get the code.\nElectron's build-tools automate much of the setup for compiling Electron from source with different configurations and build targets.\nIf you would prefer to build Electron manually, see the build instructions.\nOnce you've checked out and built the code, you may want to take a look around the source tree to get a better idea\nof what each directory is responsible for. The source code directory structure gives a good overview of the purpose of each directory.\nOpening Issues on Electron\nFor any issue, there are generally three ways an individual can contribute:\n\nBy opening the issue for discussion\nIf you believe that you have found a new bug in Electron, you should report it by creating a new issue in\nthe electron/electron issue tracker.\n\n\nBy helping to triage the issue\nYou can do this either by providing assistive details (a reproducible test case that demonstrates a bug) or by providing suggestions to address the issue.\n\n\nBy helping to resolve the issue\nThis can be done by demonstrating that the issue is not a bug or is fixed;\n  but more often, by opening a pull request that changes the source in `electron/electron`\n  in a concrete and reviewable manner.\n\n\n\nSee issues for more information.\nMaking a Pull Request to Electron\nMost pull requests opened against the `electron/electron` repository include\nchanges to either the C/C++ code in the `shell/` folder,\nthe TypeScript code in the `lib/` folder, the documentation in `docs/`,\nor tests in the `spec/` folder.\nSee pull requests for more information.\nIf you want to add a new API module to Electron, you'll want to look in creating API.\nGovernance\nElectron has a fully-fledged governance system that oversees activity in Electron and whose working groups are responsible for areas like APIs, releases, and upgrades to Electron's dependencies including Chromium and Node.js. Depending on how frequently and to what end you want to contribute, you may want to consider joining a working group.\nDetails about each group and their responsibilities can be found in the governance repo.\nPatches in Electron\nElectron is built on two major upstream projects: Chromium and Node.js. Each of these projects has several of their own dependencies, too. We try our best to use these dependencies exactly as they are but sometimes we can't achieve our goals without patching those upstream dependencies to fit our use cases.\nAs such, we maintain a collection of patches as part of our source tree. The process for adding or altering one of these patches to Electron's source tree via a pull request can be found in patches.\nDebugging\nThere are many different approaches to debugging issues and bugs in Electron, many of which\nare platform specific.",
    "tag": "electron"
  },
  {
    "title": "Pull Requests",
    "source": "https://github.com/electron/electron/tree/main/docs/development/pull-requests.md",
    "content": "Pull Requests\n\nSetting up your local environment\nStep 1: Fork\nStep 2: Build\nStep 3: Branch\nMaking Changes\nStep 4: Code\nStep 5: Commit\nCommit message guidelines\n\n\nStep 6: Rebase\nStep 7: Test\nStep 8: Push\nStep 9: Opening the Pull Request\nStep 10: Discuss and Update\nApproval and Request Changes Workflow\n\n\nStep 11: Landing\nContinuous Integration Testing\n\nSetting up your local environment\nStep 1: Fork\nFork the project on GitHub and clone your fork\nlocally.\n`sh\n$ git clone git@github.com:username/electron.git\n$ cd electron\n$ git remote add upstream https://github.com/electron/electron.git\n$ git fetch upstream`\nStep 2: Build\nBuild steps and dependencies differ slightly depending on your operating system.\nSee these detailed guides on building Electron locally:\n\nBuilding on macOS\nBuilding on Linux\nBuilding on Windows\n\nOnce you've built the project locally, you're ready to start making changes!\nStep 3: Branch\nTo keep your development environment organized, create local branches to\nhold your work. These should be branched directly off of the `main` branch.\n`sh\n$ git checkout -b my-branch -t upstream/main`\nMaking Changes\nStep 4: Code\nMost pull requests opened against the `electron/electron` repository include\nchanges to either the C/C++ code in the `shell/` folder,\nthe JavaScript code in the `lib/` folder, the documentation in `docs/api/`\nor tests in the `spec/` folder.\nPlease be sure to run `npm run lint` from time to time on any code changes\nto ensure that they follow the project's code style.\nSee coding style for\nmore information about best practice when modifying code in different parts of\nthe project.\nStep 5: Commit\nIt is recommended to keep your changes grouped logically within individual\ncommits. Many contributors find it easier to review changes that are split\nacross multiple commits. There is no limit to the number of commits in a\npull request.\n`sh\n$ git add my/changed/files\n$ git commit`\nNote that multiple commits get squashed when they are landed.\nCommit message guidelines\nA good commit message should describe what changed and why. The Electron project\nuses semantic commit messages to streamline\nthe release process.\nBefore a pull request can be merged, it must have a pull request title with a semantic prefix.\nExamples of commit messages with semantic prefixes:\n\n`fix: don't overwrite prevent_default if default wasn't prevented`\n`feat: add app.isPackaged() method`\n`docs: app.isDefaultProtocolClient is now available on Linux`\n\nCommon prefixes:\n\nfix: A bug fix\nfeat: A new feature\ndocs: Documentation changes\ntest: Adding missing tests or correcting existing tests\nbuild: Changes that affect the build system\nci: Changes to our CI configuration files and scripts\nperf: A code change that improves performance\nrefactor: A code change that neither fixes a bug nor adds a feature\nstyle: Changes that do not affect the meaning of the code (linting)\n\nOther things to keep in mind when writing a commit message:\n\nThe first line should:\ncontain a short description of the change (preferably 50 characters or less,\n     and no more than 72 characters)\nbe entirely in lowercase with the exception of proper nouns, acronyms, and\n   the words that refer to code, like function/variable names\nKeep the second line blank.\nWrap all other lines at 72 columns.\n\nBreaking Changes\nA commit that has the text `BREAKING CHANGE:` at the beginning of its optional\nbody or footer section introduces a breaking API change (correlating with Major\nin semantic versioning). A breaking change can be part of commits of any type.\ne.g., a `fix:`, `feat:` & `chore:` types would all be valid, in addition to any\nother type.\nSee conventionalcommits.org for more details.\nStep 6: Rebase\nOnce you have committed your changes, it is a good idea to use `git rebase`\n(not `git merge`) to synchronize your work with the main repository.\n`sh\n$ git fetch upstream\n$ git rebase upstream/main`\nThis ensures that your working branch has the latest changes from `electron/electron`\nmain.\nStep 7: Test\nBug fixes and features should always come with tests. A\ntesting guide has been\nprovided to make the process easier. Looking at other tests to see how they\nshould be structured can also help.\nBefore submitting your changes in a pull request, always run the full\ntest suite. To run the tests:\n`sh\n$ npm run test`\nMake sure the linter does not report any issues and that all tests pass.\nPlease do not submit patches that fail either check.\nIf you are updating tests and want to run a single spec to check it:\n`sh\n$ npm run test -match=menu`\nThe above would only run spec modules matching `menu`, which is useful for\nanyone who's working on tests that would otherwise be at the very end of\nthe testing cycle.\nStep 8: Push\nOnce your commits are ready to go -- with passing tests and linting --\nbegin the process of opening a pull request by pushing your working branch\nto your fork on GitHub.\n`sh\n$ git push origin my-branch`\nStep 9: Opening the Pull Request\nFrom within GitHub, opening a new pull request will present you with a template\nthat should be filled out. It can be found here.\nIf you do not adequately complete this template, your PR may be delayed in being merged as maintainers\nseek more information or clarify ambiguities.\nStep 10: Discuss and update\nYou will probably get feedback or requests for changes to your pull request.\nThis is a big part of the submission process so don't be discouraged! Some\ncontributors may sign off on the pull request right away. Others may have\ndetailed comments or feedback. This is a necessary part of the process\nin order to evaluate whether the changes are correct and necessary.\nTo make changes to an existing pull request, make the changes to your local\nbranch, add a new commit with those changes, and push those to your fork.\nGitHub will automatically update the pull request.\n`sh\n$ git add my/changed/files\n$ git commit\n$ git push origin my-branch`\nThere are a number of more advanced mechanisms for managing commits using\n`git rebase` that can be used, but are beyond the scope of this guide.\nFeel free to post a comment in the pull request to ping reviewers if you are\nawaiting an answer on something. If you encounter words or acronyms that\nseem unfamiliar, refer to this\nglossary.\nApproval and Request Changes Workflow\nAll pull requests require approval from a\nCode Owner\nof the area you modified in order to land. Whenever a maintainer reviews a pull\nrequest they may request changes. These may be small, such as fixing a typo, or\nmay involve substantive changes. Such requests are intended to be helpful, but\nat times may come across as abrupt or unhelpful, especially if they do not include\nconcrete suggestions on how to change them.\nTry not to be discouraged. If you feel that a review is unfair, say so or seek\nthe input of another project contributor. Often such comments are the result of\na reviewer having taken insufficient time to review and are not ill-intended.\nSuch difficulties can often be resolved with a bit of patience. That said,\nreviewers should be expected to provide helpful feedback.\nStep 11: Landing\nIn order to land, a pull request needs to be reviewed and approved by\nat least one Electron Code Owner and pass CI. After that, if there are no\nobjections from other contributors, the pull request can be merged.\nCongratulations and thanks for your contribution!\nContinuous Integration Testing\nEvery pull request is tested on the Continuous Integration (CI) system to\nconfirm that it works on Electron's supported platforms.\nIdeally, the pull request will pass (\"be green\") on all of CI's platforms.\nThis means that all tests pass and there are no linting errors. However,\nit is not uncommon for the CI infrastructure itself to fail on specific\nplatforms or for so-called \"flaky\" tests to fail (\"be red\"). Each CI\nfailure must be manually inspected to determine the cause.\nCI starts automatically when you open a pull request, but only\ncore maintainers can restart a CI run. If you believe CI is giving a",
    "tag": "electron"
  },
  {
    "title": "Issues In Electron",
    "source": "https://github.com/electron/electron/tree/main/docs/development/issues.md",
    "content": "Issues In Electron\n\nHow to Contribute to Issues\nAsking for General Help\nSubmitting a Bug Report\nTriaging a Bug Report\nResolving a Bug Report\n\nHow to Contribute to Issues\nFor any issue, there are fundamentally three ways an individual can\ncontribute:\n\nBy opening the issue for discussion: If you believe that you have found\n   a new bug in Electron, you should report it by creating a new issue in\n   the electron/electron issue tracker.\nBy helping to triage the issue: You can do this either by providing\n   assistive details (a reproducible test case that demonstrates a bug) or by\n   providing suggestions to address the issue.\nBy helping to resolve the issue: This can be done by demonstrating\n   that the issue is not a bug or is fixed; but more often, by opening\n   a pull request that changes the source in `electron/electron` in a\n   concrete and reviewable manner.\n\nAsking for General Help\nThe Electron website has a\nlist of resources for getting programming help, reporting security issues,\ncontributing, and more. Please use the issue tracker for bugs only!\nSubmitting a Bug Report\nTo submit a bug report:\nWhen opening a new issue in the electron/electron issue tracker, users\nwill be presented with a template that should be filled in.\nIf you believe that you have found a bug in Electron, please fill out the template\nto the best of your ability.\nThe two most important pieces of information needed to evaluate the report are\na description of the bug and a simple test case to recreate it. It is easier to fix\na bug if it can be reproduced.\nSee How to create a Minimal, Complete, and Verifiable example.\nTriaging a Bug Report\nIt's common for open issues to involve discussion. Some contributors may\nhave differing opinions, including whether the behavior is a bug or feature.\nThis discussion is part of the process and should be kept focused, helpful,\nand professional.\nTerse responses that provide neither additional context nor supporting detail\nare not helpful or professional. To many, such responses are annoying and\nunfriendly.\nContributors are encouraged to solve issues collaboratively and help one\nanother make progress. If you encounter an issue that you feel is invalid, or\nwhich contains incorrect information, explain why you feel that way with\nadditional supporting context, and be willing to be convinced that you may\nbe wrong. By doing so, we can often reach the correct outcome faster.\nResolving a Bug Report\nMost issues are resolved by opening a pull request. The process for opening and\nreviewing a pull request is similar to that of opening and triaging issues, but\ncarries with it a necessary review and approval workflow that ensures that the\nproposed changes meet the minimal quality and functional guidelines of the",
    "tag": "electron"
  },
  {
    "title": "Build Instructions",
    "source": "https://github.com/electron/electron/tree/main/docs/development/build-instructions-gn.md",
    "content": "Build Instructions\nFollow the guidelines below for building Electron itself, for the purposes of creating custom Electron binaries. For bundling and distributing your app code with the prebuilt Electron binaries, see the application distribution guide.\nPlatform prerequisites\nCheck the build prerequisites for your platform before proceeding\n\nmacOS\nLinux\nWindows\n\nBuild Tools\nElectron's Build Tools automate much of the setup for compiling Electron from source with different configurations and build targets. If you wish to set up the environment manually, the instructions are listed below.\nElectron uses GN for project generation and\nninja for building. Project configurations can\nbe found in the `.gn` and `.gni` files.\nGN Files\nThe following `gn` files contain the main rules for building Electron:\n\n`BUILD.gn` defines how Electron itself is built and\n  includes the default configurations for linking with Chromium.\n`build/args/{testing,release,all}.gn` contain the default build arguments for\n  building Electron.\n\nGN prerequisites\nYou'll need to install depot_tools, the toolset\nused for fetching Chromium and its dependencies.\nAlso, on Windows, you'll need to set the environment variable\n`DEPOT_TOOLS_WIN_TOOLCHAIN=0`. To do so, open `Control Panel` \u2192 `System and\nSecurity` \u2192 `System` \u2192 `Advanced system settings` and add a system variable\n`DEPOT_TOOLS_WIN_TOOLCHAIN` with value `0`.  This tells `depot_tools` to use\nyour locally installed version of Visual Studio (by default, `depot_tools` will\ntry to download a Google-internal version that only Googlers have access to).\nSetting up the git cache\nIf you plan on checking out Electron more than once (for example, to have\nmultiple parallel directories checked out to different branches), using the git\ncache will speed up subsequent calls to `gclient`. To do this, set a\n`GIT_CACHE_PATH` environment variable:\n```sh\n$ export GIT_CACHE_PATH=\"${HOME}/.git_cache\"\n$ mkdir -p \"${GIT_CACHE_PATH}\"\nThis will use about 16G.\n```\nGetting the code\n```sh\n$ mkdir electron && cd electron\n$ gclient config --name \"src/electron\" --unmanaged https://github.com/electron/electron\n$ gclient sync --with_branch_heads --with_tags\nThis will take a while, go get a coffee.\n```\n\nInstead of `https://github.com/electron/electron`, you can use your own fork\nhere (something like `https://github.com/<username>/electron`).\n\nA note on pulling/pushing\nIf you intend to `git pull` or `git push` from the official `electron`\nrepository in the future, you now need to update the respective folder's\norigin URLs.\n`sh\n$ cd src/electron\n$ git remote remove origin\n$ git remote add origin https://github.com/electron/electron\n$ git checkout main\n$ git branch --set-upstream-to=origin/main\n$ cd -`\n:memo: `gclient` works by checking a file called `DEPS` inside the\n`src/electron` folder for dependencies (like Chromium or Node.js).\nRunning `gclient sync -f` ensures that all dependencies required\nto build Electron match that file.\nSo, in order to pull, you'd run the following commands:\n`sh\n$ cd src/electron\n$ git pull\n$ gclient sync -f`\nBuilding\nSet the environment variable for chromium build tools\nOn Linux & MacOS\n`sh\n$ cd src\n$ export CHROMIUM_BUILDTOOLS_PATH=`pwd`/buildtools`\nOn Windows:\n`sh\n$ cd src\n$ set CHROMIUM_BUILDTOOLS_PATH=%cd%\\buildtools`\nTo generate Testing build config of Electron:\n`sh\n$ gn gen out/Testing --args=\"import(\\\"//electron/build/args/testing.gn\\\")\"`\nTo generate Release build config of Electron:\n`sh\n$ gn gen out/Release --args=\"import(\\\"//electron/build/args/release.gn\\\")\"`\nNote: This will generate a `out/Testing` or `out/Release` build directory under `src/` with the testing or release build depending upon the configuration passed above. You can replace `Testing|Release` with another names, but it should be a subdirectory of `out`.\nAlso you shouldn't have to run `gn gen` again\u2014if you want to change the build arguments, you can run `gn args out/Testing` to bring up an editor. To see the list of available build configuration options, run `gn args out/Testing --list`.\nTo build, run `ninja` with the `electron` target:\nNote: This will also take a while and probably heat up your lap.\nFor the testing configuration:\n`sh\n$ ninja -C out/Testing electron`\nFor the release configuration:\n`sh\n$ ninja -C out/Release electron`\nThis will build all of what was previously 'libchromiumcontent' (i.e. the\n`content/` directory of `chromium` and its dependencies, incl. Blink and V8),\nso it will take a while.\nThe built executable will be under `./out/Testing`:\n```sh\n$ ./out/Testing/Electron.app/Contents/MacOS/Electron\nor, on Windows\n$ ./out/Testing/electron.exe\nor, on Linux\n$ ./out/Testing/electron\n```\nPackaging\nOn linux, first strip the debugging and symbol information:\n`sh\n$ electron/script/strip-binaries.py -d out/Release`\nTo package the electron build as a distributable zip file:\n`sh\n$ ninja -C out/Release electron:electron_dist_zip`\nCross-compiling\nTo compile for a platform that isn't the same as the one you're building on,\nset the `target_cpu` and `target_os` GN arguments. For example, to compile an\nx86 target from an x64 host, specify `target_cpu = \"x86\"` in `gn args`.\n`sh\n$ gn gen out/Testing-x86 --args='... target_cpu = \"x86\"'`\nNot all combinations of source and target CPU/OS are supported by Chromium.\n| Host        | Target        | Status               |\n|-------------|---------------|----------------------|\n| Windows x64 | Windows arm64 | Experimental         |\n| Windows x64 | Windows x86   | Automatically tested |\n| Linux x64   | Linux x86     | Automatically tested |\nIf you test other combinations and find them to work, please update this document :)\nSee the GN reference for allowable values of target_os\nand target_cpu.\nWindows on Arm (experimental)\nTo cross-compile for Windows on Arm, follow Chromium's guide to get the necessary dependencies, SDK and libraries, then build with `ELECTRON_BUILDING_WOA=1` in your environment before running `gclient sync`.\n`bat\nset ELECTRON_BUILDING_WOA=1\ngclient sync -f --with_branch_heads --with_tags`\nOr (if using PowerShell):\n`powershell\n$env:ELECTRON_BUILDING_WOA=1\ngclient sync -f --with_branch_heads --with_tags`\nNext, run `gn gen` as above with `target_cpu=\"arm64\"`.\nTests\nTo run the tests, you'll first need to build the test modules against the\nsame version of Node.js that was built as part of the build process. To\ngenerate build headers for the modules to compile against, run the following\nunder `src/` directory.\n`sh\n$ ninja -C out/Testing third_party/electron_node:headers`\nYou can now run the tests.\nIf you're debugging something, it can be helpful to pass some extra flags to\nthe Electron binary:\n`sh\n$ npm run test -- \\\n  --enable-logging -g 'BrowserWindow module'`\nSharing the git cache between multiple machines\nIt is possible to share the gclient git cache with other machines by exporting it as\nSMB share on linux, but only one process/machine can be using the cache at a\ntime. The locks created by git-cache script will try to prevent this, but it may\nnot work perfectly in a network.\nOn Windows, SMBv2 has a directory cache that will cause problems with the git\ncache script, so it is necessary to disable it by setting the registry key\n`sh\nHKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Lanmanworkstation\\Parameters\\DirectoryCacheLifetime`\nto 0. More information: https://stackoverflow.com/a/9935126\nThis can be set quickly in powershell (ran as administrator):\n`powershell\nNew-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Services\\Lanmanworkstation\\Parameters\" -Name DirectoryCacheLifetime -Value 0 -PropertyType DWORD -Force`\nTroubleshooting\ngclient sync complains about rebase\nIf `gclient sync` is interrupted the git tree may be left in a bad state, leading to a cryptic message when running `gclient sync` in the future:\n`plaintext\n2> Conflict while rebasing this branch.\n2> Fix the conflict and run gclient again.\n2> See man git-rebase for details.`\nIf there are no git conflicts or rebases in `src/electron`, you may need to abort a `git am` in `src`:\n`sh\n$ cd ../\n$ git am --abort\n$ cd electron\n$ gclient sync -f`\nThis may also happen if you have checked out a branch (as opposed to having a detached head) in `electron/src/`\nor some other dependency\u2019s repository. If that is the case, a `git checkout --detach HEAD` in the appropriate repository should do the trick.\nI'm being asked for a username/password for chromium-internal.googlesource.com\nIf you see a prompt for `Username for 'https://chrome-internal.googlesource.com':` when running `gclient sync` on Windows, it's probably because the `DEPOT_TOOLS_WIN_TOOLCHAIN` environment variable is not set to 0. Open `Control Panel` \u2192 `System and Security` \u2192 `System` \u2192 `Advanced system settings` and add a system variable\n`DEPOT_TOOLS_WIN_TOOLCHAIN` with value `0`.  This tells `depot_tools` to use\nyour locally installed version of Visual Studio (by default, `depot_tools` will\ntry to download a Google-internal version that only Googlers have access to).\n`e` Module not found\nIf `e` is not recognized despite running `npm i -g @electron/build-tools`, ie:\n`sh\nError: Cannot find module '/Users/<user>/.electron_build_tools/src/e'`",
    "tag": "electron"
  },
  {
    "title": "Electron Debugging",
    "source": "https://github.com/electron/electron/tree/main/docs/development/debugging.md",
    "content": "Electron Debugging\nThere are many different approaches to debugging issues and bugs in Electron, many of which\nare platform specific.\nSome of the more common approaches are outlined below.\nGeneric Debugging\nChromium contains logging macros which can aid debugging by printing information to console in C++ and Objective-C++.\nYou might use this to print out variable values, function names, and line numbers, amongst other things.\nSome examples:\n```cpp\nLOG(INFO) << \"bitmap.width(): \" << bitmap.width();\nLOG(INFO, bitmap.width() > 10) << \"bitmap.width() is greater than 10!\";\n```\nThere are also different levels of logging severity: `INFO`, `WARN`, and `ERROR`.\nSee logging.h in Chromium's source tree for more information and examples.\nPrinting Stacktraces\nChromium contains a helper to print stack traces to console without interrupting the program.\n```cpp\ninclude \"base/debug/stack_trace.h\"\n...\nbase::debug::StackTrace().Print();\n```\nThis will allow you to observe call chains and identify potential issue areas.\nBreakpoint Debugging\n\nNote that this will increase the size of the build significantly, taking up around 50G of disk space\n\nWrite the following file to `electron/.git/info/exclude/debug.gn`\n`gn\nimport(\"//electron/build/args/testing.gn\")\nis_debug = true\nsymbol_level = 2\nforbid_non_component_debug_builds = false`\nThen execute:\n`sh\n$ gn gen out/Debug --args=\"import(\\\"//electron/.git/info/exclude/debug.gn\\\") $GN_EXTRA_ARGS\"\n$ ninja -C out/Debug electron`\nNow you can use `LLDB` for breakpoint debugging.\nPlatform-Specific Debugging\n\n\nmacOS Debugging\nDebugging with Xcode\nWindows Debugging\n\nDebugging with the Symbol Server\nDebug symbols allow you to have better debugging sessions. They have information about the functions contained in executables and dynamic libraries and provide you with information to get clean call stacks. A Symbol Server allows the debugger to load the correct symbols, binaries and sources automatically without forcing users to download large debugging files.",
    "tag": "electron"
  },
  {
    "title": "Build Instructions (macOS)",
    "source": "https://github.com/electron/electron/tree/main/docs/development/build-instructions-macos.md",
    "content": "Build Instructions (macOS)\nFollow the guidelines below for building Electron itself on macOS, for the purposes of creating custom Electron binaries. For bundling and distributing your app code with the prebuilt Electron binaries, see the application distribution guide.\nPrerequisites\n\nmacOS >= 11.6.0\nXcode. The exact version\n  needed depends on what branch you are building, but the latest version of\n  Xcode is generally a good bet for building `main`.\nnode.js (external)\nPython >= 3.7\n\nArm64-specific prerequisites\n\nRosetta 2\nWe recommend installing Rosetta if using dependencies that need to cross-compile on x64 and arm64 machines. Rosetta can be installed by using the softwareupdate command line tool.\n`$ softwareupdate --install-rosetta`\n\nBuilding Electron\nSee Build Instructions: GN.\nTroubleshooting\nXcode \"incompatible architecture\" errors (MacOS arm64-specific)\nIf both Xcode and Xcode command line tools are installed (`$ xcode -select --install`, or directly download the correct version here), but the stack trace says otherwise like so:\n`sh\nxcrun: error: unable to load libxcrun\n(dlopen(/Users/<user>/.electron_build_tools/third_party/Xcode/Xcode.app/Contents/Developer/usr/lib/libxcrun.dylib (http://xcode.app/Contents/Developer/usr/lib/libxcrun.dylib), 0x0005):\n tried: '/Users/<user>/.electron_build_tools/third_party/Xcode/Xcode.app/Contents/Developer/usr/lib/libxcrun.dylib (http://xcode.app/Contents/Developer/usr/lib/libxcrun.dylib)'\n (mach-o file, but is an incompatible architecture (have (x86_64), need (arm64e))), '/Users/<user>/.electron_build_tools/third_party/Xcode/Xcode-11.1.0.app/Contents/Developer/usr/lib/libxcrun.dylib (http://xcode-11.1.0.app/Contents/Developer/usr/lib/libxcrun.dylib)' (mach-o file, but is an incompatible architecture (have (x86_64), need (arm64e)))).``\nIf you are on arm64 architecture, the build script may be pointing to the wrong Xcode version (11.x.y doesn't support arm64). Navigate to `/Users/<user>/.electron_build_tools/third_party/Xcode/` and rename `Xcode-13.3.0.app` to `Xcode.app` to ensure the right Xcode version is used.\nCertificates fail to verify\ninstalling certifi will fix the following error:\n`sh\n________ running 'python3 src/tools/clang/scripts/update.py' in '/Users/<user>/electron'\nDownloading https://commondatastorage.googleapis.com/chromium-browser-clang/Mac_arm64/clang-llvmorg-15-init-15652-g89a99ec9-1.tgz\n<urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:997)>\nRetrying in 5 s ...\nDownloading https://commondatastorage.googleapis.com/chromium-browser-clang/Mac_arm64/clang-llvmorg-15-init-15652-g89a99ec9-1.tgz\n<urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:997)>\nRetrying in 10 s ...\nDownloading https://commondatastorage.googleapis.com/chromium-browser-clang/Mac_arm64/clang-llvmorg-15-init-15652-g89a99ec9-1.tgz\n<urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:997)>\nRetrying in 20 s ...`",
    "tag": "electron"
  },
  {
    "title": "Chromium Development",
    "source": "https://github.com/electron/electron/tree/main/docs/development/chromium-development.md",
    "content": "Chromium Development\n\nA collection of resources for learning about Chromium and tracking its development.\n\nSee also V8 Development\nContributing to Chromium\n\nChecking Out and Building\nWindows\nmacOS\n\nLinux\n\n\nContributing - This document outlines the process of getting a code change merged to the Chromium source tree.\n\nAssumes a working Chromium checkout and build.\n\nResources for Chromium Development\nCode Resources\n\nCode Search - Indexed and searchable source code for Chromium and associated projects.\nSource Code - The source code for Chromium itself.\nChromium Review - The searchable code host which facilitates code reviews for Chromium and related projects.\n\nInformational Resources\n\nChromium Dash - Chromium Dash ties together multiple data sources in order to present a consolidated view of what's going on in Chromium and Chrome, plus related projects like V8, WebRTC & Skia.\nSchedule - Review upcoming Chromium release schedule.\nBranches - Look up which branch corresponds to which milestone.\nReleases - See what version of Chromium is shipping to each release channel and look up changes between each version.\nCommits - See and search for commits to the Chromium source tree by commit SHA or committer username.\nDiscussion Groups - Subscribe to the following groups to get project updates and discuss the Chromium projects, and to get help in developing for Chromium-based browsers.\nChromium Slack - a virtual meeting place where Chromium ecosystem developers can foster community and coordinate work.\n\nSocial Links\n\nBlog - News and developments from Chromium.\n@ChromiumDev - Twitter account containing news & guidance for developers from the Google Chrome Developer Relations team.\n",
    "tag": "electron"
  },
  {
    "title": "Creating a New Electron Browser Module",
    "source": "https://github.com/electron/electron/tree/main/docs/development/creating-api.md",
    "content": "Creating a New Electron Browser Module\nWelcome to the Electron API guide! If you are unfamiliar with creating a new Electron API module within the browser directory, this guide serves as a checklist for some of the necessary steps that you will need to implement.\nThis is not a comprehensive end-all guide to creating an Electron Browser API, rather an outline documenting some of the more unintuitive steps.\nAdd your files to Electron's project configuration\nElectron uses GN as a meta build system to generate files for its compiler, Ninja. This means that in order to tell Electron to compile your code, we have to add your API's code and header file names into filenames.gni.\nYou will need to append your API file names alphabetically into the appropriate files like so:\n```cpp title='filenames.gni'\nlib_sources = [\n    \"path/to/api/api_name.cc\",\n    \"path/to/api/api_name.h\",\n]\nlib_sources_mac = [\n    \"path/to/api/api_name_mac.h\",\n    \"path/to/api/api_name_mac.mm\",\n]\nlib_sources_win = [\n    \"path/to/api/api_name_win.cc\",\n    \"path/to/api/api_name_win.h\",\n]\nlib_sources_linux = [\n    \"path/to/api/api_name_linux.cc\",\n    \"path/to/api/api_name_linux.h\",\n]\n```\nNote that the Windows, macOS and Linux array additions are optional and should only be added if your API has specific platform implementations.\nCreate API documentation\nType definitions are generated by Electron using @electron/docs-parser and @electron/typescript-definitions. This step is necessary to ensure consistency across Electron's API documentation. This means that for your API type definition to appear in the `electron.d.ts` file, we must create a `.md` file. Examples can be found in this folder.\nSet up `ObjectTemplateBuilder` and `Wrappable`\nElectron constructs its modules using object_template_builder.\nwrappable is a base class for C++ objects that have corresponding v8 wrapper objects.\nHere is a basic example of code that you may need to add, in order to incorporate `object_template_builder` and `wrappable` into your API. For further reference, you can find more implementations here.\nIn your `api_name.h` file:\n```cpp title='api_name.h'\nifndef ELECTRON_SHELL_BROWSER_API_ELECTRON_API_{API_NAME}H\ndefine ELECTRON_SHELL_BROWSER_API_ELECTRON_API_{API_NAME}H\ninclude \"gin/handle.h\"\ninclude \"gin/wrappable.h\"\nnamespace electron {\nnamespace api {\nclass ApiName : public gin::Wrappable  {\n public:\n  static gin::Handle Create(v8::Isolate* isolate);\n// gin::Wrappable\n  static gin::WrapperInfo kWrapperInfo;\n  gin::ObjectTemplateBuilder GetObjectTemplateBuilder(\n      v8::Isolate isolate) override;\n  const char GetTypeName() override;\n} // namespace api\n} // namespace electron\n```\nIn your `api_name.cc` file:\n```cpp title='api_name.cc'\ninclude \"shell/browser/api/electron_api_safe_storage.h\"\ninclude \"shell/browser/browser.h\"\ninclude \"shell/common/gin_converters/base_converter.h\"\ninclude \"shell/common/gin_converters/callback_converter.h\"\ninclude \"shell/common/gin_helper/dictionary.h\"\ninclude \"shell/common/gin_helper/object_template_builder.h\"\ninclude \"shell/common/node_includes.h\"\ninclude \"shell/common/platform_util.h\"\nnamespace electron {\nnamespace api {\ngin::WrapperInfo ApiName::kWrapperInfo = {gin::kEmbedderNativeGin};\ngin::ObjectTemplateBuilder ApiName::GetObjectTemplateBuilder(\n    v8::Isolate* isolate) {\n  return gin::ObjectTemplateBuilder(isolate)\n      .SetMethod(\"methodName\", &ApiName::methodName);\n}\nconst char* ApiName::GetTypeName() {\n  return \"ApiName\";\n}\n// static\ngin::Handle ApiName::Create(v8::Isolate* isolate) {\n  return gin::CreateHandle(isolate, new ApiName());\n}\n} // namespace api\n} // namespace electron\nnamespace {\nvoid Initialize(v8::Local exports,\n                v8::Local unused,\n                v8::Local context,\n                void priv) {\n  v8::Isolate isolate = context->GetIsolate();\n  gin_helper::Dictionary dict(isolate, exports);\n  dict.Set(\"apiName\", electron::api::ApiName::Create(isolate));\n}\n}  // namespace\n```\nLink your Electron API with Node\nIn the typings/internal-ambient.d.ts file, we need to append a new property onto the `Process` interface like so:\n`ts title='typings/internal-ambient.d.ts'\ninterface Process {\n    _linkedBinding(name: 'electron_browser_{api_name}', Electron.ApiName);\n}`\nAt the very bottom of your `api_name.cc` file:\n`cpp title='api_name.cc'\nNODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_{api_name},Initialize)`\nIn your shell/common/node_bindings.cc file, add your node binding name to Electron's built-in modules.\n`cpp title='shell/common/node_bindings.cc'\n#define ELECTRON_BROWSER_MODULES(V)      \\\n  V(electron_browser_{api_name})`\n\nNote: More technical details on how Node links with Electron can be found on our blog.\n\nExpose your API to TypeScript\nExport your API as a module\nWe will need to create a new TypeScript file in the path that follows:\n`\"lib/browser/api/{electron_browser_{api_name}}.ts\"`\nAn example of the contents of this file can be found here.\nExpose your module to TypeScript\nAdd your module to the module list found at `\"lib/browser/api/module-list.ts\"` like so:\n```typescript title='lib/browser/api/module-list.ts'\nexport const browserModuleList: ElectronInternal.ModuleEntry[] = [\n  { name: 'apiName', loader: () => require('./api-name') },\n];",
    "tag": "electron"
  },
  {
    "title": "Using clang-tidy on C++ Code",
    "source": "https://github.com/electron/electron/tree/main/docs/development/clang-tidy.md",
    "content": "Using clang-tidy on C++ Code\nclang-tidy is a tool to\nautomatically check C/C++/Objective-C code for style violations, programming\nerrors, and best practices.\nElectron's `clang-tidy` integration is provided as a linter script which can\nbe run with `npm run lint:clang-tidy`. While `clang-tidy` checks your on-disk\nfiles, you need to have built Electron so that it knows which compiler flags\nwere used. There is one required option for the script `--output-dir`, which\ntells the script which build directory to pull the compilation information\nfrom. A typical usage would be:\n`npm run lint:clang-tidy --out-dir ../out/Testing`\nWith no filenames provided, all C/C++/Objective-C files will be checked.\nYou can provide a list of files to be checked by passing the filenames after\nthe options:\n`npm run lint:clang-tidy --out-dir ../out/Testing shell/browser/api/electron_api_app.cc`\nWhile `clang-tidy` has a\nlong list\nof possible checks, in Electron only a few are enabled by default. At the\nmoment Electron doesn't have a `.clang-tidy` config, so `clang-tidy` will\nfind the one from Chromium at `src/.clang-tidy` and use the checks which\nChromium has enabled. You can change which checks are run by using the\n`--checks=` option. This is passed straight through to `clang-tidy`, so see\nits documentation for full details. Wildcards can be used, and checks can\nbe disabled by prefixing a `-`. By default any checks listed are added to\nthose in `.clang-tidy`, so if you'd like to limit the checks to specific\nones you should first exclude all checks then add back what you want, like\n`--checks=-*,performance*`.\nRunning `clang-tidy` is rather slow - internally it compiles each file and\nthen runs the checks so it will always be some factor slower than compilation.\nWhile you can use parallel runs to speed it up using the `--jobs|-j` option,\n`clang-tidy` also uses a lot of memory during its checks, so it can easily",
    "tag": "electron"
  },
  {
    "title": "Updating an Appveyor Azure Image",
    "source": "https://github.com/electron/electron/tree/main/docs/development/azure-vm-setup.md",
    "content": "Updating an Appveyor Azure Image\nElectron CI on Windows uses AppVeyor, which in turn uses Azure VM images to run.  Occasionally, these VM images need to be updated due to changes in Chromium requirements.  In order to update you will need PowerShell and the Azure PowerShell module.\nOccasionally we need to update these images owing to changes in Chromium or other miscellaneous build requirement changes.\nExample Use Case:\n    * We need `VS15.9` and we have `VS15.7` installed; this would require us to update an Azure image.\n\n\nIdentify the image you wish to modify.\n\nIn appveyor.yml, the image is identified by the property image.\nThe names used correspond to the \"images\" defined for a build cloud, eg the libcc-20 cloud.\n\n\nFind the image you wish to modify in the build cloud and make note of the VHD Blob Path for that image, which is the value for that corresponding key.\nYou will need this URI path to copy into a new image.\n\n\nYou will also need the storage account name which is labeled in AppVeyor as the Disk Storage Account Name\n\n\n\nGet the Azure storage account key\n\nLog into Azure using credentials stored in LastPass (under Azure Enterprise) and then find the storage account corresponding to the name found in AppVeyor.\nExample, for `appveyorlibccbuilds` Disk Storage Account Name you'd look for `appveyorlibccbuilds` in the list of storage accounts @ Home < Storage Accounts\nClick into it and look for `Access Keys`, and then you can use any of the keys present in the list.\n\n\n\n\n\n\n\nGet the full virtual machine image URI from Azure\n\nNavigate to Home < Storage Accounts < `$ACCT_NAME` < Blobs < Images\nIn the following list, look for the VHD path name you got from Appveyor and then click on it.\nCopy the whole URL from the top of the subsequent window.\n\n\n\n\n\n\n\nCopy the image using the Copy Master Image PowerShell script.\n\nIt is essential to copy the VM because if you spin up a VM against an image that image cannot at the same time be used by AppVeyor.\nUse the storage account name, key, and URI obtained from Azure to run this script.\nSee Step 3 for URI & when prompted, press enter to use same storage account as destination.\nUse default destination container name `(images)`\nAlso, when naming the copy, use a name that indicates what the new image will contain (if that has changed) and date stamp.\nEx. `libcc-20core-vs2017-15.9-2019-04-15.vhd`\n\n\n\n\nGo into Azure and get the URI for the newly created image as described in a previous step\n\n\n\nSpin up a new VM using the Create Master VM from VHD PowerShell.\n\nFrom PowerShell, execute `ps1` file with `./create_master_vm_from_vhd.ps1`\nYou will need the credential information available in the AppVeyor build cloud definition.\nThis includes:\nClient ID\nClient Secret\nTenant ID\nSubscription ID\nResource Group\nVirtual Network\n\n\n\n\nYou will also need to specify\nMaster VM name - just a unique name to identify the temporary VM\nMaster VM size - use `Standard_F32s_v2`\nMaster VHD URI - use URI obtained @ end of previous step\nLocation use `East US`\n\n\n\n\n\nLog back into Azure and find the VM you just created in Home < Virtual Machines < `$YOUR_NEW_VM`\n\nYou can download a RDP (Remote Desktop) file to access the VM.\n\n\n\nUsing Microsoft Remote Desktop, click `Connect` to connect to the VM.\n\nCredentials for logging into the VM are found in LastPass under the `AppVeyor Enterprise master VM` credentials.\n\n\n\nModify the VM as required.\n\n\nShut down the VM and then delete it in Azure.\n\n",
    "tag": "electron"
  },
  {
    "title": "ipcMain",
    "source": "https://github.com/electron/electron/tree/main/docs/api/ipc-main.md",
    "content": "\ntitle: \"ipcMain\"\ndescription: \"Communicate asynchronously from the main process to renderer processes.\"\nslug: ipc-main\nhide_title: false\n\nipcMain\n\nCommunicate asynchronously from the main process to renderer processes.\n\nProcess: Main\nThe `ipcMain` module is an Event Emitter. When used in the main\nprocess, it handles asynchronous and synchronous messages sent from a renderer\nprocess (web page). Messages sent from a renderer will be emitted to this\nmodule.\nFor usage examples, check out the IPC tutorial.\nSending messages\nIt is also possible to send messages from the main process to the renderer\nprocess, see webContents.send for more information.\n\nWhen sending a message, the event name is the `channel`.\nTo reply to a synchronous message, you need to set `event.returnValue`.\nTo send an asynchronous message back to the sender, you can use\n  `event.reply(...)`.  This helper method will automatically handle messages\n  coming from frames that aren't the main frame (e.g. iframes) whereas\n  `event.sender.send(...)` will always send to the main frame.\n\nMethods\nThe `ipcMain` module has the following method to listen for events:\n`ipcMain.on(channel, listener)`\n\n`channel` string\n`listener` Function\n`event` IpcMainEvent\n`...args` any[]\n\nListens to `channel`, when a new message arrives `listener` would be called with\n`listener(event, args...)`.\n`ipcMain.once(channel, listener)`\n\n`channel` string\n`listener` Function\n`event` IpcMainEvent\n`...args` any[]\n\nAdds a one time `listener` function for the event. This `listener` is invoked\nonly the next time a message is sent to `channel`, after which it is removed.\n`ipcMain.removeListener(channel, listener)`\n\n`channel` string\n`listener` Function\n`...args` any[]\n\nRemoves the specified `listener` from the listener array for the specified\n`channel`.\n`ipcMain.removeAllListeners([channel])`\n\n`channel` string (optional)\n\nRemoves listeners of the specified `channel`.\n`ipcMain.handle(channel, listener)`\n\n`channel` string\n`listener` Function<Promise\\<void> | any>\n`event` [IpcMainInvokeEvent][ipc-main-invoke-event]\n`...args` any[]\n\nAdds a handler for an `invoke`able IPC. This handler will be called whenever a\nrenderer calls `ipcRenderer.invoke(channel, ...args)`.\nIf `listener` returns a Promise, the eventual result of the promise will be\nreturned as a reply to the remote caller. Otherwise, the return value of the\nlistener will be used as the value of the reply.\n`js title='Main Process'\nipcMain.handle('my-invokable-ipc', async (event, ...args) => {\n  const result = await somePromise(...args)\n  return result\n})`\n`js title='Renderer Process'\nasync () => {\n  const result = await ipcRenderer.invoke('my-invokable-ipc', arg1, arg2)\n  // ...\n}`\nThe `event` that is passed as the first argument to the handler is the same as\nthat passed to a regular event listener. It includes information about which\nWebContents is the source of the invoke request.\nErrors thrown through `handle` in the main process are not transparent as they\nare serialized and only the `message` property from the original error is\nprovided to the renderer process. Please refer to\n#24427 for details.\n`ipcMain.handleOnce(channel, listener)`\n\n`channel` string\n`listener` Function<Promise\\<void> | any>\n`event` IpcMainInvokeEvent\n`...args` any[]\n\nHandles a single `invoke`able IPC message, then removes the listener. See\n`ipcMain.handle(channel, listener)`.\n`ipcMain.removeHandler(channel)`\n\n`channel` string\n\nRemoves any handler for `channel`, if present.\nIpcMainEvent object\nThe documentation for the `event` object passed to the `callback` can be found\nin the ipc-main-event structure docs.\nIpcMainInvokeEvent object\nThe documentation for the `event` object passed to `handle` callbacks can be\nfound in the [`ipc-main-invoke-event`][ipc-main-invoke-event]\nstructure docs.",
    "tag": "electron"
  },
  {
    "title": "desktopCapturer",
    "source": "https://github.com/electron/electron/tree/main/docs/api/desktop-capturer.md",
    "content": "desktopCapturer\n\nAccess information about media sources that can be used to capture audio and\nvideo from the desktop using the [`navigator.mediaDevices.getUserMedia`][] API.\n\nProcess: Main\nThe following example shows how to capture video from a desktop window whose\ntitle is `Electron`:\n```javascript\n// In the main process.\nconst { desktopCapturer } = require('electron')\ndesktopCapturer.getSources({ types: ['window', 'screen'] }).then(async sources => {\n  for (const source of sources) {\n    if (source.name === 'Electron') {\n      mainWindow.webContents.send('SET_SOURCE', source.id)\n      return\n    }\n  }\n})\n```\n```javascript\n// In the preload script.\nconst { ipcRenderer } = require('electron')\nipcRenderer.on('SET_SOURCE', async (event, sourceId) => {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: false,\n      video: {\n        mandatory: {\n          chromeMediaSource: 'desktop',\n          chromeMediaSourceId: sourceId,\n          minWidth: 1280,\n          maxWidth: 1280,\n          minHeight: 720,\n          maxHeight: 720\n        }\n      }\n    })\n    handleStream(stream)\n  } catch (e) {\n    handleError(e)\n  }\n})\nfunction handleStream (stream) {\n  const video = document.querySelector('video')\n  video.srcObject = stream\n  video.onloadedmetadata = (e) => video.play()\n}\nfunction handleError (e) {\n  console.log(e)\n}\n```\nTo capture video from a source provided by `desktopCapturer` the constraints\npassed to [`navigator.mediaDevices.getUserMedia`][] must include\n`chromeMediaSource: 'desktop'`, and `audio: false`.\nTo capture both audio and video from the entire desktop the constraints passed\nto [`navigator.mediaDevices.getUserMedia`][] must include `chromeMediaSource: 'desktop'`,\nfor both `audio` and `video`, but should not include a `chromeMediaSourceId` constraint.\n`javascript\nconst constraints = {\n  audio: {\n    mandatory: {\n      chromeMediaSource: 'desktop'\n    }\n  },\n  video: {\n    mandatory: {\n      chromeMediaSource: 'desktop'\n    }\n  }\n}`\nMethods\nThe `desktopCapturer` module has the following methods:\n`desktopCapturer.getSources(options)`\n\n`options` Object\n`types` string[] - An array of strings that lists the types of desktop sources\n    to be captured, available types are `screen` and `window`.\n`thumbnailSize` Size (optional) - The size that the media source thumbnail\n    should be scaled to. Default is `150` x `150`. Set width or height to 0 when you do not need\n    the thumbnails. This will save the processing time required for capturing the content of each\n    window and screen.\n`fetchWindowIcons` boolean (optional) - Set to true to enable fetching window icons. The default\n    value is false. When false the appIcon property of the sources return null. Same if a source has\n    the type screen.\n\nReturns `Promise<DesktopCapturerSource[]>` - Resolves with an array of DesktopCapturerSource objects, each `DesktopCapturerSource` represents a screen or an individual window that can be captured.\nNote Capturing the screen contents requires user consent on macOS 10.15 Catalina or higher,\nwhich can detected by [`systemPreferences.getMediaAccessStatus`][].\nCaveats\n`navigator.mediaDevices.getUserMedia` does not work on macOS for audio capture due to a fundamental limitation whereby apps that want to access the system's audio require a signed kernel extension. Chromium, and by extension Electron, does not provide this.",
    "tag": "electron"
  },
  {
    "title": "webContents",
    "source": "https://github.com/electron/electron/tree/main/docs/api/web-contents.md",
    "content": "webContents\n\nRender and control web pages.\n\nProcess: Main\n`webContents` is an EventEmitter.\nIt is responsible for rendering and controlling a web page and is a property of\nthe BrowserWindow object. An example of accessing the\n`webContents` object:\n```javascript\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({ width: 800, height: 1500 })\nwin.loadURL('http://github.com')\nconst contents = win.webContents\nconsole.log(contents)\n```\nMethods\nThese methods can be accessed from the `webContents` module:\n`javascript\nconst { webContents } = require('electron')\nconsole.log(webContents)`\n`webContents.getAllWebContents()`\nReturns `WebContents[]` - An array of all `WebContents` instances. This will contain web contents\nfor all windows, webviews, opened devtools, and devtools extension background pages.\n`webContents.getFocusedWebContents()`\nReturns `WebContents` | null - The web contents that is focused in this application, otherwise\nreturns `null`.\n`webContents.fromId(id)`\n\n`id` Integer\n\nReturns `WebContents` | undefined - A WebContents instance with the given ID, or\n`undefined` if there is no WebContents associated with the given ID.\n`webContents.fromFrame(frame)`\n\n`frame` WebFrameMain\n\nReturns `WebContents` | undefined - A WebContents instance with the given WebFrameMain, or\n`undefined` if there is no WebContents associated with the given WebFrameMain.\n`webContents.fromDevToolsTargetId(targetId)`\n\n`targetId` string - The Chrome DevTools Protocol TargetID associated with the WebContents instance.\n\nReturns `WebContents` | undefined - A WebContents instance with the given TargetID, or\n`undefined` if there is no WebContents associated with the given TargetID.\nWhen communicating with the Chrome DevTools Protocol,\nit can be useful to lookup a WebContents instance based on its assigned TargetID.\n`js\nasync function lookupTargetId (browserWindow) {\n  const wc = browserWindow.webContents\n  await wc.debugger.attach('1.3')\n  const { targetInfo } = await wc.debugger.sendCommand('Target.getTargetInfo')\n  const { targetId } = targetInfo\n  const targetWebContents = await webContents.fromDevToolsTargetId(targetId)\n}`\nClass: WebContents\n\nRender and control the contents of a BrowserWindow instance.\n\nProcess: Main\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\nInstance Events\nEvent: 'did-finish-load'\nEmitted when the navigation is done, i.e. the spinner of the tab has stopped\nspinning, and the `onload` event was dispatched.\nEvent: 'did-fail-load'\nReturns:\n\n`event` Event\n`errorCode` Integer\n`errorDescription` string\n`validatedURL` string\n`isMainFrame` boolean\n`frameProcessId` Integer\n`frameRoutingId` Integer\n\nThis event is like `did-finish-load` but emitted when the load failed.\nThe full list of error codes and their meaning is available here.\nEvent: 'did-fail-provisional-load'\nReturns:\n\n`event` Event\n`errorCode` Integer\n`errorDescription` string\n`validatedURL` string\n`isMainFrame` boolean\n`frameProcessId` Integer\n`frameRoutingId` Integer\n\nThis event is like `did-fail-load` but emitted when the load was cancelled\n(e.g. `window.stop()` was invoked).\nEvent: 'did-frame-finish-load'\nReturns:\n\n`event` Event\n`isMainFrame` boolean\n`frameProcessId` Integer\n`frameRoutingId` Integer\n\nEmitted when a frame has done navigation.\nEvent: 'did-start-loading'\nCorresponds to the points in time when the spinner of the tab started spinning.\nEvent: 'did-stop-loading'\nCorresponds to the points in time when the spinner of the tab stopped spinning.\nEvent: 'dom-ready'\nEmitted when the document in the top-level frame is loaded.\nEvent: 'page-title-updated'\nReturns:\n\n`event` Event\n`title` string\n`explicitSet` boolean\n\nFired when page title is set during navigation. `explicitSet` is false when\ntitle is synthesized from file url.\nEvent: 'page-favicon-updated'\nReturns:\n\n`event` Event\n`favicons` string[] - Array of URLs.\n\nEmitted when page receives favicon urls.\nEvent: 'content-bounds-updated'\nReturns:\n\n`event` Event\n`bounds` Rectangle - requested new content bounds\n\nEmitted when the page calls `window.moveTo`, `window.resizeTo` or related APIs.\nBy default, this will move the window. To prevent that behavior, call\n`event.preventDefault()`.\nEvent: 'did-create-window'\nReturns:\n\n`window` BrowserWindow\n`details` Object\n`url` string - URL for the created window.\n`frameName` string - Name given to the created window in the\n     `window.open()` call.\n`options` BrowserWindowConstructorOptions - The options used to create the\n    BrowserWindow. They are merged in increasing precedence: parsed options\n    from the `features` string from `window.open()`, security-related\n    webPreferences inherited from the parent, and options given by\n    webContents.setWindowOpenHandler.\n    Unrecognized options are not filtered out.\n`referrer` Referrer - The referrer that will be\n    passed to the new window. May or may not result in the `Referer` header\n    being sent, depending on the referrer policy.\n`postBody` PostBody (optional) - The post data\n    that will be sent to the new window, along with the appropriate headers\n    that will be set. If no post data is to be sent, the value will be `null`.\n    Only defined when the window is being created by a form that set\n    `target=_blank`.\n`disposition` string - Can be `default`, `foreground-tab`,\n    `background-tab`, `new-window`, `save-to-disk` and `other`.\n\nEmitted after successful creation of a window via `window.open` in the renderer.\nNot emitted if the creation of the window is canceled from\nwebContents.setWindowOpenHandler.\nSee window.open() for more details and how to use this in conjunction with `webContents.setWindowOpenHandler`.\nEvent: 'will-navigate'\nReturns:\n\n`event` Event\n`url` string\n\nEmitted when a user or the page wants to start navigation. It can happen when\nthe `window.location` object is changed or a user clicks a link in the page.\nThis event will not emit when the navigation is started programmatically with\nAPIs like `webContents.loadURL` and `webContents.back`.\nIt is also not emitted for in-page navigations, such as clicking anchor links\nor updating the `window.location.hash`. Use `did-navigate-in-page` event for\nthis purpose.\nCalling `event.preventDefault()` will prevent the navigation.\nEvent: 'did-start-navigation'\nReturns:\n\n`event` Event\n`url` string\n`isInPlace` boolean\n`isMainFrame` boolean\n`frameProcessId` Integer\n`frameRoutingId` Integer\n\nEmitted when any frame (including main) starts navigating. `isInPlace` will be\n`true` for in-page navigations.\nEvent: 'will-redirect'\nReturns:\n\n`event` Event\n`url` string\n`isInPlace` boolean\n`isMainFrame` boolean\n`frameProcessId` Integer\n`frameRoutingId` Integer\n\nEmitted when a server side redirect occurs during navigation.  For example a 302\nredirect.\nThis event will be emitted after `did-start-navigation` and always before the\n`did-redirect-navigation` event for the same navigation.\nCalling `event.preventDefault()` will prevent the navigation (not just the\nredirect).\nEvent: 'did-redirect-navigation'\nReturns:\n\n`event` Event\n`url` string\n`isInPlace` boolean\n`isMainFrame` boolean\n`frameProcessId` Integer\n`frameRoutingId` Integer\n\nEmitted after a server side redirect occurs during navigation.  For example a 302\nredirect.\nThis event cannot be prevented, if you want to prevent redirects you should\ncheckout out the `will-redirect` event above.\nEvent: 'did-navigate'\nReturns:\n\n`event` Event\n`url` string\n`httpResponseCode` Integer - -1 for non HTTP navigations\n`httpStatusText` string - empty for non HTTP navigations\n\nEmitted when a main frame navigation is done.\nThis event is not emitted for in-page navigations, such as clicking anchor links\nor updating the `window.location.hash`. Use `did-navigate-in-page` event for\nthis purpose.\nEvent: 'did-frame-navigate'\nReturns:\n\n`event` Event\n`url` string\n`httpResponseCode` Integer - -1 for non HTTP navigations\n`httpStatusText` string - empty for non HTTP navigations,\n`isMainFrame` boolean\n`frameProcessId` Integer\n`frameRoutingId` Integer\n\nEmitted when any frame navigation is done.\nThis event is not emitted for in-page navigations, such as clicking anchor links\nor updating the `window.location.hash`. Use `did-navigate-in-page` event for\nthis purpose.\nEvent: 'did-navigate-in-page'\nReturns:\n\n`event` Event\n`url` string\n`isMainFrame` boolean\n`frameProcessId` Integer\n`frameRoutingId` Integer\n\nEmitted when an in-page navigation happened in any frame.\nWhen in-page navigation happens, the page URL changes but does not cause\nnavigation outside of the page. Examples of this occurring are when anchor links\nare clicked or when the DOM `hashchange` event is triggered.\nEvent: 'will-prevent-unload'\nReturns:\n\n`event` Event\n\nEmitted when a `beforeunload` event handler is attempting to cancel a page unload.\nCalling `event.preventDefault()` will ignore the `beforeunload` event handler\nand allow the page to be unloaded.\n`javascript\nconst { BrowserWindow, dialog } = require('electron')\nconst win = new BrowserWindow({ width: 800, height: 600 })\nwin.webContents.on('will-prevent-unload', (event) => {\n  const choice = dialog.showMessageBoxSync(win, {\n    type: 'question',\n    buttons: ['Leave', 'Stay'],\n    title: 'Do you want to leave this site?',\n    message: 'Changes you made may not be saved.',\n    defaultId: 0,\n    cancelId: 1\n  })\n  const leave = (choice === 0)\n  if (leave) {\n    event.preventDefault()\n  }\n})`\nNote: This will be emitted for `BrowserViews` but will not be respected - this is because we have chosen not to tie the `BrowserView` lifecycle to its owning BrowserWindow should one exist per the specification.\nEvent: 'crashed' Deprecated\nReturns:\n\n`event` Event\n`killed` boolean\n\nEmitted when the renderer process crashes or is killed.\nDeprecated: This event is superceded by the `render-process-gone` event\nwhich contains more information about why the render process disappeared. It\nisn't always because it crashed.  The `killed` boolean can be replaced by\nchecking `reason === 'killed'` when you switch to that event.\nEvent: 'render-process-gone'\nReturns:\n\n`event` Event\n`details` Object\n`reason` string - The reason the render process is gone.  Possible values:\n`clean-exit` - Process exited with an exit code of zero\n`abnormal-exit` - Process exited with a non-zero exit code\n`killed` - Process was sent a SIGTERM or otherwise killed externally\n`crashed` - Process crashed\n`oom` - Process ran out of memory\n`launch-failed` - Process never successfully launched\n`integrity-failure` - Windows code integrity checks failed\n\n\n`exitCode` Integer - The exit code of the process, unless `reason` is\n    `launch-failed`, in which case `exitCode` will be a platform-specific\n    launch failure error code.\n\nEmitted when the renderer process unexpectedly disappears.  This is normally\nbecause it was crashed or killed.\nEvent: 'unresponsive'\nEmitted when the web page becomes unresponsive.\nEvent: 'responsive'\nEmitted when the unresponsive web page becomes responsive again.\nEvent: 'plugin-crashed'\nReturns:\n\n`event` Event\n`name` string\n`version` string\n\nEmitted when a plugin process has crashed.\nEvent: 'destroyed'\nEmitted when `webContents` is destroyed.\nEvent: 'input-event'\nReturns:\n\n`event` Event\n`inputEvent` InputEvent\n\nEmitted when an input event is sent to the WebContents. See\nInputEvent for details.\nEvent: 'before-input-event'\nReturns:\n\n`event` Event\n`input` Object - Input properties.\n`type` string - Either `keyUp` or `keyDown`.\n`key` string - Equivalent to KeyboardEvent.key.\n`code` string - Equivalent to KeyboardEvent.code.\n`isAutoRepeat` boolean - Equivalent to KeyboardEvent.repeat.\n`isComposing` boolean - Equivalent to KeyboardEvent.isComposing.\n`shift` boolean - Equivalent to KeyboardEvent.shiftKey.\n`control` boolean - Equivalent to KeyboardEvent.controlKey.\n`alt` boolean - Equivalent to KeyboardEvent.altKey.\n`meta` boolean - Equivalent to KeyboardEvent.metaKey.\n`location` number - Equivalent to KeyboardEvent.location.\n`modifiers` string[] - See InputEvent.modifiers.\n\nEmitted before dispatching the `keydown` and `keyup` events in the page.\nCalling `event.preventDefault` will prevent the page `keydown`/`keyup` events\nand the menu shortcuts.\nTo only prevent the menu shortcuts, use\nsetIgnoreMenuShortcuts:\n```javascript\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({ width: 800, height: 600 })\nwin.webContents.on('before-input-event', (event, input) => {\n  // For example, only enable application menu keyboard shortcuts when\n  // Ctrl/Cmd are down.\n  win.webContents.setIgnoreMenuShortcuts(!input.control && !input.meta)\n})\n```\nEvent: 'enter-html-full-screen'\nEmitted when the window enters a full-screen state triggered by HTML API.\nEvent: 'leave-html-full-screen'\nEmitted when the window leaves a full-screen state triggered by HTML API.\nEvent: 'zoom-changed'\nReturns:\n\n`event` Event\n`zoomDirection` string - Can be `in` or `out`.\n\nEmitted when the user is requesting to change the zoom level using the mouse wheel.\nEvent: 'blur'\nEmitted when the `WebContents` loses focus.\nEvent: 'focus'\nEmitted when the `WebContents` gains focus.\nNote that on macOS, having focus means the `WebContents` is the first responder\nof window, so switching focus between windows would not trigger the `focus` and\n`blur` events of `WebContents`, as the first responder of each window is not\nchanged.\nThe `focus` and `blur` events of `WebContents` should only be used to detect\nfocus change between different `WebContents` and `BrowserView` in the same\nwindow.\nEvent: 'devtools-open-url'\nReturns:\n\n`url` string - URL of the link that was clicked or selected.\n\nEmitted when a link is clicked in DevTools or 'Open in new tab' is selected for a link in its context menu.\nEvent: 'devtools-opened'\nEmitted when DevTools is opened.\nEvent: 'devtools-closed'\nEmitted when DevTools is closed.\nEvent: 'devtools-focused'\nEmitted when DevTools is focused / opened.\nEvent: 'certificate-error'\nReturns:\n\n`event` Event\n`url` string\n`error` string - The error code.\n`certificate` Certificate\n`callback` Function\n`isTrusted` boolean - Indicates whether the certificate can be considered trusted.\n`isMainFrame` boolean\n\nEmitted when failed to verify the `certificate` for `url`.\nThe usage is the same with the certificate-error event of\napp.\nEvent: 'select-client-certificate'\nReturns:\n\n`event` Event\n`url` URL\n`certificateList` Certificate[]\n`callback` Function\n`certificate` Certificate - Must be a certificate from the given list.\n\nEmitted when a client certificate is requested.\nThe usage is the same with the select-client-certificate event of\napp.\nEvent: 'login'\nReturns:\n\n`event` Event\n`authenticationResponseDetails` Object\n`url` URL\n`authInfo` Object\n`isProxy` boolean\n`scheme` string\n`host` string\n`port` Integer\n`realm` string\n`callback` Function\n`username` string (optional)\n`password` string (optional)\n\nEmitted when `webContents` wants to do basic auth.\nThe usage is the same with the login event of app.\nEvent: 'found-in-page'\nReturns:\n\n`event` Event\n`result` Object\n`requestId` Integer\n`activeMatchOrdinal` Integer - Position of the active match.\n`matches` Integer - Number of Matches.\n`selectionArea` Rectangle - Coordinates of first match region.\n`finalUpdate` boolean\n\nEmitted when a result is available for\nwebContents.findInPage request.\nEvent: 'media-started-playing'\nEmitted when media starts playing.\nEvent: 'media-paused'\nEmitted when media is paused or done playing.\nEvent: 'did-change-theme-color'\nReturns:\n\n`event` Event\n`color` (string | null) - Theme color is in format of '#rrggbb'. It is `null` when no theme color is set.\n\nEmitted when a page's theme color changes. This is usually due to encountering\na meta tag:\n`html\n<meta name='theme-color' content='#ff0000'>`\nEvent: 'update-target-url'\nReturns:\n\n`event` Event\n`url` string\n\nEmitted when mouse moves over a link or the keyboard moves the focus to a link.\nEvent: 'cursor-changed'\nReturns:\n\n`event` Event\n`type` string\n`image` NativeImage (optional)\n`scale` Float (optional) - scaling factor for the custom cursor.\n`size` Size (optional) - the size of the `image`.\n`hotspot` Point (optional) - coordinates of the custom cursor's hotspot.\n\nEmitted when the cursor's type changes. The `type` parameter can be `default`,\n`crosshair`, `pointer`, `text`, `wait`, `help`, `e-resize`, `n-resize`,\n`ne-resize`, `nw-resize`, `s-resize`, `se-resize`, `sw-resize`, `w-resize`,\n`ns-resize`, `ew-resize`, `nesw-resize`, `nwse-resize`, `col-resize`,\n`row-resize`, `m-panning`, `e-panning`, `n-panning`, `ne-panning`, `nw-panning`,\n`s-panning`, `se-panning`, `sw-panning`, `w-panning`, `move`, `vertical-text`,\n`cell`, `context-menu`, `alias`, `progress`, `nodrop`, `copy`, `none`,\n`not-allowed`, `zoom-in`, `zoom-out`, `grab`, `grabbing` or `custom`.\nIf the `type` parameter is `custom`, the `image` parameter will hold the custom\ncursor image in a NativeImage, and `scale`, `size` and `hotspot` will hold\nadditional information about the custom cursor.\nEvent: 'context-menu'\nReturns:\n\n`event` Event\n`params` Object\n`x` Integer - x coordinate.\n`y` Integer - y coordinate.\n`frame` WebFrameMain - Frame from which the context menu was invoked.\n`linkURL` string - URL of the link that encloses the node the context menu\n    was invoked on.\n`linkText` string - Text associated with the link. May be an empty\n    string if the contents of the link are an image.\n`pageURL` string - URL of the top level page that the context menu was\n    invoked on.\n`frameURL` string - URL of the subframe that the context menu was invoked\n    on.\n`srcURL` string - Source URL for the element that the context menu\n    was invoked on. Elements with source URLs are images, audio and video.\n`mediaType` string - Type of the node the context menu was invoked on. Can\n    be `none`, `image`, `audio`, `video`, `canvas`, `file` or `plugin`.\n`hasImageContents` boolean - Whether the context menu was invoked on an image\n    which has non-empty contents.\n`isEditable` boolean - Whether the context is editable.\n`selectionText` string - Text of the selection that the context menu was\n    invoked on.\n`titleText` string - Title text of the selection that the context menu was\n    invoked on.\n`altText` string - Alt text of the selection that the context menu was\n    invoked on.\n`suggestedFilename` string - Suggested filename to be used when saving file through 'Save\n    Link As' option of context menu.\n`selectionRect` Rectangle - Rect representing the coordinates in the document space of the selection.\n`selectionStartOffset` number - Start position of the selection text.\n`referrerPolicy` Referrer - The referrer policy of the frame on which the menu is invoked.\n`misspelledWord` string - The misspelled word under the cursor, if any.\n`dictionarySuggestions` string[] - An array of suggested words to show the\n    user to replace the `misspelledWord`.  Only available if there is a misspelled\n    word and spellchecker is enabled.\n`frameCharset` string - The character encoding of the frame on which the\n    menu was invoked.\n`inputFieldType` string - If the context menu was invoked on an input\n    field, the type of that field. Possible values are `none`, `plainText`,\n    `password`, `other`.\n`spellcheckEnabled` boolean - If the context is editable, whether or not spellchecking is enabled.\n`menuSourceType` string - Input source that invoked the context menu.\n    Can be `none`, `mouse`, `keyboard`, `touch`, `touchMenu`, `longPress`, `longTap`, `touchHandle`, `stylus`, `adjustSelection`, or `adjustSelectionReset`.\n`mediaFlags` Object - The flags for the media element the context menu was\n    invoked on.\n`inError` boolean - Whether the media element has crashed.\n`isPaused` boolean - Whether the media element is paused.\n`isMuted` boolean - Whether the media element is muted.\n`hasAudio` boolean - Whether the media element has audio.\n`isLooping` boolean - Whether the media element is looping.\n`isControlsVisible` boolean - Whether the media element's controls are\n  visible.\n`canToggleControls` boolean - Whether the media element's controls are\n  toggleable.\n`canPrint` boolean - Whether the media element can be printed.\n`canSave` boolean - Whether or not the media element can be downloaded.\n`canShowPictureInPicture` boolean - Whether the media element can show picture-in-picture.\n`isShowingPictureInPicture` boolean - Whether the media element is currently showing picture-in-picture.\n`canRotate` boolean - Whether the media element can be rotated.\n`canLoop` boolean - Whether the media element can be looped.\n\n\n`editFlags` Object - These flags indicate whether the renderer believes it\n    is able to perform the corresponding action.\n`canUndo` boolean - Whether the renderer believes it can undo.\n`canRedo` boolean - Whether the renderer believes it can redo.\n`canCut` boolean - Whether the renderer believes it can cut.\n`canCopy` boolean - Whether the renderer believes it can copy.\n`canPaste` boolean - Whether the renderer believes it can paste.\n`canDelete` boolean - Whether the renderer believes it can delete.\n`canSelectAll` boolean - Whether the renderer believes it can select all.\n`canEditRichly` boolean - Whether the renderer believes it can edit text richly.\n\n\n\nEmitted when there is a new context menu that needs to be handled.\nEvent: 'select-bluetooth-device'\nReturns:\n\n`event` Event\n`devices` BluetoothDevice[]\n`callback` Function\n`deviceId` string\n\nEmitted when bluetooth device needs to be selected on call to\n`navigator.bluetooth.requestDevice`. To use `navigator.bluetooth` api\n`webBluetooth` should be enabled. If `event.preventDefault` is not called,\nfirst available device will be selected. `callback` should be called with\n`deviceId` to be selected, passing empty string to `callback` will\ncancel the request.\nIf no event listener is added for this event, all bluetooth requests will be cancelled.\n```javascript\nconst { app, BrowserWindow } = require('electron')\nlet win = null\napp.commandLine.appendSwitch('enable-experimental-web-platform-features')\napp.whenReady().then(() => {\n  win = new BrowserWindow({ width: 800, height: 600 })\n  win.webContents.on('select-bluetooth-device', (event, deviceList, callback) => {\n    event.preventDefault()\n    const result = deviceList.find((device) => {\n      return device.deviceName === 'test'\n    })\n    if (!result) {\n      callback('')\n    } else {\n      callback(result.deviceId)\n    }\n  })\n})\n```\nEvent: 'paint'\nReturns:\n\n`event` Event\n`dirtyRect` Rectangle\n`image` NativeImage - The image data of the whole frame.\n\nEmitted when a new frame is generated. Only the dirty area is passed in the\nbuffer.\n```javascript\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({ webPreferences: { offscreen: true } })\nwin.webContents.on('paint', (event, dirty, image) => {\n  // updateBitmap(dirty, image.getBitmap())\n})\nwin.loadURL('http://github.com')\n```\nEvent: 'devtools-reload-page'\nEmitted when the devtools window instructs the webContents to reload\nEvent: 'will-attach-webview'\nReturns:\n\n`event` Event\n`webPreferences` WebPreferences - The web preferences that will be used by the guest\n  page. This object can be modified to adjust the preferences for the guest\n  page.\n`params` Record - The other `<webview>` parameters such as the `src` URL.\n  This object can be modified to adjust the parameters of the guest page.\n\nEmitted when a `<webview>`'s web contents is being attached to this web\ncontents. Calling `event.preventDefault()` will destroy the guest page.\nThis event can be used to configure `webPreferences` for the `webContents`\nof a `<webview>` before it's loaded, and provides the ability to set settings\nthat can't be set via `<webview>` attributes.\nEvent: 'did-attach-webview'\nReturns:\n\n`event` Event\n`webContents` WebContents - The guest web contents that is used by the\n  `<webview>`.\n\nEmitted when a `<webview>` has been attached to this web contents.\nEvent: 'console-message'\nReturns:\n\n`event` Event\n`level` Integer - The log level, from 0 to 3. In order it matches `verbose`, `info`, `warning` and `error`.\n`message` string - The actual console message\n`line` Integer - The line number of the source that triggered this console message\n`sourceId` string\n\nEmitted when the associated window logs a console message.\nEvent: 'preload-error'\nReturns:\n\n`event` Event\n`preloadPath` string\n`error` Error\n\nEmitted when the preload script `preloadPath` throws an unhandled exception `error`.\nEvent: 'ipc-message'\nReturns:\n\n`event` IpcMainEvent\n`channel` string\n`...args` any[]\n\nEmitted when the renderer process sends an asynchronous message via `ipcRenderer.send()`.\nSee also webContents.ipc, which provides an IpcMain-like interface for responding to IPC messages specifically from this WebContents.\nEvent: 'ipc-message-sync'\nReturns:\n\n`event` IpcMainEvent\n`channel` string\n`...args` any[]\n\nEmitted when the renderer process sends a synchronous message via `ipcRenderer.sendSync()`.\nSee also webContents.ipc, which provides an IpcMain-like interface for responding to IPC messages specifically from this WebContents.\nEvent: 'preferred-size-changed'\nReturns:\n\n`event` Event\n`preferredSize` Size - The minimum size needed to\n  contain the layout of the document\u2014without requiring scrolling.\n\nEmitted when the `WebContents` preferred size has changed.\nThis event will only be emitted when `enablePreferredSizeMode` is set to `true`\nin `webPreferences`.\nEvent: 'frame-created'\nReturns:\n\n`event` Event\n`details` Object\n`frame` WebFrameMain\n\nEmitted when the mainFrame, an `<iframe>`, or a nested `<iframe>` is loaded within the page.\nInstance Methods\n`contents.loadURL(url[, options])`\n\n`url` string\n`options` Object (optional)\n`httpReferrer` (string | Referrer) (optional) - An HTTP Referrer url.\n`userAgent` string (optional) - A user agent originating the request.\n`extraHeaders` string (optional) - Extra headers separated by \"\\n\".\n`postData` (UploadRawData | UploadFile)[] (optional)\n`baseURLForDataURL` string (optional) - Base url (with trailing path separator) for files to be loaded by the data url. This is needed only if the specified `url` is a data url and needs to load other files.\n\nReturns `Promise<void>` - the promise will resolve when the page has finished loading\n(see did-finish-load), and rejects\nif the page fails to load (see\ndid-fail-load). A noop rejection handler is already attached, which avoids unhandled rejection errors.\nLoads the `url` in the window. The `url` must contain the protocol prefix,\ne.g. the `http://` or `file://`. If the load should bypass http cache then\nuse the `pragma` header to achieve it.\n`javascript\nconst { webContents } = require('electron')\nconst options = { extraHeaders: 'pragma: no-cache\\n' }\nwebContents.loadURL('https://github.com', options)`\n`contents.loadFile(filePath[, options])`\n\n`filePath` string\n`options` Object (optional)\n`query` Record (optional) - Passed to `url.format()`.\n`search` string (optional) - Passed to `url.format()`.\n`hash` string (optional) - Passed to `url.format()`.\n\nReturns `Promise<void>` - the promise will resolve when the page has finished loading\n(see did-finish-load), and rejects\nif the page fails to load (see did-fail-load).\nLoads the given file in the window, `filePath` should be a path to\nan HTML file relative to the root of your application.  For instance\nan app structure like this:\n`sh\n| root\n| - package.json\n| - src\n|   - main.js\n|   - index.html`\nWould require code like this\n`js\nwin.loadFile('src/index.html')`\n`contents.downloadURL(url)`\n\n`url` string\n\nInitiates a download of the resource at `url` without navigating. The\n`will-download` event of `session` will be triggered.\n`contents.getURL()`\nReturns `string` - The URL of the current web page.\n`javascript\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({ width: 800, height: 600 })\nwin.loadURL('http://github.com').then(() => {\n  const currentURL = win.webContents.getURL()\n  console.log(currentURL)\n})`\n`contents.getTitle()`\nReturns `string` - The title of the current web page.\n`contents.isDestroyed()`\nReturns `boolean` - Whether the web page is destroyed.\n`contents.close([opts])`\n\n`opts` Object (optional)\n`waitForBeforeUnload` boolean - if true, fire the `beforeunload` event\n    before closing the page. If the page prevents the unload, the WebContents\n    will not be closed. The will-prevent-unload\n    will be fired if the page requests prevention of unload.\n\nCloses the page, as if the web content had called `window.close()`.\nIf the page is successfully closed (i.e. the unload is not prevented by the\npage, or `waitForBeforeUnload` is false or unspecified), the WebContents will\nbe destroyed and no longer usable. The destroyed event\nwill be emitted.\n`contents.focus()`\nFocuses the web page.\n`contents.isFocused()`\nReturns `boolean` - Whether the web page is focused.\n`contents.isLoading()`\nReturns `boolean` - Whether web page is still loading resources.\n`contents.isLoadingMainFrame()`\nReturns `boolean` - Whether the main frame (and not just iframes or frames within it) is\nstill loading.\n`contents.isWaitingForResponse()`\nReturns `boolean` - Whether the web page is waiting for a first-response from the main\nresource of the page.\n`contents.stop()`\nStops any pending navigation.\n`contents.reload()`\nReloads the current web page.\n`contents.reloadIgnoringCache()`\nReloads current page and ignores cache.\n`contents.canGoBack()`\nReturns `boolean` - Whether the browser can go back to previous web page.\n`contents.canGoForward()`\nReturns `boolean` - Whether the browser can go forward to next web page.\n`contents.canGoToOffset(offset)`\n\n`offset` Integer\n\nReturns `boolean` - Whether the web page can go to `offset`.\n`contents.clearHistory()`\nClears the navigation history.\n`contents.goBack()`\nMakes the browser go back a web page.\n`contents.goForward()`\nMakes the browser go forward a web page.\n`contents.goToIndex(index)`\n\n`index` Integer\n\nNavigates browser to the specified absolute web page index.\n`contents.goToOffset(offset)`\n\n`offset` Integer\n\nNavigates to the specified offset from the \"current entry\".\n`contents.isCrashed()`\nReturns `boolean` - Whether the renderer process has crashed.\n`contents.forcefullyCrashRenderer()`\nForcefully terminates the renderer process that is currently hosting this\n`webContents`. This will cause the `render-process-gone` event to be emitted\nwith the `reason=killed || reason=crashed`. Please note that some webContents share renderer\nprocesses and therefore calling this method may also crash the host process\nfor other webContents as well.\nCalling `reload()` immediately after calling this\nmethod will force the reload to occur in a new process. This should be used\nwhen this process is unstable or unusable, for instance in order to recover\nfrom the `unresponsive` event.\n`js\ncontents.on('unresponsive', async () => {\n  const { response } = await dialog.showMessageBox({\n    message: 'App X has become unresponsive',\n    title: 'Do you want to try forcefully reloading the app?',\n    buttons: ['OK', 'Cancel'],\n    cancelId: 1\n  })\n  if (response === 0) {\n    contents.forcefullyCrashRenderer()\n    contents.reload()\n  }\n})`\n`contents.setUserAgent(userAgent)`\n\n`userAgent` string\n\nOverrides the user agent for this web page.\n`contents.getUserAgent()`\nReturns `string` - The user agent for this web page.\n`contents.insertCSS(css[, options])`\n\n`css` string\n`options` Object (optional)\n`cssOrigin` string (optional) - Can be either 'user' or 'author'. Sets the cascade origin of the inserted stylesheet. Default is 'author'.\n\nReturns `Promise<string>` - A promise that resolves with a key for the inserted CSS that can later be used to remove the CSS via `contents.removeInsertedCSS(key)`.\nInjects CSS into the current web page and returns a unique key for the inserted\nstylesheet.\n`js\ncontents.on('did-finish-load', () => {\n  contents.insertCSS('html, body { background-color: #f00; }')\n})`\n`contents.removeInsertedCSS(key)`\n\n`key` string\n\nReturns `Promise<void>` - Resolves if the removal was successful.\nRemoves the inserted CSS from the current web page. The stylesheet is identified\nby its key, which is returned from `contents.insertCSS(css)`.\n`js\ncontents.on('did-finish-load', async () => {\n  const key = await contents.insertCSS('html, body { background-color: #f00; }')\n  contents.removeInsertedCSS(key)\n})`\n`contents.executeJavaScript(code[, userGesture])`\n\n`code` string\n`userGesture` boolean (optional) - Default is `false`.\n\nReturns `Promise<any>` - A promise that resolves with the result of the executed code\nor is rejected if the result of the code is a rejected promise.\nEvaluates `code` in page.\nIn the browser window some HTML APIs like `requestFullScreen` can only be\ninvoked by a gesture from the user. Setting `userGesture` to `true` will remove\nthis limitation.\nCode execution will be suspended until web page stop loading.\n`js\ncontents.executeJavaScript('fetch(\"https://jsonplaceholder.typicode.com/users/1\").then(resp => resp.json())', true)\n  .then((result) => {\n    console.log(result) // Will be the JSON object from the fetch call\n  })`\n`contents.executeJavaScriptInIsolatedWorld(worldId, scripts[, userGesture])`\n\n`worldId` Integer - The ID of the world to run the javascript in, `0` is the default world, `999` is the world used by Electron's `contextIsolation` feature.  You can provide any integer here.\n`scripts` WebSource[]\n`userGesture` boolean (optional) - Default is `false`.\n\nReturns `Promise<any>` - A promise that resolves with the result of the executed code\nor is rejected if the result of the code is a rejected promise.\nWorks like `executeJavaScript` but evaluates `scripts` in an isolated context.\n`contents.setIgnoreMenuShortcuts(ignore)`\n\n`ignore` boolean\n\nIgnore application menu shortcuts while this web contents is focused.\n`contents.setWindowOpenHandler(handler)`\n\n`handler` Function<{action: 'deny'} | {action: 'allow', outlivesOpener?: boolean, overrideBrowserWindowOptions?: BrowserWindowConstructorOptions}>\n`details` Object\n`url` string - The resolved version of the URL passed to `window.open()`. e.g. opening a window with `window.open('foo')` will yield something like `https://the-origin/the/current/path/foo`.\n`frameName` string - Name of the window provided in `window.open()`\n`features` string - Comma separated list of window features provided to `window.open()`.\n`disposition` string - Can be `default`, `foreground-tab`, `background-tab`,\n  `new-window`, `save-to-disk` or `other`.\n`referrer` Referrer - The referrer that will be\n  passed to the new window. May or may not result in the `Referer` header being\n  sent, depending on the referrer policy.\n`postBody` PostBody (optional) - The post data that\n  will be sent to the new window, along with the appropriate headers that will\n  be set. If no post data is to be sent, the value will be `null`. Only defined\n  when the window is being created by a form that set `target=_blank`.\n\n\n\nReturns `{action: 'deny'} | {action: 'allow', outlivesOpener?: boolean, overrideBrowserWindowOptions?: BrowserWindowConstructorOptions}` - `deny` cancels the creation of the new\n  window. `allow` will allow the new window to be created. Specifying `overrideBrowserWindowOptions` allows customization of the created window.\n  By default, child windows are closed when their opener is closed. This can be\n  changed by specifying `outlivesOpener: true`, in which case the opened window\n  will not be closed when its opener is closed.\n  Returning an unrecognized value such as a null, undefined, or an object\n  without a recognized 'action' value will result in a console error and have\n  the same effect as returning `{action: 'deny'}`.\nCalled before creating a window a new window is requested by the renderer, e.g.\nby `window.open()`, a link with `target=\"_blank\"`, shift+clicking on a link, or\nsubmitting a form with `<form target=\"_blank\">`. See\nwindow.open() for more details and how to use this in\nconjunction with `did-create-window`.\n`contents.setAudioMuted(muted)`\n\n`muted` boolean\n\nMute the audio on the current web page.\n`contents.isAudioMuted()`\nReturns `boolean` - Whether this page has been muted.\n`contents.isCurrentlyAudible()`\nReturns `boolean` - Whether audio is currently playing.\n`contents.setZoomFactor(factor)`\n\n`factor` Double - Zoom factor; default is 1.0.\n\nChanges the zoom factor to the specified factor. Zoom factor is\nzoom percent divided by 100, so 300% = 3.0.\nThe factor must be greater than 0.0.\n`contents.getZoomFactor()`\nReturns `number` - the current zoom factor.\n`contents.setZoomLevel(level)`\n\n`level` number - Zoom level.\n\nChanges the zoom level to the specified level. The original size is 0 and each\nincrement above or below represents zooming 20% larger or smaller to default\nlimits of 300% and 50% of original size, respectively. The formula for this is\n`scale := 1.2 ^ level`.\n\nNOTE: The zoom policy at the Chromium level is same-origin, meaning that the\nzoom level for a specific domain propagates across all instances of windows with\nthe same domain. Differentiating the window URLs will make zoom work per-window.\n\n`contents.getZoomLevel()`\nReturns `number` - the current zoom level.\n`contents.setVisualZoomLevelLimits(minimumLevel, maximumLevel)`\n\n`minimumLevel` number\n`maximumLevel` number\n\nReturns `Promise<void>`\nSets the maximum and minimum pinch-to-zoom level.\n\nNOTE: Visual zoom is disabled by default in Electron. To re-enable it, call:\n`js\ncontents.setVisualZoomLevelLimits(1, 3)`\n\n`contents.undo()`\nExecutes the editing command `undo` in web page.\n`contents.redo()`\nExecutes the editing command `redo` in web page.\n`contents.cut()`\nExecutes the editing command `cut` in web page.\n`contents.copy()`\nExecutes the editing command `copy` in web page.\n`contents.copyImageAt(x, y)`\n\n`x` Integer\n`y` Integer\n\nCopy the image at the given position to the clipboard.\n`contents.paste()`\nExecutes the editing command `paste` in web page.\n`contents.pasteAndMatchStyle()`\nExecutes the editing command `pasteAndMatchStyle` in web page.\n`contents.delete()`\nExecutes the editing command `delete` in web page.\n`contents.selectAll()`\nExecutes the editing command `selectAll` in web page.\n`contents.unselect()`\nExecutes the editing command `unselect` in web page.\n`contents.replace(text)`\n\n`text` string\n\nExecutes the editing command `replace` in web page.\n`contents.replaceMisspelling(text)`\n\n`text` string\n\nExecutes the editing command `replaceMisspelling` in web page.\n`contents.insertText(text)`\n\n`text` string\n\nReturns `Promise<void>`\nInserts `text` to the focused element.\n`contents.findInPage(text[, options])`\n\n`text` string - Content to be searched, must not be empty.\n`options` Object (optional)\n`forward` boolean (optional) - Whether to search forward or backward, defaults to `true`.\n`findNext` boolean (optional) - Whether to begin a new text finding session with this request. Should be `true` for initial requests, and `false` for follow-up requests. Defaults to `false`.\n`matchCase` boolean (optional) - Whether search should be case-sensitive,\n    defaults to `false`.\n\nReturns `Integer` - The request id used for the request.\nStarts a request to find all matches for the `text` in the web page. The result of the request\ncan be obtained by subscribing to found-in-page event.\n`contents.stopFindInPage(action)`\n\n`action` string - Specifies the action to take place when ending\n  webContents.findInPage request.\n`clearSelection` - Clear the selection.\n`keepSelection` - Translate the selection into a normal selection.\n`activateSelection` - Focus and click the selection node.\n\nStops any `findInPage` request for the `webContents` with the provided `action`.\n```javascript\nconst { webContents } = require('electron')\nwebContents.on('found-in-page', (event, result) => {\n  if (result.finalUpdate) webContents.stopFindInPage('clearSelection')\n})\nconst requestId = webContents.findInPage('api')\nconsole.log(requestId)\n```\n`contents.capturePage([rect, opts])`\n\n`rect` Rectangle (optional) - The area of the page to be captured.\n`opts` Object (optional)\n`stayHidden` boolean (optional) -  Keep the page hidden instead of visible. Default is `false`.\n`stayAwake` boolean (optional) -  Keep the system awake instead of allowing it to sleep. Default is `false`.\n\nReturns `Promise<NativeImage>` - Resolves with a NativeImage\nCaptures a snapshot of the page within `rect`. Omitting `rect` will capture the whole visible page.\nThe page is considered visible when its browser window is hidden and the capturer count is non-zero.\nIf you would like the page to stay hidden, you should ensure that `stayHidden` is set to true.\n`contents.isBeingCaptured()`\nReturns `boolean` - Whether this page is being captured. It returns true when the capturer count\nis large then 0.\n`contents.getPrinters()` Deprecated\nGet the system printer list.\nReturns PrinterInfo[]\nDeprecated: Should use the new contents.getPrintersAsync API.\n`contents.getPrintersAsync()`\nGet the system printer list.\nReturns `Promise<PrinterInfo[]>` - Resolves with a PrinterInfo[]\n`contents.print([options], [callback])`\n\n`options` Object (optional)\n`silent` boolean (optional) - Don't ask user for print settings. Default is `false`.\n`printBackground` boolean (optional) - Prints the background color and image of\n    the web page. Default is `false`.\n`deviceName` string (optional) - Set the printer device name to use. Must be the system-defined name and not the 'friendly' name, e.g 'Brother_QL_820NWB' and not 'Brother QL-820NWB'.\n`color` boolean (optional) - Set whether the printed web page will be in color or grayscale. Default is `true`.\n`margins` Object (optional)\n`marginType` string (optional) - Can be `default`, `none`, `printableArea`, or `custom`. If `custom` is chosen, you will also need to specify `top`, `bottom`, `left`, and `right`.\n`top` number (optional) - The top margin of the printed web page, in pixels.\n`bottom` number (optional) - The bottom margin of the printed web page, in pixels.\n`left` number (optional) - The left margin of the printed web page, in pixels.\n`right` number (optional) - The right margin of the printed web page, in pixels.\n\n\n`landscape` boolean (optional) - Whether the web page should be printed in landscape mode. Default is `false`.\n`scaleFactor` number (optional) - The scale factor of the web page.\n`pagesPerSheet` number (optional) - The number of pages to print per page sheet.\n`collate` boolean (optional) - Whether the web page should be collated.\n`copies` number (optional) - The number of copies of the web page to print.\n`pageRanges` Object[]  (optional) - The page range to print. On macOS, only one range is honored.\n`from` number - Index of the first page to print (0-based).\n`to` number - Index of the last page to print (inclusive) (0-based).\n\n\n`duplexMode` string (optional) - Set the duplex mode of the printed web page. Can be `simplex`, `shortEdge`, or `longEdge`.\n`dpi` Record (optional)\n`horizontal` number (optional) - The horizontal dpi.\n`vertical` number (optional) - The vertical dpi.\n\n\n`header` string (optional) - string to be printed as page header.\n`footer` string (optional) - string to be printed as page footer.\n`pageSize` string | Size (optional) - Specify page size of the printed document. Can be `A0`, `A1`, `A2`, `A3`,\n  `A4`, `A5`, `A6`, `Legal`, `Letter`, `Tabloid` or an Object containing `height` and `width`.\n`callback` Function (optional)\n`success` boolean - Indicates success of the print call.\n`failureReason` string - Error description called back if the print fails.\n\nWhen a custom `pageSize` is passed, Chromium attempts to validate platform specific minimum values for `width_microns` and `height_microns`. Width and height must both be minimum 353 microns but may be higher on some operating systems.\nPrints window's web page. When `silent` is set to `true`, Electron will pick\nthe system's default printer if `deviceName` is empty and the default settings for printing.\nUse `page-break-before: always;` CSS style to force to print to a new page.\nExample usage:\n`js\nconst options = {\n  silent: true,\n  deviceName: 'My-Printer',\n  pageRanges: [{\n    from: 0,\n    to: 1\n  }]\n}\nwin.webContents.print(options, (success, errorType) => {\n  if (!success) console.log(errorType)\n})`\n`contents.printToPDF(options)`\n\n`options` Object\n`landscape` boolean (optional) - Paper orientation.`true` for landscape, `false` for portrait. Defaults to false.\n`displayHeaderFooter` boolean (optional) - Whether to display header and footer. Defaults to false.\n`printBackground` boolean (optional) - Whether to print background graphics. Defaults to false.\n`scale` number(optional)  - Scale of the webpage rendering. Defaults to 1.\n`pageSize` string | Size (optional) - Specify page size of the generated PDF. Can be `A0`, `A1`, `A2`, `A3`,\n  `A4`, `A5`, `A6`, `Legal`, `Letter`, `Tabloid`, `Ledger`, or an Object containing `height` and `width` in inches. Defaults to `Letter`.\n`margins` Object (optional)\n`top` number (optional) - Top margin in inches. Defaults to 1cm (~0.4 inches).\n`bottom` number (optional) - Bottom margin in inches. Defaults to 1cm (~0.4 inches).\n`left` number (optional) - Left margin in inches. Defaults to 1cm (~0.4 inches).\n`right` number (optional) - Right margin in inches. Defaults to 1cm (~0.4 inches).\n\n\n`pageRanges` string (optional) - Paper ranges to print, e.g., '1-5, 8, 11-13'. Defaults to the empty string, which means print all pages.\n`headerTemplate` string (optional) - HTML template for the print header. Should be valid HTML markup with following classes used to inject printing values into them: `date` (formatted print date), `title` (document title), `url` (document location), `pageNumber` (current page number) and `totalPages` (total pages in the document). For example, `<span class=title></span>` would generate span containing the title.\n`footerTemplate` string (optional) - HTML template for the print footer. Should use the same format as the `headerTemplate`.\n`preferCSSPageSize` boolean (optional) - Whether or not to prefer page size as defined by css. Defaults to false, in which case the content will be scaled to fit the paper size.\n\nReturns `Promise<Buffer>` - Resolves with the generated PDF data.\nPrints the window's web page as PDF.\nThe `landscape` will be ignored if `@page` CSS at-rule is used in the web page.\nAn example of `webContents.printToPDF`:\n```javascript\nconst { BrowserWindow } = require('electron')\nconst fs = require('fs')\nconst path = require('path')\nconst os = require('os')\nconst win = new BrowserWindow()\nwin.loadURL('http://github.com')\nwin.webContents.on('did-finish-load', () => {\n  // Use default printing options\n  const pdfPath = path.join(os.homedir(), 'Desktop', 'temp.pdf')\n  win.webContents.printToPDF({}).then(data => {\n    fs.writeFile(pdfPath, data, (error) => {\n      if (error) throw error\n      console.log(`Wrote PDF successfully to ${pdfPath}`)\n    })\n  }).catch(error => {\n    console.log(`Failed to write PDF to ${pdfPath}:`, error)\n  })\n})\n```\nSee Page.printToPdf for more information.\n`contents.addWorkSpace(path)`\n\n`path` string\n\nAdds the specified path to DevTools workspace. Must be used after DevTools\ncreation:\n`javascript\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\nwin.webContents.on('devtools-opened', () => {\n  win.webContents.addWorkSpace(__dirname)\n})`\n`contents.removeWorkSpace(path)`\n\n`path` string\n\nRemoves the specified path from DevTools workspace.\n`contents.setDevToolsWebContents(devToolsWebContents)`\n\n`devToolsWebContents` WebContents\n\nUses the `devToolsWebContents` as the target `WebContents` to show devtools.\nThe `devToolsWebContents` must not have done any navigation, and it should not\nbe used for other purposes after the call.\nBy default Electron manages the devtools by creating an internal `WebContents`\nwith native view, which developers have very limited control of. With the\n`setDevToolsWebContents` method, developers can use any `WebContents` to show\nthe devtools in it, including `BrowserWindow`, `BrowserView` and `<webview>`\ntag.\nNote that closing the devtools does not destroy the `devToolsWebContents`, it\nis caller's responsibility to destroy `devToolsWebContents`.\nAn example of showing devtools in a `<webview>` tag:\n```html\n\n\n\n\n\n\n\n\n\n\n\n```\n`js\n// Main process\nconst { ipcMain, webContents } = require('electron')\nipcMain.on('open-devtools', (event, targetContentsId, devtoolsContentsId) => {\n  const target = webContents.fromId(targetContentsId)\n  const devtools = webContents.fromId(devtoolsContentsId)\n  target.setDevToolsWebContents(devtools)\n  target.openDevTools()\n})`\nAn example of showing devtools in a `BrowserWindow`:\n```js\nconst { app, BrowserWindow } = require('electron')\nlet win = null\nlet devtools = null\napp.whenReady().then(() => {\n  win = new BrowserWindow()\n  devtools = new BrowserWindow()\n  win.loadURL('https://github.com')\n  win.webContents.setDevToolsWebContents(devtools.webContents)\n  win.webContents.openDevTools({ mode: 'detach' })\n})\n```\n`contents.openDevTools([options])`\n\n`options` Object (optional)\n`mode` string - Opens the devtools with specified dock state, can be\n    `left`, `right`, `bottom`, `undocked`, `detach`. Defaults to last used dock state.\n    In `undocked` mode it's possible to dock back. In `detach` mode it's not.\n`activate` boolean (optional) - Whether to bring the opened devtools window\n    to the foreground. The default is `true`.\n\nOpens the devtools.\nWhen `contents` is a `<webview>` tag, the `mode` would be `detach` by default,\nexplicitly passing an empty `mode` can force using last used dock state.\nOn Windows, if Windows Control Overlay is enabled, Devtools will be opened with `mode: 'detach'`.\n`contents.closeDevTools()`\nCloses the devtools.\n`contents.isDevToolsOpened()`\nReturns `boolean` - Whether the devtools is opened.\n`contents.isDevToolsFocused()`\nReturns `boolean` - Whether the devtools view is focused .\n`contents.toggleDevTools()`\nToggles the developer tools.\n`contents.inspectElement(x, y)`\n\n`x` Integer\n`y` Integer\n\nStarts inspecting element at position (`x`, `y`).\n`contents.inspectSharedWorker()`\nOpens the developer tools for the shared worker context.\n`contents.inspectSharedWorkerById(workerId)`\n\n`workerId` string\n\nInspects the shared worker based on its ID.\n`contents.getAllSharedWorkers()`\nReturns SharedWorkerInfo[] - Information about all Shared Workers.\n`contents.inspectServiceWorker()`\nOpens the developer tools for the service worker context.\n`contents.send(channel, ...args)`\n\n`channel` string\n`...args` any[]\n\nSend an asynchronous message to the renderer process via `channel`, along with\narguments. Arguments will be serialized with the Structured Clone\nAlgorithm, just like [`postMessage`][], so prototype chains will not be\nincluded. Sending Functions, Promises, Symbols, WeakMaps, or WeakSets will\nthrow an exception.\n\nNOTE: Sending non-standard JavaScript types such as DOM objects or\nspecial Electron objects will throw an exception.\n\nThe renderer process can handle the message by listening to `channel` with the\nipcRenderer module.\nAn example of sending messages from the main process to the renderer process:\n```javascript\n// In the main process.\nconst { app, BrowserWindow } = require('electron')\nlet win = null\napp.whenReady().then(() => {\n  win = new BrowserWindow({ width: 800, height: 600 })\n  win.loadURL(`file://${__dirname}/index.html`)\n  win.webContents.on('did-finish-load', () => {\n    win.webContents.send('ping', 'whoooooooh!')\n  })\n})\n```\n```html\n\n\n\n\n\n\n```\n`contents.sendToFrame(frameId, channel, ...args)`\n\n`frameId` Integer | [number, number] - the ID of the frame to send to, or a\n  pair of `[processId, frameId]` if the frame is in a different process to the\n  main frame.\n`channel` string\n`...args` any[]\n\nSend an asynchronous message to a specific frame in a renderer process via\n`channel`, along with arguments. Arguments will be serialized with the\nStructured Clone Algorithm, just like [`postMessage`][], so prototype\nchains will not be included. Sending Functions, Promises, Symbols, WeakMaps, or\nWeakSets will throw an exception.\n\nNOTE: Sending non-standard JavaScript types such as DOM objects or\nspecial Electron objects will throw an exception.\n\nThe renderer process can handle the message by listening to `channel` with the\nipcRenderer module.\nIf you want to get the `frameId` of a given renderer context you should use\nthe `webFrame.routingId` value.  E.g.\n`js\n// In a renderer process\nconsole.log('My frameId is:', require('electron').webFrame.routingId)`\nYou can also read `frameId` from all incoming IPC messages in the main process.\n`js\n// In the main process\nipcMain.on('ping', (event) => {\n  console.info('Message came from frameId:', event.frameId)\n})`\n`contents.postMessage(channel, message, [transfer])`\n\n`channel` string\n`message` any\n`transfer` MessagePortMain[] (optional)\n\nSend a message to the renderer process, optionally transferring ownership of\nzero or more [`MessagePortMain`][] objects.\nThe transferred `MessagePortMain` objects will be available in the renderer\nprocess by accessing the `ports` property of the emitted event. When they\narrive in the renderer, they will be native DOM `MessagePort` objects.\nFor example:\n```js\n// Main process\nconst { port1, port2 } = new MessageChannelMain()\nwebContents.postMessage('port', { message: 'hello' }, [port1])\n// Renderer process\nipcRenderer.on('port', (e, msg) => {\n  const [port] = e.ports\n  // ...\n})\n```\n`contents.enableDeviceEmulation(parameters)`\n\n`parameters` Object\n`screenPosition` string - Specify the screen type to emulate\n      (default: `desktop`):\n`desktop` - Desktop screen type.\n`mobile` - Mobile screen type.\n\n\n`screenSize` Size - Set the emulated screen size (screenPosition == mobile).\n`viewPosition` Point - Position the view on the screen\n      (screenPosition == mobile) (default: `{ x: 0, y: 0 }`).\n`deviceScaleFactor` Integer - Set the device scale factor (if zero defaults to\n      original device scale factor) (default: `0`).\n`viewSize` Size - Set the emulated view size (empty means no override)\n`scale` Float - Scale of emulated view inside available space (not in fit to\n      view mode) (default: `1`).\n\nEnable device emulation with the given parameters.\n`contents.disableDeviceEmulation()`\nDisable device emulation enabled by `webContents.enableDeviceEmulation`.\n`contents.sendInputEvent(inputEvent)`\n\n`inputEvent` MouseInputEvent | MouseWheelInputEvent | KeyboardInputEvent\n\nSends an input `event` to the page.\nNote: The BrowserWindow containing the contents needs to be focused for\n`sendInputEvent()` to work.\n`contents.beginFrameSubscription([onlyDirty ,]callback)`\n\n`onlyDirty` boolean (optional) - Defaults to `false`.\n`callback` Function\n`image` NativeImage\n`dirtyRect` Rectangle\n\nBegin subscribing for presentation events and captured frames, the `callback`\nwill be called with `callback(image, dirtyRect)` when there is a presentation\nevent.\nThe `image` is an instance of NativeImage that stores the\ncaptured frame.\nThe `dirtyRect` is an object with `x, y, width, height` properties that\ndescribes which part of the page was repainted. If `onlyDirty` is set to\n`true`, `image` will only contain the repainted area. `onlyDirty` defaults to\n`false`.\n`contents.endFrameSubscription()`\nEnd subscribing for frame presentation events.\n`contents.startDrag(item)`\n\n`item` Object\n`file` string - The path to the file being dragged.\n`files` string[] (optional) - The paths to the files being dragged. (`files` will override `file` field)\n`icon` NativeImage | string - The image must be\n    non-empty on macOS.\n\nSets the `item` as dragging item for current drag-drop operation, `file` is the\nabsolute path of the file to be dragged, and `icon` is the image showing under\nthe cursor when dragging.\n`contents.savePage(fullPath, saveType)`\n\n`fullPath` string - The absolute file path.\n`saveType` string - Specify the save type.\n`HTMLOnly` - Save only the HTML of the page.\n`HTMLComplete` - Save complete-html page.\n`MHTML` - Save complete-html page as MHTML.\n\nReturns `Promise<void>` - resolves if the page is saved.\n```javascript\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\nwin.loadURL('https://github.com')\nwin.webContents.on('did-finish-load', async () => {\n  win.webContents.savePage('/tmp/test.html', 'HTMLComplete').then(() => {\n    console.log('Page was saved successfully.')\n  }).catch(err => {\n    console.log(err)\n  })\n})\n```\n`contents.showDefinitionForSelection()` macOS\nShows pop-up dictionary that searches the selected word on the page.\n`contents.isOffscreen()`\nReturns `boolean` - Indicates whether offscreen rendering is enabled.\n`contents.startPainting()`\nIf offscreen rendering is enabled and not painting, start painting.\n`contents.stopPainting()`\nIf offscreen rendering is enabled and painting, stop painting.\n`contents.isPainting()`\nReturns `boolean` - If offscreen rendering is enabled returns whether it is currently painting.\n`contents.setFrameRate(fps)`\n\n`fps` Integer\n\nIf offscreen rendering is enabled sets the frame rate to the specified number.\nOnly values between 1 and 240 are accepted.\n`contents.getFrameRate()`\nReturns `Integer` - If offscreen rendering is enabled returns the current frame rate.\n`contents.invalidate()`\nSchedules a full repaint of the window this web contents is in.\nIf offscreen rendering is enabled invalidates the frame and generates a new\none through the `'paint'` event.\n`contents.getWebRTCIPHandlingPolicy()`\nReturns `string` - Returns the WebRTC IP Handling Policy.\n`contents.setWebRTCIPHandlingPolicy(policy)`\n\n`policy` string - Specify the WebRTC IP Handling Policy.\n`default` - Exposes user's public and local IPs. This is the default\n  behavior. When this policy is used, WebRTC has the right to enumerate all\n  interfaces and bind them to discover public interfaces.\n`default_public_interface_only` - Exposes user's public IP, but does not\n  expose user's local IP. When this policy is used, WebRTC should only use the\n  default route used by http. This doesn't expose any local addresses.\n`default_public_and_private_interfaces` - Exposes user's public and local\n  IPs. When this policy is used, WebRTC should only use the default route used\n  by http. This also exposes the associated default private address. Default\n  route is the route chosen by the OS on a multi-homed endpoint.\n`disable_non_proxied_udp` - Does not expose public or local IPs. When this\n  policy is used, WebRTC should only use TCP to contact peers or servers unless\n  the proxy server supports UDP.\n\nSetting the WebRTC IP handling policy allows you to control which IPs are\nexposed via WebRTC. See BrowserLeaks for\nmore details.\n`contents.getMediaSourceId(requestWebContents)`\n\n`requestWebContents` WebContents - Web contents that the id will be registered to.\n\nReturns `string` - The identifier of a WebContents stream. This identifier can be used\nwith `navigator.mediaDevices.getUserMedia` using a `chromeMediaSource` of `tab`.\nThe identifier is restricted to the web contents that it is registered to and is only valid for 10 seconds.\n`contents.getOSProcessId()`\nReturns `Integer` - The operating system `pid` of the associated renderer\nprocess.\n`contents.getProcessId()`\nReturns `Integer` - The Chromium internal `pid` of the associated renderer. Can\nbe compared to the `frameProcessId` passed by frame specific navigation events\n(e.g. `did-frame-navigate`)\n`contents.takeHeapSnapshot(filePath)`\n\n`filePath` string - Path to the output file.\n\nReturns `Promise<void>` - Indicates whether the snapshot has been created successfully.\nTakes a V8 heap snapshot and saves it to `filePath`.\n`contents.getBackgroundThrottling()`\nReturns `boolean` - whether or not this WebContents will throttle animations and timers\nwhen the page becomes backgrounded. This also affects the Page Visibility API.\n`contents.setBackgroundThrottling(allowed)`\n\n`allowed` boolean\n\nControls whether or not this WebContents will throttle animations and timers\nwhen the page becomes backgrounded. This also affects the Page Visibility API.\n`contents.getType()`\nReturns `string` - the type of the webContent. Can be `backgroundPage`, `window`, `browserView`, `remote`, `webview` or `offscreen`.\n`contents.setImageAnimationPolicy(policy)`\n\n`policy` string - Can be `animate`, `animateOnce` or `noAnimation`.\n\nSets the image animation policy for this webContents.  The policy only affects\nnew images, existing images that are currently being animated are unaffected.\nThis is a known limitation in Chromium, you can force image animation to be\nrecalculated with `img.src = img.src` which will result in no network traffic\nbut will update the animation policy.\nThis corresponds to the animationPolicy accessibility feature in Chromium.\nInstance Properties\n`contents.ipc` Readonly\nAn IpcMain scoped to just IPC messages sent from this\nWebContents.\nIPC messages sent with `ipcRenderer.send`, `ipcRenderer.sendSync` or\n`ipcRenderer.postMessage` will be delivered in the following order:\n\n`contents.on('ipc-message')`\n`contents.mainFrame.on(channel)`\n`contents.ipc.on(channel)`\n`ipcMain.on(channel)`\n\nHandlers registered with `invoke` will be checked in the following order. The\nfirst one that is defined will be called, the rest will be ignored.\n\n`contents.mainFrame.handle(channel)`\n`contents.handle(channel)`\n`ipcMain.handle(channel)`\n\nA handler or event listener registered on the WebContents will receive IPC\nmessages sent from any frame, including child frames. In most cases, only the\nmain frame can send IPC messages. However, if the `nodeIntegrationInSubFrames`\noption is enabled, it is possible for child frames to send IPC messages also.\nIn that case, handlers should check the `senderFrame` property of the IPC event\nto ensure that the message is coming from the expected frame. Alternatively,\nregister handlers on the appropriate frame directly using the\nWebFrameMain.ipc interface.\n`contents.audioMuted`\nA `boolean` property that determines whether this page is muted.\n`contents.userAgent`\nA `string` property that determines the user agent for this web page.\n`contents.zoomLevel`\nA `number` property that determines the zoom level for this web contents.\nThe original size is 0 and each increment above or below represents zooming 20% larger or smaller to default limits of 300% and 50% of original size, respectively. The formula for this is `scale := 1.2 ^ level`.\n`contents.zoomFactor`\nA `number` property that determines the zoom factor for this web contents.\nThe zoom factor is the zoom percent divided by 100, so 300% = 3.0.\n`contents.frameRate`\nAn `Integer` property that sets the frame rate of the web contents to the specified number.\nOnly values between 1 and 240 are accepted.\nOnly applicable if offscreen rendering is enabled.\n`contents.id` Readonly\nA `Integer` representing the unique ID of this WebContents. Each ID is unique among all `WebContents` instances of the entire Electron application.\n`contents.session` Readonly\nA Session used by this webContents.\n`contents.hostWebContents` Readonly\nA WebContents instance that might own this `WebContents`.\n`contents.devToolsWebContents` Readonly\nA `WebContents | null` property that represents the of DevTools `WebContents` associated with a given `WebContents`.\nNote: Users should never store this object because it may become `null`\nwhen the DevTools has been closed.\n`contents.debugger` Readonly\nA Debugger instance for this webContents.\n`contents.backgroundThrottling`\nA `boolean` property that determines whether or not this WebContents will throttle animations and timers\nwhen the page becomes backgrounded. This also affects the Page Visibility API.\n`contents.mainFrame` Readonly\nA WebFrameMain property that represents the top frame of the page's frame hierarchy.\n`contents.opener` Readonly\nA WebFrameMain property that represents the frame that opened this WebContents, either\nwith open(), or by navigating a link with a target attribute.",
    "tag": "electron"
  },
  {
    "title": "process",
    "source": "https://github.com/electron/electron/tree/main/docs/api/process.md",
    "content": "process\n\nExtensions to process object.\n\nProcess: Main, Renderer\nElectron's `process` object is extended from the\nNode.js process object.\nIt adds the following events, properties, and methods:\nSandbox\nIn sandboxed renderers the `process` object contains only a subset of the APIs:\n\n`crash()`\n`hang()`\n`getCreationTime()`\n`getHeapStatistics()`\n`getBlinkMemoryInfo()`\n`getProcessMemoryInfo()`\n`getSystemMemoryInfo()`\n`getSystemVersion()`\n`getCPUUsage()`\n`getIOCounters()`\n`uptime()`\n`argv`\n`execPath`\n`env`\n`pid`\n`arch`\n`platform`\n`sandboxed`\n`contextIsolated`\n`type`\n`version`\n`versions`\n`mas`\n`windowsStore`\n`contextId`\n\nEvents\nEvent: 'loaded'\nEmitted when Electron has loaded its internal initialization script and is\nbeginning to load the web page or the main script.\nProperties\n`process.defaultApp` Readonly\nA `boolean`. When the app is started by being passed as parameter to the default Electron executable, this\nproperty is `true` in the main process, otherwise it is `undefined`.\nFor example when running the app with `electron .`, it is `true`,\neven if the app is packaged (isPackaged) is `true`.\nThis can be useful to determine how many arguments will need to be sliced off from `process.argv`.\n`process.isMainFrame` Readonly\nA `boolean`, `true` when the current renderer context is the \"main\" renderer\nframe. If you want the ID of the current frame you should use `webFrame.routingId`.\n`process.mas` Readonly\nA `boolean`. For Mac App Store build, this property is `true`, for other builds it is\n`undefined`.\n`process.noAsar`\nA `boolean` that controls ASAR support inside your application. Setting this to `true`\nwill disable the support for `asar` archives in Node's built-in modules.\n`process.noDeprecation`\nA `boolean` that controls whether or not deprecation warnings are printed to `stderr`.\nSetting this to `true` will silence deprecation warnings. This property is used\ninstead of the `--no-deprecation` command line flag.\n`process.resourcesPath` Readonly\nA `string` representing the path to the resources directory.\n`process.sandboxed` Readonly\nA `boolean`. When the renderer process is sandboxed, this property is `true`,\notherwise it is `undefined`.\n`process.contextIsolated` Readonly\nA `boolean` that indicates whether the current renderer context has `contextIsolation` enabled.\nIt is `undefined` in the main process.\n`process.throwDeprecation`\nA `boolean` that controls whether or not deprecation warnings will be thrown as\nexceptions. Setting this to `true` will throw errors for deprecations. This\nproperty is used instead of the `--throw-deprecation` command line flag.\n`process.traceDeprecation`\nA `boolean` that controls whether or not deprecations printed to `stderr` include\n their stack trace. Setting this to `true` will print stack traces for deprecations.\n This property is instead of the `--trace-deprecation` command line flag.\n`process.traceProcessWarnings`\nA `boolean` that controls whether or not process warnings printed to `stderr` include\n their stack trace. Setting this to `true` will print stack traces for process warnings\n (including deprecations). This property is instead of the `--trace-warnings` command\n line flag.\n`process.type` Readonly\nA `string` representing the current process's type, can be:\n\n`browser` - The main process\n`renderer` - A renderer process\n`worker` - In a web worker\n`utility` - In a node process launched as a service\n\n`process.versions.chrome` Readonly\nA `string` representing Chrome's version string.\n`process.versions.electron` Readonly\nA `string` representing Electron's version string.\n`process.windowsStore` Readonly\nA `boolean`. If the app is running as a Windows Store app (appx), this property is `true`,\nfor otherwise it is `undefined`.\n`process.contextId` Readonly\nA `string` (optional) representing a globally unique ID of the current JavaScript context.\nEach frame has its own JavaScript context. When contextIsolation is enabled, the isolated\nworld also has a separate JavaScript context.\nThis property is only available in the renderer process.\n`process.parentPort`\nA Electron.ParentPort property if this is a UtilityProcess\n(or `null` otherwise) allowing communication with the parent process.\nMethods\nThe `process` object has the following methods:\n`process.crash()`\nCauses the main thread of the current process crash.\n`process.getCreationTime()`\nReturns `number | null` - The number of milliseconds since epoch, or `null` if the information is unavailable\nIndicates the creation time of the application.\nThe time is represented as number of milliseconds since epoch. It returns null if it is unable to get the process creation time.\n`process.getCPUUsage()`\nReturns CPUUsage\n`process.getIOCounters()` Windows Linux\nReturns IOCounters\n`process.getHeapStatistics()`\nReturns `Object`:\n\n`totalHeapSize` Integer\n`totalHeapSizeExecutable` Integer\n`totalPhysicalSize` Integer\n`totalAvailableSize` Integer\n`usedHeapSize` Integer\n`heapSizeLimit` Integer\n`mallocedMemory` Integer\n`peakMallocedMemory` Integer\n`doesZapGarbage` boolean\n\nReturns an object with V8 heap statistics. Note that all statistics are reported in Kilobytes.\n`process.getBlinkMemoryInfo()`\nReturns `Object`:\n\n`allocated` Integer - Size of all allocated objects in Kilobytes.\n`total` Integer - Total allocated space in Kilobytes.\n\nReturns an object with Blink memory information.\nIt can be useful for debugging rendering / DOM related memory issues.\nNote that all values are reported in Kilobytes.\n`process.getProcessMemoryInfo()`\nReturns `Promise<ProcessMemoryInfo>` - Resolves with a ProcessMemoryInfo\nReturns an object giving memory usage statistics about the current process. Note\nthat all statistics are reported in Kilobytes.\nThis api should be called after app ready.\nChromium does not provide `residentSet` value for macOS. This is because macOS\nperforms in-memory compression of pages that haven't been recently used. As a\nresult the resident set size value is not what one would expect. `private` memory\nis more representative of the actual pre-compression memory usage of the process\non macOS.\n`process.getSystemMemoryInfo()`\nReturns `Object`:\n\n`total` Integer - The total amount of physical memory in Kilobytes available to the\n  system.\n`free` Integer - The total amount of memory not being used by applications or disk\n  cache.\n`swapTotal` Integer Windows Linux - The total amount of swap memory in Kilobytes available to the\n  system.\n`swapFree` Integer Windows Linux - The free amount of swap memory in Kilobytes available to the\n  system.\n\nReturns an object giving memory usage statistics about the entire system. Note\nthat all statistics are reported in Kilobytes.\n`process.getSystemVersion()`\nReturns `string` - The version of the host operating system.\nExample:\n`js\nconst version = process.getSystemVersion()\nconsole.log(version)\n// On macOS -> '10.13.6'\n// On Windows -> '10.0.17763'\n// On Linux -> '4.15.0-45-generic'`\nNote: It returns the actual operating system version instead of kernel version on macOS unlike `os.release()`.\n`process.takeHeapSnapshot(filePath)`\n\n`filePath` string - Path to the output file.\n\nReturns `boolean` - Indicates whether the snapshot has been created successfully.\nTakes a V8 heap snapshot and saves it to `filePath`.\n`process.hang()`\nCauses the main thread of the current process hang.\n`process.setFdLimit(maxDescriptors)` macOS Linux\n\n`maxDescriptors` Integer\n\nSets the file descriptor soft limit to `maxDescriptors` or the OS hard",
    "tag": "electron"
  },
  {
    "title": "utilityProcess",
    "source": "https://github.com/electron/electron/tree/main/docs/api/utility-process.md",
    "content": "utilityProcess\n`utilityProcess` creates a child process with\nNode.js and Message ports enabled. It provides the equivalent of [`child_process.fork`][] API from Node.js\nbut instead uses Services API from Chromium to launch the child process.\nProcess: Main\nMethods\n`utilityProcess.fork(modulePath[, args][, options])`\n\n`modulePath` string - Path to the script that should run as entrypoint in the child process.\n`args` string[] (optional) - List of string arguments that will be available as `process.argv`\n  in the child process.\n`options` Object (optional)\n`env` Object (optional) - Environment key-value pairs. Default is `process.env`.\n`execArgv` string[] (optional) - List of string arguments passed to the executable.\n`cwd` string (optional) - Current working directory of the child process.\n`stdio` (string[] | string) (optional) - Allows configuring the mode for `stdout` and `stderr`\n    of the child process. Default is `inherit`.\n    String value can be one of `pipe`, `ignore`, `inherit`, for more details on these values you can refer to\n    stdio documentation from Node.js. Currently this option only supports configuring `stdout` and\n    `stderr` to either `pipe`, `inherit` or `ignore`. Configuring `stdin` is not supported; `stdin` will\n    always be ignored.\n    For example, the supported values will be processed as following:\n`pipe`: equivalent to ['ignore', 'pipe', 'pipe'] (the default)\n`ignore`: equivalent to ['ignore', 'ignore', 'ignore']\n`inherit`: equivalent to ['ignore', 'inherit', 'inherit']\n\n\n`serviceName` string (optional) - Name of the process that will appear in `name` property of\n    child-process-gone event of app.\n    Default is `node.mojom.NodeService`.\n`allowLoadingUnsignedLibraries` boolean (optional) macOS - With this flag, the utility process will be\n    launched via the `Electron Helper (Plugin).app` helper executable on macOS, which can be\n    codesigned with `com.apple.security.cs.disable-library-validation` and\n    `com.apple.security.cs.allow-unsigned-executable-memory` entitlements. This will allow the utility process\n    to load unsigned libraries. Unless you specifically need this capability, it is best to leave this disabled.\n    Default is `false`.\n\nReturns UtilityProcess\nClass: UtilityProcess\n\nInstances of the `UtilityProcess` represent the Chromium spawned child process\nwith Node.js integration.\n\n`UtilityProcess` is an EventEmitter.\nInstance Methods\n`child.postMessage(message, [transfer])`\n\n`message` any\n`transfer` MessagePortMain[] (optional)\n\nSend a message to the child process, optionally transferring ownership of\nzero or more [`MessagePortMain`][] objects.\nFor example:\n```js\n// Main process\nconst { port1, port2 } = new MessageChannelMain()\nconst child = utilityProcess.fork(path.join(__dirname, 'test.js'))\nchild.postMessage({ message: 'hello' }, [port1])\n// Child process\nprocess.parentPort.once('message', (e) => {\n  const [port] = e.ports\n  // ...\n})\n```\n`child.kill()`\nReturns `boolean`\nTerminates the process gracefully. On POSIX, it uses SIGTERM\nbut will ensure the process is reaped on exit. This function returns\ntrue if the kill is successful, and false otherwise.\nInstance Properties\n`child.pid`\nA `Integer | undefined` representing the process identifier (PID) of the child process.\nIf the child process fails to spawn due to errors, then the value is `undefined`. When\nthe child process exits, then the value is `undefined` after the `exit` event is emitted.\n`child.stdout`\nA `NodeJS.ReadableStream | null` that represents the child process's stdout.\nIf the child was spawned with options.stdio[1] set to anything other than 'pipe', then this will be `null`.\nWhen the child process exits, then the value is `null` after the `exit` event is emitted.\n`js\n// Main process\nconst { port1, port2 } = new MessageChannelMain()\nconst child = utilityProcess.fork(path.join(__dirname, 'test.js'))\nchild.stdout.on('data', (data) => {\n  console.log(`Received chunk ${data}`)\n})`\n`child.stderr`\nA `NodeJS.ReadableStream | null` that represents the child process's stderr.\nIf the child was spawned with options.stdio[2] set to anything other than 'pipe', then this will be `null`.\nWhen the child process exits, then the value is `null` after the `exit` event is emitted.\nInstance Events\nEvent: 'spawn'\nEmitted once the child process has spawned successfully.\nEvent: 'exit'\nReturns:\n\n`code` number - Contains the exit code for\nthe process obtained from waitpid on posix, or GetExitCodeProcess on windows.\n\nEmitted after the child process ends.\nEvent: 'message'\nReturns:\n\n`message` any\n\nEmitted when the child process sends a message using process.parentPort.postMessage().",
    "tag": "electron"
  },
  {
    "title": "pushNotifications",
    "source": "https://github.com/electron/electron/tree/main/docs/api/push-notifications.md",
    "content": "pushNotifications\nProcess: Main\n\nRegister for and receive notifications from remote push notification services\n\nFor example, when registering for push notifications via Apple push notification services (APNS):\n```javascript\nconst { pushNotifications, Notification } = require('electron')\npushNotifications.registerForAPNSNotifications().then((token) => {\n  // forward token to your remote notification server\n})\npushNotifications.on('received-apns-notification', (event, userInfo) => {\n  // generate a new Notification object with the relevant userInfo fields\n})\n```\nEvents\nThe `pushNotification` module emits the following events:\nEvent: 'received-apns-notification' macOS\nReturns:\n\n`event` Event\n`userInfo` Record\n\nEmitted when the app receives a remote notification while running.\nSee: https://developer.apple.com/documentation/appkit/nsapplicationdelegate/1428430-application?language=objc\nMethods\nThe `pushNotification` module has the following methods:\n`pushNotifications.registerForAPNSNotifications()` macOS\nReturns `Promise<string>`\nRegisters the app with Apple Push Notification service (APNS) to receive Badge, Sound, and Alert notifications. If registration is successful, the promise will be resolved with the APNS device token. Otherwise, the promise will be rejected with an error message.\nSee: https://developer.apple.com/documentation/appkit/nsapplication/1428476-registerforremotenotificationtyp?language=objc\n`pushNotifications.unregisterForAPNSNotifications()` macOS\nUnregisters the app from notifications received from APNS.",
    "tag": "electron"
  },
  {
    "title": "app",
    "source": "https://github.com/electron/electron/tree/main/docs/api/app.md",
    "content": "app\n\nControl your application's event lifecycle.\n\nProcess: Main\nThe following example shows how to quit the application when the last window is\nclosed:\n`javascript\nconst { app } = require('electron')\napp.on('window-all-closed', () => {\n  app.quit()\n})`\nEvents\nThe `app` object emits the following events:\nEvent: 'will-finish-launching'\nEmitted when the application has finished basic startup. On Windows and Linux,\nthe `will-finish-launching` event is the same as the `ready` event; on macOS,\nthis event represents the `applicationWillFinishLaunching` notification of\n`NSApplication`. You would usually set up listeners for the `open-file` and\n`open-url` events here, and start the crash reporter and auto updater.\nIn most cases, you should do everything in the `ready` event handler.\nEvent: 'ready'\nReturns:\n\n`event` Event\n`launchInfo` Record | NotificationResponse macOS\n\nEmitted once, when Electron has finished initializing. On macOS, `launchInfo`\nholds the `userInfo` of the NSUserNotification\nor information from UNNotificationResponse\nthat was used to open the application, if it was launched from Notification Center.\nYou can also call `app.isReady()` to check if this event has already fired and `app.whenReady()`\nto get a Promise that is fulfilled when Electron is initialized.\nEvent: 'window-all-closed'\nEmitted when all windows have been closed.\nIf you do not subscribe to this event and all windows are closed, the default\nbehavior is to quit the app; however, if you subscribe, you control whether the\napp quits or not. If the user pressed `Cmd + Q`, or the developer called\n`app.quit()`, Electron will first try to close all the windows and then emit the\n`will-quit` event, and in this case the `window-all-closed` event would not be\nemitted.\nEvent: 'before-quit'\nReturns:\n\n`event` Event\n\nEmitted before the application starts closing its windows.\nCalling `event.preventDefault()` will prevent the default behavior, which is\nterminating the application.\nNote: If application quit was initiated by `autoUpdater.quitAndInstall()`,\nthen `before-quit` is emitted after emitting `close` event on all windows and\nclosing them.\nNote: On Windows, this event will not be emitted if the app is closed due\nto a shutdown/restart of the system or a user logout.\nEvent: 'will-quit'\nReturns:\n\n`event` Event\n\nEmitted when all windows have been closed and the application will quit.\nCalling `event.preventDefault()` will prevent the default behavior, which is\nterminating the application.\nSee the description of the `window-all-closed` event for the differences between\nthe `will-quit` and `window-all-closed` events.\nNote: On Windows, this event will not be emitted if the app is closed due\nto a shutdown/restart of the system or a user logout.\nEvent: 'quit'\nReturns:\n\n`event` Event\n`exitCode` Integer\n\nEmitted when the application is quitting.\nNote: On Windows, this event will not be emitted if the app is closed due\nto a shutdown/restart of the system or a user logout.\nEvent: 'open-file' macOS\nReturns:\n\n`event` Event\n`path` string\n\nEmitted when the user wants to open a file with the application. The `open-file`\nevent is usually emitted when the application is already open and the OS wants\nto reuse the application to open the file. `open-file` is also emitted when a\nfile is dropped onto the dock and the application is not yet running. Make sure\nto listen for the `open-file` event very early in your application startup to\nhandle this case (even before the `ready` event is emitted).\nYou should call `event.preventDefault()` if you want to handle this event.\nOn Windows, you have to parse `process.argv` (in the main process) to get the\nfilepath.\nEvent: 'open-url' macOS\nReturns:\n\n`event` Event\n`url` string\n\nEmitted when the user wants to open a URL with the application. Your application's\n`Info.plist` file must define the URL scheme within the `CFBundleURLTypes` key, and\nset `NSPrincipalClass` to `AtomApplication`.\nYou should call `event.preventDefault()` if you want to handle this event.\nAs with the `open-file` event, be sure to register a listener for the `open-url`\nevent early in your application startup to detect if the the application being\nis being opened to handle a URL. If you register the listener in response to a\n`ready` event, you'll miss URLs that trigger the launch of your application.\nEvent: 'activate' macOS\nReturns:\n\n`event` Event\n`hasVisibleWindows` boolean\n\nEmitted when the application is activated. Various actions can trigger\nthis event, such as launching the application for the first time, attempting\nto re-launch the application when it's already running, or clicking on the\napplication's dock or taskbar icon.\nEvent: 'did-become-active' macOS\nReturns:\n\n`event` Event\n\nEmitted when mac application become active. Difference from `activate` event is\nthat `did-become-active` is emitted every time the app becomes active, not only\nwhen Dock icon is clicked or application is re-launched.\nEvent: 'continue-activity' macOS\nReturns:\n\n`event` Event\n`type` string - A string identifying the activity. Maps to\n  NSUserActivity.activityType.\n`userInfo` unknown - Contains app-specific state stored by the activity on\n  another device.\n`details` Object\n`webpageURL` string (optional) - A string identifying the URL of the webpage accessed by the activity on another device, if available.\n\nEmitted during Handoff when an activity from a different device wants\nto be resumed. You should call `event.preventDefault()` if you want to handle\nthis event.\nA user activity can be continued only in an app that has the same developer Team\nID as the activity's source app and that supports the activity's type.\nSupported activity types are specified in the app's `Info.plist` under the\n`NSUserActivityTypes` key.\nEvent: 'will-continue-activity' macOS\nReturns:\n\n`event` Event\n`type` string - A string identifying the activity. Maps to\n  NSUserActivity.activityType.\n\nEmitted during Handoff before an activity from a different device wants\nto be resumed. You should call `event.preventDefault()` if you want to handle\nthis event.\nEvent: 'continue-activity-error' macOS\nReturns:\n\n`event` Event\n`type` string - A string identifying the activity. Maps to\n  NSUserActivity.activityType.\n`error` string - A string with the error's localized description.\n\nEmitted during Handoff when an activity from a different device\nfails to be resumed.\nEvent: 'activity-was-continued' macOS\nReturns:\n\n`event` Event\n`type` string - A string identifying the activity. Maps to\n  NSUserActivity.activityType.\n`userInfo` unknown - Contains app-specific state stored by the activity.\n\nEmitted during Handoff after an activity from this device was successfully\nresumed on another one.\nEvent: 'update-activity-state' macOS\nReturns:\n\n`event` Event\n`type` string - A string identifying the activity. Maps to\n  NSUserActivity.activityType.\n`userInfo` unknown - Contains app-specific state stored by the activity.\n\nEmitted when Handoff is about to be resumed on another device. If you need to update the state to be transferred, you should call `event.preventDefault()` immediately, construct a new `userInfo` dictionary and call `app.updateCurrentActivity()` in a timely manner. Otherwise, the operation will fail and `continue-activity-error` will be called.\nEvent: 'new-window-for-tab' macOS\nReturns:\n\n`event` Event\n\nEmitted when the user clicks the native macOS new tab button. The new\ntab button is only visible if the current `BrowserWindow` has a\n`tabbingIdentifier`\nEvent: 'browser-window-blur'\nReturns:\n\n`event` Event\n`window` BrowserWindow\n\nEmitted when a browserWindow gets blurred.\nEvent: 'browser-window-focus'\nReturns:\n\n`event` Event\n`window` BrowserWindow\n\nEmitted when a browserWindow gets focused.\nEvent: 'browser-window-created'\nReturns:\n\n`event` Event\n`window` BrowserWindow\n\nEmitted when a new browserWindow is created.\nEvent: 'web-contents-created'\nReturns:\n\n`event` Event\n`webContents` WebContents\n\nEmitted when a new webContents is created.\nEvent: 'certificate-error'\nReturns:\n\n`event` Event\n`webContents` WebContents\n`url` string\n`error` string - The error code\n`certificate` Certificate\n`callback` Function\n`isTrusted` boolean - Whether to consider the certificate as trusted\n`isMainFrame` boolean\n\nEmitted when failed to verify the `certificate` for `url`, to trust the\ncertificate you should prevent the default behavior with\n`event.preventDefault()` and call `callback(true)`.\n```javascript\nconst { app } = require('electron')\napp.on('certificate-error', (event, webContents, url, error, certificate, callback) => {\n  if (url === 'https://github.com') {\n    // Verification logic.\n    event.preventDefault()\n    callback(true)\n  } else {\n    callback(false)\n  }\n})\n```\nEvent: 'select-client-certificate'\nReturns:\n\n`event` Event\n`webContents` WebContents\n`url` URL\n`certificateList` Certificate[]\n`callback` Function\n`certificate` Certificate (optional)\n\nEmitted when a client certificate is requested.\nThe `url` corresponds to the navigation entry requesting the client certificate\nand `callback` can be called with an entry filtered from the list. Using\n`event.preventDefault()` prevents the application from using the first\ncertificate from the store.\n```javascript\nconst { app } = require('electron')\napp.on('select-client-certificate', (event, webContents, url, list, callback) => {\n  event.preventDefault()\n  callback(list[0])\n})\n```\nEvent: 'login'\nReturns:\n\n`event` Event\n`webContents` WebContents\n`authenticationResponseDetails` Object\n`url` URL\n`authInfo` Object\n`isProxy` boolean\n`scheme` string\n`host` string\n`port` Integer\n`realm` string\n`callback` Function\n`username` string (optional)\n`password` string (optional)\n\nEmitted when `webContents` wants to do basic auth.\nThe default behavior is to cancel all authentications. To override this you\nshould prevent the default behavior with `event.preventDefault()` and call\n`callback(username, password)` with the credentials.\n```javascript\nconst { app } = require('electron')\napp.on('login', (event, webContents, details, authInfo, callback) => {\n  event.preventDefault()\n  callback('username', 'secret')\n})\n```\nIf `callback` is called without a username or password, the authentication\nrequest will be cancelled and the authentication error will be returned to the\npage.\nEvent: 'gpu-info-update'\nEmitted whenever there is a GPU info update.\nEvent: 'gpu-process-crashed' Deprecated\nReturns:\n\n`event` Event\n`killed` boolean\n\nEmitted when the GPU process crashes or is killed.\nDeprecated: This event is superceded by the `child-process-gone` event\nwhich contains more information about why the child process disappeared. It\nisn't always because it crashed. The `killed` boolean can be replaced by\nchecking `reason === 'killed'` when you switch to that event.\nEvent: 'renderer-process-crashed' Deprecated\nReturns:\n\n`event` Event\n`webContents` WebContents\n`killed` boolean\n\nEmitted when the renderer process of `webContents` crashes or is killed.\nDeprecated: This event is superceded by the `render-process-gone` event\nwhich contains more information about why the render process disappeared. It\nisn't always because it crashed.  The `killed` boolean can be replaced by\nchecking `reason === 'killed'` when you switch to that event.\nEvent: 'render-process-gone'\nReturns:\n\n`event` Event\n`webContents` WebContents\n`details` Object\n`reason` string - The reason the render process is gone.  Possible values:\n`clean-exit` - Process exited with an exit code of zero\n`abnormal-exit` - Process exited with a non-zero exit code\n`killed` - Process was sent a SIGTERM or otherwise killed externally\n`crashed` - Process crashed\n`oom` - Process ran out of memory\n`launch-failed` - Process never successfully launched\n`integrity-failure` - Windows code integrity checks failed\n\n\n`exitCode` Integer - The exit code of the process, unless `reason` is\n    `launch-failed`, in which case `exitCode` will be a platform-specific\n    launch failure error code.\n\nEmitted when the renderer process unexpectedly disappears.  This is normally\nbecause it was crashed or killed.\nEvent: 'child-process-gone'\nReturns:\n\n`event` Event\n`details` Object\n`type` string - Process type. One of the following values:\n`Utility`\n`Zygote`\n`Sandbox helper`\n`GPU`\n`Pepper Plugin`\n`Pepper Plugin Broker`\n`Unknown`\n\n\n`reason` string - The reason the child process is gone. Possible values:\n`clean-exit` - Process exited with an exit code of zero\n`abnormal-exit` - Process exited with a non-zero exit code\n`killed` - Process was sent a SIGTERM or otherwise killed externally\n`crashed` - Process crashed\n`oom` - Process ran out of memory\n`launch-failed` - Process never successfully launched\n`integrity-failure` - Windows code integrity checks failed\n\n\n`exitCode` number - The exit code for the process\n      (e.g. status from waitpid if on posix, from GetExitCodeProcess on Windows).\n`serviceName` string (optional) - The non-localized name of the process.\n`name` string (optional) - The name of the process.\n    Examples for utility: `Audio Service`, `Content Decryption Module Service`, `Network Service`, `Video Capture`, etc.\n\nEmitted when the child process unexpectedly disappears. This is normally\nbecause it was crashed or killed. It does not include renderer processes.\nEvent: 'accessibility-support-changed' macOS Windows\nReturns:\n\n`event` Event\n`accessibilitySupportEnabled` boolean - `true` when Chrome's accessibility\n  support is enabled, `false` otherwise.\n\nEmitted when Chrome's accessibility support changes. This event fires when\nassistive technologies, such as screen readers, are enabled or disabled.\nSee https://www.chromium.org/developers/design-documents/accessibility for more\ndetails.\nEvent: 'session-created'\nReturns:\n\n`session` Session\n\nEmitted when Electron has created a new `session`.\n```javascript\nconst { app } = require('electron')\napp.on('session-created', (session) => {\n  console.log(session)\n})\n```\nEvent: 'second-instance'\nReturns:\n\n`event` Event\n`argv` string[] - An array of the second instance's command line arguments\n`workingDirectory` string - The second instance's working directory\n`additionalData` unknown - A JSON object of additional data passed from the second instance\n\nThis event will be emitted inside the primary instance of your application\nwhen a second instance has been executed and calls `app.requestSingleInstanceLock()`.\n`argv` is an Array of the second instance's command line arguments,\nand `workingDirectory` is its current working directory. Usually\napplications respond to this by making their primary window focused and\nnon-minimized.\nNote: `argv` will not be exactly the same list of arguments as those passed\nto the second instance. The order might change and additional arguments might be appended.\nIf you need to maintain the exact same arguments, it's advised to use `additionalData` instead.\nNote: If the second instance is started by a different user than the first, the `argv` array will not include the arguments.\nThis event is guaranteed to be emitted after the `ready` event of `app`\ngets emitted.\nNote: Extra command line arguments might be added by Chromium,\nsuch as `--original-process-start-time`.\nMethods\nThe `app` object has the following methods:\nNote: Some methods are only available on specific operating systems and are\nlabeled as such.\n`app.quit()`\nTry to close all windows. The `before-quit` event will be emitted first. If all\nwindows are successfully closed, the `will-quit` event will be emitted and by\ndefault the application will terminate.\nThis method guarantees that all `beforeunload` and `unload` event handlers are\ncorrectly executed. It is possible that a window cancels the quitting by\nreturning `false` in the `beforeunload` event handler.\n`app.exit([exitCode])`\n\n`exitCode` Integer (optional)\n\nExits immediately with `exitCode`. `exitCode` defaults to 0.\nAll windows will be closed immediately without asking the user, and the `before-quit`\nand `will-quit` events will not be emitted.\n`app.relaunch([options])`\n\n`options` Object (optional)\n`args` string[] (optional)\n`execPath` string (optional)\n\nRelaunches the app when current instance exits.\nBy default, the new instance will use the same working directory and command line\narguments with current instance. When `args` is specified, the `args` will be\npassed as command line arguments instead. When `execPath` is specified, the\n`execPath` will be executed for relaunch instead of current app.\nNote that this method does not quit the app when executed, you have to call\n`app.quit` or `app.exit` after calling `app.relaunch` to make the app restart.\nWhen `app.relaunch` is called for multiple times, multiple instances will be\nstarted after current instance exited.\nAn example of restarting current instance immediately and adding a new command\nline argument to the new instance:\n```javascript\nconst { app } = require('electron')\napp.relaunch({ args: process.argv.slice(1).concat(['--relaunch']) })\napp.exit(0)\n```\n`app.isReady()`\nReturns `boolean` - `true` if Electron has finished initializing, `false` otherwise.\nSee also `app.whenReady()`.\n`app.whenReady()`\nReturns `Promise<void>` - fulfilled when Electron is initialized.\nMay be used as a convenient alternative to checking `app.isReady()`\nand subscribing to the `ready` event if the app is not ready yet.\n`app.focus([options])`\n\n`options` Object (optional)\n`steal` boolean macOS - Make the receiver the active app even if another app is\n  currently active.\n\nOn Linux, focuses on the first visible window. On macOS, makes the application\nthe active app. On Windows, focuses on the application's first window.\nYou should seek to use the `steal` option as sparingly as possible.\n`app.hide()` macOS\nHides all application windows without minimizing them.\n`app.isHidden()` macOS\nReturns `boolean` - `true` if the application\u2014including all of its windows\u2014is hidden (e.g. with `Command-H`), `false` otherwise.\n`app.show()` macOS\nShows application windows after they were hidden. Does not automatically focus\nthem.\n`app.setAppLogsPath([path])`\n\n`path` string (optional) - A custom path for your logs. Must be absolute.\n\nSets or creates a directory your app's logs which can then be manipulated with `app.getPath()` or `app.setPath(pathName, newPath)`.\nCalling `app.setAppLogsPath()` without a `path` parameter will result in this directory being set to `~/Library/Logs/YourAppName` on macOS, and inside the `userData` directory on Linux and Windows.\n`app.getAppPath()`\nReturns `string` - The current application directory.\n`app.getPath(name)`\n\n`name` string - You can request the following paths by the name:\n`home` User's home directory.\n`appData` Per-user application data directory, which by default points to:\n`%APPDATA%` on Windows\n`$XDG_CONFIG_HOME` or `~/.config` on Linux\n`~/Library/Application Support` on macOS\n\n\n`userData` The directory for storing your app's configuration files, which\n    by default is the `appData` directory appended with your app's name. By\n    convention files storing user data should be written to this directory, and\n    it is not recommended to write large files here because some environments\n    may backup this directory to cloud storage.\n`sessionData` The directory for storing data generated by `Session`, such\n    as localStorage, cookies, disk cache, downloaded dictionaries, network\n    state, devtools files. By default this points to `userData`. Chromium may\n    write very large disk cache here, so if your app does not rely on browser\n    storage like localStorage or cookies to save user data, it is recommended\n    to set this directory to other locations to avoid polluting the `userData`\n    directory.\n`temp` Temporary directory.\n`exe` The current executable file.\n`module` The `libchromiumcontent` library.\n`desktop` The current user's Desktop directory.\n`documents` Directory for a user's \"My Documents\".\n`downloads` Directory for a user's downloads.\n`music` Directory for a user's music.\n`pictures` Directory for a user's pictures.\n`videos` Directory for a user's videos.\n`recent` Directory for the user's recent files (Windows only).\n`logs` Directory for your app's log folder.\n`crashDumps` Directory where crash dumps are stored.\n\nReturns `string` - A path to a special directory or file associated with `name`. On\nfailure, an `Error` is thrown.\nIf `app.getPath('logs')` is called without called `app.setAppLogsPath()` being called first, a default log directory will be created equivalent to calling `app.setAppLogsPath()` without a `path` parameter.\n`app.getFileIcon(path[, options])`\n\n`path` string\n`options` Object (optional)\n`size` string\n`small` - 16x16\n`normal` - 32x32\n`large` - 48x48 on Linux, 32x32 on Windows, unsupported on macOS.\n\n\n\nReturns `Promise<NativeImage>` - fulfilled with the app's icon, which is a NativeImage.\nFetches a path's associated icon.\nOn Windows, there a 2 kinds of icons:\n\nIcons associated with certain file extensions, like `.mp3`, `.png`, etc.\nIcons inside the file itself, like `.exe`, `.dll`, `.ico`.\n\nOn Linux and macOS, icons depend on the application associated with file mime type.\n`app.setPath(name, path)`\n\n`name` string\n`path` string\n\nOverrides the `path` to a special directory or file associated with `name`.\nIf the path specifies a directory that does not exist, an `Error` is thrown.\nIn that case, the directory should be created with `fs.mkdirSync` or similar.\nYou can only override paths of a `name` defined in `app.getPath`.\nBy default, web pages' cookies and caches will be stored under the `sessionData`\ndirectory. If you want to change this location, you have to override the\n`sessionData` path before the `ready` event of the `app` module is emitted.\n`app.getVersion()`\nReturns `string` - The version of the loaded application. If no version is found in the\napplication's `package.json` file, the version of the current bundle or\nexecutable is returned.\n`app.getName()`\nReturns `string` - The current application's name, which is the name in the application's\n`package.json` file.\nUsually the `name` field of `package.json` is a short lowercase name, according\nto the npm modules spec. You should usually also specify a `productName`\nfield, which is your application's full capitalized name, and which will be\npreferred over `name` by Electron.\n`app.setName(name)`\n\n`name` string\n\nOverrides the current application's name.\nNote: This function overrides the name used internally by Electron; it does not affect the name that the OS uses.\n`app.getLocale()`\nReturns `string` - The current application locale, fetched using Chromium's `l10n_util` library.\nPossible return values are documented here.\nTo set the locale, you'll want to use a command line switch at app startup, which may be found here.\nNote: When distributing your packaged app, you have to also ship the\n`locales` folder.\nNote: This API must be called after the `ready` event is emitted.\nNote: To see example return values of this API compared to other locale and language APIs, see app.getPreferredSystemLanguages().\n`app.getLocaleCountryCode()`\nReturns `string` - User operating system's locale two-letter ISO 3166 country code. The value is taken from native OS APIs.\nNote: When unable to detect locale country code, it returns empty string.\n`app.getSystemLocale()`\nReturns `string` - The current system locale. On Windows and Linux, it is fetched using Chromium's `i18n` library. On macOS, `[NSLocale currentLocale]` is used instead. To get the user's current system language, which is not always the same as the locale, it is better to use app.getPreferredSystemLanguages().\nDifferent operating systems also use the regional data differently:\n\nWindows 11 uses the regional format for numbers, dates, and times.\nmacOS Monterey uses the region for formatting numbers, dates, times, and for selecting the currency symbol to use.\n\nTherefore, this API can be used for purposes such as choosing a format for rendering dates and times in a calendar app, especially when the developer wants the format to be consistent with the OS.\nNote: This API must be called after the `ready` event is emitted.\nNote: To see example return values of this API compared to other locale and language APIs, see app.getPreferredSystemLanguages().\n`app.getPreferredSystemLanguages()`\nReturns `string[]` - The user's preferred system languages from most preferred to least preferred, including the country codes if applicable. A user can modify and add to this list on Windows or macOS through the Language and Region settings.\nThe API uses `GlobalizationPreferences` (with a fallback to `GetSystemPreferredUILanguages`) on Windows, `\\[NSLocale preferredLanguages\\]` on macOS, and `g_get_language_names` on Linux.\nThis API can be used for purposes such as deciding what language to present the application in.\nHere are some examples of return values of the various language and locale APIs with different configurations:\n\nFor Windows, where the application locale is German, the regional format is Finnish (Finland), and the preferred system languages from most to least preferred are French (Canada), English (US), Simplified Chinese (China), Finnish, and Spanish (Latin America):\n`app.getLocale()` returns `'de'`\n`app.getSystemLocale()` returns `'fi-FI'`\n`app.getPreferredSystemLanguages()` returns `['fr-CA', 'en-US', 'zh-Hans-CN', 'fi', 'es-419']`\nOn macOS, where the application locale is German, the region is Finland, and the preferred system languages from most to least preferred are French (Canada), English (US), Simplified Chinese, and Spanish (Latin America):\n`app.getLocale()` returns `'de'`\n`app.getSystemLocale()` returns `'fr-FI'`\n`app.getPreferredSystemLanguages()` returns `['fr-CA', 'en-US', 'zh-Hans-FI', 'es-419']`\n\nBoth the available languages and regions and the possible return values differ between the two operating systems.\nAs can be seen with the example above, on Windows, it is possible that a preferred system language has no country code, and that one of the preferred system languages corresponds with the language used for the regional format. On macOS, the region serves more as a default country code: the user doesn't need to have Finnish as a preferred language to use Finland as the region,and the country code `FI` is used as the country code for preferred system languages that do not have associated countries in the language name.\n`app.addRecentDocument(path)` macOS Windows\n\n`path` string\n\nAdds `path` to the recent documents list.\nThis list is managed by the OS. On Windows, you can visit the list from the task\nbar, and on macOS, you can visit it from dock menu.\n`app.clearRecentDocuments()` macOS Windows\nClears the recent documents list.\n`app.setAsDefaultProtocolClient(protocol[, path, args])`\n\n`protocol` string - The name of your protocol, without `://`. For example,\n  if you want your app to handle `electron://` links, call this method with\n  `electron` as the parameter.\n`path` string (optional) Windows - The path to the Electron executable.\n  Defaults to `process.execPath`\n`args` string[] (optional) Windows - Arguments passed to the executable.\n  Defaults to an empty array\n\nReturns `boolean` - Whether the call succeeded.\nSets the current executable as the default handler for a protocol (aka URI\nscheme). It allows you to integrate your app deeper into the operating system.\nOnce registered, all links with `your-protocol://` will be opened with the\ncurrent executable. The whole link, including protocol, will be passed to your\napplication as a parameter.\nNote: On macOS, you can only register protocols that have been added to\nyour app's `info.plist`, which cannot be modified at runtime. However, you can\nchange the file during build time via Electron Forge,\nElectron Packager, or by editing `info.plist` with a text\neditor. Please refer to Apple's documentation for details.\nNote: In a Windows Store environment (when packaged as an `appx`) this API\nwill return `true` for all calls but the registry key it sets won't be accessible\nby other applications.  In order to register your Windows Store application\nas a default protocol handler you must declare the protocol in your manifest.\nThe API uses the Windows Registry and `LSSetDefaultHandlerForURLScheme` internally.\n`app.removeAsDefaultProtocolClient(protocol[, path, args])` macOS Windows\n\n`protocol` string - The name of your protocol, without `://`.\n`path` string (optional) Windows - Defaults to `process.execPath`\n`args` string[] (optional) Windows - Defaults to an empty array\n\nReturns `boolean` - Whether the call succeeded.\nThis method checks if the current executable as the default handler for a\nprotocol (aka URI scheme). If so, it will remove the app as the default handler.\n`app.isDefaultProtocolClient(protocol[, path, args])`\n\n`protocol` string - The name of your protocol, without `://`.\n`path` string (optional) Windows - Defaults to `process.execPath`\n`args` string[] (optional) Windows - Defaults to an empty array\n\nReturns `boolean` - Whether the current executable is the default handler for a\nprotocol (aka URI scheme).\nNote: On macOS, you can use this method to check if the app has been\nregistered as the default protocol handler for a protocol. You can also verify\nthis by checking `~/Library/Preferences/com.apple.LaunchServices.plist` on the\nmacOS machine. Please refer to\nApple's documentation for details.\nThe API uses the Windows Registry and `LSCopyDefaultHandlerForURLScheme` internally.\n`app.getApplicationNameForProtocol(url)`\n\n`url` string - a URL with the protocol name to check. Unlike the other\n  methods in this family, this accepts an entire URL, including `://` at a\n  minimum (e.g. `https://`).\n\nReturns `string` - Name of the application handling the protocol, or an empty\n  string if there is no handler. For instance, if Electron is the default\n  handler of the URL, this could be `Electron` on Windows and Mac. However,\n  don't rely on the precise format which is not guaranteed to remain unchanged.\n  Expect a different format on Linux, possibly with a `.desktop` suffix.\nThis method returns the application name of the default handler for the protocol\n(aka URI scheme) of a URL.\n`app.getApplicationInfoForProtocol(url)` macOS Windows\n\n`url` string - a URL with the protocol name to check. Unlike the other\n  methods in this family, this accepts an entire URL, including `://` at a\n  minimum (e.g. `https://`).\n\nReturns `Promise<Object>` - Resolve with an object containing the following:\n\n`icon` NativeImage - the display icon of the app handling the protocol.\n`path` string  - installation path of the app handling the protocol.\n`name` string - display name of the app handling the protocol.\n\nThis method returns a promise that contains the application name, icon and path of the default handler for the protocol\n(aka URI scheme) of a URL.\n`app.setUserTasks(tasks)` Windows\n\n`tasks` Task[] - Array of `Task` objects\n\nAdds `tasks` to the Tasks category of the Jump List on Windows.\n`tasks` is an array of Task objects.\nReturns `boolean` - Whether the call succeeded.\nNote: If you'd like to customize the Jump List even more use\n`app.setJumpList(categories)` instead.\n`app.getJumpListSettings()` Windows\nReturns `Object`:\n\n`minItems` Integer - The minimum number of items that will be shown in the\n  Jump List (for a more detailed description of this value see the\n  MSDN docs).\n`removedItems` JumpListItem[] - Array of `JumpListItem`\n  objects that correspond to items that the user has explicitly removed from custom categories in the\n  Jump List. These items must not be re-added to the Jump List in the next\n  call to `app.setJumpList()`, Windows will not display any custom category\n  that contains any of the removed items.\n\n`app.setJumpList(categories)` Windows\n\n`categories` JumpListCategory[] | `null` - Array of `JumpListCategory` objects.\n\nReturns `string`\nSets or removes a custom Jump List for the application, and returns one of the\nfollowing strings:\n\n`ok` - Nothing went wrong.\n`error` - One or more errors occurred, enable runtime logging to figure out\n  the likely cause.\n`invalidSeparatorError` - An attempt was made to add a separator to a\n  custom category in the Jump List. Separators are only allowed in the\n  standard `Tasks` category.\n`fileTypeRegistrationError` - An attempt was made to add a file link to\n  the Jump List for a file type the app isn't registered to handle.\n`customCategoryAccessDeniedError` - Custom categories can't be added to the\n  Jump List due to user privacy or group policy settings.\n\nIf `categories` is `null` the previously set custom Jump List (if any) will be\nreplaced by the standard Jump List for the app (managed by Windows).\nNote: If a `JumpListCategory` object has neither the `type` nor the `name`\nproperty set then its `type` is assumed to be `tasks`. If the `name` property\nis set but the `type` property is omitted then the `type` is assumed to be\n`custom`.\nNote: Users can remove items from custom categories, and Windows will not\nallow a removed item to be added back into a custom category until after\nthe next successful call to `app.setJumpList(categories)`. Any attempt to\nre-add a removed item to a custom category earlier than that will result in the\nentire custom category being omitted from the Jump List. The list of removed\nitems can be obtained using `app.getJumpListSettings()`.\nNote: The maximum length of a Jump List item's `description` property is\n260 characters. Beyond this limit, the item will not be added to the Jump\nList, nor will it be displayed.\nHere's a very simple example of creating a custom Jump List:\n```javascript\nconst { app } = require('electron')\napp.setJumpList([\n  {\n    type: 'custom',\n    name: 'Recent Projects',\n    items: [\n      { type: 'file', path: 'C:\\Projects\\project1.proj' },\n      { type: 'file', path: 'C:\\Projects\\project2.proj' }\n    ]\n  },\n  { // has a name so `type` is assumed to be \"custom\"\n    name: 'Tools',\n    items: [\n      {\n        type: 'task',\n        title: 'Tool A',\n        program: process.execPath,\n        args: '--run-tool-a',\n        icon: process.execPath,\n        iconIndex: 0,\n        description: 'Runs Tool A'\n      },\n      {\n        type: 'task',\n        title: 'Tool B',\n        program: process.execPath,\n        args: '--run-tool-b',\n        icon: process.execPath,\n        iconIndex: 0,\n        description: 'Runs Tool B'\n      }\n    ]\n  },\n  { type: 'frequent' },\n  { // has no name and no type so `type` is assumed to be \"tasks\"\n    items: [\n      {\n        type: 'task',\n        title: 'New Project',\n        program: process.execPath,\n        args: '--new-project',\n        description: 'Create a new project.'\n      },\n      { type: 'separator' },\n      {\n        type: 'task',\n        title: 'Recover Project',\n        program: process.execPath,\n        args: '--recover-project',\n        description: 'Recover Project'\n      }\n    ]\n  }\n])\n```\n`app.requestSingleInstanceLock([additionalData])`\n\n`additionalData` Record (optional) - A JSON object containing additional data to send to the first instance.\n\nReturns `boolean`\nThe return value of this method indicates whether or not this instance of your\napplication successfully obtained the lock.  If it failed to obtain the lock,\nyou can assume that another instance of your application is already running with\nthe lock and exit immediately.\nI.e. This method returns `true` if your process is the primary instance of your\napplication and your app should continue loading.  It returns `false` if your\nprocess should immediately quit as it has sent its parameters to another\ninstance that has already acquired the lock.\nOn macOS, the system enforces single instance automatically when users try to open\na second instance of your app in Finder, and the `open-file` and `open-url`\nevents will be emitted for that. However when users start your app in command\nline, the system's single instance mechanism will be bypassed, and you have to\nuse this method to ensure single instance.\nAn example of activating the window of primary instance when a second instance\nstarts:\n```javascript\nconst { app } = require('electron')\nlet myWindow = null\nconst additionalData = { myKey: 'myValue' }\nconst gotTheLock = app.requestSingleInstanceLock(additionalData)\nif (!gotTheLock) {\n  app.quit()\n} else {\n  app.on('second-instance', (event, commandLine, workingDirectory, additionalData) => {\n    // Print out data received from the second instance.\n    console.log(additionalData)\n\n\n```// Someone tried to run a second instance, we should focus our window.\nif (myWindow) {\n  if (myWindow.isMinimized()) myWindow.restore()\n  myWindow.focus()\n}\n```\n\n\n})\n// Create myWindow, load the rest of the app, etc...\n  app.whenReady().then(() => {\n    myWindow = createWindow()\n  })\n}\n```\n`app.hasSingleInstanceLock()`\nReturns `boolean`\nThis method returns whether or not this instance of your app is currently\nholding the single instance lock.  You can request the lock with\n`app.requestSingleInstanceLock()` and release with\n`app.releaseSingleInstanceLock()`\n`app.releaseSingleInstanceLock()`\nReleases all locks that were created by `requestSingleInstanceLock`. This will\nallow multiple instances of the application to once again run side by side.\n`app.setUserActivity(type, userInfo[, webpageURL])` macOS\n\n`type` string - Uniquely identifies the activity. Maps to\n  NSUserActivity.activityType.\n`userInfo` any - App-specific state to store for use by another device.\n`webpageURL` string (optional) - The webpage to load in a browser if no suitable app is\n  installed on the resuming device. The scheme must be `http` or `https`.\n\nCreates an `NSUserActivity` and sets it as the current activity. The activity\nis eligible for Handoff to another device afterward.\n`app.getCurrentActivityType()` macOS\nReturns `string` - The type of the currently running activity.\n`app.invalidateCurrentActivity()` macOS\nInvalidates the current Handoff user activity.\n`app.resignCurrentActivity()` macOS\nMarks the current Handoff user activity as inactive without invalidating it.\n`app.updateCurrentActivity(type, userInfo)` macOS\n\n`type` string - Uniquely identifies the activity. Maps to\n  NSUserActivity.activityType.\n`userInfo` any - App-specific state to store for use by another device.\n\nUpdates the current activity if its type matches `type`, merging the entries from\n`userInfo` into its current `userInfo` dictionary.\n`app.setAppUserModelId(id)` Windows\n\n`id` string\n\nChanges the Application User Model ID to `id`.\n`app.setActivationPolicy(policy)` macOS\n\n`policy` string - Can be 'regular', 'accessory', or 'prohibited'.\n\nSets the activation policy for a given app.\nActivation policy types:\n\n'regular' - The application is an ordinary app that appears in the Dock and may have a user interface.\n'accessory' - The application doesn\u2019t appear in the Dock and doesn\u2019t have a menu bar, but it may be activated programmatically or by clicking on one of its windows.\n'prohibited' - The application doesn\u2019t appear in the Dock and may not create windows or be activated.\n\n`app.importCertificate(options, callback)` Linux\n\n`options` Object\n`certificate` string - Path for the pkcs12 file.\n`password` string - Passphrase for the certificate.\n`callback` Function\n`result` Integer - Result of import.\n\nImports the certificate in pkcs12 format into the platform certificate store.\n`callback` is called with the `result` of import operation, a value of `0`\nindicates success while any other value indicates failure according to Chromium net_error_list.\n`app.configureHostResolver(options)`\n\n`options` Object\n`enableBuiltInResolver` boolean (optional) - Whether the built-in host\n    resolver is used in preference to getaddrinfo. When enabled, the built-in\n    resolver will attempt to use the system's DNS settings to do DNS lookups\n    itself. Enabled by default on macOS, disabled by default on Windows and\n    Linux.\n`secureDnsMode` string (optional) - Can be \"off\", \"automatic\" or \"secure\".\n    Configures the DNS-over-HTTP mode. When \"off\", no DoH lookups will be\n    performed. When \"automatic\", DoH lookups will be performed first if DoH is\n    available, and insecure DNS lookups will be performed as a fallback. When\n    \"secure\", only DoH lookups will be performed. Defaults to \"automatic\".\n`secureDnsServers` string[] (optional) - A list of DNS-over-HTTP\n    server templates. See RFC8484 \u00a7 3 for details on the template format.\n    Most servers support the POST method; the template for such servers is\n    simply a URI. Note that for some DNS providers, the\n    resolver will automatically upgrade to DoH unless DoH is explicitly\n    disabled, even if there are no DoH servers provided in this list.\n`enableAdditionalDnsQueryTypes` boolean (optional) - Controls whether additional DNS\n    query types, e.g. HTTPS (DNS type 65) will be allowed besides the\n    traditional A and AAAA queries when a request is being made via insecure\n    DNS. Has no effect on Secure DNS which always allows additional types.\n    Defaults to true.\n\nConfigures host resolution (DNS and DNS-over-HTTPS). By default, the following\nresolvers will be used, in order:\n\nDNS-over-HTTPS, if the DNS provider supports it, then\nthe built-in resolver (enabled on macOS only by default), then\nthe system's resolver (e.g. `getaddrinfo`).\n\nThis can be configured to either restrict usage of non-encrypted DNS\n(`secureDnsMode: \"secure\"`), or disable DNS-over-HTTPS (`secureDnsMode:\n\"off\"`). It is also possible to enable or disable the built-in resolver.\nTo disable insecure DNS, you can specify a `secureDnsMode` of `\"secure\"`. If you do\nso, you should make sure to provide a list of DNS-over-HTTPS servers to use, in\ncase the user's DNS configuration does not include a provider that supports\nDoH.\n`js\napp.configureHostResolver({\n  secureDnsMode: 'secure',\n  secureDnsServers: [\n    'https://cloudflare-dns.com/dns-query'\n  ]\n})`\nThis API must be called after the `ready` event is emitted.\n`app.disableHardwareAcceleration()`\nDisables hardware acceleration for current app.\nThis method can only be called before app is ready.\n`app.disableDomainBlockingFor3DAPIs()`\nBy default, Chromium disables 3D APIs (e.g. WebGL) until restart on a per\ndomain basis if the GPU processes crashes too frequently. This function\ndisables that behavior.\nThis method can only be called before app is ready.\n`app.getAppMetrics()`\nReturns ProcessMetric[]: Array of `ProcessMetric` objects that correspond to memory and CPU usage statistics of all the processes associated with the app.\n`app.getGPUFeatureStatus()`\nReturns GPUFeatureStatus - The Graphics Feature Status from `chrome://gpu/`.\nNote: This information is only usable after the `gpu-info-update` event is emitted.\n`app.getGPUInfo(infoType)`\n\n`infoType` string - Can be `basic` or `complete`.\n\nReturns `Promise<unknown>`\nFor `infoType` equal to `complete`:\n Promise is fulfilled with `Object` containing all the GPU Information as in chromium's GPUInfo object. This includes the version and driver information that's shown on `chrome://gpu` page.\nFor `infoType` equal to `basic`:\n  Promise is fulfilled with `Object` containing fewer attributes than when requested with `complete`. Here's an example of basic response:\n`js\n{\n  auxAttributes:\n   {\n     amdSwitchable: true,\n     canSupportThreadedTextureMailbox: false,\n     directComposition: false,\n     directRendering: true,\n     glResetNotificationStrategy: 0,\n     inProcessGpu: true,\n     initializationTime: 0,\n     jpegDecodeAcceleratorSupported: false,\n     optimus: false,\n     passthroughCmdDecoder: false,\n     sandboxed: false,\n     softwareRendering: false,\n     supportsOverlays: false,\n     videoDecodeAcceleratorFlags: 0\n   },\n  gpuDevice:\n   [{ active: true, deviceId: 26657, vendorId: 4098 },\n     { active: false, deviceId: 3366, vendorId: 32902 }],\n  machineModelName: 'MacBookPro',\n  machineModelVersion: '11.5'\n}`\nUsing `basic` should be preferred if only basic information like `vendorId` or `deviceId` is needed.\n`app.setBadgeCount([count])` Linux macOS\n\n`count` Integer (optional) - If a value is provided, set the badge to the provided value otherwise, on macOS, display a plain white dot (e.g. unknown number of notifications). On Linux, if a value is not provided the badge will not display.\n\nReturns `boolean` - Whether the call succeeded.\nSets the counter badge for current app. Setting the count to `0` will hide the\nbadge.\nOn macOS, it shows on the dock icon. On Linux, it only works for Unity launcher.\nNote: Unity launcher requires a `.desktop` file to work. For more information,\nplease read the Unity integration documentation.\n`app.getBadgeCount()` Linux macOS\nReturns `Integer` - The current value displayed in the counter badge.\n`app.isUnityRunning()` Linux\nReturns `boolean` - Whether the current desktop environment is Unity launcher.\n`app.getLoginItemSettings([options])` macOS Windows\n\n`options` Object (optional)\n`path` string (optional) Windows - The executable path to compare against.\n    Defaults to `process.execPath`.\n`args` string[] (optional) Windows - The command-line arguments to compare\n    against. Defaults to an empty array.\n\nIf you provided `path` and `args` options to `app.setLoginItemSettings`, then you\nneed to pass the same arguments here for `openAtLogin` to be set correctly.\nReturns `Object`:\n\n`openAtLogin` boolean - `true` if the app is set to open at login.\n`openAsHidden` boolean macOS - `true` if the app is set to open as hidden at login.\n  This setting is not available on MAS builds.\n`wasOpenedAtLogin` boolean macOS - `true` if the app was opened at login\n  automatically. This setting is not available on MAS builds.\n`wasOpenedAsHidden` boolean macOS - `true` if the app was opened as a hidden login\n  item. This indicates that the app should not open any windows at startup.\n  This setting is not available on MAS builds.\n`restoreState` boolean macOS - `true` if the app was opened as a login item that\n  should restore the state from the previous session. This indicates that the\n  app should restore the windows that were open the last time the app was\n  closed. This setting is not available on MAS builds.\n`executableWillLaunchAtLogin` boolean Windows - `true` if app is set to open at login and its run key is not deactivated. This differs from `openAtLogin` as it ignores the `args` option, this property will be true if the given executable would be launched at login with any arguments.\n`launchItems` Object[] Windows\n`name` string Windows - name value of a registry entry.\n`path` string Windows - The executable to an app that corresponds to a registry entry.\n`args` string[] Windows - the command-line arguments to pass to the executable.\n`scope` string Windows - one of `user` or `machine`. Indicates whether the registry entry is under `HKEY_CURRENT USER` or `HKEY_LOCAL_MACHINE`.\n`enabled` boolean Windows - `true` if the app registry key is startup approved and therefore shows as `enabled` in Task Manager and Windows settings.\n\n`app.setLoginItemSettings(settings)` macOS Windows\n\n`settings` Object\n`openAtLogin` boolean (optional) - `true` to open the app at login, `false` to remove\n    the app as a login item. Defaults to `false`.\n`openAsHidden` boolean (optional) macOS - `true` to open the app as hidden. Defaults to\n    `false`. The user can edit this setting from the System Preferences so\n    `app.getLoginItemSettings().wasOpenedAsHidden` should be checked when the app\n    is opened to know the current value. This setting is not available on MAS builds.\n`path` string (optional) Windows - The executable to launch at login.\n    Defaults to `process.execPath`.\n`args` string[] (optional) Windows - The command-line arguments to pass to\n    the executable. Defaults to an empty array. Take care to wrap paths in\n    quotes.\n`enabled` boolean (optional) Windows - `true` will change the startup approved registry key and `enable / disable` the App in Task Manager and Windows Settings.\n    Defaults to `true`.\n`name` string (optional) Windows - value name to write into registry. Defaults to the app's AppUserModelId().\nSet the app's login item settings.\n\nTo work with Electron's `autoUpdater` on Windows, which uses Squirrel,\nyou'll want to set the launch path to Update.exe, and pass arguments that specify your\napplication name. For example:\n``` javascript\nconst appFolder = path.dirname(process.execPath)\nconst updateExe = path.resolve(appFolder, '..', 'Update.exe')\nconst exeName = path.basename(process.execPath)\napp.setLoginItemSettings({\n  openAtLogin: true,\n  path: updateExe,\n  args: [\n    '--processStart', `\"${exeName}\"`,\n    '--process-start-args', `\"--hidden\"`\n  ]\n})\n```\n`app.isAccessibilitySupportEnabled()` macOS Windows\nReturns `boolean` - `true` if Chrome's accessibility support is enabled,\n`false` otherwise. This API will return `true` if the use of assistive\ntechnologies, such as screen readers, has been detected. See\nhttps://www.chromium.org/developers/design-documents/accessibility for more\ndetails.\n`app.setAccessibilitySupportEnabled(enabled)` macOS Windows\n\n`enabled` boolean - Enable or disable accessibility tree rendering\n\nManually enables Chrome's accessibility support, allowing to expose accessibility switch to users in application settings. See Chromium's accessibility docs for more\ndetails. Disabled by default.\nThis API must be called after the `ready` event is emitted.\nNote: Rendering accessibility tree can significantly affect the performance of your app. It should not be enabled by default.\n`app.showAboutPanel()`\nShow the app's about panel options. These options can be overridden with `app.setAboutPanelOptions(options)`.\n`app.setAboutPanelOptions(options)`\n\n`options` Object\n`applicationName` string (optional) - The app's name.\n`applicationVersion` string (optional) - The app's version.\n`copyright` string (optional) - Copyright information.\n`version` string (optional) macOS - The app's build version number.\n`credits` string (optional) macOS Windows - Credit information.\n`authors` string[] (optional) Linux - List of app authors.\n`website` string (optional) Linux - The app's website.\n`iconPath` string (optional) Linux Windows - Path to the app's icon in a JPEG or PNG file format. On Linux, will be shown as 64x64 pixels while retaining aspect ratio.\n\nSet the about panel options. This will override the values defined in the app's `.plist` file on macOS. See the Apple docs for more details. On Linux, values must be set in order to be shown; there are no defaults.\nIf you do not set `credits` but still wish to surface them in your app, AppKit will look for a file named \"Credits.html\", \"Credits.rtf\", and \"Credits.rtfd\", in that order, in the bundle returned by the NSBundle class method main. The first file found is used, and if none is found, the info area is left blank. See Apple documentation for more information.\n`app.isEmojiPanelSupported()`\nReturns `boolean` - whether or not the current OS version allows for native emoji pickers.\n`app.showEmojiPanel()` macOS Windows\nShow the platform's native emoji picker.\n`app.startAccessingSecurityScopedResource(bookmarkData)` mas\n\n`bookmarkData` string - The base64 encoded security scoped bookmark data returned by the `dialog.showOpenDialog` or `dialog.showSaveDialog` methods.\n\nReturns `Function` - This function must be called once you have finished accessing the security scoped file. If you do not remember to stop accessing the bookmark, kernel resources will be leaked and your app will lose its ability to reach outside the sandbox completely, until your app is restarted.\n```js\n// Start accessing the file.\nconst stopAccessingSecurityScopedResource = app.startAccessingSecurityScopedResource(data)\n// You can now access the file outside of the sandbox \ud83c\udf89\n// Remember to stop accessing the file once you've finished with it.\nstopAccessingSecurityScopedResource()\n```\nStart accessing a security scoped resource. With this method Electron applications that are packaged for the Mac App Store may reach outside their sandbox to access files chosen by the user. See Apple's documentation for a description of how this system works.\n`app.enableSandbox()`\nEnables full sandbox mode on the app. This means that all renderers will be launched sandboxed, regardless of the value of the `sandbox` flag in WebPreferences.\nThis method can only be called before app is ready.\n`app.isInApplicationsFolder()` macOS\nReturns `boolean` - Whether the application is currently running from the\nsystems Application folder. Use in combination with `app.moveToApplicationsFolder()`\n`app.moveToApplicationsFolder([options])` macOS\n\n`options` Object (optional)\n`conflictHandler` Function\\ (optional) - A handler for potential conflict in move failure.\n`conflictType` string - The type of move conflict encountered by the handler; can be `exists` or `existsAndRunning`, where `exists` means that an app of the same name is present in the Applications directory and `existsAndRunning` means both that it exists and that it's presently running.\n\n\n\nReturns `boolean` - Whether the move was successful. Please note that if\nthe move is successful, your application will quit and relaunch.\nNo confirmation dialog will be presented by default. If you wish to allow\nthe user to confirm the operation, you may do so using the\ndialog API.\nNOTE: This method throws errors if anything other than the user causes the\nmove to fail. For instance if the user cancels the authorization dialog, this\nmethod returns false. If we fail to perform the copy, then this method will\nthrow an error. The message in the error should be informative and tell\nyou exactly what went wrong.\nBy default, if an app of the same name as the one being moved exists in the Applications directory and is not running, the existing app will be trashed and the active app moved into its place. If it is running, the preexisting running app will assume focus and the previously active app will quit itself. This behavior can be changed by providing the optional conflict handler, where the boolean returned by the handler determines whether or not the move conflict is resolved with default behavior.  i.e. returning `false` will ensure no further action is taken, returning `true` will result in the default behavior and the method continuing.\nFor example:\n`js\napp.moveToApplicationsFolder({\n  conflictHandler: (conflictType) => {\n    if (conflictType === 'exists') {\n      return dialog.showMessageBoxSync({\n        type: 'question',\n        buttons: ['Halt Move', 'Continue Move'],\n        defaultId: 0,\n        message: 'An app of this name already exists'\n      }) === 1\n    }\n  }\n})`\nWould mean that if an app already exists in the user directory, if the user chooses to 'Continue Move' then the function would continue with its default behavior and the existing app will be trashed and the active app moved into its place.\n`app.isSecureKeyboardEntryEnabled()` macOS\nReturns `boolean` - whether `Secure Keyboard Entry` is enabled.\nBy default this API will return `false`.\n`app.setSecureKeyboardEntryEnabled(enabled)` macOS\n\n`enabled` boolean - Enable or disable `Secure Keyboard Entry`\n\nSet the `Secure Keyboard Entry` is enabled in your application.\nBy using this API, important information such as password and other sensitive information can be prevented from being intercepted by other processes.\nSee Apple's documentation for more\ndetails.\nNote: Enable `Secure Keyboard Entry` only when it is needed and disable it when it is no longer needed.\nProperties\n`app.accessibilitySupportEnabled` macOS Windows\nA `boolean` property that's `true` if Chrome's accessibility support is enabled, `false` otherwise. This property will be `true` if the use of assistive technologies, such as screen readers, has been detected. Setting this property to `true` manually enables Chrome's accessibility support, allowing developers to expose accessibility switch to users in application settings.\nSee Chromium's accessibility docs for more details. Disabled by default.\nThis API must be called after the `ready` event is emitted.\nNote: Rendering accessibility tree can significantly affect the performance of your app. It should not be enabled by default.\n`app.applicationMenu`\nA `Menu | null` property that returns Menu if one has been set and `null` otherwise.\nUsers can pass a Menu to set this property.\n`app.badgeCount` Linux macOS\nAn `Integer` property that returns the badge count for current app. Setting the count to `0` will hide the badge.\nOn macOS, setting this with any nonzero integer shows on the dock icon. On Linux, this property only works for Unity launcher.\nNote: Unity launcher requires a `.desktop` file to work. For more information,\nplease read the Unity integration documentation.\nNote: On macOS, you need to ensure that your application has the permission\nto display notifications for this property to take effect.\n`app.commandLine` Readonly\nA CommandLine object that allows you to read and manipulate the\ncommand line arguments that Chromium uses.\n`app.dock` macOS Readonly\nA Dock `| undefined` object that allows you to perform actions on your app icon in the user's\ndock on macOS.\n`app.isPackaged` Readonly\nA `boolean` property that returns  `true` if the app is packaged, `false` otherwise. For many apps, this property can be used to distinguish development and production environments.\n`app.name`\nA `string` property that indicates the current application's name, which is the name in the application's `package.json` file.\nUsually the `name` field of `package.json` is a short lowercase name, according\nto the npm modules spec. You should usually also specify a `productName`\nfield, which is your application's full capitalized name, and which will be\npreferred over `name` by Electron.\n`app.userAgentFallback`\nA `string` which is the user agent string Electron will use as a global fallback.\nThis is the user agent that will be used when no user agent is set at the\n`webContents` or `session` level.  It is useful for ensuring that your entire\napp has the same user agent.  Set to a custom value as early as possible\nin your app's initialization to ensure that your overridden value is used.\n`app.runningUnderRosettaTranslation` macOS Readonly Deprecated\nA `boolean` which when `true` indicates that the app is currently running\nunder the Rosetta Translator Environment.\nYou can use this property to prompt users to download the arm64 version of\nyour application when they are running the x64 version under Rosetta\nincorrectly.\nDeprecated: This property is superceded by the `runningUnderARM64Translation`\nproperty which detects when the app is being translated to ARM64 in both macOS\nand Windows.\n`app.runningUnderARM64Translation` Readonly macOS Windows\nA `boolean` which when `true` indicates that the app is currently running under\nan ARM64 translator (like the macOS\nRosetta Translator Environment\nor Windows WOW).\nYou can use this property to prompt users to download the arm64 version of",
    "tag": "electron"
  },
  {
    "title": "powerSaveBlocker",
    "source": "https://github.com/electron/electron/tree/main/docs/api/power-save-blocker.md",
    "content": "powerSaveBlocker\n\nBlock the system from entering low-power (sleep) mode.\n\nProcess: Main\nFor example:\n```javascript\nconst { powerSaveBlocker } = require('electron')\nconst id = powerSaveBlocker.start('prevent-display-sleep')\nconsole.log(powerSaveBlocker.isStarted(id))\npowerSaveBlocker.stop(id)\n```\nMethods\nThe `powerSaveBlocker` module has the following methods:\n`powerSaveBlocker.start(type)`\n\n`type` string - Power save blocker type.\n`prevent-app-suspension` - Prevent the application from being suspended.\n    Keeps system active but allows screen to be turned off. Example use cases:\n    downloading a file or playing audio.\n`prevent-display-sleep` - Prevent the display from going to sleep. Keeps\n    system and screen active. Example use case: playing video.\n\nReturns `Integer` - The blocker ID that is assigned to this power blocker.\nStarts preventing the system from entering lower-power mode. Returns an integer\nidentifying the power save blocker.\nNote: `prevent-display-sleep` has higher precedence over\n`prevent-app-suspension`. Only the highest precedence type takes effect. In\nother words, `prevent-display-sleep` always takes precedence over\n`prevent-app-suspension`.\nFor example, an API calling A requests for `prevent-app-suspension`, and\nanother calling B requests for `prevent-display-sleep`. `prevent-display-sleep`\nwill be used until B stops its request. After that, `prevent-app-suspension`\nis used.\n`powerSaveBlocker.stop(id)`\n\n`id` Integer - The power save blocker id returned by `powerSaveBlocker.start`.\n\nStops the specified power save blocker.\n`powerSaveBlocker.isStarted(id)`\n\n`id` Integer - The power save blocker id returned by `powerSaveBlocker.start`.\n",
    "tag": "electron"
  },
  {
    "title": "MessageChannelMain",
    "source": "https://github.com/electron/electron/tree/main/docs/api/message-channel-main.md",
    "content": "MessageChannelMain\n`MessageChannelMain` is the main-process-side equivalent of the DOM\n[`MessageChannel`][] object. Its singular function is to create a pair of\nconnected MessagePortMain objects.\nSee the [Channel Messaging API][] documentation for more information on using\nchannel messaging.\nClass: MessageChannelMain\n\nChannel interface for channel messaging in the main process.\n\nProcess: Main\nExample:\n```js\n// Main process\nconst { MessageChannelMain } = require('electron')\nconst { port1, port2 } = new MessageChannelMain()\nw.webContents.postMessage('port', null, [port2])\nport1.postMessage({ some: 'message' })\n// Renderer process\nconst { ipcRenderer } = require('electron')\nipcRenderer.on('port', (e) => {\n  // e.ports is a list of ports sent along with this message\n  e.ports[0].on('message', (messageEvent) => {\n    console.log(messageEvent.data)\n  })\n})\n```\nInstance Properties\n`channel.port1`\nA MessagePortMain property.\n`channel.port2`\nA MessagePortMain property.",
    "tag": "electron"
  },
  {
    "title": "Class: TouchBarSpacer",
    "source": "https://github.com/electron/electron/tree/main/docs/api/touch-bar-spacer.md",
    "content": "Class: TouchBarSpacer\n\nCreate a spacer between two items in the touch bar for native macOS applications\n\nProcess: Main\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\n`new TouchBarSpacer(options)`\n\n`options` Object\n`size` string (optional) - Size of spacer, possible values are:\n`small` - Small space between items. Maps to `NSTouchBarItemIdentifierFixedSpaceSmall`. This is the default.\n`large` - Large space between items. Maps to `NSTouchBarItemIdentifierFixedSpaceLarge`.\n`flexible` - Take up all available space. Maps to `NSTouchBarItemIdentifierFlexibleSpace`.\n\n\n\nInstance Properties\nThe following properties are available on instances of `TouchBarSpacer`:\n`touchBarSpacer.size`",
    "tag": "electron"
  },
  {
    "title": "ipcRenderer",
    "source": "https://github.com/electron/electron/tree/main/docs/api/ipc-renderer.md",
    "content": "\ntitle: \"ipcRenderer\"\ndescription: \"Communicate asynchronously from a renderer process to the main process.\"\nslug: ipc-renderer\nhide_title: false\n\nipcRenderer\n\nCommunicate asynchronously from a renderer process to the main process.\n\nProcess: Renderer\nThe `ipcRenderer` module is an  EventEmitter. It provides a few\nmethods so you can send synchronous and asynchronous messages from the render\nprocess (web page) to the main process. You can also receive replies from the\nmain process.\nSee IPC tutorial for code examples.\nMethods\nThe `ipcRenderer` module has the following method to listen for events and send messages:\n`ipcRenderer.on(channel, listener)`\n\n`channel` string\n`listener` Function\n`event` IpcRendererEvent\n`...args` any[]\n\nListens to `channel`, when a new message arrives `listener` would be called with\n`listener(event, args...)`.\n`ipcRenderer.once(channel, listener)`\n\n`channel` string\n`listener` Function\n`event` IpcRendererEvent\n`...args` any[]\n\nAdds a one time `listener` function for the event. This `listener` is invoked\nonly the next time a message is sent to `channel`, after which it is removed.\n`ipcRenderer.removeListener(channel, listener)`\n\n`channel` string\n`listener` Function\n`...args` any[]\n\nRemoves the specified `listener` from the listener array for the specified\n`channel`.\n`ipcRenderer.removeAllListeners(channel)`\n\n`channel` string\n\nRemoves all listeners, or those of the specified `channel`.\n`ipcRenderer.send(channel, ...args)`\n\n`channel` string\n`...args` any[]\n\nSend an asynchronous message to the main process via `channel`, along with\narguments. Arguments will be serialized with the Structured Clone\nAlgorithm, just like [`window.postMessage`][], so prototype chains will not be\nincluded. Sending Functions, Promises, Symbols, WeakMaps, or WeakSets will\nthrow an exception.\n\nNOTE: Sending non-standard JavaScript types such as DOM objects or\nspecial Electron objects will throw an exception.\nSince the main process does not have support for DOM objects such as\n`ImageBitmap`, `File`, `DOMMatrix` and so on, such objects cannot be sent over\nElectron's IPC to the main process, as the main process would have no way to decode\nthem. Attempting to send such objects over IPC will result in an error.\n\nThe main process handles it by listening for `channel` with the\nipcMain module.\nIf you need to transfer a [`MessagePort`][] to the main process, use ipcRenderer.postMessage.\nIf you want to receive a single response from the main process, like the result of a method call, consider using ipcRenderer.invoke.\n`ipcRenderer.invoke(channel, ...args)`\n\n`channel` string\n`...args` any[]\n\nReturns `Promise<any>` - Resolves with the response from the main process.\nSend a message to the main process via `channel` and expect a result\nasynchronously. Arguments will be serialized with the Structured Clone\nAlgorithm, just like [`window.postMessage`][], so prototype chains will not be\nincluded. Sending Functions, Promises, Symbols, WeakMaps, or WeakSets will\nthrow an exception.\nThe main process should listen for `channel` with\nipcMain.handle().\nFor example:\n```javascript\n// Renderer process\nipcRenderer.invoke('some-name', someArgument).then((result) => {\n  // ...\n})\n// Main process\nipcMain.handle('some-name', async (event, someArgument) => {\n  const result = await doSomeWork(someArgument)\n  return result\n})\n```\nIf you need to transfer a [`MessagePort`][] to the main process, use ipcRenderer.postMessage.\nIf you do not need a response to the message, consider using ipcRenderer.send.\n\nNote\nSending non-standard JavaScript types such as DOM objects or\nspecial Electron objects will throw an exception.\nSince the main process does not have support for DOM objects such as\n`ImageBitmap`, `File`, `DOMMatrix` and so on, such objects cannot be sent over\nElectron's IPC to the main process, as the main process would have no way to decode\nthem. Attempting to send such objects over IPC will result in an error.\nNote\nIf the handler in the main process throws an error,\nthe promise returned by `invoke` will reject.\nHowever, the `Error` object in the renderer process\nwill not be the same as the one thrown in the main process.\n\n`ipcRenderer.sendSync(channel, ...args)`\n\n`channel` string\n`...args` any[]\n\nReturns `any` - The value sent back by the ipcMain handler.\nSend a message to the main process via `channel` and expect a result\nsynchronously. Arguments will be serialized with the Structured Clone\nAlgorithm, just like [`window.postMessage`][], so prototype chains will not be\nincluded. Sending Functions, Promises, Symbols, WeakMaps, or WeakSets will\nthrow an exception.\n\nNOTE: Sending non-standard JavaScript types such as DOM objects or\nspecial Electron objects will throw an exception.\nSince the main process does not have support for DOM objects such as\n`ImageBitmap`, `File`, `DOMMatrix` and so on, such objects cannot be sent over\nElectron's IPC to the main process, as the main process would have no way to decode\nthem. Attempting to send such objects over IPC will result in an error.\n\nThe main process handles it by listening for `channel` with ipcMain module,\nand replies by setting `event.returnValue`.\n\n:warning: WARNING: Sending a synchronous message will block the whole\nrenderer process until the reply is received, so use this method only as a\nlast resort. It's much better to use the asynchronous version,\ninvoke().\n\n`ipcRenderer.postMessage(channel, message, [transfer])`\n\n`channel` string\n`message` any\n`transfer` MessagePort[] (optional)\n\nSend a message to the main process, optionally transferring ownership of zero\nor more [`MessagePort`][] objects.\nThe transferred `MessagePort` objects will be available in the main process as\nMessagePortMain objects by accessing the `ports`\nproperty of the emitted event.\nFor example:\n```js\n// Renderer process\nconst { port1, port2 } = new MessageChannel()\nipcRenderer.postMessage('port', { message: 'hello' }, [port1])\n// Main process\nipcMain.on('port', (e, msg) => {\n  const [port] = e.ports\n  // ...\n})\n```\nFor more information on using `MessagePort` and `MessageChannel`, see the MDN\ndocumentation.\n`ipcRenderer.sendTo(webContentsId, channel, ...args)`\n\n`webContentsId` number\n`channel` string\n`...args` any[]\n\nSends a message to a window with `webContentsId` via `channel`.\n`ipcRenderer.sendToHost(channel, ...args)`\n\n`channel` string\n`...args` any[]\n\nLike `ipcRenderer.send` but the event will be sent to the `<webview>` element in\nthe host page instead of the main process.\nEvent object\nThe documentation for the `event` object passed to the `callback` can be found\nin the ipc-renderer-event structure docs.",
    "tag": "electron"
  },
  {
    "title": "Class: TouchBarLabel",
    "source": "https://github.com/electron/electron/tree/main/docs/api/touch-bar-label.md",
    "content": "Class: TouchBarLabel\n\nCreate a label in the touch bar for native macOS applications\n\nProcess: Main\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\n`new TouchBarLabel(options)`\n\n`options` Object\n`label` string (optional) - Text to display.\n`accessibilityLabel` string (optional) - A short description of the button for use by screenreaders like VoiceOver.\n`textColor` string (optional) - Hex color of text, i.e `#ABCDEF`.\n\nWhen defining `accessibilityLabel`, ensure you have considered macOS best practices.\nInstance Properties\nThe following properties are available on instances of `TouchBarLabel`:\n`touchBarLabel.label`\nA `string` representing the label's current text. Changing this value immediately updates the label in\nthe touch bar.\n`touchBarLabel.accessibilityLabel`\nA `string` representing the description of the label to be read by a screen reader.\n`touchBarLabel.textColor`\nA `string` hex code representing the label's current text color. Changing this value immediately updates the",
    "tag": "electron"
  },
  {
    "title": "Menu",
    "source": "https://github.com/electron/electron/tree/main/docs/api/menu.md",
    "content": "Menu\nClass: Menu\n\nCreate native application menus and context menus.\n\nProcess: Main\n`new Menu()`\nCreates a new menu.\nStatic Methods\nThe `Menu` class has the following static methods:\n`Menu.setApplicationMenu(menu)`\n\n`menu` Menu | null\n\nSets `menu` as the application menu on macOS. On Windows and Linux, the\n`menu` will be set as each window's top menu.\nAlso on Windows and Linux, you can use a `&` in the top-level item name to\nindicate which letter should get a generated accelerator. For example, using\n`&File` for the file menu would result in a generated `Alt-F` accelerator that\nopens the associated menu. The indicated character in the button label then gets an\nunderline, and the `&` character is not displayed on the button label.\nIn order to escape the `&` character in an item name, add a proceeding `&`. For example, `&&File` would result in `&File` displayed on the button label.\nPassing `null` will suppress the default menu. On Windows and Linux,\nthis has the additional effect of removing the menu bar from the window.\nNote: The default menu will be created automatically if the app does not set one.\nIt contains standard items such as `File`, `Edit`, `View`, `Window` and `Help`.\n`Menu.getApplicationMenu()`\nReturns `Menu | null` - The application menu, if set, or `null`, if not set.\nNote: The returned `Menu` instance doesn't support dynamic addition or\nremoval of menu items. Instance properties can still\nbe dynamically modified.\n`Menu.sendActionToFirstResponder(action)` macOS\n\n`action` string\n\nSends the `action` to the first responder of application. This is used for\nemulating default macOS menu behaviors. Usually you would use the\nrole property of a MenuItem.\nSee the macOS Cocoa Event Handling Guide\nfor more information on macOS' native actions.\n`Menu.buildFromTemplate(template)`\n\n`template` (MenuItemConstructorOptions | MenuItem)[]\n\nReturns `Menu`\nGenerally, the `template` is an array of `options` for constructing a\nMenuItem. The usage can be referenced above.\nYou can also attach other fields to the element of the `template` and they will become properties of the constructed menu items.\nInstance Methods\nThe `menu` object has the following instance methods:\n`menu.popup([options])`\n\n`options` Object (optional)\n`window` BrowserWindow (optional) - Default is the focused window.\n`x` number (optional) - Default is the current mouse cursor position.\n    Must be declared if `y` is declared.\n`y` number (optional) - Default is the current mouse cursor position.\n    Must be declared if `x` is declared.\n`positioningItem` number (optional) macOS - The index of the menu item to\n    be positioned under the mouse cursor at the specified coordinates. Default\n    is -1.\n`callback` Function (optional) - Called when menu is closed.\n\nPops up this menu as a context menu in the BrowserWindow.\n`menu.closePopup([browserWindow])`\n\n`browserWindow` BrowserWindow (optional) - Default is the focused window.\n\nCloses the context menu in the `browserWindow`.\n`menu.append(menuItem)`\n\n`menuItem` MenuItem\n\nAppends the `menuItem` to the menu.\n`menu.getMenuItemById(id)`\n\n`id` string\n\nReturns `MenuItem | null` the item with the specified `id`\n`menu.insert(pos, menuItem)`\n\n`pos` Integer\n`menuItem` MenuItem\n\nInserts the `menuItem` to the `pos` position of the menu.\nInstance Events\nObjects created with `new Menu` or returned by `Menu.buildFromTemplate` emit the following events:\nNote: Some events are only available on specific operating systems and are\nlabeled as such.\nEvent: 'menu-will-show'\nReturns:\n\n`event` Event\n\nEmitted when `menu.popup()` is called.\nEvent: 'menu-will-close'\nReturns:\n\n`event` Event\n\nEmitted when a popup is closed either manually or with `menu.closePopup()`.\nInstance Properties\n`menu` objects also have the following properties:\n`menu.items`\nA `MenuItem[]` array containing the menu's items.\nEach `Menu` consists of multiple MenuItems and each `MenuItem`\ncan have a submenu.\nExamples\nAn example of creating the application menu with the simple template API:\n```javascript\nconst { app, Menu } = require('electron')\nconst isMac = process.platform === 'darwin'\nconst template = [\n  // { role: 'appMenu' }\n  ...(isMac ? [{\n    label: app.name,\n    submenu: [\n      { role: 'about' },\n      { type: 'separator' },\n      { role: 'services' },\n      { type: 'separator' },\n      { role: 'hide' },\n      { role: 'hideOthers' },\n      { role: 'unhide' },\n      { type: 'separator' },\n      { role: 'quit' }\n    ]\n  }] : []),\n  // { role: 'fileMenu' }\n  {\n    label: 'File',\n    submenu: [\n      isMac ? { role: 'close' } : { role: 'quit' }\n    ]\n  },\n  // { role: 'editMenu' }\n  {\n    label: 'Edit',\n    submenu: [\n      { role: 'undo' },\n      { role: 'redo' },\n      { type: 'separator' },\n      { role: 'cut' },\n      { role: 'copy' },\n      { role: 'paste' },\n      ...(isMac ? [\n        { role: 'pasteAndMatchStyle' },\n        { role: 'delete' },\n        { role: 'selectAll' },\n        { type: 'separator' },\n        {\n          label: 'Speech',\n          submenu: [\n            { role: 'startSpeaking' },\n            { role: 'stopSpeaking' }\n          ]\n        }\n      ] : [\n        { role: 'delete' },\n        { type: 'separator' },\n        { role: 'selectAll' }\n      ])\n    ]\n  },\n  // { role: 'viewMenu' }\n  {\n    label: 'View',\n    submenu: [\n      { role: 'reload' },\n      { role: 'forceReload' },\n      { role: 'toggleDevTools' },\n      { type: 'separator' },\n      { role: 'resetZoom' },\n      { role: 'zoomIn' },\n      { role: 'zoomOut' },\n      { type: 'separator' },\n      { role: 'togglefullscreen' }\n    ]\n  },\n  // { role: 'windowMenu' }\n  {\n    label: 'Window',\n    submenu: [\n      { role: 'minimize' },\n      { role: 'zoom' },\n      ...(isMac ? [\n        { type: 'separator' },\n        { role: 'front' },\n        { type: 'separator' },\n        { role: 'window' }\n      ] : [\n        { role: 'close' }\n      ])\n    ]\n  },\n  {\n    role: 'help',\n    submenu: [\n      {\n        label: 'Learn More',\n        click: async () => {\n          const { shell } = require('electron')\n          await shell.openExternal('https://electronjs.org')\n        }\n      }\n    ]\n  }\n]\nconst menu = Menu.buildFromTemplate(template)\nMenu.setApplicationMenu(menu)\n```\nRender process\nTo create menus initiated by the renderer process, send the required\ninformation to the main process using IPC and have the main process display the\nmenu on behalf of the renderer.\nBelow is an example of showing a menu when the user right clicks the page:\n```js\n// renderer\nwindow.addEventListener('contextmenu', (e) => {\n  e.preventDefault()\n  ipcRenderer.send('show-context-menu')\n})\nipcRenderer.on('context-menu-command', (e, command) => {\n  // ...\n})\n// main\nipcMain.on('show-context-menu', (event) => {\n  const template = [\n    {\n      label: 'Menu Item 1',\n      click: () => { event.sender.send('context-menu-command', 'menu-item-1') }\n    },\n    { type: 'separator' },\n    { label: 'Menu Item 2', type: 'checkbox', checked: true }\n  ]\n  const menu = Menu.buildFromTemplate(template)\n  menu.popup(BrowserWindow.fromWebContents(event.sender))\n})\n```\nNotes on macOS Application Menu\nmacOS has a completely different style of application menu from Windows and\nLinux. Here are some notes on making your app's menu more native-like.\nStandard Menus\nOn macOS there are many system-defined standard menus, like the Services and\n`Windows` menus. To make your menu a standard menu, you should set your menu's\n`role` to one of the following and Electron will recognize them and make them\nbecome standard menus:\n\n`window`\n`help`\n`services`\n\nStandard Menu Item Actions\nmacOS has provided standard actions for some menu items, like `About xxx`,\n`Hide xxx`, and `Hide Others`. To set the action of a menu item to a standard\naction, you should set the `role` attribute of the menu item.\nMain Menu's Name\nOn macOS the label of the application menu's first item is always your app's\nname, no matter what label you set. To change it, modify your app bundle's\n`Info.plist` file. See\nAbout Information Property List Files\nfor more information.\nSetting Menu for Specific Browser Window (Linux Windows)\nThe [`setMenu` method][setMenu] of browser windows can set the menu of certain\nbrowser windows.\nMenu Item Position\nYou can make use of `before`, `after`, `beforeGroupContaining`, `afterGroupContaining` and `id` to control how the item will be placed when building a menu with `Menu.buildFromTemplate`.\n\n`before` - Inserts this item before the item with the specified label. If the\n  referenced item doesn't exist the item will be inserted at the end of\n  the menu. Also implies that the menu item in question should be placed in the same \u201cgroup\u201d as the item.\n`after` - Inserts this item after the item with the specified label. If the\n  referenced item doesn't exist the item will be inserted at the end of\n  the menu. Also implies that the menu item in question should be placed in the same \u201cgroup\u201d as the item.\n`beforeGroupContaining` - Provides a means for a single context menu to declare\n  the placement of their containing group before the containing group of the item with the specified label.\n`afterGroupContaining` - Provides a means for a single context menu to declare\n  the placement of their containing group after the containing group of the item with the specified label.\n\nBy default, items will be inserted in the order they exist in the template unless one of the specified positioning keywords is used.\nExamples\nTemplate:\n`javascript\n[\n  { id: '1', label: 'one' },\n  { id: '2', label: 'two' },\n  { id: '3', label: 'three' },\n  { id: '4', label: 'four' }\n]`\nMenu:\n`sh\n- 1\n- 2\n- 3\n- 4`\nTemplate:\n`javascript\n[\n  { id: '1', label: 'one' },\n  { type: 'separator' },\n  { id: '3', label: 'three', beforeGroupContaining: ['1'] },\n  { id: '4', label: 'four', afterGroupContaining: ['2'] },\n  { type: 'separator' },\n  { id: '2', label: 'two' }\n]`\nMenu:\n```sh\n- 3\n- 4\n\n\n1\n\n\n\n2\n```\n\nTemplate:\n`javascript\n[\n  { id: '1', label: 'one', after: ['3'] },\n  { id: '2', label: 'two', before: ['1'] },\n  { id: '3', label: 'three' }\n]`\nMenu:\n```sh\n\n\n3\n2\n1\n```\n",
    "tag": "electron"
  },
  {
    "title": "Chrome Extension Support",
    "source": "https://github.com/electron/electron/tree/main/docs/api/extensions.md",
    "content": "Chrome Extension Support\nElectron supports a subset of the Chrome Extensions\nAPI, primarily to support DevTools extensions and\nChromium-internal extensions, but it also happens to support some other\nextension capabilities.\n\nNote: Electron does not support arbitrary Chrome extensions from the\nstore, and it is a non-goal of the Electron project to be perfectly\ncompatible with Chrome's implementation of Extensions.\n\nLoading extensions\nElectron only supports loading unpacked extensions (i.e., `.crx` files do not\nwork). Extensions are installed per-`session`. To load an extension, call\nses.loadExtension:\n```js\nconst { session } = require('electron')\nsession.defaultSession.loadExtension('path/to/unpacked/extension').then(({ id }) => {\n  // ...\n})\n```\nLoaded extensions will not be automatically remembered across exits; if you do\nnot call `loadExtension` when the app runs, the extension will not be loaded.\nNote that loading extensions is only supported in persistent sessions.\nAttempting to load an extension into an in-memory session will throw an error.\nSee the session documentation for more information about\nloading, unloading, and querying active extensions.\nSupported Extensions APIs\nWe support the following extensions APIs, with some caveats. Other APIs may\nadditionally be supported, but support for any APIs not listed here is\nprovisional and may be removed.\n`chrome.devtools.inspectedWindow`\nAll features of this API are supported.\n`chrome.devtools.network`\nAll features of this API are supported.\n`chrome.devtools.panels`\nAll features of this API are supported.\n`chrome.extension`\nThe following properties of `chrome.extension` are supported:\n\n`chrome.extension.lastError`\n\nThe following methods of `chrome.extension` are supported:\n\n`chrome.extension.getURL`\n`chrome.extension.getBackgroundPage`\n\n`chrome.runtime`\nThe following properties of `chrome.runtime` are supported:\n\n`chrome.runtime.lastError`\n`chrome.runtime.id`\n\nThe following methods of `chrome.runtime` are supported:\n\n`chrome.runtime.getBackgroundPage`\n`chrome.runtime.getManifest`\n`chrome.runtime.getPlatformInfo`\n`chrome.runtime.getURL`\n`chrome.runtime.connect`\n`chrome.runtime.sendMessage`\n`chrome.runtime.reload`\n\nThe following events of `chrome.runtime` are supported:\n\n`chrome.runtime.onStartup`\n`chrome.runtime.onInstalled`\n`chrome.runtime.onSuspend`\n`chrome.runtime.onSuspendCanceled`\n`chrome.runtime.onConnect`\n`chrome.runtime.onMessage`\n\n`chrome.storage`\nOnly `chrome.storage.local` is supported; `chrome.storage.sync` and\n`chrome.storage.managed` are not.\n`chrome.tabs`\nThe following methods of `chrome.tabs` are supported:\n\n`chrome.tabs.sendMessage`\n`chrome.tabs.reload`\n`chrome.tabs.executeScript`\n`chrome.tabs.update` (partial support)\nsupported properties: `url`, `muted`.\n\n\nNote: In Chrome, passing `-1` as a tab ID signifies the \"currently active\ntab\". Since Electron has no such concept, passing `-1` as a tab ID is not\nsupported and will raise an error.\n\n`chrome.management`\nThe following methods of `chrome.management` are supported:\n\n`chrome.management.getAll`\n`chrome.management.get`\n`chrome.management.getSelf`\n`chrome.management.getPermissionWarningsById`\n`chrome.management.getPermissionWarningsByManifest`\n`chrome.management.onEnabled`\n`chrome.management.onDisabled`\n\n`chrome.webRequest`\nAll features of this API are supported.",
    "tag": "electron"
  },
  {
    "title": "nativeTheme",
    "source": "https://github.com/electron/electron/tree/main/docs/api/native-theme.md",
    "content": "nativeTheme\n\nRead and respond to changes in Chromium's native color theme.\n\nProcess: Main\nEvents\nThe `nativeTheme` module emits the following events:\nEvent: 'updated'\nEmitted when something in the underlying NativeTheme has changed. This normally\nmeans that either the value of `shouldUseDarkColors`,\n`shouldUseHighContrastColors` or `shouldUseInvertedColorScheme` has changed.\nYou will have to check them to determine which one has changed.\nProperties\nThe `nativeTheme` module has the following properties:\n`nativeTheme.shouldUseDarkColors` Readonly\nA `boolean` for if the OS / Chromium currently has a dark mode enabled or is\nbeing instructed to show a dark-style UI.  If you want to modify this value you\nshould use `themeSource` below.\n`nativeTheme.themeSource`\nA `string` property that can be `system`, `light` or `dark`.  It is used to override and supersede\nthe value that Chromium has chosen to use internally.\nSetting this property to `system` will remove the override and\neverything will be reset to the OS default.  By default `themeSource` is `system`.\nSettings this property to `dark` will have the following effects:\n\n`nativeTheme.shouldUseDarkColors` will be `true` when accessed\nAny UI Electron renders on Linux and Windows including context menus, devtools, etc. will use the dark UI.\nAny UI the OS renders on macOS including menus, window frames, etc. will use the dark UI.\nThe prefers-color-scheme CSS query will match `dark` mode.\nThe `updated` event will be emitted\n\nSettings this property to `light` will have the following effects:\n\n`nativeTheme.shouldUseDarkColors` will be `false` when accessed\nAny UI Electron renders on Linux and Windows including context menus, devtools, etc. will use the light UI.\nAny UI the OS renders on macOS including menus, window frames, etc. will use the light UI.\nThe prefers-color-scheme CSS query will match `light` mode.\nThe `updated` event will be emitted\n\nThe usage of this property should align with a classic \"dark mode\" state machine in your application\nwhere the user has three options.\n\n`Follow OS` --> `themeSource = 'system'`\n`Dark Mode` --> `themeSource = 'dark'`\n`Light Mode` --> `themeSource = 'light'`\n\nYour application should then always use `shouldUseDarkColors` to determine what CSS to apply.\n`nativeTheme.shouldUseHighContrastColors` macOS Windows Readonly\nA `boolean` for if the OS / Chromium currently has high-contrast mode enabled\nor is being instructed to show a high-contrast UI.\n`nativeTheme.shouldUseInvertedColorScheme` macOS Windows Readonly\nA `boolean` for if the OS / Chromium currently has an inverted color scheme\nor is being instructed to use an inverted color scheme.\n`nativeTheme.inForcedColorsMode` Windows Readonly\nA `boolean` indicating whether Chromium is in forced colors mode, controlled by system accessibility settings.",
    "tag": "electron"
  },
  {
    "title": "Environment Variables",
    "source": "https://github.com/electron/electron/tree/main/docs/api/environment-variables.md",
    "content": "Environment Variables\n\nControl application configuration and behavior without changing code.\n\nCertain Electron behaviors are controlled by environment variables because they\nare initialized earlier than the command line flags and the app's code.\nPOSIX shell example:\n`sh\n$ export ELECTRON_ENABLE_LOGGING=true\n$ electron`\nWindows console example:\n```powershell\n\nset ELECTRON_ENABLE_LOGGING=true\nelectron\n```\n\nProduction Variables\nThe following environment variables are intended primarily for use at runtime\nin packaged Electron applications.\n`NODE_OPTIONS`\nElectron includes support for a subset of Node's NODE_OPTIONS. The majority are supported with the exception of those which conflict with Chromium's use of BoringSSL.\nExample:\n`sh\nexport NODE_OPTIONS=\"--no-warnings --max-old-space-size=2048\"`\nUnsupported options are:\n`sh\n--use-bundled-ca\n--force-fips\n--enable-fips\n--openssl-config\n--use-openssl-ca`\n`NODE_OPTIONS` are explicitly disallowed in packaged apps, except for the following:\n`sh\n--max-http-header-size\n--http-parser`\n`GOOGLE_API_KEY`\nGeolocation support in Electron requires the use of Google Cloud Platform's\ngeolocation webservice. To enable this feature, acquire a\nGoogle API key\nand place the following code in your main process file, before opening any\nbrowser windows that will make geolocation requests:\n`javascript\nprocess.env.GOOGLE_API_KEY = 'YOUR_KEY_HERE'`\nBy default, a newly generated Google API key may not be allowed to make geolocation requests.\nTo enable the geolocation webservice for your project, enable it through the\nAPI library.\nN.B. You will need to add a\nBilling Account\nto the project associated to the API key for the geolocation webservice to work.\n`ELECTRON_NO_ASAR`\nDisables ASAR support. This variable is only supported in forked child processes\nand spawned child processes that set `ELECTRON_RUN_AS_NODE`.\n`ELECTRON_RUN_AS_NODE`\nStarts the process as a normal Node.js process.\nIn this mode, you will be able to pass cli options to Node.js as\nyou would when running the normal Node.js executable, with the exception of the following flags:\n\n\"--openssl-config\"\n\"--use-bundled-ca\"\n\"--use-openssl-ca\",\n\"--force-fips\"\n\"--enable-fips\"\n\nThese flags are disabled owing to the fact that Electron uses BoringSSL instead of OpenSSL when building Node.js'\n`crypto` module, and so will not work as designed.\n`ELECTRON_NO_ATTACH_CONSOLE` Windows\nDon't attach to the current console session.\n`ELECTRON_FORCE_WINDOW_MENU_BAR` Linux\nDon't use the global menu bar on Linux.\n`ELECTRON_TRASH` Linux\nSet the trash implementation on Linux. Default is `gio`.\nOptions:\n\n`gvfs-trash`\n`trash-cli`\n`kioclient5`\n`kioclient`\n\nDevelopment Variables\nThe following environment variables are intended primarily for development and\ndebugging purposes.\n`ELECTRON_ENABLE_LOGGING`\nPrints Chromium's internal logging to the console.\nSetting this variable is the same as passing `--enable-logging`\non the command line. For more info, see `--enable-logging` in command-line\nswitches.\n`ELECTRON_LOG_FILE`\nSets the file destination for Chromium's internal logging.\nSetting this variable is the same as passing `--log-file`\non the command line. For more info, see `--log-file` in command-line\nswitches.\n`ELECTRON_DEBUG_DRAG_REGIONS`\nAdds coloration to draggable regions on BrowserViews on macOS - draggable regions will be colored\ngreen and non-draggable regions will be colored red to aid debugging.\n`ELECTRON_DEBUG_NOTIFICATIONS`\nAdds extra logs to Notification lifecycles on macOS to aid in debugging. Extra logging will be displayed when new Notifications are created or activated. They will also be displayed when common actions are taken: a notification is shown, dismissed, its button is clicked, or it is replied to.\nSample output:\n`sh\nNotification created (com.github.Electron:notification:EAF7B87C-A113-43D7-8E76-F88EC9D73D44)\nNotification displayed (com.github.Electron:notification:EAF7B87C-A113-43D7-8E76-F88EC9D73D44)\nNotification activated (com.github.Electron:notification:EAF7B87C-A113-43D7-8E76-F88EC9D73D44)\nNotification replied to (com.github.Electron:notification:EAF7B87C-A113-43D7-8E76-F88EC9D73D44)`\n`ELECTRON_LOG_ASAR_READS`\nWhen Electron reads from an ASAR file, log the read offset and file path to\nthe system `tmpdir`. The resulting file can be provided to the ASAR module\nto optimize file ordering.\n`ELECTRON_ENABLE_STACK_DUMPING`\nPrints the stack trace to the console when Electron crashes.\nThis environment variable will not work if the `crashReporter` is started.\n`ELECTRON_DEFAULT_ERROR_MODE` Windows\nShows the Windows's crash dialog when Electron crashes.\nThis environment variable will not work if the `crashReporter` is started.\n`ELECTRON_OVERRIDE_DIST_PATH`\nWhen running from the `electron` package, this variable tells\nthe `electron` command to use the specified build of Electron instead of\nthe one downloaded by `npm install`. Usage:\n`sh\nexport ELECTRON_OVERRIDE_DIST_PATH=/Users/username/projects/electron/out/Testing`\nSet By Electron\nElectron sets some variables in your environment at runtime.\n`ORIGINAL_XDG_CURRENT_DESKTOP`\nThis variable is set to the value of `XDG_CURRENT_DESKTOP` that your application\noriginally launched with.  Electron sometimes modifies the value of `XDG_CURRENT_DESKTOP`\nto affect other logic within Chromium so if you want access to the original value",
    "tag": "electron"
  },
  {
    "title": "Class: Debugger",
    "source": "https://github.com/electron/electron/tree/main/docs/api/debugger.md",
    "content": "Class: Debugger\n\nAn alternate transport for Chrome's remote debugging protocol.\n\nProcess: Main\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\nChrome Developer Tools has a special binding available at JavaScript\nruntime that allows interacting with pages and instrumenting them.\n```javascript\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\ntry {\n  win.webContents.debugger.attach('1.1')\n} catch (err) {\n  console.log('Debugger attach failed : ', err)\n}\nwin.webContents.debugger.on('detach', (event, reason) => {\n  console.log('Debugger detached due to : ', reason)\n})\nwin.webContents.debugger.on('message', (event, method, params) => {\n  if (method === 'Network.requestWillBeSent') {\n    if (params.request.url === 'https://www.github.com') {\n      win.webContents.debugger.detach()\n    }\n  }\n})\nwin.webContents.debugger.sendCommand('Network.enable')\n```\nInstance Events\nEvent: 'detach'\nReturns:\n\n`event` Event\n`reason` string - Reason for detaching debugger.\n\nEmitted when the debugging session is terminated. This happens either when\n`webContents` is closed or devtools is invoked for the attached `webContents`.\nEvent: 'message'\nReturns:\n\n`event` Event\n`method` string - Method name.\n`params` any - Event parameters defined by the 'parameters'\n   attribute in the remote debugging protocol.\n`sessionId` string - Unique identifier of attached debugging session,\n   will match the value sent from `debugger.sendCommand`.\n\nEmitted whenever the debugging target issues an instrumentation event.\nInstance Methods\n`debugger.attach([protocolVersion])`\n\n`protocolVersion` string (optional) - Requested debugging protocol version.\n\nAttaches the debugger to the `webContents`.\n`debugger.isAttached()`\nReturns `boolean` - Whether a debugger is attached to the `webContents`.\n`debugger.detach()`\nDetaches the debugger from the `webContents`.\n`debugger.sendCommand(method[, commandParams, sessionId])`\n\n`method` string - Method name, should be one of the methods defined by the\n   remote debugging protocol.\n`commandParams` any (optional) - JSON object with request parameters.\n`sessionId` string (optional) - send command to the target with associated\n   debugging session id. The initial value can be obtained by sending\n   Target.attachToTarget message.\n\nReturns `Promise<any>` - A promise that resolves with the response defined by\nthe 'returns' attribute of the command description in the remote debugging protocol\nor is rejected indicating the failure of the command.",
    "tag": "electron"
  },
  {
    "title": "BrowserView",
    "source": "https://github.com/electron/electron/tree/main/docs/api/browser-view.md",
    "content": "BrowserView\nA `BrowserView` can be used to embed additional web content into a\nBrowserWindow. It is like a child window, except that it is positioned\nrelative to its owning window. It is meant to be an alternative to the\n`webview` tag.\nClass: BrowserView\n\nCreate and control views.\n\nProcess: Main\nThis module cannot be used until the `ready` event of the `app`\nmodule is emitted.\nExample\n```javascript\n// In the main process.\nconst { app, BrowserView, BrowserWindow } = require('electron')\napp.whenReady().then(() => {\n  const win = new BrowserWindow({ width: 800, height: 600 })\nconst view = new BrowserView()\n  win.setBrowserView(view)\n  view.setBounds({ x: 0, y: 0, width: 300, height: 300 })\n  view.webContents.loadURL('https://electronjs.org')\n})\n```\n`new BrowserView([options])` Experimental\n\n`options` Object (optional)\n`webPreferences` Object (optional) - See BrowserWindow.\n\nInstance Properties\nObjects created with `new BrowserView` have the following properties:\n`view.webContents` Experimental\nA WebContents object owned by this view.\nInstance Methods\nObjects created with `new BrowserView` have the following instance methods:\n`view.setAutoResize(options)` Experimental\n\n`options` Object\n`width` boolean (optional) - If `true`, the view's width will grow and shrink together\n    with the window. `false` by default.\n`height` boolean (optional) - If `true`, the view's height will grow and shrink\n    together with the window. `false` by default.\n`horizontal` boolean (optional) - If `true`, the view's x position and width will grow\n    and shrink proportionally with the window. `false` by default.\n`vertical` boolean (optional) - If `true`, the view's y position and height will grow\n    and shrink proportionally with the window. `false` by default.\n\n`view.setBounds(bounds)` Experimental\n\n`bounds` Rectangle\n\nResizes and moves the view to the supplied bounds relative to the window.\n`view.getBounds()` Experimental\nReturns Rectangle\nThe `bounds` of this BrowserView instance as `Object`.\n`view.setBackgroundColor(color)` Experimental\n\n`color` string - Color in Hex, RGB, ARGB, HSL, HSLA or named CSS color format. The alpha channel is\n  optional for the hex type.\n\nExamples of valid `color` values:\n\nHex\n\nfff (RGB)\n\n\nffff (ARGB)\n\n\nffffff (RRGGBB)\n\n\nffffffff (AARRGGBB)\n\nRGB\nrgb(([\\d]+),\\s([\\d]+),\\s([\\d]+))\ne.g. rgb(255, 255, 255)\n\n\nRGBA\nrgba(([\\d]+),\\s([\\d]+),\\s([\\d]+),\\s*([\\d.]+))\ne.g. rgba(255, 255, 255, 1.0)\n\n\nHSL\nhsl((-?[\\d.]+),\\s([\\d.]+)%,\\s([\\d.]+)%)\ne.g. hsl(200, 20%, 50%)\n\n\nHSLA\nhsla((-?[\\d.]+),\\s([\\d.]+)%,\\s([\\d.]+)%,\\s*([\\d.]+))\ne.g. hsla(200, 20%, 50%, 0.5)\n\n\nColor name\nOptions are listed in SkParseColor.cpp\nSimilar to CSS Color Module Level 3 keywords, but case-sensitive.\ne.g. `blueviolet` or `red`\n\n\n",
    "tag": "electron"
  },
  {
    "title": "Class: TouchBarPopover",
    "source": "https://github.com/electron/electron/tree/main/docs/api/touch-bar-popover.md",
    "content": "Class: TouchBarPopover\n\nCreate a popover in the touch bar for native macOS applications\n\nProcess: Main\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\n`new TouchBarPopover(options)`\n\n`options` Object\n`label` string (optional) - Popover button text.\n`icon` NativeImage (optional) - Popover button icon.\n`items` TouchBar - Items to display in the popover.\n`showCloseButton` boolean (optional) - `true` to display a close button\n    on the left of the popover, `false` to not show it. Default is `true`.\n\nInstance Properties\nThe following properties are available on instances of `TouchBarPopover`:\n`touchBarPopover.label`\nA `string` representing the popover's current button text. Changing this value immediately updates the\npopover in the touch bar.\n`touchBarPopover.icon`\nA `NativeImage` representing the popover's current button icon. Changing this value immediately updates the",
    "tag": "electron"
  },
  {
    "title": "Class: DownloadItem",
    "source": "https://github.com/electron/electron/tree/main/docs/api/download-item.md",
    "content": "Class: DownloadItem\n\nControl file downloads from remote sources.\n\nProcess: Main\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\n`DownloadItem` is an [EventEmitter][event-emitter] that represents a download item in Electron.\nIt is used in `will-download` event of `Session` class, and allows users to\ncontrol the download item.\n```javascript\n// In the main process.\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\nwin.webContents.session.on('will-download', (event, item, webContents) => {\n  // Set the save path, making Electron not to prompt a save dialog.\n  item.setSavePath('/tmp/save.pdf')\nitem.on('updated', (event, state) => {\n    if (state === 'interrupted') {\n      console.log('Download is interrupted but can be resumed')\n    } else if (state === 'progressing') {\n      if (item.isPaused()) {\n        console.log('Download is paused')\n      } else {\n        console.log(`Received bytes: ${item.getReceivedBytes()}`)\n      }\n    }\n  })\n  item.once('done', (event, state) => {\n    if (state === 'completed') {\n      console.log('Download successfully')\n    } else {\n      console.log(`Download failed: ${state}`)\n    }\n  })\n})\n```\nInstance Events\nEvent: 'updated'\nReturns:\n\n`event` Event\n`state` string - Can be `progressing` or `interrupted`.\n\nEmitted when the download has been updated and is not done.\nThe `state` can be one of following:\n\n`progressing` - The download is in-progress.\n`interrupted` - The download has interrupted and can be resumed.\n\nEvent: 'done'\nReturns:\n\n`event` Event\n`state` string - Can be `completed`, `cancelled` or `interrupted`.\n\nEmitted when the download is in a terminal state. This includes a completed\ndownload, a cancelled download (via `downloadItem.cancel()`), and interrupted\ndownload that can't be resumed.\nThe `state` can be one of following:\n\n`completed` - The download completed successfully.\n`cancelled` - The download has been cancelled.\n`interrupted` - The download has interrupted and can not resume.\n\nInstance Methods\nThe `downloadItem` object has the following methods:\n`downloadItem.setSavePath(path)`\n\n`path` string - Set the save file path of the download item.\n\nThe API is only available in session's `will-download` callback function.\nIf `path` doesn't exist, Electron will try to make the directory recursively.\nIf user doesn't set the save path via the API, Electron will use the original\nroutine to determine the save path; this usually prompts a save dialog.\n`downloadItem.getSavePath()`\nReturns `string` - The save path of the download item. This will be either the path\nset via `downloadItem.setSavePath(path)` or the path selected from the shown\nsave dialog.\n`downloadItem.setSaveDialogOptions(options)`\n\n`options` SaveDialogOptions - Set the save file dialog options. This object has the same\nproperties as the `options` parameter of dialog.showSaveDialog().\n\nThis API allows the user to set custom options for the save dialog that opens\nfor the download item by default.\nThe API is only available in session's `will-download` callback function.\n`downloadItem.getSaveDialogOptions()`\nReturns `SaveDialogOptions` - Returns the object previously set by `downloadItem.setSaveDialogOptions(options)`.\n`downloadItem.pause()`\nPauses the download.\n`downloadItem.isPaused()`\nReturns `boolean` - Whether the download is paused.\n`downloadItem.resume()`\nResumes the download that has been paused.\nNote: To enable resumable downloads the server you are downloading from must support range requests and provide both `Last-Modified` and `ETag` header values. Otherwise `resume()` will dismiss previously received bytes and restart the download from the beginning.\n`downloadItem.canResume()`\nReturns `boolean` - Whether the download can resume.\n`downloadItem.cancel()`\nCancels the download operation.\n`downloadItem.getURL()`\nReturns `string` - The origin URL where the item is downloaded from.\n`downloadItem.getMimeType()`\nReturns `string` - The files mime type.\n`downloadItem.hasUserGesture()`\nReturns `boolean` - Whether the download has user gesture.\n`downloadItem.getFilename()`\nReturns `string` - The file name of the download item.\nNote: The file name is not always the same as the actual one saved in local\ndisk. If user changes the file name in a prompted download saving dialog, the\nactual name of saved file will be different.\n`downloadItem.getTotalBytes()`\nReturns `Integer` - The total size in bytes of the download item.\nIf the size is unknown, it returns 0.\n`downloadItem.getReceivedBytes()`\nReturns `Integer` - The received bytes of the download item.\n`downloadItem.getContentDisposition()`\nReturns `string` - The Content-Disposition field from the response\nheader.\n`downloadItem.getState()`\nReturns `string` - The current state. Can be `progressing`, `completed`, `cancelled` or `interrupted`.\nNote: The following methods are useful specifically to resume a\n`cancelled` item when session is restarted.\n`downloadItem.getURLChain()`\nReturns `string[]` - The complete URL chain of the item including any redirects.\n`downloadItem.getLastModifiedTime()`\nReturns `string` - Last-Modified header value.\n`downloadItem.getETag()`\nReturns `string` - ETag header value.\n`downloadItem.getStartTime()`\nReturns `Double` - Number of seconds since the UNIX epoch when the download was\nstarted.\nInstance Properties\n`downloadItem.savePath`\nA `string` property that determines the save file path of the download item.\nThe property is only available in session's `will-download` callback function.\nIf user doesn't set the save path via the property, Electron will use the original\nroutine to determine the save path; this usually prompts a save dialog.",
    "tag": "electron"
  },
  {
    "title": "globalShortcut",
    "source": "https://github.com/electron/electron/tree/main/docs/api/global-shortcut.md",
    "content": "globalShortcut\n\nDetect keyboard events when the application does not have keyboard focus.\n\nProcess: Main\nThe `globalShortcut` module can register/unregister a global keyboard shortcut\nwith the operating system so that you can customize the operations for various\nshortcuts.\nNote: The shortcut is global; it will work even if the app does\nnot have the keyboard focus. This module cannot be used before the `ready`\nevent of the app module is emitted.\n```javascript\nconst { app, globalShortcut } = require('electron')\napp.whenReady().then(() => {\n  // Register a 'CommandOrControl+X' shortcut listener.\n  const ret = globalShortcut.register('CommandOrControl+X', () => {\n    console.log('CommandOrControl+X is pressed')\n  })\nif (!ret) {\n    console.log('registration failed')\n  }\n// Check whether a shortcut is registered.\n  console.log(globalShortcut.isRegistered('CommandOrControl+X'))\n})\napp.on('will-quit', () => {\n  // Unregister a shortcut.\n  globalShortcut.unregister('CommandOrControl+X')\n// Unregister all shortcuts.\n  globalShortcut.unregisterAll()\n})\n```\nMethods\nThe `globalShortcut` module has the following methods:\n`globalShortcut.register(accelerator, callback)`\n\n`accelerator` Accelerator\n`callback` Function\n\nReturns `boolean` - Whether or not the shortcut was registered successfully.\nRegisters a global shortcut of `accelerator`. The `callback` is called when\nthe registered shortcut is pressed by the user.\nWhen the accelerator is already taken by other applications, this call will\nsilently fail. This behavior is intended by operating systems, since they don't\nwant applications to fight for global shortcuts.\nThe following accelerators will not be registered successfully on macOS 10.14 Mojave unless\nthe app has been authorized as a trusted accessibility client:\n\n\"Media Play/Pause\"\n\"Media Next Track\"\n\"Media Previous Track\"\n\"Media Stop\"\n\n`globalShortcut.registerAll(accelerators, callback)`\n\n`accelerators` Accelerator[] - an array of Accelerators.\n`callback` Function\n\nRegisters a global shortcut of all `accelerator` items in `accelerators`. The `callback` is called when any of the registered shortcuts are pressed by the user.\nWhen a given accelerator is already taken by other applications, this call will\nsilently fail. This behavior is intended by operating systems, since they don't\nwant applications to fight for global shortcuts.\nThe following accelerators will not be registered successfully on macOS 10.14 Mojave unless\nthe app has been authorized as a trusted accessibility client:\n\n\"Media Play/Pause\"\n\"Media Next Track\"\n\"Media Previous Track\"\n\"Media Stop\"\n\n`globalShortcut.isRegistered(accelerator)`\n\n`accelerator` Accelerator\n\nReturns `boolean` - Whether this application has registered `accelerator`.\nWhen the accelerator is already taken by other applications, this call will\nstill return `false`. This behavior is intended by operating systems, since they\ndon't want applications to fight for global shortcuts.\n`globalShortcut.unregister(accelerator)`\n\n`accelerator` Accelerator\n\nUnregisters the global shortcut of `accelerator`.\n`globalShortcut.unregisterAll()`",
    "tag": "electron"
  },
  {
    "title": "Class: ClientRequest",
    "source": "https://github.com/electron/electron/tree/main/docs/api/client-request.md",
    "content": "Class: ClientRequest\n\nMake HTTP/HTTPS requests.\n\nProcess: Main\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\n`ClientRequest` implements the Writable Stream\ninterface and is therefore an [EventEmitter][event-emitter].\n`new ClientRequest(options)`\n\n`options` (Object | string) - If `options` is a string, it is interpreted as\nthe request URL. If it is an object, it is expected to fully specify an HTTP request via the\nfollowing properties:\n`method` string (optional) - The HTTP request method. Defaults to the GET\n    method.\n`url` string (optional) - The request URL. Must be provided in the absolute\n    form with the protocol scheme specified as http or https.\n`session` Session (optional) - The Session instance with\n    which the request is associated.\n`partition` string (optional) - The name of the partition\n    with which the request is associated. Defaults to the empty string. The\n    `session` option supersedes `partition`. Thus if a `session` is explicitly\n    specified, `partition` is ignored.\n`credentials` string (optional) - Can be `include`, `omit` or\n    `same-origin`. Whether to send\n    credentials with this\n    request. If set to `include`, credentials from the session associated with\n    the request will be used. If set to `omit`, credentials will not be sent\n    with the request (and the `'login'` event will not be triggered in the\n    event of a 401). If set to `same-origin`, `origin` must also be specified.\n    This matches the behavior of the\n    fetch\n    option of the same name. If this option is not specified, authentication\n    data from the session will be sent, and cookies will not be sent (unless\n    `useSessionCookies` is set).\n`useSessionCookies` boolean (optional) - Whether to send cookies with this\n    request from the provided session. If `credentials` is specified, this\n    option has no effect. Default is `false`.\n`protocol` string (optional) - Can be `http:` or `https:`. The protocol\n    scheme in the form 'scheme:'. Defaults to 'http:'.\n`host` string (optional) - The server host provided as a concatenation of\n    the hostname and the port number 'hostname:port'.\n`hostname` string (optional) - The server host name.\n`port` Integer (optional) - The server's listening port number.\n`path` string (optional) - The path part of the request URL.\n`redirect` string (optional) - Can be `follow`, `error` or `manual`. The\n    redirect mode for this request. When mode is `error`, any redirection will\n    be aborted. When mode is `manual` the redirection will be cancelled unless\n    request.followRedirect is invoked synchronously\n    during the redirect event.  Defaults to `follow`.\n`origin` string (optional) - The origin URL of the request.\n`referrerPolicy` string (optional) - can be `\"\"`, `no-referrer`,\n    `no-referrer-when-downgrade`, `origin`, `origin-when-cross-origin`,\n    `unsafe-url`, `same-origin`, `strict-origin`, or\n    `strict-origin-when-cross-origin`. Defaults to\n    `strict-origin-when-cross-origin`.\n`cache` string (optional) - can be `default`, `no-store`, `reload`,\n    `no-cache`, `force-cache` or `only-if-cached`.\n\n`options` properties such as `protocol`, `host`, `hostname`, `port` and `path`\nstrictly follow the Node.js model as described in the\nURL module.\nFor instance, we could have created the same request to 'github.com' as follows:\n`JavaScript\nconst request = net.request({\n  method: 'GET',\n  protocol: 'https:',\n  hostname: 'github.com',\n  port: 443,\n  path: '/'\n})`\nInstance Events\nEvent: 'response'\nReturns:\n\n`response` IncomingMessage - An object representing the HTTP response message.\n\nEvent: 'login'\nReturns:\n\n`authInfo` Object\n`isProxy` boolean\n`scheme` string\n`host` string\n`port` Integer\n`realm` string\n`callback` Function\n`username` string (optional)\n`password` string (optional)\n\nEmitted when an authenticating proxy is asking for user credentials.\nThe `callback` function is expected to be called back with user credentials:\n\n`username` string\n`password` string\n\n`JavaScript\nrequest.on('login', (authInfo, callback) => {\n  callback('username', 'password')\n})`\nProviding empty credentials will cancel the request and report an authentication\nerror on the response object:\n`JavaScript\nrequest.on('response', (response) => {\n  console.log(`STATUS: ${response.statusCode}`);\n  response.on('error', (error) => {\n    console.log(`ERROR: ${JSON.stringify(error)}`)\n  })\n})\nrequest.on('login', (authInfo, callback) => {\n  callback()\n})`\nEvent: 'finish'\nEmitted just after the last chunk of the `request`'s data has been written into\nthe `request` object.\nEvent: 'abort'\nEmitted when the `request` is aborted. The `abort` event will not be fired if\nthe `request` is already closed.\nEvent: 'error'\nReturns:\n\n`error` Error - an error object providing some information about the failure.\n\nEmitted when the `net` module fails to issue a network request. Typically when\nthe `request` object emits an `error` event, a `close` event will subsequently\nfollow and no response object will be provided.\nEvent: 'close'\nEmitted as the last event in the HTTP request-response transaction. The `close`\nevent indicates that no more events will be emitted on either the `request` or\n`response` objects.\nEvent: 'redirect'\nReturns:\n\n`statusCode` Integer\n`method` string\n`redirectUrl` string\n`responseHeaders` Record\n\nEmitted when the server returns a redirect response (e.g. 301 Moved\nPermanently). Calling request.followRedirect will\ncontinue with the redirection.  If this event is handled,\nrequest.followRedirect must be called\nsynchronously, otherwise the request will be cancelled.\nInstance Properties\n`request.chunkedEncoding`\nA `boolean` specifying whether the request will use HTTP chunked transfer encoding\nor not. Defaults to false. The property is readable and writable, however it can\nbe set only before the first write operation as the HTTP headers are not yet put\non the wire. Trying to set the `chunkedEncoding` property after the first write\nwill throw an error.\nUsing chunked encoding is strongly recommended if you need to send a large\nrequest body as data will be streamed in small chunks instead of being\ninternally buffered inside Electron process memory.\nInstance Methods\n`request.setHeader(name, value)`\n\n`name` string - An extra HTTP header name.\n`value` string - An extra HTTP header value.\n\nAdds an extra HTTP header. The header name will be issued as-is without\nlowercasing. It can be called only before first write. Calling this method after\nthe first write will throw an error. If the passed value is not a `string`, its\n`toString()` method will be called to obtain the final value.\nCertain headers are restricted from being set by apps. These headers are\nlisted below. More information on restricted headers can be found in\nChromium's header utils.\n\n`Content-Length`\n`Host`\n`Trailer` or `Te`\n`Upgrade`\n`Cookie2`\n`Keep-Alive`\n`Transfer-Encoding`\n\nAdditionally, setting the `Connection` header to the value `upgrade` is also disallowed.\n`request.getHeader(name)`\n\n`name` string - Specify an extra header name.\n\nReturns `string` - The value of a previously set extra header name.\n`request.removeHeader(name)`\n\n`name` string - Specify an extra header name.\n\nRemoves a previously set extra header name. This method can be called only\nbefore first write. Trying to call it after the first write will throw an error.\n`request.write(chunk[, encoding][, callback])`\n\n`chunk` (string | Buffer) - A chunk of the request body's data. If it is a\nstring, it is converted into a Buffer using the specified encoding.\n`encoding` string (optional) - Used to convert string chunks into Buffer\nobjects. Defaults to 'utf-8'.\n`callback` Function (optional) - Called after the write operation ends.\n\n`callback` is essentially a dummy function introduced in the purpose of keeping\nsimilarity with the Node.js API. It is called asynchronously in the next tick\nafter `chunk` content have been delivered to the Chromium networking layer.\nContrary to the Node.js implementation, it is not guaranteed that `chunk`\ncontent have been flushed on the wire before `callback` is called.\nAdds a chunk of data to the request body. The first write operation may cause\nthe request headers to be issued on the wire. After the first write operation,\nit is not allowed to add or remove a custom header.\n`request.end([chunk][, encoding][, callback])`\n\n`chunk` (string | Buffer) (optional)\n`encoding` string (optional)\n`callback` Function (optional)\n\nSends the last chunk of the request data. Subsequent write or end operations\nwill not be allowed. The `finish` event is emitted just after the end operation.\n`request.abort()`\nCancels an ongoing HTTP transaction. If the request has already emitted the\n`close` event, the abort operation will have no effect. Otherwise an ongoing\nevent will emit `abort` and `close` events. Additionally, if there is an ongoing\nresponse object,it will emit the `aborted` event.\n`request.followRedirect()`\nContinues any pending redirection. Can only be called during a `'redirect'`\nevent.\n`request.getUploadProgress()`\nReturns `Object`:\n\n`active` boolean - Whether the request is currently active. If this is false\nno other properties will be set\n`started` boolean - Whether the upload has started. If this is false both\n`current` and `total` will be set to 0.\n`current` Integer - The number of bytes that have been uploaded so far\n`total` Integer - The number of bytes that will be uploaded this request\n\nYou can use this method in conjunction with `POST` requests to get the progress\nof a file upload or other data transfer.",
    "tag": "electron"
  },
  {
    "title": "systemPreferences",
    "source": "https://github.com/electron/electron/tree/main/docs/api/system-preferences.md",
    "content": "systemPreferences\n\nGet system preferences.\n\nProcess: Main\n`javascript\nconst { systemPreferences } = require('electron')\nconsole.log(systemPreferences.isDarkMode())`\nEvents\nThe `systemPreferences` object emits the following events:\nEvent: 'accent-color-changed' Windows\nReturns:\n\n`event` Event\n`newColor` string - The new RGBA color the user assigned to be their system\n  accent color.\n\nEvent: 'color-changed' Windows\nReturns:\n\n`event` Event\n\nEvent: 'inverted-color-scheme-changed' Windows Deprecated\nReturns:\n\n`event` Event\n`invertedColorScheme` boolean - `true` if an inverted color scheme (a high contrast color scheme with light text and dark backgrounds) is being used, `false` otherwise.\n\nDeprecated: Should use the new updated event on the `nativeTheme` module.\nEvent: 'high-contrast-color-scheme-changed' Windows Deprecated\nReturns:\n\n`event` Event\n`highContrastColorScheme` boolean - `true` if a high contrast theme is being used, `false` otherwise.\n\nDeprecated: Should use the new updated event on the `nativeTheme` module.\nMethods\n`systemPreferences.isDarkMode()` macOS Windows Deprecated\nReturns `boolean` - Whether the system is in Dark Mode.\nDeprecated: Should use the new nativeTheme.shouldUseDarkColors API.\n`systemPreferences.isSwipeTrackingFromScrollEventsEnabled()` macOS\nReturns `boolean` - Whether the Swipe between pages setting is on.\n`systemPreferences.postNotification(event, userInfo[, deliverImmediately])` macOS\n\n`event` string\n`userInfo` Record\n`deliverImmediately` boolean (optional) - `true` to post notifications immediately even when the subscribing app is inactive.\n\nPosts `event` as native notifications of macOS. The `userInfo` is an Object\nthat contains the user information dictionary sent along with the notification.\n`systemPreferences.postLocalNotification(event, userInfo)` macOS\n\n`event` string\n`userInfo` Record\n\nPosts `event` as native notifications of macOS. The `userInfo` is an Object\nthat contains the user information dictionary sent along with the notification.\n`systemPreferences.postWorkspaceNotification(event, userInfo)` macOS\n\n`event` string\n`userInfo` Record\n\nPosts `event` as native notifications of macOS. The `userInfo` is an Object\nthat contains the user information dictionary sent along with the notification.\n`systemPreferences.subscribeNotification(event, callback)` macOS\n\n`event` string | null\n`callback` Function\n`event` string\n`userInfo` Record\n`object` string\n\nReturns `number` - The ID of this subscription\nSubscribes to native notifications of macOS, `callback` will be called with\n`callback(event, userInfo)` when the corresponding `event` happens. The\n`userInfo` is an Object that contains the user information dictionary sent\nalong with the notification. The `object` is the sender of the notification,\nand only supports `NSString` values for now.\nThe `id` of the subscriber is returned, which can be used to unsubscribe the\n`event`.\nUnder the hood this API subscribes to `NSDistributedNotificationCenter`,\nexample values of `event` are:\n\n`AppleInterfaceThemeChangedNotification`\n`AppleAquaColorVariantChanged`\n`AppleColorPreferencesChangedNotification`\n`AppleShowScrollBarsSettingChanged`\n\nIf `event` is null, the `NSDistributedNotificationCenter` doesn\u2019t use it as criteria for delivery to the observer. See docs  for more information.\n`systemPreferences.subscribeLocalNotification(event, callback)` macOS\n\n`event` string | null\n`callback` Function\n`event` string\n`userInfo` Record\n`object` string\n\nReturns `number` - The ID of this subscription\nSame as `subscribeNotification`, but uses `NSNotificationCenter` for local defaults.\nThis is necessary for events such as `NSUserDefaultsDidChangeNotification`.\nIf `event` is null, the `NSNotificationCenter` doesn\u2019t use it as criteria for delivery to the observer. See docs for more information.\n`systemPreferences.subscribeWorkspaceNotification(event, callback)` macOS\n\n`event` string | null\n`callback` Function\n`event` string\n`userInfo` Record\n`object` string\n\nReturns `number` - The ID of this subscription\nSame as `subscribeNotification`, but uses `NSWorkspace.sharedWorkspace.notificationCenter`.\nThis is necessary for events such as `NSWorkspaceDidActivateApplicationNotification`.\nIf `event` is null, the `NSWorkspaceNotificationCenter` doesn\u2019t use it as criteria for delivery to the observer. See docs for more information.\n`systemPreferences.unsubscribeNotification(id)` macOS\n\n`id` Integer\n\nRemoves the subscriber with `id`.\n`systemPreferences.unsubscribeLocalNotification(id)` macOS\n\n`id` Integer\n\nSame as `unsubscribeNotification`, but removes the subscriber from `NSNotificationCenter`.\n`systemPreferences.unsubscribeWorkspaceNotification(id)` macOS\n\n`id` Integer\n\nSame as `unsubscribeNotification`, but removes the subscriber from `NSWorkspace.sharedWorkspace.notificationCenter`.\n`systemPreferences.registerDefaults(defaults)` macOS\n\n`defaults` Record - a dictionary of (`key: value`) user defaults\n\nAdd the specified defaults to your application's `NSUserDefaults`.\n`systemPreferences.getUserDefault<Type extends keyof UserDefaultTypes>(key, type)` macOS\n\n`key` string\n`type` Type - Can be `string`, `boolean`, `integer`, `float`, `double`,\n  `url`, `array` or `dictionary`.\n\nReturns UserDefaultTypes[Type] - The value of `key` in `NSUserDefaults`.\nSome popular `key` and `type`s are:\n\n`AppleInterfaceStyle`: `string`\n`AppleAquaColorVariant`: `integer`\n`AppleHighlightColor`: `string`\n`AppleShowScrollBars`: `string`\n`NSNavRecentPlaces`: `array`\n`NSPreferredWebServices`: `dictionary`\n`NSUserDictionaryReplacementItems`: `array`\n\n`systemPreferences.setUserDefault<Type extends keyof UserDefaultTypes>(key, type, value)` macOS\n\n`key` string\n`type` Type - Can be `string`, `boolean`, `integer`, `float`, `double`, `url`, `array` or `dictionary`.\n`value` UserDefaultTypes[Type]\n\nSet the value of `key` in `NSUserDefaults`.\nNote that `type` should match actual type of `value`. An exception is thrown\nif they don't.\nSome popular `key` and `type`s are:\n\n`ApplePressAndHoldEnabled`: `boolean`\n\n`systemPreferences.removeUserDefault(key)` macOS\n\n`key` string\n\nRemoves the `key` in `NSUserDefaults`. This can be used to restore the default\nor global value of a `key` previously set with `setUserDefault`.\n`systemPreferences.isAeroGlassEnabled()` Windows\nReturns `boolean` - `true` if DWM composition (Aero Glass) is\nenabled, and `false` otherwise.\nAn example of using it to determine if you should create a transparent window or\nnot (transparent windows won't work correctly when DWM composition is disabled):\n```javascript\nconst { BrowserWindow, systemPreferences } = require('electron')\nconst browserOptions = { width: 1000, height: 800 }\n// Make the window transparent only if the platform supports it.\nif (process.platform !== 'win32' || systemPreferences.isAeroGlassEnabled()) {\n  browserOptions.transparent = true\n  browserOptions.frame = false\n}\n// Create the window.\nconst win = new BrowserWindow(browserOptions)\n// Navigate.\nif (browserOptions.transparent) {\n  win.loadURL(`file://${__dirname}/index.html`)\n} else {\n  // No transparency, so we load a fallback that uses basic styles.\n  win.loadURL(`file://${__dirname}/fallback.html`)\n}\n```\n`systemPreferences.getAccentColor()` Windows macOS\nReturns `string` - The users current system wide accent color preference in RGBA\nhexadecimal form.\n`js\nconst color = systemPreferences.getAccentColor() // `\"aabbccdd\"`\nconst red = color.substr(0, 2) // \"aa\"\nconst green = color.substr(2, 2) // \"bb\"\nconst blue = color.substr(4, 2) // \"cc\"\nconst alpha = color.substr(6, 2) // \"dd\"`\nThis API is only available on macOS 10.14 Mojave or newer.\n`systemPreferences.getColor(color)` Windows macOS\n\n`color` string - One of the following values:\nOn Windows:\n`3d-dark-shadow` - Dark shadow for three-dimensional display elements.\n`3d-face` - Face color for three-dimensional display elements and for dialog\n  box backgrounds.\n`3d-highlight` - Highlight color for three-dimensional display elements.\n`3d-light` - Light color for three-dimensional display elements.\n`3d-shadow` - Shadow color for three-dimensional display elements.\n`active-border` - Active window border.\n`active-caption` - Active window title bar. Specifies the left side color in\n  the color gradient of an active window's title bar if the gradient effect is\n  enabled.\n`active-caption-gradient` - Right side color in the color gradient of an\n  active window's title bar.\n`app-workspace` - Background color of multiple document interface (MDI)\n  applications.\n`button-text` - Text on push buttons.\n`caption-text` - Text in caption, size box, and scroll bar arrow box.\n`desktop` - Desktop background color.\n`disabled-text` - Grayed (disabled) text.\n`highlight` - Item(s) selected in a control.\n`highlight-text` - Text of item(s) selected in a control.\n`hotlight` - Color for a hyperlink or hot-tracked item.\n`inactive-border` - Inactive window border.\n`inactive-caption` - Inactive window caption. Specifies the left side color\n  in the color gradient of an inactive window's title bar if the gradient\n  effect is enabled.\n`inactive-caption-gradient` - Right side color in the color gradient of an\n  inactive window's title bar.\n`inactive-caption-text` - Color of text in an inactive caption.\n`info-background` - Background color for tooltip controls.\n`info-text` - Text color for tooltip controls.\n`menu` - Menu background.\n`menu-highlight` - The color used to highlight menu items when the menu\n  appears as a flat menu.\n`menubar` - The background color for the menu bar when menus appear as flat\n  menus.\n`menu-text` - Text in menus.\n`scrollbar` - Scroll bar gray area.\n`window` - Window background.\n`window-frame` - Window frame.\n`window-text` - Text in windows.\n\n\nOn macOS\n`alternate-selected-control-text` - The text on a selected surface in a list or table. deprecated\n`control-background` - The background of a large interface element, such as a browser or table.\n`control` - The surface of a control.\n`control-text` -The text of a control that isn\u2019t disabled.\n`disabled-control-text` - The text of a control that\u2019s disabled.\n`find-highlight` - The color of a find indicator.\n`grid` - The gridlines of an interface element such as a table.\n`header-text` - The text of a header cell in a table.\n`highlight` - The virtual light source onscreen.\n`keyboard-focus-indicator` - The ring that appears around the currently focused control when using the keyboard for interface navigation.\n`label` - The text of a label containing primary content.\n`link` - A link to other content.\n`placeholder-text` -  A placeholder string in a control or text view.\n`quaternary-label` - The text of a label of lesser importance than a tertiary label such as watermark text.\n`scrubber-textured-background` - The background of a scrubber in the Touch Bar.\n`secondary-label` - The text of a label of lesser importance than a normal label such as a label used to represent a subheading or additional information.\n`selected-content-background` - The background for selected content in a key window or view.\n`selected-control` - The surface of a selected control.\n`selected-control-text` - The text of a selected control.\n`selected-menu-item-text` - The text of a selected menu.\n`selected-text-background` - The background of selected text.\n`selected-text` - Selected text.\n`separator` - A separator between different sections of content.\n`shadow` - The virtual shadow cast by a raised object onscreen.\n`tertiary-label` - The text of a label of lesser importance than a secondary label such as a label used to represent disabled text.\n`text-background` - Text background.\n`text` -  The text in a document.\n`under-page-background` -  The background behind a document's content.\n`unemphasized-selected-content-background` - The selected content in a non-key window or view.\n`unemphasized-selected-text-background` - A background for selected text in a non-key window or view.\n`unemphasized-selected-text` - Selected text in a non-key window or view.\n`window-background` - The background of a window.\n`window-frame-text` - The text in the window's titlebar area.\n\n\n\nReturns `string` - The system color setting in RGB hexadecimal form (`#ABCDEF`).\nSee the Windows docs and the macOS docs for more details.\nThe following colors are only available on macOS 10.14: `find-highlight`, `selected-content-background`, `separator`, `unemphasized-selected-content-background`, `unemphasized-selected-text-background`, and `unemphasized-selected-text`.\n`systemPreferences.getSystemColor(color)` macOS\n\n`color` string - One of the following values:\n`blue`\n`brown`\n`gray`\n`green`\n`orange`\n`pink`\n`purple`\n`red`\n`yellow`\n\nReturns `string` - The standard system color formatted as `#RRGGBBAA`.\nReturns one of several standard system colors that automatically adapt to vibrancy and changes in accessibility settings like 'Increase contrast' and 'Reduce transparency'. See Apple Documentation for  more details.\n`systemPreferences.isInvertedColorScheme()` Windows Deprecated\nReturns `boolean` - `true` if an inverted color scheme (a high contrast color scheme with light text and dark backgrounds) is active, `false` otherwise.\nDeprecated: Should use the new nativeTheme.shouldUseInvertedColorScheme API.\n`systemPreferences.isHighContrastColorScheme()` macOS Windows Deprecated\nReturns `boolean` - `true` if a high contrast theme is active, `false` otherwise.\nDeprecated: Should use the new nativeTheme.shouldUseHighContrastColors API.\n`systemPreferences.getEffectiveAppearance()` macOS\nReturns `string` - Can be `dark`, `light` or `unknown`.\nGets the macOS appearance setting that is currently applied to your application,\nmaps to NSApplication.effectiveAppearance\n`systemPreferences.getAppLevelAppearance()` macOS Deprecated\nReturns `string` | `null` - Can be `dark`, `light` or `unknown`.\nGets the macOS appearance setting that you have declared you want for\nyour application, maps to NSApplication.appearance.\nYou can use the `setAppLevelAppearance` API to set this value.\n`systemPreferences.setAppLevelAppearance(appearance)` macOS Deprecated\n\n`appearance` string | null - Can be `dark` or `light`\n\nSets the appearance setting for your application, this should override the\nsystem default and override the value of `getEffectiveAppearance`.\n`systemPreferences.canPromptTouchID()` macOS\nReturns `boolean` - whether or not this device has the ability to use Touch ID.\n`systemPreferences.promptTouchID(reason)` macOS\n\n`reason` string - The reason you are asking for Touch ID authentication\n\nReturns `Promise<void>` - resolves if the user has successfully authenticated with Touch ID.\n```javascript\nconst { systemPreferences } = require('electron')\nsystemPreferences.promptTouchID('To get consent for a Security-Gated Thing').then(success => {\n  console.log('You have successfully authenticated with Touch ID!')\n}).catch(err => {\n  console.log(err)\n})\n```\nThis API itself will not protect your user data; rather, it is a mechanism to allow you to do so. Native apps will need to set Access Control Constants like kSecAccessControlUserPresence on their keychain entry so that reading it would auto-prompt for Touch ID biometric consent. This could be done with node-keytar, such that one would store an encryption key with `node-keytar` and only fetch it if `promptTouchID()` resolves.\n`systemPreferences.isTrustedAccessibilityClient(prompt)` macOS\n\n`prompt` boolean - whether or not the user will be informed via prompt if the current process is untrusted.\n\nReturns `boolean` - `true` if the current process is a trusted accessibility client and `false` if it is not.\n`systemPreferences.getMediaAccessStatus(mediaType)` Windows macOS\n\n`mediaType` string - Can be `microphone`, `camera` or `screen`.\n\nReturns `string` - Can be `not-determined`, `granted`, `denied`, `restricted` or `unknown`.\nThis user consent was not required on macOS 10.13 High Sierra so this method will always return `granted`.\nmacOS 10.14 Mojave or higher requires consent for `microphone` and `camera` access.\nmacOS 10.15 Catalina or higher requires consent for `screen` access.\nWindows 10 has a global setting controlling `microphone` and `camera` access for all win32 applications.\nIt will always return `granted` for `screen` and for all media types on older versions of Windows.\n`systemPreferences.askForMediaAccess(mediaType)` macOS\n\n`mediaType` string - the type of media being requested; can be `microphone`, `camera`.\n\nReturns `Promise<boolean>` - A promise that resolves with `true` if consent was granted and `false` if it was denied. If an invalid `mediaType` is passed, the promise will be rejected. If an access request was denied and later is changed through the System Preferences pane, a restart of the app will be required for the new permissions to take effect. If access has already been requested and denied, it must be changed through the preference pane; an alert will not pop up and the promise will resolve with the existing access status.\nImportant: In order to properly leverage this API, you must set the `NSMicrophoneUsageDescription` and `NSCameraUsageDescription` strings in your app's `Info.plist` file. The values for these keys will be used to populate the permission dialogs so that the user will be properly informed as to the purpose of the permission request. See Electron Application Distribution for more information about how to set these in the context of Electron.\nThis user consent was not required until macOS 10.14 Mojave, so this method will always return `true` if your system is running 10.13 High Sierra.\n`systemPreferences.getAnimationSettings()`\nReturns `Object`:\n\n`shouldRenderRichAnimation` boolean - Returns true if rich animations should be rendered. Looks at session type (e.g. remote desktop) and accessibility settings to give guidance for heavy animations.\n`scrollAnimationsEnabledBySystem` boolean - Determines on a per-platform basis whether scroll animations (e.g. produced by home/end key) should be enabled.\n`prefersReducedMotion` boolean - Determines whether the user desires reduced motion based on platform APIs.\n\nReturns an object with system animation settings.\nProperties\n`systemPreferences.appLevelAppearance` macOS\nA `string` property that can be `dark`, `light` or `unknown`. It determines the macOS appearance setting for\nyour application. This maps to values in: NSApplication.appearance. Setting this will override the\nsystem default as well as the value of `getEffectiveAppearance`.\nPossible values that can be set are `dark` and `light`, and possible return values are `dark`, `light`, and `unknown`.\nThis property is only available on macOS 10.14 Mojave or newer.\n`systemPreferences.effectiveAppearance` macOS Readonly\nA `string` property that can be `dark`, `light` or `unknown`.\nReturns the macOS appearance setting that is currently applied to your application,",
    "tag": "electron"
  },
  {
    "title": "Class: TouchBarScrubber",
    "source": "https://github.com/electron/electron/tree/main/docs/api/touch-bar-scrubber.md",
    "content": "Class: TouchBarScrubber\n\nCreate a scrubber (a scrollable selector)\n\nProcess: Main\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\n`new TouchBarScrubber(options)`\n\n`options` Object\n`items` ScrubberItem[] - An array of items to place in this scrubber.\n`select` Function (optional) - Called when the user taps an item that was not the last tapped item.\n`selectedIndex` Integer - The index of the item the user selected.\n\n\n`highlight` Function (optional) - Called when the user taps any item.\n`highlightedIndex` Integer - The index of the item the user touched.\n\n\n`selectedStyle` string (optional) - Selected item style. Can be `background`, `outline` or `none`. Defaults to `none`.\n`overlayStyle` string (optional) - Selected overlay item style. Can be `background`, `outline` or `none`. Defaults to `none`.\n`showArrowButtons` boolean (optional) - Whether to show arrow buttons. Defaults to `false` and is only shown if `items` is non-empty.\n`mode` string (optional) - Can be `fixed` or `free`. The default is `free`.\n`continuous` boolean (optional) - Defaults to `true`.\n\nInstance Properties\nThe following properties are available on instances of `TouchBarScrubber`:\n`touchBarScrubber.items`\nA `ScrubberItem[]` array representing the items in this scrubber. Updating this value immediately\nupdates the control in the touch bar. Updating deep properties inside this array does not update the touch bar.\n`touchBarScrubber.selectedStyle`\nA `string` representing the style that selected items in the scrubber should have. Updating this value immediately\nupdates the control in the touch bar. Possible values:\n\n`background` - Maps to `[NSScrubberSelectionStyle roundedBackgroundStyle]`.\n`outline` - Maps to `[NSScrubberSelectionStyle outlineOverlayStyle]`.\n`none` - Removes all styles.\n\n`touchBarScrubber.overlayStyle`\nA `string` representing the style that selected items in the scrubber should have. This style is overlayed on top\nof the scrubber item instead of being placed behind it. Updating this value immediately updates the control in the\ntouch bar. Possible values:\n\n`background` - Maps to `[NSScrubberSelectionStyle roundedBackgroundStyle]`.\n`outline` - Maps to `[NSScrubberSelectionStyle outlineOverlayStyle]`.\n`none` - Removes all styles.\n\n`touchBarScrubber.showArrowButtons`\nA `boolean` representing whether to show the left / right selection arrows in this scrubber. Updating this value\nimmediately updates the control in the touch bar.\n`touchBarScrubber.mode`\nA `string` representing the mode of this scrubber. Updating this value immediately\nupdates the control in the touch bar. Possible values:\n\n`fixed` - Maps to `NSScrubberModeFixed`.\n`free` - Maps to `NSScrubberModeFree`.\n\n`touchBarScrubber.continuous`\nA `boolean` representing whether this scrubber is continuous or not. Updating this value immediately",
    "tag": "electron"
  },
  {
    "title": "Supported Command Line Switches",
    "source": "https://github.com/electron/electron/tree/main/docs/api/command-line-switches.md",
    "content": "Supported Command Line Switches\n\nCommand line switches supported by Electron.\n\nYou can use app.commandLine.appendSwitch to append them in\nyour app's main script before the ready event of the app module\nis emitted:\n```javascript\nconst { app } = require('electron')\napp.commandLine.appendSwitch('remote-debugging-port', '8315')\napp.commandLine.appendSwitch('host-rules', 'MAP * 127.0.0.1')\napp.whenReady().then(() => {\n  // Your code here\n})\n```\nElectron CLI Flags\n--auth-server-whitelist=`url`\nA comma-separated list of servers for which integrated authentication is enabled.\nFor example:\n`sh\n--auth-server-whitelist='*example.com, *foobar.com, *baz'`\nthen any `url` ending with `example.com`, `foobar.com`, `baz` will be considered\nfor integrated authentication. Without `*` prefix the URL has to match exactly.\n--auth-negotiate-delegate-whitelist=`url`\nA comma-separated list of servers for which delegation of user credentials is required.\nWithout `*` prefix the URL has to match exactly.\n--disable-ntlm-v2\nDisables NTLM v2 for posix platforms, no effect elsewhere.\n--disable-http-cache\nDisables the disk cache for HTTP requests.\n--disable-http2\nDisable HTTP/2 and SPDY/3.1 protocols.\n--disable-renderer-backgrounding\nPrevents Chromium from lowering the priority of invisible pages' renderer\nprocesses.\nThis flag is global to all renderer processes, if you only want to disable\nthrottling in one window, you can take the hack of\nplaying silent audio.\n--disk-cache-size=`size`\nForces the maximum disk space to be used by the disk cache, in bytes.\n--enable-logging[=file]\nPrints Chromium's logging to stderr (or a log file).\nThe `ELECTRON_ENABLE_LOGGING` environment variable has the same effect as\npassing `--enable-logging`.\nPassing `--enable-logging` will result in logs being printed on stderr.\nPassing `--enable-logging=file` will result in logs being saved to the file\nspecified by `--log-file=...`, or to `electron_debug.log` in the user-data\ndirectory if `--log-file` is not specified.\n\nNote: On Windows, logs from child processes cannot be sent to stderr.\nLogging to a file is the most reliable way to collect logs on Windows.\n\nSee also `--log-file`, `--log-level`, `--v`, and `--vmodule`.\n--force-fieldtrials=`trials`\nField trials to be forcefully enabled or disabled.\nFor example: `WebRTC-Audio-Red-For-Opus/Enabled/`\n--host-rules=`rules`\nA comma-separated list of `rules` that control how hostnames are mapped.\nFor example:\n\n`MAP * 127.0.0.1` Forces all hostnames to be mapped to 127.0.0.1\n`MAP *.google.com proxy` Forces all google.com subdomains to be resolved to\n  \"proxy\".\n`MAP test.com [::1]:77` Forces \"test.com\" to resolve to IPv6 loopback. Will\n  also force the port of the resulting socket address to be 77.\n`MAP * baz, EXCLUDE www.google.com` Remaps everything to \"baz\", except for\n  \"www.google.com\".\n\nThese mappings apply to the endpoint host in a net request (the TCP connect\nand host resolver in a direct connection, and the `CONNECT` in an HTTP proxy\nconnection, and the endpoint host in a `SOCKS` proxy connection).\n--host-resolver-rules=`rules`\nLike `--host-rules` but these `rules` only apply to the host resolver.\n--ignore-certificate-errors\nIgnores certificate related errors.\n--ignore-connections-limit=`domains`\nIgnore the connections limit for `domains` list separated by `,`.\n--js-flags=`flags`\nSpecifies the flags passed to the Node.js engine. It has to be passed when starting\nElectron if you want to enable the `flags` in the main process.\n`sh\n$ electron --js-flags=\"--harmony_proxies --harmony_collections\" your-app`\nSee the Node.js documentation or run `node --help` in your terminal for a list of available flags. Additionally, run `node --v8-options` to see a list of flags that specifically refer to Node.js's V8 JavaScript engine.\n--lang\nSet a custom locale.\n--log-file=`path`\nIf `--enable-logging` is specified, logs will be written to the given path. The\nparent directory must exist.\nSetting the `ELECTRON_LOG_FILE` environment variable is equivalent to passing\nthis flag. If both are present, the command-line switch takes precedence.\n--log-net-log=`path`\nEnables net log events to be saved and writes them to `path`.\n--log-level=`N`\nSets the verbosity of logging when used together with `--enable-logging`.\n`N` should be one of [Chrome's LogSeverities][severities].\nNote that two complimentary logging mechanisms in Chromium -- `LOG()`\nand `VLOG()` -- are controlled by different switches. `--log-level`\ncontrols `LOG()` messages, while `--v` and `--vmodule` control `VLOG()`\nmessages. So you may want to use a combination of these three switches\ndepending on the granularity you want and what logging calls are made\nby the code you're trying to watch.\nSee Chromium Logging source for more information on how\n`LOG()` and `VLOG()` interact. Loosely speaking, `VLOG()` can be thought\nof as sub-levels / per-module levels inside `LOG(INFO)` to control the\nfirehose of `LOG(INFO)` data.\nSee also `--enable-logging`, `--log-level`, `--v`, and `--vmodule`.\n--no-proxy-server\nDon't use a proxy server and always make direct connections. Overrides any other\nproxy server flags that are passed.\n--no-sandbox\nDisables the Chromium sandbox.\nForces renderer process and Chromium helper processes to run un-sandboxed.\nShould only be used for testing.\n--proxy-bypass-list=`hosts`\nInstructs Electron to bypass the proxy server for the given semi-colon-separated\nlist of hosts. This flag has an effect only if used in tandem with\n`--proxy-server`.\nFor example:\n`javascript\nconst { app } = require('electron')\napp.commandLine.appendSwitch('proxy-bypass-list', '<local>;*.google.com;*foo.com;1.2.3.4:5678')`\nWill use the proxy server for all hosts except for local addresses (`localhost`,\n`127.0.0.1` etc.), `google.com` subdomains, hosts that contain the suffix\n`foo.com` and anything at `1.2.3.4:5678`.\n--proxy-pac-url=`url`\nUses the PAC script at the specified `url`.\n--proxy-server=`address:port`\nUse a specified proxy server, which overrides the system setting. This switch\nonly affects requests with HTTP protocol, including HTTPS and WebSocket\nrequests. It is also noteworthy that not all proxy servers support HTTPS and\nWebSocket requests. The proxy URL does not support username and password\nauthentication per Chromium issue.\n--remote-debugging-port=`port`\nEnables remote debugging over HTTP on the specified `port`.\n--v=`log_level`\nGives the default maximal active V-logging level; 0 is the default. Normally\npositive values are used for V-logging levels.\nThis switch only works when `--enable-logging` is also passed.\nSee also `--enable-logging`, `--log-level`, and `--vmodule`.\n--vmodule=`pattern`\nGives the per-module maximal V-logging levels to override the value given by\n`--v`. E.g. `my_module=2,foo*=3` would change the logging level for all code in\nsource files `my_module.*` and `foo*.*`.\nAny pattern containing a forward or backward slash will be tested against the\nwhole pathname and not only the module. E.g. `*/foo/bar/*=2` would change the\nlogging level for all code in the source files under a `foo/bar` directory.\nThis switch only works when `--enable-logging` is also passed.\nSee also `--enable-logging`, `--log-level`, and `--v`.\n--force_high_performance_gpu\nForce using discrete GPU when there are multiple GPUs available.\n--force_low_power_gpu\nForce using integrated GPU when there are multiple GPUs available.\nNode.js Flags\nElectron supports some of the CLI flags supported by Node.js.\nNote: Passing unsupported command line switches to Electron when it is not running in `ELECTRON_RUN_AS_NODE` will have no effect.\n--inspect-brk[=[host:]port]\nActivate inspector on host:port and break at start of user script. Default host:port is 127.0.0.1:9229.\nAliased to `--debug-brk=[host:]port`.\n--inspect-port=[host:]port\nSet the `host:port` to be used when the inspector is activated. Useful when activating the inspector by sending the SIGUSR1 signal. Default host is `127.0.0.1`.\nAliased to `--debug-port=[host:]port`.\n--inspect[=[host:]port]\nActivate inspector on `host:port`. Default is `127.0.0.1:9229`.\nV8 inspector integration allows tools such as Chrome DevTools and IDEs to debug and profile Electron instances. The tools attach to Electron instances via a TCP port and communicate using the Chrome DevTools Protocol.\nSee the Debugging the Main Process guide for more details.\nAliased to `--debug[=[host:]port`.\n--inspect-publish-uid=stderr,http\nSpecify ways of the inspector web socket url exposure.\nBy default inspector websocket url is available in stderr and under /json/list endpoint on http://host:port/json/list.",
    "tag": "electron"
  },
  {
    "title": "contentTracing",
    "source": "https://github.com/electron/electron/tree/main/docs/api/content-tracing.md",
    "content": "contentTracing\n\nCollect tracing data from Chromium to find performance bottlenecks and slow operations.\n\nProcess: Main\nThis module does not include a web interface. To view recorded traces, use\n[trace viewer][], available at `chrome://tracing` in Chrome.\nNote: You should not use this module until the `ready` event of the app\nmodule is emitted.\n```javascript\nconst { app, contentTracing } = require('electron')\napp.whenReady().then(() => {\n  (async () => {\n    await contentTracing.startRecording({\n      included_categories: ['*']\n    })\n    console.log('Tracing started')\n    await new Promise(resolve => setTimeout(resolve, 5000))\n    const path = await contentTracing.stopRecording()\n    console.log('Tracing data recorded to ' + path)\n  })()\n})\n```\nMethods\nThe `contentTracing` module has the following methods:\n`contentTracing.getCategories()`\nReturns `Promise<string[]>` - resolves with an array of category groups once all child processes have acknowledged the `getCategories` request\nGet a set of category groups. The category groups can change as new code paths\nare reached. See also the list of built-in tracing\ncategories.\n\nNOTE: Electron adds a non-default tracing category called `\"electron\"`.\nThis category can be used to capture Electron-specific tracing events.\n\n`contentTracing.startRecording(options)`\n\n`options` (TraceConfig | TraceCategoriesAndOptions)\n\nReturns `Promise<void>` - resolved once all child processes have acknowledged the `startRecording` request.\nStart recording on all processes.\nRecording begins immediately locally and asynchronously on child processes\nas soon as they receive the EnableRecording request.\nIf a recording is already running, the promise will be immediately resolved, as\nonly one trace operation can be in progress at a time.\n`contentTracing.stopRecording([resultFilePath])`\n\n`resultFilePath` string (optional)\n\nReturns `Promise<string>` - resolves with a path to a file that contains the traced data once all child processes have acknowledged the `stopRecording` request\nStop recording on all processes.\nChild processes typically cache trace data and only rarely flush and send\ntrace data back to the main process. This helps to minimize the runtime overhead\nof tracing since sending trace data over IPC can be an expensive operation. So,\nto end tracing, Chromium asynchronously asks all child processes to flush any\npending trace data.\nTrace data will be written into `resultFilePath`. If `resultFilePath` is empty\nor not provided, trace data will be written to a temporary file, and the path\nwill be returned in the promise.\n`contentTracing.getTraceBufferUsage()`\nReturns `Promise<Object>` - Resolves with an object containing the `value` and `percentage` of trace buffer maximum usage\n\n`value` number\n`percentage` number\n\nGet the maximum usage across processes of trace buffer as a percentage of the\nfull state.",
    "tag": "electron"
  },
  {
    "title": "Accelerator",
    "source": "https://github.com/electron/electron/tree/main/docs/api/accelerator.md",
    "content": "Accelerator\n\nDefine keyboard shortcuts.\n\nAccelerators are strings that can contain multiple modifiers and a single key code,\ncombined by the `+` character, and are used to define keyboard shortcuts\nthroughout your application.\nExamples:\n\n`CommandOrControl+A`\n`CommandOrControl+Shift+Z`\n\nShortcuts are registered with the globalShortcut module\nusing the register\nmethod, i.e.\n```javascript\nconst { app, globalShortcut } = require('electron')\napp.whenReady().then(() => {\n  // Register a 'CommandOrControl+Y' shortcut listener.\n  globalShortcut.register('CommandOrControl+Y', () => {\n    // Do stuff when Y and either Command/Control is pressed.\n  })\n})\n```\nPlatform notice\nOn Linux and Windows, the `Command` key does not have any effect so\nuse `CommandOrControl` which represents `Command` on macOS and `Control` on\nLinux and Windows to define some accelerators.\nUse `Alt` instead of `Option`. The `Option` key only exists on macOS, whereas\nthe `Alt` key is available on all platforms.\nThe `Super` (or `Meta`) key is mapped to the `Windows` key on Windows and Linux and\n`Cmd` on macOS.\nAvailable modifiers\n\n`Command` (or `Cmd` for short)\n`Control` (or `Ctrl` for short)\n`CommandOrControl` (or `CmdOrCtrl` for short)\n`Alt`\n`Option`\n`AltGr`\n`Shift`\n`Super`\n`Meta`\n\nAvailable key codes\n\n`0` to `9`\n`A` to `Z`\n`F1` to `F24`\nPunctuation like `~`, `!`, `@`, `#`, `$`, etc.\n`Plus`\n`Space`\n`Tab`\n`Capslock`\n`Numlock`\n`Scrolllock`\n`Backspace`\n`Delete`\n`Insert`\n`Return` (or `Enter` as alias)\n`Up`, `Down`, `Left` and `Right`\n`Home` and `End`\n`PageUp` and `PageDown`\n`Escape` (or `Esc` for short)\n`VolumeUp`, `VolumeDown` and `VolumeMute`\n`MediaNextTrack`, `MediaPreviousTrack`, `MediaStop` and `MediaPlayPause`\n`PrintScreen`\nNumPad Keys\n`num0` - `num9`\n`numdec` - decimal key\n`numadd` - numpad `+` key\n`numsub` - numpad `-` key\n`nummult` - numpad `*` key\n",
    "tag": "electron"
  },
  {
    "title": "Class: TouchBarColorPicker",
    "source": "https://github.com/electron/electron/tree/main/docs/api/touch-bar-color-picker.md",
    "content": "Class: TouchBarColorPicker\n\nCreate a color picker in the touch bar for native macOS applications\n\nProcess: Main\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\n`new TouchBarColorPicker(options)`\n\n`options` Object\n`availableColors` string[] (optional) - Array of hex color strings to\n    appear as possible colors to select.\n`selectedColor` string (optional) - The selected hex color in the picker,\n    i.e `#ABCDEF`.\n`change` Function (optional) - Function to call when a color is selected.\n`color` string - The color that the user selected from the picker.\n\n\n\nInstance Properties\nThe following properties are available on instances of `TouchBarColorPicker`:\n`touchBarColorPicker.availableColors`\nA `string[]` array representing the color picker's available colors to select. Changing this value immediately\nupdates the color picker in the touch bar.\n`touchBarColorPicker.selectedColor`\nA `string` hex code representing the color picker's currently selected color. Changing this value immediately",
    "tag": "electron"
  },
  {
    "title": "clipboard",
    "source": "https://github.com/electron/electron/tree/main/docs/api/clipboard.md",
    "content": "clipboard\n\nPerform copy and paste operations on the system clipboard.\n\nProcess: Main, Renderer (non-sandboxed only)\nOn Linux, there is also a `selection` clipboard. To manipulate it\nyou need to pass `selection` to each method:\n```javascript\nconst { clipboard } = require('electron')\nclipboard.writeText('Example string', 'selection')\nconsole.log(clipboard.readText('selection'))\n```\nMethods\nThe `clipboard` module has the following methods:\nNote: Experimental APIs are marked as such and could be removed in future.\n`clipboard.readText([type])`\n\n`type` string (optional) - Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.\n\nReturns `string` - The content in the clipboard as plain text.\n```js\nconst { clipboard } = require('electron')\nclipboard.writeText('hello i am a bit of text!')\nconst text = clipboard.readText()\nconsole.log(text)\n// hello i am a bit of text!'\n```\n`clipboard.writeText(text[, type])`\n\n`text` string\n`type` string (optional) - Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.\n\nWrites the `text` into the clipboard as plain text.\n```js\nconst { clipboard } = require('electron')\nconst text = 'hello i am a bit of text!'\nclipboard.writeText(text)\n```\n`clipboard.readHTML([type])`\n\n`type` string (optional) - Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.\n\nReturns `string` - The content in the clipboard as markup.\n```js\nconst { clipboard } = require('electron')\nclipboard.writeHTML('Hi')\nconst html = clipboard.readHTML()\nconsole.log(html)\n// Hi\n```\n`clipboard.writeHTML(markup[, type])`\n\n`markup` string\n`type` string (optional) - Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.\n\nWrites `markup` to the clipboard.\n```js\nconst { clipboard } = require('electron')\nclipboard.writeHTML('Hi')\n```\n`clipboard.readImage([type])`\n\n`type` string (optional) - Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.\n\nReturns NativeImage - The image content in the clipboard.\n`clipboard.writeImage(image[, type])`\n\n`image` NativeImage\n`type` string (optional) - Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.\n\nWrites `image` to the clipboard.\n`clipboard.readRTF([type])`\n\n`type` string (optional) - Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.\n\nReturns `string` - The content in the clipboard as RTF.\n```js\nconst { clipboard } = require('electron')\nclipboard.writeRTF('{\\rtf1\\ansi{\\fonttbl\\f0\\fswiss Helvetica;}\\f0\\pard\\nThis is some {\\b bold} text.\\par\\n}')\nconst rtf = clipboard.readRTF()\nconsole.log(rtf)\n// {\\rtf1\\ansi{\\fonttbl\\f0\\fswiss Helvetica;}\\f0\\pard\\nThis is some {\\b bold} text.\\par\\n}\n```\n`clipboard.writeRTF(text[, type])`\n\n`text` string\n`type` string (optional) - Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.\n\nWrites the `text` into the clipboard in RTF.\n```js\nconst { clipboard } = require('electron')\nconst rtf = '{\\rtf1\\ansi{\\fonttbl\\f0\\fswiss Helvetica;}\\f0\\pard\\nThis is some {\\b bold} text.\\par\\n}'\nclipboard.writeRTF(rtf)\n```\n`clipboard.readBookmark()` macOS Windows\nReturns `Object`:\n\n`title` string\n`url` string\n\nReturns an Object containing `title` and `url` keys representing the bookmark in\nthe clipboard. The `title` and `url` values will be empty strings when the\nbookmark is unavailable.  The `title` value will always be empty on Windows.\n`clipboard.writeBookmark(title, url[, type])` macOS Windows\n\n`title` string - Unused on Windows\n`url` string\n`type` string (optional) - Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.\n\nWrites the `title` (macOS only) and `url` into the clipboard as a bookmark.\nNote: Most apps on Windows don't support pasting bookmarks into them so\nyou can use `clipboard.write` to write both a bookmark and fallback text to the\nclipboard.\n```js\nconst { clipboard } = require('electron')\nclipboard.writeBookmark({\n  text: 'https://electronjs.org',\n  bookmark: 'Electron Homepage'\n})\n```\n`clipboard.readFindText()` macOS\nReturns `string` - The text on the find pasteboard, which is the pasteboard that holds information about the current state of the active application\u2019s find panel.\nThis method uses synchronous IPC when called from the renderer process.\nThe cached value is reread from the find pasteboard whenever the application is activated.\n`clipboard.writeFindText(text)` macOS\n\n`text` string\n\nWrites the `text` into the find pasteboard (the pasteboard that holds information about the current state of the active application\u2019s find panel) as plain text. This method uses synchronous IPC when called from the renderer process.\n`clipboard.clear([type])`\n\n`type` string (optional) - Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.\n\nClears the clipboard content.\n`clipboard.availableFormats([type])`\n\n`type` string (optional) - Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.\n\nReturns `string[]` - An array of supported formats for the clipboard `type`.\n```js\nconst { clipboard } = require('electron')\nconst formats = clipboard.availableFormats()\nconsole.log(formats)\n// [ 'text/plain', 'text/html' ]\n```\n`clipboard.has(format[, type])` Experimental\n\n`format` string\n`type` string (optional) - Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.\n\nReturns `boolean` - Whether the clipboard supports the specified `format`.\n```js\nconst { clipboard } = require('electron')\nconst hasFormat = clipboard.has('public/utf8-plain-text')\nconsole.log(hasFormat)\n// 'true' or 'false'\n```\n`clipboard.read(format)` Experimental\n\n`format` string\n\nReturns `string` - Reads `format` type from the clipboard.\n`format` should contain valid ASCII characters and have `/` separator.\n`a/c`, `a/bc` are valid formats while `/abc`, `abc/`, `a/`, `/a`, `a`\nare not valid.\n`clipboard.readBuffer(format)` Experimental\n\n`format` string\n\nReturns `Buffer` - Reads `format` type from the clipboard.\n```js\nconst { clipboard } = require('electron')\nconst buffer = Buffer.from('this is binary', 'utf8')\nclipboard.writeBuffer('public/utf8-plain-text', buffer)\nconst ret = clipboard.readBuffer('public/utf8-plain-text')\nconsole.log(buffer.equals(out))\n// true\n```\n`clipboard.writeBuffer(format, buffer[, type])` Experimental\n\n`format` string\n`buffer` Buffer\n`type` string (optional) - Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.\n\nWrites the `buffer` into the clipboard as `format`.\n```js\nconst { clipboard } = require('electron')\nconst buffer = Buffer.from('writeBuffer', 'utf8')\nclipboard.writeBuffer('public/utf8-plain-text', buffer)\n```\n`clipboard.write(data[, type])`\n\n`data` Object\n`text` string (optional)\n`html` string (optional)\n`image` NativeImage (optional)\n`rtf` string (optional)\n`bookmark` string (optional) - The title of the URL at `text`.\n`type` string (optional) - Can be `selection` or `clipboard`; default is 'clipboard'. `selection` is only available on Linux.\n\nWrites `data` to the clipboard.\n```js\nconst { clipboard } = require('electron')\nclipboard.write({\n  text: 'test',\n  html: 'Hi',\n  rtf: '{\\rtf1\\utf8 text}',\n  bookmark: 'a title'\n})\nconsole.log(clipboard.readText())\n// 'test'\nconsole.log(clipboard.readHTML())\n// Hi\nconsole.log(clipboard.readRTF())\n// '{\\rtf1\\utf8 text}'\nconsole.log(clipboard.readBookmark())\n// { title: 'a title', url: 'test' }",
    "tag": "electron"
  },
  {
    "title": "webFrameMain",
    "source": "https://github.com/electron/electron/tree/main/docs/api/web-frame-main.md",
    "content": "webFrameMain\n\nControl web pages and iframes.\n\nProcess: Main\nThe `webFrameMain` module can be used to lookup frames across existing\nWebContents instances. Navigation events are the common\nuse case.\n```javascript\nconst { BrowserWindow, webFrameMain } = require('electron')\nconst win = new BrowserWindow({ width: 800, height: 1500 })\nwin.loadURL('https://twitter.com')\nwin.webContents.on(\n  'did-frame-navigate',\n  (event, url, httpResponseCode, httpStatusText, isMainFrame, frameProcessId, frameRoutingId) => {\n    const frame = webFrameMain.fromId(frameProcessId, frameRoutingId)\n    if (frame) {\n      const code = 'document.body.innerHTML = document.body.innerHTML.replaceAll(\"heck\", \"h*ck\")'\n      frame.executeJavaScript(code)\n    }\n  }\n)\n```\nYou can also access frames of existing pages by using the `mainFrame` property\nof WebContents.\n```javascript\nconst { BrowserWindow } = require('electron')\nasync function main () {\n  const win = new BrowserWindow({ width: 800, height: 600 })\n  await win.loadURL('https://reddit.com')\nconst youtubeEmbeds = win.webContents.mainFrame.frames.filter((frame) => {\n    try {\n      const url = new URL(frame.url)\n      return url.host === 'www.youtube.com'\n    } catch {\n      return false\n    }\n  })\nconsole.log(youtubeEmbeds)\n}\nmain()\n```\nMethods\nThese methods can be accessed from the `webFrameMain` module:\n`webFrameMain.fromId(processId, routingId)`\n\n`processId` Integer - An `Integer` representing the internal ID of the process which owns the frame.\n`routingId` Integer - An `Integer` representing the unique frame ID in the\n  current renderer process. Routing IDs can be retrieved from `WebFrameMain`\n  instances (`frame.routingId`) and are also passed by frame\n  specific `WebContents` navigation events (e.g. `did-frame-navigate`).\n\nReturns `WebFrameMain | undefined` - A frame with the given process and routing IDs,\nor `undefined` if there is no WebFrameMain associated with the given IDs.\nClass: WebFrameMain\nProcess: Main\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\nInstance Events\nEvent: 'dom-ready'\nEmitted when the document is loaded.\nInstance Methods\n`frame.executeJavaScript(code[, userGesture])`\n\n`code` string\n`userGesture` boolean (optional) - Default is `false`.\n\nReturns `Promise<unknown>` - A promise that resolves with the result of the executed\ncode or is rejected if execution throws or results in a rejected promise.\nEvaluates `code` in page.\nIn the browser window some HTML APIs like `requestFullScreen` can only be\ninvoked by a gesture from the user. Setting `userGesture` to `true` will remove\nthis limitation.\n`frame.reload()`\nReturns `boolean` - Whether the reload was initiated successfully. Only results in `false` when the frame has no history.\n`frame.send(channel, ...args)`\n\n`channel` string\n`...args` any[]\n\nSend an asynchronous message to the renderer process via `channel`, along with\narguments. Arguments will be serialized with the Structured Clone\nAlgorithm, just like [`postMessage`][], so prototype chains will not be\nincluded. Sending Functions, Promises, Symbols, WeakMaps, or WeakSets will\nthrow an exception.\nThe renderer process can handle the message by listening to `channel` with the\nipcRenderer module.\n`frame.postMessage(channel, message, [transfer])`\n\n`channel` string\n`message` any\n`transfer` MessagePortMain[] (optional)\n\nSend a message to the renderer process, optionally transferring ownership of\nzero or more [`MessagePortMain`][] objects.\nThe transferred `MessagePortMain` objects will be available in the renderer\nprocess by accessing the `ports` property of the emitted event. When they\narrive in the renderer, they will be native DOM `MessagePort` objects.\nFor example:\n```js\n// Main process\nconst { port1, port2 } = new MessageChannelMain()\nwebContents.mainFrame.postMessage('port', { message: 'hello' }, [port1])\n// Renderer process\nipcRenderer.on('port', (e, msg) => {\n  const [port] = e.ports\n  // ...\n})\n```\nInstance Properties\n`frame.ipc` Readonly\nAn IpcMain instance scoped to the frame.\nIPC messages sent with `ipcRenderer.send`, `ipcRenderer.sendSync` or\n`ipcRenderer.postMessage` will be delivered in the following order:\n\n`contents.on('ipc-message')`\n`contents.mainFrame.on(channel)`\n`contents.ipc.on(channel)`\n`ipcMain.on(channel)`\n\nHandlers registered with `invoke` will be checked in the following order. The\nfirst one that is defined will be called, the rest will be ignored.\n\n`contents.mainFrame.handle(channel)`\n`contents.handle(channel)`\n`ipcMain.handle(channel)`\n\nIn most cases, only the main frame of a WebContents can send or receive IPC\nmessages. However, if the `nodeIntegrationInSubFrames` option is enabled, it is\npossible for child frames to send and receive IPC messages also. The\nWebContents.ipc interface may be more\nconvenient when `nodeIntegrationInSubFrames` is not enabled.\n`frame.url` Readonly\nA `string` representing the current URL of the frame.\n`frame.origin` Readonly\nA `string` representing the current origin of the frame, serialized according\nto RFC 6454. This may be different\nfrom the URL. For instance, if the frame is a child window opened to\n`about:blank`, then `frame.origin` will return the parent frame's origin, while\n`frame.url` will return the empty string. Pages without a scheme/host/port\ntriple origin will have the serialized origin of `\"null\"` (that is, the string\ncontaining the letters n, u, l, l).\n`frame.top` Readonly\nA `WebFrameMain | null` representing top frame in the frame hierarchy to which `frame`\nbelongs.\n`frame.parent` Readonly\nA `WebFrameMain | null` representing parent frame of `frame`, the property would be\n`null` if `frame` is the top frame in the frame hierarchy.\n`frame.frames` Readonly\nA `WebFrameMain[]` collection containing the direct descendents of `frame`.\n`frame.framesInSubtree` Readonly\nA `WebFrameMain[]` collection containing every frame in the subtree of `frame`,\nincluding itself. This can be useful when traversing through all frames.\n`frame.frameTreeNodeId` Readonly\nAn `Integer` representing the id of the frame's internal FrameTreeNode\ninstance. This id is browser-global and uniquely identifies a frame that hosts\ncontent. The identifier is fixed at the creation of the frame and stays\nconstant for the lifetime of the frame. When the frame is removed, the id is\nnot used again.\n`frame.name` Readonly\nA `string` representing the frame name.\n`frame.osProcessId` Readonly\nAn `Integer` representing the operating system `pid` of the process which owns this frame.\n`frame.processId` Readonly\nAn `Integer` representing the Chromium internal `pid` of the process which owns this frame.\nThis is not the same as the OS process ID; to read that use `frame.osProcessId`.\n`frame.routingId` Readonly\nAn `Integer` representing the unique frame id in the current renderer process.\nDistinct `WebFrameMain` instances that refer to the same underlying frame will\nhave the same `routingId`.\n`frame.visibilityState` Readonly\nA `string` representing the visibility state of the frame.\nSee also how the Page Visibility API is affected by other Electron APIs.",
    "tag": "electron"
  },
  {
    "title": "ShareMenu",
    "source": "https://github.com/electron/electron/tree/main/docs/api/share-menu.md",
    "content": "ShareMenu\nThe `ShareMenu` class creates [Share Menu][share-menu] on macOS, which can be\nused to share information from the current context to apps, social media\naccounts, and other services.\nFor including the share menu as a submenu of other menus, please use the\n`shareMenu` role of MenuItem.\nClass: ShareMenu\n\nCreate share menu on macOS.\n\nProcess: Main\n`new ShareMenu(sharingItem)`\n\n`sharingItem` SharingItem - The item to share.\n\nCreates a new share menu.\nInstance Methods\nThe `shareMenu` object has the following instance methods:\n`shareMenu.popup([options])`\n\n`options` PopupOptions (optional)\n`browserWindow` BrowserWindow (optional) - Default is the focused window.\n`x` number (optional) - Default is the current mouse cursor position.\n    Must be declared if `y` is declared.\n`y` number (optional) - Default is the current mouse cursor position.\n    Must be declared if `x` is declared.\n`positioningItem` number (optional) macOS - The index of the menu item to\n    be positioned under the mouse cursor at the specified coordinates. Default\n    is -1.\n`callback` Function (optional) - Called when menu is closed.\n\nPops up this menu as a context menu in the BrowserWindow.\n`shareMenu.closePopup([browserWindow])`\n\n`browserWindow` BrowserWindow (optional) - Default is the focused window.\n\nCloses the context menu in the `browserWindow`.",
    "tag": "electron"
  },
  {
    "title": "dialog",
    "source": "https://github.com/electron/electron/tree/main/docs/api/dialog.md",
    "content": "dialog\n\nDisplay native system dialogs for opening and saving files, alerting, etc.\n\nProcess: Main\nAn example of showing a dialog to select multiple files:\n`javascript\nconst { dialog } = require('electron')\nconsole.log(dialog.showOpenDialog({ properties: ['openFile', 'multiSelections'] }))`\nMethods\nThe `dialog` module has the following methods:\n`dialog.showOpenDialogSync([browserWindow, ]options)`\n\n`browserWindow` BrowserWindow (optional)\n`options` Object\n`title` string (optional)\n`defaultPath` string (optional)\n`buttonLabel` string (optional) - Custom label for the confirmation button, when\n    left empty the default label will be used.\n`filters` FileFilter[] (optional)\n`properties` string[] (optional) - Contains which features the dialog should\n    use. The following values are supported:\n`openFile` - Allow files to be selected.\n`openDirectory` - Allow directories to be selected.\n`multiSelections` - Allow multiple paths to be selected.\n`showHiddenFiles` - Show hidden files in dialog.\n`createDirectory` macOS - Allow creating new directories from dialog.\n`promptToCreate` Windows - Prompt for creation if the file path entered\n  in the dialog does not exist. This does not actually create the file at\n  the path but allows non-existent paths to be returned that should be\n  created by the application.\n`noResolveAliases` macOS - Disable the automatic alias (symlink) path\n  resolution. Selected aliases will now return the alias path instead of\n  their target path.\n`treatPackageAsDirectory` macOS - Treat packages, such as `.app` folders,\n  as a directory instead of a file.\n`dontAddToRecent` Windows - Do not add the item being opened to the recent documents list.\n\n\n`message` string (optional) macOS - Message to display above input\n    boxes.\n`securityScopedBookmarks` boolean (optional) macOS mas - Create security scoped bookmarks when packaged for the Mac App Store.\n\nReturns `string[] | undefined`, the file paths chosen by the user; if the dialog is cancelled it returns `undefined`.\nThe `browserWindow` argument allows the dialog to attach itself to a parent window, making it modal.\nThe `filters` specifies an array of file types that can be displayed or\nselected when you want to limit the user to a specific type. For example:\n`javascript\n{\n  filters: [\n    { name: 'Images', extensions: ['jpg', 'png', 'gif'] },\n    { name: 'Movies', extensions: ['mkv', 'avi', 'mp4'] },\n    { name: 'Custom File Type', extensions: ['as'] },\n    { name: 'All Files', extensions: ['*'] }\n  ]\n}`\nThe `extensions` array should contain extensions without wildcards or dots (e.g.\n`'png'` is good but `'.png'` and `'*.png'` are bad). To show all files, use the\n`'*'` wildcard (no other wildcard is supported).\nNote: On Windows and Linux an open dialog can not be both a file selector\nand a directory selector, so if you set `properties` to\n`['openFile', 'openDirectory']` on these platforms, a directory selector will be\nshown.\n`js\ndialog.showOpenDialogSync(mainWindow, {\n  properties: ['openFile', 'openDirectory']\n})`\n`dialog.showOpenDialog([browserWindow, ]options)`\n\n`browserWindow` BrowserWindow (optional)\n`options` Object\n`title` string (optional)\n`defaultPath` string (optional)\n`buttonLabel` string (optional) - Custom label for the confirmation button, when\n    left empty the default label will be used.\n`filters` FileFilter[] (optional)\n`properties` string[] (optional) - Contains which features the dialog should\n    use. The following values are supported:\n`openFile` - Allow files to be selected.\n`openDirectory` - Allow directories to be selected.\n`multiSelections` - Allow multiple paths to be selected.\n`showHiddenFiles` - Show hidden files in dialog.\n`createDirectory` macOS - Allow creating new directories from dialog.\n`promptToCreate` Windows - Prompt for creation if the file path entered\n  in the dialog does not exist. This does not actually create the file at\n  the path but allows non-existent paths to be returned that should be\n  created by the application.\n`noResolveAliases` macOS - Disable the automatic alias (symlink) path\n  resolution. Selected aliases will now return the alias path instead of\n  their target path.\n`treatPackageAsDirectory` macOS - Treat packages, such as `.app` folders,\n  as a directory instead of a file.\n`dontAddToRecent` Windows - Do not add the item being opened to the recent documents list.\n\n\n`message` string (optional) macOS - Message to display above input\n    boxes.\n`securityScopedBookmarks` boolean (optional) macOS mas - Create security scoped bookmarks when packaged for the Mac App Store.\n\nReturns `Promise<Object>` - Resolve with an object containing the following:\n\n`canceled` boolean - whether or not the dialog was canceled.\n`filePaths` string[] - An array of file paths chosen by the user. If the dialog is cancelled this will be an empty array.\n`bookmarks` string[] (optional) macOS mas - An array matching the `filePaths` array of base64 encoded strings which contains security scoped bookmark data. `securityScopedBookmarks` must be enabled for this to be populated. (For return values, see table here.)\n\nThe `browserWindow` argument allows the dialog to attach itself to a parent window, making it modal.\nThe `filters` specifies an array of file types that can be displayed or\nselected when you want to limit the user to a specific type. For example:\n`javascript\n{\n  filters: [\n    { name: 'Images', extensions: ['jpg', 'png', 'gif'] },\n    { name: 'Movies', extensions: ['mkv', 'avi', 'mp4'] },\n    { name: 'Custom File Type', extensions: ['as'] },\n    { name: 'All Files', extensions: ['*'] }\n  ]\n}`\nThe `extensions` array should contain extensions without wildcards or dots (e.g.\n`'png'` is good but `'.png'` and `'*.png'` are bad). To show all files, use the\n`'*'` wildcard (no other wildcard is supported).\nNote: On Windows and Linux an open dialog can not be both a file selector\nand a directory selector, so if you set `properties` to\n`['openFile', 'openDirectory']` on these platforms, a directory selector will be\nshown.\n`js\ndialog.showOpenDialog(mainWindow, {\n  properties: ['openFile', 'openDirectory']\n}).then(result => {\n  console.log(result.canceled)\n  console.log(result.filePaths)\n}).catch(err => {\n  console.log(err)\n})`\n`dialog.showSaveDialogSync([browserWindow, ]options)`\n\n`browserWindow` BrowserWindow (optional)\n`options` Object\n`title` string (optional) - The dialog title. Cannot be displayed on some Linux desktop environments.\n`defaultPath` string (optional) - Absolute directory path, absolute file\n    path, or file name to use by default.\n`buttonLabel` string (optional) - Custom label for the confirmation button, when\n    left empty the default label will be used.\n`filters` FileFilter[] (optional)\n`message` string (optional) macOS - Message to display above text fields.\n`nameFieldLabel` string (optional) macOS - Custom label for the text\n    displayed in front of the filename text field.\n`showsTagField` boolean (optional) macOS - Show the tags input box,\n    defaults to `true`.\n`properties` string[] (optional)\n`showHiddenFiles` - Show hidden files in dialog.\n`createDirectory` macOS - Allow creating new directories from dialog.\n`treatPackageAsDirectory` macOS - Treat packages, such as `.app` folders,\n  as a directory instead of a file.\n`showOverwriteConfirmation` Linux - Sets whether the user will be presented a confirmation dialog if the user types a file name that already exists.\n`dontAddToRecent` Windows - Do not add the item being saved to the recent documents list.\n\n\n`securityScopedBookmarks` boolean (optional) macOS mas - Create a security scoped bookmark when packaged for the Mac App Store. If this option is enabled and the file doesn't already exist a blank file will be created at the chosen path.\n\nReturns `string | undefined`, the path of the file chosen by the user; if the dialog is cancelled it returns `undefined`.\nThe `browserWindow` argument allows the dialog to attach itself to a parent window, making it modal.\nThe `filters` specifies an array of file types that can be displayed, see\n`dialog.showOpenDialog` for an example.\n`dialog.showSaveDialog([browserWindow, ]options)`\n\n`browserWindow` BrowserWindow (optional)\n`options` Object\n`title` string (optional) - The dialog title. Cannot be displayed on some Linux desktop environments.\n`defaultPath` string (optional) - Absolute directory path, absolute file\n    path, or file name to use by default.\n`buttonLabel` string (optional) - Custom label for the confirmation button, when\n    left empty the default label will be used.\n`filters` FileFilter[] (optional)\n`message` string (optional) macOS - Message to display above text fields.\n`nameFieldLabel` string (optional) macOS - Custom label for the text\n    displayed in front of the filename text field.\n`showsTagField` boolean (optional) macOS - Show the tags input box, defaults to `true`.\n`properties` string[] (optional)\n`showHiddenFiles` - Show hidden files in dialog.\n`createDirectory` macOS - Allow creating new directories from dialog.\n`treatPackageAsDirectory` macOS - Treat packages, such as `.app` folders,\n  as a directory instead of a file.\n`showOverwriteConfirmation` Linux - Sets whether the user will be presented a confirmation dialog if the user types a file name that already exists.\n`dontAddToRecent` Windows - Do not add the item being saved to the recent documents list.\n\n\n`securityScopedBookmarks` boolean (optional) macOS mas - Create a security scoped bookmark when packaged for the Mac App Store. If this option is enabled and the file doesn't already exist a blank file will be created at the chosen path.\n\nReturns `Promise<Object>` - Resolve with an object containing the following:\n\n`canceled` boolean - whether or not the dialog was canceled.\n`filePath` string (optional) - If the dialog is canceled, this will be `undefined`.\n`bookmark` string (optional) macOS mas - Base64 encoded string which contains the security scoped bookmark data for the saved file. `securityScopedBookmarks` must be enabled for this to be present. (For return values, see table here.)\n\nThe `browserWindow` argument allows the dialog to attach itself to a parent window, making it modal.\nThe `filters` specifies an array of file types that can be displayed, see\n`dialog.showOpenDialog` for an example.\nNote: On macOS, using the asynchronous version is recommended to avoid issues when\nexpanding and collapsing the dialog.\n`dialog.showMessageBoxSync([browserWindow, ]options)`\n\n`browserWindow` BrowserWindow (optional)\n`options` Object\n`message` string - Content of the message box.\n`type` string (optional) - Can be `\"none\"`, `\"info\"`, `\"error\"`, `\"question\"` or\n  `\"warning\"`. On Windows, `\"question\"` displays the same icon as `\"info\"`, unless\n  you set an icon using the `\"icon\"` option. On macOS, both `\"warning\"` and\n  `\"error\"` display the same warning icon.\n`buttons` string[] (optional) - Array of texts for buttons. On Windows, an empty array\n    will result in one button labeled \"OK\".\n`defaultId` Integer (optional) - Index of the button in the buttons array which will\n    be selected by default when the message box opens.\n`title` string (optional) - Title of the message box, some platforms will not show it.\n`detail` string (optional) - Extra information of the message.\n`icon` (NativeImage | string) (optional)\n`textWidth` Integer (optional) macOS - Custom width of the text in the message box.\n`cancelId` Integer (optional) - The index of the button to be used to cancel the dialog, via\n    the `Esc` key. By default this is assigned to the first button with \"cancel\" or \"no\" as the\n    label. If no such labeled buttons exist and this option is not set, `0` will be used as the\n    return value.\n`noLink` boolean (optional) - On Windows Electron will try to figure out which one of\n    the `buttons` are common buttons (like \"Cancel\" or \"Yes\"), and show the\n    others as command links in the dialog. This can make the dialog appear in\n    the style of modern Windows apps. If you don't like this behavior, you can\n    set `noLink` to `true`.\n`normalizeAccessKeys` boolean (optional) - Normalize the keyboard access keys\n    across platforms. Default is `false`. Enabling this assumes `&` is used in\n    the button labels for the placement of the keyboard shortcut access key\n    and labels will be converted so they work correctly on each platform, `&`\n    characters are removed on macOS, converted to `_` on Linux, and left\n    untouched on Windows. For example, a button label of `Vie&w` will be\n    converted to `Vie_w` on Linux and `View` on macOS and can be selected\n    via `Alt-W` on Windows and Linux.\n\nReturns `Integer` - the index of the clicked button.\nShows a message box, it will block the process until the message box is closed.\nIt returns the index of the clicked button.\nThe `browserWindow` argument allows the dialog to attach itself to a parent window, making it modal.\nIf `browserWindow` is not shown dialog will not be attached to it. In such case it will be displayed as an independent window.\n`dialog.showMessageBox([browserWindow, ]options)`\n\n`browserWindow` BrowserWindow (optional)\n`options` Object\n`message` string - Content of the message box.\n`type` string (optional) - Can be `\"none\"`, `\"info\"`, `\"error\"`, `\"question\"` or\n  `\"warning\"`. On Windows, `\"question\"` displays the same icon as `\"info\"`, unless\n  you set an icon using the `\"icon\"` option. On macOS, both `\"warning\"` and\n  `\"error\"` display the same warning icon.\n`buttons` string[] (optional) - Array of texts for buttons. On Windows, an empty array\n    will result in one button labeled \"OK\".\n`defaultId` Integer (optional) - Index of the button in the buttons array which will\n    be selected by default when the message box opens.\n`signal` AbortSignal (optional) - Pass an instance of [AbortSignal][] to\n    optionally close the message box, the message box will behave as if it was\n    cancelled by the user. On macOS, `signal` does not work with message boxes\n    that do not have a parent window, since those message boxes run\n    synchronously due to platform limitations.\n`title` string (optional) - Title of the message box, some platforms will not show it.\n`detail` string (optional) - Extra information of the message.\n`checkboxLabel` string (optional) - If provided, the message box will\n    include a checkbox with the given label.\n`checkboxChecked` boolean (optional) - Initial checked state of the\n    checkbox. `false` by default.\n`icon` (NativeImage | string) (optional)\n`textWidth` Integer (optional) macOS - Custom width of the text in the message box.\n`cancelId` Integer (optional) - The index of the button to be used to cancel the dialog, via\n    the `Esc` key. By default this is assigned to the first button with \"cancel\" or \"no\" as the\n    label. If no such labeled buttons exist and this option is not set, `0` will be used as the\n    return value.\n`noLink` boolean (optional) - On Windows Electron will try to figure out which one of\n    the `buttons` are common buttons (like \"Cancel\" or \"Yes\"), and show the\n    others as command links in the dialog. This can make the dialog appear in\n    the style of modern Windows apps. If you don't like this behavior, you can\n    set `noLink` to `true`.\n`normalizeAccessKeys` boolean (optional) - Normalize the keyboard access keys\n    across platforms. Default is `false`. Enabling this assumes `&` is used in\n    the button labels for the placement of the keyboard shortcut access key\n    and labels will be converted so they work correctly on each platform, `&`\n    characters are removed on macOS, converted to `_` on Linux, and left\n    untouched on Windows. For example, a button label of `Vie&w` will be\n    converted to `Vie_w` on Linux and `View` on macOS and can be selected\n    via `Alt-W` on Windows and Linux.\n\nReturns `Promise<Object>` - resolves with a promise containing the following properties:\n\n`response` number - The index of the clicked button.\n`checkboxChecked` boolean - The checked state of the checkbox if\n  `checkboxLabel` was set. Otherwise `false`.\n\nShows a message box.\nThe `browserWindow` argument allows the dialog to attach itself to a parent window, making it modal.\n`dialog.showErrorBox(title, content)`\n\n`title` string - The title to display in the error box.\n`content` string - The text content to display in the error box.\n\nDisplays a modal dialog that shows an error message.\nThis API can be called safely before the `ready` event the `app` module emits,\nit is usually used to report errors in early stage of startup. If called\nbefore the app `ready`event on Linux, the message will be emitted to stderr,\nand no GUI dialog will appear.\n`dialog.showCertificateTrustDialog([browserWindow, ]options)` macOS Windows\n\n`browserWindow` BrowserWindow (optional)\n`options` Object\n`certificate` Certificate - The certificate to trust/import.\n`message` string - The message to display to the user.\n\nReturns `Promise<void>` - resolves when the certificate trust dialog is shown.\nOn macOS, this displays a modal dialog that shows a message and certificate\ninformation, and gives the user the option of trusting/importing the\ncertificate. If you provide a `browserWindow` argument the dialog will be\nattached to the parent window, making it modal.\nOn Windows the options are more limited, due to the Win32 APIs used:\n\nThe `message` argument is not used, as the OS provides its own confirmation\n   dialog.\nThe `browserWindow` argument is ignored since it is not possible to make\n   this confirmation dialog modal.\n\nBookmarks array\n`showOpenDialog`, `showOpenDialogSync`, `showSaveDialog`, and `showSaveDialogSync` will return a `bookmarks` array.\n| Build Type | securityScopedBookmarks boolean | Return Type | Return Value                   |\n|------------|---------------------------------|:-----------:|--------------------------------|\n| macOS mas  | True                            |   Success   | `['LONGBOOKMARKSTRING']`       |\n| macOS mas  | True                            |    Error    | `['']` (array of empty string) |\n| macOS mas  | False                           |      NA     | `[]` (empty array)             |\n| non mas    | any                             |      NA     | `[]` (empty array)             |\nSheets\nOn macOS, dialogs are presented as sheets attached to a window if you provide\na BrowserWindow reference in the `browserWindow` parameter, or modals if no\nwindow is provided.\nYou can call `BrowserWindow.getCurrentWindow().setSheetOffset(offset)` to change\nthe offset from the window frame where sheets are attached.",
    "tag": "electron"
  },
  {
    "title": "Class: CommandLine",
    "source": "https://github.com/electron/electron/tree/main/docs/api/command-line.md",
    "content": "Class: CommandLine\n\nManipulate the command line arguments for your app that Chromium reads\n\nProcess: Main\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\nThe following example shows how to check if the `--disable-gpu` flag is set.\n`javascript\nconst { app } = require('electron')\napp.commandLine.hasSwitch('disable-gpu')`\nFor more information on what kinds of flags and switches you can use, check\nout the Command Line Switches\ndocument.\nInstance Methods\n`commandLine.appendSwitch(switch[, value])`\n\n`switch` string - A command-line switch, without the leading `--`\n`value` string (optional) - A value for the given switch\n\nAppend a switch (with optional `value`) to Chromium's command line.\nNote: This will not affect `process.argv`. The intended usage of this function is to\ncontrol Chromium's behavior.\n`commandLine.appendArgument(value)`\n\n`value` string - The argument to append to the command line\n\nAppend an argument to Chromium's command line. The argument will be quoted\ncorrectly. Switches will precede arguments regardless of appending order.\nIf you're appending an argument like `--switch=value`, consider using `appendSwitch('switch', 'value')` instead.\nNote: This will not affect `process.argv`. The intended usage of this function is to\ncontrol Chromium's behavior.\n`commandLine.hasSwitch(switch)`\n\n`switch` string - A command-line switch\n\nReturns `boolean` - Whether the command-line switch is present.\n`commandLine.getSwitchValue(switch)`\n\n`switch` string - A command-line switch\n\nReturns `string` - The command-line switch value.\nNote: When the switch is not present or has no value, it returns empty string.\n`commandLine.removeSwitch(switch)`\n\n`switch` string - A command-line switch\n\nRemoves the specified switch from Chromium's command line.\nNote: This will not affect `process.argv`. The intended usage of this function is to",
    "tag": "electron"
  },
  {
    "title": "powerMonitor",
    "source": "https://github.com/electron/electron/tree/main/docs/api/power-monitor.md",
    "content": "powerMonitor\n\nMonitor power state changes.\n\nProcess: Main\nEvents\nThe `powerMonitor` module emits the following events:\nEvent: 'suspend'\nEmitted when the system is suspending.\nEvent: 'resume'\nEmitted when system is resuming.\nEvent: 'on-ac' macOS Windows\nEmitted when the system changes to AC power.\nEvent: 'on-battery' macOS Windows\nEmitted when system changes to battery power.\nEvent: 'shutdown' Linux macOS\nEmitted when the system is about to reboot or shut down. If the event handler\ninvokes `e.preventDefault()`, Electron will attempt to delay system shutdown in\norder for the app to exit cleanly. If `e.preventDefault()` is called, the app\nshould exit as soon as possible by calling something like `app.quit()`.\nEvent: 'lock-screen' macOS Windows\nEmitted when the system is about to lock the screen.\nEvent: 'unlock-screen' macOS Windows\nEmitted as soon as the systems screen is unlocked.\nEvent: 'user-did-become-active' macOS\nEmitted when a login session is activated. See documentation for more information.\nEvent: 'user-did-resign-active' macOS\nEmitted when a login session is deactivated. See documentation for more information.\nMethods\nThe `powerMonitor` module has the following methods:\n`powerMonitor.getSystemIdleState(idleThreshold)`\n\n`idleThreshold` Integer\n\nReturns `string` - The system's current state. Can be `active`, `idle`, `locked` or `unknown`.\nCalculate the system idle state. `idleThreshold` is the amount of time (in seconds)\nbefore considered idle.  `locked` is available on supported systems only.\n`powerMonitor.getSystemIdleTime()`\nReturns `Integer` - Idle time in seconds\nCalculate system idle time in seconds.\n`powerMonitor.isOnBatteryPower()`\nReturns `boolean` - Whether the system is on battery power.\nTo monitor for changes in this property, use the `on-battery` and `on-ac`\nevents.\nProperties\n`powerMonitor.onBatteryPower`\nA `boolean` property. True if the system is on battery power.",
    "tag": "electron"
  },
  {
    "title": "Tray",
    "source": "https://github.com/electron/electron/tree/main/docs/api/tray.md",
    "content": "Tray\nClass: Tray\n\nAdd icons and context menus to the system's notification area.\n\nProcess: Main\n`Tray` is an [EventEmitter][event-emitter].\n```javascript\nconst { app, Menu, Tray } = require('electron')\nlet tray = null\napp.whenReady().then(() => {\n  tray = new Tray('/path/to/my/icon')\n  const contextMenu = Menu.buildFromTemplate([\n    { label: 'Item1', type: 'radio' },\n    { label: 'Item2', type: 'radio' },\n    { label: 'Item3', type: 'radio', checked: true },\n    { label: 'Item4', type: 'radio' }\n  ])\n  tray.setToolTip('This is my application.')\n  tray.setContextMenu(contextMenu)\n})\n```\nPlatform Considerations\nLinux\n\nTray icon uses StatusNotifierItem\n  by default, when it is not available in user's desktop environment the\n  `GtkStatusIcon` will be used instead.\nThe `click` event is emitted when the tray icon receives activation from\n  user, however the StatusNotifierItem spec does not specify which action would\n  cause an activation, for some environments it is left mouse click, but for\n  some it might be double left mouse click.\nIn order for changes made to individual `MenuItem`s to take effect,\n  you have to call `setContextMenu` again. For example:\n\n```javascript\nconst { app, Menu, Tray } = require('electron')\nlet appIcon = null\napp.whenReady().then(() => {\n  appIcon = new Tray('/path/to/my/icon')\n  const contextMenu = Menu.buildFromTemplate([\n    { label: 'Item1', type: 'radio' },\n    { label: 'Item2', type: 'radio' }\n  ])\n// Make a change to the context menu\n  contextMenu.items[1].checked = false\n// Call this again for Linux because we modified the context menu\n  appIcon.setContextMenu(contextMenu)\n})\n```\nMacOS\n\nIcons passed to the Tray constructor should be Template Images.\nTo make sure your icon isn't grainy on retina monitors, be sure your `@2x` image is 144dpi.\nIf you are bundling your application (e.g., with webpack for development), be sure that the file names are not being mangled or hashed. The filename needs to end in Template, and the `@2x` image needs to have the same filename as the standard image, or MacOS will not magically invert your image's colors or use the high density image.\n16x16 (72dpi) and 32x32@2x (144dpi) work well for most icons.\n\nWindows\n\nIt is recommended to use `ICO` icons to get best visual effects.\n\n`new Tray(image, [guid])`\n\n`image` (NativeImage | string)\n`guid` string (optional) Windows - Assigns a GUID to the tray icon. If the executable is signed and the signature contains an organization in the subject line then the GUID is permanently associated with that signature. OS level settings like the position of the tray icon in the system tray will persist even if the path to the executable changes. If the executable is not code-signed then the GUID is permanently associated with the path to the executable. Changing the path to the executable will break the creation of the tray icon and a new GUID must be used. However, it is highly recommended to use the GUID parameter only in conjunction with code-signed executable. If an App defines multiple tray icons then each icon must use a separate GUID.\n\nCreates a new tray icon associated with the `image`.\nInstance Events\nThe `Tray` module emits the following events:\nEvent: 'click'\nReturns:\n\n`event` KeyboardEvent\n`bounds` Rectangle - The bounds of tray icon.\n`position` Point - The position of the event.\n\nEmitted when the tray icon is clicked.\nNote that on Linux this event is emitted when the tray icon receives an\nactivation, which might not necessarily be left mouse click.\nEvent: 'right-click' macOS Windows\nReturns:\n\n`event` KeyboardEvent\n`bounds` Rectangle - The bounds of tray icon.\n\nEmitted when the tray icon is right clicked.\nEvent: 'double-click' macOS Windows\nReturns:\n\n`event` KeyboardEvent\n`bounds` Rectangle - The bounds of tray icon.\n\nEmitted when the tray icon is double clicked.\nEvent: 'balloon-show' Windows\nEmitted when the tray balloon shows.\nEvent: 'balloon-click' Windows\nEmitted when the tray balloon is clicked.\nEvent: 'balloon-closed' Windows\nEmitted when the tray balloon is closed because of timeout or user manually\ncloses it.\nEvent: 'drop' macOS\nEmitted when any dragged items are dropped on the tray icon.\nEvent: 'drop-files' macOS\nReturns:\n\n`event` Event\n`files` string[] - The paths of the dropped files.\n\nEmitted when dragged files are dropped in the tray icon.\nEvent: 'drop-text' macOS\nReturns:\n\n`event` Event\n`text` string - the dropped text string.\n\nEmitted when dragged text is dropped in the tray icon.\nEvent: 'drag-enter' macOS\nEmitted when a drag operation enters the tray icon.\nEvent: 'drag-leave' macOS\nEmitted when a drag operation exits the tray icon.\nEvent: 'drag-end' macOS\nEmitted when a drag operation ends on the tray or ends at another location.\nEvent: 'mouse-up' macOS\nReturns:\n\n`event` KeyboardEvent\n`position` Point - The position of the event.\n\nEmitted when the mouse is released from clicking the tray icon.\nNote: This will not be emitted if you have set a context menu for your Tray using `tray.setContextMenu`, as a result of macOS-level constraints.\nEvent: 'mouse-down' macOS\nReturns:\n\n`event` KeyboardEvent\n`position` Point - The position of the event.\n\nEmitted when the mouse clicks the tray icon.\nEvent: 'mouse-enter' macOS\nReturns:\n\n`event` KeyboardEvent\n`position` Point - The position of the event.\n\nEmitted when the mouse enters the tray icon.\nEvent: 'mouse-leave' macOS\nReturns:\n\n`event` KeyboardEvent\n`position` Point - The position of the event.\n\nEmitted when the mouse exits the tray icon.\nEvent: 'mouse-move' macOS Windows\nReturns:\n\n`event` KeyboardEvent\n`position` Point - The position of the event.\n\nEmitted when the mouse moves in the tray icon.\nInstance Methods\nThe `Tray` class has the following methods:\n`tray.destroy()`\nDestroys the tray icon immediately.\n`tray.setImage(image)`\n\n`image` (NativeImage | string)\n\nSets the `image` associated with this tray icon.\n`tray.setPressedImage(image)` macOS\n\n`image` (NativeImage | string)\n\nSets the `image` associated with this tray icon when pressed on macOS.\n`tray.setToolTip(toolTip)`\n\n`toolTip` string\n\nSets the hover text for this tray icon.\n`tray.setTitle(title[, options])` macOS\n\n`title` string\n`options` Object (optional)\n`fontType` string (optional) - The font family variant to display, can be `monospaced` or `monospacedDigit`. `monospaced` is available in macOS 10.15+ When left blank, the title uses the default system font.\n\nSets the title displayed next to the tray icon in the status bar (Support ANSI colors).\n`tray.getTitle()` macOS\nReturns `string` - the title displayed next to the tray icon in the status bar\n`tray.setIgnoreDoubleClickEvents(ignore)` macOS\n\n`ignore` boolean\n\nSets the option to ignore double click events. Ignoring these events allows you\nto detect every individual click of the tray icon.\nThis value is set to false by default.\n`tray.getIgnoreDoubleClickEvents()` macOS\nReturns `boolean` - Whether double click events will be ignored.\n`tray.displayBalloon(options)` Windows\n\n`options` Object\n`icon` (NativeImage | string) (optional) - Icon to use when `iconType` is `custom`.\n`iconType` string (optional) - Can be `none`, `info`, `warning`, `error` or `custom`. Default is `custom`.\n`title` string\n`content` string\n`largeIcon` boolean (optional) - The large version of the icon should be used. Default is `true`. Maps to NIIF_LARGE_ICON.\n`noSound` boolean (optional) - Do not play the associated sound. Default is `false`. Maps to NIIF_NOSOUND.\n`respectQuietTime` boolean (optional) - Do not display the balloon notification if the current user is in \"quiet time\". Default is `false`. Maps to NIIF_RESPECT_QUIET_TIME.\n\nDisplays a tray balloon.\n`tray.removeBalloon()` Windows\nRemoves a tray balloon.\n`tray.focus()` Windows\nReturns focus to the taskbar notification area.\nNotification area icons should use this message when they have completed their UI operation.\nFor example, if the icon displays a shortcut menu, but the user presses ESC to cancel it,\nuse `tray.focus()` to return focus to the notification area.\n`tray.popUpContextMenu([menu, position])` macOS Windows\n\n`menu` Menu (optional)\n`position` Point (optional) - The pop up position.\n\nPops up the context menu of the tray icon. When `menu` is passed, the `menu` will\nbe shown instead of the tray icon's context menu.\nThe `position` is only available on Windows, and it is (0, 0) by default.\n`tray.closeContextMenu()` macOS Windows\nCloses an open context menu, as set by `tray.setContextMenu()`.\n`tray.setContextMenu(menu)`\n\n`menu` Menu | null\n\nSets the context menu for this icon.\n`tray.getBounds()` macOS Windows\nReturns Rectangle\nThe `bounds` of this tray icon as `Object`.\n`tray.isDestroyed()`\nReturns `boolean` - Whether the tray icon is destroyed.",
    "tag": "electron"
  },
  {
    "title": "autoUpdater",
    "source": "https://github.com/electron/electron/tree/main/docs/api/auto-updater.md",
    "content": "autoUpdater\n\nEnable apps to automatically update themselves.\n\nProcess: Main\nSee also: A detailed guide about how to implement updates in your application.\n`autoUpdater` is an [EventEmitter][event-emitter].\nPlatform Notices\nCurrently, only macOS and Windows are supported. There is no built-in support\nfor auto-updater on Linux, so it is recommended to use the\ndistribution's package manager to update your app.\nIn addition, there are some subtle differences on each platform:\nmacOS\nOn macOS, the `autoUpdater` module is built upon Squirrel.Mac,\nmeaning you don't need any special setup to make it work. For server-side\nrequirements, you can read Server Support. Note that App\nTransport Security (ATS) applies to all requests made as part of the\nupdate process. Apps that need to disable ATS can add the\n`NSAllowsArbitraryLoads` key to their app's plist.\nNote: Your application must be signed for automatic updates on macOS.\nThis is a requirement of `Squirrel.Mac`.\nWindows\nOn Windows, you have to install your app into a user's machine before you can\nuse the `autoUpdater`, so it is recommended that you use the\nelectron-winstaller, Electron Forge or the grunt-electron-installer package to generate a Windows installer.\nWhen using electron-winstaller or Electron Forge make sure you do not try to update your app the first time it runs (Also see this issue for more info). It's also recommended to use electron-squirrel-startup to get desktop shortcuts for your app.\nThe installer generated with Squirrel will create a shortcut icon with an\nApplication User Model ID in the format of\n`com.squirrel.PACKAGE_ID.YOUR_EXE_WITHOUT_DOT_EXE`, examples are\n`com.squirrel.slack.Slack` and `com.squirrel.code.Code`. You have to use the\nsame ID for your app with `app.setAppUserModelId` API, otherwise Windows will\nnot be able to pin your app properly in task bar.\nLike Squirrel.Mac, Windows can host updates on S3 or any other static file host.\nYou can read the documents of Squirrel.Windows to get more details\nabout how Squirrel.Windows works.\nEvents\nThe `autoUpdater` object emits the following events:\nEvent: 'error'\nReturns:\n\n`error` Error\n\nEmitted when there is an error while updating.\nEvent: 'checking-for-update'\nEmitted when checking if an update has started.\nEvent: 'update-available'\nEmitted when there is an available update. The update is downloaded\nautomatically.\nEvent: 'update-not-available'\nEmitted when there is no available update.\nEvent: 'update-downloaded'\nReturns:\n\n`event` Event\n`releaseNotes` string\n`releaseName` string\n`releaseDate` Date\n`updateURL` string\n\nEmitted when an update has been downloaded.\nOn Windows only `releaseName` is available.\nNote: It is not strictly necessary to handle this event. A successfully\ndownloaded update will still be applied the next time the application starts.\nEvent: 'before-quit-for-update'\nThis event is emitted after a user calls `quitAndInstall()`.\nWhen this API is called, the `before-quit` event is not emitted before all windows are closed. As a result you should listen to this event if you wish to perform actions before the windows are closed while a process is quitting, as well as listening to `before-quit`.\nMethods\nThe `autoUpdater` object has the following methods:\n`autoUpdater.setFeedURL(options)`\n\n`options` Object\n`url` string\n`headers` Record (optional) macOS - HTTP request headers.\n`serverType` string (optional) macOS - Can be `json` or `default`, see the Squirrel.Mac\n    README for more information.\n\nSets the `url` and initialize the auto updater.\n`autoUpdater.getFeedURL()`\nReturns `string` - The current update feed URL.\n`autoUpdater.checkForUpdates()`\nAsks the server whether there is an update. You must call `setFeedURL` before\nusing this API.\nNote: If an update is available it will be downloaded automatically.\nCalling `autoUpdater.checkForUpdates()` twice will download the update two times.\n`autoUpdater.quitAndInstall()`\nRestarts the app and installs the update after it has been downloaded. It\nshould only be called after `update-downloaded` has been emitted.\nUnder the hood calling `autoUpdater.quitAndInstall()` will close all application\nwindows first, and automatically call `app.quit()` after all windows have been\nclosed.\nNote: It is not strictly necessary to call this function to apply an update,\nas a successfully downloaded update will always be applied the next time the\napplication starts.",
    "tag": "electron"
  },
  {
    "title": "Class: Cookies",
    "source": "https://github.com/electron/electron/tree/main/docs/api/cookies.md",
    "content": "Class: Cookies\n\nQuery and modify a session's cookies.\n\nProcess: Main\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\nInstances of the `Cookies` class are accessed by using `cookies` property of\na `Session`.\nFor example:\n```javascript\nconst { session } = require('electron')\n// Query all cookies.\nsession.defaultSession.cookies.get({})\n  .then((cookies) => {\n    console.log(cookies)\n  }).catch((error) => {\n    console.log(error)\n  })\n// Query all cookies associated with a specific url.\nsession.defaultSession.cookies.get({ url: 'http://www.github.com' })\n  .then((cookies) => {\n    console.log(cookies)\n  }).catch((error) => {\n    console.log(error)\n  })\n// Set a cookie with the given cookie data;\n// may overwrite equivalent cookies if they exist.\nconst cookie = { url: 'http://www.github.com', name: 'dummy_name', value: 'dummy' }\nsession.defaultSession.cookies.set(cookie)\n  .then(() => {\n    // success\n  }, (error) => {\n    console.error(error)\n  })\n```\nInstance Events\nThe following events are available on instances of `Cookies`:\nEvent: 'changed'\nReturns:\n\n`event` Event\n`cookie` Cookie - The cookie that was changed.\n`cause` string - The cause of the change with one of the following values:\n`explicit` - The cookie was changed directly by a consumer's action.\n`overwrite` - The cookie was automatically removed due to an insert\n    operation that overwrote it.\n`expired` - The cookie was automatically removed as it expired.\n`evicted` - The cookie was automatically evicted during garbage collection.\n`expired-overwrite` - The cookie was overwritten with an already-expired\n    expiration date.\n`removed` boolean - `true` if the cookie was removed, `false` otherwise.\n\nEmitted when a cookie is changed because it was added, edited, removed, or\nexpired.\nInstance Methods\nThe following methods are available on instances of `Cookies`:\n`cookies.get(filter)`\n\n`filter` Object\n`url` string (optional) - Retrieves cookies which are associated with\n    `url`. Empty implies retrieving cookies of all URLs.\n`name` string (optional) - Filters cookies by name.\n`domain` string (optional) - Retrieves cookies whose domains match or are\n    subdomains of `domains`.\n`path` string (optional) - Retrieves cookies whose path matches `path`.\n`secure` boolean (optional) - Filters cookies by their Secure property.\n`session` boolean (optional) - Filters out session or persistent cookies.\n`httpOnly` boolean (optional) - Filters cookies by httpOnly.\n\nReturns `Promise<Cookie[]>` - A promise which resolves an array of cookie objects.\nSends a request to get all cookies matching `filter`, and resolves a promise with\nthe response.\n`cookies.set(details)`\n\n`details` Object\n`url` string - The URL to associate the cookie with. The promise will be rejected if the URL is invalid.\n`name` string (optional) - The name of the cookie. Empty by default if omitted.\n`value` string (optional) - The value of the cookie. Empty by default if omitted.\n`domain` string (optional) - The domain of the cookie; this will be normalized with a preceding dot so that it's also valid for subdomains. Empty by default if omitted.\n`path` string (optional) - The path of the cookie. Empty by default if omitted.\n`secure` boolean (optional) - Whether the cookie should be marked as Secure. Defaults to\n    false unless Same Site=None attribute is used.\n`httpOnly` boolean (optional) - Whether the cookie should be marked as HTTP only.\n    Defaults to false.\n`expirationDate` Double (optional) - The expiration date of the cookie as the number of\n    seconds since the UNIX epoch. If omitted then the cookie becomes a session\n    cookie and will not be retained between sessions.\n`sameSite` string (optional) - The Same Site policy to apply to this cookie.  Can be `unspecified`, `no_restriction`, `lax` or `strict`.  Default is `lax`.\n\nReturns `Promise<void>` - A promise which resolves when the cookie has been set\nSets a cookie with `details`.\n`cookies.remove(url, name)`\n\n`url` string - The URL associated with the cookie.\n`name` string - The name of cookie to remove.\n\nReturns `Promise<void>` - A promise which resolves when the cookie has been removed\nRemoves the cookies matching `url` and `name`\n`cookies.flushStore()`\nReturns `Promise<void>` - A promise which resolves when the cookie store has been flushed",
    "tag": "electron"
  },
  {
    "title": "screen",
    "source": "https://github.com/electron/electron/tree/main/docs/api/screen.md",
    "content": "screen\n\nRetrieve information about screen size, displays, cursor position, etc.\n\nProcess: Main\nThis module cannot be used until the `ready` event of the `app`\nmodule is emitted.\n`screen` is an [EventEmitter][event-emitter].\nNote: In the renderer / DevTools, `window.screen` is a reserved DOM\nproperty, so writing `let { screen } = require('electron')` will not work.\nAn example of creating a window that fills the whole screen:\n```javascript fiddle='docs/fiddles/screen/fit-screen'\nconst { app, BrowserWindow, screen } = require('electron')\nlet win\napp.whenReady().then(() => {\n  const { width, height } = screen.getPrimaryDisplay().workAreaSize\n  win = new BrowserWindow({ width, height })\n  win.loadURL('https://github.com')\n})\n```\nAnother example of creating a window in the external display:\n```javascript\nconst { app, BrowserWindow, screen } = require('electron')\nlet win\napp.whenReady().then(() => {\n  const displays = screen.getAllDisplays()\n  const externalDisplay = displays.find((display) => {\n    return display.bounds.x !== 0 || display.bounds.y !== 0\n  })\nif (externalDisplay) {\n    win = new BrowserWindow({\n      x: externalDisplay.bounds.x + 50,\n      y: externalDisplay.bounds.y + 50\n    })\n    win.loadURL('https://github.com')\n  }\n})\n```\nEvents\nThe `screen` module emits the following events:\nEvent: 'display-added'\nReturns:\n\n`event` Event\n`newDisplay` Display\n\nEmitted when `newDisplay` has been added.\nEvent: 'display-removed'\nReturns:\n\n`event` Event\n`oldDisplay` Display\n\nEmitted when `oldDisplay` has been removed.\nEvent: 'display-metrics-changed'\nReturns:\n\n`event` Event\n`display` Display\n`changedMetrics` string[]\n\nEmitted when one or more metrics change in a `display`. The `changedMetrics` is\nan array of strings that describe the changes. Possible changes are `bounds`,\n`workArea`, `scaleFactor` and `rotation`.\nMethods\nThe `screen` module has the following methods:\n`screen.getCursorScreenPoint()`\nReturns Point\nThe current absolute position of the mouse pointer.\nNote: The return value is a DIP point, not a screen physical point.\n`screen.getPrimaryDisplay()`\nReturns Display - The primary display.\n`screen.getAllDisplays()`\nReturns Display[] - An array of displays that are currently available.\n`screen.getDisplayNearestPoint(point)`\n\n`point` Point\n\nReturns Display - The display nearest the specified point.\n`screen.getDisplayMatching(rect)`\n\n`rect` Rectangle\n\nReturns Display - The display that most closely\nintersects the provided bounds.\n`screen.screenToDipPoint(point)` Windows\n\n`point` Point\n\nReturns Point\nConverts a screen physical point to a screen DIP point.\nThe DPI scale is performed relative to the display containing the physical point.\n`screen.dipToScreenPoint(point)` Windows\n\n`point` Point\n\nReturns Point\nConverts a screen DIP point to a screen physical point.\nThe DPI scale is performed relative to the display containing the DIP point.\n`screen.screenToDipRect(window, rect)` Windows\n\n`window` BrowserWindow | null\n`rect` Rectangle\n\nReturns Rectangle\nConverts a screen physical rect to a screen DIP rect.\nThe DPI scale is performed relative to the display nearest to `window`.\nIf `window` is null, scaling will be performed to the display nearest to `rect`.\n`screen.dipToScreenRect(window, rect)` Windows\n\n`window` BrowserWindow | null\n`rect` Rectangle\n\nReturns Rectangle\nConverts a screen DIP rect to a screen physical rect.\nThe DPI scale is performed relative to the display nearest to `window`.\nIf `window` is null, scaling will be performed to the display nearest to `rect`.",
    "tag": "electron"
  },
  {
    "title": "parentPort",
    "source": "https://github.com/electron/electron/tree/main/docs/api/parent-port.md",
    "content": "parentPort\n\nInterface for communication with parent process.\n\nProcess: Utility\n`parentPort` is an [EventEmitter][event-emitter].\nThis object is not exported from the `'electron'` module. It is only available as a property of the process object in the Electron API.\n```js\n// Main process\nconst child = utilityProcess.fork(path.join(__dirname, 'test.js'))\nchild.postMessage({ message: 'hello' })\nchild.on('message', (data) => {\n  console.log(data) // hello world!\n})\n// Child process\nprocess.parentPort.on('message', (e) => {\n  process.parentPort.postMessage(`${e.data} world!`)\n})\n```\nEvents\nThe `parentPort` object emits the following events:\nEvent: 'message'\nReturns:\n\n`messageEvent` Object\n`data` any\n`ports` MessagePortMain[]\n\nEmitted when the process receives a message. Messages received on\nthis port will be queued up until a handler is registered for this\nevent.\nMethods\n`parentPort.postMessage(message)`\n\n`message` any\n\nSends a message from the process to its parent.",
    "tag": "electron"
  },
  {
    "title": "`<webview>` Tag",
    "source": "https://github.com/electron/electron/tree/main/docs/api/webview-tag.md",
    "content": "`<webview>` Tag\nWarning\nElectron's `webview` tag is based on Chromium's webview, which\nis undergoing dramatic architectural changes. This impacts the stability of `webviews`,\nincluding rendering, navigation, and event routing. We currently recommend to not\nuse the `webview` tag and to consider alternatives, like `iframe`, Electron's BrowserView,\nor an architecture that avoids embedded content altogether.\nEnabling\nBy default the `webview` tag is disabled in Electron >= 5.  You need to enable the tag by\nsetting the `webviewTag` webPreferences option when constructing your `BrowserWindow`. For\nmore information see the BrowserWindow constructor docs.\nOverview\n\nDisplay external web content in an isolated frame and process.\n\nProcess: Renderer\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\nUse the `webview` tag to embed 'guest' content (such as web pages) in your\nElectron app. The guest content is contained within the `webview` container.\nAn embedded page within your app controls how the guest content is laid out and\nrendered.\nUnlike an `iframe`, the `webview` runs in a separate process than your\napp. It doesn't have the same permissions as your web page and all interactions\nbetween your app and embedded content will be asynchronous. This keeps your app\nsafe from the embedded content. Note: Most methods called on the\nwebview from the host page require a synchronous call to the main process.\nExample\nTo embed a web page in your app, add the `webview` tag to your app's embedder\npage (this is the app page that will display the guest content). In its simplest\nform, the `webview` tag includes the `src` of the web page and css styles that\ncontrol the appearance of the `webview` container:\n`html\n<webview id=\"foo\" src=\"https://www.github.com/\" style=\"display:inline-flex; width:640px; height:480px\"></webview>`\nIf you want to control the guest content in any way, you can write JavaScript\nthat listens for `webview` events and responds to those events using the\n`webview` methods. Here's sample code with two event listeners: one that listens\nfor the web page to start loading, the other for the web page to stop loading,\nand displays a \"loading...\" message during the load time:\n```html\n\n```\nInternal implementation\nUnder the hood `webview` is implemented with Out-of-Process iframes (OOPIFs).\nThe `webview` tag is essentially a custom element using shadow DOM to wrap an\n`iframe` element inside it.\nSo the behavior of `webview` is very similar to a cross-domain `iframe`, as\nexamples:\n\nWhen clicking into a `webview`, the page focus will move from the embedder\n  frame to `webview`.\nYou can not add keyboard, mouse, and scroll event listeners to `webview`.\nAll reactions between the embedder frame and `webview` are asynchronous.\n\nCSS Styling Notes\nPlease note that the `webview` tag's style uses `display:flex;` internally to\nensure the child `iframe` element fills the full height and width of its `webview`\ncontainer when used with traditional and flexbox layouts. Please do not\noverwrite the default `display:flex;` CSS property, unless specifying\n`display:inline-flex;` for inline layout.\nTag Attributes\nThe `webview` tag has the following attributes:\n`src`\n`html\n<webview src=\"https://www.github.com/\"></webview>`\nA `string` representing the visible URL. Writing to this attribute initiates top-level\nnavigation.\nAssigning `src` its own value will reload the current page.\nThe `src` attribute can also accept data URLs, such as\n`data:text/plain,Hello, world!`.\n`nodeintegration`\n`html\n<webview src=\"http://www.google.com/\" nodeintegration></webview>`\nA `boolean`. When this attribute is present the guest page in `webview` will have node\nintegration and can use node APIs like `require` and `process` to access low\nlevel system resources. Node integration is disabled by default in the guest\npage.\n`nodeintegrationinsubframes`\n`html\n<webview src=\"http://www.google.com/\" nodeintegrationinsubframes></webview>`\nA `boolean` for the experimental option for enabling NodeJS support in sub-frames such as iframes\ninside the `webview`. All your preloads will load for every iframe, you can\nuse `process.isMainFrame` to determine if you are in the main frame or not.\nThis option is disabled by default in the guest page.\n`plugins`\n`html\n<webview src=\"https://www.github.com/\" plugins></webview>`\nA `boolean`. When this attribute is present the guest page in `webview` will be able to use\nbrowser plugins. Plugins are disabled by default.\n`preload`\n```html\n\n\n\n\n```\nA `string` that specifies a script that will be loaded before other scripts run in the guest\npage. The protocol of script's URL must be `file:` (even when using `asar:` archives) because\nit will be loaded by Node's `require` under the hood, which treats `asar:` archives as virtual\ndirectories.\nWhen the guest page doesn't have node integration this script will still have\naccess to all Node APIs, but global objects injected by Node will be deleted\nafter this script has finished executing.\n`httpreferrer`\n`html\n<webview src=\"https://www.github.com/\" httpreferrer=\"http://cheng.guru\"></webview>`\nA `string` that sets the referrer URL for the guest page.\n`useragent`\n`html\n<webview src=\"https://www.github.com/\" useragent=\"Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; AS; rv:11.0) like Gecko\"></webview>`\nA `string` that sets the user agent for the guest page before the page is navigated to. Once the\npage is loaded, use the `setUserAgent` method to change the user agent.\n`disablewebsecurity`\n`html\n<webview src=\"https://www.github.com/\" disablewebsecurity></webview>`\nA `boolean`. When this attribute is present the guest page will have web security disabled.\nWeb security is enabled by default.\n`partition`\n`html\n<webview src=\"https://github.com\" partition=\"persist:github\"></webview>\n<webview src=\"https://electronjs.org\" partition=\"electron\"></webview>`\nA `string` that sets the session used by the page. If `partition` starts with `persist:`, the\npage will use a persistent session available to all pages in the app with the\nsame `partition`. if there is no `persist:` prefix, the page will use an\nin-memory session. By assigning the same `partition`, multiple pages can share\nthe same session. If the `partition` is unset then default session of the app\nwill be used.\nThis value can only be modified before the first navigation, since the session\nof an active renderer process cannot change. Subsequent attempts to modify the\nvalue will fail with a DOM exception.\n`allowpopups`\n`html\n<webview src=\"https://www.github.com/\" allowpopups></webview>`\nA `boolean`. When this attribute is present the guest page will be allowed to open new\nwindows. Popups are disabled by default.\n`webpreferences`\n`html\n<webview src=\"https://github.com\" webpreferences=\"allowRunningInsecureContent, javascript=no\"></webview>`\nA `string` which is a comma separated list of strings which specifies the web preferences to be set on the webview.\nThe full list of supported preference strings can be found in BrowserWindow.\nThe string follows the same format as the features string in `window.open`.\nA name by itself is given a `true` boolean value.\nA preference can be set to another value by including an `=`, followed by the value.\nSpecial values `yes` and `1` are interpreted as `true`, while `no` and `0` are interpreted as `false`.\n`enableblinkfeatures`\n`html\n<webview src=\"https://www.github.com/\" enableblinkfeatures=\"PreciseMemoryInfo, CSSVariables\"></webview>`\nA `string` which is a list of strings which specifies the blink features to be enabled separated by `,`.\nThe full list of supported feature strings can be found in the\nRuntimeEnabledFeatures.json5 file.\n`disableblinkfeatures`\n`html\n<webview src=\"https://www.github.com/\" disableblinkfeatures=\"PreciseMemoryInfo, CSSVariables\"></webview>`\nA `string` which is a list of strings which specifies the blink features to be disabled separated by `,`.\nThe full list of supported feature strings can be found in the\nRuntimeEnabledFeatures.json5 file.\nMethods\nThe `webview` tag has the following methods:\nNote: The webview element must be loaded before using the methods.\nExample\n`javascript\nconst webview = document.querySelector('webview')\nwebview.addEventListener('dom-ready', () => {\n  webview.openDevTools()\n})`\n`<webview>.loadURL(url[, options])`\n\n`url` URL\n`options` Object (optional)\n`httpReferrer` (string | Referrer) (optional) - An HTTP Referrer url.\n`userAgent` string (optional) - A user agent originating the request.\n`extraHeaders` string (optional) - Extra headers separated by \"\\n\"\n`postData` (UploadRawData | UploadFile)[] (optional)\n`baseURLForDataURL` string (optional) - Base url (with trailing path separator) for files to be loaded by the data url. This is needed only if the specified `url` is a data url and needs to load other files.\n\nReturns `Promise<void>` - The promise will resolve when the page has finished loading\n(see did-finish-load), and rejects\nif the page fails to load (see\ndid-fail-load).\nLoads the `url` in the webview, the `url` must contain the protocol prefix,\ne.g. the `http://` or `file://`.\n`<webview>.downloadURL(url)`\n\n`url` string\n\nInitiates a download of the resource at `url` without navigating.\n`<webview>.getURL()`\nReturns `string` - The URL of guest page.\n`<webview>.getTitle()`\nReturns `string` - The title of guest page.\n`<webview>.isLoading()`\nReturns `boolean` - Whether guest page is still loading resources.\n`<webview>.isLoadingMainFrame()`\nReturns `boolean` - Whether the main frame (and not just iframes or frames within it) is\nstill loading.\n`<webview>.isWaitingForResponse()`\nReturns `boolean` - Whether the guest page is waiting for a first-response for the\nmain resource of the page.\n`<webview>.stop()`\nStops any pending navigation.\n`<webview>.reload()`\nReloads the guest page.\n`<webview>.reloadIgnoringCache()`\nReloads the guest page and ignores cache.\n`<webview>.canGoBack()`\nReturns `boolean` - Whether the guest page can go back.\n`<webview>.canGoForward()`\nReturns `boolean` - Whether the guest page can go forward.\n`<webview>.canGoToOffset(offset)`\n\n`offset` Integer\n\nReturns `boolean` - Whether the guest page can go to `offset`.\n`<webview>.clearHistory()`\nClears the navigation history.\n`<webview>.goBack()`\nMakes the guest page go back.\n`<webview>.goForward()`\nMakes the guest page go forward.\n`<webview>.goToIndex(index)`\n\n`index` Integer\n\nNavigates to the specified absolute index.\n`<webview>.goToOffset(offset)`\n\n`offset` Integer\n\nNavigates to the specified offset from the \"current entry\".\n`<webview>.isCrashed()`\nReturns `boolean` - Whether the renderer process has crashed.\n`<webview>.setUserAgent(userAgent)`\n\n`userAgent` string\n\nOverrides the user agent for the guest page.\n`<webview>.getUserAgent()`\nReturns `string` - The user agent for guest page.\n`<webview>.insertCSS(css)`\n\n`css` string\n\nReturns `Promise<string>` - A promise that resolves with a key for the inserted\nCSS that can later be used to remove the CSS via\n`<webview>.removeInsertedCSS(key)`.\nInjects CSS into the current web page and returns a unique key for the inserted\nstylesheet.\n`<webview>.removeInsertedCSS(key)`\n\n`key` string\n\nReturns `Promise<void>` - Resolves if the removal was successful.\nRemoves the inserted CSS from the current web page. The stylesheet is identified\nby its key, which is returned from `<webview>.insertCSS(css)`.\n`<webview>.executeJavaScript(code[, userGesture])`\n\n`code` string\n`userGesture` boolean (optional) - Default `false`.\n\nReturns `Promise<any>` - A promise that resolves with the result of the executed code\nor is rejected if the result of the code is a rejected promise.\nEvaluates `code` in page. If `userGesture` is set, it will create the user\ngesture context in the page. HTML APIs like `requestFullScreen`, which require\nuser action, can take advantage of this option for automation.\n`<webview>.openDevTools()`\nOpens a DevTools window for guest page.\n`<webview>.closeDevTools()`\nCloses the DevTools window of guest page.\n`<webview>.isDevToolsOpened()`\nReturns `boolean` - Whether guest page has a DevTools window attached.\n`<webview>.isDevToolsFocused()`\nReturns `boolean` - Whether DevTools window of guest page is focused.\n`<webview>.inspectElement(x, y)`\n\n`x` Integer\n`y` Integer\n\nStarts inspecting element at position (`x`, `y`) of guest page.\n`<webview>.inspectSharedWorker()`\nOpens the DevTools for the shared worker context present in the guest page.\n`<webview>.inspectServiceWorker()`\nOpens the DevTools for the service worker context present in the guest page.\n`<webview>.setAudioMuted(muted)`\n\n`muted` boolean\n\nSet guest page muted.\n`<webview>.isAudioMuted()`\nReturns `boolean` - Whether guest page has been muted.\n`<webview>.isCurrentlyAudible()`\nReturns `boolean` - Whether audio is currently playing.\n`<webview>.undo()`\nExecutes editing command `undo` in page.\n`<webview>.redo()`\nExecutes editing command `redo` in page.\n`<webview>.cut()`\nExecutes editing command `cut` in page.\n`<webview>.copy()`\nExecutes editing command `copy` in page.\n`<webview>.paste()`\nExecutes editing command `paste` in page.\n`<webview>.pasteAndMatchStyle()`\nExecutes editing command `pasteAndMatchStyle` in page.\n`<webview>.delete()`\nExecutes editing command `delete` in page.\n`<webview>.selectAll()`\nExecutes editing command `selectAll` in page.\n`<webview>.unselect()`\nExecutes editing command `unselect` in page.\n`<webview>.replace(text)`\n\n`text` string\n\nExecutes editing command `replace` in page.\n`<webview>.replaceMisspelling(text)`\n\n`text` string\n\nExecutes editing command `replaceMisspelling` in page.\n`<webview>.insertText(text)`\n\n`text` string\n\nReturns `Promise<void>`\nInserts `text` to the focused element.\n`<webview>.findInPage(text[, options])`\n\n`text` string - Content to be searched, must not be empty.\n`options` Object (optional)\n`forward` boolean (optional) - Whether to search forward or backward, defaults to `true`.\n`findNext` boolean (optional) - Whether to begin a new text finding session with this request. Should be `true` for initial requests, and `false` for follow-up requests. Defaults to `false`.\n`matchCase` boolean (optional) - Whether search should be case-sensitive,\n    defaults to `false`.\n\nReturns `Integer` - The request id used for the request.\nStarts a request to find all matches for the `text` in the web page. The result of the request\ncan be obtained by subscribing to found-in-page event.\n`<webview>.stopFindInPage(action)`\n\n`action` string - Specifies the action to take place when ending\n  <webview>.findInPage request.\n`clearSelection` - Clear the selection.\n`keepSelection` - Translate the selection into a normal selection.\n`activateSelection` - Focus and click the selection node.\n\nStops any `findInPage` request for the `webview` with the provided `action`.\n`<webview>.print([options])`\n\n`options` Object (optional)\n`silent` boolean (optional) - Don't ask user for print settings. Default is `false`.\n`printBackground` boolean (optional) - Prints the background color and image of\n    the web page. Default is `false`.\n`deviceName` string (optional) - Set the printer device name to use. Must be the system-defined name and not the 'friendly' name, e.g 'Brother_QL_820NWB' and not 'Brother QL-820NWB'.\n`color` boolean (optional) - Set whether the printed web page will be in color or grayscale. Default is `true`.\n`margins` Object (optional)\n`marginType` string (optional) - Can be `default`, `none`, `printableArea`, or `custom`. If `custom` is chosen, you will also need to specify `top`, `bottom`, `left`, and `right`.\n`top` number (optional) - The top margin of the printed web page, in pixels.\n`bottom` number (optional) - The bottom margin of the printed web page, in pixels.\n`left` number (optional) - The left margin of the printed web page, in pixels.\n`right` number (optional) - The right margin of the printed web page, in pixels.\n\n\n`landscape` boolean (optional) - Whether the web page should be printed in landscape mode. Default is `false`.\n`scaleFactor` number (optional) - The scale factor of the web page.\n`pagesPerSheet` number (optional) - The number of pages to print per page sheet.\n`collate` boolean (optional) - Whether the web page should be collated.\n`copies` number (optional) - The number of copies of the web page to print.\n`pageRanges` Object[] (optional) - The page range to print.\n`from` number - Index of the first page to print (0-based).\n`to` number - Index of the last page to print (inclusive) (0-based).\n\n\n`duplexMode` string (optional) - Set the duplex mode of the printed web page. Can be `simplex`, `shortEdge`, or `longEdge`.\n`dpi` Record (optional)\n`horizontal` number (optional) - The horizontal dpi.\n`vertical` number (optional) - The vertical dpi.\n\n\n`header` string (optional) - string to be printed as page header.\n`footer` string (optional) - string to be printed as page footer.\n`pageSize` string | Size (optional) - Specify page size of the printed document. Can be `A3`,\n  `A4`, `A5`, `Legal`, `Letter`, `Tabloid` or an Object containing `height` in microns.\n\nReturns `Promise<void>`\nPrints `webview`'s web page. Same as `webContents.print([options])`.\n`<webview>.printToPDF(options)`\n\n`options` Object\n`landscape` boolean (optional) - Paper orientation.`true` for landscape, `false` for portrait. Defaults to false.\n`displayHeaderFooter` boolean (optional) - Whether to display header and footer. Defaults to false.\n`printBackground` boolean (optional) - Whether to print background graphics. Defaults to false.\n`scale` number(optional)  - Scale of the webpage rendering. Defaults to 1.\n`pageSize` string | Size (optional) - Specify page size of the generated PDF. Can be `A0`, `A1`, `A2`, `A3`,\n  `A4`, `A5`, `A6`, `Legal`, `Letter`, `Tabloid`, `Ledger`, or an Object containing `height` and `width` in inches. Defaults to `Letter`.\n`margins` Object (optional)\n`top` number (optional) - Top margin in inches. Defaults to 1cm (~0.4 inches).\n`bottom` number (optional) - Bottom margin in inches. Defaults to 1cm (~0.4 inches).\n`left` number (optional) - Left margin in inches. Defaults to 1cm (~0.4 inches).\n`right` number (optional) - Right margin in inches. Defaults to 1cm (~0.4 inches).\n\n\n`pageRanges` string (optional) - Paper ranges to print, e.g., '1-5, 8, 11-13'. Defaults to the empty string, which means print all pages.\n`headerTemplate` string (optional) - HTML template for the print header. Should be valid HTML markup with following classes used to inject printing values into them: `date` (formatted print date), `title` (document title), `url` (document location), `pageNumber` (current page number) and `totalPages` (total pages in the document). For example, `<span class=title></span>` would generate span containing the title.\n`footerTemplate` string (optional) - HTML template for the print footer. Should use the same format as the `headerTemplate`.\n`preferCSSPageSize` boolean (optional) - Whether or not to prefer page size as defined by css. Defaults to false, in which case the content will be scaled to fit the paper size.\n\nReturns `Promise<Uint8Array>` - Resolves with the generated PDF data.\nPrints `webview`'s web page as PDF, Same as `webContents.printToPDF(options)`.\n`<webview>.capturePage([rect])`\n\n`rect` Rectangle (optional) - The area of the page to be captured.\n\nReturns `Promise<NativeImage>` - Resolves with a NativeImage\nCaptures a snapshot of the page within `rect`. Omitting `rect` will capture the whole visible page.\n`<webview>.send(channel, ...args)`\n\n`channel` string\n`...args` any[]\n\nReturns `Promise<void>`\nSend an asynchronous message to renderer process via `channel`, you can also\nsend arbitrary arguments. The renderer process can handle the message by\nlistening to the `channel` event with the ipcRenderer module.\nSee webContents.send for\nexamples.\n`<webview>.sendToFrame(frameId, channel, ...args)`\n\n`frameId` [number, number] - `[processId, frameId]`\n`channel` string\n`...args` any[]\n\nReturns `Promise<void>`\nSend an asynchronous message to renderer process via `channel`, you can also\nsend arbitrary arguments. The renderer process can handle the message by\nlistening to the `channel` event with the ipcRenderer module.\nSee webContents.sendToFrame for\nexamples.\n`<webview>.sendInputEvent(event)`\n\n`event` MouseInputEvent | MouseWheelInputEvent | KeyboardInputEvent\n\nReturns `Promise<void>`\nSends an input `event` to the page.\nSee webContents.sendInputEvent\nfor detailed description of `event` object.\n`<webview>.setZoomFactor(factor)`\n\n`factor` number - Zoom factor.\n\nChanges the zoom factor to the specified factor. Zoom factor is\nzoom percent divided by 100, so 300% = 3.0.\n`<webview>.setZoomLevel(level)`\n\n`level` number - Zoom level.\n\nChanges the zoom level to the specified level. The original size is 0 and each\nincrement above or below represents zooming 20% larger or smaller to default\nlimits of 300% and 50% of original size, respectively. The formula for this is\n`scale := 1.2 ^ level`.\n\nNOTE: The zoom policy at the Chromium level is same-origin, meaning that the\nzoom level for a specific domain propagates across all instances of windows with\nthe same domain. Differentiating the window URLs will make zoom work per-window.\n\n`<webview>.getZoomFactor()`\nReturns `number` - the current zoom factor.\n`<webview>.getZoomLevel()`\nReturns `number` - the current zoom level.\n`<webview>.setVisualZoomLevelLimits(minimumLevel, maximumLevel)`\n\n`minimumLevel` number\n`maximumLevel` number\n\nReturns `Promise<void>`\nSets the maximum and minimum pinch-to-zoom level.\n`<webview>.showDefinitionForSelection()` macOS\nShows pop-up dictionary that searches the selected word on the page.\n`<webview>.getWebContentsId()`\nReturns `number` - The WebContents ID of this `webview`.\nDOM Events\nThe following DOM events are available to the `webview` tag:\nEvent: 'load-commit'\nReturns:\n\n`url` string\n`isMainFrame` boolean\n\nFired when a load has committed. This includes navigation within the current\ndocument as well as subframe document-level loads, but does not include\nasynchronous resource loads.\nEvent: 'did-finish-load'\nFired when the navigation is done, i.e. the spinner of the tab will stop\nspinning, and the `onload` event is dispatched.\nEvent: 'did-fail-load'\nReturns:\n\n`errorCode` Integer\n`errorDescription` string\n`validatedURL` string\n`isMainFrame` boolean\n\nThis event is like `did-finish-load`, but fired when the load failed or was\ncancelled, e.g. `window.stop()` is invoked.\nEvent: 'did-frame-finish-load'\nReturns:\n\n`isMainFrame` boolean\n\nFired when a frame has done navigation.\nEvent: 'did-start-loading'\nCorresponds to the points in time when the spinner of the tab starts spinning.\nEvent: 'did-stop-loading'\nCorresponds to the points in time when the spinner of the tab stops spinning.\nEvent: 'did-attach'\nFired when attached to the embedder web contents.\nEvent: 'dom-ready'\nFired when document in the given frame is loaded.\nEvent: 'page-title-updated'\nReturns:\n\n`title` string\n`explicitSet` boolean\n\nFired when page title is set during navigation. `explicitSet` is false when\ntitle is synthesized from file url.\nEvent: 'page-favicon-updated'\nReturns:\n\n`favicons` string[] - Array of URLs.\n\nFired when page receives favicon urls.\nEvent: 'enter-html-full-screen'\nFired when page enters fullscreen triggered by HTML API.\nEvent: 'leave-html-full-screen'\nFired when page leaves fullscreen triggered by HTML API.\nEvent: 'console-message'\nReturns:\n\n`level` Integer - The log level, from 0 to 3. In order it matches `verbose`, `info`, `warning` and `error`.\n`message` string - The actual console message\n`line` Integer - The line number of the source that triggered this console message\n`sourceId` string\n\nFired when the guest window logs a console message.\nThe following example code forwards all log messages to the embedder's console\nwithout regard for log level or other properties.\n`javascript\nconst webview = document.querySelector('webview')\nwebview.addEventListener('console-message', (e) => {\n  console.log('Guest page logged a message:', e.message)\n})`\nEvent: 'found-in-page'\nReturns:\n\n`result` Object\n`requestId` Integer\n`activeMatchOrdinal` Integer - Position of the active match.\n`matches` Integer - Number of Matches.\n`selectionArea` Rectangle - Coordinates of first match region.\n`finalUpdate` boolean\n\nFired when a result is available for\nwebview.findInPage request.\n```javascript\nconst webview = document.querySelector('webview')\nwebview.addEventListener('found-in-page', (e) => {\n  webview.stopFindInPage('keepSelection')\n})\nconst requestId = webview.findInPage('test')\nconsole.log(requestId)\n```\nEvent: 'will-navigate'\nReturns:\n\n`url` string\n\nEmitted when a user or the page wants to start navigation. It can happen when\nthe `window.location` object is changed or a user clicks a link in the page.\nThis event will not emit when the navigation is started programmatically with\nAPIs like `<webview>.loadURL` and `<webview>.back`.\nIt is also not emitted during in-page navigation, such as clicking anchor links\nor updating the `window.location.hash`. Use `did-navigate-in-page` event for\nthis purpose.\nCalling `event.preventDefault()` does NOT have any effect.\nEvent: 'did-start-navigation'\nReturns:\n\n`url` string\n`isInPlace` boolean\n`isMainFrame` boolean\n`frameProcessId` Integer\n`frameRoutingId` Integer\n\nEmitted when any frame (including main) starts navigating. `isInPlace` will be\n`true` for in-page navigations.\nEvent: 'did-redirect-navigation'\nReturns:\n\n`url` string\n`isInPlace` boolean\n`isMainFrame` boolean\n`frameProcessId` Integer\n`frameRoutingId` Integer\n\nEmitted after a server side redirect occurs during navigation. For example a 302\nredirect.\nEvent: 'did-navigate'\nReturns:\n\n`url` string\n\nEmitted when a navigation is done.\nThis event is not emitted for in-page navigations, such as clicking anchor links\nor updating the `window.location.hash`. Use `did-navigate-in-page` event for\nthis purpose.\nEvent: 'did-frame-navigate'\nReturns:\n\n`url` string\n`httpResponseCode` Integer - -1 for non HTTP navigations\n`httpStatusText` string - empty for non HTTP navigations,\n`isMainFrame` boolean\n`frameProcessId` Integer\n`frameRoutingId` Integer\n\nEmitted when any frame navigation is done.\nThis event is not emitted for in-page navigations, such as clicking anchor links\nor updating the `window.location.hash`. Use `did-navigate-in-page` event for\nthis purpose.\nEvent: 'did-navigate-in-page'\nReturns:\n\n`isMainFrame` boolean\n`url` string\n\nEmitted when an in-page navigation happened.\nWhen in-page navigation happens, the page URL changes but does not cause\nnavigation outside of the page. Examples of this occurring are when anchor links\nare clicked or when the DOM `hashchange` event is triggered.\nEvent: 'close'\nFired when the guest page attempts to close itself.\nThe following example code navigates the `webview` to `about:blank` when the\nguest attempts to close itself.\n`javascript\nconst webview = document.querySelector('webview')\nwebview.addEventListener('close', () => {\n  webview.src = 'about:blank'\n})`\nEvent: 'ipc-message'\nReturns:\n\n`frameId` [number, number] - pair of `[processId, frameId]`.\n`channel` string\n`args` any[]\n\nFired when the guest page has sent an asynchronous message to embedder page.\nWith `sendToHost` method and `ipc-message` event you can communicate\nbetween guest page and embedder page:\n`javascript\n// In embedder page.\nconst webview = document.querySelector('webview')\nwebview.addEventListener('ipc-message', (event) => {\n  console.log(event.channel)\n  // Prints \"pong\"\n})\nwebview.send('ping')`\n`javascript\n// In guest page.\nconst { ipcRenderer } = require('electron')\nipcRenderer.on('ping', () => {\n  ipcRenderer.sendToHost('pong')\n})`\nEvent: 'crashed'\nFired when the renderer process is crashed.\nEvent: 'plugin-crashed'\nReturns:\n\n`name` string\n`version` string\n\nFired when a plugin process is crashed.\nEvent: 'destroyed'\nFired when the WebContents is destroyed.\nEvent: 'media-started-playing'\nEmitted when media starts playing.\nEvent: 'media-paused'\nEmitted when media is paused or done playing.\nEvent: 'did-change-theme-color'\nReturns:\n\n`themeColor` string\n\nEmitted when a page's theme color changes. This is usually due to encountering a meta tag:\n`html\n<meta name='theme-color' content='#ff0000'>`\nEvent: 'update-target-url'\nReturns:\n\n`url` string\n\nEmitted when mouse moves over a link or the keyboard moves the focus to a link.\nEvent: 'devtools-open-url'\nReturns:\n\n`url` string - URL of the link that was clicked or selected.\n\nEmitted when a link is clicked in DevTools or 'Open in new tab' is selected for a link in its context menu.\nEvent: 'devtools-opened'\nEmitted when DevTools is opened.\nEvent: 'devtools-closed'\nEmitted when DevTools is closed.\nEvent: 'devtools-focused'\nEmitted when DevTools is focused / opened.\nEvent: 'context-menu'\nReturns:\n\n`params` Object\n`x` Integer - x coordinate.\n`y` Integer - y coordinate.\n`linkURL` string - URL of the link that encloses the node the context menu\n    was invoked on.\n`linkText` string - Text associated with the link. May be an empty\n    string if the contents of the link are an image.\n`pageURL` string - URL of the top level page that the context menu was\n    invoked on.\n`frameURL` string - URL of the subframe that the context menu was invoked\n    on.\n`srcURL` string - Source URL for the element that the context menu\n    was invoked on. Elements with source URLs are images, audio and video.\n`mediaType` string - Type of the node the context menu was invoked on. Can\n    be `none`, `image`, `audio`, `video`, `canvas`, `file` or `plugin`.\n`hasImageContents` boolean - Whether the context menu was invoked on an image\n    which has non-empty contents.\n`isEditable` boolean - Whether the context is editable.\n`selectionText` string - Text of the selection that the context menu was\n    invoked on.\n`titleText` string - Title text of the selection that the context menu was\n    invoked on.\n`altText` string - Alt text of the selection that the context menu was\n    invoked on.\n`suggestedFilename` string - Suggested filename to be used when saving file through 'Save\n    Link As' option of context menu.\n`selectionRect` Rectangle - Rect representing the coordinates in the document space of the selection.\n`selectionStartOffset` number - Start position of the selection text.\n`referrerPolicy` Referrer - The referrer policy of the frame on which the menu is invoked.\n`misspelledWord` string - The misspelled word under the cursor, if any.\n`dictionarySuggestions` string[] - An array of suggested words to show the\n    user to replace the `misspelledWord`.  Only available if there is a misspelled\n    word and spellchecker is enabled.\n`frameCharset` string - The character encoding of the frame on which the\n    menu was invoked.\n`inputFieldType` string - If the context menu was invoked on an input\n    field, the type of that field. Possible values are `none`, `plainText`,\n    `password`, `other`.\n`spellcheckEnabled` boolean - If the context is editable, whether or not spellchecking is enabled.\n`menuSourceType` string - Input source that invoked the context menu.\n    Can be `none`, `mouse`, `keyboard`, `touch`, `touchMenu`, `longPress`, `longTap`, `touchHandle`, `stylus`, `adjustSelection`, or `adjustSelectionReset`.\n`mediaFlags` Object - The flags for the media element the context menu was\n    invoked on.\n`inError` boolean - Whether the media element has crashed.\n`isPaused` boolean - Whether the media element is paused.\n`isMuted` boolean - Whether the media element is muted.\n`hasAudio` boolean - Whether the media element has audio.\n`isLooping` boolean - Whether the media element is looping.\n`isControlsVisible` boolean - Whether the media element's controls are\n  visible.\n`canToggleControls` boolean - Whether the media element's controls are\n  toggleable.\n`canPrint` boolean - Whether the media element can be printed.\n`canSave` boolean - Whether or not the media element can be downloaded.\n`canShowPictureInPicture` boolean - Whether the media element can show picture-in-picture.\n`isShowingPictureInPicture` boolean - Whether the media element is currently showing picture-in-picture.\n`canRotate` boolean - Whether the media element can be rotated.\n`canLoop` boolean - Whether the media element can be looped.\n\n\n`editFlags` Object - These flags indicate whether the renderer believes it\n    is able to perform the corresponding action.\n`canUndo` boolean - Whether the renderer believes it can undo.\n`canRedo` boolean - Whether the renderer believes it can redo.\n`canCut` boolean - Whether the renderer believes it can cut.\n`canCopy` boolean - Whether the renderer believes it can copy.\n`canPaste` boolean - Whether the renderer believes it can paste.\n`canDelete` boolean - Whether the renderer believes it can delete.\n`canSelectAll` boolean - Whether the renderer believes it can select all.\n`canEditRichly` boolean - Whether the renderer believes it can edit text richly.\n\n\n",
    "tag": "electron"
  },
  {
    "title": "Class: TouchBarSegmentedControl",
    "source": "https://github.com/electron/electron/tree/main/docs/api/touch-bar-segmented-control.md",
    "content": "Class: TouchBarSegmentedControl\n\nCreate a segmented control (a button group) where one button has a selected state\n\nProcess: Main\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\n`new TouchBarSegmentedControl(options)`\n\n`options` Object\n`segmentStyle` string (optional) - Style of the segments:\n`automatic` - Default. The appearance of the segmented control is\n  automatically determined based on the type of window in which the control\n  is displayed and the position within the window. Maps to `NSSegmentStyleAutomatic`.\n`rounded` - The control is displayed using the rounded style. Maps to `NSSegmentStyleRounded`.\n`textured-rounded` - The control is displayed using the textured rounded\n  style. Maps to `NSSegmentStyleTexturedRounded`.\n`round-rect` - The control is displayed using the round rect style. Maps to `NSSegmentStyleRoundRect`.\n`textured-square` - The control is displayed using the textured square\n  style. Maps to `NSSegmentStyleTexturedSquare`.\n`capsule` - The control is displayed using the capsule style. Maps to `NSSegmentStyleCapsule`.\n`small-square` - The control is displayed using the small square style. Maps to `NSSegmentStyleSmallSquare`.\n`separated` - The segments in the control are displayed very close to each\n  other but not touching. Maps to `NSSegmentStyleSeparated`.\n\n\n`mode` string (optional) - The selection mode of the control:\n`single` - Default. One item selected at a time, selecting one deselects the previously selected item. Maps to `NSSegmentSwitchTrackingSelectOne`.\n`multiple` - Multiple items can be selected at a time. Maps to `NSSegmentSwitchTrackingSelectAny`.\n`buttons` - Make the segments act as buttons, each segment can be pressed and released but never marked as active. Maps to `NSSegmentSwitchTrackingMomentary`.\n\n\n`segments` SegmentedControlSegment[] - An array of segments to place in this control.\n`selectedIndex` Integer (optional) - The index of the currently selected segment, will update automatically with user interaction. When the mode is `multiple` it will be the last selected item.\n`change` Function (optional) - Called when the user selects a new segment.\n`selectedIndex` Integer - The index of the segment the user selected.\n`isSelected` boolean - Whether as a result of user selection the segment is selected or not.\n\n\n\nInstance Properties\nThe following properties are available on instances of `TouchBarSegmentedControl`:\n`touchBarSegmentedControl.segmentStyle`\nA `string` representing the controls current segment style. Updating this value immediately updates the control\nin the touch bar.\n`touchBarSegmentedControl.segments`\nA `SegmentedControlSegment[]` array representing the segments in this control. Updating this value immediately\nupdates the control in the touch bar. Updating deep properties inside this array does not update the touch bar.\n`touchBarSegmentedControl.selectedIndex`\nAn `Integer` representing the currently selected segment. Changing this value immediately updates the control\nin the touch bar. User interaction with the touch bar will update this value automatically.\n`touchBarSegmentedControl.mode`",
    "tag": "electron"
  },
  {
    "title": "Class: WebRequest",
    "source": "https://github.com/electron/electron/tree/main/docs/api/web-request.md",
    "content": "Class: WebRequest\n\nIntercept and modify the contents of a request at various stages of its lifetime.\n\nProcess: Main\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\nInstances of the `WebRequest` class are accessed by using the `webRequest`\nproperty of a `Session`.\nThe methods of `WebRequest` accept an optional `filter` and a `listener`. The\n`listener` will be called with `listener(details)` when the API's event has\nhappened. The `details` object describes the request.\n\u26a0\ufe0f Only the last attached `listener` will be used. Passing `null` as `listener` will unsubscribe from the event.\nThe `filter` object has a `urls` property which is an Array of URL\npatterns that will be used to filter out the requests that do not match the URL\npatterns. If the `filter` is omitted then all requests will be matched.\nFor certain events the `listener` is passed with a `callback`, which should be\ncalled with a `response` object when `listener` has done its work.\nAn example of adding `User-Agent` header for requests:\n```javascript\nconst { session } = require('electron')\n// Modify the user agent for all requests to the following urls.\nconst filter = {\n  urls: ['https://.github.com/', '://electron.github.io/']\n}\nsession.defaultSession.webRequest.onBeforeSendHeaders(filter, (details, callback) => {\n  details.requestHeaders['User-Agent'] = 'MyAgent'\n  callback({ requestHeaders: details.requestHeaders })\n})\n```\nInstance Methods\nThe following methods are available on instances of `WebRequest`:\n`webRequest.onBeforeRequest([filter, ]listener)`\n\n`filter` WebRequestFilter (optional)\n`listener` Function | null\n`details` Object\n`id` Integer\n`url` string\n`method` string\n`webContentsId` Integer (optional)\n`webContents` WebContents (optional)\n`frame` WebFrameMain (optional)\n`resourceType` string - Can be `mainFrame`, `subFrame`, `stylesheet`, `script`, `image`, `font`, `object`, `xhr`, `ping`, `cspReport`, `media`, `webSocket` or `other`.\n`referrer` string\n`timestamp` Double\n`uploadData` UploadData[]\n\n\n`callback` Function\n`response` Object\n`cancel` boolean (optional)\n`redirectURL` string (optional) - The original request is prevented from\n    being sent or completed and is instead redirected to the given URL.\n\n\n\nThe `listener` will be called with `listener(details, callback)` when a request\nis about to occur.\nThe `uploadData` is an array of `UploadData` objects.\nThe `callback` has to be called with an `response` object.\nSome examples of valid `urls`:\n`js\n'http://foo:1234/'\n'http://foo.com/'\n'http://foo:1234/bar'\n'*://*/*'\n'*://example.com/*'\n'*://example.com/foo/*'\n'http://*.foo:1234/'\n'file://foo:1234/bar'\n'http://foo:*/'\n'*://www.foo.com/'`\n`webRequest.onBeforeSendHeaders([filter, ]listener)`\n\n`filter` WebRequestFilter (optional)\n`listener` Function | null\n`details` Object\n`id` Integer\n`url` string\n`method` string\n`webContentsId` Integer (optional)\n`webContents` WebContents (optional)\n`frame` WebFrameMain (optional)\n`resourceType` string - Can be `mainFrame`, `subFrame`, `stylesheet`, `script`, `image`, `font`, `object`, `xhr`, `ping`, `cspReport`, `media`, `webSocket` or `other`.\n`referrer` string\n`timestamp` Double\n`uploadData` UploadData[] (optional)\n`requestHeaders` Record\n\n\n`callback` Function\n`beforeSendResponse` Object\n`cancel` boolean (optional)\n`requestHeaders` Record (optional) - When provided, request will be made\n  with these headers.\n\n\n\nThe `listener` will be called with `listener(details, callback)` before sending\nan HTTP request, once the request headers are available. This may occur after a\nTCP connection is made to the server, but before any http data is sent.\nThe `callback` has to be called with a `response` object.\n`webRequest.onSendHeaders([filter, ]listener)`\n\n`filter` WebRequestFilter (optional)\n`listener` Function | null\n`details` Object\n`id` Integer\n`url` string\n`method` string\n`webContentsId` Integer (optional)\n`webContents` WebContents (optional)\n`frame` WebFrameMain (optional)\n`resourceType` string - Can be `mainFrame`, `subFrame`, `stylesheet`, `script`, `image`, `font`, `object`, `xhr`, `ping`, `cspReport`, `media`, `webSocket` or `other`.\n`referrer` string\n`timestamp` Double\n`requestHeaders` Record\n\n\n\nThe `listener` will be called with `listener(details)` just before a request is\ngoing to be sent to the server, modifications of previous `onBeforeSendHeaders`\nresponse are visible by the time this listener is fired.\n`webRequest.onHeadersReceived([filter, ]listener)`\n\n`filter` WebRequestFilter (optional)\n`listener` Function | null\n`details` Object\n`id` Integer\n`url` string\n`method` string\n`webContentsId` Integer (optional)\n`webContents` WebContents (optional)\n`frame` WebFrameMain (optional)\n`resourceType` string - Can be `mainFrame`, `subFrame`, `stylesheet`, `script`, `image`, `font`, `object`, `xhr`, `ping`, `cspReport`, `media`, `webSocket` or `other`.\n`referrer` string\n`timestamp` Double\n`statusLine` string\n`statusCode` Integer\n`responseHeaders` Record (optional)\n\n\n`callback` Function\n`headersReceivedResponse` Object\n`cancel` boolean (optional)\n`responseHeaders` Record (optional) - When provided, the server is assumed\n    to have responded with these headers.\n`statusLine` string (optional) - Should be provided when overriding\n    `responseHeaders` to change header status otherwise original response\n    header's status will be used.\n\n\n\nThe `listener` will be called with `listener(details, callback)` when HTTP\nresponse headers of a request have been received.\nThe `callback` has to be called with a `response` object.\n`webRequest.onResponseStarted([filter, ]listener)`\n\n`filter` WebRequestFilter (optional)\n`listener` Function | null\n`details` Object\n`id` Integer\n`url` string\n`method` string\n`webContentsId` Integer (optional)\n`webContents` WebContents (optional)\n`frame` WebFrameMain (optional)\n`resourceType` string - Can be `mainFrame`, `subFrame`, `stylesheet`, `script`, `image`, `font`, `object`, `xhr`, `ping`, `cspReport`, `media`, `webSocket` or `other`.\n`referrer` string\n`timestamp` Double\n`responseHeaders` Record (optional)\n`fromCache` boolean - Indicates whether the response was fetched from disk\n  cache.\n`statusCode` Integer\n`statusLine` string\n\n\n\nThe `listener` will be called with `listener(details)` when first byte of the\nresponse body is received. For HTTP requests, this means that the status line\nand response headers are available.\n`webRequest.onBeforeRedirect([filter, ]listener)`\n\n`filter` WebRequestFilter (optional)\n`listener` Function | null\n`details` Object\n`id` Integer\n`url` string\n`method` string\n`webContentsId` Integer (optional)\n`webContents` WebContents (optional)\n`frame` WebFrameMain (optional)\n`resourceType` string - Can be `mainFrame`, `subFrame`, `stylesheet`, `script`, `image`, `font`, `object`, `xhr`, `ping`, `cspReport`, `media`, `webSocket` or `other`.\n`referrer` string\n`timestamp` Double\n`redirectURL` string\n`statusCode` Integer\n`statusLine` string\n`ip` string (optional) - The server IP address that the request was\n  actually sent to.\n`fromCache` boolean\n`responseHeaders` Record (optional)\n\n\n\nThe `listener` will be called with `listener(details)` when a server initiated\nredirect is about to occur.\n`webRequest.onCompleted([filter, ]listener)`\n\n`filter` WebRequestFilter (optional)\n`listener` Function | null\n`details` Object\n`id` Integer\n`url` string\n`method` string\n`webContentsId` Integer (optional)\n`webContents` WebContents (optional)\n`frame` WebFrameMain (optional)\n`resourceType` string - Can be `mainFrame`, `subFrame`, `stylesheet`, `script`, `image`, `font`, `object`, `xhr`, `ping`, `cspReport`, `media`, `webSocket` or `other`.\n`referrer` string\n`timestamp` Double\n`responseHeaders` Record (optional)\n`fromCache` boolean\n`statusCode` Integer\n`statusLine` string\n`error` string\n\n\n\nThe `listener` will be called with `listener(details)` when a request is\ncompleted.\n`webRequest.onErrorOccurred([filter, ]listener)`\n\n`filter` WebRequestFilter (optional)\n`listener` Function | null\n`details` Object\n`id` Integer\n`url` string\n`method` string\n`webContentsId` Integer (optional)\n`webContents` WebContents (optional)\n`frame` WebFrameMain (optional)\n`resourceType` string - Can be `mainFrame`, `subFrame`, `stylesheet`, `script`, `image`, `font`, `object`, `xhr`, `ping`, `cspReport`, `media`, `webSocket` or `other`.\n`referrer` string\n`timestamp` Double\n`fromCache` boolean\n`error` string - The error description.\n\n\n",
    "tag": "electron"
  },
  {
    "title": "Class: Dock",
    "source": "https://github.com/electron/electron/tree/main/docs/api/dock.md",
    "content": "Class: Dock\n\nControl your app in the macOS dock\n\nProcess: Main\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\nThe following example shows how to bounce your icon on the dock.\n`javascript\nconst { app } = require('electron')\napp.dock.bounce()`\nInstance Methods\n`dock.bounce([type])` macOS\n\n`type` string (optional) - Can be `critical` or `informational`. The default is\n `informational`\n\nReturns `Integer` - an ID representing the request.\nWhen `critical` is passed, the dock icon will bounce until either the\napplication becomes active or the request is canceled.\nWhen `informational` is passed, the dock icon will bounce for one second.\nHowever, the request remains active until either the application becomes active\nor the request is canceled.\nNote: This method can only be used while the app is not focused; when the app is focused it will return -1.\n`dock.cancelBounce(id)` macOS\n\n`id` Integer\n\nCancel the bounce of `id`.\n`dock.downloadFinished(filePath)` macOS\n\n`filePath` string\n\nBounces the Downloads stack if the filePath is inside the Downloads folder.\n`dock.setBadge(text)` macOS\n\n`text` string\n\nSets the string to be displayed in the dock\u2019s badging area.\n`dock.getBadge()` macOS\nReturns `string` - The badge string of the dock.\n`dock.hide()` macOS\nHides the dock icon.\n`dock.show()` macOS\nReturns `Promise<void>` - Resolves when the dock icon is shown.\n`dock.isVisible()` macOS\nReturns `boolean` - Whether the dock icon is visible.\n`dock.setMenu(menu)` macOS\n\n`menu` Menu\n\nSets the application's [dock menu][dock-menu].\n`dock.getMenu()` macOS\nReturns `Menu | null` - The application's [dock menu][dock-menu].\n`dock.setIcon(image)` macOS\n\n`image` (NativeImage | string)\n\nSets the `image` associated with this dock icon.",
    "tag": "electron"
  },
  {
    "title": "Class: MenuItem",
    "source": "https://github.com/electron/electron/tree/main/docs/api/menu-item.md",
    "content": "Class: MenuItem\n\nAdd items to native application menus and context menus.\n\nProcess: Main\nSee Menu for examples.\n`new MenuItem(options)`\n\n`options` Object\n`click` Function (optional) - Will be called with\n    `click(menuItem, browserWindow, event)` when the menu item is clicked.\n`menuItem` MenuItem\n`browserWindow` BrowserWindow | undefined - This will not be defined if no window is open.\n`event` KeyboardEvent\n\n\n`role` string (optional) - Can be `undo`, `redo`, `cut`, `copy`, `paste`, `pasteAndMatchStyle`, `delete`, `selectAll`, `reload`, `forceReload`, `toggleDevTools`, `resetZoom`, `zoomIn`, `zoomOut`, `toggleSpellChecker`, `togglefullscreen`, `window`, `minimize`, `close`, `help`, `about`, `services`, `hide`, `hideOthers`, `unhide`, `quit`, `showSubstitutions`, `toggleSmartQuotes`, `toggleSmartDashes`, `toggleTextReplacement`, `startSpeaking`, `stopSpeaking`, `zoom`, `front`, `appMenu`, `fileMenu`, `editMenu`, `viewMenu`, `shareMenu`, `recentDocuments`, `toggleTabBar`, `selectNextTab`, `selectPreviousTab`, `mergeAllWindows`, `clearRecentDocuments`, `moveTabToNewWindow` or `windowMenu` - Define the action of the menu item, when specified the\n    `click` property will be ignored. See roles.\n`type` string (optional) - Can be `normal`, `separator`, `submenu`, `checkbox` or\n    `radio`.\n`label` string (optional)\n`sublabel` string (optional)\n`toolTip` string (optional) macOS - Hover text for this menu item.\n`accelerator` Accelerator (optional)\n`icon` (NativeImage | string) (optional)\n`enabled` boolean (optional) - If false, the menu item will be greyed out and\n    unclickable.\n`acceleratorWorksWhenHidden` boolean (optional) macOS - default is `true`, and when `false` will prevent the accelerator from triggering the item if the item is not visible.\n`visible` boolean (optional) - If false, the menu item will be entirely hidden.\n`checked` boolean (optional) - Should only be specified for `checkbox` or `radio` type\n    menu items.\n`registerAccelerator` boolean (optional) Linux Windows - If false, the accelerator won't be registered\n    with the system, but it will still be displayed. Defaults to true.\n`sharingItem` SharingItem (optional) macOS - The item to share when the `role` is `shareMenu`.\n`submenu` (MenuItemConstructorOptions[] | Menu) (optional) - Should be specified\n    for `submenu` type menu items. If `submenu` is specified, the `type: 'submenu'` can be omitted.\n    If the value is not a Menu then it will be automatically converted to one using\n    `Menu.buildFromTemplate`.\n`id` string (optional) - Unique within a single menu. If defined then it can be used\n    as a reference to this item by the position attribute.\n`before` string[] (optional) - Inserts this item before the item with the specified label. If\n    the referenced item doesn't exist the item will be inserted at the end of  the menu. Also implies\n    that the menu item in question should be placed in the same \u201cgroup\u201d as the item.\n`after` string[] (optional) - Inserts this item after the item with the specified label. If the\n    referenced item doesn't exist the item will be inserted at the end of\n    the menu.\n`beforeGroupContaining` string[] (optional) - Provides a means for a single context menu to declare\n    the placement of their containing group before the containing group of the item\n    with the specified label.\n`afterGroupContaining` string[] (optional) - Provides a means for a single context menu to declare\n    the placement of their containing group after the containing group of the item\n    with the specified label.\n\nNote: `acceleratorWorksWhenHidden` is specified as being macOS-only because accelerators always work when items are hidden on Windows and Linux. The option is exposed to users to give them the option to turn it off, as this is possible in native macOS development.\nRoles\nRoles allow menu items to have predefined behaviors.\nIt is best to specify `role` for any menu item that matches a standard role,\nrather than trying to manually implement the behavior in a `click` function.\nThe built-in `role` behavior will give the best native experience.\nThe `label` and `accelerator` values are optional when using a `role` and will\ndefault to appropriate values for each platform.\nEvery menu item must have either a `role`, `label`, or in the case of a separator\na `type`.\nThe `role` property can have following values:\n\n`undo`\n`about` - Trigger a native about panel (custom message box on Window, which does not provide its own).\n`redo`\n`cut`\n`copy`\n`paste`\n`pasteAndMatchStyle`\n`selectAll`\n`delete`\n`minimize` - Minimize current window.\n`close` - Close current window.\n`quit` - Quit the application.\n`reload` - Reload the current window.\n`forceReload` - Reload the current window ignoring the cache.\n`toggleDevTools` - Toggle developer tools in the current window.\n`togglefullscreen` - Toggle full screen mode on the current window.\n`resetZoom` - Reset the focused page's zoom level to the original size.\n`zoomIn` - Zoom in the focused page by 10%.\n`zoomOut` - Zoom out the focused page by 10%.\n`toggleSpellChecker` - Enable/disable builtin spell checker.\n`fileMenu` - Whole default \"File\" menu (Close / Quit)\n`editMenu` - Whole default \"Edit\" menu (Undo, Copy, etc.).\n`viewMenu` - Whole default \"View\" menu (Reload, Toggle Developer Tools, etc.)\n`windowMenu` - Whole default \"Window\" menu (Minimize, Zoom, etc.).\n\nThe following additional roles are available on macOS:\n\n`appMenu` - Whole default \"App\" menu (About, Services, etc.)\n`hide` - Map to the `hide` action.\n`hideOthers` - Map to the `hideOtherApplications` action.\n`unhide` - Map to the `unhideAllApplications` action.\n`showSubstitutions` - Map to the `orderFrontSubstitutionsPanel` action.\n`toggleSmartQuotes` - Map to the `toggleAutomaticQuoteSubstitution` action.\n`toggleSmartDashes` - Map to the `toggleAutomaticDashSubstitution` action.\n`toggleTextReplacement` - Map to the `toggleAutomaticTextReplacement` action.\n`startSpeaking` - Map to the `startSpeaking` action.\n`stopSpeaking` - Map to the `stopSpeaking` action.\n`front` - Map to the `arrangeInFront` action.\n`zoom` - Map to the `performZoom` action.\n`toggleTabBar` - Map to the `toggleTabBar` action.\n`selectNextTab` - Map to the `selectNextTab` action.\n`selectPreviousTab` - Map to the `selectPreviousTab` action.\n`mergeAllWindows` - Map to the `mergeAllWindows` action.\n`moveTabToNewWindow` - Map to the `moveTabToNewWindow` action.\n`window` - The submenu is a \"Window\" menu.\n`help` - The submenu is a \"Help\" menu.\n`services` - The submenu is a \"Services\" menu. This is only intended for use in the Application Menu and is not the same as the \"Services\" submenu used in context menus in macOS apps, which is not implemented in Electron.\n`recentDocuments` - The submenu is an \"Open Recent\" menu.\n`clearRecentDocuments` - Map to the `clearRecentDocuments` action.\n`shareMenu` - The submenu is [share menu][ShareMenu]. The `sharingItem` property must also be set to indicate the item to share.\n\nWhen specifying a `role` on macOS, `label` and `accelerator` are the only\noptions that will affect the menu item. All other options will be ignored.\nLowercase `role`, e.g. `toggledevtools`, is still supported.\nNote: The `enabled` and `visibility` properties are not available for top-level menu items in the tray on macOS.\nInstance Properties\nThe following properties are available on instances of `MenuItem`:\n`menuItem.id`\nA `string` indicating the item's unique id, this property can be\ndynamically changed.\n`menuItem.label`\nA `string` indicating the item's visible label.\n`menuItem.click`\nA `Function` that is fired when the MenuItem receives a click event.\nIt can be called with `menuItem.click(event, focusedWindow, focusedWebContents)`.\n\n`event` KeyboardEvent\n`focusedWindow` BrowserWindow\n`focusedWebContents` WebContents\n\n`menuItem.submenu`\nA `Menu` (optional) containing the menu\nitem's submenu, if present.\n`menuItem.type`\nA `string` indicating the type of the item. Can be `normal`, `separator`, `submenu`, `checkbox` or `radio`.\n`menuItem.role`\nA `string` (optional) indicating the item's role, if set. Can be `undo`, `redo`, `cut`, `copy`, `paste`, `pasteAndMatchStyle`, `delete`, `selectAll`, `reload`, `forceReload`, `toggleDevTools`, `resetZoom`, `zoomIn`, `zoomOut`, `toggleSpellChecker`, `togglefullscreen`, `window`, `minimize`, `close`, `help`, `about`, `services`, `hide`, `hideOthers`, `unhide`, `quit`, `startSpeaking`, `stopSpeaking`, `zoom`, `front`, `appMenu`, `fileMenu`, `editMenu`, `viewMenu`, `shareMenu`, `recentDocuments`, `toggleTabBar`, `selectNextTab`, `selectPreviousTab`, `mergeAllWindows`, `clearRecentDocuments`, `moveTabToNewWindow` or `windowMenu`\n`menuItem.accelerator`\nAn `Accelerator` (optional) indicating the item's accelerator, if set.\n`menuItem.userAccelerator` Readonly macOS\nAn `Accelerator | null` indicating the item's user-assigned accelerator for the menu item.\nNote: This property is only initialized after the `MenuItem` has been added to a `Menu`. Either via `Menu.buildFromTemplate` or via `Menu.append()/insert()`.  Accessing before initialization will just return `null`.\n`menuItem.icon`\nA `NativeImage | string` (optional) indicating the\nitem's icon, if set.\n`menuItem.sublabel`\nA `string` indicating the item's sublabel.\n`menuItem.toolTip` macOS\nA `string` indicating the item's hover text.\n`menuItem.enabled`\nA `boolean` indicating whether the item is enabled, this property can be\ndynamically changed.\n`menuItem.visible`\nA `boolean` indicating whether the item is visible, this property can be\ndynamically changed.\n`menuItem.checked`\nA `boolean` indicating whether the item is checked, this property can be\ndynamically changed.\nA `checkbox` menu item will toggle the `checked` property on and off when\nselected.\nA `radio` menu item will turn on its `checked` property when clicked, and\nwill turn off that property for all adjacent items in the same menu.\nYou can add a `click` function for additional behavior.\n`menuItem.registerAccelerator`\nA `boolean` indicating if the accelerator should be registered with the\nsystem or just displayed.\nThis property can be dynamically changed.\n`menuItem.sharingItem` macOS\nA `SharingItem` indicating the item to share when the `role` is `shareMenu`.\nThis property can be dynamically changed.\n`menuItem.commandId`\nA `number` indicating an item's sequential unique id.\n`menuItem.menu`\nA `Menu` that the item is a part of.",
    "tag": "electron"
  },
  {
    "title": "crashReporter",
    "source": "https://github.com/electron/electron/tree/main/docs/api/crash-reporter.md",
    "content": "crashReporter\n\nSubmit crash reports to a remote server.\n\nProcess: Main, Renderer\nThe following is an example of setting up Electron to automatically submit\ncrash reports to a remote server:\n```javascript\nconst { crashReporter } = require('electron')\ncrashReporter.start({ submitURL: 'https://your-domain.com/url-to-submit' })\n```\nFor setting up a server to accept and process crash reports, you can use\nfollowing projects:\n\nsocorro\nmini-breakpad-server\n\n\nNote: Electron uses Crashpad, not Breakpad, to collect and upload\ncrashes, but for the time being, the upload protocol is the same.\n\nOr use a 3rd party hosted solution:\n\nBacktrace\nSentry\nBugSplat\nBugsnag\n\nCrash reports are stored temporarily before being uploaded in a directory\nunderneath the app's user data directory, called 'Crashpad'. You can override\nthis directory by calling `app.setPath('crashDumps', '/path/to/crashes')`\nbefore starting the crash reporter.\nElectron uses crashpad\nto monitor and report crashes.\nMethods\nThe `crashReporter` module has the following methods:\n`crashReporter.start(options)`\n\n`options` Object\n`submitURL` string (optional) - URL that crash reports will be sent to as\n    POST. Required unless `uploadToServer` is `false`.\n`productName` string (optional) - Defaults to `app.name`.\n`companyName` string (optional) Deprecated - Deprecated alias for\n    `{ globalExtra: { _companyName: ... } }`.\n`uploadToServer` boolean (optional) - Whether crash reports should be sent\n    to the server. If false, crash reports will be collected and stored in the\n    crashes directory, but not uploaded. Default is `true`.\n`ignoreSystemCrashHandler` boolean (optional) - If true, crashes generated\n    in the main process will not be forwarded to the system crash handler.\n    Default is `false`.\n`rateLimit` boolean (optional) macOS Windows - If true, limit the\n    number of crashes uploaded to 1/hour. Default is `false`.\n`compress` boolean (optional) - If true, crash reports will be compressed\n    and uploaded with `Content-Encoding: gzip`. Default is `true`.\n`extra` Record (optional) - Extra string key/value\n    annotations that will be sent along with crash reports that are generated\n    in the main process. Only string values are supported. Crashes generated in\n    child processes will not contain these extra\n    parameters to crash reports generated from child processes, call\n    addExtraParameter from the\n    child process.\n`globalExtra` Record (optional) - Extra string key/value\n    annotations that will be sent along with any crash reports generated in any\n    process. These annotations cannot be changed once the crash reporter has\n    been started. If a key is present in both the global extra parameters and\n    the process-specific extra parameters, then the global one will take\n    precedence. By default, `productName` and the app version are included, as\n    well as the Electron version.\n\nThis method must be called before using any other `crashReporter` APIs. Once\ninitialized this way, the crashpad handler collects crashes from all\nsubsequently created processes. The crash reporter cannot be disabled once\nstarted.\nThis method should be called as early as possible in app startup, preferably\nbefore `app.on('ready')`. If the crash reporter is not initialized at the time\na renderer process is created, then that renderer process will not be monitored\nby the crash reporter.\nNote: You can test out the crash reporter by generating a crash using\n`process.crash()`.\nNote: If you need to send additional/updated `extra` parameters after your\nfirst call `start` you can call `addExtraParameter`.\nNote: Parameters passed in `extra`, `globalExtra` or set with\n`addExtraParameter` have limits on the length of the keys and values. Key names\nmust be at most 39 bytes long, and values must be no longer than 127 bytes.\nKeys with names longer than the maximum will be silently ignored. Key values\nlonger than the maximum length will be truncated.\nNote: This method is only available in the main process.\n`crashReporter.getLastCrashReport()`\nReturns CrashReport - The date and ID of the\nlast crash report. Only crash reports that have been uploaded will be returned;\neven if a crash report is present on disk it will not be returned until it is\nuploaded. In the case that there are no uploaded reports, `null` is returned.\nNote: This method is only available in the main process.\n`crashReporter.getUploadedReports()`\nReturns CrashReport[]:\nReturns all uploaded crash reports. Each report contains the date and uploaded\nID.\nNote: This method is only available in the main process.\n`crashReporter.getUploadToServer()`\nReturns `boolean` - Whether reports should be submitted to the server. Set through\nthe `start` method or `setUploadToServer`.\nNote: This method is only available in the main process.\n`crashReporter.setUploadToServer(uploadToServer)`\n\n`uploadToServer` boolean - Whether reports should be submitted to the server.\n\nThis would normally be controlled by user preferences. This has no effect if\ncalled before `start` is called.\nNote: This method is only available in the main process.\n`crashReporter.addExtraParameter(key, value)`\n\n`key` string - Parameter key, must be no longer than 39 bytes.\n`value` string - Parameter value, must be no longer than 127 bytes.\n\nSet an extra parameter to be sent with the crash report. The values specified\nhere will be sent in addition to any values set via the `extra` option when\n`start` was called.\nParameters added in this fashion (or via the `extra` parameter to\n`crashReporter.start`) are specific to the calling process. Adding extra\nparameters in the main process will not cause those parameters to be sent along\nwith crashes from renderer or other child processes. Similarly, adding extra\nparameters in a renderer process will not result in those parameters being sent\nwith crashes that occur in other renderer processes or in the main process.\nNote: Parameters have limits on the length of the keys and values. Key\nnames must be no longer than 39 bytes, and values must be no longer than 20320\nbytes. Keys with names longer than the maximum will be silently ignored. Key\nvalues longer than the maximum length will be truncated.\n`crashReporter.removeExtraParameter(key)`\n\n`key` string - Parameter key, must be no longer than 39 bytes.\n\nRemove an extra parameter from the current set of parameters. Future crashes\nwill not include this parameter.\n`crashReporter.getParameters()`\nReturns `Record<string, string>` - The current 'extra' parameters of the crash reporter.\nIn Node child processes\nSince `require('electron')` is not available in Node child processes, the\nfollowing APIs are available on the `process` object in Node child processes.\n`process.crashReporter.start(options)`\nSee crashReporter.start().\nNote that if the crash reporter is started in the main process, it will\nautomatically monitor child processes, so it should not be started in the child\nprocess. Only use this method if the main process does not initialize the crash\nreporter.\n`process.crashReporter.getParameters()`\nSee crashReporter.getParameters().\n`process.crashReporter.addExtraParameter(key, value)`\nSee crashReporter.addExtraParameter(key, value).\n`process.crashReporter.removeExtraParameter(key)`\nSee crashReporter.removeExtraParameter(key).\nCrash Report Payload\nThe crash reporter will send the following data to the `submitURL` as\na `multipart/form-data` `POST`:\n\n`ver` string - The version of Electron.\n`platform` string - e.g. 'win32'.\n`process_type` string - e.g. 'renderer'.\n`guid` string - e.g. '5e1286fc-da97-479e-918b-6bfb0c3d1c72'.\n`_version` string - The version in `package.json`.\n`_productName` string - The product name in the `crashReporter` `options`\n  object.\n`prod` string - Name of the underlying product. In this case Electron.\n`_companyName` string - The company name in the `crashReporter` `options`\n  object.\n`upload_file_minidump` File - The crash report in the format of `minidump`.\nAll level one properties of the `extra` object in the `crashReporter`\n",
    "tag": "electron"
  },
  {
    "title": "session",
    "source": "https://github.com/electron/electron/tree/main/docs/api/session.md",
    "content": "session\n\nManage browser sessions, cookies, cache, proxy settings, etc.\n\nProcess: Main\nThe `session` module can be used to create new `Session` objects.\nYou can also access the `session` of existing pages by using the `session`\nproperty of WebContents, or from the `session` module.\n```javascript\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({ width: 800, height: 600 })\nwin.loadURL('http://github.com')\nconst ses = win.webContents.session\nconsole.log(ses.getUserAgent())\n```\nMethods\nThe `session` module has the following methods:\n`session.fromPartition(partition[, options])`\n\n`partition` string\n`options` Object (optional)\n`cache` boolean - Whether to enable cache.\n\nReturns `Session` - A session instance from `partition` string. When there is an existing\n`Session` with the same `partition`, it will be returned; otherwise a new\n`Session` instance will be created with `options`.\nIf `partition` starts with `persist:`, the page will use a persistent session\navailable to all pages in the app with the same `partition`. if there is no\n`persist:` prefix, the page will use an in-memory session. If the `partition` is\nempty then default session of the app will be returned.\nTo create a `Session` with `options`, you have to ensure the `Session` with the\n`partition` has never been used before. There is no way to change the `options`\nof an existing `Session` object.\nProperties\nThe `session` module has the following properties:\n`session.defaultSession`\nA `Session` object, the default session object of the app.\nClass: Session\n\nGet and set properties of a session.\n\nProcess: Main\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\nYou can create a `Session` object in the `session` module:\n`javascript\nconst { session } = require('electron')\nconst ses = session.fromPartition('persist:name')\nconsole.log(ses.getUserAgent())`\nInstance Events\nThe following events are available on instances of `Session`:\nEvent: 'will-download'\nReturns:\n\n`event` Event\n`item` DownloadItem\n`webContents` WebContents\n\nEmitted when Electron is about to download `item` in `webContents`.\nCalling `event.preventDefault()` will cancel the download and `item` will not be\navailable from next tick of the process.\n`javascript\nconst { session } = require('electron')\nsession.defaultSession.on('will-download', (event, item, webContents) => {\n  event.preventDefault()\n  require('got')(item.getURL()).then((response) => {\n    require('fs').writeFileSync('/somewhere', response.body)\n  })\n})`\nEvent: 'extension-loaded'\nReturns:\n\n`event` Event\n`extension` Extension\n\nEmitted after an extension is loaded. This occurs whenever an extension is\nadded to the \"enabled\" set of extensions. This includes:\n\nExtensions being loaded from `Session.loadExtension`.\nExtensions being reloaded:\nfrom a crash.\nif the extension requested it (chrome.runtime.reload()).\n\nEvent: 'extension-unloaded'\nReturns:\n\n`event` Event\n`extension` Extension\n\nEmitted after an extension is unloaded. This occurs when\n`Session.removeExtension` is called.\nEvent: 'extension-ready'\nReturns:\n\n`event` Event\n`extension` Extension\n\nEmitted after an extension is loaded and all necessary browser state is\ninitialized to support the start of the extension's background page.\nEvent: 'preconnect'\nReturns:\n\n`event` Event\n`preconnectUrl` string - The URL being requested for preconnection by the\n  renderer.\n`allowCredentials` boolean - True if the renderer is requesting that the\n  connection include credentials (see the\n  spec for more details.)\n\nEmitted when a render process requests preconnection to a URL, generally due to\na resource hint.\nEvent: 'spellcheck-dictionary-initialized'\nReturns:\n\n`event` Event\n`languageCode` string - The language code of the dictionary file\n\nEmitted when a hunspell dictionary file has been successfully initialized. This\noccurs after the file has been downloaded.\nEvent: 'spellcheck-dictionary-download-begin'\nReturns:\n\n`event` Event\n`languageCode` string - The language code of the dictionary file\n\nEmitted when a hunspell dictionary file starts downloading\nEvent: 'spellcheck-dictionary-download-success'\nReturns:\n\n`event` Event\n`languageCode` string - The language code of the dictionary file\n\nEmitted when a hunspell dictionary file has been successfully downloaded\nEvent: 'spellcheck-dictionary-download-failure'\nReturns:\n\n`event` Event\n`languageCode` string - The language code of the dictionary file\n\nEmitted when a hunspell dictionary file download fails.  For details\non the failure you should collect a netlog and inspect the download\nrequest.\nEvent: 'select-hid-device'\nReturns:\n\n`event` Event\n`details` Object\n`deviceList` HIDDevice[]\n`frame` WebFrameMain\n`callback` Function\n`deviceId` string | null (optional)\n\nEmitted when a HID device needs to be selected when a call to\n`navigator.hid.requestDevice` is made. `callback` should be called with\n`deviceId` to be selected; passing no arguments to `callback` will\ncancel the request.  Additionally, permissioning on `navigator.hid` can\nbe further managed by using ses.setPermissionCheckHandler(handler)\nand ses.setDevicePermissionHandler(handler).\n```javascript\nconst { app, BrowserWindow } = require('electron')\nlet win = null\napp.whenReady().then(() => {\n  win = new BrowserWindow()\nwin.webContents.session.setPermissionCheckHandler((webContents, permission, requestingOrigin, details) => {\n    if (permission === 'hid') {\n      // Add logic here to determine if permission should be given to allow HID selection\n      return true\n    }\n    return false\n  })\n// Optionally, retrieve previously persisted devices from a persistent store\n  const grantedDevices = fetchGrantedDevices()\nwin.webContents.session.setDevicePermissionHandler((details) => {\n    if (new URL(details.origin).hostname === 'some-host' && details.deviceType === 'hid') {\n      if (details.device.vendorId === 123 && details.device.productId === 345) {\n        // Always allow this type of device (this allows skipping the call to `navigator.hid.requestDevice` first)\n        return true\n      }\n\n\n```  // Search through the list of devices that have previously been granted permission\n  return grantedDevices.some((grantedDevice) => {\n    return grantedDevice.vendorId === details.device.vendorId &&\n          grantedDevice.productId === details.device.productId &&\n          grantedDevice.serialNumber && grantedDevice.serialNumber === details.device.serialNumber\n  })\n}\nreturn false\n```\n\n\n})\nwin.webContents.session.on('select-hid-device', (event, details, callback) => {\n    event.preventDefault()\n    const selectedDevice = details.deviceList.find((device) => {\n      return device.vendorId === '9025' && device.productId === '67'\n    })\n    callback(selectedDevice?.deviceId)\n  })\n})\n```\nEvent: 'hid-device-added'\nReturns:\n\n`event` Event\n`details` Object\n`device` HIDDevice[]\n`frame` WebFrameMain\n\nEmitted after `navigator.hid.requestDevice` has been called and\n`select-hid-device` has fired if a new device becomes available before\nthe callback from `select-hid-device` is called.  This event is intended for\nuse when using a UI to ask users to pick a device so that the UI can be updated\nwith the newly added device.\nEvent: 'hid-device-removed'\nReturns:\n\n`event` Event\n`details` Object\n`device` HIDDevice[]\n`frame` WebFrameMain\n\nEmitted after `navigator.hid.requestDevice` has been called and\n`select-hid-device` has fired if a device has been removed before the callback\nfrom `select-hid-device` is called.  This event is intended for use when using\na UI to ask users to pick a device so that the UI can be updated to remove the\nspecified device.\nEvent: 'hid-device-revoked'\nReturns:\n\n`event` Event\n`details` Object\n`device` HIDDevice[]\n`origin` string (optional) - The origin that the device has been revoked from.\n\nEmitted after `HIDDevice.forget()` has been called.  This event can be used\nto help maintain persistent storage of permissions when\n`setDevicePermissionHandler` is used.\nEvent: 'select-serial-port'\nReturns:\n\n`event` Event\n`portList` SerialPort[]\n`webContents` WebContents\n`callback` Function\n`portId` string\n\nEmitted when a serial port needs to be selected when a call to\n`navigator.serial.requestPort` is made. `callback` should be called with\n`portId` to be selected, passing an empty string to `callback` will\ncancel the request.  Additionally, permissioning on `navigator.serial` can\nbe managed by using ses.setPermissionCheckHandler(handler)\nwith the `serial` permission.\n```javascript\nconst { app, BrowserWindow } = require('electron')\nlet win = null\napp.whenReady().then(() => {\n  win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\nwin.webContents.session.setPermissionCheckHandler((webContents, permission, requestingOrigin, details) => {\n    if (permission === 'serial') {\n      // Add logic here to determine if permission should be given to allow serial selection\n      return true\n    }\n    return false\n  })\n// Optionally, retrieve previously persisted devices from a persistent store\n  const grantedDevices = fetchGrantedDevices()\nwin.webContents.session.setDevicePermissionHandler((details) => {\n    if (new URL(details.origin).hostname === 'some-host' && details.deviceType === 'serial') {\n      if (details.device.vendorId === 123 && details.device.productId === 345) {\n        // Always allow this type of device (this allows skipping the call to `navigator.serial.requestPort` first)\n        return true\n      }\n\n\n```  // Search through the list of devices that have previously been granted permission\n  return grantedDevices.some((grantedDevice) => {\n    return grantedDevice.vendorId === details.device.vendorId &&\n          grantedDevice.productId === details.device.productId &&\n          grantedDevice.serialNumber && grantedDevice.serialNumber === details.device.serialNumber\n  })\n}\nreturn false\n```\n\n\n})\nwin.webContents.session.on('select-serial-port', (event, portList, webContents, callback) => {\n    event.preventDefault()\n    const selectedPort = portList.find((device) => {\n      return device.vendorId === '9025' && device.productId === '67'\n    })\n    if (!selectedPort) {\n      callback('')\n    } else {\n      callback(selectedPort.portId)\n    }\n  })\n})\n```\nEvent: 'serial-port-added'\nReturns:\n\n`event` Event\n`port` SerialPort\n`webContents` WebContents\n\nEmitted after `navigator.serial.requestPort` has been called and\n`select-serial-port` has fired if a new serial port becomes available before\nthe callback from `select-serial-port` is called.  This event is intended for\nuse when using a UI to ask users to pick a port so that the UI can be updated\nwith the newly added port.\nEvent: 'serial-port-removed'\nReturns:\n\n`event` Event\n`port` SerialPort\n`webContents` WebContents\n\nEmitted after `navigator.serial.requestPort` has been called and\n`select-serial-port` has fired if a serial port has been removed before the\ncallback from `select-serial-port` is called.  This event is intended for use\nwhen using a UI to ask users to pick a port so that the UI can be updated\nto remove the specified port.\nEvent: 'serial-port-revoked'\nReturns:\n\n`event` Event\n`details` Object\n`port` SerialPort\n`frame` WebFrameMain\n`origin` string - The origin that the device has been revoked from.\n\nEmitted after `SerialPort.forget()` has been called.  This event can be used\nto help maintain persistent storage of permissions when `setDevicePermissionHandler` is used.\n```js\n// Browser Process\nconst { app, BrowserWindow } = require('electron')\napp.whenReady().then(() => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\nwin.webContents.session.on('serial-port-revoked', (event, details) => {\n    console.log(`Access revoked for serial device from origin ${details.origin}`)\n  })\n})\n```\n```js\n// Renderer Process\nconst portConnect = async () => {\n  // Request a port.\n  const port = await navigator.serial.requestPort()\n// Wait for the serial port to open.\n  await port.open({ baudRate: 9600 })\n// ...later, revoke access to the serial port.\n  await port.forget()\n}\n```\nEvent: 'select-usb-device'\nReturns:\n\n`event` Event\n`details` Object\n`deviceList` USBDevice[]\n`frame` WebFrameMain\n`callback` Function\n`deviceId` string (optional)\n\nEmitted when a USB device needs to be selected when a call to\n`navigator.usb.requestDevice` is made. `callback` should be called with\n`deviceId` to be selected; passing no arguments to `callback` will\ncancel the request.  Additionally, permissioning on `navigator.usb` can\nbe further managed by using ses.setPermissionCheckHandler(handler)\nand ses.setDevicePermissionHandler(handler).\n```javascript\nconst { app, BrowserWindow } = require('electron')\nlet win = null\napp.whenReady().then(() => {\n  win = new BrowserWindow()\nwin.webContents.session.setPermissionCheckHandler((webContents, permission, requestingOrigin, details) => {\n    if (permission === 'usb') {\n      // Add logic here to determine if permission should be given to allow USB selection\n      return true\n    }\n    return false\n  })\n// Optionally, retrieve previously persisted devices from a persistent store (fetchGrantedDevices needs to be implemented by developer to fetch persisted permissions)\n  const grantedDevices = fetchGrantedDevices()\nwin.webContents.session.setDevicePermissionHandler((details) => {\n    if (new URL(details.origin).hostname === 'some-host' && details.deviceType === 'usb') {\n      if (details.device.vendorId === 123 && details.device.productId === 345) {\n        // Always allow this type of device (this allows skipping the call to `navigator.usb.requestDevice` first)\n        return true\n      }\n\n\n```  // Search through the list of devices that have previously been granted permission\n  return grantedDevices.some((grantedDevice) => {\n    return grantedDevice.vendorId === details.device.vendorId &&\n          grantedDevice.productId === details.device.productId &&\n          grantedDevice.serialNumber && grantedDevice.serialNumber === details.device.serialNumber\n  })\n}\nreturn false\n```\n\n\n})\nwin.webContents.session.on('select-usb-device', (event, details, callback) => {\n    event.preventDefault()\n    const selectedDevice = details.deviceList.find((device) => {\n      return device.vendorId === '9025' && device.productId === '67'\n    })\n    if (selectedDevice) {\n      // Optionally, add this to the persisted devices (updateGrantedDevices needs to be implemented by developer to persist permissions)\n      grantedDevices.push(selectedDevice)\n      updateGrantedDevices(grantedDevices)\n    }\n    callback(selectedDevice?.deviceId)\n  })\n})\n```\nEvent: 'usb-device-added'\nReturns:\n\n`event` Event\n`details` Object\n`device` USBDevice\n`frame` WebFrameMain\n\nEmitted after `navigator.usb.requestDevice` has been called and\n`select-usb-device` has fired if a new device becomes available before\nthe callback from `select-usb-device` is called.  This event is intended for\nuse when using a UI to ask users to pick a device so that the UI can be updated\nwith the newly added device.\nEvent: 'usb-device-removed'\nReturns:\n\n`event` Event\n`details` Object\n`device` USBDevice\n`frame` WebFrameMain\n\nEmitted after `navigator.usb.requestDevice` has been called and\n`select-usb-device` has fired if a device has been removed before the callback\nfrom `select-usb-device` is called.  This event is intended for use when using\na UI to ask users to pick a device so that the UI can be updated to remove the\nspecified device.\nEvent: 'usb-device-revoked'\nReturns:\n\n`event` Event\n`details` Object\n`device` USBDevice[]\n`origin` string (optional) - The origin that the device has been revoked from.\n\nEmitted after `USBDevice.forget()` has been called.  This event can be used\nto help maintain persistent storage of permissions when\n`setDevicePermissionHandler` is used.\nInstance Methods\nThe following methods are available on instances of `Session`:\n`ses.getCacheSize()`\nReturns `Promise<Integer>` - the session's current cache size, in bytes.\n`ses.clearCache()`\nReturns `Promise<void>` - resolves when the cache clear operation is complete.\nClears the session\u2019s HTTP cache.\n`ses.clearStorageData([options])`\n\n`options` Object (optional)\n`origin` string (optional) - Should follow `window.location.origin`\u2019s representation\n    `scheme://host:port`.\n`storages` string[] (optional) - The types of storages to clear, can contain:\n    `cookies`, `filesystem`, `indexdb`, `localstorage`,\n    `shadercache`, `websql`, `serviceworkers`, `cachestorage`. If not\n    specified, clear all storage types.\n`quotas` string[] (optional) - The types of quotas to clear, can contain:\n    `temporary`, `syncable`. If not specified, clear all quotas.\n\nReturns `Promise<void>` - resolves when the storage data has been cleared.\n`ses.flushStorageData()`\nWrites any unwritten DOMStorage data to disk.\n`ses.setProxy(config)`\n\n`config` Object\n`mode` string (optional) - The proxy mode. Should be one of `direct`,\n    `auto_detect`, `pac_script`, `fixed_servers` or `system`. If it's\n    unspecified, it will be automatically determined based on other specified\n    options.\n`direct`\n  In direct mode all connections are created directly, without any proxy involved.\n`auto_detect`\n  In auto_detect mode the proxy configuration is determined by a PAC script that can\n  be downloaded at http://wpad/wpad.dat.\n`pac_script`\n  In pac_script mode the proxy configuration is determined by a PAC script that is\n  retrieved from the URL specified in the `pacScript`. This is the default mode\n  if `pacScript` is specified.\n`fixed_servers`\n  In fixed_servers mode the proxy configuration is specified in `proxyRules`.\n  This is the default mode if `proxyRules` is specified.\n`system`\n  In system mode the proxy configuration is taken from the operating system.\n  Note that the system mode is different from setting no proxy configuration.\n  In the latter case, Electron falls back to the system settings\n  only if no command-line options influence the proxy configuration.\n\n\n`pacScript` string (optional) - The URL associated with the PAC file.\n`proxyRules` string (optional) - Rules indicating which proxies to use.\n`proxyBypassRules` string (optional) - Rules indicating which URLs should\n    bypass the proxy settings.\n\nReturns `Promise<void>` - Resolves when the proxy setting process is complete.\nSets the proxy settings.\nWhen `mode` is unspecified, `pacScript` and `proxyRules` are provided together, the `proxyRules`\noption is ignored and `pacScript` configuration is applied.\nYou may need `ses.closeAllConnections` to close currently in flight connections to prevent\npooled sockets using previous proxy from being reused by future requests.\nThe `proxyRules` has to follow the rules below:\n`sh\nproxyRules = schemeProxies[\";\"<schemeProxies>]\nschemeProxies = [<urlScheme>\"=\"]<proxyURIList>\nurlScheme = \"http\" | \"https\" | \"ftp\" | \"socks\"\nproxyURIList = <proxyURL>[\",\"<proxyURIList>]\nproxyURL = [<proxyScheme>\"://\"]<proxyHost>[\":\"<proxyPort>]`\nFor example:\n\n`http=foopy:80;ftp=foopy2` - Use HTTP proxy `foopy:80` for `http://` URLs, and\n  HTTP proxy `foopy2:80` for `ftp://` URLs.\n`foopy:80` - Use HTTP proxy `foopy:80` for all URLs.\n`foopy:80,bar,direct://` - Use HTTP proxy `foopy:80` for all URLs, failing\n  over to `bar` if `foopy:80` is unavailable, and after that using no proxy.\n`socks4://foopy` - Use SOCKS v4 proxy `foopy:1080` for all URLs.\n`http=foopy,socks5://bar.com` - Use HTTP proxy `foopy` for http URLs, and fail\n  over to the SOCKS5 proxy `bar.com` if `foopy` is unavailable.\n`http=foopy,direct://` - Use HTTP proxy `foopy` for http URLs, and use no\n  proxy if `foopy` is unavailable.\n`http=foopy;socks=foopy2` - Use HTTP proxy `foopy` for http URLs, and use\n  `socks4://foopy2` for all other URLs.\n\nThe `proxyBypassRules` is a comma separated list of rules described below:\n\n`[ URL_SCHEME \"://\" ] HOSTNAME_PATTERN [ \":\" <port> ]`\n\nMatch all hostnames that match the pattern HOSTNAME_PATTERN.\nExamples:\n     \"foobar.com\", \"foobar.com\", \".foobar.com\", \"foobar.com:99\",\n     \"https://x..y.com:99\"\n\n`\".\" HOSTNAME_SUFFIX_PATTERN [ \":\" PORT ]`\n\nMatch a particular domain suffix.\nExamples:\n     \".google.com\", \".com\", \"http://.google.com\"\n\n`[ SCHEME \"://\" ] IP_LITERAL [ \":\" PORT ]`\n\nMatch URLs which are IP address literals.\nExamples:\n     \"127.0.1\", \"[0:0::1]\", \"[::1]\", \"http://[::1]:99\"\n\n`IP_LITERAL \"/\" PREFIX_LENGTH_IN_BITS`\n\nMatch any URL that is to an IP literal that falls between the\n   given range. IP range is specified using CIDR notation.\nExamples:\n     \"192.168.1.1/16\", \"fefe:13::abc/33\".\n\n`<local>`\n\nMatch local addresses. The meaning of `<local>` is whether the\n   host matches one of: \"127.0.0.1\", \"::1\", \"localhost\".\n`ses.resolveProxy(url)`\n\n`url` URL\n\nReturns `Promise<string>` - Resolves with the proxy information for `url`.\n`ses.forceReloadProxyConfig()`\nReturns `Promise<void>` - Resolves when the all internal states of proxy service is reset and the latest proxy configuration is reapplied if it's already available. The pac script will be fetched from `pacScript` again if the proxy mode is `pac_script`.\n`ses.setDownloadPath(path)`\n\n`path` string - The download location.\n\nSets download saving directory. By default, the download directory will be the\n`Downloads` under the respective app folder.\n`ses.enableNetworkEmulation(options)`\n\n`options` Object\n`offline` boolean (optional) - Whether to emulate network outage. Defaults\n    to false.\n`latency` Double (optional) - RTT in ms. Defaults to 0 which will disable\n    latency throttling.\n`downloadThroughput` Double (optional) - Download rate in Bps. Defaults to 0\n    which will disable download throttling.\n`uploadThroughput` Double (optional) - Upload rate in Bps. Defaults to 0\n    which will disable upload throttling.\n\nEmulates network with the given configuration for the `session`.\n```javascript\n// To emulate a GPRS connection with 50kbps throughput and 500 ms latency.\nwindow.webContents.session.enableNetworkEmulation({\n  latency: 500,\n  downloadThroughput: 6400,\n  uploadThroughput: 6400\n})\n// To emulate a network outage.\nwindow.webContents.session.enableNetworkEmulation({ offline: true })\n```\n`ses.preconnect(options)`\n\n`options` Object\n`url` string - URL for preconnect. Only the origin is relevant for opening the socket.\n`numSockets` number (optional) - number of sockets to preconnect. Must be between 1 and 6. Defaults to 1.\n\nPreconnects the given number of sockets to an origin.\n`ses.closeAllConnections()`\nReturns `Promise<void>` - Resolves when all connections are closed.\nNote: It will terminate / fail all requests currently in flight.\n`ses.fetch(input[, init])`\n\n`input` string | GlobalRequest\n`init` RequestInit (optional)\n\nReturns `Promise<GlobalResponse>` - see Response.\nSends a request, similarly to how `fetch()` works in the renderer, using\nChrome's network stack. This differs from Node's `fetch()`, which uses\nNode.js's HTTP stack.\nExample:\n`js\nasync function example () {\n  const response = await net.fetch('https://my.app')\n  if (response.ok) {\n    const body = await response.json()\n    // ... use the result.\n  }\n}`\nSee also net.fetch(), a convenience method which\nissues requests from the default session.\nSee the MDN documentation for\nfetch() for more\ndetails.\nLimitations:\n\n`net.fetch()` does not support the `data:` or `blob:` schemes.\nThe value of the `integrity` option is ignored.\nThe `.type` and `.url` values of the returned `Response` object are\n  incorrect.\n\n`ses.disableNetworkEmulation()`\nDisables any network emulation already active for the `session`. Resets to\nthe original network configuration.\n`ses.setCertificateVerifyProc(proc)`\n\n`proc` Function | null\n`request` Object\n`hostname` string\n`certificate` Certificate\n`validatedCertificate` Certificate\n`isIssuedByKnownRoot` boolean - `true` if Chromium recognises the root CA as a standard root. If it isn't then it's probably the case that this certificate was generated by a MITM proxy whose root has been installed locally (for example, by a corporate proxy). This should not be trusted if the `verificationResult` is not `OK`.\n`verificationResult` string - `OK` if the certificate is trusted, otherwise an error like `CERT_REVOKED`.\n`errorCode` Integer - Error code.\n\n\n`callback` Function\n`verificationResult` Integer - Value can be one of certificate error codes\nfrom here.\nApart from the certificate error codes, the following special codes can be used.\n`0` - Indicates success and disables Certificate Transparency verification.\n`-2` - Indicates failure.\n`-3` - Uses the verification result from chromium.\n\n\n\nSets the certificate verify proc for `session`, the `proc` will be called with\n`proc(request, callback)` whenever a server certificate\nverification is requested. Calling `callback(0)` accepts the certificate,\ncalling `callback(-2)` rejects it.\nCalling `setCertificateVerifyProc(null)` will revert back to default certificate\nverify proc.\n```javascript\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\nwin.webContents.session.setCertificateVerifyProc((request, callback) => {\n  const { hostname } = request\n  if (hostname === 'github.com') {\n    callback(0)\n  } else {\n    callback(-2)\n  }\n})\n```\n\nNOTE: The result of this procedure is cached by the network service.\n\n`ses.setPermissionRequestHandler(handler)`\n\n`handler` Function | null\n`webContents` WebContents - WebContents requesting the permission.  Please note that if the request comes from a subframe you should use `requestingUrl` to check the request origin.\n`permission` string - The type of requested permission.\n`clipboard-read` - Request access to read from the clipboard.\n`clipboard-sanitized-write` - Request access to write to the clipboard.\n`media` -  Request access to media devices such as camera, microphone and speakers.\n`display-capture` - Request access to capture the screen.\n`mediaKeySystem` - Request access to DRM protected content.\n`geolocation` - Request access to user's current location.\n`notifications` - Request notification creation and the ability to display them in the user's system tray.\n`midi` - Request MIDI access in the `webmidi` API.\n`midiSysex` - Request the use of system exclusive messages in the `webmidi` API.\n`pointerLock` - Request to directly interpret mouse movements as an input method. Click here to know more. These requests always appear to originate from the main frame.\n`fullscreen` - Request for the app to enter fullscreen mode.\n`openExternal` - Request to open links in external applications.\n`window-management` - Request access to enumerate screens using the getScreenDetails API.\n`unknown` - An unrecognized permission request\n\n\n`callback` Function\n`permissionGranted` boolean - Allow or deny the permission.\n\n\n`details` Object - Some properties are only available on certain permission types.\n`externalURL` string (optional) - The url of the `openExternal` request.\n`securityOrigin` string (optional) - The security origin of the `media` request.\n`mediaTypes` string[] (optional) - The types of media access being requested, elements can be `video`\n  or `audio`\n`requestingUrl` string - The last URL the requesting frame loaded\n`isMainFrame` boolean - Whether the frame making the request is the main frame\n\n\n\nSets the handler which can be used to respond to permission requests for the `session`.\nCalling `callback(true)` will allow the permission and `callback(false)` will reject it.\nTo clear the handler, call `setPermissionRequestHandler(null)`.  Please note that\nyou must also implement `setPermissionCheckHandler` to get complete permission handling.\nMost web APIs do a permission check and then make a permission request if the check is denied.\n```javascript\nconst { session } = require('electron')\nsession.fromPartition('some-partition').setPermissionRequestHandler((webContents, permission, callback) => {\n  if (webContents.getURL() === 'some-host' && permission === 'notifications') {\n    return callback(false) // denied.\n  }\ncallback(true)\n})\n```\n`ses.setPermissionCheckHandler(handler)`\n\n`handler` Function\\ | null\n`webContents` (WebContents | null) - WebContents checking the permission.  Please note that if the request comes from a subframe you should use `requestingUrl` to check the request origin.  All cross origin sub frames making permission checks will pass a `null` webContents to this handler, while certain other permission checks such as `notifications` checks will always pass `null`.  You should use `embeddingOrigin` and `requestingOrigin` to determine what origin the owning frame and the requesting frame are on respectively.\n`permission` string - Type of permission check.  Valid values are `midiSysex`, `notifications`, `geolocation`, `media`,`mediaKeySystem`,`midi`, `pointerLock`, `fullscreen`, `openExternal`, `hid`, `serial`, or `usb`.\n`requestingOrigin` string - The origin URL of the permission check\n`details` Object - Some properties are only available on certain permission types.\n`embeddingOrigin` string (optional) - The origin of the frame embedding the frame that made the permission check.  Only set for cross-origin sub frames making permission checks.\n`securityOrigin` string (optional) - The security origin of the `media` check.\n`mediaType` string (optional) - The type of media access being requested, can be `video`,\n  `audio` or `unknown`\n`requestingUrl` string (optional) - The last URL the requesting frame loaded.  This is not provided for cross-origin sub frames making permission checks.\n`isMainFrame` boolean - Whether the frame making the request is the main frame\n\n\n\nSets the handler which can be used to respond to permission checks for the `session`.\nReturning `true` will allow the permission and `false` will reject it.  Please note that\nyou must also implement `setPermissionRequestHandler` to get complete permission handling.\nMost web APIs do a permission check and then make a permission request if the check is denied.\nTo clear the handler, call `setPermissionCheckHandler(null)`.\n```javascript\nconst { session } = require('electron')\nconst url = require('url')\nsession.fromPartition('some-partition').setPermissionCheckHandler((webContents, permission, requestingOrigin) => {\n  if (new URL(requestingOrigin).hostname === 'some-host' && permission === 'notifications') {\n    return true // granted\n  }\nreturn false // denied\n})\n```\n`ses.setDisplayMediaRequestHandler(handler)`\n\n`handler` Function | null\n`request` Object\n`frame` WebFrameMain - Frame that is requesting access to media.\n`securityOrigin` String - Origin of the page making the request.\n`videoRequested` Boolean - true if the web content requested a video stream.\n`audioRequested` Boolean - true if the web content requested an audio stream.\n`userGesture` Boolean - Whether a user gesture was active when this request was triggered.\n\n\n`callback` Function\n`streams` Object\n`video` Object | WebFrameMain (optional)\n`id` String - The id of the stream being granted. This will usually\n  come from a DesktopCapturerSource\n  object.\n`name` String - The name of the stream being granted. This will\n  usually come from a DesktopCapturerSource\n  object.\n\n\n`audio` String | WebFrameMain (optional) - If\n    a string is specified, can be `loopback` or `loopbackWithMute`.\n    Specifying a loopback device will capture system audio, and is\n    currently only supported on Windows. If a WebFrameMain is specified,\n    will capture audio from that frame.\n\n\n\nThis handler will be called when web content requests access to display media\nvia the `navigator.mediaDevices.getDisplayMedia` API. Use the\ndesktopCapturer API to choose which stream(s) to grant\naccess to.\n```javascript\nconst { session, desktopCapturer } = require('electron')\nsession.defaultSession.setDisplayMediaRequestHandler((request, callback) => {\n  desktopCapturer.getSources({ types: ['screen'] }).then((sources) => {\n    // Grant access to the first screen found.\n    callback({ video: sources[0] })\n  })\n})\n```\nPassing a WebFrameMain object as a video or audio stream\nwill capture the video or audio stream from that frame.\n```javascript\nconst { session } = require('electron')\nsession.defaultSession.setDisplayMediaRequestHandler((request, callback) => {\n  // Allow the tab to capture itself.\n  callback({ video: request.frame })\n})\n```\nPassing `null` instead of a function resets the handler to its default state.\n`ses.setDevicePermissionHandler(handler)`\n\n`handler` Function\\ | null\n`details` Object\n`deviceType` string - The type of device that permission is being requested on, can be `hid`, `serial`, or `usb`.\n`origin` string - The origin URL of the device permission check.\n`device` HIDDevice | SerialPort- the device that permission is being requested for.\n\n\n\nSets the handler which can be used to respond to device permission checks for the `session`.\nReturning `true` will allow the device to be permitted and `false` will reject it.\nTo clear the handler, call `setDevicePermissionHandler(null)`.\nThis handler can be used to provide default permissioning to devices without first calling for permission\nto devices (eg via `navigator.hid.requestDevice`).  If this handler is not defined, the default device\npermissions as granted through device selection (eg via `navigator.hid.requestDevice`) will be used.\nAdditionally, the default behavior of Electron is to store granted device permision in memory.\nIf longer term storage is needed, a developer can store granted device\npermissions (eg when handling the `select-hid-device` event) and then read from that storage with `setDevicePermissionHandler`.\n```javascript\nconst { app, BrowserWindow } = require('electron')\nlet win = null\napp.whenReady().then(() => {\n  win = new BrowserWindow()\nwin.webContents.session.setPermissionCheckHandler((webContents, permission, requestingOrigin, details) => {\n    if (permission === 'hid') {\n      // Add logic here to determine if permission should be given to allow HID selection\n      return true\n    } else if (permission === 'serial') {\n      // Add logic here to determine if permission should be given to allow serial port selection\n    } else if (permission === 'usb') {\n      // Add logic here to determine if permission should be given to allow USB device selection\n    }\n    return false\n  })\n// Optionally, retrieve previously persisted devices from a persistent store\n  const grantedDevices = fetchGrantedDevices()\nwin.webContents.session.setDevicePermissionHandler((details) => {\n    if (new URL(details.origin).hostname === 'some-host' && details.deviceType === 'hid') {\n      if (details.device.vendorId === 123 && details.device.productId === 345) {\n        // Always allow this type of device (this allows skipping the call to `navigator.hid.requestDevice` first)\n        return true\n      }\n\n\n```  // Search through the list of devices that have previously been granted permission\n  return grantedDevices.some((grantedDevice) => {\n    return grantedDevice.vendorId === details.device.vendorId &&\n          grantedDevice.productId === details.device.productId &&\n          grantedDevice.serialNumber && grantedDevice.serialNumber === details.device.serialNumber\n  })\n} else if (details.deviceType === 'serial') {\n  if (details.device.vendorId === 123 && details.device.productId === 345) {\n    // Always allow this type of device (this allows skipping the call to `navigator.hid.requestDevice` first)\n    return true\n  }\n}\nreturn false\n```\n\n\n})\nwin.webContents.session.on('select-hid-device', (event, details, callback) => {\n    event.preventDefault()\n    const selectedDevice = details.deviceList.find((device) => {\n      return device.vendorId === '9025' && device.productId === '67'\n    })\n    callback(selectedPort?.deviceId)\n  })\n})\n```\n`ses.setBluetoothPairingHandler(handler)` Windows Linux\n\n`handler` Function | null\n`details` Object\n`deviceId` string\n`pairingKind` string - The type of pairing prompt being requested.\n  One of the following values:\n`confirm`\n    This prompt is requesting confirmation that the Bluetooth device should\n    be paired.\n`confirmPin`\n    This prompt is requesting confirmation that the provided PIN matches the\n    pin displayed on the device.\n`providePin`\n    This prompt is requesting that a pin be provided for the device.\n`frame` WebFrameMain\n`pin` string (optional) - The pin value to verify if `pairingKind` is `confirmPin`.\n\n\n`callback` Function\n`response` Object\n`confirmed` boolean - `false` should be passed in if the dialog is canceled.\n    If the `pairingKind` is `confirm` or `confirmPin`, this value should indicate\n    if the pairing is confirmed.  If the `pairingKind` is `providePin` the value\n    should be `true` when a value is provided.\n`pin` string | null (optional) - When the `pairingKind` is `providePin`\n    this value should be the required pin for the Bluetooth device.\n\n\n\nSets a handler to respond to Bluetooth pairing requests. This handler\nallows developers to handle devices that require additional validation\nbefore pairing.  When a handler is not defined, any pairing on Linux or Windows\nthat requires additional validation will be automatically cancelled.\nmacOS does not require a handler because macOS handles the pairing\nautomatically.  To clear the handler, call `setBluetoothPairingHandler(null)`.\n```javascript\nconst { app, BrowserWindow, ipcMain, session } = require('electron')\nlet bluetoothPinCallback = null\nfunction createWindow () {\n  const mainWindow = new BrowserWindow({\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n}\n// Listen for an IPC message from the renderer to get the response for the Bluetooth pairing.\nipcMain.on('bluetooth-pairing-response', (event, response) => {\n  bluetoothPinCallback(response)\n})\nmainWindow.webContents.session.setBluetoothPairingHandler((details, callback) => {\n  bluetoothPinCallback = callback\n  // Send a IPC message to the renderer to prompt the user to confirm the pairing.\n  // Note that this will require logic in the renderer to handle this message and\n  // display a prompt to the user.\n  mainWindow.webContents.send('bluetooth-pairing-request', details)\n})\napp.whenReady().then(() => {\n  createWindow()\n})\n```\n`ses.clearHostResolverCache()`\nReturns `Promise<void>` - Resolves when the operation is complete.\nClears the host resolver cache.\n`ses.allowNTLMCredentialsForDomains(domains)`\n\n`domains` string - A comma-separated list of servers for which\n  integrated authentication is enabled.\n\nDynamically sets whether to always send credentials for HTTP NTLM or Negotiate\nauthentication.\n```javascript\nconst { session } = require('electron')\n// consider any url ending with`example.com`,`foobar.com`,`baz`\n// for integrated authentication.\nsession.defaultSession.allowNTLMCredentialsForDomains('example.com, foobar.com, *baz')\n// consider all urls for integrated authentication.\nsession.defaultSession.allowNTLMCredentialsForDomains('*')\n```\n`ses.setUserAgent(userAgent[, acceptLanguages])`\n\n`userAgent` string\n`acceptLanguages` string (optional)\n\nOverrides the `userAgent` and `acceptLanguages` for this session.\nThe `acceptLanguages` must a comma separated ordered list of language codes, for\nexample `\"en-US,fr,de,ko,zh-CN,ja\"`.\nThis doesn't affect existing `WebContents`, and each `WebContents` can use\n`webContents.setUserAgent` to override the session-wide user agent.\n`ses.isPersistent()`\nReturns `boolean` - Whether or not this session is a persistent one. The default\n`webContents` session of a `BrowserWindow` is persistent. When creating a session\nfrom a partition, session prefixed with `persist:` will be persistent, while others\nwill be temporary.\n`ses.getUserAgent()`\nReturns `string` - The user agent for this session.\n`ses.setSSLConfig(config)`\n\n`config` Object\n`minVersion` string (optional) - Can be `tls1`, `tls1.1`, `tls1.2` or `tls1.3`. The\n    minimum SSL version to allow when connecting to remote servers. Defaults to\n    `tls1`.\n`maxVersion` string (optional) - Can be `tls1.2` or `tls1.3`. The maximum SSL version\n    to allow when connecting to remote servers. Defaults to `tls1.3`.\n`disabledCipherSuites` Integer[] (optional) - List of cipher suites which\n    should be explicitly prevented from being used in addition to those\n    disabled by the net built-in policy.\n    Supported literal forms: 0xAABB, where AA is `cipher_suite[0]` and BB is\n    `cipher_suite[1]`, as defined in RFC 2246, Section 7.4.1.2. Unrecognized but\n    parsable cipher suites in this form will not return an error.\n    Ex: To disable TLS_RSA_WITH_RC4_128_MD5, specify 0x0004, while to\n    disable TLS_ECDH_ECDSA_WITH_RC4_128_SHA, specify 0xC002.\n    Note that TLSv1.3 ciphers cannot be disabled using this mechanism.\n\nSets the SSL configuration for the session. All subsequent network requests\nwill use the new configuration. Existing network connections (such as WebSocket\nconnections) will not be terminated, but old sockets in the pool will not be\nreused for new connections.\n`ses.getBlobData(identifier)`\n\n`identifier` string - Valid UUID.\n\nReturns `Promise<Buffer>` - resolves with blob data.\n`ses.downloadURL(url)`\n\n`url` string\n\nInitiates a download of the resource at `url`.\nThe API will generate a DownloadItem that can be accessed\nwith the will-download event.\nNote: This does not perform any security checks that relate to a page's origin,\nunlike webContents.downloadURL.\n`ses.createInterruptedDownload(options)`\n\n`options` Object\n`path` string - Absolute path of the download.\n`urlChain` string[] - Complete URL chain for the download.\n`mimeType` string (optional)\n`offset` Integer - Start range for the download.\n`length` Integer - Total length of the download.\n`lastModified` string (optional) - Last-Modified header value.\n`eTag` string (optional) - ETag header value.\n`startTime` Double (optional) - Time when download was started in\n    number of seconds since UNIX epoch.\n\nAllows resuming `cancelled` or `interrupted` downloads from previous `Session`.\nThe API will generate a DownloadItem that can be accessed with the will-download\nevent. The DownloadItem will not have any `WebContents` associated with it and\nthe initial state will be `interrupted`. The download will start only when the\n`resume` API is called on the DownloadItem.\n`ses.clearAuthCache()`\nReturns `Promise<void>` - resolves when the session\u2019s HTTP authentication cache has been cleared.\n`ses.setPreloads(preloads)`\n\n`preloads` string[] - An array of absolute path to preload scripts\n\nAdds scripts that will be executed on ALL web contents that are associated with\nthis session just before normal `preload` scripts run.\n`ses.getPreloads()`\nReturns `string[]` an array of paths to preload scripts that have been\nregistered.\n`ses.setCodeCachePath(path)`\n\n`path` String - Absolute path to store the v8 generated JS code cache from the renderer.\n\nSets the directory to store the generated JS code cache for this session. The directory is not required to be created by the user before this call, the runtime will create if it does not exist otherwise will use the existing directory. If directory cannot be created, then code cache will not be used and all operations related to code cache will fail silently inside the runtime. By default, the directory will be `Code Cache` under the\nrespective user data folder.\n`ses.clearCodeCaches(options)`\n\n`options` Object\n`urls` String[] (optional) - An array of url corresponding to the resource whose generated code cache needs to be removed. If the list is empty then all entries in the cache directory will be removed.\n\nReturns `Promise<void>` - resolves when the code cache clear operation is complete.\n`ses.setSpellCheckerEnabled(enable)`\n\n`enable` boolean\n\nSets whether to enable the builtin spell checker.\n`ses.isSpellCheckerEnabled()`\nReturns `boolean` - Whether the builtin spell checker is enabled.\n`ses.setSpellCheckerLanguages(languages)`\n\n`languages` string[] - An array of language codes to enable the spellchecker for.\n\nThe built in spellchecker does not automatically detect what language a user is typing in.  In order for the\nspell checker to correctly check their words you must call this API with an array of language codes.  You can\nget the list of supported language codes with the `ses.availableSpellCheckerLanguages` property.\nNote: On macOS the OS spellchecker is used and will detect your language automatically.  This API is a no-op on macOS.\n`ses.getSpellCheckerLanguages()`\nReturns `string[]` - An array of language codes the spellchecker is enabled for.  If this list is empty the spellchecker\nwill fallback to using `en-US`.  By default on launch if this setting is an empty list Electron will try to populate this\nsetting with the current OS locale.  This setting is persisted across restarts.\nNote: On macOS the OS spellchecker is used and has its own list of languages. On macOS, this API will return whichever languages have been configured by the OS.\n`ses.setSpellCheckerDictionaryDownloadURL(url)`\n\n`url` string - A base URL for Electron to download hunspell dictionaries from.\n\nBy default Electron will download hunspell dictionaries from the Chromium CDN.  If you want to override this\nbehavior you can use this API to point the dictionary downloader at your own hosted version of the hunspell\ndictionaries.  We publish a `hunspell_dictionaries.zip` file with each release which contains the files you need\nto host here.\nThe file server must be case insensitive. If you cannot do this, you must upload each file twice: once with\nthe case it has in the ZIP file and once with the filename as all lowercase.\nIf the files present in `hunspell_dictionaries.zip` are available at `https://example.com/dictionaries/language-code.bdic`\nthen you should call this api with `ses.setSpellCheckerDictionaryDownloadURL('https://example.com/dictionaries/')`.  Please\nnote the trailing slash.  The URL to the dictionaries is formed as `${url}${filename}`.\nNote: On macOS the OS spellchecker is used and therefore we do not download any dictionary files.  This API is a no-op on macOS.\n`ses.listWordsInSpellCheckerDictionary()`\nReturns `Promise<string[]>` - An array of all words in app's custom dictionary.\nResolves when the full dictionary is loaded from disk.\n`ses.addWordToSpellCheckerDictionary(word)`\n\n`word` string - The word you want to add to the dictionary\n\nReturns `boolean` - Whether the word was successfully written to the custom dictionary. This API\nwill not work on non-persistent (in-memory) sessions.\nNote: On macOS and Windows 10 this word will be written to the OS custom dictionary as well\n`ses.removeWordFromSpellCheckerDictionary(word)`\n\n`word` string - The word you want to remove from the dictionary\n\nReturns `boolean` - Whether the word was successfully removed from the custom dictionary. This API\nwill not work on non-persistent (in-memory) sessions.\nNote: On macOS and Windows 10 this word will be removed from the OS custom dictionary as well\n`ses.loadExtension(path[, options])`\n\n`path` string - Path to a directory containing an unpacked Chrome extension\n`options` Object (optional)\n`allowFileAccess` boolean - Whether to allow the extension to read local files over `file://`\n    protocol and inject content scripts into `file://` pages. This is required e.g. for loading\n    devtools extensions on `file://` URLs. Defaults to false.\n\nReturns `Promise<Extension>` - resolves when the extension is loaded.\nThis method will raise an exception if the extension could not be loaded. If\nthere are warnings when installing the extension (e.g. if the extension\nrequests an API that Electron does not support) then they will be logged to the\nconsole.\nNote that Electron does not support the full range of Chrome extensions APIs.\nSee Supported Extensions APIs for\nmore details on what is supported.\nNote that in previous versions of Electron, extensions that were loaded would\nbe remembered for future runs of the application. This is no longer the case:\n`loadExtension` must be called on every boot of your app if you want the\nextension to be loaded.\n```js\nconst { app, session } = require('electron')\nconst path = require('path')\napp.on('ready', async () => {\n  await session.defaultSession.loadExtension(\n    path.join(__dirname, 'react-devtools'),\n    // allowFileAccess is required to load the devtools extension on file:// URLs.\n    { allowFileAccess: true }\n  )\n  // Note that in order to use the React DevTools extension, you'll need to\n  // download and unzip a copy of the extension.\n})\n```\nThis API does not support loading packed (.crx) extensions.\nNote: This API cannot be called before the `ready` event of the `app` module\nis emitted.\nNote: Loading extensions into in-memory (non-persistent) sessions is not\nsupported and will throw an error.\n`ses.removeExtension(extensionId)`\n\n`extensionId` string - ID of extension to remove\n\nUnloads an extension.\nNote: This API cannot be called before the `ready` event of the `app` module\nis emitted.\n`ses.getExtension(extensionId)`\n\n`extensionId` string - ID of extension to query\n\nReturns `Extension` | `null` - The loaded extension with the given ID.\nNote: This API cannot be called before the `ready` event of the `app` module\nis emitted.\n`ses.getAllExtensions()`\nReturns `Extension[]` - A list of all loaded extensions.\nNote: This API cannot be called before the `ready` event of the `app` module\nis emitted.\n`ses.getStoragePath()`\nReturns `string | null` - The absolute file system path where data for this\nsession is persisted on disk.  For in memory sessions this returns `null`.\nInstance Properties\nThe following properties are available on instances of `Session`:\n`ses.availableSpellCheckerLanguages` Readonly\nA `string[]` array which consists of all the known available spell checker languages.  Providing a language\ncode to the `setSpellCheckerLanguages` API that isn't in this array will result in an error.\n`ses.spellCheckerEnabled`\nA `boolean` indicating whether builtin spell checker is enabled.\n`ses.storagePath` Readonly\nA `string | null` indicating the absolute file system path where data for this\nsession is persisted on disk.  For in memory sessions this returns `null`.\n`ses.cookies` Readonly\nA Cookies object for this session.\n`ses.serviceWorkers` Readonly\nA ServiceWorkers object for this session.\n`ses.webRequest` Readonly\nA WebRequest object for this session.\n`ses.protocol` Readonly\nA Protocol object for this session.\n```javascript\nconst { app, session } = require('electron')\nconst path = require('path')\napp.whenReady().then(() => {\n  const protocol = session.fromPartition('some-partition').protocol\n  if (!protocol.registerFileProtocol('atom', (request, callback) => {\n    const url = request.url.substr(7)\n    callback({ path: path.normalize(`${__dirname}/${url}`) })\n  })) {\n    console.error('Failed to register protocol')\n  }\n})\n```\n`ses.netLog` Readonly\nA NetLog object for this session.\n```javascript\nconst { app, session } = require('electron')\napp.whenReady().then(async () => {\n  const netLog = session.fromPartition('some-partition').netLog\n  netLog.startLogging('/path/to/net-log')\n  // After some network events\n  const path = await netLog.stopLogging()\n  console.log('Net-logs written to', path)\n})",
    "tag": "electron"
  },
  {
    "title": "Class: TouchBarOtherItemsProxy",
    "source": "https://github.com/electron/electron/tree/main/docs/api/touch-bar-other-items-proxy.md",
    "content": "Class: TouchBarOtherItemsProxy\n\nInstantiates a special \"other items proxy\", which nests TouchBar elements inherited\nfrom Chromium at the space indicated by the proxy. By default, this proxy is added\nto each TouchBar at the end of the input. For more information, see the AppKit docs on\nNSTouchBarItemIdentifierOtherItemsProxy\nNote: Only one instance of this class can be added per TouchBar.\n\nProcess: Main\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.",
    "tag": "electron"
  },
  {
    "title": "netLog",
    "source": "https://github.com/electron/electron/tree/main/docs/api/net-log.md",
    "content": "netLog\n\nLogging network events for a session.\n\nProcess: Main\n```javascript\nconst { netLog } = require('electron')\napp.whenReady().then(async () => {\n  await netLog.startLogging('/path/to/net-log')\n  // After some network events\n  const path = await netLog.stopLogging()\n  console.log('Net-logs written to', path)\n})\n```\nSee --log-net-log to log network events throughout the app's lifecycle.\nNote: All methods unless specified can only be used after the `ready` event\nof the `app` module gets emitted.\nMethods\n`netLog.startLogging(path[, options])`\n\n`path` string - File path to record network logs.\n`options` Object (optional)\n`captureMode` string (optional) - What kinds of data should be captured. By\n    default, only metadata about requests will be captured. Setting this to\n    `includeSensitive` will include cookies and authentication data. Setting\n    it to `everything` will include all bytes transferred on sockets. Can be\n    `default`, `includeSensitive` or `everything`.\n`maxFileSize` number (optional) - When the log grows beyond this size,\n    logging will automatically stop. Defaults to unlimited.\n\nReturns `Promise<void>` - resolves when the net log has begun recording.\nStarts recording network events to `path`.\n`netLog.stopLogging()`\nReturns `Promise<void>` - resolves when the net log has been flushed to disk.\nStops recording network events. If not called, net logging will automatically end when app quits.\nProperties\n`netLog.currentlyLogging` Readonly",
    "tag": "electron"
  },
  {
    "title": "BrowserWindow",
    "source": "https://github.com/electron/electron/tree/main/docs/api/browser-window.md",
    "content": "BrowserWindow\n\nCreate and control browser windows.\n\nProcess: Main\nThis module cannot be used until the `ready` event of the `app`\nmodule is emitted.\n```javascript\n// In the main process.\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({ width: 800, height: 600 })\n// Load a remote URL\nwin.loadURL('https://github.com')\n// Or load a local HTML file\nwin.loadFile('index.html')\n```\nWindow customization\nThe `BrowserWindow` class exposes various ways to modify the look and behavior of\nyour app's windows. For more details, see the Window Customization\ntutorial.\nShowing the window gracefully\nWhen loading a page in the window directly, users may see the page load incrementally,\nwhich is not a good experience for a native app. To make the window display\nwithout a visual flash, there are two solutions for different situations.\nUsing the `ready-to-show` event\nWhile loading the page, the `ready-to-show` event will be emitted when the renderer\nprocess has rendered the page for the first time if the window has not been shown yet. Showing\nthe window after this event will have no visual flash:\n`javascript\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({ show: false })\nwin.once('ready-to-show', () => {\n  win.show()\n})`\nThis event is usually emitted after the `did-finish-load` event, but for\npages with many remote resources, it may be emitted before the `did-finish-load`\nevent.\nPlease note that using this event implies that the renderer will be considered \"visible\" and\npaint even though `show` is false.  This event will never fire if you use `paintWhenInitiallyHidden: false`\nSetting the `backgroundColor` property\nFor a complex app, the `ready-to-show` event could be emitted too late, making\nthe app feel slow. In this case, it is recommended to show the window\nimmediately, and use a `backgroundColor` close to your app's background:\n```javascript\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({ backgroundColor: '#2e2c29' })\nwin.loadURL('https://github.com')\n```\nNote that even for apps that use `ready-to-show` event, it is still recommended\nto set `backgroundColor` to make the app feel more native.\nSome examples of valid `backgroundColor` values include:\n`js\nconst win = new BrowserWindow()\nwin.setBackgroundColor('hsl(230, 100%, 50%)')\nwin.setBackgroundColor('rgb(255, 145, 145)')\nwin.setBackgroundColor('#ff00a3')\nwin.setBackgroundColor('blueviolet')`\nFor more information about these color types see valid options in win.setBackgroundColor.\nParent and child windows\nBy using `parent` option, you can create child windows:\n```javascript\nconst { BrowserWindow } = require('electron')\nconst top = new BrowserWindow()\nconst child = new BrowserWindow({ parent: top })\nchild.show()\ntop.show()\n```\nThe `child` window will always show on top of the `top` window.\nModal windows\nA modal window is a child window that disables parent window, to create a modal\nwindow, you have to set both `parent` and `modal` options:\n```javascript\nconst { BrowserWindow } = require('electron')\nconst child = new BrowserWindow({ parent: top, modal: true, show: false })\nchild.loadURL('https://github.com')\nchild.once('ready-to-show', () => {\n  child.show()\n})\n```\nPage visibility\nThe Page Visibility API works as follows:\n\nOn all platforms, the visibility state tracks whether the window is\n  hidden/minimized or not.\nAdditionally, on macOS, the visibility state also tracks the window\n  occlusion state. If the window is occluded (i.e. fully covered) by another\n  window, the visibility state will be `hidden`. On other platforms, the\n  visibility state will be `hidden` only when the window is minimized or\n  explicitly hidden with `win.hide()`.\nIf a `BrowserWindow` is created with `show: false`, the initial visibility\n  state will be `visible` despite the window actually being hidden.\nIf `backgroundThrottling` is disabled, the visibility state will remain\n  `visible` even if the window is minimized, occluded, or hidden.\n\nIt is recommended that you pause expensive operations when the visibility\nstate is `hidden` in order to minimize power consumption.\nPlatform notices\n\nOn macOS modal windows will be displayed as sheets attached to the parent window.\nOn macOS the child windows will keep the relative position to parent window\n  when parent window moves, while on Windows and Linux child windows will not\n  move.\nOn Linux the type of modal windows will be changed to `dialog`.\nOn Linux many desktop environments do not support hiding a modal window.\n\nClass: BrowserWindow\n\nCreate and control browser windows.\n\nProcess: Main\n`BrowserWindow` is an EventEmitter.\nIt creates a new `BrowserWindow` with native properties as set by the `options`.\n`new BrowserWindow([options])`\n\n`options` Object (optional)\n`width` Integer (optional) - Window's width in pixels. Default is `800`.\n`height` Integer (optional) - Window's height in pixels. Default is `600`.\n`x` Integer (optional) - (required if y is used) Window's left offset from screen.\n    Default is to center the window.\n`y` Integer (optional) - (required if x is used) Window's top offset from screen.\n    Default is to center the window.\n`useContentSize` boolean (optional) - The `width` and `height` would be used as web\n    page's size, which means the actual window's size will include window\n    frame's size and be slightly larger. Default is `false`.\n`center` boolean (optional) - Show window in the center of the screen. Default is `false`.\n`minWidth` Integer (optional) - Window's minimum width. Default is `0`.\n`minHeight` Integer (optional) - Window's minimum height. Default is `0`.\n`maxWidth` Integer (optional) - Window's maximum width. Default is no limit.\n`maxHeight` Integer (optional) - Window's maximum height. Default is no limit.\n`resizable` boolean (optional) - Whether window is resizable. Default is `true`.\n`movable` boolean (optional) macOS Windows - Whether window is\n    movable. This is not implemented on Linux. Default is `true`.\n`minimizable` boolean (optional) macOS Windows - Whether window is\n    minimizable. This is not implemented on Linux. Default is `true`.\n`maximizable` boolean (optional) macOS Windows - Whether window is\n    maximizable. This is not implemented on Linux. Default is `true`.\n`closable` boolean (optional) macOS Windows - Whether window is\n    closable. This is not implemented on Linux. Default is `true`.\n`focusable` boolean (optional) - Whether the window can be focused. Default is\n    `true`. On Windows setting `focusable: false` also implies setting\n    `skipTaskbar: true`. On Linux setting `focusable: false` makes the window\n    stop interacting with wm, so the window will always stay on top in all\n    workspaces.\n`alwaysOnTop` boolean (optional) - Whether the window should always stay on top of\n    other windows. Default is `false`.\n`fullscreen` boolean (optional) - Whether the window should show in fullscreen. When\n    explicitly set to `false` the fullscreen button will be hidden or disabled\n    on macOS. Default is `false`.\n`fullscreenable` boolean (optional) - Whether the window can be put into fullscreen\n    mode. On macOS, also whether the maximize/zoom button should toggle full\n    screen mode or maximize window. Default is `true`.\n`simpleFullscreen` boolean (optional) macOS - Use pre-Lion fullscreen on\n    macOS. Default is `false`.\n`skipTaskbar` boolean (optional) macOS Windows - Whether to show the window in taskbar.\n    Default is `false`.\n`hiddenInMissionControl` boolean (optional) macOS - Whether window should be hidden when the user toggles into mission control.\n`kiosk` boolean (optional) - Whether the window is in kiosk mode. Default is `false`.\n`title` string (optional) - Default window title. Default is `\"Electron\"`. If the HTML tag `<title>` is defined in the HTML file loaded by `loadURL()`, this property will be ignored.\n`icon` (NativeImage | string) (optional) - The window icon. On Windows it is\n    recommended to use `ICO` icons to get best visual effects, you can also\n    leave it undefined so the executable's icon will be used.\n`show` boolean (optional) - Whether window should be shown when created. Default is\n    `true`.\n`paintWhenInitiallyHidden` boolean (optional) - Whether the renderer should be active when `show` is `false` and it has just been created.  In order for `document.visibilityState` to work correctly on first load with `show: false` you should set this to `false`.  Setting this to `false` will cause the `ready-to-show` event to not fire.  Default is `true`.\n`frame` boolean (optional) - Specify `false` to create a\n    frameless window. Default is `true`.\n`parent` BrowserWindow (optional) - Specify parent window. Default is `null`.\n`modal` boolean (optional) - Whether this is a modal window. This only works when the\n    window is a child window. Default is `false`.\n`acceptFirstMouse` boolean (optional) macOS - Whether clicking an\n    inactive window will also click through to the web contents. Default is\n    `false` on macOS. This option is not configurable on other platforms.\n`disableAutoHideCursor` boolean (optional) - Whether to hide cursor when typing.\n    Default is `false`.\n`autoHideMenuBar` boolean (optional) - Auto hide the menu bar unless the `Alt`\n    key is pressed. Default is `false`.\n`enableLargerThanScreen` boolean (optional) macOS - Enable the window to\n    be resized larger than screen. Only relevant for macOS, as other OSes\n    allow larger-than-screen windows by default. Default is `false`.\n`backgroundColor` string (optional) - The window's background color in Hex, RGB, RGBA, HSL, HSLA or named CSS color format. Alpha in #AARRGGBB format is supported if `transparent` is set to `true`. Default is `#FFF` (white). See win.setBackgroundColor for more information.\n`hasShadow` boolean (optional) - Whether window should have a shadow. Default is `true`.\n`opacity` number (optional) macOS Windows - Set the initial opacity of\n    the window, between 0.0 (fully transparent) and 1.0 (fully opaque). This\n    is only implemented on Windows and macOS.\n`darkTheme` boolean (optional) - Forces using dark theme for the window, only works on\n    some GTK+3 desktop environments. Default is `false`.\n`transparent` boolean (optional) - Makes the window transparent.\n    Default is `false`. On Windows, does not work unless the window is frameless.\n`type` string (optional) - The type of window, default is normal window. See more about\n    this below.\n`visualEffectState` string (optional) macOS - Specify how the material\n    appearance should reflect window activity state on macOS. Must be used\n    with the `vibrancy` property. Possible values are:\n`followWindow` - The backdrop should automatically appear active when the window is active, and inactive when it is not. This is the default.\n`active` - The backdrop should always appear active.\n`inactive` - The backdrop should always appear inactive.\n\n\n`titleBarStyle` string (optional) macOS Windows - The style of window title bar.\n    Default is `default`. Possible values are:\n`default` - Results in the standard title bar for macOS or Windows respectively.\n`hidden` - Results in a hidden title bar and a full size content window. On macOS, the window still has the standard window controls (\u201ctraffic lights\u201d) in the top left. On Windows, when combined with `titleBarOverlay: true` it will activate the Window Controls Overlay (see `titleBarOverlay` for more information), otherwise no window controls will be shown.\n`hiddenInset` macOS - Only on macOS, results in a hidden title bar\n  with an alternative look where the traffic light buttons are slightly\n  more inset from the window edge.\n`customButtonsOnHover` macOS - Only on macOS, results in a hidden\n  title bar and a full size content window, the traffic light buttons will\n  display when being hovered over in the top left of the window.\n  Note: This option is currently experimental.\n\n\n`trafficLightPosition` Point (optional) macOS -\n    Set a custom position for the traffic light buttons in frameless windows.\n`roundedCorners` boolean (optional) macOS - Whether frameless window\n    should have rounded corners on macOS. Default is `true`. Setting this property\n    to `false` will prevent the window from being fullscreenable.\n`fullscreenWindowTitle` boolean (optional) macOS Deprecated - Shows\n    the title in the title bar in full screen mode on macOS for `hiddenInset`\n    titleBarStyle. Default is `false`.\n`thickFrame` boolean (optional) - Use `WS_THICKFRAME` style for frameless windows on\n    Windows, which adds standard window frame. Setting it to `false` will remove\n    window shadow and window animations. Default is `true`.\n`vibrancy` string (optional) macOS - Add a type of vibrancy effect to\n    the window, only on macOS. Can be `appearance-based`, `light`, `dark`,\n    `titlebar`, `selection`, `menu`, `popover`, `sidebar`, `medium-light`,\n    `ultra-dark`, `header`, `sheet`, `window`, `hud`, `fullscreen-ui`,\n    `tooltip`, `content`, `under-window`, or `under-page`. Please note that\n    `appearance-based`, `light`, `dark`, `medium-light`, and `ultra-dark` are\n    deprecated and have been removed in macOS Catalina (10.15).\n`zoomToPageWidth` boolean (optional) macOS - Controls the behavior on\n    macOS when option-clicking the green stoplight button on the toolbar or by\n    clicking the Window > Zoom menu item. If `true`, the window will grow to\n    the preferred width of the web page when zoomed, `false` will cause it to\n    zoom to the width of the screen. This will also affect the behavior when\n    calling `maximize()` directly. Default is `false`.\n`tabbingIdentifier` string (optional) macOS - Tab group name, allows\n    opening the window as a native tab. Windows with the same\n    tabbing identifier will be grouped together. This also adds a native new\n    tab button to your window's tab bar and allows your `app` and window to\n    receive the `new-window-for-tab` event.\n`webPreferences` Object (optional) - Settings of web page's features.\n`devTools` boolean (optional) - Whether to enable DevTools. If it is set to `false`, can not use `BrowserWindow.webContents.openDevTools()` to open DevTools. Default is `true`.\n`nodeIntegration` boolean (optional) - Whether node integration is enabled.\n  Default is `false`.\n`nodeIntegrationInWorker` boolean (optional) - Whether node integration is\n  enabled in web workers. Default is `false`. More about this can be found\n  in Multithreading.\n`nodeIntegrationInSubFrames` boolean (optional) - Experimental option for\n  enabling Node.js support in sub-frames such as iframes and child windows. All your preloads will load for\n  every iframe, you can use `process.isMainFrame` to determine if you are\n  in the main frame or not.\n`preload` string (optional) - Specifies a script that will be loaded before other\n  scripts run in the page. This script will always have access to node APIs\n  no matter whether node integration is turned on or off. The value should\n  be the absolute file path to the script.\n  When node integration is turned off, the preload script can reintroduce\n  Node global symbols back to the global scope. See example\n  here.\n`sandbox` boolean (optional) - If set, this will sandbox the renderer\n  associated with the window, making it compatible with the Chromium\n  OS-level sandbox and disabling the Node.js engine. This is not the same as\n  the `nodeIntegration` option and the APIs available to the preload script\n  are more limited. Read more about the option here.\n`session` Session (optional) - Sets the session used by the\n  page. Instead of passing the Session object directly, you can also choose to\n  use the `partition` option instead, which accepts a partition string. When\n  both `session` and `partition` are provided, `session` will be preferred.\n  Default is the default session.\n`partition` string (optional) - Sets the session used by the page according to the\n  session's partition string. If `partition` starts with `persist:`, the page\n  will use a persistent session available to all pages in the app with the\n  same `partition`. If there is no `persist:` prefix, the page will use an\n  in-memory session. By assigning the same `partition`, multiple pages can share\n  the same session. Default is the default session.\n`zoomFactor` number (optional) - The default zoom factor of the page, `3.0` represents\n  `300%`. Default is `1.0`.\n`javascript` boolean (optional) - Enables JavaScript support. Default is `true`.\n`webSecurity` boolean (optional) - When `false`, it will disable the\n  same-origin policy (usually using testing websites by people), and set\n  `allowRunningInsecureContent` to `true` if this options has not been set\n  by user. Default is `true`.\n`allowRunningInsecureContent` boolean (optional) - Allow an https page to run\n  JavaScript, CSS or plugins from http URLs. Default is `false`.\n`images` boolean (optional) - Enables image support. Default is `true`.\n`imageAnimationPolicy` string (optional) - Specifies how to run image animations (E.g. GIFs).  Can be `animate`, `animateOnce` or `noAnimation`.  Default is `animate`.\n`textAreasAreResizable` boolean (optional) - Make TextArea elements resizable. Default\n  is `true`.\n`webgl` boolean (optional) - Enables WebGL support. Default is `true`.\n`plugins` boolean (optional) - Whether plugins should be enabled. Default is `false`.\n`experimentalFeatures` boolean (optional) - Enables Chromium's experimental features.\n  Default is `false`.\n`scrollBounce` boolean (optional) macOS - Enables scroll bounce\n  (rubber banding) effect on macOS. Default is `false`.\n`enableBlinkFeatures` string (optional) - A list of feature strings separated by `,`, like\n  `CSSVariables,KeyboardEventKey` to enable. The full list of supported feature\n  strings can be found in the RuntimeEnabledFeatures.json5\n  file.\n`disableBlinkFeatures` string (optional) - A list of feature strings separated by `,`,\n  like `CSSVariables,KeyboardEventKey` to disable. The full list of supported\n  feature strings can be found in the\n  RuntimeEnabledFeatures.json5 file.\n`defaultFontFamily` Object (optional) - Sets the default font for the font-family.\n`standard` string (optional) - Defaults to `Times New Roman`.\n`serif` string (optional) - Defaults to `Times New Roman`.\n`sansSerif` string (optional) - Defaults to `Arial`.\n`monospace` string (optional) - Defaults to `Courier New`.\n`cursive` string (optional) - Defaults to `Script`.\n`fantasy` string (optional) - Defaults to `Impact`.\n`defaultFontSize` Integer (optional) - Defaults to `16`.\n`defaultMonospaceFontSize` Integer (optional) - Defaults to `13`.\n`minimumFontSize` Integer (optional) - Defaults to `0`.\n`defaultEncoding` string (optional) - Defaults to `ISO-8859-1`.\n`backgroundThrottling` boolean (optional) - Whether to throttle animations and timers\n  when the page becomes background. This also affects the\n  Page Visibility API. Defaults to `true`.\n`offscreen` boolean (optional) - Whether to enable offscreen rendering for the browser\n  window. Defaults to `false`. See the\n  offscreen rendering tutorial for\n  more details.\n`contextIsolation` boolean (optional) - Whether to run Electron APIs and\n  the specified `preload` script in a separate JavaScript context. Defaults\n  to `true`. The context that the `preload` script runs in will only have\n  access to its own dedicated `document` and `window` globals, as well as\n  its own set of JavaScript builtins (`Array`, `Object`, `JSON`, etc.),\n  which are all invisible to the loaded content. The Electron API will only\n  be available in the `preload` script and not the loaded page. This option\n  should be used when loading potentially untrusted remote content to ensure\n  the loaded content cannot tamper with the `preload` script and any\n  Electron APIs being used.  This option uses the same technique used by\n  Chrome Content Scripts.  You can access this\n  context in the dev tools by selecting the 'Electron Isolated Context'\n  entry in the combo box at the top of the Console tab.\n`webviewTag` boolean (optional) - Whether to enable the <webview> tag.\n  Defaults to `false`. Note: The\n  `preload` script configured for the `<webview>` will have node integration\n  enabled when it is executed so you should ensure remote/untrusted content\n  is not able to create a `<webview>` tag with a possibly malicious `preload`\n  script. You can use the `will-attach-webview` event on webContents\n  to strip away the `preload` script and to validate or alter the\n  `<webview>`'s initial settings.\n`additionalArguments` string[] (optional) - A list of strings that will be appended\n  to `process.argv` in the renderer process of this app.  Useful for passing small\n  bits of data down to renderer process preload scripts.\n`safeDialogs` boolean (optional) - Whether to enable browser style\n  consecutive dialog protection. Default is `false`.\n`safeDialogsMessage` string (optional) - The message to display when\n  consecutive dialog protection is triggered. If not defined the default\n  message would be used, note that currently the default message is in\n  English and not localized.\n`disableDialogs` boolean (optional) - Whether to disable dialogs\n  completely. Overrides `safeDialogs`. Default is `false`.\n`navigateOnDragDrop` boolean (optional) - Whether dragging and dropping a\n  file or link onto the page causes a navigation. Default is `false`.\n`autoplayPolicy` string (optional) - Autoplay policy to apply to\n  content in the window, can be `no-user-gesture-required`,\n  `user-gesture-required`, `document-user-activation-required`. Defaults to\n  `no-user-gesture-required`.\n`disableHtmlFullscreenWindowResize` boolean (optional) - Whether to\n  prevent the window from resizing when entering HTML Fullscreen. Default\n  is `false`.\n`accessibleTitle` string (optional) - An alternative title string provided only\n  to accessibility tools such as screen readers. This string is not directly\n  visible to users.\n`spellcheck` boolean (optional) - Whether to enable the builtin spellchecker.\n  Default is `true`.\n`enableWebSQL` boolean (optional) - Whether to enable the WebSQL api.\n  Default is `true`.\n`v8CacheOptions` string (optional) - Enforces the v8 code caching policy\n  used by blink. Accepted values are\n`none` - Disables code caching\n`code` - Heuristic based code caching\n`bypassHeatCheck` - Bypass code caching heuristics but with lazy compilation\n`bypassHeatCheckAndEagerCompile` - Same as above except compilation is eager.\n  Default policy is `code`.\n`enablePreferredSizeMode` boolean (optional) - Whether to enable\n  preferred size mode. The preferred size is the minimum size needed to\n  contain the layout of the document\u2014without requiring scrolling. Enabling\n  this will cause the `preferred-size-changed` event to be emitted on the\n  `WebContents` when the preferred size changes. Default is `false`.\n\n\n`titleBarOverlay` Object | Boolean (optional) -  When using a frameless window in conjunction with `win.setWindowButtonVisibility(true)` on macOS or using a `titleBarStyle` so that the standard window controls (\"traffic lights\" on macOS) are visible, this property enables the Window Controls Overlay JavaScript APIs and [CSS Environment Variables][overlay-css-env-vars]. Specifying `true` will result in an overlay with default system colors. Default is `false`.\n`color` String (optional) Windows - The CSS color of the Window Controls Overlay when enabled. Default is the system color.\n`symbolColor` String (optional) Windows - The CSS color of the symbols on the Window Controls Overlay when enabled. Default is the system color.\n`height` Integer (optional) macOS Windows - The height of the title bar and Window Controls Overlay in pixels. Default is system height.\n\n\n\nWhen setting minimum or maximum window size with `minWidth`/`maxWidth`/\n`minHeight`/`maxHeight`, it only constrains the users. It won't prevent you from\npassing a size that does not follow size constraints to `setBounds`/`setSize` or\nto the constructor of `BrowserWindow`.\nThe possible values and behaviors of the `type` option are platform dependent.\nPossible values are:\n\nOn Linux, possible types are `desktop`, `dock`, `toolbar`, `splash`,\n  `notification`.\nOn macOS, possible types are `desktop`, `textured`, `panel`.\nThe `textured` type adds metal gradient appearance\n    (`NSWindowStyleMaskTexturedBackground`).\nThe `desktop` type places the window at the desktop background window level\n    (`kCGDesktopWindowLevel - 1`). Note that desktop window will not receive\n    focus, keyboard or mouse events, but you can use `globalShortcut` to receive\n    input sparingly.\nThe `panel` type enables the window to float on top of full-screened apps\n    by adding the `NSWindowStyleMaskNonactivatingPanel` style mask,normally\n    reserved for NSPanel, at runtime. Also, the window will appear on all\n    spaces (desktops).\nOn Windows, possible type is `toolbar`.\n\nInstance Events\nObjects created with `new BrowserWindow` emit the following events:\nNote: Some events are only available on specific operating systems and are\nlabeled as such.\nEvent: 'page-title-updated'\nReturns:\n\n`event` Event\n`title` string\n`explicitSet` boolean\n\nEmitted when the document changed its title, calling `event.preventDefault()`\nwill prevent the native window's title from changing.\n`explicitSet` is false when title is synthesized from file URL.\nEvent: 'close'\nReturns:\n\n`event` Event\n\nEmitted when the window is going to be closed. It's emitted before the\n`beforeunload` and `unload` event of the DOM. Calling `event.preventDefault()`\nwill cancel the close.\nUsually you would want to use the `beforeunload` handler to decide whether the\nwindow should be closed, which will also be called when the window is\nreloaded. In Electron, returning any value other than `undefined` would cancel the\nclose. For example:\n```javascript\nwindow.onbeforeunload = (e) => {\n  console.log('I do not want to be closed')\n// Unlike usual browsers that a message box will be prompted to users, returning\n  // a non-void value will silently cancel the close.\n  // It is recommended to use the dialog API to let the user confirm closing the\n  // application.\n  e.returnValue = false\n}\n```\nNote: There is a subtle difference between the behaviors of `window.onbeforeunload = handler` and `window.addEventListener('beforeunload', handler)`. It is recommended to always set the `event.returnValue` explicitly, instead of only returning a value, as the former works more consistently within Electron.\nEvent: 'closed'\nEmitted when the window is closed. After you have received this event you should\nremove the reference to the window and avoid using it any more.\nEvent: 'session-end' Windows\nEmitted when window session is going to end due to force shutdown or machine restart\nor session log off.\nEvent: 'unresponsive'\nEmitted when the web page becomes unresponsive.\nEvent: 'responsive'\nEmitted when the unresponsive web page becomes responsive again.\nEvent: 'blur'\nEmitted when the window loses focus.\nEvent: 'focus'\nEmitted when the window gains focus.\nEvent: 'show'\nEmitted when the window is shown.\nEvent: 'hide'\nEmitted when the window is hidden.\nEvent: 'ready-to-show'\nEmitted when the web page has been rendered (while not being shown) and window can be displayed without\na visual flash.\nPlease note that using this event implies that the renderer will be considered \"visible\" and\npaint even though `show` is false.  This event will never fire if you use `paintWhenInitiallyHidden: false`\nEvent: 'maximize'\nEmitted when window is maximized.\nEvent: 'unmaximize'\nEmitted when the window exits from a maximized state.\nEvent: 'minimize'\nEmitted when the window is minimized.\nEvent: 'restore'\nEmitted when the window is restored from a minimized state.\nEvent: 'will-resize' macOS Windows\nReturns:\n\n`event` Event\n`newBounds` Rectangle - Size the window is being resized to.\n`details` Object\n`edge` (string) - The edge of the window being dragged for resizing. Can be `bottom`, `left`, `right`, `top-left`, `top-right`, `bottom-left` or `bottom-right`.\n\nEmitted before the window is resized. Calling `event.preventDefault()` will prevent the window from being resized.\nNote that this is only emitted when the window is being resized manually. Resizing the window with `setBounds`/`setSize` will not emit this event.\nThe possible values and behaviors of the `edge` option are platform dependent. Possible values are:\n\nOn Windows, possible values are `bottom`, `top`, `left`, `right`, `top-left`, `top-right`, `bottom-left`, `bottom-right`.\nOn macOS, possible values are `bottom` and `right`.\nThe value `bottom` is used to denote vertical resizing.\nThe value `right` is used to denote horizontal resizing.\n\nEvent: 'resize'\nEmitted after the window has been resized.\nEvent: 'resized' macOS Windows\nEmitted once when the window has finished being resized.\nThis is usually emitted when the window has been resized manually. On macOS, resizing the window with `setBounds`/`setSize` and setting the `animate` parameter to `true` will also emit this event once resizing has finished.\nEvent: 'will-move' macOS Windows\nReturns:\n\n`event` Event\n`newBounds` Rectangle - Location the window is being moved to.\n\nEmitted before the window is moved. On Windows, calling `event.preventDefault()` will prevent the window from being moved.\nNote that this is only emitted when the window is being moved manually. Moving the window with `setPosition`/`setBounds`/`center` will not emit this event.\nEvent: 'move'\nEmitted when the window is being moved to a new position.\nEvent: 'moved' macOS Windows\nEmitted once when the window is moved to a new position.\nNote: On macOS this event is an alias of `move`.\nEvent: 'enter-full-screen'\nEmitted when the window enters a full-screen state.\nEvent: 'leave-full-screen'\nEmitted when the window leaves a full-screen state.\nEvent: 'enter-html-full-screen'\nEmitted when the window enters a full-screen state triggered by HTML API.\nEvent: 'leave-html-full-screen'\nEmitted when the window leaves a full-screen state triggered by HTML API.\nEvent: 'always-on-top-changed'\nReturns:\n\n`event` Event\n`isAlwaysOnTop` boolean\n\nEmitted when the window is set or unset to show always on top of other windows.\nEvent: 'app-command' Windows Linux\nReturns:\n\n`event` Event\n`command` string\n\nEmitted when an App Command\nis invoked. These are typically related to keyboard media keys or browser\ncommands, as well as the \"Back\" button built into some mice on Windows.\nCommands are lowercased, underscores are replaced with hyphens, and the\n`APPCOMMAND_` prefix is stripped off.\ne.g. `APPCOMMAND_BROWSER_BACKWARD` is emitted as `browser-backward`.\n`javascript\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\nwin.on('app-command', (e, cmd) => {\n  // Navigate the window back when the user hits their mouse back button\n  if (cmd === 'browser-backward' && win.webContents.canGoBack()) {\n    win.webContents.goBack()\n  }\n})`\nThe following app commands are explicitly supported on Linux:\n\n`browser-backward`\n`browser-forward`\n\nEvent: 'scroll-touch-begin' macOS Deprecated\nEmitted when scroll wheel event phase has begun.\n\nNote\nThis event is deprecated beginning in Electron 22.0.0. See Breaking\nChanges\nfor details of how to migrate to using the WebContents\ninput-event event.\n\nEvent: 'scroll-touch-end' macOS Deprecated\nEmitted when scroll wheel event phase has ended.\n\nNote\nThis event is deprecated beginning in Electron 22.0.0. See Breaking\nChanges\nfor details of how to migrate to using the WebContents\ninput-event event.\n\nEvent: 'scroll-touch-edge' macOS Deprecated\nEmitted when scroll wheel event phase filed upon reaching the edge of element.\n\nNote\nThis event is deprecated beginning in Electron 22.0.0. See Breaking\nChanges\nfor details of how to migrate to using the WebContents\ninput-event event.\n\nEvent: 'swipe' macOS\nReturns:\n\n`event` Event\n`direction` string\n\nEmitted on 3-finger swipe. Possible directions are `up`, `right`, `down`, `left`.\nThe method underlying this event is built to handle older macOS-style trackpad swiping,\nwhere the content on the screen doesn't move with the swipe. Most macOS trackpads are not\nconfigured to allow this kind of swiping anymore, so in order for it to emit properly the\n'Swipe between pages' preference in `System Preferences > Trackpad > More Gestures` must be\nset to 'Swipe with two or three fingers'.\nEvent: 'rotate-gesture' macOS\nReturns:\n\n`event` Event\n`rotation` Float\n\nEmitted on trackpad rotation gesture. Continually emitted until rotation gesture is\nended. The `rotation` value on each emission is the angle in degrees rotated since\nthe last emission. The last emitted event upon a rotation gesture will always be of\nvalue `0`. Counter-clockwise rotation values are positive, while clockwise ones are\nnegative.\nEvent: 'sheet-begin' macOS\nEmitted when the window opens a sheet.\nEvent: 'sheet-end' macOS\nEmitted when the window has closed a sheet.\nEvent: 'new-window-for-tab' macOS\nEmitted when the native new tab button is clicked.\nEvent: 'system-context-menu' Windows\nReturns:\n\n`event` Event\n`point` Point - The screen coordinates the context menu was triggered at\n\nEmitted when the system context menu is triggered on the window, this is\nnormally only triggered when the user right clicks on the non-client area\nof your window.  This is the window titlebar or any area you have declared\nas `-webkit-app-region: drag` in a frameless window.\nCalling `event.preventDefault()` will prevent the menu from being displayed.\nStatic Methods\nThe `BrowserWindow` class has the following static methods:\n`BrowserWindow.getAllWindows()`\nReturns `BrowserWindow[]` - An array of all opened browser windows.\n`BrowserWindow.getFocusedWindow()`\nReturns `BrowserWindow | null` - The window that is focused in this application, otherwise returns `null`.\n`BrowserWindow.fromWebContents(webContents)`\n\n`webContents` WebContents\n\nReturns `BrowserWindow | null` - The window that owns the given `webContents`\nor `null` if the contents are not owned by a window.\n`BrowserWindow.fromBrowserView(browserView)`\n\n`browserView` BrowserView\n\nReturns `BrowserWindow | null` - The window that owns the given `browserView`. If the given view is not attached to any window, returns `null`.\n`BrowserWindow.fromId(id)`\n\n`id` Integer\n\nReturns `BrowserWindow | null` - The window with the given `id`.\nInstance Properties\nObjects created with `new BrowserWindow` have the following properties:\n`javascript\nconst { BrowserWindow } = require('electron')\n// In this example `win` is our instance\nconst win = new BrowserWindow({ width: 800, height: 600 })\nwin.loadURL('https://github.com')`\n`win.webContents` Readonly\nA `WebContents` object this window owns. All web page related events and\noperations will be done via it.\nSee the webContents documentation for its methods and\nevents.\n`win.id` Readonly\nA `Integer` property representing the unique ID of the window. Each ID is unique among all `BrowserWindow` instances of the entire Electron application.\n`win.autoHideMenuBar`\nA `boolean` property that determines whether the window menu bar should hide itself automatically. Once set, the menu bar will only show when users press the single `Alt` key.\nIf the menu bar is already visible, setting this property to `true` won't\nhide it immediately.\n`win.simpleFullScreen`\nA `boolean` property that determines whether the window is in simple (pre-Lion) fullscreen mode.\n`win.fullScreen`\nA `boolean` property that determines whether the window is in fullscreen mode.\n`win.focusable` Windows macOS\nA `boolean` property that determines whether the window is focusable.\n`win.visibleOnAllWorkspaces` macOS Linux\nA `boolean` property that determines whether the window is visible on all workspaces.\nNote: Always returns false on Windows.\n`win.shadow`\nA `boolean` property that determines whether the window has a shadow.\n`win.menuBarVisible` Windows Linux\nA `boolean` property that determines whether the menu bar should be visible.\nNote: If the menu bar is auto-hide, users can still bring up the menu bar by pressing the single `Alt` key.\n`win.kiosk`\nA `boolean` property that determines whether the window is in kiosk mode.\n`win.documentEdited` macOS\nA `boolean` property that specifies whether the window\u2019s document has been edited.\nThe icon in title bar will become gray when set to `true`.\n`win.representedFilename` macOS\nA `string` property that determines the pathname of the file the window represents,\nand the icon of the file will show in window's title bar.\n`win.title`\nA `string` property that determines the title of the native window.\nNote: The title of the web page can be different from the title of the native window.\n`win.minimizable` macOS Windows\nA `boolean` property that determines whether the window can be manually minimized by user.\nOn Linux the setter is a no-op, although the getter returns `true`.\n`win.maximizable` macOS Windows\nA `boolean` property that determines whether the window can be manually maximized by user.\nOn Linux the setter is a no-op, although the getter returns `true`.\n`win.fullScreenable`\nA `boolean` property that determines whether the maximize/zoom window button toggles fullscreen mode or\nmaximizes the window.\n`win.resizable`\nA `boolean` property that determines whether the window can be manually resized by user.\n`win.closable` macOS Windows\nA `boolean` property that determines whether the window can be manually closed by user.\nOn Linux the setter is a no-op, although the getter returns `true`.\n`win.movable` macOS Windows\nA `boolean` property that determines Whether the window can be moved by user.\nOn Linux the setter is a no-op, although the getter returns `true`.\n`win.excludedFromShownWindowsMenu` macOS\nA `boolean` property that determines whether the window is excluded from the application\u2019s Windows menu. `false` by default.\n```js\nconst win = new BrowserWindow({ height: 600, width: 600 })\nconst template = [\n  {\n    role: 'windowmenu'\n  }\n]\nwin.excludedFromShownWindowsMenu = true\nconst menu = Menu.buildFromTemplate(template)\nMenu.setApplicationMenu(menu)\n```\n`win.accessibleTitle`\nA `string` property that defines an alternative title provided only to\naccessibility tools such as screen readers. This string is not directly\nvisible to users.\nInstance Methods\nObjects created with `new BrowserWindow` have the following instance methods:\nNote: Some methods are only available on specific operating systems and are\nlabeled as such.\n`win.destroy()`\nForce closing the window, the `unload` and `beforeunload` event won't be emitted\nfor the web page, and `close` event will also not be emitted\nfor this window, but it guarantees the `closed` event will be emitted.\n`win.close()`\nTry to close the window. This has the same effect as a user manually clicking\nthe close button of the window. The web page may cancel the close though. See\nthe close event.\n`win.focus()`\nFocuses on the window.\n`win.blur()`\nRemoves focus from the window.\n`win.isFocused()`\nReturns `boolean` - Whether the window is focused.\n`win.isDestroyed()`\nReturns `boolean` - Whether the window is destroyed.\n`win.show()`\nShows and gives focus to the window.\n`win.showInactive()`\nShows the window but doesn't focus on it.\n`win.hide()`\nHides the window.\n`win.isVisible()`\nReturns `boolean` - Whether the window is visible to the user.\n`win.isModal()`\nReturns `boolean` - Whether current window is a modal window.\n`win.maximize()`\nMaximizes the window. This will also show (but not focus) the window if it\nisn't being displayed already.\n`win.unmaximize()`\nUnmaximizes the window.\n`win.isMaximized()`\nReturns `boolean` - Whether the window is maximized.\n`win.minimize()`\nMinimizes the window. On some platforms the minimized window will be shown in\nthe Dock.\n`win.restore()`\nRestores the window from minimized state to its previous state.\n`win.isMinimized()`\nReturns `boolean` - Whether the window is minimized.\n`win.setFullScreen(flag)`\n\n`flag` boolean\n\nSets whether the window should be in fullscreen mode.\n`win.isFullScreen()`\nReturns `boolean` - Whether the window is in fullscreen mode.\n`win.setSimpleFullScreen(flag)` macOS\n\n`flag` boolean\n\nEnters or leaves simple fullscreen mode.\nSimple fullscreen mode emulates the native fullscreen behavior found in versions of macOS prior to Lion (10.7).\n`win.isSimpleFullScreen()` macOS\nReturns `boolean` - Whether the window is in simple (pre-Lion) fullscreen mode.\n`win.isNormal()`\nReturns `boolean` - Whether the window is in normal state (not maximized, not minimized, not in fullscreen mode).\n`win.setAspectRatio(aspectRatio[, extraSize])`\n\n`aspectRatio` Float - The aspect ratio to maintain for some portion of the\ncontent view.\n`extraSize` Size (optional) macOS - The extra size not to be included while\nmaintaining the aspect ratio.\n\nThis will make a window maintain an aspect ratio. The extra size allows a\ndeveloper to have space, specified in pixels, not included within the aspect\nratio calculations. This API already takes into account the difference between a\nwindow's size and its content size.\nConsider a normal window with an HD video player and associated controls.\nPerhaps there are 15 pixels of controls on the left edge, 25 pixels of controls\non the right edge and 50 pixels of controls below the player. In order to\nmaintain a 16:9 aspect ratio (standard aspect ratio for HD @1920x1080) within\nthe player itself we would call this function with arguments of 16/9 and\n{ width: 40, height: 50 }. The second argument doesn't care where the extra width and height\nare within the content view--only that they exist. Sum any extra width and\nheight areas you have within the overall content view.\nThe aspect ratio is not respected when window is resized programmatically with\nAPIs like `win.setSize`.\nTo reset an aspect ratio, pass 0 as the `aspectRatio` value: `win.setAspectRatio(0)`.\n`win.setBackgroundColor(backgroundColor)`\n\n`backgroundColor` string - Color in Hex, RGB, RGBA, HSL, HSLA or named CSS color format. The alpha channel is optional for the hex type.\n\nExamples of valid `backgroundColor` values:\n\nHex\n\nfff (shorthand RGB)\n\n\nffff (shorthand ARGB)\n\n\nffffff (RGB)\n\n\nffffffff (ARGB)\n\nRGB\nrgb(([\\d]+),\\s([\\d]+),\\s([\\d]+))\ne.g. rgb(255, 255, 255)\n\n\nRGBA\nrgba(([\\d]+),\\s([\\d]+),\\s([\\d]+),\\s*([\\d.]+))\ne.g. rgba(255, 255, 255, 1.0)\n\n\nHSL\nhsl((-?[\\d.]+),\\s([\\d.]+)%,\\s([\\d.]+)%)\ne.g. hsl(200, 20%, 50%)\n\n\nHSLA\nhsla((-?[\\d.]+),\\s([\\d.]+)%,\\s([\\d.]+)%,\\s*([\\d.]+))\ne.g. hsla(200, 20%, 50%, 0.5)\n\n\nColor name\nOptions are listed in SkParseColor.cpp\nSimilar to CSS Color Module Level 3 keywords, but case-sensitive.\ne.g. `blueviolet` or `red`\n\n\n\nSets the background color of the window. See Setting backgroundColor.\n`win.previewFile(path[, displayName])` macOS\n\n`path` string - The absolute path to the file to preview with QuickLook. This\n  is important as Quick Look uses the file name and file extension on the path\n  to determine the content type of the file to open.\n`displayName` string (optional) - The name of the file to display on the\n  Quick Look modal view. This is purely visual and does not affect the content\n  type of the file. Defaults to `path`.\n\nUses Quick Look to preview a file at a given path.\n`win.closeFilePreview()` macOS\nCloses the currently open Quick Look panel.\n`win.setBounds(bounds[, animate])`\n\n`bounds` Partial<Rectangle>\n`animate` boolean (optional) macOS\n\nResizes and moves the window to the supplied bounds. Any properties that are not supplied will default to their current values.\n```javascript\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\n// set all bounds properties\nwin.setBounds({ x: 440, y: 225, width: 800, height: 600 })\n// set a single bounds property\nwin.setBounds({ width: 100 })\n// { x: 440, y: 225, width: 100, height: 600 }\nconsole.log(win.getBounds())\n```\n`win.getBounds()`\nReturns Rectangle - The `bounds` of the window as `Object`.\n`win.getBackgroundColor()`\nReturns `string` - Gets the background color of the window in Hex (`#RRGGBB`) format.\nSee Setting backgroundColor.\nNote: The alpha value is not returned alongside the red, green, and blue values.\n`win.setContentBounds(bounds[, animate])`\n\n`bounds` Rectangle\n`animate` boolean (optional) macOS\n\nResizes and moves the window's client area (e.g. the web page) to\nthe supplied bounds.\n`win.getContentBounds()`\nReturns Rectangle - The `bounds` of the window's client area as `Object`.\n`win.getNormalBounds()`\nReturns Rectangle - Contains the window bounds of the normal state\nNote: whatever the current state of the window : maximized, minimized or in fullscreen, this function always returns the position and size of the window in normal state. In normal state, getBounds and getNormalBounds returns the same Rectangle.\n`win.setEnabled(enable)`\n\n`enable` boolean\n\nDisable or enable the window.\n`win.isEnabled()`\nReturns `boolean` - whether the window is enabled.\n`win.setSize(width, height[, animate])`\n\n`width` Integer\n`height` Integer\n`animate` boolean (optional) macOS\n\nResizes the window to `width` and `height`. If `width` or `height` are below any set minimum size constraints the window will snap to its minimum size.\n`win.getSize()`\nReturns `Integer[]` - Contains the window's width and height.\n`win.setContentSize(width, height[, animate])`\n\n`width` Integer\n`height` Integer\n`animate` boolean (optional) macOS\n\nResizes the window's client area (e.g. the web page) to `width` and `height`.\n`win.getContentSize()`\nReturns `Integer[]` - Contains the window's client area's width and height.\n`win.setMinimumSize(width, height)`\n\n`width` Integer\n`height` Integer\n\nSets the minimum size of window to `width` and `height`.\n`win.getMinimumSize()`\nReturns `Integer[]` - Contains the window's minimum width and height.\n`win.setMaximumSize(width, height)`\n\n`width` Integer\n`height` Integer\n\nSets the maximum size of window to `width` and `height`.\n`win.getMaximumSize()`\nReturns `Integer[]` - Contains the window's maximum width and height.\n`win.setResizable(resizable)`\n\n`resizable` boolean\n\nSets whether the window can be manually resized by the user.\n`win.isResizable()`\nReturns `boolean` - Whether the window can be manually resized by the user.\n`win.setMovable(movable)` macOS Windows\n\n`movable` boolean\n\nSets whether the window can be moved by user. On Linux does nothing.\n`win.isMovable()` macOS Windows\nReturns `boolean` - Whether the window can be moved by user.\nOn Linux always returns `true`.\n`win.setMinimizable(minimizable)` macOS Windows\n\n`minimizable` boolean\n\nSets whether the window can be manually minimized by user. On Linux does nothing.\n`win.isMinimizable()` macOS Windows\nReturns `boolean` - Whether the window can be manually minimized by the user.\nOn Linux always returns `true`.\n`win.setMaximizable(maximizable)` macOS Windows\n\n`maximizable` boolean\n\nSets whether the window can be manually maximized by user. On Linux does nothing.\n`win.isMaximizable()` macOS Windows\nReturns `boolean` - Whether the window can be manually maximized by user.\nOn Linux always returns `true`.\n`win.setFullScreenable(fullscreenable)`\n\n`fullscreenable` boolean\n\nSets whether the maximize/zoom window button toggles fullscreen mode or maximizes the window.\n`win.isFullScreenable()`\nReturns `boolean` - Whether the maximize/zoom window button toggles fullscreen mode or maximizes the window.\n`win.setClosable(closable)` macOS Windows\n\n`closable` boolean\n\nSets whether the window can be manually closed by user. On Linux does nothing.\n`win.isClosable()` macOS Windows\nReturns `boolean` - Whether the window can be manually closed by user.\nOn Linux always returns `true`.\n`win.setHiddenInMissionControl(hidden)` macOS\n\n`hidden` boolean\n\nSets whether the window will be hidden when the user toggles into mission control.\n`win.isHiddenInMissionControl()` macOS\nReturns `boolean` - Whether the window will be hidden when the user toggles into mission control.\n`win.setAlwaysOnTop(flag[, level][, relativeLevel])`\n\n`flag` boolean\n`level` string (optional) macOS Windows - Values include `normal`,\n  `floating`, `torn-off-menu`, `modal-panel`, `main-menu`, `status`,\n  `pop-up-menu`, `screen-saver`, and ~~`dock`~~ (Deprecated). The default is\n  `floating` when `flag` is true. The `level` is reset to `normal` when the\n  flag is false. Note that from `floating` to `status` included, the window is\n  placed below the Dock on macOS and below the taskbar on Windows. From\n  `pop-up-menu` to a higher it is shown above the Dock on macOS and above the\n  taskbar on Windows. See the macOS docs for more details.\n`relativeLevel` Integer (optional) macOS - The number of layers higher to set\n  this window relative to the given `level`. The default is `0`. Note that Apple\n  discourages setting levels higher than 1 above `screen-saver`.\n\nSets whether the window should show always on top of other windows. After\nsetting this, the window is still a normal window, not a toolbox window which\ncan not be focused on.\n`win.isAlwaysOnTop()`\nReturns `boolean` - Whether the window is always on top of other windows.\n`win.moveAbove(mediaSourceId)`\n\n`mediaSourceId` string - Window id in the format of DesktopCapturerSource's id. For example \"window:1869:0\".\n\nMoves window above the source window in the sense of z-order. If the\n`mediaSourceId` is not of type window or if the window does not exist then\nthis method throws an error.\n`win.moveTop()`\nMoves window to top(z-order) regardless of focus\n`win.center()`\nMoves window to the center of the screen.\n`win.setPosition(x, y[, animate])`\n\n`x` Integer\n`y` Integer\n`animate` boolean (optional) macOS\n\nMoves window to `x` and `y`.\n`win.getPosition()`\nReturns `Integer[]` - Contains the window's current position.\n`win.setTitle(title)`\n\n`title` string\n\nChanges the title of native window to `title`.\n`win.getTitle()`\nReturns `string` - The title of the native window.\nNote: The title of the web page can be different from the title of the native\nwindow.\n`win.setSheetOffset(offsetY[, offsetX])` macOS\n\n`offsetY` Float\n`offsetX` Float (optional)\n\nChanges the attachment point for sheets on macOS. By default, sheets are\nattached just below the window frame, but you may want to display them beneath\na HTML-rendered toolbar. For example:\n```javascript\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\nconst toolbarRect = document.getElementById('toolbar').getBoundingClientRect()\nwin.setSheetOffset(toolbarRect.height)\n```\n`win.flashFrame(flag)`\n\n`flag` boolean\n\nStarts or stops flashing the window to attract user's attention.\n`win.setSkipTaskbar(skip)` macOS Windows\n\n`skip` boolean\n\nMakes the window not show in the taskbar.\n`win.setKiosk(flag)`\n\n`flag` boolean\n\nEnters or leaves kiosk mode.\n`win.isKiosk()`\nReturns `boolean` - Whether the window is in kiosk mode.\n`win.isTabletMode()` Windows\nReturns `boolean` - Whether the window is in Windows 10 tablet mode.\nSince Windows 10 users can use their PC as tablet,\nunder this mode apps can choose to optimize their UI for tablets, such as\nenlarging the titlebar and hiding titlebar buttons.\nThis API returns whether the window is in tablet mode, and the `resize` event\ncan be be used to listen to changes to tablet mode.\n`win.getMediaSourceId()`\nReturns `string` - Window id in the format of DesktopCapturerSource's id. For example \"window:1324:0\".\nMore precisely the format is `window:id:other_id` where `id` is `HWND` on\nWindows, `CGWindowID` (`uint64_t`) on macOS and `Window` (`unsigned long`) on\nLinux. `other_id` is used to identify web contents (tabs) so within the same\ntop level window.\n`win.getNativeWindowHandle()`\nReturns `Buffer` - The platform-specific handle of the window.\nThe native type of the handle is `HWND` on Windows, `NSView*` on macOS, and\n`Window` (`unsigned long`) on Linux.\n`win.hookWindowMessage(message, callback)` Windows\n\n`message` Integer\n`callback` Function\n`wParam` Buffer - The `wParam` provided to the WndProc\n`lParam` Buffer - The `lParam` provided to the WndProc\n\nHooks a windows message. The `callback` is called when\nthe message is received in the WndProc.\n`win.isWindowMessageHooked(message)` Windows\n\n`message` Integer\n\nReturns `boolean` - `true` or `false` depending on whether the message is hooked.\n`win.unhookWindowMessage(message)` Windows\n\n`message` Integer\n\nUnhook the window message.\n`win.unhookAllWindowMessages()` Windows\nUnhooks all of the window messages.\n`win.setRepresentedFilename(filename)` macOS\n\n`filename` string\n\nSets the pathname of the file the window represents, and the icon of the file\nwill show in window's title bar.\n`win.getRepresentedFilename()` macOS\nReturns `string` - The pathname of the file the window represents.\n`win.setDocumentEdited(edited)` macOS\n\n`edited` boolean\n\nSpecifies whether the window\u2019s document has been edited, and the icon in title\nbar will become gray when set to `true`.\n`win.isDocumentEdited()` macOS\nReturns `boolean` - Whether the window's document has been edited.\n`win.focusOnWebView()`\n`win.blurWebView()`\n`win.capturePage([rect, opts])`\n\n`rect` Rectangle (optional) - The bounds to capture\n`opts` Object (optional)\n`stayHidden` boolean (optional) -  Keep the page hidden instead of visible. Default is `false`.\n`stayAwake` boolean (optional) -  Keep the system awake instead of allowing it to sleep. Default is `false`.\n\nReturns `Promise<NativeImage>` - Resolves with a NativeImage\nCaptures a snapshot of the page within `rect`. Omitting `rect` will capture the whole visible page. If the page is not visible, `rect` may be empty. The page is considered visible when its browser window is hidden and the capturer count is non-zero. If you would like the page to stay hidden, you should ensure that `stayHidden` is set to true.\n`win.loadURL(url[, options])`\n\n`url` string\n`options` Object (optional)\n`httpReferrer` (string | Referrer) (optional) - An HTTP Referrer URL.\n`userAgent` string (optional) - A user agent originating the request.\n`extraHeaders` string (optional) - Extra headers separated by \"\\n\"\n`postData` (UploadRawData | UploadFile)[] (optional)\n`baseURLForDataURL` string (optional) - Base URL (with trailing path separator) for files to be loaded by the data URL. This is needed only if the specified `url` is a data URL and needs to load other files.\n\nReturns `Promise<void>` - the promise will resolve when the page has finished loading\n(see did-finish-load), and rejects\nif the page fails to load (see did-fail-load).\nSame as webContents.loadURL(url[, options]).\nThe `url` can be a remote address (e.g. `http://`) or a path to a local\nHTML file using the `file://` protocol.\nTo ensure that file URLs are properly formatted, it is recommended to use\nNode's url.format\nmethod:\n```javascript\nconst url = require('url').format({\n  protocol: 'file',\n  slashes: true,\n  pathname: require('path').join(__dirname, 'index.html')\n})\nwin.loadURL(url)\n```\nYou can load a URL using a `POST` request with URL-encoded data by doing\nthe following:\n`javascript\nwin.loadURL('http://localhost:8000/post', {\n  postData: [{\n    type: 'rawData',\n    bytes: Buffer.from('hello=world')\n  }],\n  extraHeaders: 'Content-Type: application/x-www-form-urlencoded'\n})`\n`win.loadFile(filePath[, options])`\n\n`filePath` string\n`options` Object (optional)\n`query` Record (optional) - Passed to `url.format()`.\n`search` string (optional) - Passed to `url.format()`.\n`hash` string (optional) - Passed to `url.format()`.\n\nReturns `Promise<void>` - the promise will resolve when the page has finished loading\n(see did-finish-load), and rejects\nif the page fails to load (see did-fail-load).\nSame as `webContents.loadFile`, `filePath` should be a path to an HTML\nfile relative to the root of your application.  See the `webContents` docs\nfor more information.\n`win.reload()`\nSame as `webContents.reload`.\n`win.setMenu(menu)` Linux Windows\n\n`menu` Menu | null\n\nSets the `menu` as the window's menu bar.\n`win.removeMenu()` Linux Windows\nRemove the window's menu bar.\n`win.setProgressBar(progress[, options])`\n\n`progress` Double\n`options` Object (optional)\n`mode` string Windows - Mode for the progress bar. Can be `none`, `normal`, `indeterminate`, `error` or `paused`.\n\nSets progress value in progress bar. Valid range is [0, 1.0].\nRemove progress bar when progress < 0;\nChange to indeterminate mode when progress > 1.\nOn Linux platform, only supports Unity desktop environment, you need to specify\nthe `*.desktop` file name to `desktopName` field in `package.json`. By default,\nit will assume `{app.name}.desktop`.\nOn Windows, a mode can be passed. Accepted values are `none`, `normal`,\n`indeterminate`, `error`, and `paused`. If you call `setProgressBar` without a\nmode set (but with a value within the valid range), `normal` will be assumed.\n`win.setOverlayIcon(overlay, description)` Windows\n\n`overlay` NativeImage | null - the icon to display on the bottom\nright corner of the taskbar icon. If this parameter is `null`, the overlay is\ncleared\n`description` string - a description that will be provided to Accessibility\nscreen readers\n\nSets a 16 x 16 pixel overlay onto the current taskbar icon, usually used to\nconvey some sort of application status or to passively notify the user.\n`win.invalidateShadow()` macOS\nInvalidates the window shadow so that it is recomputed based on the current window shape.\n`BrowserWindows` that are transparent can sometimes leave behind visual artifacts on macOS.\nThis method can be used to clear these artifacts when, for example, performing an animation.\n`win.setHasShadow(hasShadow)`\n\n`hasShadow` boolean\n\nSets whether the window should have a shadow.\n`win.hasShadow()`\nReturns `boolean` - Whether the window has a shadow.\n`win.setOpacity(opacity)` Windows macOS\n\n`opacity` number - between 0.0 (fully transparent) and 1.0 (fully opaque)\n\nSets the opacity of the window. On Linux, does nothing. Out of bound number\nvalues are clamped to the [0, 1] range.\n`win.getOpacity()`\nReturns `number` - between 0.0 (fully transparent) and 1.0 (fully opaque). On\nLinux, always returns 1.\n`win.setShape(rects)` Windows Linux Experimental\n\n`rects` Rectangle[] - Sets a shape on the window.\n  Passing an empty list reverts the window to being rectangular.\n\nSetting a window shape determines the area within the window where the system\npermits drawing and user interaction. Outside of the given region, no pixels\nwill be drawn and no mouse events will be registered. Mouse events outside of\nthe region will not be received by that window, but will fall through to\nwhatever is behind the window.\n`win.setThumbarButtons(buttons)` Windows\n\n`buttons` ThumbarButton[]\n\nReturns `boolean` - Whether the buttons were added successfully\nAdd a thumbnail toolbar with a specified set of buttons to the thumbnail image\nof a window in a taskbar button layout. Returns a `boolean` object indicates\nwhether the thumbnail has been added successfully.\nThe number of buttons in thumbnail toolbar should be no greater than 7 due to\nthe limited room. Once you setup the thumbnail toolbar, the toolbar cannot be\nremoved due to the platform's limitation. But you can call the API with an empty\narray to clean the buttons.\nThe `buttons` is an array of `Button` objects:\n\n`Button` Object\n`icon` NativeImage - The icon showing in thumbnail\n    toolbar.\n`click` Function\n`tooltip` string (optional) - The text of the button's tooltip.\n`flags` string[] (optional) - Control specific states and behaviors of the\n    button. By default, it is `['enabled']`.\n\nThe `flags` is an array that can include following `string`s:\n\n`enabled` - The button is active and available to the user.\n`disabled` - The button is disabled. It is present, but has a visual state\n  indicating it will not respond to user action.\n`dismissonclick` - When the button is clicked, the thumbnail window closes\n  immediately.\n`nobackground` - Do not draw a button border, use only the image.\n`hidden` - The button is not shown to the user.\n`noninteractive` - The button is enabled but not interactive; no pressed\n  button state is drawn. This value is intended for instances where the button\n  is used in a notification.\n\n`win.setThumbnailClip(region)` Windows\n\n`region` Rectangle - Region of the window\n\nSets the region of the window to show as the thumbnail image displayed when\nhovering over the window in the taskbar. You can reset the thumbnail to be\nthe entire window by specifying an empty region:\n`{ x: 0, y: 0, width: 0, height: 0 }`.\n`win.setThumbnailToolTip(toolTip)` Windows\n\n`toolTip` string\n\nSets the toolTip that is displayed when hovering over the window thumbnail\nin the taskbar.\n`win.setAppDetails(options)` Windows\n\n`options` Object\n`appId` string (optional) - Window's App User Model ID.\n    It has to be set, otherwise the other options will have no effect.\n`appIconPath` string (optional) - Window's Relaunch Icon.\n`appIconIndex` Integer (optional) - Index of the icon in `appIconPath`.\n    Ignored when `appIconPath` is not set. Default is `0`.\n`relaunchCommand` string (optional) - Window's Relaunch Command.\n`relaunchDisplayName` string (optional) - Window's Relaunch Display Name.\n\nSets the properties for the window's taskbar button.\nNote: `relaunchCommand` and `relaunchDisplayName` must always be set\ntogether. If one of those properties is not set, then neither will be used.\n`win.showDefinitionForSelection()` macOS\nSame as `webContents.showDefinitionForSelection()`.\n`win.setIcon(icon)` Windows Linux\n\n`icon` NativeImage | string\n\nChanges window icon.\n`win.setWindowButtonVisibility(visible)` macOS\n\n`visible` boolean\n\nSets whether the window traffic light buttons should be visible.\n`win.setAutoHideMenuBar(hide)` Windows Linux\n\n`hide` boolean\n\nSets whether the window menu bar should hide itself automatically. Once set the\nmenu bar will only show when users press the single `Alt` key.\nIf the menu bar is already visible, calling `setAutoHideMenuBar(true)` won't hide it immediately.\n`win.isMenuBarAutoHide()` Windows Linux\nReturns `boolean` - Whether menu bar automatically hides itself.\n`win.setMenuBarVisibility(visible)` Windows Linux\n\n`visible` boolean\n\nSets whether the menu bar should be visible. If the menu bar is auto-hide, users can still bring up the menu bar by pressing the single `Alt` key.\n`win.isMenuBarVisible()` Windows Linux\nReturns `boolean` - Whether the menu bar is visible.\n`win.setVisibleOnAllWorkspaces(visible[, options])` macOS Linux\n\n`visible` boolean\n`options` Object (optional)\n`visibleOnFullScreen` boolean (optional) macOS - Sets whether\n    the window should be visible above fullscreen windows.\n`skipTransformProcessType` boolean (optional) macOS - Calling\n    setVisibleOnAllWorkspaces will by default transform the process\n    type between UIElementApplication and ForegroundApplication to\n    ensure the correct behavior. However, this will hide the window\n    and dock for a short time every time it is called. If your window\n    is already of type UIElementApplication, you can bypass this\n    transformation by passing true to skipTransformProcessType.\n\nSets whether the window should be visible on all workspaces.\nNote: This API does nothing on Windows.\n`win.isVisibleOnAllWorkspaces()` macOS Linux\nReturns `boolean` - Whether the window is visible on all workspaces.\nNote: This API always returns false on Windows.\n`win.setIgnoreMouseEvents(ignore[, options])`\n\n`ignore` boolean\n`options` Object (optional)\n`forward` boolean (optional) macOS Windows - If true, forwards mouse move\n    messages to Chromium, enabling mouse related events such as `mouseleave`.\n    Only used when `ignore` is true. If `ignore` is false, forwarding is always\n    disabled regardless of this value.\n\nMakes the window ignore all mouse events.\nAll mouse events happened in this window will be passed to the window below\nthis window, but if this window has focus, it will still receive keyboard\nevents.\n`win.setContentProtection(enable)` macOS Windows\n\n`enable` boolean\n\nPrevents the window contents from being captured by other apps.\nOn macOS it sets the NSWindow's sharingType to NSWindowSharingNone.\nOn Windows it calls SetWindowDisplayAffinity with `WDA_EXCLUDEFROMCAPTURE`.\nFor Windows 10 version 2004 and up the window will be removed from capture entirely,\nolder Windows versions behave as if `WDA_MONITOR` is applied capturing a black window.\n`win.setFocusable(focusable)` macOS Windows\n\n`focusable` boolean\n\nChanges whether the window can be focused.\nOn macOS it does not remove the focus from the window.\n`win.isFocusable()` macOS Windows\nReturns `boolean` - Whether the window can be focused.\n`win.setParentWindow(parent)`\n\n`parent` BrowserWindow | null\n\nSets `parent` as current window's parent window, passing `null` will turn\ncurrent window into a top-level window.\n`win.getParentWindow()`\nReturns `BrowserWindow | null` - The parent window or `null` if there is no parent.\n`win.getChildWindows()`\nReturns `BrowserWindow[]` - All child windows.\n`win.setAutoHideCursor(autoHide)` macOS\n\n`autoHide` boolean\n\nControls whether to hide cursor when typing.\n`win.selectPreviousTab()` macOS\nSelects the previous tab when native tabs are enabled and there are other\ntabs in the window.\n`win.selectNextTab()` macOS\nSelects the next tab when native tabs are enabled and there are other\ntabs in the window.\n`win.mergeAllWindows()` macOS\nMerges all windows into one window with multiple tabs when native tabs\nare enabled and there is more than one open window.\n`win.moveTabToNewWindow()` macOS\nMoves the current tab into a new window if native tabs are enabled and\nthere is more than one tab in the current window.\n`win.toggleTabBar()` macOS\nToggles the visibility of the tab bar if native tabs are enabled and\nthere is only one tab in the current window.\n`win.addTabbedWindow(browserWindow)` macOS\n\n`browserWindow` BrowserWindow\n\nAdds a window as a tab on this window, after the tab for the window instance.\n`win.setVibrancy(type)` macOS\n\n`type` string | null - Can be `appearance-based`, `light`, `dark`, `titlebar`,\n  `selection`, `menu`, `popover`, `sidebar`, `medium-light`, `ultra-dark`, `header`, `sheet`, `window`, `hud`, `fullscreen-ui`, `tooltip`, `content`, `under-window`, or `under-page`. See\n  the macOS documentation for more details.\n\nAdds a vibrancy effect to the browser window. Passing `null` or an empty string\nwill remove the vibrancy effect on the window.\nNote that `appearance-based`, `light`, `dark`, `medium-light`, and `ultra-dark` have been\ndeprecated and will be removed in an upcoming version of macOS.\n`win.setWindowButtonPosition(position)` macOS\n\n`position` Point | null\n\nSet a custom position for the traffic light buttons in frameless window.\nPassing `null` will reset the position to default.\n`win.getWindowButtonPosition()` macOS\nReturns `Point | null` - The custom position for the traffic light buttons in\nframeless window, `null` will be returned when there is no custom position.\n`win.setTrafficLightPosition(position)` macOS Deprecated\n\n`position` Point\n\nSet a custom position for the traffic light buttons in frameless window.\nPassing `{ x: 0, y: 0 }` will reset the position to default.\n\nNote\nThis function is deprecated. Use setWindowButtonPosition instead.\n\n`win.getTrafficLightPosition()` macOS Deprecated\nReturns `Point` - The custom position for the traffic light buttons in\nframeless window, `{ x: 0, y: 0 }` will be returned when there is no custom\nposition.\n\nNote\nThis function is deprecated. Use getWindowButtonPosition instead.\n\n`win.setTouchBar(touchBar)` macOS\n\n`touchBar` TouchBar | null\n\nSets the touchBar layout for the current window. Specifying `null` or\n`undefined` clears the touch bar. This method only has an effect if the\nmachine has a touch bar.\nNote: The TouchBar API is currently experimental and may change or be\nremoved in future Electron releases.\n`win.setBrowserView(browserView)` Experimental\n\n`browserView` BrowserView | null - Attach `browserView` to `win`.\nIf there are other `BrowserView`s attached, they will be removed from\nthis window.\n\n`win.getBrowserView()` Experimental\nReturns `BrowserView | null` - The `BrowserView` attached to `win`. Returns `null`\nif one is not attached. Throws an error if multiple `BrowserView`s are attached.\n`win.addBrowserView(browserView)` Experimental\n\n`browserView` BrowserView\n\nReplacement API for setBrowserView supporting work with multi browser views.\n`win.removeBrowserView(browserView)` Experimental\n\n`browserView` BrowserView\n\n`win.setTopBrowserView(browserView)` Experimental\n\n`browserView` BrowserView\n\nRaises `browserView` above other `BrowserView`s attached to `win`.\nThrows an error if `browserView` is not attached to `win`.\n`win.getBrowserViews()` Experimental\nReturns `BrowserView[]` - an array of all BrowserViews that have been attached\nwith `addBrowserView` or `setBrowserView`.\nNote: The BrowserView API is currently experimental and may change or be\nremoved in future Electron releases.\n`win.setTitleBarOverlay(options)` Windows\n\n`options` Object\n`color` String (optional) Windows - The CSS color of the Window Controls Overlay when enabled.\n`symbolColor` String (optional) Windows - The CSS color of the symbols on the Window Controls Overlay when enabled.\n`height` Integer (optional) Windows - The height of the title bar and Window Controls Overlay in pixels.\n\nOn a Window with Window Controls Overlay already enabled, this method updates\nthe style of the title bar overlay.",
    "tag": "electron"
  },
  {
    "title": "contextBridge",
    "source": "https://github.com/electron/electron/tree/main/docs/api/context-bridge.md",
    "content": "contextBridge\n\nCreate a safe, bi-directional, synchronous bridge across isolated contexts\n\nProcess: Renderer\nAn example of exposing an API to a renderer from an isolated preload script is given below:\n```javascript\n// Preload (Isolated World)\nconst { contextBridge, ipcRenderer } = require('electron')\ncontextBridge.exposeInMainWorld(\n  'electron',\n  {\n    doThing: () => ipcRenderer.send('do-a-thing')\n  }\n)\n```\n```javascript\n// Renderer (Main World)\nwindow.electron.doThing()\n```\nGlossary\nMain World\nThe \"Main World\" is the JavaScript context that your main renderer code runs in. By default, the\npage you load in your renderer executes code in this world.\nIsolated World\nWhen `contextIsolation` is enabled in your `webPreferences` (this is the default behavior since Electron 12.0.0), your `preload` scripts run in an\n\"Isolated World\".  You can read more about context isolation and what it affects in the\nsecurity docs.\nMethods\nThe `contextBridge` module has the following methods:\n`contextBridge.exposeInMainWorld(apiKey, api)`\n\n`apiKey` string - The key to inject the API onto `window` with.  The API will be accessible on `window[apiKey]`.\n`api` any - Your API, more information on what this API can be and how it works is available below.\n\n`contextBridge.exposeInIsolatedWorld(worldId, apiKey, api)`\n\n`worldId` Integer - The ID of the world to inject the API into. `0` is the default world, `999` is the world used by Electron's `contextIsolation` feature. Using 999 would expose the object for preload context. We recommend using 1000+ while creating isolated world.\n`apiKey` string - The key to inject the API onto `window` with.  The API will be accessible on `window[apiKey]`.\n`api` any - Your API, more information on what this API can be and how it works is available below.\n\nUsage\nAPI\nThe `api` provided to exposeInMainWorld must be a `Function`, `string`, `number`, `Array`, `boolean`, or an object\nwhose keys are strings and values are a `Function`, `string`, `number`, `Array`, `boolean`, or another nested object that meets the same conditions.\n`Function` values are proxied to the other context and all other values are copied and frozen. Any data / primitives sent in\nthe API become immutable and updates on either side of the bridge do not result in an update on the other side.\nAn example of a complex API is shown below:\n```javascript\nconst { contextBridge, ipcRenderer } = require('electron')\ncontextBridge.exposeInMainWorld(\n  'electron',\n  {\n    doThing: () => ipcRenderer.send('do-a-thing'),\n    myPromises: [Promise.resolve(), Promise.reject(new Error('whoops'))],\n    anAsyncFunction: async () => 123,\n    data: {\n      myFlags: ['a', 'b', 'c'],\n      bootTime: 1234\n    },\n    nestedAPI: {\n      evenDeeper: {\n        youCanDoThisAsMuchAsYouWant: {\n          fn: () => ({\n            returnData: 123\n          })\n        }\n      }\n    }\n  }\n)\n```\nAn example of `exposeInIsolatedWorld` is shown below:\n```javascript\nconst { contextBridge, ipcRenderer } = require('electron')\ncontextBridge.exposeInIsolatedWorld(\n  1004,\n  'electron',\n  {\n    doThing: () => ipcRenderer.send('do-a-thing')\n  }\n)\n```\n```javascript\n// Renderer (In isolated world id1004)\nwindow.electron.doThing()\n```\nAPI Functions\n`Function` values that you bind through the `contextBridge` are proxied through Electron to ensure that contexts remain isolated.  This\nresults in some key limitations that we've outlined below.\nParameter / Error / Return Type support\nBecause parameters, errors and return values are copied when they are sent over the bridge, there are only certain types that can be used.\nAt a high level, if the type you want to use can be serialized and deserialized into the same object it will work.  A table of type support\nhas been included below for completeness:\n| Type | Complexity | Parameter Support | Return Value Support | Limitations |\n| ---- | ---------- | ----------------- | -------------------- | ----------- |\n| `string` | Simple | \u2705 | \u2705 | N/A |\n| `number` | Simple | \u2705 | \u2705 | N/A |\n| `boolean` | Simple | \u2705 | \u2705 | N/A |\n| `Object` | Complex | \u2705 | \u2705 | Keys must be supported using only \"Simple\" types in this table.  Values must be supported in this table.  Prototype modifications are dropped.  Sending custom classes will copy values but not the prototype. |\n| `Array` | Complex | \u2705 | \u2705 | Same limitations as the `Object` type |\n| `Error` | Complex | \u2705 | \u2705 | Errors that are thrown are also copied, this can result in the message and stack trace of the error changing slightly due to being thrown in a different context, and any custom properties on the Error object will be lost |\n| `Promise` | Complex | \u2705 | \u2705 | N/A\n| `Function` | Complex | \u2705 | \u2705 | Prototype modifications are dropped.  Sending classes or constructors will not work. |\n| Cloneable Types | Simple | \u2705 | \u2705 | See the linked document on cloneable types |\n| `Element` | Complex | \u2705 | \u2705 | Prototype modifications are dropped.  Sending custom elements will not work. |\n| `Blob` | Complex | \u2705 | \u2705 | N/A |\n| `Symbol` | N/A | \u274c | \u274c | Symbols cannot be copied across contexts so they are dropped |\nIf the type you care about is not in the above table, it is probably not supported.\nExposing Node Global Symbols\nThe `contextBridge` can be used by the preload script to give your renderer access to Node APIs.\nThe table of supported types described above also applies to Node APIs that you expose through `contextBridge`.\nPlease note that many Node APIs grant access to local system resources.\nBe very cautious about which globals and APIs you expose to untrusted remote content.\n```javascript\nconst { contextBridge } = require('electron')\nconst crypto = require('crypto')\ncontextBridge.exposeInMainWorld('nodeCrypto', {\n  sha256sum (data) {\n    const hash = crypto.createHash('sha256')\n    hash.update(data)\n    return hash.digest('hex')\n  }\n})",
    "tag": "electron"
  },
  {
    "title": "Class: ServiceWorkers",
    "source": "https://github.com/electron/electron/tree/main/docs/api/service-workers.md",
    "content": "Class: ServiceWorkers\n\nQuery and receive events from a sessions active service workers.\n\nProcess: Main\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\nInstances of the `ServiceWorkers` class are accessed by using `serviceWorkers` property of\na `Session`.\nFor example:\n```javascript\nconst { session } = require('electron')\n// Get all service workers.\nconsole.log(session.defaultSession.serviceWorkers.getAllRunning())\n// Handle logs and get service worker info\nsession.defaultSession.serviceWorkers.on('console-message', (event, messageDetails) => {\n  console.log(\n    'Got service worker message',\n    messageDetails,\n    'from',\n    session.defaultSession.serviceWorkers.getFromVersionID(messageDetails.versionId)\n  )\n})\n```\nInstance Events\nThe following events are available on instances of `ServiceWorkers`:\nEvent: 'console-message'\nReturns:\n\n`event` Event\n`messageDetails` Object - Information about the console message\n`message` string - The actual console message\n`versionId` number - The version ID of the service worker that sent the log message\n`source` string - The type of source for this message.  Can be `javascript`, `xml`, `network`, `console-api`, `storage`, `rendering`, `security`, `deprecation`, `worker`, `violation`, `intervention`, `recommendation` or `other`.\n`level` number - The log level, from 0 to 3. In order it matches `verbose`, `info`, `warning` and `error`.\n`sourceUrl` string - The URL the message came from\n`lineNumber` number - The line number of the source that triggered this console message\n\nEmitted when a service worker logs something to the console.\nEvent: 'registration-completed'\nReturns:\n\n`event` Event\n`details` Object - Information about the registered service worker\n`scope` string - The base URL that a service worker is registered for\n\nEmitted when a service worker has been registered. Can occur after a call to navigator.serviceWorker.register('/sw.js') successfully resolves or when a Chrome extension is loaded.\nInstance Methods\nThe following methods are available on instances of `ServiceWorkers`:\n`serviceWorkers.getAllRunning()`\nReturns `Record<number, ServiceWorkerInfo>` - A ServiceWorkerInfo object where the keys are the service worker version ID and the values are the information about that service worker.\n`serviceWorkers.getFromVersionID(versionId)`\n\n`versionId` number\n\nReturns ServiceWorkerInfo - Information about this service worker",
    "tag": "electron"
  },
  {
    "title": "inAppPurchase",
    "source": "https://github.com/electron/electron/tree/main/docs/api/in-app-purchase.md",
    "content": "inAppPurchase\n\nIn-app purchases on Mac App Store.\n\nProcess: Main\nEvents\nThe `inAppPurchase` module emits the following events:\nEvent: 'transactions-updated'\nEmitted when one or more transactions have been updated.\nReturns:\n\n`event` Event\n`transactions` Transaction[] - Array of Transaction objects.\n\nMethods\nThe `inAppPurchase` module has the following methods:\n`inAppPurchase.purchaseProduct(productID[, opts])`\n\n`productID` string\n`opts` Integer | Object (optional) - If specified as an integer, defines the quantity.\n`quantity` Integer (optional) - The number of items the user wants to purchase.\n`username` string (optional) - The string that associates the transaction with a user account on your service (applicationUsername).\n\nReturns `Promise<boolean>` - Returns `true` if the product is valid and added to the payment queue.\nYou should listen for the `transactions-updated` event as soon as possible and certainly before you call `purchaseProduct`.\n`inAppPurchase.getProducts(productIDs)`\n\n`productIDs` string[] - The identifiers of the products to get.\n\nReturns `Promise<Product[]>` - Resolves with an array of Product objects.\nRetrieves the product descriptions.\n`inAppPurchase.canMakePayments()`\nReturns `boolean` - whether a user can make a payment.\n`inAppPurchase.restoreCompletedTransactions()`\nRestores finished transactions. This method can be called either to install purchases on additional devices, or to restore purchases for an application that the user deleted and reinstalled.\nThe payment queue delivers a new transaction for each previously completed transaction that can be restored. Each transaction includes a copy of the original transaction.\n`inAppPurchase.getReceiptURL()`\nReturns `string` - the path to the receipt.\n`inAppPurchase.finishAllTransactions()`\nCompletes all pending transactions.\n`inAppPurchase.finishTransactionByDate(date)`\n\n`date` string - The ISO formatted date of the transaction to finish.\n",
    "tag": "electron"
  },
  {
    "title": "MessagePortMain",
    "source": "https://github.com/electron/electron/tree/main/docs/api/message-port-main.md",
    "content": "MessagePortMain\n`MessagePortMain` is the main-process-side equivalent of the DOM\n[`MessagePort`][] object. It behaves similarly to the DOM version, with the\nexception that it uses the Node.js `EventEmitter` event system, instead of the\nDOM `EventTarget` system. This means you should use `port.on('message', ...)`\nto listen for events, instead of `port.onmessage = ...` or\n`port.addEventListener('message', ...)`\nSee the Channel Messaging API documentation for more information on using\nchannel messaging.\n`MessagePortMain` is an [EventEmitter][event-emitter].\nClass: MessagePortMain\n\nPort interface for channel messaging in the main process.\n\nProcess: Main\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\nInstance Methods\n`port.postMessage(message, [transfer])`\n\n`message` any\n`transfer` MessagePortMain[] (optional)\n\nSends a message from the port, and optionally, transfers ownership of objects\nto other browsing contexts.\n`port.start()`\nStarts the sending of messages queued on the port. Messages will be queued\nuntil this method is called.\n`port.close()`\nDisconnects the port, so it is no longer active.\nInstance Events\nEvent: 'message'\nReturns:\n\n`messageEvent` Object\n`data` any\n`ports` MessagePortMain[]\n\nEmitted when a MessagePortMain object receives a message.\nEvent: 'close'\nEmitted when the remote end of a MessagePortMain object becomes disconnected.",
    "tag": "electron"
  },
  {
    "title": "webFrame",
    "source": "https://github.com/electron/electron/tree/main/docs/api/web-frame.md",
    "content": "webFrame\n\nCustomize the rendering of the current web page.\n\nProcess: Renderer\n`webFrame` export of the Electron module is an instance of the `WebFrame`\nclass representing the current frame. Sub-frames can be retrieved by\ncertain properties and methods (e.g. `webFrame.firstChild`).\nAn example of zooming current page to 200%.\n```javascript\nconst { webFrame } = require('electron')\nwebFrame.setZoomFactor(2)\n```\nMethods\nThe `WebFrame` class has the following instance methods:\n`webFrame.setZoomFactor(factor)`\n\n`factor` Double - Zoom factor; default is 1.0.\n\nChanges the zoom factor to the specified factor. Zoom factor is\nzoom percent divided by 100, so 300% = 3.0.\nThe factor must be greater than 0.0.\n`webFrame.getZoomFactor()`\nReturns `number` - The current zoom factor.\n`webFrame.setZoomLevel(level)`\n\n`level` number - Zoom level.\n\nChanges the zoom level to the specified level. The original size is 0 and each\nincrement above or below represents zooming 20% larger or smaller to default\nlimits of 300% and 50% of original size, respectively.\n\nNOTE: The zoom policy at the Chromium level is same-origin, meaning that the\nzoom level for a specific domain propagates across all instances of windows with\nthe same domain. Differentiating the window URLs will make zoom work per-window.\n\n`webFrame.getZoomLevel()`\nReturns `number` - The current zoom level.\n`webFrame.setVisualZoomLevelLimits(minimumLevel, maximumLevel)`\n\n`minimumLevel` number\n`maximumLevel` number\n\nSets the maximum and minimum pinch-to-zoom level.\n\nNOTE: Visual zoom is disabled by default in Electron. To re-enable it, call:\n`js\nwebFrame.setVisualZoomLevelLimits(1, 3)`\nNOTE: Visual zoom only applies to pinch-to-zoom behavior. Cmd+/-/0 zoom shortcuts are\ncontrolled by the 'zoomIn', 'zoomOut', and 'resetZoom' MenuItem roles in the application\nMenu. To disable shortcuts, manually define the Menu and omit zoom roles\nfrom the definition.\n\n`webFrame.setSpellCheckProvider(language, provider)`\n\n`language` string\n`provider` Object\n`spellCheck` Function\n`words` string[]\n`callback` Function\n`misspeltWords` string[]\n\n\n\nSets a provider for spell checking in input fields and text areas.\nIf you want to use this method you must disable the builtin spellchecker when you\nconstruct the window.\n`js\nconst mainWindow = new BrowserWindow({\n  webPreferences: {\n    spellcheck: false\n  }\n})`\nThe `provider` must be an object that has a `spellCheck` method that accepts\nan array of individual words for spellchecking.\nThe `spellCheck` function runs asynchronously and calls the `callback` function\nwith an array of misspelt words when complete.\nAn example of using node-spellchecker as provider:\n`javascript\nconst { webFrame } = require('electron')\nconst spellChecker = require('spellchecker')\nwebFrame.setSpellCheckProvider('en-US', {\n  spellCheck (words, callback) {\n    setTimeout(() => {\n      const spellchecker = require('spellchecker')\n      const misspelled = words.filter(x => spellchecker.isMisspelled(x))\n      callback(misspelled)\n    }, 0)\n  }\n})`\n`webFrame.insertCSS(css[, options])`\n\n`css` string\n`options` Object (optional)\n`cssOrigin` string (optional) - Can be either 'user' or 'author'. Sets the cascade origin of the inserted stylesheet. Default is 'author'.\n\nReturns `string` - A key for the inserted CSS that can later be used to remove\nthe CSS via `webFrame.removeInsertedCSS(key)`.\nInjects CSS into the current web page and returns a unique key for the inserted\nstylesheet.\n`webFrame.removeInsertedCSS(key)`\n\n`key` string\n\nRemoves the inserted CSS from the current web page. The stylesheet is identified\nby its key, which is returned from `webFrame.insertCSS(css)`.\n`webFrame.insertText(text)`\n\n`text` string\n\nInserts `text` to the focused element.\n`webFrame.executeJavaScript(code[, userGesture, callback])`\n\n`code` string\n`userGesture` boolean (optional) - Default is `false`.\n`callback` Function (optional) - Called after script has been executed. Unless\n  the frame is suspended (e.g. showing a modal alert), execution will be\n  synchronous and the callback will be invoked before the method returns. For\n  compatibility with an older version of this method, the error parameter is\n  second.\n`result` Any\n`error` Error\n\nReturns `Promise<any>` - A promise that resolves with the result of the executed\ncode or is rejected if execution throws or results in a rejected promise.\nEvaluates `code` in page.\nIn the browser window some HTML APIs like `requestFullScreen` can only be\ninvoked by a gesture from the user. Setting `userGesture` to `true` will remove\nthis limitation.\n`webFrame.executeJavaScriptInIsolatedWorld(worldId, scripts[, userGesture, callback])`\n\n`worldId` Integer - The ID of the world to run the javascript\n            in, `0` is the default main world (where content runs), `999` is the\n            world used by Electron's `contextIsolation` feature. Accepts values\n            in the range 1..536870911.\n`scripts` WebSource[]\n`userGesture` boolean (optional) - Default is `false`.\n`callback` Function (optional) - Called after script has been executed. Unless\n  the frame is suspended (e.g. showing a modal alert), execution will be\n  synchronous and the callback will be invoked before the method returns.  For\n  compatibility with an older version of this method, the error parameter is\n  second.\n`result` Any\n`error` Error\n\nReturns `Promise<any>` - A promise that resolves with the result of the executed\ncode or is rejected if execution could not start.\nWorks like `executeJavaScript` but evaluates `scripts` in an isolated context.\nNote that when the execution of script fails, the returned promise will not\nreject and the `result` would be `undefined`. This is because Chromium does not\ndispatch errors of isolated worlds to foreign worlds.\n`webFrame.setIsolatedWorldInfo(worldId, info)`\n\n`worldId` Integer - The ID of the world to run the javascript in, `0` is the default world, `999` is the world used by Electrons `contextIsolation` feature. Chrome extensions reserve the range of IDs in `[1 << 20, 1 << 29)`. You can provide any integer here.\n`info` Object\n`securityOrigin` string (optional) - Security origin for the isolated world.\n`csp` string (optional) - Content Security Policy for the isolated world.\n`name` string (optional) - Name for isolated world. Useful in devtools.\n\nSet the security origin, content security policy and name of the isolated world.\nNote: If the `csp` is specified, then the `securityOrigin` also has to be specified.\n`webFrame.getResourceUsage()`\nReturns `Object`:\n\n`images` MemoryUsageDetails\n`scripts` MemoryUsageDetails\n`cssStyleSheets` MemoryUsageDetails\n`xslStyleSheets` MemoryUsageDetails\n`fonts` MemoryUsageDetails\n`other` MemoryUsageDetails\n\nReturns an object describing usage information of Blink's internal memory\ncaches.\n`javascript\nconst { webFrame } = require('electron')\nconsole.log(webFrame.getResourceUsage())`\nThis will generate:\n`javascript\n{\n  images: {\n    count: 22,\n    size: 2549,\n    liveSize: 2542\n  },\n  cssStyleSheets: { /* same with \"images\" */ },\n  xslStyleSheets: { /* same with \"images\" */ },\n  fonts: { /* same with \"images\" */ },\n  other: { /* same with \"images\" */ }\n}`\n`webFrame.clearCache()`\nAttempts to free memory that is no longer being used (like images from a\nprevious navigation).\nNote that blindly calling this method probably makes Electron slower since it\nwill have to refill these emptied caches, you should only call it if an event\nin your app has occurred that makes you think your page is actually using less\nmemory (i.e. you have navigated from a super heavy page to a mostly empty one,\nand intend to stay there).\n`webFrame.getFrameForSelector(selector)`\n\n`selector` string - CSS selector for a frame element.\n\nReturns `WebFrame` - The frame element in `webFrame's` document selected by\n`selector`, `null` would be returned if `selector` does not select a frame or\nif the frame is not in the current renderer process.\n`webFrame.findFrameByName(name)`\n\n`name` string\n\nReturns `WebFrame` - A child of `webFrame` with the supplied `name`, `null`\nwould be returned if there's no such frame or if the frame is not in the current\nrenderer process.\n`webFrame.findFrameByRoutingId(routingId)`\n\n`routingId` Integer - An `Integer` representing the unique frame id in the\n   current renderer process. Routing IDs can be retrieved from `WebFrame`\n   instances (`webFrame.routingId`) and are also passed by frame\n   specific `WebContents` navigation events (e.g. `did-frame-navigate`)\n\nReturns `WebFrame` - that has the supplied `routingId`, `null` if not found.\n`webFrame.isWordMisspelled(word)`\n\n`word` string - The word to be spellchecked.\n\nReturns `boolean` - True if the word is misspelled according to the built in\nspellchecker, false otherwise. If no dictionary is loaded, always return false.\n`webFrame.getWordSuggestions(word)`\n\n`word` string - The misspelled word.\n\nReturns `string[]` - A list of suggested words for a given word. If the word\nis spelled correctly, the result will be empty.\nProperties\n`webFrame.top` Readonly\nA `WebFrame | null` representing top frame in frame hierarchy to which `webFrame`\nbelongs, the property would be `null` if top frame is not in the current\nrenderer process.\n`webFrame.opener` Readonly\nA `WebFrame | null` representing the frame which opened `webFrame`, the property would\nbe `null` if there's no opener or opener is not in the current renderer process.\n`webFrame.parent` Readonly\nA `WebFrame | null` representing parent frame of `webFrame`, the property would be\n`null` if `webFrame` is top or parent is not in the current renderer process.\n`webFrame.firstChild` Readonly\nA `WebFrame | null` representing the first child frame of `webFrame`, the property\nwould be `null` if `webFrame` has no children or if first child is not in the\ncurrent renderer process.\n`webFrame.nextSibling` Readonly\nA `WebFrame | null` representing next sibling frame, the property would be `null` if\n`webFrame` is the last frame in its parent or if the next sibling is not in the\ncurrent renderer process.\n`webFrame.routingId` Readonly\nAn `Integer` representing the unique frame id in the current renderer process.\nDistinct WebFrame instances that refer to the same underlying frame will have",
    "tag": "electron"
  },
  {
    "title": "Notification",
    "source": "https://github.com/electron/electron/tree/main/docs/api/notification.md",
    "content": "Notification\n\nCreate OS desktop notifications\n\nProcess: Main\nUsing in the renderer process\nIf you want to show Notifications from a renderer process you should use the HTML5 Notification API\nClass: Notification\n\nCreate OS desktop notifications\n\nProcess: Main\n`Notification` is an [EventEmitter][event-emitter].\nIt creates a new `Notification` with native properties as set by the `options`.\nStatic Methods\nThe `Notification` class has the following static methods:\n`Notification.isSupported()`\nReturns `boolean` - Whether or not desktop notifications are supported on the current system\n`new Notification([options])`\n\n`options` Object (optional)\n`title` string (optional) - A title for the notification, which will be shown at the top of the notification window when it is shown.\n`subtitle` string (optional) macOS - A subtitle for the notification, which will be displayed below the title.\n`body` string (optional) - The body text of the notification, which will be displayed below the title or subtitle.\n`silent` boolean (optional) - Whether or not to emit an OS notification noise when showing the notification.\n`icon` (string | NativeImage) (optional) - An icon to use in the notification.\n`hasReply` boolean (optional) macOS - Whether or not to add an inline reply option to the notification.\n`timeoutType` string (optional) Linux Windows - The timeout duration of the notification. Can be 'default' or 'never'.\n`replyPlaceholder` string (optional) macOS - The placeholder to write in the inline reply input field.\n`sound` string (optional) macOS - The name of the sound file to play when the notification is shown.\n`urgency` string (optional) Linux - The urgency level of the notification. Can be 'normal', 'critical', or 'low'.\n`actions` NotificationAction[] (optional) macOS - Actions to add to the notification. Please read the available actions and limitations in the `NotificationAction` documentation.\n`closeButtonText` string (optional) macOS - A custom title for the close button of an alert. An empty string will cause the default localized text to be used.\n`toastXml` string (optional) Windows - A custom description of the Notification on Windows superseding all properties above. Provides full customization of design and behavior of the notification.\n\nInstance Events\nObjects created with `new Notification` emit the following events:\nNote: Some events are only available on specific operating systems and are\nlabeled as such.\nEvent: 'show'\nReturns:\n\n`event` Event\n\nEmitted when the notification is shown to the user, note this could be fired\nmultiple times as a notification can be shown multiple times through the\n`show()` method.\nEvent: 'click'\nReturns:\n\n`event` Event\n\nEmitted when the notification is clicked by the user.\nEvent: 'close'\nReturns:\n\n`event` Event\n\nEmitted when the notification is closed by manual intervention from the user.\nThis event is not guaranteed to be emitted in all cases where the notification\nis closed.\nEvent: 'reply' macOS\nReturns:\n\n`event` Event\n`reply` string - The string the user entered into the inline reply field.\n\nEmitted when the user clicks the \"Reply\" button on a notification with `hasReply: true`.\nEvent: 'action' macOS\nReturns:\n\n`event` Event\n`index` number - The index of the action that was activated.\n\nEvent: 'failed' Windows\nReturns:\n\n`event` Event\n`error` string - The error encountered during execution of the `show()` method.\n\nEmitted when an error is encountered while creating and showing the native notification.\nInstance Methods\nObjects created with `new Notification` have the following instance methods:\n`notification.show()`\nImmediately shows the notification to the user, please note this means unlike the\nHTML5 Notification implementation, instantiating a `new Notification` does\nnot immediately show it to the user, you need to call this method before the OS\nwill display it.\nIf the notification has been shown before, this method will dismiss the previously\nshown notification and create a new one with identical properties.\n`notification.close()`\nDismisses the notification.\nInstance Properties\n`notification.title`\nA `string` property representing the title of the notification.\n`notification.subtitle`\nA `string` property representing the subtitle of the notification.\n`notification.body`\nA `string` property representing the body of the notification.\n`notification.replyPlaceholder`\nA `string` property representing the reply placeholder of the notification.\n`notification.sound`\nA `string` property representing the sound of the notification.\n`notification.closeButtonText`\nA `string` property representing the close button text of the notification.\n`notification.silent`\nA `boolean` property representing whether the notification is silent.\n`notification.hasReply`\nA `boolean` property representing whether the notification has a reply action.\n`notification.urgency` Linux\nA `string` property representing the urgency level of the notification. Can be 'normal', 'critical', or 'low'.\nDefault is 'low' - see NotifyUrgency for more information.\n`notification.timeoutType` Linux Windows\nA `string` property representing the type of timeout duration for the notification. Can be 'default' or 'never'.\nIf `timeoutType` is set to 'never', the notification never expires. It stays open until closed by the calling API or the user.\n`notification.actions`\nA NotificationAction[] property representing the actions of the notification.\n`notification.toastXml` Windows\nA `string` property representing the custom Toast XML of the notification.\nPlaying Sounds\nOn macOS, you can specify the name of the sound you'd like to play when the\nnotification is shown. Any of the default sounds (under System Preferences >\nSound) can be used, in addition to custom sound files. Be sure that the sound\nfile is copied under the app bundle (e.g., `YourApp.app/Contents/Resources`),\nor one of the following locations:\n\n`~/Library/Sounds`\n`/Library/Sounds`\n`/Network/Library/Sounds`\n`/System/Library/Sounds`\n\nSee the NSSound docs for more information.",
    "tag": "electron"
  },
  {
    "title": "Opening windows from the renderer",
    "source": "https://github.com/electron/electron/tree/main/docs/api/window-open.md",
    "content": "Opening windows from the renderer\nThere are several ways to control how windows are created from trusted or\nuntrusted content within a renderer. Windows can be created from the renderer in two ways:\n\nclicking on links or submitting forms adorned with `target=_blank`\nJavaScript calling `window.open()`\n\nFor same-origin content, the new window is created within the same process,\nenabling the parent to access the child window directly. This can be very\nuseful for app sub-windows that act as preference panels, or similar, as the\nparent can render to the sub-window directly, as if it were a `div` in the\nparent. This is the same behavior as in the browser.\nElectron pairs this native Chrome `Window` with a BrowserWindow under the hood.\nYou can take advantage of all the customization available when creating a\nBrowserWindow in the main process by using `webContents.setWindowOpenHandler()`\nfor renderer-created windows.\nBrowserWindow constructor options are set by, in increasing precedence\norder: parsed options from the `features` string from `window.open()`,\nsecurity-related webPreferences inherited from the parent, and options given by\nwebContents.setWindowOpenHandler.\nNote that `webContents.setWindowOpenHandler` has final say and full privilege\nbecause it is invoked in the main process.\n`window.open(url[, frameName][, features])`\n\n`url` string\n`frameName` string (optional)\n`features` string (optional)\n\nReturns Window | null\n`features` is a comma-separated key-value list, following the standard format of\nthe browser. Electron will parse `BrowserWindowConstructorOptions` out of this\nlist where possible, for convenience. For full control and better ergonomics,\nconsider using `webContents.setWindowOpenHandler` to customize the\nBrowserWindow creation.\nA subset of `WebPreferences` can be set directly,\nunnested, from the features string: `zoomFactor`, `nodeIntegration`, `preload`,\n`javascript`, `contextIsolation`, and `webviewTag`.\nFor example:\n`js\nwindow.open('https://github.com', '_blank', 'top=500,left=200,frame=false,nodeIntegration=no')`\nNotes:\n\nNode integration will always be disabled in the opened `window` if it is\n  disabled on the parent window.\nContext isolation will always be enabled in the opened `window` if it is\n  enabled on the parent window.\nJavaScript will always be disabled in the opened `window` if it is disabled on\n  the parent window.\nNon-standard features (that are not handled by Chromium or Electron) given in\n  `features` will be passed to any registered `webContents`'s\n  `did-create-window` event handler in the `options` argument.\n`frameName` follows the specification of `windowName` located in the native documentation.\nWhen opening `about:blank`, the child window's `WebPreferences` will be copied\n  from the parent window, and there is no way to override it because Chromium\n  skips browser side navigation in this case.\n\nTo customize or cancel the creation of the window, you can optionally set an\noverride handler with `webContents.setWindowOpenHandler()` from the main\nprocess. Returning `{ action: 'deny' }` cancels the window. Returning `{\naction: 'allow', overrideBrowserWindowOptions: { ... } }` will allow opening\nthe window and setting the `BrowserWindowConstructorOptions` to be used when\ncreating the window. Note that this is more powerful than passing options\nthrough the feature string, as the renderer has more limited privileges in\ndeciding security preferences than the main process.\nIn addition to passing in `action` and `overrideBrowserWindowOptions`,\n`outlivesOpener` can be passed like: `{ action: 'allow', outlivesOpener: true,\noverrideBrowserWindowOptions: { ... } }`. If set to `true`, the newly created\nwindow will not close when the opener window closes. The default value is `false`.\nNative `Window` example\n```javascript\n// main.js\nconst mainWindow = new BrowserWindow()\n// In this example, only windows with the `about:blank` url will be created.\n// All other urls will be blocked.\nmainWindow.webContents.setWindowOpenHandler(({ url }) => {\n  if (url === 'about:blank') {\n    return {\n      action: 'allow',\n      overrideBrowserWindowOptions: {\n        frame: false,\n        fullscreenable: false,\n        backgroundColor: 'black',\n        webPreferences: {\n          preload: 'my-child-window-preload-script.js'\n        }\n      }\n    }\n  }\n  return { action: 'deny' }\n})\n```\n```javascript\n// renderer process (mainWindow)\nconst childWindow = window.open('', 'modal')\nchildWindow.document.write('Hello')",
    "tag": "electron"
  },
  {
    "title": "Class: IncomingMessage",
    "source": "https://github.com/electron/electron/tree/main/docs/api/incoming-message.md",
    "content": "Class: IncomingMessage\n\nHandle responses to HTTP/HTTPS requests.\n\nProcess: Main\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\n`IncomingMessage` implements the Readable Stream\ninterface and is therefore an EventEmitter.\nInstance Events\nEvent: 'data'\nReturns:\n\n`chunk` Buffer - A chunk of response body's data.\n\nThe `data` event is the usual method of transferring response data into\napplicative code.\nEvent: 'end'\nIndicates that response body has ended. Must be placed before 'data' event.\nEvent: 'aborted'\nEmitted when a request has been canceled during an ongoing HTTP transaction.\nEvent: 'error'\nReturns:\n`error` Error - Typically holds an error string identifying failure root cause.\nEmitted when an error was encountered while streaming response data events. For\ninstance, if the server closes the underlying while the response is still\nstreaming, an `error` event will be emitted on the response object and a `close`\nevent will subsequently follow on the request object.\nInstance Properties\nAn `IncomingMessage` instance has the following readable properties:\n`response.statusCode`\nAn `Integer` indicating the HTTP response status code.\n`response.statusMessage`\nA `string` representing the HTTP status message.\n`response.headers`\nA `Record<string, string | string[]>` representing the HTTP response headers. The `headers` object is\nformatted as follows:\n\nAll header names are lowercased.\nDuplicates of `age`, `authorization`, `content-length`, `content-type`,\n`etag`, `expires`, `from`, `host`, `if-modified-since`, `if-unmodified-since`,\n`last-modified`, `location`, `max-forwards`, `proxy-authorization`, `referer`,\n`retry-after`, `server`, or `user-agent` are discarded.\n`set-cookie` is always an array. Duplicates are added to the array.\nFor duplicate `cookie` headers, the values are joined together with '; '.\nFor all other headers, the values are joined together with ', '.\n\n`response.httpVersion`\nA `string` indicating the HTTP protocol version number. Typical values are '1.0'\nor '1.1'. Additionally `httpVersionMajor` and `httpVersionMinor` are two\nInteger-valued readable properties that return respectively the HTTP major and\nminor version numbers.\n`response.httpVersionMajor`\nAn `Integer` indicating the HTTP protocol major version number.\n`response.httpVersionMinor`\nAn `Integer` indicating the HTTP protocol minor version number.\n`response.rawHeaders`\nA `string[]` containing the raw HTTP response headers exactly as they were\nreceived. The keys and values are in the same list. It is not a list of\ntuples. So, the even-numbered offsets are key values, and the odd-numbered\noffsets are the associated values. Header names are not lowercased, and\nduplicates are not merged.\n```javascript\n// Prints something like:\n//\n// [ 'user-agent',\n//   'this is invalid because there can be only one',\n//   'User-Agent',\n//   'curl/7.22.0',\n//   'Host',\n//   '127.0.0.1:8000',\n//   'ACCEPT',\n//   '/' ]\nconsole.log(request.rawHeaders)",
    "tag": "electron"
  },
  {
    "title": "Class: TouchBarSlider",
    "source": "https://github.com/electron/electron/tree/main/docs/api/touch-bar-slider.md",
    "content": "Class: TouchBarSlider\n\nCreate a slider in the touch bar for native macOS applications\n\nProcess: Main\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\n`new TouchBarSlider(options)`\n\n`options` Object\n`label` string (optional) - Label text.\n`value` Integer (optional) - Selected value.\n`minValue` Integer (optional) - Minimum value.\n`maxValue` Integer (optional) - Maximum value.\n`change` Function (optional) - Function to call when the slider is changed.\n`newValue` number - The value that the user selected on the Slider.\n\n\n\nInstance Properties\nThe following properties are available on instances of `TouchBarSlider`:\n`touchBarSlider.label`\nA `string` representing the slider's current text. Changing this value immediately updates the slider\nin the touch bar.\n`touchBarSlider.value`\nA `number` representing the slider's current value. Changing this value immediately updates the slider\nin the touch bar.\n`touchBarSlider.minValue`\nA `number` representing the slider's current minimum value. Changing this value immediately updates the\nslider in the touch bar.\n`touchBarSlider.maxValue`\nA `number` representing the slider's current maximum value. Changing this value immediately updates the",
    "tag": "electron"
  },
  {
    "title": "safeStorage",
    "source": "https://github.com/electron/electron/tree/main/docs/api/safe-storage.md",
    "content": "safeStorage\n\nAllows access to simple encryption and decryption of strings for storage on the local machine.\n\nProcess: Main\nThis module protects data stored on disk from being accessed by other applications or users with full disk access.\nNote that on Mac, access to the system Keychain is required and\nthese calls can block the current thread to collect user input.\nThe same is true for Linux, if a password management tool is available.\nMethods\nThe `safeStorage` module has the following methods:\n`safeStorage.isEncryptionAvailable()`\nReturns `boolean` - Whether encryption is available.\nOn Linux, returns true if the app has emitted the `ready` event and the secret key is available.\nOn MacOS, returns true if Keychain is available.\nOn Windows, returns true once the app has emitted the `ready` event.\n`safeStorage.encryptString(plainText)`\n\n`plainText` string\n\nReturns `Buffer` -  An array of bytes representing the encrypted string.\nThis function will throw an error if encryption fails.\n`safeStorage.decryptString(encrypted)`\n\n`encrypted` Buffer\n\nReturns `string` - the decrypted string. Decrypts the encrypted buffer\nobtained  with `safeStorage.encryptString` back into a string.",
    "tag": "electron"
  },
  {
    "title": "nativeImage",
    "source": "https://github.com/electron/electron/tree/main/docs/api/native-image.md",
    "content": "nativeImage\n\nCreate tray, dock, and application icons using PNG or JPG files.\n\nProcess: Main, Renderer\nIn Electron, for the APIs that take images, you can pass either file paths or\n`NativeImage` instances. An empty image will be used when `null` is passed.\nFor example, when creating a tray or setting a window's icon, you can pass an\nimage file path as a `string`:\n```javascript\nconst { BrowserWindow, Tray } = require('electron')\nconst appIcon = new Tray('/Users/somebody/images/icon.png')\nconst win = new BrowserWindow({ icon: '/Users/somebody/images/window.png' })\nconsole.log(appIcon, win)\n```\nOr read the image from the clipboard, which returns a `NativeImage`:\n`javascript\nconst { clipboard, Tray } = require('electron')\nconst image = clipboard.readImage()\nconst appIcon = new Tray(image)\nconsole.log(appIcon)`\nSupported Formats\nCurrently `PNG` and `JPEG` image formats are supported. `PNG` is recommended\nbecause of its support for transparency and lossless compression.\nOn Windows, you can also load `ICO` icons from file paths. For best visual\nquality, it is recommended to include at least the following sizes in the:\n\nSmall icon\n16x16 (100% DPI scale)\n20x20 (125% DPI scale)\n24x24 (150% DPI scale)\n32x32 (200% DPI scale)\nLarge icon\n32x32 (100% DPI scale)\n40x40 (125% DPI scale)\n48x48 (150% DPI scale)\n64x64 (200% DPI scale)\n256x256\n\nCheck the Size requirements section in this article.\nHigh Resolution Image\nOn platforms that have high-DPI support such as Apple Retina displays, you can\nappend `@2x` after image's base filename to mark it as a high resolution image.\nFor example, if `icon.png` is a normal image that has standard resolution, then\n`icon@2x.png` will be treated as a high resolution image that has double DPI\ndensity.\nIf you want to support displays with different DPI densities at the same time,\nyou can put images with different sizes in the same folder and use the filename\nwithout DPI suffixes. For example:\n`plaintext\nimages/\n\u251c\u2500\u2500 icon.png\n\u251c\u2500\u2500 icon@2x.png\n\u2514\u2500\u2500 icon@3x.png`\n`javascript\nconst { Tray } = require('electron')\nconst appIcon = new Tray('/Users/somebody/images/icon.png')\nconsole.log(appIcon)`\nThe following suffixes for DPI are also supported:\n\n`@1x`\n`@1.25x`\n`@1.33x`\n`@1.4x`\n`@1.5x`\n`@1.8x`\n`@2x`\n`@2.5x`\n`@3x`\n`@4x`\n`@5x`\n\nTemplate Image\nTemplate images consist of black and an alpha channel.\nTemplate images are not intended to be used as standalone images and are usually\nmixed with other content to create the desired final appearance.\nThe most common case is to use template images for a menu bar icon, so it can\nadapt to both light and dark menu bars.\nNote: Template image is only supported on macOS.\nTo mark an image as a template image, its filename should end with the word\n`Template`. For example:\n\n`xxxTemplate.png`\n`xxxTemplate@2x.png`\n\nMethods\nThe `nativeImage` module has the following methods, all of which return\nan instance of the `NativeImage` class:\n`nativeImage.createEmpty()`\nReturns `NativeImage`\nCreates an empty `NativeImage` instance.\n`nativeImage.createThumbnailFromPath(path, maxSize)` macOS Windows\n\n`path` string - path to a file that we intend to construct a thumbnail out of.\n`maxSize` Size - the maximum width and height (positive numbers) the thumbnail returned can be. The Windows implementation will ignore `maxSize.height` and scale the height according to `maxSize.width`.\n\nReturns `Promise<NativeImage>` - fulfilled with the file's thumbnail preview image, which is a NativeImage.\n`nativeImage.createFromPath(path)`\n\n`path` string\n\nReturns `NativeImage`\nCreates a new `NativeImage` instance from a file located at `path`. This method\nreturns an empty image if the `path` does not exist, cannot be read, or is not\na valid image.\n```javascript\nconst nativeImage = require('electron').nativeImage\nconst image = nativeImage.createFromPath('/Users/somebody/images/icon.png')\nconsole.log(image)\n```\n`nativeImage.createFromBitmap(buffer, options)`\n\n`buffer` Buffer\n`options` Object\n`width` Integer\n`height` Integer\n`scaleFactor` Number (optional) - Defaults to 1.0.\n\nReturns `NativeImage`\nCreates a new `NativeImage` instance from `buffer` that contains the raw bitmap\npixel data returned by `toBitmap()`. The specific format is platform-dependent.\n`nativeImage.createFromBuffer(buffer[, options])`\n\n`buffer` Buffer\n`options` Object (optional)\n`width` Integer (optional) - Required for bitmap buffers.\n`height` Integer (optional) - Required for bitmap buffers.\n`scaleFactor` Number (optional) - Defaults to 1.0.\n\nReturns `NativeImage`\nCreates a new `NativeImage` instance from `buffer`. Tries to decode as PNG or JPEG first.\n`nativeImage.createFromDataURL(dataURL)`\n\n`dataURL` string\n\nReturns `NativeImage`\nCreates a new `NativeImage` instance from `dataURL`.\n`nativeImage.createFromNamedImage(imageName[, hslShift])` macOS\n\n`imageName` string\n`hslShift` number[] (optional)\n\nReturns `NativeImage`\nCreates a new `NativeImage` instance from the NSImage that maps to the\ngiven image name. See System Icons\nfor a list of possible values.\nThe `hslShift` is applied to the image with the following rules:\n\n`hsl_shift[0]` (hue): The absolute hue value for the image - 0 and 1 map\n     to 0 and 360 on the hue color wheel (red).\n`hsl_shift[1]` (saturation): A saturation shift for the image, with the\n    following key values:\n    0 = remove all color.\n    0.5 = leave unchanged.\n    1 = fully saturate the image.\n`hsl_shift[2]` (lightness): A lightness shift for the image, with the\n    following key values:\n    0 = remove all lightness (make all pixels black).\n    0.5 = leave unchanged.\n    1 = full lightness (make all pixels white).\n\nThis means that `[-1, 0, 1]` will make the image completely white and\n`[-1, 1, 0]` will make the image completely black.\nIn some cases, the `NSImageName` doesn't match its string representation; one example of this is `NSFolderImageName`, whose string representation would actually be `NSFolder`. Therefore, you'll need to determine the correct string representation for your image before passing it in. This can be done with the following:\n`echo -e '#import <Cocoa/Cocoa.h>\\nint main() { NSLog(@\"%@\", SYSTEM_IMAGE_NAME); }' | clang -otest -x objective-c -framework Cocoa - && ./test`\nwhere `SYSTEM_IMAGE_NAME` should be replaced with any value from this list.\nClass: NativeImage\n\nNatively wrap images such as tray, dock, and application icons.\n\nProcess: Main, Renderer\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\nInstance Methods\nThe following methods are available on instances of the `NativeImage` class:\n`image.toPNG([options])`\n\n`options` Object (optional)\n`scaleFactor` Number (optional) - Defaults to 1.0.\n\nReturns `Buffer` - A Buffer that contains the image's `PNG` encoded data.\n`image.toJPEG(quality)`\n\n`quality` Integer - Between 0 - 100.\n\nReturns `Buffer` - A Buffer that contains the image's `JPEG` encoded data.\n`image.toBitmap([options])`\n\n`options` Object (optional)\n`scaleFactor` Number (optional) - Defaults to 1.0.\n\nReturns `Buffer` - A Buffer that contains a copy of the image's raw bitmap pixel\ndata.\n`image.toDataURL([options])`\n\n`options` Object (optional)\n`scaleFactor` Number (optional) - Defaults to 1.0.\n\nReturns `string` - The data URL of the image.\n`image.getBitmap([options])`\n\n`options` Object (optional)\n`scaleFactor` Number (optional) - Defaults to 1.0.\n\nReturns `Buffer` - A Buffer that contains the image's raw bitmap pixel data.\nThe difference between `getBitmap()` and `toBitmap()` is that `getBitmap()` does not\ncopy the bitmap data, so you have to use the returned Buffer immediately in\ncurrent event loop tick; otherwise the data might be changed or destroyed.\n`image.getNativeHandle()` macOS\nReturns `Buffer` - A Buffer that stores C pointer to underlying native handle of\nthe image. On macOS, a pointer to `NSImage` instance would be returned.\nNotice that the returned pointer is a weak pointer to the underlying native\nimage instead of a copy, so you must ensure that the associated\n`nativeImage` instance is kept around.\n`image.isEmpty()`\nReturns `boolean` - Whether the image is empty.\n`image.getSize([scaleFactor])`\n\n`scaleFactor` Number (optional) - Defaults to 1.0.\n\nReturns Size.\nIf `scaleFactor` is passed, this will return the size corresponding to the image representation most closely matching the passed value.\n`image.setTemplateImage(option)`\n\n`option` boolean\n\nMarks the image as a template image.\n`image.isTemplateImage()`\nReturns `boolean` - Whether the image is a template image.\n`image.crop(rect)`\n\n`rect` Rectangle - The area of the image to crop.\n\nReturns `NativeImage` - The cropped image.\n`image.resize(options)`\n\n`options` Object\n`width` Integer (optional) - Defaults to the image's width.\n`height` Integer (optional) - Defaults to the image's height.\n`quality` string (optional) - The desired quality of the resize image.\n    Possible values are `good`, `better`, or `best`. The default is `best`.\n    These values express a desired quality/speed tradeoff. They are translated\n    into an algorithm-specific method that depends on the capabilities\n    (CPU, GPU) of the underlying platform. It is possible for all three methods\n    to be mapped to the same algorithm on a given platform.\n\nReturns `NativeImage` - The resized image.\nIf only the `height` or the `width` are specified then the current aspect ratio\nwill be preserved in the resized image.\n`image.getAspectRatio([scaleFactor])`\n\n`scaleFactor` Number (optional) - Defaults to 1.0.\n\nReturns `Number` - The image's aspect ratio.\nIf `scaleFactor` is passed, this will return the aspect ratio corresponding to the image representation most closely matching the passed value.\n`image.getScaleFactors()`\nReturns `Number[]` - An array of all scale factors corresponding to representations for a given nativeImage.\n`image.addRepresentation(options)`\n\n`options` Object\n`scaleFactor` Number (optional) - The scale factor to add the image representation for.\n`width` Integer (optional) - Defaults to 0. Required if a bitmap buffer\n    is specified as `buffer`.\n`height` Integer (optional) - Defaults to 0. Required if a bitmap buffer\n    is specified as `buffer`.\n`buffer` Buffer (optional) - The buffer containing the raw image data.\n`dataURL` string (optional) - The data URL containing either a base 64\n    encoded PNG or JPEG image.\n\nAdd an image representation for a specific scale factor. This can be used\nto explicitly add different scale factor representations to an image. This\ncan be called on empty images.\nInstance Properties\n`nativeImage.isMacTemplateImage` macOS\nA `boolean` property that determines whether the image is considered a template image.",
    "tag": "electron"
  },
  {
    "title": "TouchBar",
    "source": "https://github.com/electron/electron/tree/main/docs/api/touch-bar.md",
    "content": "TouchBar\nClass: TouchBar\n\nCreate TouchBar layouts for native macOS applications\n\nProcess: Main\n`new TouchBar(options)`\n\n`options` Object\n`items` (TouchBarButton | TouchBarColorPicker | TouchBarGroup | TouchBarLabel | TouchBarPopover | TouchBarScrubber | TouchBarSegmentedControl | TouchBarSlider | TouchBarSpacer)[] (optional)\n`escapeItem` (TouchBarButton | TouchBarColorPicker | TouchBarGroup | TouchBarLabel | TouchBarPopover | TouchBarScrubber | TouchBarSegmentedControl | TouchBarSlider | TouchBarSpacer | null) (optional)\n\nCreates a new touch bar with the specified items. Use\n`BrowserWindow.setTouchBar` to add the `TouchBar` to a window.\nNote: The TouchBar API is currently experimental and may change or be\nremoved in future Electron releases.\nTip: If you don't have a MacBook with Touch Bar, you can use\nTouch Bar Simulator\nto test Touch Bar usage in your app.\nStatic Properties\n`TouchBarButton`\nA typeof TouchBarButton reference to the `TouchBarButton` class.\n`TouchBarColorPicker`\nA typeof TouchBarColorPicker reference to the `TouchBarColorPicker` class.\n`TouchBarGroup`\nA typeof TouchBarGroup reference to the `TouchBarGroup` class.\n`TouchBarLabel`\nA typeof TouchBarLabel reference to the `TouchBarLabel` class.\n`TouchBarPopover`\nA typeof TouchBarPopover reference to the `TouchBarPopover` class.\n`TouchBarScrubber`\nA typeof TouchBarScrubber reference to the `TouchBarScrubber` class.\n`TouchBarSegmentedControl`\nA typeof TouchBarSegmentedControl reference to the `TouchBarSegmentedControl` class.\n`TouchBarSlider`\nA typeof TouchBarSlider reference to the `TouchBarSlider` class.\n`TouchBarSpacer`\nA typeof TouchBarSpacer reference to the `TouchBarSpacer` class.\n`TouchBarOtherItemsProxy`\nA typeof TouchBarOtherItemsProxy reference to the `TouchBarOtherItemsProxy` class.\nInstance Properties\nThe following properties are available on instances of `TouchBar`:\n`touchBar.escapeItem`\nA `TouchBarItem` that will replace the \"esc\" button on the touch bar when set.\nSetting to `null` restores the default \"esc\" button. Changing this value\nimmediately updates the escape item in the touch bar.\nExamples\nBelow is an example of a simple slot machine touch bar game with a button\nand some labels.\n```javascript\nconst { app, BrowserWindow, TouchBar } = require('electron')\nconst { TouchBarLabel, TouchBarButton, TouchBarSpacer } = TouchBar\nlet spinning = false\n// Reel labels\nconst reel1 = new TouchBarLabel()\nconst reel2 = new TouchBarLabel()\nconst reel3 = new TouchBarLabel()\n// Spin result label\nconst result = new TouchBarLabel()\n// Spin button\nconst spin = new TouchBarButton({\n  label: '\ud83c\udfb0 Spin',\n  backgroundColor: '#7851A9',\n  click: () => {\n    // Ignore clicks if already spinning\n    if (spinning) {\n      return\n    }\n\n\n```spinning = true\nresult.label = ''\n\nlet timeout = 10\nconst spinLength = 4 * 1000 // 4 seconds\nconst startTime = Date.now()\n\nconst spinReels = () => {\n  updateReels()\n\n  if ((Date.now() - startTime) >= spinLength) {\n    finishSpin()\n  } else {\n    // Slow down a bit on each spin\n    timeout *= 1.1\n    setTimeout(spinReels, timeout)\n  }\n}\n\nspinReels()\n```\n\n\n}\n})\nconst getRandomValue = () => {\n  const values = ['\ud83c\udf52', '\ud83d\udc8e', '7\ufe0f\u20e3', '\ud83c\udf4a', '\ud83d\udd14', '\u2b50', '\ud83c\udf47', '\ud83c\udf40']\n  return values[Math.floor(Math.random() * values.length)]\n}\nconst updateReels = () => {\n  reel1.label = getRandomValue()\n  reel2.label = getRandomValue()\n  reel3.label = getRandomValue()\n}\nconst finishSpin = () => {\n  const uniqueValues = new Set([reel1.label, reel2.label, reel3.label]).size\n  if (uniqueValues === 1) {\n    // All 3 values are the same\n    result.label = '\ud83d\udcb0 Jackpot!'\n    result.textColor = '#FDFF00'\n  } else if (uniqueValues === 2) {\n    // 2 values are the same\n    result.label = '\ud83d\ude0d Winner!'\n    result.textColor = '#FDFF00'\n  } else {\n    // No values are the same\n    result.label = '\ud83d\ude41 Spin Again'\n    result.textColor = null\n  }\n  spinning = false\n}\nconst touchBar = new TouchBar({\n  items: [\n    spin,\n    new TouchBarSpacer({ size: 'large' }),\n    reel1,\n    new TouchBarSpacer({ size: 'small' }),\n    reel2,\n    new TouchBarSpacer({ size: 'small' }),\n    reel3,\n    new TouchBarSpacer({ size: 'large' }),\n    result\n  ]\n})\nlet window\napp.whenReady().then(() => {\n  window = new BrowserWindow({\n    frame: false,\n    titleBarStyle: 'hiddenInset',\n    width: 200,\n    height: 200,\n    backgroundColor: '#000'\n  })\n  window.loadURL('about:blank')\n  window.setTouchBar(touchBar)\n})\n```\nRunning the above example\nTo run the example above, you'll need to (assuming you've got a terminal open in the directory you want to run the example):\n\nSave the above file to your computer as `touchbar.js`\nInstall Electron via `npm install electron`\nRun the example inside Electron: `./node_modules/.bin/electron touchbar.js`\n",
    "tag": "electron"
  },
  {
    "title": "shell",
    "source": "https://github.com/electron/electron/tree/main/docs/api/shell.md",
    "content": "shell\n\nManage files and URLs using their default applications.\n\nProcess: Main, Renderer (non-sandboxed only)\nThe `shell` module provides functions related to desktop integration.\nAn example of opening a URL in the user's default browser:\n```javascript\nconst { shell } = require('electron')\nshell.openExternal('https://github.com')\n```\nNote: While the `shell` module can be used in the renderer process, it will not function in a sandboxed renderer.\nMethods\nThe `shell` module has the following methods:\n`shell.showItemInFolder(fullPath)`\n\n`fullPath` string\n\nShow the given file in a file manager. If possible, select the file.\n`shell.openPath(path)`\n\n`path` string\n\nReturns `Promise<string>` - Resolves with a string containing the error message corresponding to the failure if a failure occurred, otherwise \"\".\nOpen the given file in the desktop's default manner.\n`shell.openExternal(url[, options])`\n\n`url` string - Max 2081 characters on windows.\n`options` Object (optional)\n`activate` boolean (optional) macOS - `true` to bring the opened application to the foreground. The default is `true`.\n`workingDirectory` string (optional) Windows - The working directory.\n`logUsage` boolean (optional) Windows - Indicates a user initiated launch that enables tracking of frequently used programs and other behaviors.\n                                              The default is `false`.\n\nReturns `Promise<void>`\nOpen the given external protocol URL in the desktop's default manner. (For example, mailto: URLs in the user's default mail agent).\n`shell.trashItem(path)`\n\n`path` string - path to the item to be moved to the trash.\n\nReturns `Promise<void>` - Resolves when the operation has been completed.\nRejects if there was an error while deleting the requested item.\nThis moves a path to the OS-specific trash location (Trash on macOS, Recycle\nBin on Windows, and a desktop-environment-specific location on Linux).\n`shell.beep()`\nPlay the beep sound.\n`shell.writeShortcutLink(shortcutPath[, operation], options)` Windows\n\n`shortcutPath` string\n`operation` string (optional) - Default is `create`, can be one of following:\n`create` - Creates a new shortcut, overwriting if necessary.\n`update` - Updates specified properties only on an existing shortcut.\n`replace` - Overwrites an existing shortcut, fails if the shortcut doesn't\n    exist.\n`options` ShortcutDetails\n\nReturns `boolean` - Whether the shortcut was created successfully.\nCreates or updates a shortcut link at `shortcutPath`.\n`shell.readShortcutLink(shortcutPath)` Windows\n\n`shortcutPath` string\n\nReturns ShortcutDetails\nResolves the shortcut link at `shortcutPath`.",
    "tag": "electron"
  },
  {
    "title": "Class: TouchBarButton",
    "source": "https://github.com/electron/electron/tree/main/docs/api/touch-bar-button.md",
    "content": "Class: TouchBarButton\n\nCreate a button in the touch bar for native macOS applications\n\nProcess: Main\nThis class is not exported from the `'electron'` module. It is only available as a return value of other methods in the Electron API.\n`new TouchBarButton(options)`\n\n`options` Object\n`label` string (optional) - Button text.\n`accessibilityLabel` string (optional) - A short description of the button for use by screenreaders like VoiceOver.\n`backgroundColor` string (optional) - Button background color in hex format,\n    i.e `#ABCDEF`.\n`icon` NativeImage | string (optional) - Button icon.\n`iconPosition` string (optional) - Can be `left`, `right` or `overlay`. Defaults to `overlay`.\n`click` Function (optional) - Function to call when the button is clicked.\n`enabled` boolean (optional) - Whether the button is in an enabled state.  Default is `true`.\n\nWhen defining `accessibilityLabel`, ensure you have considered macOS best practices.\nInstance Properties\nThe following properties are available on instances of `TouchBarButton`:\n`touchBarButton.accessibilityLabel`\nA `string` representing the description of the button to be read by a screen reader. Will only be read by screen readers if no label is set.\n`touchBarButton.label`\nA `string` representing the button's current text. Changing this value immediately updates the button\nin the touch bar.\n`touchBarButton.backgroundColor`\nA `string` hex code representing the button's current background color. Changing this value immediately updates\nthe button in the touch bar.\n`touchBarButton.icon`\nA `NativeImage` representing the button's current icon. Changing this value immediately updates the button\nin the touch bar.\n`touchBarButton.iconPosition`\nA `string` - Can be `left`, `right` or `overlay`.  Defaults to `overlay`.\n`touchBarButton.enabled`",
    "tag": "electron"
  },
  {
    "title": "net",
    "source": "https://github.com/electron/electron/tree/main/docs/api/net.md",
    "content": "net\n\nIssue HTTP/HTTPS requests using Chromium's native networking library\n\nProcess: Main\nThe `net` module is a client-side API for issuing HTTP(S) requests. It is\nsimilar to the HTTP and\nHTTPS modules of Node.js but uses\nChromium's native networking library instead of the Node.js implementation,\noffering better support for web proxies. It also supports checking network status.\nThe following is a non-exhaustive list of why you may consider using the `net`\nmodule instead of the native Node.js modules:\n\nAutomatic management of system proxy configuration, support of the wpad\n  protocol and proxy pac configuration files.\nAutomatic tunneling of HTTPS requests.\nSupport for authenticating proxies using basic, digest, NTLM, Kerberos or\n  negotiate authentication schemes.\nSupport for traffic monitoring proxies: Fiddler-like proxies used for access\n  control and monitoring.\n\nThe API components (including classes, methods, properties and event names) are similar to those used in\nNode.js.\nExample usage:\n`javascript\nconst { app } = require('electron')\napp.whenReady().then(() => {\n  const { net } = require('electron')\n  const request = net.request('https://github.com')\n  request.on('response', (response) => {\n    console.log(`STATUS: ${response.statusCode}`)\n    console.log(`HEADERS: ${JSON.stringify(response.headers)}`)\n    response.on('data', (chunk) => {\n      console.log(`BODY: ${chunk}`)\n    })\n    response.on('end', () => {\n      console.log('No more data in response.')\n    })\n  })\n  request.end()\n})`\nThe `net` API can be used only after the application emits the `ready` event.\nTrying to use the module before the `ready` event will throw an error.\nMethods\nThe `net` module has the following methods:\n`net.request(options)`\n\n`options` (ClientRequestConstructorOptions | string) - The `ClientRequest` constructor options.\n\nReturns ClientRequest\nCreates a ClientRequest instance using the provided\n`options` which are directly forwarded to the `ClientRequest` constructor.\nThe `net.request` method would be used to issue both secure and insecure HTTP\nrequests according to the specified protocol scheme in the `options` object.\n`net.fetch(input[, init])`\n\n`input` string | Request\n`init` RequestInit (optional)\n\nReturns `Promise<GlobalResponse>` - see Response.\nSends a request, similarly to how `fetch()` works in the renderer, using\nChrome's network stack. This differs from Node's `fetch()`, which uses\nNode.js's HTTP stack.\nExample:\n`js\nasync function example () {\n  const response = await net.fetch('https://my.app')\n  if (response.ok) {\n    const body = await response.json()\n    // ... use the result.\n  }\n}`\nThis method will issue requests from the default\nsession. To send a `fetch` request from\nanother session, use ses.fetch().\nSee the MDN documentation for\nfetch() for more\ndetails.\nLimitations:\n\n`net.fetch()` does not support the `data:` or `blob:` schemes.\nThe value of the `integrity` option is ignored.\nThe `.type` and `.url` values of the returned `Response` object are\n  incorrect.\n\n`net.isOnline()`\nReturns `boolean` - Whether there is currently internet connection.\nA return value of `false` is a pretty strong indicator that the user\nwon't be able to connect to remote sites. However, a return value of\n`true` is inconclusive; even if some link is up, it is uncertain\nwhether a particular connection attempt to a particular remote site\nwill be successful.\nProperties\n`net.online` Readonly\nA `boolean` property. Whether there is currently internet connection.\nA return value of `false` is a pretty strong indicator that the user\nwon't be able to connect to remote sites. However, a return value of\n`true` is inconclusive; even if some link is up, it is uncertain\nwhether a particular connection attempt to a particular remote site",
    "tag": "electron"
  },
  {
    "title": "protocol",
    "source": "https://github.com/electron/electron/tree/main/docs/api/protocol.md",
    "content": "protocol\n\nRegister a custom protocol and intercept existing protocol requests.\n\nProcess: Main\nAn example of implementing a protocol that has the same effect as the\n`file://` protocol:\n```javascript\nconst { app, protocol } = require('electron')\nconst path = require('path')\nconst url = require('url')\napp.whenReady().then(() => {\n  protocol.registerFileProtocol('atom', (request, callback) => {\n    const filePath = url.fileURLToPath('file://' + request.url.slice('atom://'.length))\n    callback(filePath)\n  })\n})\n```\nNote: All methods unless specified can only be used after the `ready` event\nof the `app` module gets emitted.\nUsing `protocol` with a custom `partition` or `session`\nA protocol is registered to a specific Electron session\nobject. If you don't specify a session, then your `protocol` will be applied to\nthe default session that Electron uses. However, if you define a `partition` or\n`session` on your `browserWindow`'s `webPreferences`, then that window will use\na different session and your custom protocol will not work if you just use\n`electron.protocol.XXX`.\nTo have your custom protocol work in combination with a custom session, you need\nto register it to that session explicitly.\n```javascript\nconst { session, app, protocol } = require('electron')\nconst path = require('path')\napp.whenReady().then(() => {\n  const partition = 'persist:example'\n  const ses = session.fromPartition(partition)\nses.protocol.registerFileProtocol('atom', (request, callback) => {\n    const url = request.url.substr(7)\n    callback({ path: path.normalize(`${__dirname}/${url}`) })\n  })\nmainWindow = new BrowserWindow({ webPreferences: { partition } })\n})\n```\nMethods\nThe `protocol` module has the following methods:\n`protocol.registerSchemesAsPrivileged(customSchemes)`\n\n`customSchemes` CustomScheme[]\n\nNote: This method can only be used before the `ready` event of the `app`\nmodule gets emitted and can be called only once.\nRegisters the `scheme` as standard, secure, bypasses content security policy for\nresources, allows registering ServiceWorker, supports fetch API, and streaming\nvideo/audio. Specify a privilege with the value of `true` to enable the capability.\nAn example of registering a privileged scheme, that bypasses Content Security\nPolicy:\n`javascript\nconst { protocol } = require('electron')\nprotocol.registerSchemesAsPrivileged([\n  { scheme: 'foo', privileges: { bypassCSP: true } }\n])`\nA standard scheme adheres to what RFC 3986 calls generic URI\nsyntax. For example `http` and\n`https` are standard schemes, while `file` is not.\nRegistering a scheme as standard allows relative and absolute resources to\nbe resolved correctly when served. Otherwise the scheme will behave like the\n`file` protocol, but without the ability to resolve relative URLs.\nFor example when you load following page with custom protocol without\nregistering it as standard scheme, the image will not be loaded because\nnon-standard schemes can not recognize relative URLs:\n```html\n\n\n\n```\nRegistering a scheme as standard will allow access to files through the\n[FileSystem API][file-system-api]. Otherwise the renderer will throw a security\nerror for the scheme.\nBy default web storage apis (localStorage, sessionStorage, webSQL, indexedDB,\ncookies) are disabled for non standard schemes. So in general if you want to\nregister a custom protocol to replace the `http` protocol, you have to register\nit as a standard scheme.\nProtocols that use streams (http and stream protocols) should set `stream: true`.\nThe `<video>` and `<audio>` HTML elements expect protocols to buffer their\nresponses by default. The `stream` flag configures those elements to correctly\nexpect streaming responses.\n`protocol.registerFileProtocol(scheme, handler)`\n\n`scheme` string\n`handler` Function\n`request` ProtocolRequest\n`callback` Function\n`response` (string | ProtocolResponse)\n\n\n\nReturns `boolean` - Whether the protocol was successfully registered\nRegisters a protocol of `scheme` that will send a file as the response. The\n`handler` will be called with `request` and `callback` where `request` is\nan incoming request for the `scheme`.\nTo handle the `request`, the `callback` should be called with either the file's\npath or an object that has a `path` property, e.g. `callback(filePath)` or\n`callback({ path: filePath })`. The `filePath` must be an absolute path.\nBy default the `scheme` is treated like `http:`, which is parsed differently\nfrom protocols that follow the \"generic URI syntax\" like `file:`.\n`protocol.registerBufferProtocol(scheme, handler)`\n\n`scheme` string\n`handler` Function\n`request` ProtocolRequest\n`callback` Function\n`response` (Buffer | ProtocolResponse)\n\n\n\nReturns `boolean` - Whether the protocol was successfully registered\nRegisters a protocol of `scheme` that will send a `Buffer` as a response.\nThe usage is the same with `registerFileProtocol`, except that the `callback`\nshould be called with either a `Buffer` object or an object that has the `data`\nproperty.\nExample:\n`javascript\nprotocol.registerBufferProtocol('atom', (request, callback) => {\n  callback({ mimeType: 'text/html', data: Buffer.from('<h5>Response</h5>') })\n})`\n`protocol.registerStringProtocol(scheme, handler)`\n\n`scheme` string\n`handler` Function\n`request` ProtocolRequest\n`callback` Function\n`response` (string | ProtocolResponse)\n\n\n\nReturns `boolean` - Whether the protocol was successfully registered\nRegisters a protocol of `scheme` that will send a `string` as a response.\nThe usage is the same with `registerFileProtocol`, except that the `callback`\nshould be called with either a `string` or an object that has the `data`\nproperty.\n`protocol.registerHttpProtocol(scheme, handler)`\n\n`scheme` string\n`handler` Function\n`request` ProtocolRequest\n`callback` Function\n`response` ProtocolResponse\n\n\n\nReturns `boolean` - Whether the protocol was successfully registered\nRegisters a protocol of `scheme` that will send an HTTP request as a response.\nThe usage is the same with `registerFileProtocol`, except that the `callback`\nshould be called with an object that has the `url` property.\n`protocol.registerStreamProtocol(scheme, handler)`\n\n`scheme` string\n`handler` Function\n`request` ProtocolRequest\n`callback` Function\n`response` (ReadableStream | ProtocolResponse)\n\n\n\nReturns `boolean` - Whether the protocol was successfully registered\nRegisters a protocol of `scheme` that will send a stream as a response.\nThe usage is the same with `registerFileProtocol`, except that the\n`callback` should be called with either a ReadableStream object or an object that\nhas the `data` property.\nExample:\n```javascript\nconst { protocol } = require('electron')\nconst { PassThrough } = require('stream')\nfunction createStream (text) {\n  const rv = new PassThrough() // PassThrough is also a Readable stream\n  rv.push(text)\n  rv.push(null)\n  return rv\n}\nprotocol.registerStreamProtocol('atom', (request, callback) => {\n  callback({\n    statusCode: 200,\n    headers: {\n      'content-type': 'text/html'\n    },\n    data: createStream('Response')\n  })\n})\n```\nIt is possible to pass any object that implements the readable stream API (emits\n`data`/`end`/`error` events). For example, here's how a file could be returned:\n`javascript\nprotocol.registerStreamProtocol('atom', (request, callback) => {\n  callback(fs.createReadStream('index.html'))\n})`\n`protocol.unregisterProtocol(scheme)`\n\n`scheme` string\n\nReturns `boolean` - Whether the protocol was successfully unregistered\nUnregisters the custom protocol of `scheme`.\n`protocol.isProtocolRegistered(scheme)`\n\n`scheme` string\n\nReturns `boolean` - Whether `scheme` is already registered.\n`protocol.interceptFileProtocol(scheme, handler)`\n\n`scheme` string\n`handler` Function\n`request` ProtocolRequest\n`callback` Function\n`response` (string | ProtocolResponse)\n\n\n\nReturns `boolean` - Whether the protocol was successfully intercepted\nIntercepts `scheme` protocol and uses `handler` as the protocol's new handler\nwhich sends a file as a response.\n`protocol.interceptStringProtocol(scheme, handler)`\n\n`scheme` string\n`handler` Function\n`request` ProtocolRequest\n`callback` Function\n`response` (string | ProtocolResponse)\n\n\n\nReturns `boolean` - Whether the protocol was successfully intercepted\nIntercepts `scheme` protocol and uses `handler` as the protocol's new handler\nwhich sends a `string` as a response.\n`protocol.interceptBufferProtocol(scheme, handler)`\n\n`scheme` string\n`handler` Function\n`request` ProtocolRequest\n`callback` Function\n`response` (Buffer | ProtocolResponse)\n\n\n\nReturns `boolean` - Whether the protocol was successfully intercepted\nIntercepts `scheme` protocol and uses `handler` as the protocol's new handler\nwhich sends a `Buffer` as a response.\n`protocol.interceptHttpProtocol(scheme, handler)`\n\n`scheme` string\n`handler` Function\n`request` ProtocolRequest\n`callback` Function\n`response` ProtocolResponse\n\n\n\nReturns `boolean` - Whether the protocol was successfully intercepted\nIntercepts `scheme` protocol and uses `handler` as the protocol's new handler\nwhich sends a new HTTP request as a response.\n`protocol.interceptStreamProtocol(scheme, handler)`\n\n`scheme` string\n`handler` Function\n`request` ProtocolRequest\n`callback` Function\n`response` (ReadableStream | ProtocolResponse)\n\n\n\nReturns `boolean` - Whether the protocol was successfully intercepted\nSame as `protocol.registerStreamProtocol`, except that it replaces an existing\nprotocol handler.\n`protocol.uninterceptProtocol(scheme)`\n\n`scheme` string\n\nReturns `boolean` - Whether the protocol was successfully unintercepted\nRemove the interceptor installed for `scheme` and restore its original handler.\n`protocol.isProtocolIntercepted(scheme)`\n\n`scheme` string\n\nReturns `boolean` - Whether `scheme` is already intercepted.",
    "tag": "electron"
  },
  {
    "title": "Synopsis",
    "source": "https://github.com/electron/electron/tree/main/docs/api/synopsis.md",
    "content": "Synopsis\n\nHow to use Node.js and Electron APIs.\n\nAll of Node.js's built-in modules are available in\nElectron and third-party node modules also fully supported as well (including\nthe native modules).\nElectron also provides some extra built-in modules for developing native\ndesktop applications. Some modules are only available in the main process, some\nare only available in the renderer process (web page), and some can be used in\neither process type.\nThe basic rule is: if a module is GUI or low-level system related, then\nit should be only available in the main process. You need to be familiar with\nthe concept of main process vs. renderer process\nscripts to be able to use those modules.\nThe main process script is like a normal Node.js script:\n```javascript\nconst { app, BrowserWindow } = require('electron')\nlet win = null\napp.whenReady().then(() => {\n  win = new BrowserWindow({ width: 800, height: 600 })\n  win.loadURL('https://github.com')\n})\n```\nThe renderer process is no different than a normal web page, except for the\nextra ability to use node modules if `nodeIntegration` is enabled:\n```html\n\n\n\n\n\n\n```\nDestructuring assignment\nAs of 0.37, you can use\n[destructuring assignment][destructuring-assignment] to make it easier to use\nbuilt-in modules.\n```javascript\nconst { app, BrowserWindow } = require('electron')\nlet win\napp.whenReady().then(() => {\n  win = new BrowserWindow()\n  win.loadURL('https://github.com')\n})\n```\nIf you need the entire `electron` module, you can require it and then using\ndestructuring to access the individual modules from `electron`.\n```javascript\nconst electron = require('electron')\nconst { app, BrowserWindow } = electron\nlet win\napp.whenReady().then(() => {\n  win = new BrowserWindow()\n  win.loadURL('https://github.com')\n})\n```\nThis is equivalent to the following code:\n```javascript\nconst electron = require('electron')\nconst app = electron.app\nconst BrowserWindow = electron.BrowserWindow\nlet win\napp.whenReady().then(() => {\n  win = new BrowserWindow()\n  win.loadURL('https://github.com')\n})\n```",
    "tag": "electron"
  },
  {
    "title": "PrinterInfo Object",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/printer-info.md",
    "content": "PrinterInfo Object\n\n`name` string - the name of the printer as understood by the OS.\n`displayName` string - the name of the printer as shown in Print Preview.\n`description` string - a longer description of the printer's type.\n`status` number - the current status of the printer.\n`isDefault` boolean - whether or not a given printer is set as the default printer on the OS.\n`options` Object - an object containing a variable number of platform-specific printer information.\n\nThe number represented by `status` means different things on different platforms: on Windows its potential values can be found here, and on Linux and macOS they can be found here.\nExample\nBelow is an example of some of the additional options that may be set which\nmay be different on each platform.\n```javascript\n{\n  name: 'Austin_4th_Floor_PrinterC02XK13BJHD4',\n  displayName: 'Austin 4th Floor Printer @ C02XK13BJHD4',\n  description: 'TOSHIBA ColorMFP',\n  status: 3,\n  isDefault: false,\n  options: {\n    copies: '1',\n    'device-uri': 'dnssd://Austin%204th%20Floor%20Printer%20%40%20C02XK13BJHD4.ipps._tcp.local./?uuid=71687f1e-1147-3274-6674-22de61b110bd',\n    finishings: '3',\n    'job-cancel-after': '10800',\n    'job-hold-until': 'no-hold',\n    'job-priority': '50',\n    'job-sheets': 'none,none',\n    'marker-change-time': '0',\n    'number-up': '1',\n    'printer-commands': 'ReportLevels,PrintSelfTestPage,com.toshiba.ColourProfiles.update,com.toshiba.EFiling.update,com.toshiba.EFiling.checkPassword',\n    'printer-info': 'Austin 4th Floor Printer @ C02XK13BJHD4',\n    'printer-is-accepting-jobs': 'true',\n    'printer-is-shared': 'false',\n    'printer-is-temporary': 'false',\n    'printer-location': '',\n    'printer-make-and-model': 'TOSHIBA ColorMFP',\n    'printer-state': '3',\n    'printer-state-change-time': '1573472937',\n    'printer-state-reasons': 'offline-report,com.toshiba.snmp.failed',\n    'printer-type': '10531038',\n    'printer-uri-supported': 'ipp://localhost/printers/Austin_4th_Floor_Printer_C02XK13BJHD4',\n    system_driverinfo: 'T'\n  }\n}",
    "tag": "electron"
  },
  {
    "title": "ThumbarButton Object",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/thumbar-button.md",
    "content": "ThumbarButton Object\n\n`icon` NativeImage - The icon showing in thumbnail\n  toolbar.\n`click` Function\n`tooltip` string (optional) - The text of the button's tooltip.\n`flags` string[] (optional) - Control specific states and behaviors of the\n  button. By default, it is `['enabled']`.\n\nThe `flags` is an array that can include following `string`s:\n\n`enabled` - The button is active and available to the user.\n`disabled` - The button is disabled. It is present, but has a visual state\n  indicating it will not respond to user action.\n`dismissonclick` - When the button is clicked, the thumbnail window closes\n  immediately.\n`nobackground` - Do not draw a button border, use only the image.\n`hidden` - The button is not shown to the user.\n`noninteractive` - The button is enabled but not interactive; no pressed\n  button state is drawn. This value is intended for instances where the button\n",
    "tag": "electron"
  },
  {
    "title": "Product Object",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/product.md",
    "content": "Product Object\n\n`productIdentifier` string - The string that identifies the product to the Apple App Store.\n`localizedDescription` string - A description of the product.\n`localizedTitle` string - The name of the product.\n`contentVersion` string - A string that identifies the version of the content.\n`contentLengths` number[] - The total size of the content, in bytes.\n`price` number - The cost of the product in the local currency.\n`formattedPrice` string - The locale formatted price of the product.\n`currencyCode` string - 3 character code presenting a product's currency based on the ISO 4217 standard.\n`introductoryPrice` ProductDiscount (optional) - The object containing introductory price information for the product.\navailable for the product.\n`discounts` ProductDiscount[] - An array of discount offers\n`subscriptionGroupIdentifier` string - The identifier of the subscription group to which the subscription belongs.\n`subscriptionPeriod` ProductSubscriptionPeriod (optional) - The period details for products that are subscriptions.\n`isDownloadable` boolean - A boolean value that indicates whether the App Store has downloadable content for this product. `true` if at least one file has been associated with the product.\n`downloadContentVersion` string - A string that identifies the version of the content.\n",
    "tag": "electron"
  },
  {
    "title": "DesktopCapturerSource Object",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/desktop-capturer-source.md",
    "content": "DesktopCapturerSource Object\n\n`id` string - The identifier of a window or screen that can be used as a\n  `chromeMediaSourceId` constraint when calling\n  navigator.getUserMedia. The format of the identifier will be\n  `window:XX:YY` or `screen:ZZ:0`. XX is the windowID/handle. YY is 1 for\n  the current process, and 0 for all others. ZZ is a sequential number\n  that represents the screen, and it does not equal to the index in the\n  source's name.\n`name` string - A screen source will be named either `Entire Screen` or\n  `Screen <index>`, while the name of a window source will match the window\n  title.\n`thumbnail` NativeImage - A thumbnail image. Note:\n  There is no guarantee that the size of the thumbnail is the same as the\n  `thumbnailSize` specified in the `options` passed to\n  `desktopCapturer.getSources`. The actual size depends on the scale of the\n  screen or window.\n`display_id` string - A unique identifier that will correspond to the `id` of\n  the matching Display returned by the Screen API.\n  On some platforms, this is equivalent to the `XX` portion of the `id` field\n  above and on others it will differ. It will be an empty string if not\n  available.\n`appIcon` NativeImage - An icon image of the\n  application that owns the window or null if the source has a type screen.\n  The size of the icon is not known in advance and depends on what\n",
    "tag": "electron"
  },
  {
    "title": "InputEvent Object",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/input-event.md",
    "content": "InputEvent Object\n\n`type` string - Can be `undefined`, `mouseDown`, `mouseUp`, `mouseMove`,\n  `mouseEnter`, `mouseLeave`, `contextMenu`, `mouseWheel`, `rawKeyDown`,\n  `keyDown`, `keyUp`, `char`, `gestureScrollBegin`, `gestureScrollEnd`,\n  `gestureScrollUpdate`, `gestureFlingStart`, `gestureFlingCancel`,\n  `gesturePinchBegin`, `gesturePinchEnd`, `gesturePinchUpdate`,\n  `gestureTapDown`, `gestureShowPress`, `gestureTap`, `gestureTapCancel`,\n  `gestureShortPress`, `gestureLongPress`, `gestureLongTap`,\n  `gestureTwoFingerTap`, `gestureTapUnconfirmed`, `gestureDoubleTap`,\n  `touchStart`, `touchMove`, `touchEnd`, `touchCancel`, `touchScrollStarted`,\n  `pointerDown`, `pointerUp`, `pointerMove`, `pointerRawUpdate`,\n  `pointerCancel` or `pointerCausedUaAction`.\n`modifiers` string[] (optional) - An array of modifiers of the event, can\n  be `shift`, `control`, `ctrl`, `alt`, `meta`, `command`, `cmd`, `isKeypad`,\n  `isAutoRepeat`, `leftButtonDown`, `middleButtonDown`, `rightButtonDown`,\n",
    "tag": "electron"
  },
  {
    "title": "Cookie Object",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/cookie.md",
    "content": "Cookie Object\n\n`name` string - The name of the cookie.\n`value` string - The value of the cookie.\n`domain` string (optional) - The domain of the cookie; this will be normalized with a preceding dot so that it's also valid for subdomains.\n`hostOnly` boolean (optional) - Whether the cookie is a host-only cookie; this will only be `true` if no domain was passed.\n`path` string (optional) - The path of the cookie.\n`secure` boolean (optional) - Whether the cookie is marked as secure.\n`httpOnly` boolean (optional) - Whether the cookie is marked as HTTP only.\n`session` boolean (optional) - Whether the cookie is a session cookie or a persistent\n  cookie with an expiration date.\n`expirationDate` Double (optional) - The expiration date of the cookie as\n  the number of seconds since the UNIX epoch. Not provided for session\n  cookies.\n",
    "tag": "electron"
  },
  {
    "title": "IpcMainEvent Object extends `Event`",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/ipc-main-event.md",
    "content": "IpcMainEvent Object extends `Event`\n\n`processId` Integer - The internal ID of the renderer process that sent this message\n`frameId` Integer - The ID of the renderer frame that sent this message\n`returnValue` any - Set this to the value to be returned in a synchronous message\n`sender` WebContents - Returns the `webContents` that sent the message\n`senderFrame` WebFrameMain Readonly - The frame that sent this message\n`ports` MessagePortMain[] - A list of MessagePorts that were transferred with this message\n`reply` Function - A function that will send an IPC message to the renderer frame that sent the original message that you are currently handling.  You should use this method to \"reply\" to the sent message in order to guarantee the reply will go to the correct process and frame.\n`channel` string\n",
    "tag": "electron"
  },
  {
    "title": "ProductDiscount Object",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/product-discount.md",
    "content": "ProductDiscount Object\n\n`identifier` string - A string used to uniquely identify a discount offer for a product.\n`type` number - The type of discount offer.\n`price` number - The discount price of the product in the local currency.\n`priceLocale` string - The locale used to format the discount price of the product.\n`paymentMode` string - The payment mode for this product discount. Can be `payAsYouGo`, `payUpFront`, or `freeTrial`.\n`numberOfPeriods` number - An integer that indicates the number of periods the product discount is available.\n",
    "tag": "electron"
  },
  {
    "title": "IpcRendererEvent Object extends `Event`",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/ipc-renderer-event.md",
    "content": "IpcRendererEvent Object extends `Event`\n\n`sender` IpcRenderer - The `IpcRenderer` instance that emitted the event originally\n`senderId` Integer - The `webContents.id` that sent the message, you can call `event.sender.sendTo(event.senderId, ...)` to reply to the message, see [ipcRenderer.sendTo][ipc-renderer-sendto] for more information. This only applies to messages sent from a different renderer. Messages sent directly from the main process set `event.senderId` to `0`.\n`ports` MessagePort[] - A list of MessagePorts that were transferred with this message\n",
    "tag": "electron"
  },
  {
    "title": "JumpListCategory Object",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/jump-list-category.md",
    "content": "JumpListCategory Object\n\n`type` string (optional) - One of the following:\n`tasks` - Items in this category will be placed into the standard `Tasks`\n    category. There can be only one such category, and it will always be\n    displayed at the bottom of the Jump List.\n`frequent` - Displays a list of files frequently opened by the app, the\n    name of the category and its items are set by Windows.\n`recent` - Displays a list of files recently opened by the app, the name\n    of the category and its items are set by Windows. Items may be added to\n    this category indirectly using `app.addRecentDocument(path)`.\n`custom` - Displays tasks or file links, `name` must be set by the app.\n`name` string (optional) - Must be set if `type` is `custom`, otherwise it should be\n  omitted.\n`items` JumpListItem[] (optional) - Array of JumpListItem objects if `type` is `tasks` or\n  `custom`, otherwise it should be omitted.\n\nNote: If a `JumpListCategory` object has neither the `type` nor the `name`\nproperty set then its `type` is assumed to be `tasks`. If the `name` property\nis set but the `type` property is omitted then the `type` is assumed to be\n`custom`.\nNote: The maximum length of a Jump List item's `description` property is\n260 characters. Beyond this limit, the item will not be added to the Jump",
    "tag": "electron"
  },
  {
    "title": "USBDevice Object",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/usb-device.md",
    "content": "USBDevice Object\n\n`deviceId` string - Unique identifier for the device.\n`vendorId` Integer - The USB vendor ID.\n`productId` Integer - The USB product ID.\n`productName` string (optional) - Name of the device.\n`serialNumber` string (optional) - The USB device serial number.\n`manufacturerName` string (optional) - The manufacturer name of the device.\n`usbVersionMajor` Integer - The USB protocol major version supported by the device\n`usbVersionMinor` Integer - The USB protocol minor version supported by the device\n`usbVersionSubminor` Integer - The USB protocol subminor version supported by the device\n`deviceClass` Integer - The device class for the communication interface supported by the device\n`deviceSubclass` Integer - The device subclass for the communication interface supported by the device\n`deviceProtocol` Integer - The device protocol for the communication interface supported by the device\n`deviceVersionMajor` Integer - The major version number of the device as defined by the device manufacturer.\n`deviceVersionMinor` Integer - The minor version number of the device as defined by the device manufacturer.\n",
    "tag": "electron"
  },
  {
    "title": "ProcessMetric Object",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/process-metric.md",
    "content": "ProcessMetric Object\n\n`pid` Integer - Process id of the process.\n`type` string - Process type. One of the following values:\n`Browser`\n`Tab`\n`Utility`\n`Zygote`\n`Sandbox helper`\n`GPU`\n`Pepper Plugin`\n`Pepper Plugin Broker`\n`Unknown`\n`serviceName` string (optional) - The non-localized name of the process.\n`name` string (optional) - The name of the process.\n    Examples for utility: `Audio Service`, `Content Decryption Module Service`, `Network Service`, `Video Capture`, etc.\n`cpu` CPUUsage - CPU usage of the process.\n`creationTime` number - Creation time for this process.\n    The time is represented as number of milliseconds since epoch.\n    Since the `pid` can be reused after a process dies,\n    it is useful to use both the `pid` and the `creationTime` to uniquely identify a process.\n`memory` MemoryInfo - Memory information for the process.\n`sandboxed` boolean (optional) macOS Windows - Whether the process is sandboxed on OS level.\n`integrityLevel` string (optional) Windows - One of the following values:\n`untrusted`\n`low`\n`medium`\n`high`\n",
    "tag": "electron"
  },
  {
    "title": "ProtocolResponse Object",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/protocol-response.md",
    "content": "ProtocolResponse Object\n\n`error` Integer (optional) - When assigned, the `request` will fail with the\n  `error` number . For the available error numbers you can use, please see the\n  [net error list][net-error].\n`statusCode` number (optional) - The HTTP response code, default is 200.\n`charset` string (optional) - The charset of response body, default is\n  `\"utf-8\"`.\n`mimeType` string (optional) - The MIME type of response body, default is\n  `\"text/html\"`. Setting `mimeType` would implicitly set the `content-type`\n  header in response, but if `content-type` is already set in `headers`, the\n  `mimeType` would be ignored.\n`headers` Record (optional) - An object containing the response headers. The\n  keys must be string, and values must be either string or Array of string.\n`data` (Buffer | string | ReadableStream) (optional) - The response body. When\n  returning stream as response, this is a Node.js readable stream representing\n  the response body. When returning `Buffer` as response, this is a `Buffer`.\n  When returning `string` as response, this is a `string`. This is ignored for\n  other types of responses.\n`path` string (optional) - Path to the file which would be sent as response\n  body. This is only used for file responses.\n`url` string (optional) - Download the `url` and pipe the result as response\n  body. This is only used for URL responses.\n`referrer` string (optional) - The `referrer` URL. This is only used for file\n  and URL responses.\n`method` string (optional) - The HTTP `method`. This is only used for file\n  and URL responses.\n`session` Session (optional) - The session used for requesting URL, by default\n  the HTTP request will reuse the current session. Setting `session` to `null`\n  would use a random independent session. This is only used for URL responses.\n`uploadData` ProtocolResponseUploadData (optional) - The data used as upload data. This is only\n  used for URL responses when `method` is `\"POST\"`.\n",
    "tag": "electron"
  },
  {
    "title": "JumpListItem Object",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/jump-list-item.md",
    "content": "JumpListItem Object\n\n`type` string (optional) - One of the following:\n`task` - A task will launch an app with specific arguments.\n`separator` - Can be used to separate items in the standard `Tasks`\n    category.\n`file` - A file link will open a file using the app that created the\n    Jump List, for this to work the app must be registered as a handler for\n    the file type (though it doesn't have to be the default handler).\n`path` string (optional) - Path of the file to open, should only be set if `type` is\n  `file`.\n`program` string (optional) - Path of the program to execute, usually you should\n  specify `process.execPath` which opens the current program. Should only be\n  set if `type` is `task`.\n`args` string (optional) - The command line arguments when `program` is executed. Should\n  only be set if `type` is `task`.\n`title` string (optional) - The text to be displayed for the item in the Jump List.\n  Should only be set if `type` is `task`.\n`description` string (optional) - Description of the task (displayed in a tooltip).\n  Should only be set if `type` is `task`. Maximum length 260 characters.\n`iconPath` string (optional) - The absolute path to an icon to be displayed in a\n  Jump List, which can be an arbitrary resource file that contains an icon\n  (e.g. `.ico`, `.exe`, `.dll`). You can usually specify `process.execPath` to\n  show the program icon.\n`iconIndex` number (optional) - The index of the icon in the resource file. If a\n  resource file contains multiple icons this value can be used to specify the\n  zero-based index of the icon that should be displayed for this task. If a\n  resource file contains only one icon, this property should be set to zero.\n",
    "tag": "electron"
  },
  {
    "title": "Certificate Object",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/certificate.md",
    "content": "Certificate Object\n\n`data` string - PEM encoded data\n`issuer` CertificatePrincipal - Issuer principal\n`issuerName` string - Issuer's Common Name\n`issuerCert` Certificate - Issuer certificate (if not self-signed)\n`subject` CertificatePrincipal - Subject principal\n`subjectName` string - Subject's Common Name\n`serialNumber` string - Hex value represented string\n`validStart` number - Start date of the certificate being valid in seconds\n`validExpiry` number - End date of the certificate being valid in seconds\n",
    "tag": "electron"
  },
  {
    "title": "GPUFeatureStatus Object",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/gpu-feature-status.md",
    "content": "GPUFeatureStatus Object\n\n`2d_canvas` string - Canvas.\n`flash_3d` string - Flash.\n`flash_stage3d` string - Flash Stage3D.\n`flash_stage3d_baseline` string - Flash Stage3D Baseline profile.\n`gpu_compositing` string - Compositing.\n`multiple_raster_threads` string - Multiple Raster Threads.\n`native_gpu_memory_buffers` string - Native GpuMemoryBuffers.\n`rasterization` string - Rasterization.\n`video_decode` string - Video Decode.\n`video_encode` string - Video Encode.\n`vpx_decode` string - VPx Video Decode.\n`webgl` string - WebGL.\n`webgl2` string - WebGL2.\n\nPossible values:\n\n`disabled_software` - Software only. Hardware acceleration disabled (yellow)\n`disabled_off` - Disabled (red)\n`disabled_off_ok` - Disabled (yellow)\n`unavailable_software` - Software only, hardware acceleration unavailable (yellow)\n`unavailable_off` - Unavailable (red)\n`unavailable_off_ok` - Unavailable (yellow)\n`enabled_readback` - Hardware accelerated but at reduced performance (yellow)\n`enabled_force` - Hardware accelerated on all pages (green)\n`enabled` - Hardware accelerated (green)\n`enabled_on` - Enabled (green)\n",
    "tag": "electron"
  },
  {
    "title": "ShortcutDetails Object",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/shortcut-details.md",
    "content": "ShortcutDetails Object\n\n`target` string - The target to launch from this shortcut.\n`cwd` string (optional) - The working directory. Default is empty.\n`args` string (optional) - The arguments to be applied to `target` when\nlaunching from this shortcut. Default is empty.\n`description` string (optional) - The description of the shortcut. Default\nis empty.\n`icon` string (optional) - The path to the icon, can be a DLL or EXE. `icon`\nand `iconIndex` have to be set together. Default is empty, which uses the\ntarget's icon.\n`iconIndex` number (optional) - The resource ID of icon when `icon` is a\nDLL or EXE. Default is 0.\n`appUserModelId` string (optional) - The Application User Model ID. Default\nis empty.\n`toastActivatorClsid` string (optional) - The Application Toast Activator CLSID. Needed\n",
    "tag": "electron"
  },
  {
    "title": "NotificationAction Object",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/notification-action.md",
    "content": "NotificationAction Object\n\n`type` string - The type of action, can be `button`.\n`text` string (optional) - The label for the given action.\n\nPlatform / Action Support\n| Action Type | Platform Support | Usage of `text` | Default `text` | Limitations |\n|-------------|------------------|-----------------|----------------|-------------|\n| `button`    | macOS            | Used as the label for the button | \"Show\" (or a localized string by system default if first of such `button`, otherwise empty) | Only the first one is used. If multiple are provided, those beyond the first will be listed as additional actions (displayed when mouse active over the action button). Any such action also is incompatible with `hasReply` and will be ignored if `hasReply` is `true`. |\nButton support on macOS\nIn order for extra notification buttons to work on macOS your app must meet the\nfollowing criteria.\n\nApp is signed\nApp has it's `NSUserNotificationAlertStyle` set to `alert` in the `Info.plist`.\n",
    "tag": "electron"
  },
  {
    "title": "TraceConfig Object",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/trace-config.md",
    "content": "TraceConfig Object\n\n`recording_mode` string (optional) - Can be `record-until-full`, `record-continuously`, `record-as-much-as-possible` or `trace-to-console`. Defaults to `record-until-full`.\n`trace_buffer_size_in_kb` number (optional) - maximum size of the trace\n  recording buffer in kilobytes. Defaults to 100MB.\n`trace_buffer_size_in_events` number (optional) - maximum size of the trace\n  recording buffer in events.\n`enable_argument_filter` boolean (optional) - if true, filter event data\n  according to a specific list of events that have been manually vetted to not\n  include any PII. See the implementation in\n  Chromium for specifics.\n`included_categories` string[] (optional) - a list of tracing categories to\n  include. Can include glob-like patterns using `*` at the end of the category\n  name. See tracing categories for the list of categories.\n`excluded_categories` string[] (optional) - a list of tracing categories to\n  exclude. Can include glob-like patterns using `*` at the end of the category\n  name. See tracing categories for the list of categories.\n`included_process_ids` number[] (optional) - a list of process IDs to\n  include in the trace. If not specified, trace all processes.\n`histogram_names` string[] (optional) - a list of [histogram][] names to report\n  with the trace.\n`memory_dump_config` Record (optional) - if the\n  `disabled-by-default-memory-infra` category is enabled, this contains\n  optional additional configuration for data collection. See the Chromium\n  memory-infra docs for more information.\n\nAn example TraceConfig that roughly matches what Chrome DevTools records:\n`js\n{\n  recording_mode: 'record-until-full',\n  included_categories: [\n    'devtools.timeline',\n    'disabled-by-default-devtools.timeline',\n    'disabled-by-default-devtools.timeline.frame',\n    'disabled-by-default-devtools.timeline.stack',\n    'v8.execute',\n    'blink.console',\n    'blink.user_timing',\n    'latencyInfo',\n    'disabled-by-default-v8.cpu_profiler',\n    'disabled-by-default-v8.cpu_profiler.hires'\n  ],\n  excluded_categories: ['*']\n}`",
    "tag": "electron"
  },
  {
    "title": "Task Object",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/task.md",
    "content": "Task Object\n\n`program` string - Path of the program to execute, usually you should\n  specify `process.execPath` which opens the current program.\n`arguments` string - The command line arguments when `program` is\n  executed.\n`title` string - The string to be displayed in a JumpList.\n`description` string - Description of this task.\n`iconPath` string - The absolute path to an icon to be displayed in a\n  JumpList, which can be an arbitrary resource file that contains an icon. You\n  can usually specify `process.execPath` to show the icon of the program.\n`iconIndex` number - The icon index in the icon file. If an icon file\n  consists of two or more icons, set this value to identify the icon. If an\n  icon file consists of one icon, this value is 0.\n",
    "tag": "electron"
  },
  {
    "title": "Display Object",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/display.md",
    "content": "Display Object\n\n`id` number - Unique identifier associated with the display.\n`label` string - User-friendly label, determined by the platform.\n`rotation` number - Can be 0, 90, 180, 270, represents screen rotation in\n  clock-wise degrees.\n`scaleFactor` number - Output device's pixel scale factor.\n`touchSupport` string - Can be `available`, `unavailable`, `unknown`.\n`monochrome` boolean - Whether or not the display is a monochrome display.\n`accelerometerSupport` string - Can be `available`, `unavailable`, `unknown`.\n`colorSpace` string -  represent a color space (three-dimensional object which contains all realizable color combinations) for the purpose of color conversions\n`colorDepth` number - The number of bits per pixel.\n`depthPerComponent` number - The number of bits per color component.\n`displayFrequency` number - The display refresh rate.\n`bounds` Rectangle - the bounds of the display in DIP points.\n`size` Size\n`workArea` Rectangle - the work area of the display in DIP points.\n`workAreaSize` Size\n`internal` boolean - `true` for an internal display and `false` for an external display\n\nThe `Display` object represents a physical display connected to the system. A\nfake `Display` may exist on a headless system, or a `Display` may correspond to",
    "tag": "electron"
  },
  {
    "title": "Transaction Object",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/transaction.md",
    "content": "Transaction Object\n\n`transactionIdentifier` string - A string that uniquely identifies a successful payment transaction.\n`transactionDate` string - The date the transaction was added to the App Store\u2019s payment queue.\n`originalTransactionIdentifier` string - The identifier of the restored transaction by the App Store.\n`transactionState` string - The transaction state, can be `purchasing`, `purchased`, `failed`, `restored` or `deferred`.\n`errorCode` Integer - The error code if an error occurred while processing the transaction.\n`errorMessage` string - The error message if an error occurred while processing the transaction.\n`payment` Object\n`productIdentifier` string - The identifier of the purchased product.\n`quantity` Integer  - The quantity purchased.\n`applicationUsername` string - An opaque identifier for the user\u2019s account on your system.\n",
    "tag": "electron"
  },
  {
    "title": "TraceCategoriesAndOptions Object",
    "source": "https://github.com/electron/electron/tree/main/docs/api/structures/trace-categories-and-options.md",
    "content": "TraceCategoriesAndOptions Object\n\n`categoryFilter` string - A filter to control what category groups\n  should be traced. A filter can have an optional '-' prefix to exclude\n  category groups that contain a matching category. Having both included\n  and excluded category patterns in the same list is not supported. Examples:\n  `test_MyTest*`, `test_MyTest*,test_OtherStuff`, `-excluded_category1,-excluded_category2`.\n`traceOptions` string - Controls what kind of tracing is enabled,\n  it is a comma-delimited sequence of the following strings:\n  `record-until-full`, `record-continuously`, `trace-to-console`, `enable-sampling`, `enable-systrace`,\n  e.g. `'record-until-full,enable-sampling'`.\n  The first 3 options are trace recording modes and hence mutually exclusive.\n  If more than one trace recording modes appear in the `traceOptions` string,\n  the last one takes precedence. If none of the trace recording modes are\n  specified, recording mode is `record-until-full`.\n  The trace option will first be reset to the default option (`record_mode` set\n  to `record-until-full`, `enable_sampling` and `enable_systrace`\n",
    "tag": "electron"
  }
]