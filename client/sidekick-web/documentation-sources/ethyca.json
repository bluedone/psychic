[
  {
    "title": "License",
    "source": "https://github.com/ethyca/fides/tree/main/docs/fides/docs/license.md",
    "content": "License\n```txt\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\n  and distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\n  the copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\n  other entities that control, are controlled by, or are under common\n  control with that entity. For the purposes of this definition,\n  \"control\" means (i) the power, direct or indirect, to cause the\n  direction or management of such entity, whether by contract or\n  otherwise, or (ii) ownership of fifty percent (50%) or more of the\n  outstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\n  exercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\n  including but not limited to software source code, documentation\n  source, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\n  transformation or translation of a Source form, including but\n  not limited to compiled object code, generated documentation,\n  and conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\n  Object form, made available under the License, as indicated by a\n  copyright notice that is included in or attached to the work\n  (an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\n  form, that is based on (or derived from) the Work and for which the\n  editorial revisions, annotations, elaborations, or other modifications\n  represent, as a whole, an original work of authorship. For the purposes\n  of this License, Derivative Works shall not include works that remain\n  separable from, or merely link (or bind by name) to the interfaces of,\n  the Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\n  the original version of the Work and any modifications or additions\n  to that Work or Derivative Works thereof, that is intentionally\n  submitted to Licensor for inclusion in the Work by the copyright owner\n  or by an individual or Legal Entity authorized to submit on behalf of\n  the copyright owner. For the purposes of this definition, \"submitted\"\n  means any form of electronic, verbal, or written communication sent\n  to the Licensor or its representatives, including but not limited to\n  communication on electronic mailing lists, source code control systems,\n  and issue tracking systems that are managed by, or on behalf of, the\n  Licensor for the purpose of discussing and improving the Work, but\n  excluding communication that is conspicuously marked or otherwise\n  designated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\n  on behalf of whom a Contribution has been received by Licensor and\n  subsequently incorporated within the Work.\n\n\nGrant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n\nGrant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n\nRedistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n(a) You must give any other recipients of the Work or\n      Derivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices\n      stating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works\n      that You distribute, all copyright, patent, trademark, and\n      attribution notices from the Source form of the Work,\n      excluding those notices that do not pertain to any part of\n      the Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its\n      distribution, then any Derivative Works that You distribute must\n      include a readable copy of the attribution notices contained\n      within such NOTICE file, excluding those notices that do not\n      pertain to any part of the Derivative Works, in at least one\n      of the following places: within a NOTICE text file distributed\n      as part of the Derivative Works; within the Source form or\n      documentation, if provided along with the Derivative Works; or,\n      within a display generated by the Derivative Works, if and\n      wherever such third-party notices normally appear. The contents\n      of the NOTICE file are for informational purposes only and\n      do not modify the License. You may add Your own attribution\n      notices within Derivative Works that You distribute, alongside\n      or as an addendum to the NOTICE text from the Work, provided\n      that such additional attribution notices cannot be construed\n      as modifying the License.\nYou may add Your own copyright statement to Your modifications and\n  may provide additional or different license terms and conditions\n  for use, reproduction, or distribution of Your modifications, or\n  for any such Derivative Works as a whole, provided Your use,\n  reproduction, and distribution of the Work otherwise complies with\n  the conditions stated in this License.\n\n\nSubmission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n\nTrademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n\nDisclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n\nLimitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n\nAccepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n\nEND OF TERMS AND CONDITIONS\nAPPENDIX: How to apply the Apache License to your work.\n\n\n```  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n```\n\n\nCopyright 2021- Ethyca, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n\n```   http://www.apache.org/licenses/LICENSE-2.0\n```\n\n\nUnless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.",
    "tag": "ethyca"
  },
  {
    "title": "The Fides Ecosystem",
    "source": "https://github.com/ethyca/fides/tree/main/docs/fides/docs/index.md",
    "content": "The Fides Ecosystem\nFides (pronounced /fee-dhez/, from Latin: Fid\u0113s) is an open-source privacy engineering platform for managing the fulfillment of data privacy requests in your runtime environment, and the enforcement of privacy regulations in your code.\nThe Fides developer tools allow engineers and legal teams to label system privacy characteristics, orchestrate programmatic rights fulfillment, and audit stored personal identifiable information (PII) throughout application systems and infrastructure. This includes support for major privacy regulations (e.g. GDPR, CCPA and LGPD), and standards like ISO 19944 by default.\nKey Features\n\nEnd-to-End Data Subject Request Automation\nPrivacy-as-Code\nCompliance-minded Data Mapping\nComprehensive Privacy Standard Support\n",
    "tag": "ethyca"
  },
  {
    "title": "About Ethyca",
    "source": "https://github.com/ethyca/fides/tree/main/docs/fides/docs/ethyca.md",
    "content": "About Ethyca\nThe mission of Ethyca is to make Internet-scale technology respectful and ethical. We're a venture-backed privacy technology team headquartered in New York, but working as a distributed team across the US to solve what we believe is the most important problem in technology today: the human right to privacy in vastly complex data-driven systems.\nWhat is Fides?\nFides is a universally understandable, open-source language that can be used to describe privacy within tech infrastructure. Our existing tools use this language to power a low friction set of developer tools that integrate with your existing CI pipelines, making privacy a feature of your tech stack. With Fides, we hope everyone can build better tools for privacy in the next decade and beyond.  \nWhat we Believe\nData privacy is a human right that should be a native feature of any respectful technology. Today building great privacy as a feature in software is friction-filled and complicated. We're building open-source privacy tools for the developer community because we believe the only way to achieve a respectful internet is to make privacy an easy-to-implement layer of any tech stack.\nThe Future\nWe've been working on this problem since 2018 and have a clear view of our next five years. We're excited about the roadmap of features we'll add to Fides in order to make it the comprehensive tool for addressing the major challenges of privacy in both the code management and runtime environments. \nWe'd love you to contribute to Fides, and you can do this directly as part of the open-source community. If you're interested in solving some of the toughest and most important problems facing internet scale data-driven software, join us now and get paid to work on this problem too!\nYour Participation",
    "tag": "ethyca"
  },
  {
    "title": "Development Overview",
    "source": "https://github.com/ethyca/fides/tree/main/docs/fides/docs/development/overview.md",
    "content": "Development Overview\nThanks for contributing to Fides! This section of the docs is designed to help you become familiar with how we work, the standards we apply, and how to ensure your contribution is successful.\nIf you're stuck, don't be shy about asking for help on GitHub.\nGetting Started\nThe first step is to clone the Fides repo for development:\n`bash\ngit clone https://github.com/ethyca/fides`\nOnce that's complete, there are a few different ways to spin up the project and get coding!\nDeveloper Workflows\nThere are a few different ways to develop Fides, they are listed below in order of how strongly they are recommended!\n\nThe recommended way to work on Fides is by utilizing the `Noxfile` commands:\nMake sure that you have `docker` and `nox` (`pip install nox`) installed.\nRun `nox` in the root directory to see a list of all of the possible Nox commands. This is helpful as a reference when trying to find new commands or remember old ones!\nRun `nox -s dev -- shell` to spin up the entire `fides` application as well as a shell within the `fides` webserver container.\nYou can and should run all of your various development commands from within this shell, such as `pytest`, `black`, etc.\n\n\nWhile it is possible to install all application dependencies and develop on the project without Docker, this is neither recommended nor tested.\n\nNOTE: When working with the CLI or `ctl` tests via an interactive shell, you will most likely need to authenticate with `fides user login`. Check the development `fides.toml` file for the root credentials.\nIssues\n\n\nMSSQL: Known issues around connecting to MSSQL exist today for Apple M1 users. M1 users that wish to install `pyodbc` locally, please reference the workaround here.\n\n\nPackage not found: When running `nox -s dev`, if you get a `importlib.metadata.PackageNotFoundError: fides`, do `nox -s dev -- shell`, and then run `pip install -e .`. Verify Fides is installed with `pip list`.\n\n\nWrite your code\nWe have no doubt you can write amazing code! However, we want to help you ensure your code plays nicely with the rest of the Fides ecosystem. Many projects describe code style and documentation as a suggestion; in Fides it's a CI-checked requirement.\n\nTo learn how to style your code, see the style guide.\nTo learn how to migrate the database schema, see the database migration guide.\nTo learn how to document your code, see the docs guide.\nTo learn how to test your code, see the tests guide.\nTo learn what format your PR should follow, make sure to follow the pull request guidelines.\n\nSubmit your code\nIn order to submit code to Fides, please:\n\nFork the Fides repository\nCreate a new branch on your fork\nOpen a Pull Request once your work is ready for review\nOnce automated tests have passed, a maintainer will review your PR and provide feedback on any changes it requires to be approved. Once approved, your PR will be merged into Fides.\n\nCongratulations",
    "tag": "ethyca"
  },
  {
    "title": "Releases",
    "source": "https://github.com/ethyca/fides/tree/main/docs/fides/docs/development/releases.md",
    "content": "Releases\nVersioning\nFides uses semantic versioning. Due to the rapid development of the project, some minor versions may also contain minor breaking changes. The best practice is to always pin versions, and carefully test before bumping to a new version. \nPatch versions will never cause breaking changes, and are only used to hotfix critical bugs.\nRelease schedule\nFides does not follow a set release schedule, and instead ships versions based on the addition of features and functionality. Each release, with the exception of hotfixes, will contain at least one substantial new feature.\nPlanning\nFor each release, a corresponding GitHub Project is created. Issues are added to projects as a way to organize what will be included in each release.\nOnce a release project is complete and the core team signs off on the readiness of the release, a new version is cut using GitHub releases. You can see all Fides releases here. Each new release triggers a GitHub Action that pushes the new version to PyPI, and a clean version to DockerHub. The release project is then marked as `closed`.\nHotfixes are an exception to this, and can be added and pushed as patch versions when needed.\nBranching\nFides uses continuous delivery with a single `main` branch. All code changes are merged into this branch. \nWhen releasing, a new tag is created, and the release process proceeds automatically. \nIn the case of patches, a branch is created from the relevant tag. Commits are then cherry-picked into this branch, and a new patch version tag is created.\nRelease Steps\nWe use GitHub\u2019s `release` feature to tag releases that then get automatically deployed to DockerHub and PyPi via GitHub Actions pipelines. We also use a `CHANGELOG.md` to make sure that our users are never surprised about an upcoming change and can plan upgrades accordingly. The release steps are as follows:\nMajor and Minor\n\nOpen a PR that is titled the version of the release (i.e. `1.6.0`)\nRename the `Unreleased` section of `CHANGELOG.md` to the new version number and put a date next to it\nUpdate the `compare` links for both the new version and for the new `Unreleased` section\n\n\nOnce approved, merge the PR\nCreate a new release, ensuring that the last PR to get merged is the aforementioned `CHANGELOG.md` update PR\nAdd the new version as the tag (i.e. `1.6.0`)\nMake the title the version with a `v` in front of it (i.e. `v1.6.0`)\nAdd a link to the `CHANGELOG.md`\nAuto-populate the release notes\nPublish the release\n\nPatch\nIt may be necessary for a patch release to contain only select commits to the `main` branch since the last major or minor release. To create a release with only the desired changes, follow the steps below:\n\n\nCheckout the most recent release's tag\n\n\nTo fetch the most recent tag's name, run:\n```sh\nfides on main\ngit describe --abbrev=0 --tags\n=> 1.2.3\n```\n\n\nTo checkout the most recent tag, run:\n```sh\nfides on main\ngit checkout 1.2.3\n=> Note: switching to '1.2.3'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by switching back to a branch.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -c with the switch command. Example:\n\ngit switch -c \n\nOr undo this operation with:\n\ngit switch -\n\nTurn off this advice by setting config variable advice.detachedHead to false\n\nHEAD is now at 0123abcd Commit Message\n```\n\n\n!!! tip\n    This can be combined into a single command:\n\n\n``````sh\n# fides on main\ngit checkout $(git describe --abbrev=0 --tags)\n\n#=> Note: switching to '1.2.3'.\n#\n# You are in 'detached HEAD' state. You can look around, make experimental\n# changes and commit them, and you can discard any commits you make in this\n# state without impacting any branches by switching back to a branch.\n#\n# If you want to create a new branch to retain commits you create, you may\n# do so (now or later) by using -c with the switch command. Example:\n#\n# git switch -c <new-branch-name>\n#\n# Or undo this operation with:\n#\n# git switch -\n#\n# Turn off this advice by setting config variable advice.detachedHead to false\n#\n# HEAD is now at 0123abcd Commit Message\n```\n```\n\n\n\n\nCreate a new branch from the `HEAD` commit of the most recent release's tag, called `release-v<tag>`\n```sh\nfides on tags/1.2.3\ngit checkout -b release-v1.2.4\n=> Switched to a new branch 'release-v1.2.4'\n```\n\n\nIf the changes to be included in the patch release are contained in one or more unmerged pull requests, change the base branch of the pull request(s) to the release branch created in the previous step\n\nOnce approved, merge the pull request(s) into the release branch\n\nCreate a new branch off of the release branch by running:\n```sh\nfides on release-v1.2.4\ngit checkout -b prepare-release-v1.2.4\n=> Switched to a new branch 'prepare-release-v1.2.4'\n```\n\n\nOptional: Incorporate any additional specific changes required for the patch release by running:\n```sh\nfides on prepare-release-v1.2.4\ngit cherry-pick ...\n```\n\n\nCopy the `Unreleased` section of `CHANGELOG.md` and paste above the release being patched\n\nRename `Unreleased` to the new version number and put a date next to it\nCut and paste the documented changes that are now included in the patch release to the correct section\nCommit these changes\n\n\nOpen a pull request to incorporate any cherry-picked commits and the `CHANGELOG.md` changes into the release branch\nSet the base branch of this pull request to the release branch\nOnce approved, merge the pull request into the release branch\n\n\nCreate a new release from the release branch\nAdd the new version as the tag (i.e. `1.2.4`)\nTitle the release with the version number, prefixed with a `v` (i.e. `v1.2.4`)\nAdd a link to the `CHANGELOG.md`\nAuto-populate the release notes\n\n\nPublish the release\n\nMerge the new release tag into `main`\n!!! warning\n    Pushing commits (including merge commits) to the `main` branch requires admin-level repository permissions.\n\n\nCheckout the `main` branch, and update the local repository:\n```sh\ngit checkout main\n=> Switched to branch 'main'...\ngit pull\n```\n\n\nMerge the new release tag into `main`:\n```sh\ngit merge tags/1.2.4\n```\n\n\n\n",
    "tag": "ethyca"
  },
  {
    "title": "Updating database diagram",
    "source": "https://github.com/ethyca/fides/tree/main/docs/fides/docs/development/update_erd_diagram.md",
    "content": "Updating database diagram\nIf you make updates to the Fides application database, you should update the DB Architecture diagram in the documentation.\n\nConnect DBeaver to our `app` DB container\nDBeaver > Database > New Database Connection > PostgreSQL\nAdd configuration details\n  \nRight-click on postgres connection > Create > Other\nSelect ER Diagram, Click Next\nDrill down to Postgres > app > Schemas > public and click the checkbox.\nAdd a name to your ER Diagram\nClick Finish\n\n\nDrag and drop tables so they are less messy.\nFile > Save As (app_database.png)\n",
    "tag": "ethyca"
  },
  {
    "title": "Contributing Details",
    "source": "https://github.com/ethyca/fides/tree/main/docs/fides/docs/development/contributing_details.md",
    "content": "Contributing Details\nAPI Endpoints\nPostman API collection\nThe fides Postman Collection) can be used to test a variety of privacy request endpoints. Follow the Using Postman guide to learn more about the how to use the collection.\nAPI URLs\nWe define API URLs for specific API versions as constants within `fides.api.ops.api.v1.urn_registry` (where `v1` can be substituted for that particular API version), then import those URLs into their specific API views. Since we are on the first version, there is no clear precedent set for overriding URLs between versions yet. The most likely change is that we'll override the `APIRouter` class instantiation with a different base path (ie. `/api/v2` instead of `/api/v1`). For example:\n`PRIVACY_REQUEST = \"/privacy-request\"\nPRIVACY_REQUEST_DETAIL = \"/privacy-request/{privacy_request_id}\"`\nwould both resolve as `/api/v1/privacy-request` and `/api/v1/privacy-request/{privacy_request_id}` respectively.\nDatabase and Models\nThe ORM -- SQLAlchemy\nSQLAlchemy is an Object Relational Mapper, allowing us to avoid writing direct database queries within our codebase, and access the database via Python code instead. The ORM provides an additional configuration layer allowing user-defined Python classes to be mapped to database tables and other constructs, as well as an object persistence mechanism known as the `Session`. Some common uses cases are listed below, for a more comprehensive guide see: https://docs.sqlalchemy.org/en/14/tutorial/index.html\nAdding models\nDatabase tables are defined with model classes. Model files should live in `src/app/models/`. Individual model classes must inherit from our custom base class at `app.db.base_class.Base` to ensure uniformity within the database. Multiple models per file are encouraged so long as they fit the same logical delineation within the project. An example model declaration is added below. For a comprehensive guide see: https://docs.sqlalchemy.org/en/14/orm/mapping_styles.html#declarative-mapping\nYou should also import your model in src/fides/api/ops/db/base.py so it is visible for alembic.\n```\nclass Book(Base):\n    tablename = 'book'\n\n\n```id = Column(Integer, primary_key=True)\nname = Column(String, index=True)\npage_count = Column(Integer, nullable=True)\nauthor_id = Column(Integer, ForeignKey(\"author.id\"), nullable=False)\n```\n\n\n```\nWhen models are added to the project, we must then add them to the database in a recordable and repeatable fashion using migrations.\nUsing the database via models\nOnce you've added database tables via project models, you're ready to read, write, and update them via Python code. Some examples of common use cases here are listed below. Official documentation is here: https://docs.sqlalchemy.org/en/14/orm/query.html#sqlalchemy.orm.Query.\n\nImport our application's database session: `from fides.api.ops.db.session import get_db_session`\nInstantiate the database interaction object:\n\n`SessionLocal = get_db_session(config)\ndb = SessionLocal()`\n\nCreate a new row in a table:\n\n`db_obj = User(\n    email=\"admin@fides.app\",\n    full_name=\"Fides Admin\",\n    is_superuser=True,\n    is_active=True,\n)\ndb.add(db_obj)\ndb.commit()\ndb.refresh(db_obj)`\n\nFetch all objects in a table: `users = db.query(User).all()`\nFetch all objects in a table that meet some criteria: `active_users = db.query(User).filter(User.is_active == True)`\nGet a specific row in a table: `user = db.query(User).get(User.email == \"admin@fides.app\")`\nUpdate a specific row in a table:\n\n`user.email = \"updated@fides.app\"\ndb.add(user)\ndb.commit()\ndb.refresh()`\nConnecting to the database\nWhen you run `nox -s dev`, the database will spin up in a Docker container with port `5432` exposed on localhost. You can connect to it using the credentials found in `.fides.toml`, e.g.\n\nHostname: `localhost`\nPort: `5432`\nUsername: see `database.user` in `.fides.toml`\nPassword: see `database.password` in `.fides.toml`\n\nAlembic migrations\nSome common Alembic commands are listed below. For a comprehensive guide see: https://alembic.sqlalchemy.org/en/latest/tutorial.html.\nThe commands will need to be run inside a shell on your Docker containers, which can be opened with `nox -s dev -- shell`.\nIn the `/src/fides/api/ctl` directory:\n\nMigrate your database to the latest state: `alembic upgrade head`\nGet revision id of previous migration: `alembic current`\nAutomatically generate a new migration: `alembic revision --autogenerate -m \"<a message describing your changes>\"`\nCreate a new migration file to manually fill out: `alembic revision -m \"<a message describing your changes>\"`\nMigrate your database to a specific state `alembic upgrade <revision-id>` or `alembic downgrade <revision-id>`, (or if you want to be smart `alembic upgrade <revision-id> || alembic downgrade <revision-id>` is handy when you don't know whether the target revision is an upgrade or downgrade)\nNB. You can find the `revision-id` inside each migration file in `alembic/versions/` on line 3 next to `Revision ID: ...`\n\nWhen working on a PR with a migration, ensure that `down_revision` in the generated migration file correctly references the previous migration before submitting/merging the PR.\nException Handling\nOur preference for exception handling is by overriding the nearest sensible error, for example:\n```\nclass SomeException(ValueError):\n    \"a docstring\"\ndef some_method():\n    raise SomeException(\"a message\")\n```\nGeneral debugging -- pdb\nThe project uses `pdb` for debugging as a `dev-requirement`. You can set breakpoints with `pdb` in much the same way you'd set them using `debugger` in Javascript. Insert `import pdb; pdb.set_trace()` into the line where you want the breakpoint to set, then run your Python code.\nDocker\nOccasionally when developing you'll run into issues where it's beneficial to remove all existing Docker instances in order to recreate them based on some updated spec. Some commands to do this are below:\n\nStop all running containers: `docker compose down`\nDelete all local containers: `docker rm -f $(docker ps -a -q)`\nDelete all local Docker volumes: `docker volume rm $(docker volume ls -q)`\nRemove temp. files, installed dependencies, all local Docker containers and all local Docker volumes: `nox -s clean`\nDelete all stopped containers, all networks not used by a container, all dangling images, and all build cache: `docker system prune`\n",
    "tag": "ethyca"
  },
  {
    "title": "Debugging Fides in IntelliJ IDEA Ultimate",
    "source": "https://github.com/ethyca/fides/tree/main/docs/fides/docs/development/jetbrains_debugging.md",
    "content": "Debugging Fides in IntelliJ IDEA Ultimate\nThis guide will show how to use the IntelliJ debugger with Fides running in Docker.\nThe setup for PyCharm Professional should be very similar.\nPrerequisites\n\nIntellij IDEA Ultimate or PyCharm Professional\nDocker plugin\nPython plugin (this is needed for Intellij)\nDocker Desktop\n\nSetup\nConnect to Docker daemon\nThis step will allow the IDE to connect to Docker Desktop.\nGo to: Settings/Preferences -> Docker -> +\n\nSelect Docker for \"your operating system\"\n\nSee the screenshot below:\n\nConfigure Python Remote Interpreter\nDefine a Docker-based remote interpreter.\nGo to: File -> Project Structure... -> Platform Settings -> SDKs -> +\n\nSet Server to `Docker`\nSet Configuration files to `.docker-compose.yml`\nSet Python interpreter path to `python`\n\nAfter clicking OK the Remote Python Docker Compose should be listed as an SDK.\nSee screenshots below:\n\n\nRun/Debug Configuration\nSet up a Run/Debug Configuration so that breakpoints can be hit in the f sourcecode.\nGo to: Run/Debug Configurations -> + -> Python\n\nTo debug Fides, debug the `<path on your machine>/src/fides/main.py` script\nMake sure to select Use specified interpreter set the Remote Python Docker Compose (created in the previous section)\nAdd `FIDES__CONFIG_PATH=/fides` to Environment variables\n\nSee screenshot below:\n\nHit a Breakpoint\nNow the IDE is ready to debug the source code. Click the debug button for main (setup in the previous section).\nTry firing a http request to Fides from Postman or Curl and hit a break point.\nThere is a postman collection in this repo: `docs/fides/docs/development/postman/Fides.postman_collection.json`\nScreenshot of hit breakpoint below:\n\nLinks\nThe information is this guide is largely based on these docs\n\nhttps://www.jetbrains.com/help/pycharm/using-docker-as-a-remote-interpreter.html\n",
    "tag": "ethyca"
  },
  {
    "title": "Release Checklist",
    "source": "https://github.com/ethyca/fides/tree/main/docs/fides/docs/development/release_checklist.md",
    "content": "Release Checklist\nThe release checklist is a manual set of checks done before each release to ensure functionality of the most critical components of the application. Some of these steps are redundant with automated tests, while others are only tested here as part of this check.\nThis checklist should be copy/pasted into the final pre-release PR, and checked off as you complete each step.\nPre-Release Steps\nGeneral\n\n[ ] Quickstart verified working and up-to-date\n[ ] Add any new tables/columns to the database diagram if they have not already been added\nTo check for the new tables/columns that have been added in the release, look for new migration files in the `src/fides/api/ctl/migrations` directory and inspect their contents\nIf found, look at the latest database diagram, and check whether it contains the tables/columns that were added in these migrations\nIf the diagram is not up to date, follow the steps in the link above to generate a new database diagram with the up-to-date schema, ensuring that all tables and their relationships can be clearly seen\nOpen up an issue on fidesdocs to update the diagram on the new docs site\n[ ] `nox -s fides_env(test)` works (verify the admin UI on localhost:8080, privacy center, CLI and webserver)\n[ ] `nox -s \"build(sample)\"` works on the release branch, creating the sample images (this is also prereq for `fides deploy up`)\n[ ] `fides deploy up --no-pull` works using the images built in previous step (verify the admin UI, privacy center, CLI and webserver)\n\n`mkdir ~/fides-2-1-0-test\ncd ~/fides-2-1-0-test\npython3 -m venv venv\nsource venv/bin/activate\npip install git+https://github.com/ethyca/fides.git@<branch>\nfides deploy up --no-pull\nfides status\nfides deploy down\nrm -rf ~/fides-2-1-0-test\nexit`\nNext, run the following checks against the environment you've spun up using `fides deploy up --no-pull`:\nAPI\n\n[ ] Verify that the generated API docs are correct\n[ ] Verify that the Postman collection has been updated\n\nCLI\nRun these from within `nox -s dev -- shell`\n\n[ ] Run a `fides push`\n[ ] Run a `fides pull`\n[ ] Run a `fides evaluate`\n[ ] Generate a dataset with `fides generate dataset db --credentials-id app_postgres test.yml`\n[ ] Scan a database with `fides scan dataset db --credentials-id app_postgres`\n\nAdmin UI\n\n[ ] Every navigation button works\n[ ] DSR approval succeeds\n[ ] DSR execution succeeds\n\nPrivacy Center\n\n[ ] Every navigation button works\n[ ] DSR submission succeeds\n[ ] Consent request submission succeeds\n\nDocumentation\n\n[ ] Verify that the CHANGELOG is formatted correctly and clean up verbiage where needed\n[ ] Verify that the CHANGELOG is representative of the actual changes\n\nPost-Release Steps\n\n[ ] Verify the ethyca-fides release is published to PyPi: https://pypi.org/project/ethyca-fides/#history\n[ ] Verify the fides release is published to DockerHub: https://hub.docker.com/r/ethyca/fides\n[ ] Verify the fides-privacy-center release is published to DockerHub: https://hub.docker.com/r/ethyca/fides-privacy-center\n[ ] Verify the fides-sample-app release is published to DockerHub: https://hub.docker.com/r/ethyca/fides-sample-app\n",
    "tag": "ethyca"
  },
  {
    "title": "Testing",
    "source": "https://github.com/ethyca/fides/tree/main/docs/fides/docs/development/testing.md",
    "content": "Testing\nFides loves tests! There are a few important reasons to write tests:\n\nMake sure your code works\n\nTests ensure that your code does the thing you intend it to do.\nIf you have a function that adds two numbers, you'll want to test that it does, in fact, return their sum. If behavior depends on a configuration setting, ensure that changing that setting changes the behavior. In short, if you wrote a line of code, you should test that line works as expected.\n\nMake sure your code doesn't not work\n\nIt may seem silly, but another important reason to write tests is to ensure that your code behaves as expected even when it's broken.\nThis is especially important for a project like Fides, which is focused on helping engineers when something unexpected happens to their code. For example, you could write tests about what you expect to happen if your function is called with incorrect (or no) arguments, or to ensure that any errors are properly trapped and handled.\n\nTests are documentation\n\nUltimately, your tests are the best documentation for your code.\nAnother developer should be able to look at your tests and understand what your code does, how to invoke it, and what edge cases it contains. Therefore, try to write short, self-explanatory tests with descriptive titles.\n\nHelp future developers\n\nAs Fides grows, your code will be reused in more and more places, by developers who may not be familiar with the details of your implementation. Therefore, your tests are an opportunity to ensure that your code is used correctly in the future.\nFor example, if your code needs to be used in a certain way, or expects a certain configuration, or is always expected to return a certain output, or has any other details that might impact its ability to be used in the framework, write a test for it! At minimum, you'll help a future developer understand that you consciously chose to design your code a certain way.\nWriting tests\nFides' tests are stored in the `tests` directory.\nTests should have descriptive names that make it clear what you're testing. If necessary, add a docstring or comment to explain why you're testing this specific thing.\n```python\nGood test name\ndef test_dry_evaluate_system_fail(server_url, resources_dict):\n    ...\nBad test name\ndef test_dry_evaluate():\n    ...\n```\nFides has a few pytest fixtures available for testing; see `conftest.py` for details.\nIntegration tests vs. mocked tests\nGenerally, tests that include mocking are discouraged. Mocking can create a false sense of security and obfuscate possible errors in the code that only present themselves when integration tested.\nRunning tests\nFides uses `pytest` for unit testing. To run tests, invoke `pytest` from the `/fides/ctl/` directory:\n`bash\ncd ctl\npytest`\nRunning specific tests\nTo run a subset of tests, provide a filename or directory; to match a specific test name, use the `-k` flag:\n```bash\nrun all tests in the tests/integration directory that contain the word \"api\" in their title\npytest tests/integration/ -k api\n```\nThe `--sw` flag will exit `pytest` the first time it encounters an error; subsequent runs with the same flag will skip any tests that succeeded and run the failed test first.\nFor more information on available Pytest invocation options, see the documentation here.\nExcluding external tests\nIntegration tests also test integration with external services like Snowflake which require internet access and authentication. It is possible to skip these tests by excluding the `external` mark. \n```bash\nrun all tests except external ones\npytest -m \"not external\"\n```\nCI Workflows",
    "tag": "ethyca"
  },
  {
    "title": "Pull Requests",
    "source": "https://github.com/ethyca/fides/tree/main/docs/fides/docs/development/pull_requests.md",
    "content": "Pull Requests\nPull requests are the primary unit of work within the Fides project. All code changes are expected to be submitted via a PR with the following requirements:\n\nCompletely fill out the provided pull request template.\nPRs should be in a `draft` state until they are ready for a final review + merge. A non-draft PR signals to the community that the author believes the PR is ready to ship! If you need early feedback on your PR, feel free to ask for it directly while your PR is in a draft state.\nMake sure that all checks are passing, and all boxes have been checked before taking the PR out of a `draft` state. PR reviews require other people to spend their time, so please be courteous and double check your work before passing it to a reviewer.\nIf you're unsure about a potential feature implementation or there is anything else that needs discussing, feel free to ask for an early review/feedback in the comments of the draft PR.\n",
    "tag": "ethyca"
  },
  {
    "title": "Fides Deploy Development",
    "source": "https://github.com/ethyca/fides/tree/main/docs/fides/docs/development/dev_deployment.md",
    "content": "Fides Deploy Development\nThis guide closely mirrors the Fides Deploy page with some slight differences to account for running in a development environment.\nDeployment Steps\n\nIf you haven't already, make sure to `pip install -e .` and `pip install nox`\n`nox -s \"build(sample)\"` - This will build the relevant images and tag them correctly\n`fides deploy up --no-pull` - This command will spin up the sample application and seed all relevant data as normal. The `--no-pull` flag prevents `Docker` from trying to pull remote images and will instead use the ones built with `\"build(sample)\"\nPoke around and test as needed\n",
    "tag": "ethyca"
  },
  {
    "title": "Debugging Fides in VSCode",
    "source": "https://github.com/ethyca/fides/tree/main/docs/fides/docs/development/vscode_debugging.md",
    "content": "Debugging Fides in VSCode\nThis is a quick guide to show how VSCode can be used to debug Fides running locally in Docker. The general approach is to allow the local `fides` Docker Compose service to allow remote debugging connections, and to start a remote debugger from a host VSCode workspace.\nSetup\nRun Fides with Remote Debugging Enabled\nIn order to accept incoming remote debugging connections, the `fides` Docker Compose service must be run with slight alterations. To enable this functionality, simply add the `remote_debug` flag to a `nox` command. For example:\n`nox -s dev -- remote_debug`\nor \n`nox -s dev -- remote_debug postgres timescale`\nWith those commands, the `fides` Docker Compose service that's running the Fides server locally is able to accept incoming remote debugging connections.\nNote that, at this point, the `remote_debug` flag is not enabled for other `nox` sessions, e.g. `test_env`, `pytest_ops`, etc.\nAttach a Remote Debugger to the Fides Server\nNow that the running Fides server can accept incoming remote debugging connections, you can attach a remote debugger from a local VSCode workspace to actively debug the server application. A launch configuration is included in the `fides` repo to facilitate this step.\n\nOpen up the `fides` repo in a VSCode workspace\nGo to the `Run and Debug` view\nFrom the debugger dropdown list, select the `Python debugger: Remote Attach Fides` configuration\nClick the `Start Debugging` play button\nThe remote debugger should now be attached to the Fides server!\nTo confirm the debugger is attached, at least one `RUNNING` line item should appear in the `CALL STACK` window\n\n\n\nDebug!\nAt this point, VSCode is ready to debug the running Fides server. Try setting breakpoints and hitting them by, e.g., making certain HTTP requests against the Fides server. This guide provides more information on how to use the VSCode Python debugger. \nLinks\nSome relevant VSCode documentation for reference:\n\nhttps://code.visualstudio.com/docs/python/debugging#_debugging-by-attaching-over-a-network-connection\n",
    "tag": "ethyca"
  },
  {
    "title": "Code Style",
    "source": "https://github.com/ethyca/fides/tree/main/docs/fides/docs/development/code_style.md",
    "content": "Code Style\nGeneral\nDocstrings\nDocstrings are required for every function, class, and method. No specific style is required or encouraged, as we expect that most of the relevant information can be gleaned from both the function signature's type-hints as well as descriptive parameter names. The docstring should serve to give additional context/flavour beyond that which can be gained from the code itself.\n```python title=\"Docstring Example\"\nBad\ndef execute_evaluation(taxonomy: Taxonomy) -> Evaluation:\n    \"\"\"\n    Execute an evaluation. \n    \"\"\"\nGood\ndef execute_evaluation(taxonomy: Taxonomy) -> Evaluation:\n    \"\"\"\n    Check the stated constraints of each Privacy Policy's rules against\n    each system's privacy declarations.\n    \"\"\"\n```\nVariable and parameter naming\nVariable and parameter names should be as self-describing as possible. Brevity is not a concern here. Here are some common examples for writing good self-documenting code:\n```python title=\"Single Letter Variable Names\"\nIncorrect\ns = 726\nCorrect\nelapsed_time_seconds = 726\nIncorrect\nfor n in nodes:\n    print(n)\nCorrect\nfor node in nodes:\n    print(node)\n```\n```python title=\"Abbreviated Variable Names\"\nIncorrect\nr = requests.get(url)\nIncorrect\nresp = reqeusts.get(url)\nCorrect\nresponse = requests.get(url)\n```\n```python title=\"Type Ambiguous Variable Names\"\nIncorrect\nfood = [\"apple\", \"banana\"] \nIncorrect\nfoods = [\"apple\", \"banana\"] \nCorrect\nUse type annotations if the name is somewhat ambiguous\nfoods: List[str] = [\"apple\", \"banana\"] \nCorrect\nThe type is contained in the name\nfoods_list = [\"apple\", \"banana\"] \nCorrect\nBoth of the above styles\nfoods_list: List[str] = [\"apple\", \"banana\"] \n```\nPre-commit hooks\nFides includes a `.pre-commit-config.yaml` to facilitate running CI checks before pushing up to a PR. The `pre-commit` package is included in the `dev-requirements.txt`. Once that is installed, follow these steps to get up and running:\n\n`pre-commit install` - This is a one-time setup step to create the git pre-commit hooks.\nThese pre-commit hooks will now run automatically. However you can also use `pre-commit run` to run them manually once all of your changes have been staged.\n\nNOTE: A Python interpreter must be available from wherever the git commands are being run, as this is required to run the `pre-commit` package.\nCI checks\nCI checks are stored as targets within the Noxfile, and can be run from the top-level `fides` directory with the following pattern:\n`bash title=\"Pattern\"\nnox -s <lowercased_name>`\n`bash title=\"Examples\"\nnox -s black\nnox -s mypy\nnox -s xenon`\nBlack formatting\nFides' code is formatted using the black style. This style is checked in a CI step, and merges to master are prevented if code does not conform.\nA number of extensions are available for popular editors that will automatically apply black to your code.\nPylint\nFides' code is linted using pylint. Linter checks run as part of a CI step and merges to master are prevented if code does not conform.\nMypy\nFides' code is statically-typed using mypy. Type checking is validated as a CI step, and merges to master are prevented if code does not pass type checks. As a general rule, mypy typing requires all function arguments and return values to be annotated.\nXenon",
    "tag": "ethyca"
  },
  {
    "title": "Fideslog Analytics",
    "source": "https://github.com/ethyca/fides/tree/main/docs/fides/docs/development/fideslog.md",
    "content": "Fideslog Analytics\nFides includes an implementation of fideslog to provide Ethyca with an understanding of user interactions with fides tooling.\nAll collected analytics are anonymized, and only used in either product roadmap determination, or as insight into product adoption. Information collected by fideslog is received via HTTPs request, stored in a secure database, and never shared with third parties unless required by law.\nMore information on use, implementation, and configuration can be found in the fideslog repository.\nCollected Data\nFideslog collects information on instances of Fides by recording internal events. Using Fides may result in sending any or all of the following analytics data to Ethyca:  \n| Parameter | Description |\n|----|----|\n| `docker` | If fides is run in a docker container. |\n| `event` | The type of analytics event - currently, either a server start or endpoint call.\n| `event_created` | The time of the event. |\n| `endpoint` | The endpoint accessed. |\n| `status_code` | The status result of the request. |\n| `error` | Error information, if any. |\nDisabling Fideslog\nTo opt out of analytics, set either the following fides environment variable or `.toml` configuration variable to `True`.\n| Variable | Default | Use |\n|---|---|---|\n| `analytics_opt_out` | False | Include in your `fides.toml` file. |",
    "tag": "ethyca"
  },
  {
    "title": "Documentation",
    "source": "https://github.com/ethyca/fides/tree/main/docs/fides/docs/development/documentation.md",
    "content": "Documentation\nDocumentation is an incredibly important part of Fides, both for explaining its concepts to general audiences and describing its usage to developers.\nConcepts\nFides includes a great deal of \"concept\" documentation, which covers features, tutorials, guides, and examples separately from the auto-generated API reference. \nTo write concept docs, add Markdown files to the `docs/fides/docs/` directory (or one of its subdirectories). To ensure that your page is displayed in the navigation, edit `mkdocs.yml` to include a reference to it.\nSemantics\nCapitalization\nConcepts that refer to proper nouns or are trademarked should always be capitalized. The exception for Fides is only when referencing any languages or tools, such as fideslang or fideslog.\nOther Fides terms, like \"Data Category\" or \"System\", should also be capitalized to be clear about the fact that a Fides resource is being referenced.\n\nWhen a System is applied, it is either created or updated through the Fides api.\nThe System model requires a field called `fides_key`.\n\nPreviewing docs locally\nDocumentation (including both concepts and API references) is built and deployed with every merge to Fides's master branch.\nIf you're using VS Code Dev Containers, the docs will automatically be available at `localhost:8000`, otherwise you'll need to run the following command:\n`bash\nnox -s docs_serve`",
    "tag": "ethyca"
  },
  {
    "title": "Testing Environment",
    "source": "https://github.com/ethyca/fides/tree/main/docs/fides/docs/development/testing_environment.md",
    "content": "Testing Environment\nTo facilitate thorough manual testing of the application, there is a comprehensive testing environment that can be set up via a single `nox` command.\nConfiguration\nThe environment will configure the `fides` server and CLI using the TOML configuration set in `src/fides/data/test_env/fides.test_env.toml`. To test out other configurations, you can edit this file and reload the test env; however, don't commit these changes unless you are sure that the default configuration for testing should change for everyone!\nSecrets Management\nThe environment will work \"out of the box\", but can also be configured with secrets needed to configure other features like S3 storage, Mailgun notifications, etc. To configure this, you'll need to create the `.env` file, place it at the root of the repository directory, and provide some secrets. There is an `example.env` file you can reference to see what secrets are supported.\nThis `.env` file is ignored by git and therefore safe to keep in your local repo during development.\nFor Ethyca-internal engineers, you can also grab a fully populated `.env` file from 1Password (called `Fides .env`).\nSpinning up the Environment\nRunning `nox -s fides_env(test)` will spin up a comprehensive testing environment that does the following:\n\nBuilds the Webserver, Admin UI and Privacy Center.\nDownloads all required images.\nSpins up the entire application, including external Docker-based datastores.\nRuns various commands and scripts to seed the application with example data, create a user, etc.\nOpens a shell with the CLI loaded and available for use.\n\nJust before the shell is opened, a `Fides Test Environment` banner will be displayed along with various information about the testing environment and how to access various parts of the application.",
    "tag": "ethyca"
  },
  {
    "title": "Local Development",
    "source": "https://github.com/ethyca/fides/tree/main/docs/fides/docs/development/ui.md",
    "content": "Local Development\nTo test the UI locally, clone the FidesOps repository, and ensure you have Node.js installed to run the application.\nCreating the root user\nA root user can be created by adding a `root_username` and `root_password` to the\nsecurity section of `fidesops.toml` file, or by setting `FIDESOPS__SECURITY__ROOT_USERNAME`\nand `FIDESOPS__SECURITY__ROOT_PASSWORD` environment variables.\nThis will allow you to login in with a root user that can be used to access\nadditional user endpoints.\nAccessing the Control Panel\nFrom the root `fidesops` directory, run the following:\n`sh\n    cd clients/admin-ui\n    npm install\n    npm run dev`\nThis will navigate you to the `admin-ui` directory, and run the development environment.\nVisit `http://localhost:3000/` in your browser, and provide your user credentials to log in.\nAuthentication\nTo enable stable authentication you must supply a `NEXTAUTH_SECRET` environment\nvariable. The best way to do this is by creating a `.env.local` file, which Next\nwill automatically pick up:\n`bash\necho NEXTAUTH_SECRET=`openssl rand -base64 32` >> .env.local`\nBackend deployment\nFidesops automatically serves a version of the UI when running `nox -s dev`.\nTo deploy a full version of the UI from a backend, run the following from the root fidesops directory:\n`sh\n    cd clients/admin-ui\n    npm install\n    npm run prod-export`\nThis will build and place the Admin UI files into a location accessible by backend fidesops deployments.",
    "tag": "ethyca"
  },
  {
    "title": "Using the Fides postman collection",
    "source": "https://github.com/ethyca/fides/tree/main/docs/fides/docs/development/postman/using_postman.md",
    "content": "Using the Fides postman collection\nA minimal Postman collection is included to assist in setting up your privacy request configurations, and in executing example `access` and `erasure` requests against mock external databases.\nLoading the collection\n\nGet Postman\n\nPostman > File > Import\n\n\n\nUpload the Fides collection found in `docs/fides/docs/postman/Fides.postman_collection.json`\n\n\n\nClick on the imported `fidesops` collection in the left pane, and then find `Variables` to edit the `fidesops` collection variables.\n\nSome variables are populated for you, and some will be added in this guide's next steps.\n\n\n\n\nAdd your `oauth_root_client_id` and `oauth_root_client_secret` under `CURRENT VALUE`.  \n\n`fidesadmin` and `fidesadminsecret` are default configurations for testing, found in your `fides.toml`. Add the appropriate values for your instance if they differ.\nImportant: Click `Save`!\n\n\n\n\nBring up local servers and mock databases\n\nRun `nox -s dev -- <datastore>` in your terminal. \nThis brings up the Fides server and the list of datastores specified, i.e. `nox -s dev -- postgres mongodb`. These mock datastores are pre-populated with test data to represent your datastores.\n\n\n\n!!! Note \"\"\n      The following list of requests is kept in the `Minimum API calls to create an Access Privacy Request` folder. Some of the returned data will need to be saved as additional variables for use in other steps.\n\nSaving Authentication variables\n\n\nClick on the `Get Root Client Token` request, and click `Send` to send a `POST` request to Fides to create a root token.\n\n\n\nCopy the `access_token` returned in the response body, and paste it as the `Current Value` of `root_client_token` in Fides' variables.\n\nImportant: Click `Save`!\n\n\n\n\n\nSimilarly, click on `Create Client`, and click `Send` to send a `POST` request to Fides to create a new client.\n\nCopy the `client_id` and `client_secret` and paste into `Current Value` slots in Fides variables and click \"Save\".\n\n\n\nFinally, click on the `Get Client Token` request, and click `Send` to send another `POST` request to Fides. This will create a token for the client made in the previous step.\n\n\nIf you click on Body, you can see that the `client_id` and `client_secret` have been added as form data for you.\n\n\n\nSave the returned token under `client_token` in the Fides variables.  The `client_token` will be automatically passed into the rest of your requests as the Bearer Token.\n\n\n\nBuilding out remaining privacy request configuration\nRun through the remaining requests in the `Minimum API calls to create an Access Privacy Request` folder. Because variables are automatically being populated for you, you should be able to click on each request, clicking `Send` for each one.\nInspect the `Body` of each request to see what is sent to Fides:\n\nSpecify where your data is going:\nSEND `Create/Update Storage` - Local Storage Config - Sets up a local folder for uploading your privacy request results (local testing only)\n\n\nConfigure what data you care about, and what to do with it:\nSEND `Create/Update Policies` - Creates a Policy to handle Privacy Requests\nSEND `Create/Update Access Rule` - Defines an `access` Rule on the previous Policy, which specifies results will be uploaded to the configured local storage\nSEND `Create/Update Rule Targets` - Specify a RuleTarget that says to will return data that has been marked as having a `user` data category\n\n\nCreate ConnectionConfigs, and add connection secrets for the `postgres_example` and `mongodb_example` mock databases:\nSEND `Create/Update Connection Configs: Postgres`\nSEND `Create/Update Connection Configs: Mongo`\nSEND `Update Connection Secrets: Postgres`\nSEND `Update Connection Secrets: Mongo`\n\n\nAdd annotations of the Postgres and Mongo datastores:\nSEND `Create/Update Postgres Dataset`\nSEND `Create/Update Dataset Mongo`\n\n\n\n!!! Note \"\"\n      API calls to additional supported datastores (MsSQL, MySQL) are in separate folders within the collection. \nRun a privacy request\nYou have now completed the basic configuration required to create an Access Request.\n\n\nSEND `Create Access Privacy Requests`\n\nIf \"succeeded\", note the \"id\" that is returned. Succeeded means the privacy request has been created and is pending, not that its execution is complete.\n\n\n\n\nCheck your local `fides_uploads` folder, configured earlier, to see access request results.\n\nThis is run asynchronously, so it may take a few moments to complete.  This particular request should have retrieved data from both the `postgres_example` and `mongodb_example` databases with the `user` data_category\n\n\n\n\nNext steps\n\nCheck out other requests in the collection!\nThe `Calls to create an Erasure Request` folder walks you through configuring a separate erasure policy, and executing an erasure request.\n\n\n\n!!! Note \"\"\n      Note that these erasure requests will mask data in your connected datastores (`postgres_example` and `mongo_example` here. If you connect your own live databases, data may be deleted.",
    "tag": "ethyca"
  },
  {
    "title": "API Reference",
    "source": "https://github.com/ethyca/fides/tree/main/docs/fides/docs/api/index.md",
    "content": "API Reference\nYou can view the live, interactive Swagger API docs for Fides by visiting `/docs` on a running instance. This is a great way to experiment with the APIs using Swagger's built-in \"Try it out\" functionality.\nBelow, we've embedded the latest release's API documentation as a living reference. These work largely the same, but since this documentation site isn't connected to a live instance, the \"Try it out\" and \"Authorize\" buttons won't work, sorry!\nAll API routes will automatically matched with and without a trailing slash `/`. So `/api/v1/config` and `/api/v1/config/` are both valid API calls.\n\n!!swagger openapi.json!!\n",
    "tag": "ethyca"
  },
  {
    "title": "Fides Code of Conduct",
    "source": "https://github.com/ethyca/fides/tree/main/docs/fides/docs/community/code_of_conduct.md",
    "content": "Fides Code of Conduct\nOur Pledge\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\nOur Standards\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or\n  advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others' private information, such as a physical or electronic\n  address, without explicit permission\nOther conduct that could reasonably be considered inappropriate in a\n  professional setting\n\nOur Responsibilities\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\nScope\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\nEnforcement\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the Fides core team at fides@ethyca.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\nAttribution\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\nFor answers to common questions about this code of conduct, see",
    "tag": "ethyca"
  },
  {
    "title": "Community",
    "source": "https://github.com/ethyca/fides/tree/main/docs/fides/docs/community/hints_tips.md",
    "content": "Community\nThe Fides project welcomes issues, contributions and discussion from all users, regardless of background or experience level. In order to create a positive and welcoming environment, all interactions are governed by the Fides Code of Conduct.\nGuidelines\nWhether it's giving us feedback, raising a question, or showing your Fides-related work, we are looking forward to hearing from you. The Fides community is vibrant because of the quality of its members and the discussions they bring. To keep the workspace inviting and helpful for everyone, there are a few guidelines that we ask all members to follow.\nRule 1: Assume Positive Intent\nBeing nice is the most important pillar of the Fides community. We are considerate to each other's effort and time. It's also easy to misinterpret people through Slack, so we make an extra effort to chat in a positive tone. We assume that you are here to learn and exchange ideas, and we ask that you contribute to making a welcoming community.\nIf someone is helping you, be mindful of the effort they are putting in. While we are always happy to help users, we can not help users with step-by-step debugging. Use your professional judgment in discerning whether requests are unreasonable.\nThe Fides team always tries to listen to the community. Please be understanding if your issue or feature request is not deemed an immediate priority.\nRule 2: Use threads for larger messages\nBecause of the size of our community and frequency of posts, it's easy for large messages to drown out smaller messages. Using threads helps people see more messages on their screen. Larger code blocks should be posted in threads.\nRule 3: Avoid posting sensitive information\nCommunity members sometimes need to post code snippets as they ask for help. Be sure to remove sensitive information from posts to the public channels. If your Fides account information is needed to help you, we will ask you to direct message such information. Be cautious of anyone asking for information through direct messages.\nRule 4: Write high quality questions\nThe Fides community is here to support you. That said, it is significantly easier to answer well-researched and clearly-written questions. Even adding potentially relevant links to a post helps tremendously.\nInformative Slack threads are archived by our resident bot Marvin. Having well-written threads helps future users encountering the same problem.\nOftentimes your question may have been answered somewhere else; some good resources to start looking before asking a question:\n\nFides Documentation\nGitHub Issues\nStackOverflow\n\nRule 5: Don't abuse tagging users\nRequests for help will be seen by the Fides team, and will be directed to the appropriate person. Tagging individual users is highly discouraged unless it is in the context of a conversation thread.\nRule 6: Avoid using DMs to ask for help\nFides employees should not be sent questions in DMs unless we specifically ask you to send us private information.\nThere are times when it makes sense to directly message another community member experiencing a similar issue, or working with similar technologies. Just be aware that some people may not want to be messaged.\nIt also helps other people if you post your question publicly. Similar to above, informative Slack threads are archived. Having conversations in public channels drives better quality discussions that can be referenced in the future.\nRule 7: Don't advertise material unrelated to Fides",
    "tag": "ethyca"
  }
]