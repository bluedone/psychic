[
  {
    "title": "Index",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/",
    "content": "\n\nToolJet Documentation\n\nThis repository contains the ToolJet documentation website code and Markdown source files for docs.tooljet.com\nIndex\n\nFeedback\nDocumentation Issues\nContributing\nRepository organization\nWorkflow\nConventions\nLocal setup\n\nFeedback\nIf you want to give documentation feedback, please join our Slack Community and drop us a message.\nDocumentation Issues\nTo enter documentation bugs or submit any feature request for documentation, please create a new GitHub issue. Please check if there is an existing issue first.\nIf you think the issue is with the ToolJet product itself, please choose the relevant issue template here.\nContributing\nTo contribute to ToolJet documentation, you need to fork this repository and submit a pull request for the Markdown and/or image changes that you're proposing.\nRepository organization\nThe content in this directory follows the organization of documentation at https://docs.tooljet.com\nThis directory contains the following folders:\n\\docs \n|--\\Enterprise \n|--\\actions \n|--\\contributing-guide \n|--\\data-sources \n|--\\how-to \n|--\\password-login \n|--\\setup \n|--\\sso \n|--\\tutorial \n|--\\widgets \nWithin these folders, you'll find the Markdown files used for the content. \n\\src - contains the ToolJet documentation website code. The documentation website is built using Docusaurus 2.\n\\static\\img - contains folders that references the images (such as screenshots) used in the \\docs\\topic.\nWorkflow\nThe two suggested workflows are:\n\nFor small changes, use the \"Edit this page\" button on each page to edit the Markdown file directly on GitHub.\nIf you plan to make significant changes or preview the changes locally, clone the repo to your system to and follow the installation and local development steps in Local setup.\n\nConventions\n\nThe front matter for every markdown file should include the `id` and a `title`. `id` will be used to reference the file in `sidebar.js`\n  ```yaml\n\n\nid: building-internal-tool\n  title: Building internal tool with ToolJet\n\n```\n\nUse lowercase for file and folder names and dashes `-` as separators.\n  For example:\n`/docs/data-sources/sap-hana.md`\n\n`/docs/how-to/bulk-update-multiple-rows.md`\n\n\nImages are important to bring the product to life and clarify the written content. For images you're adding to the repo, store them in the `img` subfolder inside `static` folder. For every topic there needs to be a folder inside `\\static\\img\\` section, for example: `static\\img\\how-to\\bulk-update\\query1.png`.\n  When you link to an image, the path and filename are case-sensitive. The convention is for image filenames to be all lowercase and use dashes `-` for separators.\n\n\n\nExample code for adding an image in markdown file:\n  ```\n\n\n\n\n\n```\nLocal setup\nInstallation\n`console\nyarn install`\nLocal Development\n`console\nyarn start`\nThis command starts a local development server and opens up a browser window. Most changes are reflected live without having to restart the server.\nBuild\n`console\nyarn build`\nThis command generates static content into the `build` directory and can be served using any static contents hosting service.\nDeployment\n`console\nGIT_USER=<Your GitHub username> USE_SSH=true yarn deploy`\nIf you are using GitHub pages for hosting, this command is a convenient way to build the website and push to the `gh-pages` branch.\nThanks \ud83d\udc9c",
    "tag": "tooljet"
  },
  {
    "title": "ToolJet Marketplace",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/marketplace.md",
    "content": "\nid: marketplace\ntitle: Marketplace\n\nToolJet Marketplace\nToolJet marketplace for plugins will allow users to install the custom plugins (datasources) for their ToolJet instances. This will allow ToolJet users to build their own custom plugins according to their requirements and then easily connect them to ToolJet.\nEnabling the marketplace for your instance\nUsers must add the following environment variable to the .env file to enable the marketplace feature:\n`bash\nENABLE_MARKETPLACE_FEATURE=true`\nOnce the marketplace feature is enabled, users can open the Marketplace page from the dropdown on the navbar of the dashboard. Users can also directly access the marketplace using the URL: `https://tooljet.yourcompany.com/integrations`\n:::info\nThe user logged-in should be the Administrator to access the marketplace page.\n:::\nInstalling a plugin\nWhen you create a plugin using the tooljet cli, an object is created in the plugins.json (`ToolJet/server/src/assets/marketplace/plugins.json`) file for that particular plugin.\nHere's an example of an entry created for AWS S3 plugin:\n`json\n[\n  {\n    \"name\": \"AWS S3 plugin\",\n    \"description\": \"Datasource plugin for AWS S3\",\n    \"version\": \"1.0.0\",\n    \"id\": \"s3\",\n    \"repo\": \"\",\n    \"author\": \"Tooljet\",\n    \"timestamp\": \"Mon, 31 Oct 2022 11:02:10 GMT\"\n  }\n]`\nNow to install the plugin to the marketplace, you'll have to install npm package to a plugin:\n`bash\nnpm i <npm-package-name> --workspace=<plugin-name-in-package-json>`\nFinally, run the build commands:\n`bash\nnpm install\nnpm run build --workspaces`\nOnce done, you'll find the plugin on the marketplace page.\nRemoving a plugin\nTo remove a plugin from the marketplace, you can simply remove the object entry of the plugin from the plugins.json(`ToolJet/server/src/assets/marketplace/plugins.json`) and then re-run the build commands.\nUsing a plugin as datasource\nThe flow for installing and using a plugin as a datasource is really simple. The steps are:\n- Go to the Marketplace\n- Click the Marketplace link in the left sidebar to view all available plugins.\n    \n\n\n```<img className=\"screenshot-full\" src=\"/img/marketplace/marketplacemain.png\" alt=\"Marketplace\" />\n\n</div>\n```\n\n\n\nClick on the Install button of the plugin that you want to install\n\nOnce installed, you can check the installed plugins from Installed on the left sidebar. You can also remove the plugins from the Installed section of the marketplace.\n    \n\n\n- Now, let's use the installed plugin as the datasource for an application. User will have to open the application, go to the Add Datasource button on the left sidebar of the app builder, and then select Plugins on the modal that pops-up. The Plugins section will include all the plugins installed via Marketplace. The next steps are same as connecting a datasource to the application.\n\n\n\n\n\nCreating a marketplace plugin\nThe steps for creating a Marketplace plugin are similar to those for creating plugins for ToolJet except that for a Marketplace plugin, the user will have to type `yes` when prompted `Is it a marketplace integration?` in the `tooljet command line`.\nThe steps to create a marketplace plugin are:\n\nInstall tooljet-cli:\n  `bash\n  npm i -g @tooljet/cli`\nBootstrap a new plugin using cli\n  `bash\n  tooljet plugin create bigquery`\nOn the CLI, you'll be prompted to enter a display name:\n  `bash\n  Enter plugin display name:`\nIn the next step, you'll be asked to choose a plugin type database, api, or cloud-storage\nNow choose if `Is it a marketplace integration?` by entering `y/N`\nEnter the repository URL if the plugin is hosted on GitHub or else just press enter to skip to the next step\nOnce done, all the plugin files will be generated inside the marketplace directory\n  `bash\n  creating plugin... done\n  Plugin: bigquery created successfully\n  \u2514\u2500 marketplace\n    \u2514\u2500 plugin\n        \u2514\u2500 bigquery`\n\n:::info\nFor more information on creating plugin for ToolJet, please see the documentation on creating plugins.",
    "tag": "tooljet"
  },
  {
    "title": "Tracking    ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/tracking.md",
    "content": "\nid: tracking\ntitle: Tracking\nslug: /tracking\n\nTracking\n:::tip\nToolJet does not store any data fetched from the data sources. ToolJet acts as a proxy and the data from data sources is sent to the client application without storing.\n:::\nServer\n:::tip\nSelf-hosted version of ToolJet pings our server to fetch the latest product updates every 24 hours. You can disable this by setting the value of `CHECK_FOR_UPDATES` environment variable to `0`. This feature is enabled by default.\n:::\nClient\nToolJet tracks anonymous usage data such as page loads and clicks. ToolJet tracks only the events and doesn't capture data from data sources.",
    "tag": "tooljet"
  },
  {
    "title": "Welcome to ToolJet Docs",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/getting-started.md",
    "content": "\nid: getting-started\ntitle: Getting Started\ndescription: ToolJet is an open-source low-code framework to build and deploy custom internal tools. ToolJet can connect to your data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ). Once the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc.\nslug: /\n\nWelcome to ToolJet Docs\n\nWhat is ToolJet\nToolJet is an open-source low-code framework to build and deploy custom internal tools. \nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ). \nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\n\nHow ToolJet works\n\n\n\nWith ToolJet, you can build apps in 3 simple steps:\n\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as `on click`, `on row selected`, `on page changed`, etc. ToolJet apps can be used in light and dark mode.\n:::tip\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n:::\nChoose your ToolJet\n\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\n\n:::info\n- Data security is top priority at ToolJet, read about our data security here.\n:::\nThe very quick quickstart\nLet's say you're an eCommerce company and your Customer Support/Operations team need a Support Tool/Admin panel for managing the orders, updating inventory, and track revenue and metrics. This quickstart will guide you through building your first custom internal tool in less than 5 minutes.\nYou will:\n- Create a database\n- Create a new application\n- Build the UI\n- Build queries and bind data to UI\n- Preview, Release and Share app\n:::tip\nBefore getting into the quickstart, Sign up and create your account on ToolJet.\n::: \nCreate a database\n\n\nNavigate to ToolJet DB Editor from the left sidebar on the dashboard\n    \n\n\n\n\nClick on Add Table button, enter Table name and Add columns from the drawer that slides from the right.\n    \n\n\n\n\nOnce the table is created, click on the Add new row button to add the data to the table and click Create.\n    \n\n\n\n\n:::info\nLearn more about the ToolJet Database here\n:::\nCreate a new application\n\n\nTo create a new ToolJet application, go to the Dashboard -> New App from scratch. \n\n\n\n:::info\nYou can also use the existing UI templates for your application or import an application to your workspace.\n:::\n\n\nWhen you click on create new app the App-builder will open up. You can rename your application from `untitled` to Support Tool from the top left of app-builder.\n    \n\n\n\n\nBuild the UI\n\nLet's build the UI of the application by dragging and dropping the components on the canvas.\n\nTo build the UI, we will use:\n\nTable for displaying the customers data \nText components for the Title and description of the app as the header\nText Input component for getting product name input from the user\nNumber Input component for getting product quantity and price input from the user\nButton component that will be used to trigger the query for inserting a row in the database using the button's OnClick event handler\n\n\n\n\n\n\n:::info\nToolJet application's User interface is constructed using Components like Tables, Forms, Charts, or Buttons etc. Check Components Catalog to learn more.\n:::\nBuild queries and bind data to UI\n\n\nWe can add a new datasource from the Datasource manager on the left-sidebar of the app builder but since we are using ToolJet Database we don't need to add any external datasource. Go to the Query Panel -> Run ToolJetDb Query\n\n\n\n:::info\nToolJet can connect to several databases, APIs and external services to fetch and modify data. Check Datasource Catalog to learn more.\n:::\n\n\nChoose a Table from the dropdown, Select the List rows option from the Operation dropdown, You can leave other query parameters. Scroll down and enable Run this query on application load - this will trigger the query when the app is loaded. \n\n\nClick on Create to create the query and then click Run to trigger the query and get response. You can also check the query response by clicking Preview button without firing the query.\n    \n\n\n\n\nGo to the Table properties by clicking on the component handle and bind the data returned by the query in the Table data property. When building apps in ToolJet anything inside `{{}}` is JavaScript and we javascript dot notation to get the data from query and populate the table using {{queries.tooljetdb1.data}}. The table will be auto-populated once the table data is entered.\n    \n\n\n\n\nLet's create another query that will get the data from the input fields and will add a new row in the tooljet database. Create New Query -> Select Table (Customers) -> Select Operation (Create row) -> add the following columns with the respective value:\n\nid - `{{components.textinput1.value}}`\nquantity - `{{components.numberinput1.value}}`\nprice - `{{components.numberinput2.value}}`\ncreated_at - `{{moment().format(\"DD/MM/YYYY hh:mm A\")}}` (We are using momentjs library to get the current date from the system rather than getting input by the user )\n\n\n\n\n:::tip\nYou can also add event handler to this query for On Success event to run the `tooljetdb1` query that populates the table, so that whenever this is successful the table is refreshed.\n:::\n\n\nNow, let's bind this query to the Add Product button. Click on the button handle to open its properties, Add an handler -> Select Event (On Click) -> Select Action (Run Query) -> Select Query (tooljetdb2). \n    \n\n\n\n\n:::info\n- You can manipulate the data returned by the queries using Transformations\n- You can also Run JS query or Python query to perform custom behavior inside ToolJet\n:::\nPreview, Release and Share app\n\nClick on the Preview on the top-right of app builder to immediately check the currently opened version of the app in production. \nClick on the  Release button to publish the currently opneded version of the app and push the changes to production.\nShare option allows you to share the released version of the application with other users or you can also make the app public and anyone with the URL will be able to use the app.\n\n:::tip\nYou can control how much access to users have to your ToolJet apps and resources using Org Management.\n:::\nWhat Can I Do With ToolJet\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started: \n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\nFor ToolJet Contributors\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n\n\n\n\n\n\nHelp and Support\n\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\n",
    "tag": "tooljet"
  },
  {
    "title": "Enabling the ToolJet Database for your instance",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/tooljet_database.md",
    "content": "\nid: tooljet-database\ntitle: ToolJet Database\n\nUse the ToolJet-hosted database to build apps faster, and manage your data with ease. ToolJet database require no setup and give you a powerful user interface for managing your data.\n\n\n\nEnabling the ToolJet Database for your instance\nRequires:\n- PostgREST server\n- Additional configuration for ToolJet server\nThis feature is only enabled if ENABLE_TOOLJET_DB is set to `true`.\nPostgREST server\nPostgREST is a standalone web server that turns your PostgreSQL database directly into queryable RESTful APIs which is utilized for Tooljet Database. This server only talks with ToolJet server and therefore does not have to be publicly exposed.\n:::tip\nIf you have openssl installed, you can run the following command `openssl rand -hex 32` to generate the value for `PGRST_JWT_SECRET`.\nIf this parameter is not specified then PostgREST refuses authentication requests.\n:::\n| variable           | description                                     |\n| ------------------ | ----------------------------------------------- |\n| PGRST_JWT_SECRET   | JWT token client provided for authentication    |\n| PGRST_DB_URI       | database connection string for tooljet database |\n| PGRST_LOG_LEVEL    | `info`                                          |\n:::info\nPlease make sure that DB_URI is given in the format `postgres://[USERNAME]:[PASSWORD]@[HOST]:[PORT]/[DATABASE]`\n:::\nAdditional ToolJet server configuration\n| variable           | description                                  |\n| ------------------ | -------------------------------------------- |\n| ENABLE_TOOLJET_DB  | `true` or `false`                            |\n| TOOLJET_DB         | Default value is `tooljet_db`                |\n| TOOLJET_DB_HOST    | database host                                |\n| TOOLJET_DB_USER    | database username                            |\n| TOOLJET_DB_PASS    | database password                            |\n| TOOLJET_DB_PORT    | database port                                |\n| PGRST_JWT_SECRET   | JWT token client provided for authentication |\n| PGRST_HOST         | postgrest database host                      |\nIf you intent to make changes in the above configuration. Please refer PostgREST configuration docs.\n:::tip\nWhen this feature is enabled, the database name provided for `TOOLJET_DB` will be utilized to create a new database during server boot process in all of our production deploy setups.\nIncase you want to trigger it manually, use the command `npm run db:create` on ToolJet server.\n:::\nFeatures\nToolJet database allows you to:\n\nMaintain tables of data in a secure database that's only accessible within your ToolJet organization.\nEdit, search, filter, sort, and filter data using a spreadsheet-like interface.\nQuickly build applications and write queries to interact with the ToolJet Database, just like any other datasource but without any setup.\n\nAccessing ToolJet Database\nOnce you log-in to your ToolJet account, from the left sidebar of the dashboard you can navigate to ToolJet Database.\nThe ToolJet Database is available on: ToolJet Cloud, Self-Host, and Enterprise Edition. You can view and manage your database and the data it contains using the Database editor UI.\n\n\n\nDatabase Editor\nYou can manage the ToolJet Database directly from the Database Editor. ToolJet Database organizes the data into tables that can have different structures. All the tables will be listed lexicographically on the left, click on any of the table to view the table data.\n\n\n\nAdd table\nFor creating a new table in ToolJet Database, click on the Add table button on the top left corner of the Database editor.\n\n\n\nWhen the Add table button is clicked, a drawer opens up from the right where you can enter the details of your new table.\n\n\n\nFor creating a new table, you'll need to:\n\nEnter a Table name\nAdd Columns (Any one column is required to be set as Primary key)\n\nSupported data types\n\nvarchar: varchar data type is used to store characters of indefinite length\nserial: serial is used to generate a sequence of integers which are often used as the Primary key of a table.\nint: It is a numeric data type used to store whole numbers, that is, numbers without fractional components.\nfloat: float is also a numeric data type that is used to store inexact, variable-precision values.\nboolean: boolean data type can hold true, false, and null values.\n\nClick on Create button to create a new table.\n\n\n\nSearch Table\nYou can enter a search term to search through all tables in the database.\n\n\n\nAdd column\nYou can add a new column to the existing table by clicking on the Add new column button from the top of the database editor.\nA drawer from the right will open up from where you can create a new column by entering the values for the new column such as:\n- Column name: name of the column (key)\n- Data type: Check available data types here\n- Default Value Any default value for the column (not mandatory)\n\n\n\nFilter\nYou can add as many filter as you want into the table by clicking on the Filter button present on the top of the database editor.\nAdding a filter on the table data\n\nSelect a column from the Columns dropdown\nChoose an operation\nEnter a value for the selected operation\n\nAvailable operations are:\n\nequals\ngreater than\ngreater than or equal\nless than\nless than or equal\nnot equal\nlike\nilike\nmatch\nimatch\nin\ncontains\ncontained\nnot\n\n\n\n\nSort\nTo sort the table data, click on the Sort button on top, select a column from the dropdown, and then choose an order ascending or descending.\n\n\n\nAdd new row\nTo add a new row to the existing table data, click on the Add new row button. A drawer will open from the right where you can enter the values for the new row.\n\n\n\nDelete records\nTo delete one or many records/rows, select on the checkbox at the right of the record or records that you want to delete. As soon as you select a single record, the button to delete record will appear on the top, click on the Delete record button to delete the selected records.\n\n\n\nDelete column\nTo delete a particular column, just click on the column name and the delete button will appear, click on it to delete the column.\n\n\n\nEdit or Delete a table\nWhen you click on the kebab menu (three vertical dots icon) on the right of the table name, you'll get two options: Edit and Delete.\n- Edit will allow you to rename the table\n- Delete will allow you to delete the table permanently\n\n\n\nQuerying data from the ToolJet database\nQuerying ToolJet database is as easy as querying any other datasource on ToolJet.\n\n\nGo to the query panel, and click on the +Add button to add a new query, and select Run ToolJetDb query\n\n\n\n\n\nEnter the Name of the table that you want to query, select an Operation from the dropdown, Create the query, and then Run the query to get the response.\n    \n\n\n\n\n:::info\n- Preview button on the query panel returns the query response without executing the query. Once clicked, the response will be displayed on the Preview section of the query panel which can be viewed in JSON or Raw.\n- When a new query is created, by default the query name is set to `tooljetdbN` (where N is a number) - you can rename the query by click on the query name or from the left sidebar of query panel.\n:::\nAvailable operations\nList rows\nThis operation returns the list of all the records in the table\nOptional parameters\n\nFilter: Add a filter to the query response by setting a column, operation and value.\nSort: Add a sort to the query response by setting a column and direction.\nLimit: Limit the query response. This parameter expects a numerical value. ex: 5\n\nCreate row\nThis operation creates a new record in the table\nRequired parameters\n\nColumns: Choose a column from the dropdown and enter a value for the new record.\n\nUpdate row\nThis operation updates an existing record in the table\nRequired parameter\n\nFilter: Add a condition by choosing a column, an operation, and the value for updating a particular record.\n\nDelete row\nThis operation deletes a record from the table\nRequired parameters\n\nFilter: Add a condition by choosing a column, an operation, and the value for deleting a particular record.\n\n:::info\nIf you have any other questions or feedback about ToolJet Database, please reach us out at hello@tooljet.com or join our Slack Community",
    "tag": "tooljet"
  },
  {
    "title": "Security",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/security.md",
    "content": "\nid: security\ntitle: Security\nslug: /security\n\nSecurity\nData storage\nToolJet does not store data returned from your data sources. ToolJet server acts as a proxy and passes the data as it is to the ToolJet client. The credentials for the data sources are handled by the server and never exposed to the client. For example, if you are making an API request, the query is run from the server and not from the frontend.\nDatasource credentials\nAll the datasource credentials are securely encrypted using `aes-256-gcm`. The credentials are never exposed to the frontend ( ToolJet client ).\nOther security features\n\nTLS: If you are using ToolJet cloud, all connections are encrypted using TLS. We also have documentation for setting up TLS for self-hosted installations of ToolJet.\nAudit logs: Audit logs are available on the enterprise edition of ToolJet. Every user action is logged along with the IP addresses and user information.\nRequest logging: All the requests to server are logged. If self-hosted, you can easily extend ToolJet to use your preferred logging service. ToolJet comes with built-in Sentry integration.\nWhitelisted IPs: If you are using ToolJet cloud, you can whitelist our IP address (3.129.198.40) so that your datasources are not exposed to the public.\nBackups: ToolJet cloud is hosted on AWS using EKS with autoscaling and regular backups.\n",
    "tag": "tooljet"
  },
  {
    "title": "Single Sign-On General Settings",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/user-authentication/general-settings.md",
    "content": "\nid: general-settings\ntitle: General Settings\n\nSingle Sign-On General Settings\n\n\nGo to the Workspace Settings (\u2699\ufe0f) from the left sidebar in the ToolJet dashboard\n\n\n\n\n\n\n\nSelect `SSO` from sidebar and then select General Settings\n\n\n\n\n\n\n\nEnable Signup\nYou can enable/disable `Enable signup`. If it is enabled, new account will be created for user's first time SSO sign in else only existing users will be allowed to sign in via SSO.\nAllowed domains\nYou can set allowed domains for SSO login, can add multiple domains comma separated. Allowed all domains by default.\nLogin URL\nYou can use the login URL to login directly to the workspace. This will be hidden if Multi-Workspace is disabled.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "User Lifecycle",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/user-authentication/user-lifecycle.md",
    "content": "\nid: user-lifecycle\ntitle: User Lifecycle\n\nUser Lifecycle\nSingle-Workspace\nUser onboarding\n\nIf no user is present in the system, there will be `Sign-up` option in the login page. User can sign up by entering their email address. Tooljet will be sending a welcome email with activation URL to the email address. User can follow the activation URL and onboard to ToolJet.\n\n\n\n  ![ToolJet - Single-Workspace sign up](/img/user-lifecycle/single-ws-signup.png)\n\n  \n\nUser with admin privileges can invite members\n\n\n\n  ![ToolJet - Single-Workspace invite user](/img/user-lifecycle/user-invite-sw.png)\n\n  \n\nInvited user will receive welcome email with activation URL, unregistered user can follow the link and setup Tooljet account\n\n\n\n  ![ToolJet - Single-Workspace accept invite](/img/user-lifecycle/accept-invite-sw.png)\n\n  \n\nInvited user can onboard through SSO login, without using an invitation link\n\n\n\n  ![ToolJet - Single-Workspace accept invite](/img/user-lifecycle/sso-onboard-sw.png)\n\n  \n\nIf `enable signup` option in enabled in SSO general settings, user can setup account through SSO login without an invite\n\n\n\n  ![ToolJet - Single-Workspace sign up using SSO](/img/user-lifecycle/sso-enable-signup-sw.png)\n\n  \nArchive user\n\n\nUser can be archived by workspace admin from using `Manage User` page\n\n\n\n\n\nUnarchive user\n\n\nUser can be unArchived by workspace admin from using `Manage User` page\n\n\n\n\n\n:::info\n  Archive or unarchive will affect user login, user won't be able to login using email id and password unless user is in active state\n  :::\nMulti-Workspace\n:::info\nCheck Multi-workspace docs here.\n:::\nUser onboarding\n\n\nUser can sign up using the sign up link provided on the login page, user will receive a welcome email with activation link. New workspace will be created for the user.\n\n\n\n\n\nUsers can be added to multiple workspaces. Users can create their own workspaces and manage them.\n\n\n\n\n\nExisting user in active state for a workspace can be invited and on boarded to other workspaces, User will receive an invitation email with join link. If a user does not exist in the system, then they will receive a welcome email to setup the account, user can follow the link and on setup the account, once its done the user will be assigned to the new workspace created for the user.\n\n\n\n\n\nInvited user can onboard through SSO login,  without using an invitation link from the workspace login page\n\n\n\n\n\nIf `enable sign up` option in enabled in SSO general settings for the workspace, user can setup account through SSO login without an invite from the workspace login page\n\n\n\n\n\nArchive user\n\n\nUser can be archived by workspace admin from using `Manage User` page\n\n\n\n\n\nUnarchive user\n\n\nUser can be unarchive by workspace admin from using `Manage User` page\n\n\n\n\n\n:::info\n  Archive or unarchive will not affect user login, user can login and use other workspaces where user is in active state.\n  :::\nSwitch between workspaces\n\n\n  ![ToolJet - Single-Workspace sign up using SSO](/img/user-lifecycle/switch.png)\n\n  \nUser status\n| Status   | Able to log in   | How to activate                      |\n| -------- | ---------------- | ------------------------------------ |\n| active   | Yes              |                                      |\n| invited  | No (Yes with SSO)| Login through SSO or invitation link |\n| archived | No               | Not able to activate. Invite from `Manage Users` page, status will be changed to invited |\nMulti-Workspace SSO flow\n\nDiagram shows how SSO configurations are chosen in common login page and workspace login page. Instance level SSO is configured in environment variables and Workspace level SSO is configured in respective `Manage SSO` page.\n\n\n\n    ![ToolJet - SSO Flow](/img/user-lifecycle/sso-flow.png)",
    "tag": "tooljet"
  },
  {
    "title": "GitHub Single Sign-on",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/user-authentication/sso/github.md",
    "content": "\nid: github\ntitle: GitHub\n\nGitHub Single Sign-on\n\n\nGo to the Workspace Settings (\u2699\ufe0f) from the left sidebar in the ToolJet dashboard\n\n\n\n\n\n\n\nSelect `SSO` from sidebar and then select GitHub. GitHub login will be disabled by default,\n\n\n\n\n\n\n\nEnable GitHub. You can see `Redirect URL` generated\n\n\n\n\n\n\n\nGo to GitHub Developer settings and navigate to `OAuth Apps` and create a project. `Authorization callback URL` should be the generated `Redirect URL` in Git manage SSO page.\n\n\n\n\n\n\n\nOpen the application details, and you can see the `Client ID`\n\n\n\n\n\n\n\nThen create `Client secrets` by clicking `Generate new client secret`\n\n\n\n\n\n\n\nLastly, enter Client Id and Client Secret in GitHub manage SSO page and save.\nThe GitHub sign-in button will now be available in your ToolJet login screen if you have not enabled Multi-Workspace.\n:::info\nShould configure `Host Name` if you are using GitHub Enterprise self hosted. Host name should be a URL and should not ends with `/`, example: `https://github.tooljet.com`\n:::\nMulti-Workspace\nIf you have enabled Multi-Workspace you can configure GitHub SSO as mentioned above, for setting default SSO for the instance use environment variable.\n| variable                              | description                                                   |\n| ------------------------------------- | -----------------------------------------------------------   |\n| SSO_GIT_OAUTH2_CLIENT_ID              | GitHub OAuth client id |\n| SSO_GIT_OAUTH2_CLIENT_SECRET          | GitHub OAuth client secret |\n| SSO_GIT_OAUTH2_HOST                   | GitHub OAuth host name if GitHub is self hosted |",
    "tag": "tooljet"
  },
  {
    "title": "Google Single Sign-on",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/user-authentication/sso/google.md",
    "content": "\nid: google\ntitle: Google\n\nGoogle Single Sign-on\n\n\nGo to the Workspace Settings (\u2699\ufe0f) from the left sidebar in the ToolJet dashboard\n\n\n\n\n\n\n\nSelect `SSO` from sidebar and then select Google. Google login will be disabled by default,\n\n\n\n\n\n\n\nEnable Google. You can see `Redirect URL` generated\n\n\n\n\n\n\n\nGo to Google cloud console and create a project.\n\n\n\n\n\n\n\nGo to the Google cloud console credentials page, and create an OAuth client ID\n\n\n\n\n\n\n\nYou'll be asked to select user type in consent screen. To allow only users within your workspace, select 'Internal', otherwise,\nselect 'External'.\n\n\n\n\n\n\n\nYou'll be led to an app registration page where you can set OAuth scopes. Select 'Add or remove scopes' and add the scopes\nuserinfo.email and userinfo.profile as shown in the image. This will allow ToolJet to store the email and name of the\nuser who is signing in\n\n\n\n\n\n\n\nSet the domain on which ToolJet is hosted as an authorized domain\n\n\n\n\n\n\n\nSet the `Redirect URL` generated at manage SSO `Google` page under Authorised redirect URIs\n\n\n\n\n\n\n\nLastly, set the `client id` in google manage SSO page. This value will be available from your Google cloud console credentials page\nThe Google sign-in button will now be available in your ToolJet login screen, if you are not enabled Multi-Workspace.\nMulti-Workspace\nIf you have enabled Multi-Workspace you can configure Google SSO as mentioned above, for setting default SSO for the instance use environment variable.\n| variable                              | description                                                   |\n| ------------------------------------- | -----------------------------------------------------------   |\n| SSO_GOOGLE_OAUTH2_CLIENT_ID           | Google OAuth client id |",
    "tag": "tooljet"
  },
  {
    "title": "AzureAD Single Sign-on",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/user-authentication/sso/openid/azuread.md",
    "content": "\nid: azuread\ntitle: AzureAD\n\nAzureAD Single Sign-on\n:::info\nTo construct a Well Known URL refer this link :: https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-protocols-oidc\n:::\n\n\nOpen your organisation page and select `app registration`\n\n\n\n\n\n\n\nSelect `new registration`\n\n\n\n\n\n\n\nOpen your organisation page and select App registration.\n\n\nEnter name, select supported account type and enter the redirect URL which can be copied from `Manage SSO -> Open Id -> Redirect URL, click on register`.\n\n\n\n\n\n\n\nApplication will be registered and will be able to view the details\n\n\nConfigure Application (Client) ID as `client id` in Open Id configuration page.\n\n\n\n\n\n\n\nClick on `Add certificate or secret` next to the Client credentials.\n\n\nClick on `+New Client Secret`\n\n\n\n\n\n\n\nGive a description, set the expiry, and then click on the `Add` button.\n\n\n\n\n\n\n\nSecret will be created, copy value and add it to the `client secret` section of Open Id SSO config.\n\n\nYou can brand the redirect page using the branding and properties option.\n\n\n\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Okta Single Sign-on",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/user-authentication/sso/openid/okta.md",
    "content": "\nid: okta\ntitle: Okta\n\nOkta Single Sign-on\n\n\nSign in to Okta developer console\n\n\nGo to the `Applications` section and click on the `Create App Integration`\n\n\n\n\n\n\n\nSelect `Sign-in method` as `OIDC - OpenID Connect` and `Application type` as `Web Application`. Go to the next step\n\n\n\n\n\n\n\nEnter `App integration name` and then enter `Sign-in redirect URIs` as `<YOUR-DOMAIN>/sso/okta`.\n\n\n\n\n\n\n\nCreate application and configure `Client Credentials` in the UI. \n\n\n\n\n\n\n\nIf you wish to show your application on Okta, edit the application and select `Login initiated by` section as `Either Okta or App`, set visibility according to your preference and `Login flow` should `Redirect to app to initiate login (OIDC Compliant)`.\n\n\n\n\n\n\n\n:::info Change Grant type\nTo change the Login flow to `Redirect to app to initiate login (OIDC Compliant)`, its mandatory to change the `Grant type` - `Client acting on behalf of a user` section to `Implicit (hybrid)` and tick `Allow Access Token with implicit grant type`.\n:::\n\nThe Okta sign-in button will now be available in your ToolJet login screen.\n\n:::info Find Well Known URL\nRefer to this Link: https://developer.okta.com/docs/concepts/auth-servers/#org-authorization-server",
    "tag": "tooljet"
  },
  {
    "title": "google-openid.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/user-authentication/sso/openid/google-openid.md",
    "content": "\nid: google-openid\ntitle: Google (Open ID)\n\n\n\nGo to the Workspace Settings (\u2699\ufe0f) from the left sidebar in the ToolJet dashboard\n\n\n\n\n\n\n\nSelect `SSO` from workspace options\n\n\n\n\n\n\n\nSelect `Open ID Connect` from the left sidebar\n\n\n\n\n\n\n\nSet Name as `Google` and get the Client ID and Client Secret from your Google Clound Console.\n\n\nSet the Well Known URL to `https://accounts.google.com/.well-known/openid-configuration`\n\n\nGenerating Cliend ID and Cliend Secret on GCS\n\n\nGo to Google cloud console and create a project.\n\n\n\n\n\n\n\nGo to the Google cloud console credentials page, and create an OAuth client ID\n\n\n\n\n\n\n\nYou'll be asked to select user type in consent screen. To allow only users within your workspace, select 'Internal', otherwise,\nselect 'External'.\n\n\n\n\n\n\n\nYou'll be led to an app registration page where you can set OAuth scopes. Select 'Add or remove scopes' and add the scopes\nuserinfo.email and userinfo.profile as shown in the image. This will allow ToolJet to store the email and name of the\nuser who is signing in\n\n\n\n\n\n\n\nSet the domain on which ToolJet is hosted as an authorized domain\n\n\n\n\n\n\n\nSet the `Redirect URL` generated at manage SSO `Open ID` page under Authorised redirect URIs\n\n\n\n\n\n\n\nNow, you can view your client ID and client secret from the Credentials page in API Console:\n\nGo to the Credentials page.\nClick the name of your credential or the pencil icon. Your client ID and secret are at the top of the page.\n",
    "tag": "tooljet"
  },
  {
    "title": "Using Multi-environments",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/release-management/multi-env.md",
    "content": "\nid: multi-environment\ntitle: Multi-Environment\n\nAvailable on: Enterprise Edition\nToolJet's multi-environment helps in streamlining workflows, thereby minimizing the chances of errors, and enables effective application management. Using multi-environment ensures that your ToolJet application is rigorously tested before it is made available to users.\n\n\n\nUsing Multi-environments\nToolJet comes with three default environments:\n- Production\n- Development\n- Staging\nSwitching environments\nFor switching the environment, click on the Environment Manager on the navbar of app-builder to open the dropdown and select a environment.\nThe datasource credentials are required to be entered specifically for every environment.\n:::tip Best Practice\nMake your default environment the Production environment - the environment in which the users use the final versions of your developed applications. This will help ensure that the production environment has access to all of the data sources.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Preview and Sharing Apps",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/tutorial/sharing-and-deploying.md",
    "content": "\nid: sharing-and-deploying\ntitle: Preview and Sharing Apps\n\nPreview and Sharing Apps\nPreview\nClicking on `Preview` will open up the currently opened version of the app in the new tab. This is useful if you want to immediately check the app in production.\n\nSharing an app\nOnce you have released a version of your app, you can share the app with others using a customised url. To share an app:\n\nClick on the Share button on the top-right corner\n\n\n\n\n\nIn the dialog box, turn on the toggle switch to `Make the application public` and shareable\n\n\n\n\n\nCreate your own `customised URL` for the app and click on `copy` to copy the URL\n\n\n\n\n\nYou can also `Embedd` your application using the embeddable link\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Adding a data source",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/tutorial/adding-a-datasource.md",
    "content": "\nid: adding-a-datasource\ntitle: Adding a data source\n\nAdding a data source\n:::tip\nThe data sources are created on app level and not on workspace level.\n:::\nDatasource manager is on the left-sidebar of the app builder. To add a new data source, click on the  `Add datasource` button.\n\nYou will be prompted to select the data source that you wish to add. Let's select PostgreSQL for this tutorial. You will then need to provide the credentials of your PostgreSQL database. The fields that are marked as `encrypted` will be encrypted before saving to ToolJet's database. \n\n\n![ToolJet - Tutorial - Adding a data source](/img/tutorial/adding-datasource/datasources.png)\n\n\nThe name of the data source must be unique (within the app) and can be changed by clicking on the data source name at the top of the prompt. Click on `Test Connection` button to verify the connection, this might take a couple of minutes. Once verified, save the data source. \n:::tip\nIf you are using ToolJet cloud and if your data source is not publicly accessible, please white-list our IP address ( shown while creating a new data source ).\n:::\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Multi-Workspace",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/tutorial/multiworkspace.md",
    "content": "\nid: multiworkspace\ntitle: Multi-Workspace\n\nMulti-Workspace\nUser can create their own workspaces, user who created workspace will be having admin privileges for the workspace.\n\n\n\nHierarchy\n\n\n\nPermissions\n:::tip\nPlease check the detailed doc on Permissions.\n:::\n\nThe administrator can manage users and groups of each workspace\nApplications and settings can not be shared between workspaces\nA user authorised to login to Tooljet will not have access to all workspaces, Usesr should be invited or signed up to a workspace to log-in to it.\n\nEnabling Multi-Workspace\nSet environment variable DISABLE_MULTI_WORKSPACE value to false  to enable the feature, and true  to disable it.\nWhen enabled\n\nWhen Multi-Workspace feature is enabled, user should login with username and password to log in to Tooljet.\nAdministrator can configure authentication methods for their workspaces.\nIf password login is enabled, switching to the workspace will happen without any other authorization since the user is already authorized with password login.\nUser logged in to Toojet and trying to switch to a workspace where SSO is enabled and password login is disabled, will be redirected to workspace login page and enabled SSO options will be shown\nUser can directly login to a workspace using workspace login URL, Administrator can view the URL Manage SSO -> General Settings -> Login URL.\n\nWhen disabled\n\nIf Multi-Workspace is disabled, Create workspace feature won\u2019t be available.\n",
    "tag": "tooljet"
  },
  {
    "title": "Debugger    ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/tutorial/debugger.md",
    "content": "\nid: debugger\ntitle: Debugger\n\nDebugger\nThe debugger captures errors that happens while running the queries. For example, when a database query fails due to the unavailability of a database or when a REST API query fails due to an incorrect URL, the errors will be displayed on the debugger. The debugger also displays relevant data related to the error along with the error message. Debugger is located on the left-sidebar.\n\nPin Debugger\nYou can click on the `pin` icon at the top-right corner of the debugger if you do not want the debugger to close. The debugger will remain open until it is unpinned.",
    "tag": "tooljet"
  },
  {
    "title": "Pages Panel",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/tutorial/pages.md",
    "content": "\nid: pages\ntitle: Pages\n\nPages allows you to have multiple pages in a single application, making your ToolJet applications more robust and user-friendly.\n\n\n\nPages Panel\nYou can open the Pages Panel by clicking on the Pages icon on the left sidebar of the app-builder.\n\n\n\nPanel Options\n\nAdd Page\nSettings\nPin\nSearch\n\nAdd Page\nOn the header of the Pages Manager, the + button that allows you to add more pages to your application\n\n\n\nOn clicking the + button, a new page will be added, enter the name for the page and press enter.\n\n\n\nSettings\nFrom Settings, you can hide the page navigation sidebar in viewer mode, by enabling the Disable Menu option.\n\n\n\nPin\nYou can pin the pages panel from the Pin button and the panel won't close until you unpin it.\n\n\n\nSearch\nIf there are many pages on the panel then you can use the Search bar to look for specific page.\n\n\n\nPage options\nThere are several options available for a Page. To use these options, click on the kebab menu on the right of the page card.\n\nPage Handle\nRename\n\n\n\nMark Home\nHide Page\nDelete Page\nEvent Handlers\n\n\n\n\nPage Handle\nPage Handle is the slug that is added at the end of the application URL. Page Handle get its default value when the page name is entered on the creation of the page. You can change the Page Handle from this option.\n\n\n\nRename\nRename option will allow you to rename the page.\n\n\n\n\nMark Home\nMark home option can be used to make a page the default landing page of the application, so whenever the app will be loaded the page that is marked home will be loaded.\n\n\n\n:::info\nThe page which is marked home will have a Home icon on the left of the Page Card.\n\n\n\n:::\nHide Page\nHide Page option can be used to hide a page from the page navigation sidebar in viewer mode.\n\n\n\n:::info\nIf a page is hidden then you'll see an eye icon on the right of the card.\n\n\n\n:::\nYou can go to the options again and unhide the app from the page navigation sidebar\n\n\n\nDelete Page\nYou can delete a page from an application using this option.\n\n\n\n:::info\nIf a page is Marked Home then you won't be able to delete and the delete page option will be disabled.\n\n\n\n:::\nEvent Handlers\nJust like other Event Handlers on ToolJet, you can add event handlers too pages too.\nCurrently, there is On page load event available. You can use all the available actions for this event along with the new actions added specifically for the pages:\n- switch page\n- set page variable\n- unset page variable\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Keyboard Shortcuts",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/tutorial/keyboard-shortcuts.md",
    "content": "\nid: keyboard-shortcuts\ntitle: Keyboard Shortcuts\n\nKeyboard Shortcuts\nYou can perform operations like undo, redo, clone, or removing the widget directly using the keyboard shortcuts.\nCopy\nYou can copy the component  on the visual app editor using the following shortcut keys:\nOn Mac: `cmd + c`\nOn Linux/Windows: `ctrl + c`\n\n\n\nCut\nYou can cut the component  on the visual app editor using the following shortcut keys:\nOn Mac: `cmd + x`\nOn Linux/Windows: `ctrl + x`\n\n\n\nPaste\nYou can paste the selected component  using the following shortcut keys:\nOn Mac: `cmd + v`\nOn Linux/Windows: `ctrl + v`\n\n\n\n:::caution\nThere are few edge cases when copy-paste commands might not work:\n- The URL should be `https` and it won't work on http on many browsers\n- Recent Firefox versions has some issue with copy functionality\n:::\nUndo\nYou can undo any operation performed on the visual app editor using the following shortcut keys:\nOn Mac: `cmd + z`\nOn Linux/Windows: `ctrl + z`\n\n\n\nRedo\nIf you have `undo` an operation and want to redo that again than you can use the following shortcut keys:\nOn Mac: `cmd + shift + z`\nOn Linux/Windows: `ctrl + shift + z`\n\n\n\nClone\nNow you can create multiple clones of any widget without having to drag and drop the widget again from the sidebar. Just select any widget that you want to create a clone and use the following shortcut keys:\nOn Mac: `cmd + d`\nOn Linux/Windows: `ctrl + d`\n\n\n\nRemove widget\nNow you can delete a selected widget by using the following shortcut keys:\nOn Mac: `delete`\nOn Linux/Windows: `backspace`\n\n\n\nUnselect the selected widget\nYou can quickly deselect a widget using the `esc` key.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Building Queries",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/tutorial/building-queries.md",
    "content": "\nid: building-queries\ntitle: Building Queries\n\nBuilding Queries\nQuery Editor lives at the bottom of the page. We will now build a query for the PostgreSQL datasource that we connected in the previous step.\n:::tip \nYou can click on the 'enlarge' icon to enlarge query editor pane. \n:::\n\nClick on the `+` icon of the query editor to create a new query.\nSelect the PostgreSQL datasource created in previous step.\nCopy the query given below and paste on the query area.\nSelect SQL mode\n\n`sql\nSELECT * FROM customers;`\n\nQuery results can be previewed by clicking the `preview` button. Previewing queries will not alter the state of the app.\n\nAdvanced options\n\nRun query on page load\nIf this option is enabled, the query will be run when the app is loaded for the first time. The queries can have more than one trigger, ie the same query can later be triggered again using a button's click event or table's row selected event or any other events.\nRequest confirmation before running query\nEnable this option to show a prompt to confirm the action before a query is run. The confirmation prompt will look like this:\n\n\n\nShow notification on success",
    "tag": "tooljet"
  },
  {
    "title": "Versioning and Release",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/tutorial/versioning-and-release.md",
    "content": "\nid: versioning-and-release\ntitle: Versioning and Release\n\nVersioning and Release\nVersioning and Release lets you version control your apps and release app changes to the users. \nVersioning\nVersioning is really useful if multiple developers are working on an app, it allows them to save their own version of the app. This also prevents developers from overwriting the other developer's work. \nCreating a Version\nYou can create new versions from App Version Manager on the top-right corner. It displays the version of the app that you're currently working and can be used to switch between the different version of the app. To create a new version:\n\n\nGo to the App Version Manager from the toolbar and click on the dropdown. It will display all the versions of the app that have been created.\n\n\n\n\n\n\n\nClick on Create Version and a modal will pop-up. Enter a Version Name and click on Create version from dropdown that will include all the versions of the app, choose a version that you want to use for your new version and then click on `Create Version`.\n\n\n\n\n\n\n\nRelease\nMaking a release let's you publish the app and push the changes to production.\nReleasing a version\nTo release a version:\n\n\nGo to the App Version Manager and select the `version` from the dropdown that you want to release.\n\n\n\n\n\n\n\nClick on the `Release` button on the top-right corner.\n\n\n\n\n\n\n\n:::tip \nToolJet will block editing of the `Released version` of an app and will display a prompt to create a new version to make the changes. This is to prevent accidentally pushing an unfinished app to the live version.\n\n\n\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Transformations",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/tutorial/transformations.md",
    "content": "\nid: transformations\ntitle: Transformations\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nTransformations\nTransformations can be enabled on queries to transform the query results. ToolJet allows you to transform the query results using two programming languages: \n\nJavaScript \nPython \n\n:::caution\n- Every transformation is scoped to the query it's written for. \n- Actions and CSA(Component Specific Actions) cannot be called within the transformation, they can only be called within RunJS query or RunPy query.\n:::\nTransform using JavaScript\nLet's assume a query is returning the customers data with a `name` row, so we will write a simple transformation to compute `first_name` and `last_name` for all the customers.\n`javascript\n// write your code here\n// return value will be set as data and the original data will be available as rawData\nreturn data.map((row) => {\n  return {\n    ...row,\n    first_name: row.name.split(' ')[0],\n    last_name: row.name.split(' ')[1],\n  };\n});`\nThe query will now look like this:\n\n\n\nTransform using Python\nLet's use Python transformation to compute `first_name` and `last_name` for all the customers that we fetch in the previous step.\n`python\nreturn list(map(lambda row: {\n  **row,\n  'first_name': row['name'].split(' ')[0],\n  'last_name': row['name'].split(' ')[1],\n}, data))`\nExample\n\n\nLet's take a look at the data returned by a RESTAPI (using mock data here):\n\n\n\n\n\n\n\nNow we will transform the returned data using Python that will append a new key in the returned data called `user` and that user will have the value from the exposed global variables of ToolJet which is `globals.currentUser.email`\n`python\n  return list(map(lambda item: {**item, \"user\": f\"{globals['currentUser']['email']}\"}, data))`\n\n\nNow, you can click on the preview button to check the transformed data.\n\n\n\n\n\n\n\n\nClick the `Save` button to create the query. Saved queries can be run using the `Run` button on the top-right of query panel. Queries run using the run button will behave just as if it was triggered by an app event like button click and thus will alter the state of the app. You can view the query results using the state inspector on the left side-bar of the app builder.\n\n\n\nWe can see that `first_name` and `last_name` are added to all the rows in the `data` object of the query. If you need the original data of the query, it will be available in the `rawData` object of the query.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Adding a widget",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/tutorial/adding-widget.md",
    "content": "\nid: adding-widget\ntitle: Adding a widget\n\nAdding a widget\nTo add a widget, navigate to the `Widget manager` on the right sidebar. It will display the list of built-in widgets that can be added to the app. Use the search functionality to quickly find the widget that you want.\n\nDrag and drop a widget\nLet's add a `table` widget to the app to show the customer data from the query that we created in the previous steps.\nTo add a widget, drag and drop the widget to the canvas.\nResize a widget\nThe widgets can be resized and repositioned within the canvas.\n\nAdding widgets to Modal\nTo add a widget to Modal, we need to trigger Show modal action\n:::info\nBefore triggering `Show modal action` we need to add a modal widget to the canvas.\n:::\n\nAdd a `modal widget` to the app\nTrigger the Show modal action\nClick on the canvas area for the `Widget manager` sidebar\nNavigate to the Widget manager on the right sidebar and Drag and drop a widget into the Modal\n\n\nResize table columns\nWe can resize the column width using the resize handle of the column.\n\nChange widget properties\nClick on the widget to open the inspect panel on right sidebar. Here you can change the properties of the widgets. Let's configure the table columns to display the customer data. The display order of columns can be changed by dragging icon near the column name.\n\nConnecting data with widget\nNow we will connect the `data` object of the `fetch customers` query with the table. Click on the table widget to open the inspector on the right sidebar. We can see that the data property of the table has an empty array as the value. The data field, like almost every other field on the editor supports single-line javascript code within double brackets. Variable suggestions will be shown as a dropdown while you type the code in the field.\nLet's select the `data` object of the 'postgresql' query.\n`{{queries.postgresql1.data}}`\nSince we have already run the query in the previous step, the data will be immediately displayed in the table.\n\nSo far in this tutorial, we have connected to a PostgreSQL database and displayed the data on a table.\n:::tip\nRead the widget reference of table here for more customizations such as server-side pagination, actions, editing data.",
    "tag": "tooljet"
  },
  {
    "title": "Adding actions",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/tutorial/actions.md",
    "content": "\nid: actions\ntitle: Adding actions\n\nAdding actions\nToolJet supports several actions that can be invoked as the handler for any `event` that is triggered in an application.\nTo add actions\nTo attach an action for component events, click on the component's handle, and then click on the `Add handler` button on the\ninspector panel available on the right side.  \nTo attach an action for query events, select the query, go to the `advanced` tab and then click on the `Add handler` button.\nAvailable actions\nSome of the actions that ToolJet Support are\nAction| Description|\n   ----| -----------  |\n   Show alert | Show an alert message as a bootstrap toast           |\n   Run query | Run any of the data queries that you have created           |\n   Open webpage | Go to another webpage in a new tab          |\n   Goto app | Go to another ToolJet application          |\n   Show modal | Open any modal that you've added          |\n   Close modal | Close any modal that you've added if its already open          |\n   Copy to clipboard | Copy any available text that you see on the application to clipboard          |\n   Set localStorage | Set a key and corresponding value to localStorage          |",
    "tag": "tooljet"
  },
  {
    "title": "How can we add these variables to an Workspace?",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/tutorial/workspace-environment-variables.md",
    "content": "\nid: workspace-environment-variables\ntitle: Workspace Variables\n\nWorkspace Variables are the variables with some value(usually tokens/secret keys/API keys) that can be used in different apps across the same Workspace.\nHow can we add these variables to an Workspace?\nSuppose there is an `API key` or a value that you want to use in the queries or widgets in the multiple apps of the same Workspace then the Workspace admin or the user with permissions can add an environment variable.\nAdding the environment variable\n\nGo to the ToolJet Dashboard, and click on the dropdown on the navigation bar to show `Workspace` options\nSelect `Manage Environment Variables`\nClick on `Add New Variable` button\nGive a `Name` to the variable, set the value, choose `Type`, toggle `Encryption`, and click Add Variable button\nNow this variable can be used inside any application of this Workspace\n\n\n\n\nTypes of variables\n\n\nClient: The client variable can be used in widgets and queries.\n\n\nServer: The server variables can be used with all the queries except the `RunJS`. The reason why we don't allow the server variables to be used with the widgets is that these variables are only resolved during the runtime so they're highly secured.\n\n\n:::info\nVariable Type cannot be changed once it has been created.\n:::\n\n\n\nEncryption\nThis feature enables us to add a client variable with and without `encryption`. The server variables are always encrypted by default.\nUsing variable in an app\nLet's use the variable that we created here. If you have used ToolJet before, then you know that for getting the values from any variable we use JS notation i.e. `{{}}` but for using the Workspace variables we have different opening and closing notation `%% %%`. The environment variables will not work inside js code `{{}}`.\nSo, the syntax for using the variable that we created before will be `%%client.pi%%`\nExample for client variable usage:\n\n\n\nExample for server variable usage:\n\n",
    "tag": "tooljet"
  },
  {
    "title": "App menu options",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/tutorial/app-menu-options.md",
    "content": "\nid: app-menu-options\ntitle: App menu options\n\nApp menu options\nOptions that are available in the overflow menu of the app card are:\n\nChange Icon\nAdd to folder\nClone app\nExport app\nDelete app\n\n\n\n\nChange Icon\nThe icon on the app cards can be customised by selecting the `Change Icon` option.\n\n\n\nAdd to folder\nToolJet allows you to create folders (`+ Create new folder` from the left sidebar) on the dashboard, and any application can be added to these folders.\n\n\n\nClone app\nAny application created on ToolJet can be cloned using the `Clone app` option. The cloned application is the exact copy of the original app except that the user will have to re-enter the datasource credentials in cloned app.\nExport app\nExport app option will allow the users to download `JSON` file with all the information about your application(excluding credentials). This JSON file can be used to import this application to the same or other workspace.\nUsers get the option to export:\n- the currently released version\n- a particular version from list latest version to oldest version\n- all versions\n\n\n\nDelete app\nUse this option to complete remove the app from the workspace.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Creating new app",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/tutorial/creating-app.md",
    "content": "\nid: creating-app\ntitle: Creating new app\n\nCreating new app\n:::info\nApps in ToolJet binds the widgets, data sources and queries together.\n:::\nThis tutorial will walk you through building a simple app to fetch customer information from a PostgreSQL database and display the data using the table widget.\nTo create a new ToolJet app, click on the 'Create new application' button on the ToolJet dashboard. \n\nYou will be redirected to the visual app editor once the app has been created. Create the first version of your app to start building. The name of the app can be changed by clicking on the app name at top-left of the app builder.\n\n\n![ToolJet - Creating an app](/img/tutorial/creating-new-app/visual-app-editor.png)\n\n\nThe main components of an app: \n\nWidgets - UI components such as tables, buttons, dropdowns.\nData sources - ToolJet can connect to databases, APIs and external services to fetch and modify data.\n",
    "tag": "tooljet"
  },
  {
    "title": "Mobile layout",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/tutorial/mobile-layout.md",
    "content": "\nid: mobile-layout\ntitle: Mobile layout\n\nMobile layout\nMobile layout is activated when the width of the window is less than 600px.\n:::tip\nWidgets can be shown on desktop, mobile, or both.\n:::\n\nAdding existing widget to mobile layout\nClick on the widget to open inspector. Scroll down to the `layout` section and enable mobile layout. The width of the widget will be adjusted to fit the mobile layout.\nAdding a new widget to mobile layout\nSwitch the layout to mobile by clicking the button on the top navigation bar. Drag and drop a widget to the canvas. This widget will not be shown on desktop layout unless enabled from the widget inspector via the \"Show on desktop\" button manually.\n:::tip\nWidth of the widgets will be automatically adjusted to fit the screen while viewing the application in app viewer.",
    "tag": "tooljet"
  },
  {
    "title": "Managing Users and Groups",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/tutorial/manage-users-groups.md",
    "content": "\nid: manage-users-groups\ntitle: Managing Users and Groups\n\nManaging Users and Groups\nManaging Users\nAdmin of a workspace can add users to the workspace. To manage the users in your workspace, just go to the Workspace Settings from the left sidebar on the dashboard and click on the Users option.\n\n\n\nInviting users\nAdmins can invite anyone to a workspace using the email address. To invite a user:\n\n\nOn the Users page click on the `Invite new user` button.\n\n\n\n\n\n\n\nNow enter the details of new user such as first name, last name, email, and then click on the Create User.\n\n\n\n\n\n\n\nAn email including the Invite Link to join your workspace will be send to the created user. The status will turn from invited to active after the user successfully joins your workspace using the invite link.\n\n\n:::tip\n  You can also copy the invitation url by clicking on the copy icon next to `invited` status of the created user.\n  :::\n\n\n\n:::tip\nYou can also Bulk Invite Users by editing and uploading the sample CSV file including all the users details.\n\n\n\n:::\nDisabling a user's access\nYou can disable any active user's access to your workspace by clicking on the Archive button and the status of the user will change from active to archived.\n\n\n\nEnabling a user's access\nSimilar to archiving a user's access, you can enable it again by clicking on Unarchive. The status of user will change from archived to invited and the user will have to join again using the invite link received via the e-mail.\n\n\n\nManaging Groups\nOn ToolJet, Admins can create groups for users added in a workspace and grant them access to particular app(s) with specific permissions. To manage groups, just go to the Workspace Settings from the left-sidebar of the dashboard and click on the Groups.\n\n\n\nGroup properties\nEvery group on ToolJet has three sections:\nApps:\nAdmins can add or remove any number of apps for a group of users. To add an app to a group, select an app from the dropdown and click on `Add` button next to it. You can also set app permissions such as `View` or `Edit` for the group. You can set different permissions for different apps in a group.\n\n\n\nUsers:\nAdmins can add or remove any numbers of users in a group. Just select a user from the dropdown and click on `Add` button to add it to a group. To delete a user from a group, click on `Delete` button next to it.\n\n\n\nPermissions:\nAdmins can set granular permission like creating/deleting apps or creating folder for a group of users.\n\n\n\n:::tip\nAll the activities performed by any Admin or any user in a workspace is logged in `Audit logs` - including any activity related with managing users and groups.\n:::\nPredefined Groups\nBy default, every workspace will have two User Groups:\n1. All Users\nThis group contains all the users and admins.\n| Apps | Users | Permissions |\n| ----------- | ----------- | ----------- |\n| You can add or remove apps. | Modification is disabled. This group will have all the users and admins added in a workspace. | You can edit permissions for all the users globally. |\n\n\n\n2. Admin\nThis group contains admins by default. Admins can add more admins or remove the users in this group.\n| Apps | Users | Permissions |\n| ----------- | ----------- | ----------- |\n| Modification is disabled. By default, this group has `Edit` permission for all the apps in a workspace  | Admins can add or remove users in this group. | Modification is disabled. By default, all the admins can create and delete apps or create folders. |\n\n\n\nCreating new group\n\n\nClick on `Create new group` button in the User Groups page.\n\n\n\n\n\n\n\nEnter a name for the group and click `Create Group` button.\n\n\n\n\n\n\n\nOnce the group is created, you can add Apps, Users and set their Permissions for that group.\n\n\nDeleting a group\nTo delete a group, click on `Delete` next to it. It will confirm whether you want to delete it or not, Click on `Yes` to delete the group.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Configuration",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/Enterprise/white-label.md",
    "content": "\nid: white-label\ntitle: White Label\n\nAvailable on: Enterprise Edition\nWhite Label feature will allow you to remove the ToolJet branding from the ToolJet platform and add your own custom logo and text.\nThis feature allows you to rebrand the following:\n- App logo (Logo on login screen, dashboard, and app-editor)\n\n\n\n\n\n\n\n\n\n\nFavicon\n\n\nPage Title (next to Favicon)\n\n\n\n\n\n\n\nConfiguration\nTo enable white labelling, you'll need to set the below mentioned environment variables in the .env file:\n\n`WHITE_LABEL_LOGO`: URL of the logo. Preferred dimensions of the logo are: width 130px and height 26px\n`WHITE_LABEL_TEXT`: The text that you want to display as Page Title\n",
    "tag": "tooljet"
  },
  {
    "title": "audit_logs.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/Enterprise/audit_logs.md",
    "content": "\nid: audit_logs\ntitle: Audit logs\n\nAvailable on: Enterprise Edition\nThe audit log is the report of all the activities done in your ToolJet account. It will capture and display events automatically by recording who performed an activity, what when, and where the activity was performed, along with other information such as IP address.\n\n\n\nFilter audit logs\nAudited events can be filtered using the below characteristics:\nSelect Users\nSelect a specific user from this dropdown to check all their activities. \nSelect Apps\nThe dropdown will list all the apps present in your account. Choose an app to filter the logs associated with that app.\nSelect Resources\n| Resources  | description |\n| ----------- | ----------- |\n| User | Filter all the User events like `USER_LOGIN`, `USER_SIGNUP`, `USER_INVITE`, AND `USER_INVITE_REDEEM`. |\n| App | Filter all the App events like `APP_CREATE`, `APP_UPDATE`,`APP_VIEW`,`APP_DELETE`,`APP_IMPORT`,`APP_EXPORT`,`APP_CLONE`. |\n| Data Query | Filters the events associated with Data Query like `DATA_QUERY_RUN`. |\n| Group Permission | All the events associated with Group Permissions will be filtered. Group Permissions include `GROUP_CREATE`, `GROUP_UPDATE`, `GROUP_DELETE`. |\n| App Group Permission | Within each group, you can set apps for read or edit privileges. These events get recorded as App Group Permissions. |\nSelect Actions\n| Actions  | description |\n| ----------- | ----------- |\n| USER_LOGIN | This event is recorded everytime a user logins. |\n| USER_SIGNUP | This event is recorded everytime a new signup is made. |\n| USER_INVITE | You can invite users to your account from `Manage Users` section and an event is audited everytime an invite is sent. |\n| USER_INVITE_REDEEM | This event is recorded whenever an invite is redeemed. |\n| APP_CREATE | This event is recorded when a user creates a new app. |\n| APP_UPDATE | This event is recorded whenever actions like renaming the app, making the app public, editing shareable link, or deploying the app are made. |\n| APP_VIEW | This event is logged when someone views the launched app. (public apps aren't accounted for) |\n| APP_DELETE | This event is recorded whenever a user deletes an app from the dashboard. |\n| APP_IMPORT | This event is recorded whenever a user imports an app. |\n| APP_EXPORT | This event is recorded whenever an app is exported. |\n| APP_CLONE | This event is recorded whenever a clone of the existing app is created. |\n| DATA_QUERY_RUN | This event is logged whenever a data source is added, a query is created, or whenever a query is run either from the query editor or from the launched app. |\n| GROUP_PERMISSION_CREATE | This event is recorded whenever a group is created. |\n| GROUP_PERMISSION_UPDATE | This event is recorded whenever an app or user is added to or removed from a group, or the permissions for a group are updated. |\n| GROUP_PERMISSION_DELETE | This event is recorded whenever a user group is deleted from an account. |\n| APP_GROUP_PERMISSION_UPDATE | For every app added in to user group, you can set privileges like `View` or `Edit` and whenever these privileges are updated this event is recorded. By default, the permission of an app for a user group is set to `View`. |\n:::info\nIt is mandatory to set a Data Range in `From` and `To` to filter audit logs.\n:::\nUnderstanding information from logs\n\n\n\n| Property  | description |\n| ----------- | ----------- |\n| action_type | It is the type of action that was logged in this event. Refer this to know about actions. |\n| created_at | Displays the date and time of a logged event.  |\n| id | Every event logged has a specific event id associated with it. |\n| ip_address | Displays the IP address from where the event was logged. |\n| metadata | Metadata includes two sub-properties - `tooljet_version` and `user_agent`. `tooljet_version` displays the version of ToolJet used for the logged event and `user_agent` contains information about the device and browser used for that event. |\n| organization_id | Every organization in ToolJet has an id associated with it and is recorded when an event occurs. |\n| resource_id | There are several resources and for each resource that is created, an id gets associated with it.|\n| resource_name | Displays the name of the resources that were logged in the event. For example, if an app was created or deleted then it will display the name of the app. |\n| resource_type | Displays the type of the resources that were logged in the event. |",
    "tag": "tooljet"
  },
  {
    "title": "How is Super Admin different from Admin",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/Enterprise/superadmin.md",
    "content": "\nid: superadmin\ntitle: Super Admin\n\nAvailable on: Enterprise Edition\nA Super Admin is the user who has full access to all the Workspaces, Users, and Groups of an instance. An instance can have more than one Super Admin. A Super Admin has full control over other users' workspaces and can create users, groups, and other super admins.\nThe user details entered while setting up ToolJet will have Super Admin privileges.\nHow is Super Admin different from Admin\n| Privilege | Admin | Super Admin | \n| --------- | ----- | ----------- |\n| Manage Users in their workspace (Invite/Archive/Unarchive) | \u2705 | \u2705 |\n| Manage Groups in their workspace (Create Group/Add or Delete Users from groups/ Modify Group Permissions) | \u2705 | \u2705 |\n| Manage SSO in their workspace | \u2705 | \u2705 |\n| Manage Workspace Variables in their workspace | \u2705 | \u2705 |\n| Access any user's personal workspace (create, edit or delete apps) | \u274c | \u2705 |\n| Archive Admin or any user of any workspace | \u274c | \u2705 |\n| Access any user's ToolJet database (create, edit or delete database) | \u274c | \u2705 |\n| Manage any workspace's setting (Groups/SSO/Workspace Variables) | \u274c | \u2705 |\n| Manage all users from all the workspaces in the instance | \u274c | \u2705 |\n| Make any user Super Admin | \u274c | \u2705 |\n| Restrict personal workspace of invited users | \u274c | \u2705 |\n\n\n\nSuper Admin features\nAccess any workspace\nIf a user is a Super Admin then they can switch to any workspace created by any user in the instance from the dropdown on the top-left of dashboard that is used to switch between workspaces.\nThe dropdown will list all the workspaces including workspaces created by the Super Admin or Any User.\n\n\n\nCreate Edit or Delete apps from any user's personal workspace\nOnce the Super Admin accesses the workspace of any other user, they can create, edit or delete app on the workspace.\nThis also includes - modifying folders and importing, exporting, or cloning apps to any user's workspace.\nArchive/Unarchive Users\nSuper Admin can not only archive/unarchive users/admins on their workspace but also from the workspaces of any other user.\nIf a user is Super Admin, they just need to open the workspace in which they want to archive or unarchive a user. Then go to the Workspace Settings from the sidebar -> Manage Users -> Archive/Unarchive any user/admin\n\n\n\nAccess ToolJet DB in any workspace\nSuper Admins have access to the database of any user's workspace - just like Super Admins can access any application in any workspace. They have full access to modify or create any table in the ToolJet DB of any workspace.\nManage Workspace Settings (Groups/SSO/Workspace Variables)\nSuper Admins have all the privileges that an Admin of a workspace have, Super Admins can:\n- \u2705 Manage Groups: Creating/Deleting/Updating a Group in any workspace\n- \u2705 Manage SSO: Full control over General Settings, Password login and other SSO options\n- \u2705 Workspace Variables: Adding, updating or deleting workspace variables\nInstance Settings\nOnly Super Admins can access the Instance Settings:\n\nManage All Users\nManage Instance Settings\n\nChecking all the users in the instance\nManage All Users can be used to check all the users that are there - altogether from all the workspaces in an instance.\n\n\n\nArchiving a user from workspace\nSuper Admins have the privilege to remove any user from any of the workspace they belong.\nSuper Admins can go to Manage All Users page, Under the Workspaces column they'll see the number of workspaces a user belongs to. Click on the `View(n)`, a modal will pop up that will have the list of `n` number the workspaces, click on the Archive/Unarchive button next to the workspace name to remove the user from the workspace.\n\n\n\nMake the user super admin\nSuper Admins can make any user as Super Admin or remove any Super Admin from the Manage All Users in the Instance Settings page.\nClick on the Edit button next to any user, Enable the Make the user Super Admin option, and then Save it.\nThe user will become Super Admin and the Type column will update from `workspace` to `instance`.\n\n\n\nAllow users to create personal workspace\nWhen a user joins a workspace, they are provided with their own personal workspace and option to create new workspaces.\nSuper Admins can control this behavior from the Manage Instance Settings page, they can toggle off the option to Allow personal workspace. Now whenever a user joins a workspace they won't be provided a personal workspace nor they will be able to create a new workspace in the instance.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "AWS EC2",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/setup/ec2.md",
    "content": "\nid: ec2\ntitle: AWS EC2\n\nAWS EC2\n:::info\nYou should setup a PostgreSQL database manually to be used by the ToolJet server.\n:::\nFollow the steps below to deploy ToolJet on AWS EC2 instances.\n\n\nSetup a PostgreSQL database and make sure that the database is accessible from the EC2 instance.\n\n\nLogin to your AWS management console and go to the EC2 management page.\n\n\nUnder the `Images` section, click on the `AMIs` button.\n\n\nFind the ToolJet version you want to deploy. Now, from the AMI search page, select the search type as \"Public Images\" and input the version you'd want `AMI Name : tooljet_vX.X.X.ubuntu_bionic` in the search bar.\n\n\nSelect ToolJet's AMI and bootup an EC2 instance.\n\n\nCreating a new security group is recommended. For example, if the installation should receive traffic from the internet, the inbound rules of the security group should look like this:\nprotocol| port     | allowed_cidr|\n   ----| -----------  | ----------- |\n   tcp | 22           | your IP |\n   tcp | 80           | 0.0.0.0/0 |\n   tcp | 443          | 0.0.0.0/0   |\n\n\nOnce the instance boots up, SSH into the instance by running `ssh -i <path_to_pem_file> ubuntu@<public_ip_of_the_instance>`\n\n\nSwitch to the app directory by running `cd ~/app`. Modify the contents of the `.env` file. ( Eg: `vim .env` )\n\n\nThe default `.env` file looks like this:\n   `bash\n   TOOLJET_HOST=http://<example>\n   LOCKBOX_MASTER_KEY=<example>\n   SECRET_KEY_BASE=<example>\n   PG_DB=tooljet_prod\n   PG_USER=<pg user name>\n   PG_HOST=<pg host>\n   PG_PASS=<pg user password>`\n   Read environment variables reference\n:::info\n   If there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates.\n   :::\n\n`TOOLJET_HOST` environment variable determines where you can access the ToolJet client. It can either be the public ipv4 address of your instance or a custom domain that you want to use.\n\nExamples:\n   `TOOLJET_HOST=http://12.34.56.78` or\n   `TOOLJET_HOST=https://yourdomain.com` or\n   `TOOLJET_HOST=https://tooljet.yourdomain.com`\n:::info\n   We use a lets encrypt plugin on top of nginx to create TLS certificates on the fly.\n   :::\n:::info\n   Please make sure that `TOOLJET_HOST` starts with either `http://` or `https://`\n   :::\n\n\nOnce you've configured the `.env` file, run `./setup_app`. This script will install all the dependencies of ToolJet and then will start the required services.\n\n\nIf you've set a custom domain for `TOOLJET_HOST`, add a `A record` entry in your DNS settings to point to the IP address of the EC2 instance.\n\n\nYou're all done, ToolJet client would now be served at the value you've set in `TOOLJET_HOST`.\n\n\nDeploying Tooljet Database\nToolJet AMI comes inbuilt with PostgREST. If you intend to use this feature, you'd only have to setup the environment variables in `~/app/.env` file and run `./setup_app` script.",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Kubernetes",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/setup/kubernetes.md",
    "content": "\nid: kubernetes\ntitle: Kubernetes\n\nDeploying ToolJet on Kubernetes\n:::info\nYou should setup a PostgreSQL database manually to be used by ToolJet.\n:::\nFollow the steps below to deploy ToolJet on a Kubernetes cluster.\n\n\nSetup a PostgreSQL database\n   ToolJet uses a postgres database as the persistent storage for storing data related to users and apps. We do not have plans to support other databases such as MySQL.\n\n\nCreate a Kubernetes secret with name `server`. For the minimal setup, ToolJet requires `pg_host`, `pg_db`, `pg_user`, `pg_password`, `secret_key_base` & `lockbox_key` keys in the secret.\n\n\nRead environment variables reference\n\nCreate a Kubernetes deployment\n\n`bash\n    kubectl apply -f https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/deployment.yaml`\n:::info\nThe file given above is just a template and might not suit production environments. You should download the file and configure parameters such as the replica count and environment variables according to your needs.\n:::\n:::info\nIf there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates. You can make use of kubernetes secrets to mount the certificate file onto the containers.\n:::\n\nVerify if ToolJet is running\n\n`bash\n    kubectl get pods`\n\nCreate a Kubernetes services to publish the Kubernetes deployment that you've created. This step varies with cloud providers. We have a template for exposing the ToolJet server as a service using an AWS loadbalancer.\n\nExamples:\n   - Application load balancing on Amazon EKS\n   - GKE Ingress for HTTP(S) Load Balancing\n:::tip\nIf you want to serve ToolJet client from services such as Firebase or Netlify, please read the client Setup documentation here.\n:::\nToolJet Database\nIf you intend to use this feature, you'd have to set up and deploy PostgREST server which helps querying ToolJet Database. Please follow the instructions here for additional environment variables configuration to be done.\n\nSetup PostgREST server\n\n`bash\n    kubectl apply -f https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/postgrest.yaml`",
    "tag": "tooljet"
  },
  {
    "title": "Version 2 migration guide",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/setup/v2-migration.md",
    "content": "\nid: v2-migration-guide\ntitle: V2 migration guide\n\nVersion 2 migration guide\nToolJet version 2 comes with a bunch of exciting features, with the major ones being:\n1. Multi page\n2. Multi env\n3. Forms widget\n4. Database (Requires opt-in)\n5. Marketplace (Requires opt-in)\nCheckout the latest changelog for v2 here.\nDeployment\nBased on your opted deployment method from our setup doc, you can directly deploy v2 without any additional configuration for the default setup.\nAdditional configuration are only required for the opt-in features mentioned above. You can check the respective documentation of those features for the configuration changes needed.\n:::info\nServer may take some time to be ready to handle the HTTP request as v2 changes requires some data migrations for the initial deployment. This is automatically triggered as a part of the server boot.\n::::\nDeprecations\nDeployments\n\nDocker compose deployments with auto SSL is deprecated\n\nHelp and Support\n\nFeel free to join our highly active Slack Community or you can also e-mail us at hello@tooljet.com.\n",
    "tag": "tooljet"
  },
  {
    "title": "Try ToolJet",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/setup/try-tooljet.md",
    "content": "\nid: try-tooljet\ntitle: Try ToolJet\n\nTry ToolJet\nOn local with Docker\nYou can run the command below to have ToolJet up and running right away.\n`bash\ndocker run \\\n  --name tooljet \\\n  --restart unless-stopped \\\n  -p 80:80 \\\n  -v tooljet_data:/var/lib/postgresql/13/main \\\n  tooljet/try:latest`\nSetup information\n\nRuns the ToolJet server on the port 80 on your machine.\nContainer has postgres already configured within. All the data will be available in the docker volume `tooljet_data`.\nYou can make use of `--env` or `--env-file` flag to test against various env configurables mentioned here.\nUse `docker stop tooljet` to stop the container and `docker start tooljet` to start the container thereafter.\n\nOn Play with docker\nYou can deploy ToolJet on PWD for free with the one-click-deployment button below.\n\n\n\nSetup information\n\nOpen port 80 after the docker containers are up and running\n",
    "tag": "tooljet"
  },
  {
    "title": "tooljet-subpath.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/setup/tooljet-subpath.md",
    "content": "\nid: tooljet-subpath\ntitle: Deploying ToolJet on a subpath\n\nToolJet can now be deployed at a subpath rather than the root (`/`) of a public domain. Example subpath installation URL: `http://www.yourcompany.com/apps/tooljet`\nYou'll need to setup the following environment variables if ToolJet installation is on a domain subpath:\n| variable | value |\n| -------- | ---------------------- |\n| TOOLJET_HOST | the public URL ( eg: https://www.yourcompany.com )  |\n| SERVE_CLIENT | By default, this variable will be unset and the server will serve the client at its `/` end-point. You can set `SERVE_CLIENT` to `false` to disable this behaviour. |\n| SUB_PATH | Set a subpath to this variable. The subpath is to be set with trailing `/` and is applicable only when the server is serving the frontend client. ( eg: `/apps/tooljet/` )  |\n:::info\nSee all Environment Variables here.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Heroku",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/setup/heroku.md",
    "content": "\nid: heroku\ntitle: Heroku\n\nDeploying ToolJet on Heroku\n\nFollow the steps below to deploy ToolJet on Heroku:\n\n\nClick the button below to start one click deployment.\n\n\n\n   [![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/tooljet/tooljet/tree/main)\n\n   \n\n\n\nOn Heroku tab, you'll be asked to provide an `App name` and `Choose a region`. Enter the name for your deployment and select the region according to your choice.\n\n\n\n\n\n\nNow let's enter the `Config vars` to configure additional environment variables that are required for the installation.\nLOCKBOX_MASTER_KEY: ToolJet server uses lockbox to encrypt datasource credentials. You should set the environment variable LOCKBOX_MASTER_KEY with a 32 byte hexadecimal string. If you have OpenSSL installed, you can run the command `openssl rand -hex 32` to generate the key.\nNODE_ENV: By default NODE_ENV is set to production. \nNODE_OPTIONS: Node options are configured to increase node memory to support app build.\nSECRET_KEY_BASE: ToolJet server uses a secure 64 byte hexadecimal string to encrypt session cookies. You should set the environment variable SECRET_KEY_BASE. If you have OpenSSL installed, you can run the command `openssl rand -hex 64` to generate the key.\nTOOLJET_HOST: Public URL of ToolJet installation. This is usually `https://<app-name-in-first-step\\>.herokuapp.com`.\n\nTOOLJET_SERVER_URL: URL of ToolJet server installation. (This is same as the TOOLJET_HOST for Heroku deployments)\n\n\nClick on `Deploy app` button at the bottom to initiate the build.\n\n\nAfter the successful build, you'll see two buttons at the bottom: `Manage App` and `View`. Click on the `View` to open the app or click on `Manage App` to configure any settings.\n\n\n\n\n\n:::tip\nToolJet server and client can be deployed as standalone applications. If you do not want to deploy the client on Heroku, modify `package.json` accordingly. We have a guide on deploying ToolJet client using services such as Firebase.\n:::\nDeploying Tooljet Database\nIf you intend to use this feature, you'd have to set up and deploy PostgREST server which helps querying ToolJet Database.\nThis feature is only enabled if `ENABLE_TOOLJET_DB` is set to `true` in the Tooljet application.\nFollow the steps below to deploy ToolJet Database on Heroku:\n:::note\nPlease install Heroku CLI on your local machine. Please refer Heroku CLI installation steps here. \n:::\n\nCreate a new Heroku app using the PostgREST buildpack\n\n1.1 Create a folder with your app name. Please give a unique name to the app.  \n`bash\n  mkdir ${YOUR_PGRST_APP_NAME}\n  cd $${YOUR_PGRST_APP_NAME}\n  git init`\n1.2 Add PostgREST buildpack to your app. \n`bash\n  heroku apps:create ${YOUR_PGRST_APP_NAME} --buildpack https://github.com/PostgREST/postgrest-heroku.git\n  heroku git:remote -a ${YOUR_PGRST_APP_NAME}`\n\nAttach the Tooljet app\u2019s PostgreSQL database your Tooljet database app\n\n`${HEROKU_PG_DB_NAME` Should be the name of the PostgreSQL created by the Tooljet app. \nYou can get the `${HEROKU_PG_DB_NAME` of the Tooljet application from the Resources tab under Heroku Postgre attachments as shown below. (eg: `${HEROKU_PG_DB_NAME = postgresql-transparent-24158` ). \n`bash\n  heroku addons:attach ${HEROKU_PG_DB_NAME} -a ${YOUR_PGRST_APP_NAME}`\n\n\n\n\nCreate a Procfile\n\n:::info\n  The Procfile is a simple text file that is named Procfile without a file extension. For example, Procfile.txt is not valid.\n  :::\nPlease paste the below string within the Procfile file.\n`bash\n  web: PGRST_SERVER_HOST=0.0.0.0 PGRST_SERVER_PORT=${PORT} PGRST_DB_URI=${PGRST_DB_URI:-${DATABASE_URL}} ./postgrest-${POSTGREST_VER}`\n\nSet environment variables\n\nYou can also refer environment variable here.\n:::tip\n  If you have openssl installed, you can run the following command `openssl rand -hex 32` to generate the value for `PGRST_JWT_SECRET`.\nIf this parameter is not specified then PostgREST refuses authentication requests.\n  :::\n`bash\n  heroku config:set PGRST_JWT_SECRET=\n  heroku config:set POSTGREST_VER=10.0.0`\nYou can also refer environment variable here.  \n\nBuild and deploy your app\n\n`bash\n  git add Procfile\n  git commit -m \"PostgREST on Heroku\"\n  git push --set-upstream heroku main`\nYour Heroku app should be live at `${YOUR_APP_NAME}.herokuapp.com`. \n\nAdditional environment variables for Tooljet application\n",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Google Cloud Run",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/setup/google-cloud-run.md",
    "content": "\nid: google-cloud-run\ntitle: Google Cloud Run\n\nDeploying ToolJet on Google Cloud Run\n:::info\nYou should setup a PostgreSQL database manually to be used by ToolJet.\n:::\nFollow the steps below to deploy ToolJet on Cloud run with `gcloud` CLI.\nDeploying ToolJet application\n\nCloud Run requires prebuilt image to be present within cloud registry. You can pull specific tooljet image from docker hub and then tag with your project to push it to cloud registry.\n\n`bash\n   gcloud auth configure-docker\n   docker pull tooljet/tooljet-ce:latest\n   docker tag tooljet/tooljet-ce:latest gcr.io/<replace-your-project-id>/tooljet/tooljet-ce:latest\n   docker push gcr.io/<replace-your-project-id>/tooljet/tooljet-ce:latest`\nPlease run the above command by launching GoogleCLI which will help to push the Tooljet application image to Google container registry. \n\n\n\n\n\nCreate new cloud run service\nSelect and add the pushed Tooljet application image as shown below.\n\n\n\n\n\n\nIngress and Authentication can be set as shown below, to begin with. Feel free to change the security configurations as per you see fit.\n\n\n\n\n\nUnder containers tab, please make sure the port is set 3000 and command `npm, run, start:prod` is entered in container argument field with CPU capacity is set to 2GiB.\n\n\n\n\n\nUnder environmental variable please add the below Tooljet application variables. You can also refer env variable here. \n\nUpdate `TOOLJET_HOST` environment variable if you want to use the default url assigned with Cloud run after the initial deploy.\n\n\n\n:::tip\nIf you are using Public IP for Cloud SQL, then database host connection (value for `PG_HOST`) needs to be set using unix socket format, `/cloudsql/<CLOUD_SQL_CONNECTION_NAME>`.\n:::\n\nPlease go to the connection tab. Under Cloud SQL instance please select the PostgreSQL database which you have set-up.\n\n\n\n\nClick on deploy once the above parameters are set. \n:::info\nOnce the Service is created and live, to make the  Cloud Service URL public. Please follow the steps here to make the service public.\n:::\nDeploying ToolJet Database\nIf you intend to use this feature, you'd have to set up and deploy PostgREST server which helps querying ToolJet Database.\nPostgREST server\n\nCloud Run requires prebuilt image to be present within cloud registry. You can pull specific PostgREST image from docker hub and then tag with your project to push it to cloud registry.\n\n`bash\n   gcloud auth configure-docker\n   docker pull postgrest/postgrest:v10.1.1.20221215\n   docker tag postgrest/postgrest:v10.1.1.20221215\u00a0gcr.io/tooljet-test-338806/postgrest/postgrest:v10.1.1.20221215\n   docker push\u00a0gcr.io/tooljet-test-338806/postgrest/postgrest:v10.1.1.20221215`\nPlease run the above command by launching googleCLI which will help to push the PostgREST image to Google container registry. \n\n\n\n\nOnce the PostgREST image is pushed. Click on create service.\n\nSelect and add the pushed PostgREST image as shown in below.\n\n\n\n\nIngress and Authentication can be set as shown below, to begin with. Feel free to change the security configurations as per you see fit.\n\n\n\n\n\nUnder containers tab, please make sure the port is set 3000 and CPU capacity is set to 1GiB.\n\n\n\n\n\n\nUnder environmental variable please add corresponding Tooljet database env variables. You can also refer env variable.\n\n\nPlease go to connection tab. Under Cloud SQL instance please select the PostgreSQL database which you have set-up for Tooljet application or the separate PostgreSQL database created respective to Tooljet Database from the drop-down option.\n\n\n\n\n\nClick on deploy once the above parameters are set. \n:::info\nOnce the Service is created and live, to make the  Cloud Service URL public. Please follow the steps here to make the service public.\n:::\n\nAdditional Environmental variable to be added to Tooljet application or Tooljet Server connect to PostgREST server. You can also refer env variable here\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Amazon ECS",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/setup/ecs.md",
    "content": "\nid: ecs\ntitle: AWS ECS\n\nDeploying ToolJet on Amazon ECS\n:::info\nYou should setup a PostgreSQL database manually to be used by ToolJet.\n:::\nFollow the steps below to deploy ToolJet on a ECS cluster.\n\n\nSetup a PostgreSQL database\n    ToolJet uses a postgres database as the persistent storage for storing data related to users and apps.\n\n\nCreate a target group and an application load balancer to route traffic onto ToolJet containers.\n    You can reference AWS docs to set it up. Please note that ToolJet server exposes `/api/health`, which you can configure for health checks.\n:::note\nThis setup follows the old AWS UI for ECS as some options are missing on the latest experience.\n:::\n\n\nCreate task definition for deploying ToolJet app as a service on your preconfigured cluster.\n\n\nSelect Fargate as launch type compatibility.\n    \n\n\nConfigure IAM roles and set operating system family as Linux\n    \n\n\nSelect task size to have 3GB of memory and 1vCpu\n    \n\n\nClick on add container to update container definitions\n    \nWithin the add container form that is shown:\n\nSpecify your container name ex: `tooljet-ce`\nSet the image you intend to deploy. ex: `tooljet/tooljet-ce:v1.26.0`\n\nUpdate port mappings at container port `3000` for tcp protocol.\n  \n\n\nUpdate container command field to be `npm,run,start:prod`.\n  \n\n\nSpecify environmental values for the container. You'd want to make use of secrets to store sensitive information or credentials, kindly refer the AWS docs to set it up.\n\n\n\n:::note\n  For the minimal setup, ToolJet requires:\n  `TOOLJET_HOST`, `PG_HOST`, `PG_DB`, `PG_USER`, `PG_PASSWORD`, `SECRET_KEY_BASE` & `LOCKBOX_MASTER_KEY` keys in the secret.\nRead environment variables reference\n:::\n\n\n\n\nCreate a service to run your task definition within your cluster.\n\nSelect launch type as Fargate.\nSet operating system family as Linux\nSelect task definition family as the one created earlier. ex: `tooljet-ce`\nSelect the cluster and set the service name\nYou can set the number of tasks to start with as two\nRest of the values can be kept as default\n  \nClick on next step to configure networking options\nSelect your designated VPC, Subnets and Security groups. Kindly ensure that the security group allows for inbound traffic to http port 3000 for the task.\n  \nSince migrations are run as a part of container boot, please specify health check grace period for 900 seconds.\nSelect the application loadbalancer option and set the target group name to the one we had created earlier. This will auto populate the health check endpoints.\n\n\n\n:::info\nThe setup above is just a template. Feel free to update the task definition and configure parameters for resources and environment variables according to your needs.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Kubernetes (GKE)",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/setup/kubernetes-gke.md",
    "content": "\nid: kubernetes-gke\ntitle: Kubernetes (GKE)\n\nDeploying ToolJet on Kubernetes (GKE)\n:::info\nYou should setup a PostgreSQL database manually to be used by ToolJet. We recommend using Cloud SQL since this guide is for deploying using GKE.\n:::\nFollow the steps below to deploy ToolJet on a GKE Kubernetes cluster.\n\nCreate an SSL certificate.\n\n`bash\ncurl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/GKE/certificate.yaml`\nChange the domain name to the domain/subdomain that you wish to use for ToolJet installation.\n\nReserve a static IP address using `gcloud` cli\n\n`bash\ngcloud compute addresses create tj-static-ip --global`\n\nCreate k8s deployment\n\n`bash\ncurl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/GKE/deployment.yaml`\nMake sure to edit the environment variables in the `deployment.yaml`. You can check out the available options here.\n:::info\nIf there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates. You can make use of kubernetes secrets to mount the certificate file onto the containers.\n:::\n\nCreate k8s service\n\n`bash\ncurl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/GKE/service.yaml`\n\nCreate k8s ingress\n\n`bash\ncurl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/GKE/ingress.yaml`\nChange the domain name to the domain/subdomain that you wish to use for ToolJet installation.\n\nApply YAML configs\n\n`bash\nkubectl apply -f certificate.yaml, deployment.yaml, service.yaml, ingress.yaml`\n:::info\nIt might take a few minutes to provision the managed certificates. Managed certificates documentation.\n:::\nYou will be able to access your ToolJet installation once the pods, service and the ingress is running.\nToolJet Database\nIf you intend to use this feature, you'd have to set up and deploy PostgREST server which helps querying ToolJet Database. Please follow the instructions here for additional environment variables configuration to be done.\n\nSetup PostgREST server\n\n`bash\n    kubectl apply -f https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/GKE/postgrest.yaml`",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Kubernetes (AKS)",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/setup/kubernetes-aks.md",
    "content": "\nid: kubernetes-aks\ntitle: Kubernetes (AKS)\n\nDeploying ToolJet on Kubernetes (AKS)\n:::info\nYou should setup a PostgreSQL database manually to be used by ToolJet. We recommend using Azure Database for PostgreSQL since this guide is for deploying using AKS.\n:::\nFollow the steps below to deploy ToolJet on a AKS Kubernetes cluster.\n\n\nCreate an AKS cluster and connect to it to start with the deployment. You can follow the steps as mentioned on the Azure's documentation.\n\n\nCreate k8s deployment\n\n\n`bash\n    curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/AKS/deployment.yaml`\nMake sure to edit the environment variables in the `deployment.yaml`. We advise to use secrets to setup sensitive information. You can check out the available options here.\n:::info\nIf there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates. You can make use of kubernetes secrets to mount the certificate file onto the containers.\n:::\n\n\nCreate k8s service and reserve a static IP and inorder expose it via a service load balancer as mentioned in the doc. You can refer `service.yaml`.\n   `bash\n    curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/AKS/service.yaml`\n\n\nApply YAML configs\n\n\n`bash\n    kubectl apply -f deployment.yaml, service.yaml`\nYou will be able to access your ToolJet installation once the pods and services running.\nToolJet Database\nIf you intend to use this feature, you'd have to set up and deploy PostgREST server which helps querying ToolJet Database. Please follow the instructions here for additional environment variables configuration to be done.\n\nSetup PostgREST server\n\n`bash\n    kubectl apply -f https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/GKE/postgrest.yaml`",
    "tag": "tooljet"
  },
  {
    "title": "Environment variables",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/setup/env-vars.md",
    "content": "\nid: env-vars\ntitle: Environment variables\n\nEnvironment variables\nBoth the ToolJet server and client requires some environment variables to start running.\nToolJet server\nToolJet host ( required )\n| variable     | description                                                     |\n| ------------ | --------------------------------------------------------------- |\n| TOOLJET_HOST | the public URL of ToolJet client ( eg: https://app.tooljet.com )  |\nLockbox configuration ( required )\nToolJet server uses lockbox to encrypt datasource credentials. You should set the environment variable `LOCKBOX_MASTER_KEY` with a 32 byte hexadecimal string.\nApplication Secret ( required )\nToolJet server uses a secure 64 byte hexadecimal string to encrypt session cookies. You should set the environment variable `SECRET_KEY_BASE`.\n:::tip\nIf you have `openssl` installed, you can run the following commands to generate the value for `LOCKBOX_MASTER_KEY` and `SECRET_KEY_BASE`.\nFor `LOCKBOX_MASTER_KEY` use `openssl rand -hex 32`\nFor `SECRET_KEY_BASE` use `openssl rand -hex 64`\n:::\nDatabase configuration ( required )\nToolJet server uses PostgreSQL as the database.\n| variable | description            |\n| -------- | ---------------------- |\n| PG_HOST  | postgres database host |\n| PG_DB    | name of the database   |\n| PG_USER  | username               |\n| PG_PASS  | password               |\n| PG_PORT  | port                   |\n:::tip\nIf you are using docker-compose setup, you can set PG_HOST as `postgres` which will be DNS resolved by docker\n:::\nDisable database and extension creation (optional)\nToolJet by default tries to create database based on `PG_DB` variable set and additionally my try to create postgres extensions. This requires the postgres user to have CREATEDB permission. If this cannot be granted you can disable this behaviour by setting `PG_DB_OWNER` as `false` and will have to manually run them.\nCheck for updates ( optional )\nSelf-hosted version of ToolJet pings our server to fetch the latest product updates every 24 hours. You can disable this by setting the value of `CHECK_FOR_UPDATES` environment variable to `0`. This feature is enabled by default.\nComment feature enable ( optional )\nUse this environment variable to enable/disable the feature that allows you to add comments on the canvas.\n| variable | value            |\n| -------- | ---------------------- |\n| COMMENT_FEATURE_ENABLE  | `true` or `false` |\nMultiplayer feature enable ( optional )\nUse this environment variable to enable/disable the feature that allows users to collaboratively work on the canvas.\n| variable | value            |\n| -------- | ---------------------- |\n| ENABLE_MULTIPLAYER_EDITING  | `true` or `false` |\nMarketplace feature enable ( optional )\nUse this environment variable to enable/disable the feature that allows users to use the marketplace.\n| variable | value            |\n| -------- | ---------------------- |\n| ENABLE_MARKETPLACE_FEATURE  | `true` or `false` |\nEnable ToolJet Database ( optional )\n| variable           | description                                  |\n| ------------------ | -------------------------------------------- |\n| ENABLE_TOOLJET_DB  | `true` or `false`                            |\n| TOOLJET_DB         | Default value is `tooljet_db`                |\n| TOOLJET_DB_HOST    | database host                                |\n| TOOLJET_DB_USER    | database username                            |\n| TOOLJET_DB_PASS    | database password                            |\n| TOOLJET_DB_PORT    | database port                                |\n| PGRST_JWT_SECRET   | JWT token client provided for authentication |\n| PGRST_HOST         | postgrest database host                      |\nUse `ENABLE_TOOLJET_DB` to enable/disable the feature that allows users to work with inbuilt data store to build apps with. Inorder to set it up, follow the instructions here.\n:::tip\nWhen this feature is enabled, the database name provided for `TOOLJET_DB` will be utilized to create a new database during server boot process in all of our production deploy setups.\nIncase you want to trigger it manually, use the command `npm run db:create` on ToolJet server.\n:::\nServer Host ( optional )\nYou can specify a different server for backend if it is hosted on another server.\n| variable | value            |\n| -------- | ---------------------- |\n| SERVER_HOST  | Configure a hostname for the server as a proxy pass. If no value is set, it defaults to `server`. |\nDisable Multi-Workspace ( optional )\nIf you want to disable Multi-Workspace feature, set the environment variable `DISABLE_MULTI_WORKSPACE` to `true`.\nHide account setup link\nIf you want to hide account setup link from admin in manage user page, set the environment variable `HIDE_ACCOUNT_SETUP_LINK` to `true`, please make sure you have configured SMTP to receive welcome mail for users. Valid only if `DISABLE_MULTI_WORKSPACE` is not `true`.\nDisabling signups ( optional )\nSign up is enabled only if Multi-Workspace is enabled. If you want to restrict the signups and allow new users only by invitations, set the environment variable `DISABLE_SIGNUPS` to `true`.\n:::tip\nYou will still be able to see the signup page but won't be able to successfully submit the form.\n:::\nServe client as a server end-point ( optional )\nBy default, the `SERVE_CLIENT` variable will be unset and the server will serve the client at its `/` end-point.\nYou can set `SERVE_CLIENT` to `false` to disable this behaviour.\nServe client at subpath\nIf ToolJet is hosted on a domain subpath, you can set the environment variable `SUB_PATH` to support it.\nPlease note the subpath is to be set with trailing `/` and is applicable only when the server is serving the frontend client.\nSMTP configuration ( optional )\nToolJet uses SMTP services to send emails ( Eg: invitation email when you add new users to your workspace ).\n| variable           | description                               |\n| ------------------ | ----------------------------------------- |\n| DEFAULT_FROM_EMAIL | from email for the email fired by ToolJet |\n| SMTP_USERNAME      | username                                  |\n| SMTP_PASSWORD      | password                                  |\n| SMTP_DOMAIN        | domain or host                            |\n| SMTP_PORT          | port                                      |\nSlack configuration ( optional )\nIf your ToolJet installation requires Slack as a data source, you need to create a Slack app and set the following environment variables:\n| variable            | description                    |\n| ------------------- | ------------------------------ |\n| SLACK_CLIENT_ID     | client id of the slack app     |\n| SLACK_CLIENT_SECRET | client secret of the slack app |\nGoogle OAuth ( optional )\nIf your ToolJet installation needs access to data sources such as Google sheets, you need to create OAuth credentials from Google Cloud Console.\n| variable             | description   |\n| -------------------- | ------------- |\n| GOOGLE_CLIENT_ID     | client id     |\n| GOOGLE_CLIENT_SECRET | client secret |\nGoogle maps configuration ( optional )\nIf your ToolJet installation requires `Maps` widget, you need to create an API key for Google Maps API.\n| variable            | description         |\n| ------------------- | ------------------- |\n| GOOGLE_MAPS_API_KEY | Google maps API key |\nAPM VENDOR ( optional )\nSpecify application monitoring vendor. Currently supported values - `sentry`.\n| variable   | description                               |\n| ---------- | ----------------------------------------- |\n| APM_VENDOR | Application performance monitoring vendor |\nSENTRY DNS ( optional )\n| variable   | description                               |\n| ---------- | ----------------------------------------- |\n| SENTRY_DNS |  DSN tells a Sentry SDK where to send events so the events are associated with the correct project  |\nSENTRY DEBUG ( optional )\nPrints logs for sentry.\n| variable   | description                               |\n| ---------- | ----------------------------------------- |\n| SENTRY_DEBUG | `true` or `false`. Default value is `false` |\nServer URL ( optional)\nThis is used to set up for CSP headers and put trace info to be used with APM vendors.\n| variable           | description                                                 |\n| ------------------ | ----------------------------------------------------------- |\n| TOOLJET_SERVER_URL | the URL of ToolJet server ( eg: https://server.tooljet.com ) |\nRELEASE VERSION ( optional)\nOnce set any APM provider that supports segregation with releases will track it.\nNODE_EXTRA_CA_CERTS (optional)\nTooljet needs to be configured for custom CA certificate to be able to trust and establish connection over https. This requires you to configure an additional env var `NODE_EXTRA_CA_CERTS` to have absolute path to your CA certificates. This file named `cert.pem` needs to be in PEM format and can have more than one certificates.\n| variable            | description                                                       |\n| ------------------  | ----------------------------------------------------------------- |\n| NODE_EXTRA_CA_CERTS | absolute path to certificate PEM file ( eg: /ToolJet/ca/cert.pem ) |\nDisable telemetry ( optional )\nPings our server to update the total user count every 24 hours. You can disable this by setting the value of `DISABLE_TOOLJET_TELEMETRY` environment variable to `true`. This feature is enabled by default.\nPassword Retry Limit (Optional)\nThe maximum retry limit of login password for a user is by default set to 5, account will be locked after 5 unsuccessful login attempts. Use the variables mentioned below to control this behavior:\n| variable                              | description                                                   |\n| ------------------------------------- | -----------------------------------------------------------   |\n| DISABLE_PASSWORD_RETRY_LIMIT          | (true/false) To disable the password retry check, if value is `true` then no limits for password retry |\n| PASSWORD_RETRY_LIMIT                  | To change the default password retry limit (5) |\nSSO Configurations (Optional)\nConfigurations for instance level SSO. Valid only if `DISABLE_MULTI_WORKSPACE` is not `true`.\n| variable                              | description                                                   |\n| ------------------------------------- | -----------------------------------------------------------   |\n| SSO_GOOGLE_OAUTH2_CLIENT_ID           | Google OAuth client id |\n| SSO_GIT_OAUTH2_CLIENT_ID              | GitHub OAuth client id |\n| SSO_GIT_OAUTH2_CLIENT_SECRET          | GitHub OAuth client secret |\n| SSO_GIT_OAUTH2_HOST                   | GitHub OAuth host name if GitHub is self hosted |\n| SSO_ACCEPTED_DOMAINS                  | comma separated email domains that supports SSO authentication |\n| SSO_DISABLE_SIGNUPS                   | Disable user sign up if authenticated user does not exist |\nToolJet client\nServer URL ( optionally required )\nThis is required when client is built separately.\n| variable           | description                                                 |\n| ------------------ | ----------------------------------------------------------- |\n| TOOLJET_SERVER_URL | the URL of ToolJet server ( eg: https://server.tooljet.com ) |\nServer Port ( optional)\nThis could be used to for local development, it will set the server url like so: `http://localhost:<TOOLJET_SERVER_PORT>`\n| variable            | description                             |\n|---------------------|-----------------------------------------|\n| TOOLJET_SERVER_PORT | the port of ToolJet server ( eg: 3000 ) |\nAsset path ( optionally required )\nThis is required when the assets for the client are to be loaded from elsewhere (eg: CDN).\nThis can be an absolute path, or relative to main HTML file.\n| variable           | description                                                   |\n| ------------------ | -----------------------------------------------------------   |\n| ASSET_PATH         | the asset path for the website ( eg: https://app.tooljet.com/) |\nServe client as a server end-point ( optional )\nBy default the client build will be done to be served with ToolJet server.\nIf you intend to use client separately then can set `SERVE_CLIENT` to `false`.\nPostgREST server (Optional)\n| variable           | description                                     |\n| ------------------ | ----------------------------------------------- |\n| PGRST_JWT_SECRET   | JWT token client provided for authentication    |\n| PGRST_DB_URI       | database connection string for tooljet database |\n| PGRST_LOG_LEVEL    | `info`                                          |\nIf you intent to make changes in the above configuration. Please refer PostgREST configuration docs.\n:::tip\nIf you have openssl installed, you can run the following command `openssl rand -hex 32` to generate the value for `PGRST_JWT_SECRET`.\nIf this parameter is not specified then PostgREST refuses authentication requests.\n:::\n:::info\nPlease make sure that DB_URI is given in the format `postgrest://[USERNAME]:[PASSWORD]@[HOST]:[PORT]/[DATABASE]`",
    "tag": "tooljet"
  },
  {
    "title": "Try ToolJet with Docker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/setup/docker-local.md",
    "content": "\nid: docker-local\ntitle: Try ToolJet locally\n\nTry ToolJet with Docker\n:::info\nThis doc is not for setting up the development environment, it is only for trying out ToolJet locally using Docker. Check out Contributing Guide.\n:::\nYou can run the command below to have ToolJet up and running right away.\n`bash\ndocker run \\\n  --name tooljet \\\n  --restart unless-stopped \\\n  -p 3000:3000 \\\n  -v tooljet_data:/var/lib/postgresql/13/main \\\n  tooljet/try:latest`\nSetup information\n\nRuns the ToolJet server on the port 3000 on your machine.\nContainer has postgres already configured within. All the data will be available in the docker volume `tooljet_data`.\nDefault user credentials to login (email: `dev@tooljet.io`, password: `password`).\nYou can make use of `--env` or `--env-file` flag to test against various env configurables mentioned here.\n",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on DigitalOcean",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/setup/digitalocean.md",
    "content": "\nid: digitalocean\ntitle: DigitalOcean\n\nDeploying ToolJet on DigitalOcean\nNow you can quickly deploy ToolJet using the Deploy to DigitalOcean button.\nDeploying\nFollow the steps below to deploy ToolJet on DigitalOcean:\n\nClick on the button below to start one click deployment\n\n\n\n  [![Deploy to DigitalOcean](https://www.deploytodo.com/do-btn-blue.svg)](https://cloud.digitalocean.com/apps/new?repo=https://github.com/ToolJet/ToolJet/tree/main)\n\n  \n\nA new tab will open up, sign-in to your DigitalOCean account. Once signed-in, the Create App page will open up and Resources will be already selected. Click on Next button.\n\n\n\nNow, on Environment Variables page you can add new variables or edit the existing ones. Check the environment variables here.\n\n\n\nOn the next page, you can change the App name, Project, and the Region.\n\n\n\nOn the last page, you'll be asked to Review all the app details such that we entered before such as Resources, Environment Variables, Region, and there will also be Billing section at the end. Review all the details and click the Create Resource button.\n\n\n\nOnce you click the Create Resource button, the build will begin. Once the build is complete, you'll see the resource and a URL next to it. Click on the URL to open the deployed ToolJet.\n\n:::tip\nToolJet server and client can be deployed as standalone applications. If you do not want to deploy the client on DigitalOcean, modify `package.json` accordingly. We have a guide on deploying ToolJet client using services such as Firebase.\n:::\nDeploying Tooljet Database\nIf you intend to use this feature, you'd have to set up and deploy PostgREST server which helps querying ToolJet Database.\nYou can learn more about this feature here.\nFollow the steps below to deploy ToolJet Database on DigitalOcean:\n\n\nIf you are using dev database within ToolJet deployment, upgrade it to managed database. You could also add a separate database, if you intent use a differenet database, please refer the environment variables for additional env variables. \n\n\nCreate a new app for PostgREST server. You can opt for docker hub to deploy PostgREST image of version `10.1.x`.\n\n\n\n\nUpdate the environment variables for PostgREST and expose the HTTP port `3000`.\n\n\n\nAdd your newly created PostgREST app to the trusted sources of your managed or separate database.\n",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet using Docker Compose",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/setup/docker.md",
    "content": "\nid: docker\ntitle: Docker\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nDeploying ToolJet using Docker Compose\nFollow the steps below to deploy ToolJet on a server using Docker Compose. ToolJet requires a PostgreSQL database to store applications definitions, (encrypted) credentials for datasources and user authentication data.\n:::info\nIf you rather want to try out ToolJet on your local machine with Docker, you can follow the steps here.\n:::\nInstalling Docker and Docker Compose\nInstall docker and docker-compose on the server.\n   - Docs for Docker Installation\n   - Docs for Docker Compose Installation\nDeployment options\nThere are two options to deploy ToolJet using Docker Compose:\n1.   Using an external PostgreSQL database. This setup is recommended if you want to use a managed PostgreSQL service such as AWS RDS or Google Cloud SQL.\n2.   Using in-built PostgreSQL database. This setup uses the official Docker image of PostgreSQL.\nConfused about which setup to select? Feel free to ask the community via Slack: https://tooljet.com/slack.\n:::info\nWe recommend using the managed PostgreSQL service on production for ease of administration, security, and management (backups, monitoring, etc).\nIf you'd want to run postgres with persistent volume rather, curl for the alternate docker compose file shared in the next step.\n:::\n\n\n\n\nSetup a PostgreSQL database and make sure that the database is accessible.\n\n\nDownload our production docker-compose file into the server.\n  `bash\n  curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/docker/docker-compose.yaml`\n\n\nCreate `.env` file in the current directory (where the docker-compose.yaml file is downloaded):\n\n\n`bash\n  curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/docker/.env.example\n  mv .env.example .env`\nSet up environment variables in `.env` file as explained in environment variables reference\n`TOOLJET_HOST` environment variable can either be the public ipv4 address of your server or a custom domain that you want to use.\nExamples:\n  `TOOLJET_HOST=http://12.34.56.78` or\n  `TOOLJET_HOST=https://yourdomain.com` or\n  `TOOLJET_HOST=https://tooljet.yourdomain.com`\n:::info\n  Please make sure that `TOOLJET_HOST` starts with either `http://` or `https://`\n  :::\n:::info\n  If there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates.\n  :::\n\nOnce you've populated the `.env` file, run\n\n:::note\n  Kindly uncomment PostgREST service within the docker-compose.yaml if you intend to use tooljet database.\n  :::\n`bash\n  docker-compose up -d`\nto start all the required services.\n:::info\n  If you're running a linux server, `docker` might need sudo permissions. In that case you can either run:\n  `sudo docker-compose up -d`\n  or\n  setup docker to run without root privileges by following the instructions written here https://docs.docker.com/engine/install/linux-postinstall/\n  :::\n\nIf you've set a custom domain for `TOOLJET_HOST`, add a `A record` entry in your DNS settings to point to the IP address of the server.\n\n\n\n\n\nDownload our production docker-compose file into the server.\n  `bash\n  curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/docker/docker-compose-db.yaml\n  mv docker-compose-db.yaml docker-compose.yaml\n  mkdir postgres_data`\n\n\nCreate `.env` file in the current directory (where the docker-compose.yaml file is downloaded):\n\n\n`bash\n  curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/docker/.env.example\n  mv .env.example .env`\nSet up environment variables in `.env` file as explained in environment variables reference\n`TOOLJET_HOST` environment variable can either be the public ipv4 address of your server or a custom domain that you want to use.\nExamples:\n  `TOOLJET_HOST=http://12.34.56.78` or\n  `TOOLJET_HOST=https://yourdomain.com` or\n  `TOOLJET_HOST=https://tooljet.yourdomain.com`\n:::info\n  Please make sure that `TOOLJET_HOST` starts with either `http://` or `https://`\n  :::\n:::info\n  If there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates.\n  :::\n\nOnce you've populated the `.env` file, run\n\n:::note\n  Kindly uncomment PostgREST service within the docker-compose.yaml if you intend to use tooljet database.\n  :::\n`bash\n  docker-compose up -d`\nto start all the required services.\n:::info\n  If you're running on a linux server, `docker` might need sudo permissions. In that case you can either run:\n  `sudo docker-compose up -d`\n  OR\n  Setup docker to run without root privileges by following the instructions written here https://docs.docker.com/engine/install/linux-postinstall/\n  :::\n\nIf you've set a custom domain for `TOOLJET_HOST`, add a `A record` entry in your DNS settings to point to the IP address of the server.\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet client",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/setup/client.md",
    "content": "\nid: client\ntitle: Deploying ToolJet client\n\nDeploying ToolJet client\nToolJet client is a standalone application and can be deployed on static website hosting services such as Netlify, Firebase, S3/Cloudfront, etc.\nYou can build standalone client with the below command:\n`bash\nSERVE_CLIENT=false npm run build`\nDeploying ToolJet client on Firebase\n:::tip\nYou should set the environment variable `TOOLJET_SERVER_URL` ( URL of the server ) while building the frontend and also set `SERVE_CLIENT` to `false`` for standalone client build.\nFor example: `SERVE_CLIENT=false TOOLJET_SERVER_URL=https://server.tooljet.com npm run build && firebase deploy`\n:::\n\nInitialize firebase project\n   `bash\n    firebase init`\n   Select Firebase Hosting and set build as the static file directory\nDeploy client to Firebase\n   `bash\n    firebase deploy`\n\nDeploying ToolJet client with Google Cloud Storage\n:::tip\nYou should set the environment variable `TOOLJET_SERVER_URL` ( URL of the server ) while building the frontend.\nFor example: `SERVE_CLIENT=false TOOLJET_SERVER_URL=https://server.tooljet.io npm run build`\n:::\nUsing Load balancer\nTooljet client can be hosted from Cloud Storage bucket just like hosting any other static website.\nFollow the instructions from google documentation here.\nSummarising the steps below:\n1. Create a bucket and upload files within the build folder such that the `index.html` is at the bucket root.\n\n\nEdit permissions for the bucket to assign New principal as `allUsers` with role as `Storage Object Viewer` and permit for public access for the bucket.\n\n\nClick on Edit website configuration from the buckets browser and specify the main page as `index.html`\n\n\nFollow the instructions on creating a load balancer for hosting a static website.\n\n\nOptionally, create Cloud CDN to use with the backend bucket assigned to the load balancer.\n\n\nAfter the load balancer is created there will be an IP assigned to it. Try hitting it to check the website is being loaded.\n\n\nUse the load balancer IP as the static IP for the A record of your domain.\n\n\nUsing Google App Engine\n\n\nUpload the build folder onto a bucket\n\n\nUpload `app.yaml` file onto bucket with the following config\n\n\n```yaml\n   runtime: python27\n   api_version: 1\n   threadsafe: true\nhandlers:\n   - url: /\n     static_files: build/index.html\n     upload: build/index.html\n\n\nurl: /(.)\n     static_files: build/\\1\n     upload: build/(.)\n   ```\n\n\nActivate cloud shell on your browser and create build folder\n   `bash\n   mkdir tooljet-assets`\n\n\nCopy the uploaded files onto an assets folder which is to be served\n   `bash\n   gsutil rsync -r gs://your-bucket-name/path-to-assets ./tooljet-assets`\n\n\nDeploy static assets to be served\n   ```bash\n   cd tooljet-assets && gcloud app deploy\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Examples",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/how-to/import-external-lib-py.md",
    "content": "\nid: import-external-libraries-using-runpy\ntitle: Import external libraries using RunPy\n\nToolJet allows you to utilize python packages in your app by importing them using the RunPy query. \nIn this how-to guide, we will import a few packages and use it in the application.\n:::caution Unsupported modules\nThe modules that are not currently supported in Pyodide are those that have C or C++ extensions that rely on system libraries. These modules cannot be used in Pyodide because it runs in a web browser, which does not have access to the underlying system libraries that the C or C++ extensions rely on. Additionally, Pyodide uses a version of Python that has been compiled to WebAssembly, which does not support the same system calls as a regular version of Python. Therefore, any module that requires access to system libraries or system calls will not work in Pyodide.\n:::\n\n\nCreate a new application and then create a new RunPy query from the query panel.\n    \n\n\n\n\nLet's write some code for importing packages. We will first import the micropip which is a package installer for Python and then we will install the `Pandas` and `NumPy` using micropip. Run the query to install the packages.\n    `python\n    import micropip\n    await micropip.install('pandas')\n    await micropip.install('numpy')`\n\n\n\n\n\n:::tip\nEnable the Run this query on application load? option to make the packages available throughout the application.\n:::\nExamples\nArray of random numbers of using NumPy\n\n\nLet's create a RunPy query that will use random module from the NumPy package and the query will generate array of random numbers. \n    ```python\n    from numpy import random\nx = random.binomial(n=10, p=0.5, size=10)\nprint(x)\n```\n\n\n\n\n\n:::info\nYou can check the output on the browser's console.\n:::\nParse CSV data\n\n\nLet's create a RunPy query that will parse the data from the csv file. In this query we will use `StringIO`, `csv`, and `Pandas` module.\n    ```python\n    from io import StringIO\n    import csv\n    import pandas as pd\nscsv = components.filepicker1.file[0].content\nf = StringIO(scsv)\nreader = csv.reader(f, delimiter=',')\ndf = pd.DataFrame(reader)\nprint(df.info())\nprint(df)\n```\n\n\n\n\n\nAdd a file picker component on the canvas and set a event handler for On file loaded event to Run Query that we created for parsing the data.\n    \n\n\n\n\nFinally, let's load a csv file on the file picker and check the output by the RunPy query on the browser console.\n    \n\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Upload and download files on AWS S3 bucket",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/how-to/upload-files-aws.md",
    "content": "\nid: upload-files-aws\ntitle: Upload files on AWS S3 bucket\n\nUpload and download files on AWS S3 bucket\nThis guide will help you in quickly building a basic UI for uploading or downloading files from AWS S3 buckets.\nBefore building the UI, check out the docs for AWS S3 data source to learn about setting up AWS S3 and adding the data source. \nOnce you have successfully added the AWS data source, build a basic UI using the following widgets:\n- Dropdown: For selecting a bucket in S3 storage.\n- Table: For listing all the objects inside the selected bucket in dropdown.\n- Text Input: For getting a path for the file that is to be uploaded.\n- File picker: For uploading the file.\n- Button: This will be used to fire the upload query.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/ui.png)\n\n\nQueries\nWe'll create the following queries:\n\ngetBuckets\nlistObjects\nuploadToS3\ndownload\n\ngetBuckets\nThis query will fetch the list of all the buckets in your S3. Just create a new query, select AWS S3 data source, and choose List buckets operation. Name the query getBuckets and click Save.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/getBuckets.png)\n\n\nNow, let's edit the properties of dropdown widget.\n\nLabel: Set the label as Bucket.\nOption values: Set option values as `{{queries.getBuckets.data.Buckets.map(bucket => bucket['Name'])}}`. We're mapping the data returned by the query as the returned data is array of abjects.\nOption label: Set option values as `{{queries.getBuckets.data.Buckets.map(bucket => bucket['Name'])}}`. This will display the same option label as option values.\n\nYou can later add an event handler for running the listObject query whenever an option is selected from the dropdown.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/dropdown.png)\n\n\nlistObjects\nThis query will list all the objects inside the selected Bucket in dropdown. Select List objects in a bucket operation, enter `{{components.dropdown1.value}}` in the Bucket field - this will dynamically get the field value from the selected option in dropdown.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/listObjects.png)\n\n\nEdit the properties of table widget:\n- Table data: `{{queries.listObjects.data['Contents']}}`\n- Add Columns:\n  - Key: Set the Column Name to `Key` and Key to `Key`\n  - Last Modified: Set the Column Name to `Last Modified` and Key to `LastModified`\n  - Size: Set the Column Name to `Size` and Key to `Size`\n- Add a Action button: Set button text to Copy signed URL, Add a handler to this button for On Click event and Action to Copy to clipboard, in the text field enter `{{queries.download.data.url}}` - this will get the download url from the download query that we will create next.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/table.png)\n\n\ndownload\nCreate a new query and select Signed URL for download operation. In the Bucket field, enter `{{components.dropdown1.value}}` and in Key enter `{{components.table1.selectedRow.Key}}`.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/download.png)\n\n\nEdit the properties of the table, add a Event handler for running the `download` query for `Row clicked` event. This will generate a signed url for download every time a row is clicked on the table.\nuploadToS3\nCreate a new query, select the Upload object operation. Enter the following values in their respective fields:\n- Bucket: `{{components.dropdown1.value}}`\n- Key:  {{ components.textinput1.value + '/' +components.filepicker1.file[0].name}}`- **Content type**:`{{components.filepicker1.file[0].type}}`- **Upload data**:`{{components.filepicker1.file[0].base64Data}}`- **Encoding**:`base64`\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/uploadToS3.png)\n\n\nConfigure the file picker:\nClick on the widget handle to edit the file picker properties: \n\nChange the Accept file types to `{{\"application/pdf\"}}` for the picker to accept only pdf files or `{{\"image/*\"}}` for the picker to accept only image files . In the screenshot below, we have set the accepted file type property to `{{\"application/pdf\"}}` so it will allow to select only pdf files:\n\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/result-filepicker.png)\n\n\n\n\nChange the Max file count to `{{1}}` as we are only going to upload 1 file at a time.\n\n\nSelect a pdf file and hold it in the file picker.\n\n\n:::info\n File types must be valid MIME type according to input element specification or a valid file extension.\nTo accept any/all file type(s), set `Accept file types` to an empty value.\n:::\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/config-filepicker.png)\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Change text color in columns by accessing `cellValue` and `rowData` in the table",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/how-to/access-cellvalue-rowdata.md",
    "content": "\nid: access-cellvalue-rowdata\ntitle: Change text color in columns of the table\n\nChange text color in columns by accessing `cellValue` and `rowData` in the table\nIn this how-to guide, we will build an app that will use a sample RestAPI to display the data in the table, and then we will change the text color of the columns according to the condition.\n\nLet's start by creating a new application and then adding a table widget into the canvas.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/newapp.gif)\n\n\n\nNow go to the Query Panel at the bottom of the app editor and click on the `+` button.\nChoose RestAPI data source\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/restapi.png)\n\n\n\nNow we will use a sample RestAPI endpoint -  I have used the API provided by coinstats.app, API-URL:\nhttps://api.coinstats.app/public/v1/coins?skip=0&limit=100&currency=USD\nChoose `GET` method, enter the request URL (API URL in previous step), name the query - I have named it `crypto`, and then Create the query\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/apiendpoint.png)\n\n\n\nNow hit the Run button next to the query name to run the query.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/runquery.png)\n\n\n\nOnce you run the query, you can check the data returned by the query in the Inspector on the left sidebar.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/inspectord.png)\n\n\n\nNow that we have got the data, we will display it on the table. To do this, click on the widget handle of the table to open its properties in the right sidebar. \nIn the Table Data field, enter `{{queries.crypto.data.coins}}` - as you can see in the screenshot of the inspector the data is inside the `coins` array. You'll see the data in the Preview(green box) below the field.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/data.png)\n\n\n\nLet's add the columns that we want to display on the table. Go to the Columns section, Add columns, set their Names, and set key for each column. I have added 5 columns: Rank, Name, Symbol, Price, and Market Cap.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/columns.png)\n\n\n\nOnce you've added the columns, you'll get the table like this:\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/table.png)\n\n\nUsing cellValue to change column text color\nNow that we have our data on the table, we will change the color of the text in the Price and Market Cap columns.\n\nEdit table properties, go to Columns, and click on the Price Column to open its properties.\nFor Price column, we want to change color of those cells who have value which is greater than 1000 to red else to green if it is less than 1000. So to do this, we will set a condition in Text Color property of this column: `{{cellValue >= 1000 ? 'red' : 'green'}}`\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/price.png)\n\n\n\nSimilarly, we will do for Market Cap column. We want to change the text color of those cells who have value which is greater than 60000000000 to red else to green if it is less than 60000000000. so the condition will be `{{cellValue >= 60000000000 ? 'red' : 'green'}}`\nNow the text color of cells in the columns will be updated.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/cellvalue.png)\n\n\n:::info\nYou can also use Hex Color Code instead of mentioning color in plane text.\n:::\nUsing rowData to change column text color\n\nTo change the color of the text using `rowData` variable it is required to mention the column name whose cell value we will be comparing in the condition. Let's take a look by changing the text color of Symbol column. \nWe will add a condition to look in the row data and if the row has column called `name` which has value `Solana` then it should change the color to red else the color should be green.\nEdit the properties of the Symbol column, set the Text Color field value to `{{rowData.name ===  'Solana' ? 'red' : 'green'}}`.\nYou'll see that in the Symbols column all the values has become green except the one that has Solana in Name column.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/rowData.png)",
    "tag": "tooljet"
  },
  {
    "title": "Upload files using GCS",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/how-to/upload-files-gcs.md",
    "content": "\nid: upload-files-gcs\ntitle: Upload files using GCS\n\nUpload files using GCS\nIn this guide, we are going to create an interface to upload PDFs to Google Cloud Storage.\nBefore adding the new data source we will need to have a private key for our GCS bucket and make sure the key has the appropriate rights.\nSetting up Google Cloud Storage data source\n\nGo to the data source manager on the left-sidebar and click on the `+` button.\nAdd a new GCS data source from the  APIs section in modal that pops up.\nEnter the JSON private key for service account and test the connection.\nClick on Save to add the data source.\n\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/adding-account.png)\n\n\nAdding a file picker\n\nDrag and drop the file picker widget on the canvas\nConfigure the file picker:\nChange the Accept file types to `{{\"application/pdf\"}}` for the picker to accept only pdf files. In the screenshot below, we have set the accepted file type property to `{{\"application/pdf\"}}` so it will allow to select only pdf files:\n\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/result-filepicker.png)\n\n\n\n\nChange the Max file count to `{{1}}` as we are only going to upload 1 file at a time.\n\n\nSelect a pdf file and hold it in the file picker.\n\n\n:::info\n File types must be valid MIME type according to input element specification or a valid file extension.\nTo accept any/all file type(s), set `Accept file types` to an empty value.\n:::\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/config-filepicker.png)\n\n\nCreating a query\n\nClick on the `+` button of the query manager at the bottom panel of the editor and select the GCS data source\nSelect Upload file operation and enter the required parameters:\nBucket: `gs://test-1`\nFile Name: `{{components.file1.file[0]['name']}}`\nContent Type: `{{components.file1.file[0]['type']}}`\nUpload data: `{{components.file1.file[0]['base64Data']}}`\nEncoding: `base64`\nClick on Save to create the query\n\nRunning the query\n\nAdd a button that will fire the query to upload the file\nEdit the properties of the button and add a event handler to Run the query on On-Click event.\nClick on Button to fire the query, this will upload the pdf file that you selected earlier through the file picker and will upload it on the GCS.\n\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/final-result.png)",
    "tag": "tooljet"
  },
  {
    "title": "use-form-component.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/how-to/use-form-component.md",
    "content": "\nid: use-form-component\ntitle: Use form component\n\nIn this how-to guide, we will be building a simple application that will leverage the form component for adding a record into the database. For this guide, we will be using Google Sheet datasource to read and write data.\n\n\n\n\n\nLet's connect to the datasource i.e. Google Sheets and give the `Read and Write` permission.\n    \n\n\n- Now, drag a table on the canvas and add the form component next to it.\n\n\n\n\n\nCurrently, the table component is populated with the sample data that it has by default. Let's create a new query from the query panel and choose the Google Sheet datasource. \n    \n\n\n\n\nThe query will read the data from the database and we will use the returned data to populate the table. Go to the table property and in the table data value enter {{queries.queryname.data}} where queryname is the name of the query that we created in previous step.\n    \n\n\n\n\nlet's go to the form and add the components inside it required for adding a record into the database.\n    \n\n\n\n\nSince our database record has five fields Id, Title, Price, Category and Image we will add the components in the form for the same. The form already comes with a Submit button so we don't have to add that. For Id, Title, and Image we will use text-input, for Price we will use number-input and for category we can use dropdown components.\n    \n\n\n\n\nBefore editing the form properties, let's make a few changes in the components that we have added inside it. First edit the property of the number input and set the default value, maximum and minimum value, and then edit the dropdown component and set the option values and option labels.\n    \n\n\n\n\nNow, we can edit the properties of the form component. Go to its properties, in Button To Submit Form select the button1 that was already there on the form. Go to event handler, and for On submit event we will run the query that will get the data from the form and will store into the database.\n    \n\n\n\n\nLet's create a query that will get the data from the form and add a record in the sheet. Create a new google sheeet query and from the operation choose Append data to a spreadsheet\n`js\n    [ \n        {\n            \"id\":\"{{components.form1.data.textinput1.value}}\",\n            \"title\":\"{{components.form1.data.textinput2.value}}\",\n            \"price\":\"{{components.form1.data.numberinput1.value}}\",\n            \"category\":\"{{components.form1.data.dropdown1.value}}\",\n            \"image\":\"{{components.form1.data.textinput4.value}}\"\n        } \n    ]`\n\n\nOnce done, save the query and add it to the Form's event handler.\n\n\nNow, this application can be used to load the data from the Google Sheet and the form can be used to append more records to the sheet.\n\n\n:::tip\n- Make sure to enable Run query on page load? option of the read query to populate the table everytime the app is loaded\n- You can also add a event handler on the append query to run the read query when append is successful, this will update the table data when the append is done\n- Learn more about the connecting Google sheet datasource and the CRUD operations available here.",
    "tag": "tooljet"
  },
  {
    "title": "REST API authentication using OAuth 2.0",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/how-to/oauth2-authorization.md",
    "content": "\nid: oauth2-authorization\ntitle: REST API authentication using OAuth 2.0\n\nREST API authentication using OAuth 2.0\nToolJet\u2019s REST API data source supports OAuth 2.0 as the authentication type. In this guide, we\u2019ll learn how to use Google OAuth2 API to delegate authorization and authentication for your ToolJet Application.\nBefore setting up the REST API data source in ToolJet, we need to configure the Google Cloud Platform to gather the API keys required for the authorization access.\nSetting up Google Cloud Platform\nGoogle Cloud Platform provides access to more than 350 APIs and Services that can allow us to access data from our Google account and its services. Let's create an OAuth application that can be given permission to use our Google profile data such as Name and Profile picture.\n\nSign in to your Google Cloud account, and from the console create a New Project.\nNavigate to the APIs and Services, and then open the OAuth consent screen section from the left sidebar.\nEnter the Application details and select the appropriate scopes for your application. We will select the profile and the email scopes. \nOnce you have created the OAuth consent screen, Create new credentials for the OAuth client ID from the Credentials section in the left sidebar.\nSelect the application type, enter the application name, and then add the following URIs under Authorised Redirect URIs:\n`https://app.tooljet.com/oauth2/authorize` (if you\u2019re using ToolJet cloud)\n`http://localhost:8082/oauth2/authorize` (if you\u2019re using ToolJet locally)\n\n\nNow save and then you\u2019ll get the Client ID and Client secret for your application.\n\n\nConfiguring ToolJet Application with Google's OAuth 2.0 API\nLet's follow the steps to authorize ToolJet to access your Google profile data:\n\nSelect add data source from the left sidebar, and choose REST API from the dialog window.\n\n:::info\nYou can rename the data source by clicking on its default name `REST API`\n:::\n\nIn the URL field, enter the base URL `https://www.googleapis.com/oauth2/v1/userinfo`; the base URL specifies the network address of the API service.\nSelect authentication type as `OAuth 2.0`\nKeep the default values for Grant Type, Add Access Token To, and Header Prefix i.e. `Authorization Code`, `Request Header`, and `Bearer` respectively.\nEnter Access Token URL: `https://oauth2.googleapis.com/token`; this token allows users to verify their identity, and in return, receive a unique access token.\nEnter the Client ID and Client Secret that we generated from the Google Console.\nIn the Scope field, enter `https://www.googleapis.com/auth/userinfo.profile`; Scope is a mechanism in OAuth 2.0 to limit an application's access to a user's account. Check the scopes available for Google OAuth2 API here.\nEnter Authorization URL: `https://accounts.google.com/o/oauth2/v2/auth`; the Authorization URL requests authorization from the user and redirects to retrieve an authorization code from identity server.\n\nCreate three Custom Authentication Parameters:\n| params      | description |\n| ----------- | ----------- |\n| response_type | code ( `code` refers to the Authorization Code) |\n| client_id | Client ID  |\n| redirect_uri | `http://localhost:8082/oauth2/authorize` if using ToolJet locally or enter this `https://app.tooljet.com/oauth2/authorize` if using ToolJet Cloud.  |\n\n\nKeep the default selection for Client Authentication and Save the data source.\n\n\n\nCreate the query\nLet\u2019s create a query to make a `GET` request to the URL, it will pop a new window and ask the user to authenticate against the API.\n\nAdd a new query and select the REST API datasource from the dropdown\nIn the Method dropdown select `GET` and in advance tab toggle `run query on page load?`\nSave and Run the query.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Access a user's location using RunJS query (Geolocation API)",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/how-to/access-users-location.md",
    "content": "\nid: access-users-location\ntitle: Access a user's location\n\nAccess a user's location using RunJS query (Geolocation API)\nIn this how-to guide, we will build a ToolJet application that will utilize the JavaScript Geolocation API to get the user's location. The Geolocation API provides access to geographical location data associated with a user's device. This can be determined using GPS, WIFI, IP Geolocation and so on.\n:::info\nTo protect the user's privacy, Geolocation API requests permission to locate the device. If the user grants permission, you will gain access to location data such as latitude, longitude, altitude, and speed. \n:::\n\n\nLet's start by creating a new application\n\n\n\n\n\nIn the app editor, go to the query panel at the bottom and create a RunJS query by selecting Run JavaScript Code as the datasource\n\n\n\n\n\nYou can use the following javascript code that makes use of geolocation api to get the location\n```js\nfunction getCoordinates() {\nreturn new Promise(function(resolve, reject) {\n    navigator.geolocation.getCurrentPosition(resolve, reject);\n});\n}\nasync function getAddress() {\n// notice, no then(), cause await would block and \n// wait for the resolved result\nconst position = await getCoordinates(); \nlet latitude = position.coords.latitude;\nlet longitude = position.coords.longitude;\nreturn [latitude, longitude];\n}\nreturn await getAddress()\n```\n\n\nNow, go to the Advanced tab and enable the `Run query on page load?` option. Enabling this option will run this javascript query every time the app is opened by the user and the query will return the location\n\n\nSave the query and hit the fire button\n\n\nAs soon as you hit the fire button, the browser will prompt you to allow the permission to share the location access to ToolJet app. You'll need to allow it to return the location data\n\n\n\n\n\nNow, to check the data returned by the query go to the Inspector on the left sidebar. Expand the queries -> `runjs1`(query name) -> and then expand the data. You'll find the coordinates\n\n\n\n\n\nNext, we can use these coordinates returned by the query on the map component to show the location. Drop a map component on the canvas and edit its properties. In the Initial location property, enter\n`js\n{{ {\"lat\": queries.runjs1.data[0], \"lng\": queries.runjs1.data[1]} }}`\n\n\n\n\n\nFinally, you'll see the location updated on the map component\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Enable/Disable a component using current user's property",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/how-to/access-users-groups.md",
    "content": "\nid: access-currentuser\ntitle: Enable/Disable a component using current user's property\n\nEnable/Disable a component using current user's property\nLet's take look at the exposed variables of the current user property:\n\nemail : The value can accessed using `{{globals.currentUser.email}}`\nfirstName : The value can accessed using `{{globals.currentUser.firstName}}`\nlastName : The value can accessed using `{{globals.currentUser.lastName}}`\nlastName : The value can accessed using `{{globals.currentUser.lastName}}`\ngroups : By default, the admin will be in the two groups `all_users` and `admin`, and any user who is not admin will always be in the `all_users` group by default. Since the groups is an array you\u2019ll have to provide the index ([0], [1], and so on) to return the group name. The value can be accessed using `{{globals.currentUser.groups[1]}}`.\n\n\n\n\nExample: Disable a button if a user is not admin\n\n\nClick on the Button handle to open its properties, on the Styles tab go to the Disable property. \n\n\n\n\n\nSet a condition on the Disable field so that if the the user who is using the app does not have admin value in the first index of groups array return true. The condition can be:\n`javascript\n{{globals.currentUser.groups[1] !== \"admin\" ? true : false}}`\n\n\n\n\n\nNow, when you'll release the app, if the user is not is not admin the button will be disabled. \n\n\n\n\n\n:::info\nIn this how-to we have used the Groups property of the Current User. You can use any of the exposed variables mentioned above according to your use.",
    "tag": "tooljet"
  },
  {
    "title": "loading-image-pdf-from-db.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/how-to/loading-image-pdf-from-db.md",
    "content": "\nid: loading-image-pdf-from-db\ntitle: Loading image/PDF from base64 string\n\nIn this how-to guide we will see how we can load an image or PDF file using the base64 string available on the database. In this how-to, we have used the postgres database which already has the base64 strings for the image or the PDF files available.\n\n\nLet's drag a filepicker component onto the canvas, and pick one image and one pdf file\n    \n\n\n\n\nNow, create a query for inserting an image from the filepicker. As you can see in the screenshot below, we are using the exposed variable of the filepicker component to retrieve the base64 data of the uploaded files.\n    \n\n\n\n\nCreate another query for returning the data from the database and we will use this base64 data returned in this query to display on the image and pdf components.\n    \n\n\n\n\nDrag the image and a PDF component on the canvas. Edit the property of the PDF component and in the file URL enter:\n    `js\n    {{'data:image/png;base64,' + queries.get.data[7].pdf}}`\n    Similarly for the image component:\n    `js\n    {{'data:image/jpeg;base64,' + queries.get.data[7].image}}`\n\n\n\n\n\n:::info\nYou can also use transformations in the query response and concat `data:image/jpeg;base64,` to the base64 data.",
    "tag": "tooljet"
  },
  {
    "title": "run-query-at-specified-intervals.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/how-to/run-query-at-specified-intervals.md",
    "content": "\nid: run-query-at-specified-intervals\ntitle: Run query at specified intervals\n\nIn this how-to guide, we will learn how to make a query trigger at the specific intervals.\n\nLet's go to the ToolJet dashboard and create a new application\nOnce the app builder opens up, drag a table component to canvas\n\nNow, create a new REST API query from the query panel at the bottom of the app builder. We will be using the data from the mock REST API and then load the data on the table. Let's create a REST API, choose `GET` method from the dropdown, enter the endpoint `(https://jsonplaceholder.typicode.com/posts)`, name the query `post` and then save and run it\n    \n\n\n- Go to the Table properties and add connect the query data to table by adding value to table data property which is `{{queries.post.data}}`\n\n\n\n\n\nNow, we will create a RunJS query that will first set a variable called `interval` which will include the value returned by the `setInterval()` method that calls a function `countdown` at specified intervals. The countdown function has the code to trigger the `post` query that we created in the previous step.\n`js\nactions.setVariable('interval',setInterval(countdown, 5000));\nfunction countdown(){\n    queries.post.run()\n}`\n- Go to the Advanced tab of the query, enable `Run query on page load?` this will trigger this RunJS query when the app is loaded. Name the query as `set` and Save it. Note that you will have to save the query and not `Save and Run` because doing it will trigger the query and you won't be able to stop the query unless you reload the page or go back to dashboard.\n\n\n\n- To prevent the query from triggering indefinitely, we will create another RunJS query that will make use of `clearInterval()` method. In this method we will get the value from the variable that we created in `set` query. Save this query as `clear`.\n`js\nclearInterval(variables.interval)`\n- Finally, let's add a button on to the canvas and add the event handler to the button to run the `clear` query.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Layout",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/how-to/use-inspector.md",
    "content": "\nid: use-inspector\ntitle: Use Inspector\n\nIn this how-to guide, we will take a look at Inspector of the app-builder and see how it can be helpful in building applications.\nThe Inspector can be used to inspect the data of the queries, properties and values of the components that are there on the canvas, ToolJet's global variables and the variables that have been set by the user.\n\n\n\nLayout\nLet's take a look at the layout of the Inspector panel:\n\n\nOn the top-right, we have a Pin button to pin and unpin the inspector panel. This button can be useful when you want to see the live changes on inspector while triggering a query or performing some event/action on any component.\n    \n\n\n\n\nAt the bottom right, you can click and hold to resize the inspector.\n    \n\n\n\n\nOn hovering an item on the inspector, the copy path and copy value buttons will appear on the right of the item. Copying the path and pasting it onto the component property or query parameter will always get the dynamic value but using `Copy value` uption will copy the current value of the item and will be static when pasted in a component property or query parameter.\n    \n\n\n\n\nSections\nThe Inspector panel has the following 4 main sections:\n\nqueries\ncomponents\nglobals\nvariables\n\nqueries\nThe queries section can be used to inspect the query details but the data of the query will only be available if query has been run/triggered.\n:::tip\nYou can click on the Preview button of the button on the query manager to check the response(data) of the query without triggering it.\n:::\nExample\n\nLet's create a new query using a mock REST API endpoint (`https://fakestoreapi.com/products`).\n\nNow go to the Inspector and expand the queries section, you'll see an entry inside queries with the query name that we created in the previous step i.e. `restapi1` but if you notice the `data` and `rawData` object is empty i.e. 0 entry. The reason is the data won't show up on the inspector unless query is run.\n    \n\n\n\n\nLet's pin the inspector and then trigger the query from the query manager. You'll see that as soon as the query is triggered the `rawData` and `data` object in the query has 20 entries and the query has more properties like `request`, `response`, and `responseHeaders` data.\n    \n\n\n\n\ncomponents\ncomponents section can be used to inspect the properties and values of the components that are added onto the canvas.\n\n\n\nglobals\nglobals section includes the following sub-sections:\n\ncurrentUser: The currentUser object contains information about the currently logged-in user such as email, firstName, and lastName.\ngroups: The groups array contains the name of the groups the currently logged-in user is added to. Note: The `all_users` is default groups for everyone.\ntheme: The theme object contains the name of the currently active theme.\nurlparam: The urlparams contains the information about the url parameters of the application.\n\n:::info\nAll the global variables can be accessed anywhere inside the ToolJet applications. Here's an example use-case of using these variables.\n:::\n\n\n\nvariables\nvariables section include all the variables set by the user in the application. These variables can be set from the event handlers from the components or from the queries. The variables will be in the key-value pair and can be accessed throughout the application.\n:::info\n\nSetting variables from the event handler\nSetting variables from the Run JavaScript code\n",
    "tag": "tooljet"
  },
  {
    "title": "Run `Actions` from RunJS query",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/how-to/run-action-from-runjs.md",
    "content": "\nid: run-actions-from-runjs\ntitle: Run Actions from RunJS query\n\nRun `Actions` from RunJS query\nNow you can trigger all the `actions` available in ToolJet from within the `RunJS` query. This guide includes the syntax for each action along with the example.\nRun Query\nSyntax:\n`js\nqueries.queryName.run()`\nor\n`js\nawait actions.runQuery('queryName')`\nExample: In the screenshot below, we are triggering the two different queries `customers` and `getData` using the two different syntax available for `Run Query` action.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/runquery.png)\n\n\nSet Variable\nSyntax:\n`javascript\nactions.setVariable(variableName, variableValue)`\nExample: In the screenshot below, we are setting the two variables `test` and `test2`. `test` variable includes a numerical value so we haven't wrapped it inside the quotes but the variable `test2` is a string so we have wrapped it in quotes.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/setvariable.png)\n\n\nUnset Variable\nSyntax:\n`javascript\nactions.unSetVariable(variableName)`\nExample: In the screenshot below, we are unsetting the variable `test2` that we created in the previous step.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/unsetvariable.png)\n\n\nLogout\nSyntax:\n`javascript\nactions.logout()`\nExample: Triggering `actions.logout()` will log out the current logged in user from the ToolJet and will redirect to sign in page.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/logout.png)\n\n\nShow Modal\nSyntax:\n`javascript\nactions.showModal('modalName')`\nExample: In the screenshot below, there is a modal on the canvas (renamed it to `formModal` from `modal1`) and we are using RunJS query to show the modal.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/showmodal.png)\n\n\nClose Modal\nSyntax:\n`javascript\nactions.closeModal('modalName')`\nExample: In the screenshot below, we have used RunJS query to close the modal that we showed up in previous step.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/closemodal.png)\n\n\nSet Local Storage\nSyntax:\n`javascript\nactions.setLocalStorage('key','value')`\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/setlocalstorage.png)\n\n\nCopy to Clipboard\nSyntax:\n`javascript\nactions.copyToClipboard('contentToCopy')`\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/copytoclipboard.png)\n\n\nGenerate File\nSyntax:\n`javascript\nactions.generateFile('fileName', 'fileType', 'data')`\nExample: `fileName` is the name that you want to give the file(string), `fileType` can be `csv` or `text`, and `data` is the data that you want to store in the file.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/generatefile.png)\n\n\nGo to App\nSyntax:\n`javascript\nactions.goToApp('slug',queryparams)`\n\n`slug` can be found in URL of the released app after the `application/`, or in the `Share` modal\n`queryparams` can be provided like this `[{\"key\":\"value\"}, {\"key2\":\"value2\"}]`\n\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/gotoapp1.png)\n\n\nShow Alert\nSyntax:\n`javascript\nactions.showAlert(alert type , message ) // alert types are info, success, warning, and danger`\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/showalert.png)\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Bulk update multiple rows in table",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/how-to/bulk-update-multiple-rows-in-table.md",
    "content": "\nid: bulk-update-multiple-rows\ntitle: Bulk update multiple rows in table\n\nBulk update multiple rows in table\nCurrently, the datasources in ToolJet have operation for bulk update(GUI mode) but that only works for changes made in the single row. We will soon be adding a new operation for bulk updating the multiple rows but for now we can bulk update multiple rows by creating a Custom JS query. \nIn this guide, We have assumed that you have successfully connected the data source. For this guide, we will be using the PostgreSQL data source as an example database, currently, this workaround can be used only for PostgreSQL and MySQL.\n1. Create a query to get the data from the database\nLet's create the query that will be getting the data from the database:\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/postgres1.png)\n\n\n2. Display the data on the table\n\nDrag a Table widget on the canvas and click on its handle to open the properties on the left sidebar\nEdit the Table data field value and enter `{{queries.postgresql1.data}}`\n\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/showData.png)\n\n\n3. Make the columns editable\n\nGo to the Columns, Add or edit columns section and enter the Column Name that you want to display on the table and the Key name. Key is the name of the column in your database.\nEnable the toggle for Make editable for the columns that you want to be editable.\n\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/columns.png)\n\n\n4. Enable bulk update options for table widget\n\nGo to the Options section and enable the Show update buttons. Enabling this will add two buttons - Save Changes and Discard Changes at the bottom of the table, only when any cell in the table is edited.\nYou can also enable highlight selected row.(Optional)\n\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/options.png)\n\n\n5. Create a Custom JS query\nWe will create a new Custom JS query(runjs1) that will generate SQL query for updating multiple rows.\n```js\nconst uniqueIdentifier = \"id\"\nconst cols = Object.values(components.table1.changeSet).map((col, index) => {\n  return {\n    col: Object.keys(col),\n    [uniqueIdentifier]: Object.values(components.table1.dataUpdates)[index][uniqueIdentifier],\n    values: Object.values(col),\n  };\n});\nconst sql = cols.map((column) => {\n  const { col, id, values } = column;\n  const cols = col.map((col, index) => `${col} = '${values[index]}'`);\n  return `UPDATE users SET ${cols.join(\", \")} WHERE id = '${id}';`;\n});\nreturn sql\n```\n:::info\nHere the Unique identifier is id, this is the column name that is used to identify the row in the database.\nUpdate the Unique identifier if you are using a different column name.\n:::\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/runjs1.png)\n\n\n6. Create an Update query\nLet's create a new PostgreSQL query and name it `update`. In SQL mode, enter `{{queries.runjs1.data.join(' ')}}` and Save it.\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/update.png)\n\n\n7. Creating a flow for queries\n\nClick on the handle of the Table widget to open its properties\nGo to the Events, and add a handler\nSelect Bulk Update in Events, Run Query in Actions, and then select the runjs1 query in Query. Now whenever a user will edit the table and hit the Save Changes button runjs1 will run.\n\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/event.png)\n\n\n\nNow, go to the Advanced tab of runjs1 and add a handler to run update query for Query Success Event. Now whenever the runjs1 query will be run - the update operation will be performed on the database.\n\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/success.png)",
    "tag": "tooljet"
  },
  {
    "title": "Making Axios HTTP requests",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/how-to/use-axios.md",
    "content": "\nid: use-axios-in-runjs\ntitle: Use Axios in RunJS\n\nToolJet allows you to utilize the three libraries - Moment.js, Lodash, and Axios. In this guide, we will see a few examples on how to use Axios library using RunJS query.\nAxios is a promise-based HTTP library that lets developers make requests to either their own or a third-party server to fetch data. It offers different ways of making requests such as `GET`, `POST`, `PUT/PATCH`, and `DELETE`.\nMaking Axios HTTP requests\nIn this section, you will make `GET` and `PUT` requests. You will be using a free \u201cfake\u201d API: JSONPlaceholder.\nMaking a GET request\nCreate a RunJS query and copy the code below:\n```javascript\nvar url = \"https://jsonplaceholder.typicode.com/users/1\";\nvar data = (await axios.get(url)).data;\nreturn data\n```\nIn the code snippet, a variable url is declared which is assigned the URL of the  JSON API. Then another variable is decalared which sends a GET request to the JSON API. Save the query and hit Preview to view the data returned by the API.\n\n\n\nMaking a POST request\nA post request is a little different because you will be passing some data in the request to the server. In the request, you will be creating a user and passing in details for that user. The code snippet for the request will look something like this:\n```javascript\nvar url = \"https://jsonplaceholder.typicode.com/users\";\nvar data = axios.post(url,{\n  id: 11,\n  name: \"Shubhendra\",\n  username: \"camelcaseguy\",\n  email: \"shubhendra@tooljet.com\",})\nreturn data\n```\nThe Axios POST request uses an object after the request URL to define the properties you want to create for your user. Once the operation has been completed, there will be a response from the server. In the screenshot below, you can see the that it return Status: 201 which means the request has been fulfilled and resulted in a new resource being created.\n\n\n\n:::tip\nCheck out the tutorial on Build GitHub star history tracker that utlizes the axios library.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "s3-custom-endpoint.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/how-to/s3-custom-endpoint.md",
    "content": "\nid: s3-custom-endpoints\ntitle: Use custom endpoint for s3 hosts\n\nIn this how-to guide, we will see how we can connect to different S3 compatible object storages using the custom endpoint. In this guide, we are using Minio since it is an S3-compatible object storage. \n\nGo to the ToolJet dashboard, and create a new application\nOn the left-sidebar, go to the Sources and add a new AWS S3 datasource\n\nNow the connection modal will pop-up\n    \n\n\n- To get the Credentials which is Access Key and Secret Key, you'll need to go to the Minio console to generate the keys\n- Enable the Custom Endpoint toggle switch, and enter the custom host URL i.e where your Minio server API is exposed \n\n",
    "tag": "tooljet"
  },
  {
    "title": "Contributor Covenant Code of Conduct  ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/contributing-guide/code-of-conduct.md",
    "content": "\nid: code-of-conduct\ntitle: Contributor Code of Conduct\n\nContributor Covenant Code of Conduct\nOur Pledge\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\nOur Standards\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or\n  advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others' private information, such as a physical or electronic\n  address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a\n  professional setting\n\nOur Responsibilities\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\nScope\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\nEnforcement\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at hello@tooljet.com . All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\nAttribution\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\nFor answers to common questions about this code of conduct, see",
    "tag": "tooljet"
  },
  {
    "title": "Setting up",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/contributing-guide/testing.md",
    "content": "\nid: testing\ntitle: Testing\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\nSetting up\n\nNavigate to the `cypress-tests` directory and enter the following command:\n  `bash\n  npm install`\n\nRunning Tests\nHeaded mode\n\nTo run cypress in headed mode, run the following command:\n  `bash\n  npm run cy:open`\nIn headed mode, the user will be able to choose the test specs from the test runner:\n\n\n\n\n\n\nHeadless mode\n\n\nTo run cypress in headless mode, run the following command:\n  `bash\n npm run cy:run`\n\n\nFor running specific spec in headless mode, run for specific spec \n  `bash\n  npm run cy:run --  --spec \"cypress/e2e/dashboard/multi-workspace/manageSSO.cy.js`\n\n\n\n\n\n:::caution\n  If some test specs need the environment variables, the user can pass them similar to the following command:\n  `bash\n  npm run cy:open -- --env='{\"pg_host\":\"localhost\",\"pg_user\":\"postgres\", \"pg_password\":\"postgres\"}'`\n  or the user can add env-vars in the cypress.config.js file\n  :::\n:::info\nCheck all the Cypress commands here",
    "tag": "tooljet"
  },
  {
    "title": "Slack Code of Conduct",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/contributing-guide/slackcoc.md",
    "content": "\nid: slackcoc\ntitle: Slack Code of Conduct\n\nSlack Code of Conduct\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nIntroduction\n\n\nDiversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand.\n\n\nOur goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic.\n\n\nThis code and related procedures apply to unacceptable behavior occurring in all community venues, including behavior outside the scope of community activities \u2014 online and in-person\u2014 as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members.\n\n\nExpected behavior\n\nBe welcoming.\nBe kind.\nLook out for each other.\n\nUnacceptable Behavior\n\nConduct or speech which might be considered sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory or offensive in nature.\nDo not use unwelcome, suggestive, derogatory or inappropriate nicknames or terms.\nDo not show disrespect towards others. (Jokes, innuendo, dismissive attitudes.)\nIntimidation or harassment (online or in-person).\nDisrespect towards differences of opinion.\nInappropriate attention or contact. Be aware of how your actions affect others. If it makes someone uncomfortable, stop.\nNot understanding the differences between constructive criticism and disparagement.\nSustained disruptions.\nViolence, threats of violence or violent language.\n\nWhere does the Code of Conduct apply?\nThis Code of Conduct applies to all spaces managed by ToolJet. This includes:\n\nConferences (including social events and peripheral activities)\nUnconferences and sprints\nMeetups, including their discussion boards\nWorkshops\nPresentation materials used in talks or sessions\nSlack\nGitHub\nTwitter hashtag and mentions\nAny forums created by the ToolJet which the community uses for communication.\n\nThe Code of Conduct does not exclusively apply to slack or events on an official agenda. For example, if after a scheduled social event you go to a bar with a group of fellow participants, and someone harasses you there, we would still treat that as a CoC violation. Similarly, harassment in Twitter direct messages related to ToolJet can still be covered under this Code of Conduct.\nIn addition, violations of this code outside our spaces may affect a person\u2019s ability to participate in them.\nEnforcement\n\nUnderstand that speech and actions have consequences, and unacceptable behavior will not be tolerated.\nIf you are the subject of, or witness to any violations of this Code of Conduct, please contact us via email at hello@tooljet.com or dm @navaneeth on slack.\nIf violations occur, organizers will take any action they deem appropriate for the infraction, up to and including expulsion.\n\n:::info\nPortions derived from the Django Code of Conduct, The Rust Code of Conduct and The Ada Initiative under a Creative Commons Attribution-ShareAlike license.\n:::\n\nEtiquettes to follow\n1. Be nice to everyone\n2. Check off your resolved questions\nIf you have received a useful reply to your question, please drop a \u2705 reaction or a reply for affirmation.\n3. Try not to repost question\nIf you have asked a question and have not got a response in 24hrs, please review your question for clarity and revise it. If you still feel you haven't received adequate response, feel free to ping @navaneeth.\n4. Post in public\nPlease don't direct message any individual member of ToolJet community without their explicit permission, independent of reason. Your question might be helpful for other community members.\n5. Don't spam tags\nToolJet's community of volunteer is very active and helpful, generally avoid tagging members unless it is urgent.\n6. Use threads for discussion",
    "tag": "tooljet"
  },
  {
    "title": "Adding Translations",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/contributing-guide/l10n.md",
    "content": "\nid: l10n\ntitle: Localization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and  general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\nAdding Translations\n\n\nFor adding the translations of your language in ToolJet, you'll need to create a new languagecode.json file which will include all the translations for the keywords in your language, and then list the language in the languages.json file for the language to be listed in the dashboard of the ToolJet.\n\n\nGo to the frontend directory which is at the root of ToolJet, then go to the assets and inside assets, you'll find the translations directory. You have created a new json file with the language code as the file name. The language code should follow ISO 639-1 Code.\n`\\frontend\n|--\\assets\n|--\\--\\translations\n|--\\--\\--\\languages.json\n|--\\--\\--\\en.json`\n\n\n\n\n\nLet's localize ToolJet in the French language. Create a new json file inside the translations directory and name it fr.json. `fr` is the language code for French.\n\n\nAfter creating the new file, open the en.json file and copy all the contents of the file to the newly created fr.json.\n\n\n\n\n\nOnce copied, you can now start adding the translations for the keywords in the french language.\n\n\nAfter completing the translation, all you need to do is list the language in languages.json file. You'll need to add an object with three key-value pairs. lang - the name of the language that you added, code - the language code, and the nativeLang - name of language in the native.\n`js\n{\n    \"languageList\":\n    [\n        { \"lang\": \"English\", \"code\": \"en\", \"nativeLang\": \"English\" },\n        { \"lang\": \"French\", \"code\": \"fr\", \"nativeLang\": \"Fran\u00e7ais\" }\n    ]\n}`\n\n\n\n:::note\nFeel free to reach us on Slack for any help related to Localization.",
    "tag": "tooljet"
  },
  {
    "title": "Introduction",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/contributing-guide/setup/architecture.md",
    "content": "\nid: architecture\ntitle: Architecture\n\nIntroduction\nToolJet has two main components: ToolJet Server and ToolJet Client.\n1. ToolJet Server\nToolJet server is a Node.js API application. Server is responsible for authentication, authorization, persisting application definitions, running queries, storing data source credentials securely and more. \nDependencies:\n- PostgreSQL - ToolJet server persists data to a postgres database. \n- Email service (SMTP/Sendgrid/Mailgun/etc) - Required to send user invitations and password reset emails. \n- PostgREST (Optional) - Standalone web server that converts PostgreSQL database into queryable RESTful APIs for Tooljet Database.\n2. ToolJet Client\nToolJet client is a ReactJS application. Client is responsible for visually editing the applications, building & editing queries, rendering applications, executing events and their trigger, etc.\nRequirements",
    "tag": "tooljet"
  },
  {
    "title": "Ubuntu",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/contributing-guide/setup/ubuntu.md",
    "content": "\nid: ubuntu\ntitle: Ubuntu\n\nUbuntu\nFollow these steps to setup and run ToolJet on Ubuntu. Open terminal and run the commands below.\nSetting up\n\n\nSet up the environment\n1.1 Install Node.js\n```bash\ncurl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\nRequired for compilation of Plugins (https://stackoverflow.com/a/44182915/19432410)\napt-get -y install build-essential gcc g++ make python3-dev\nEnsure you have the correct version of npm, or it will cause an error about fsevents.\nnpm i -g npm@8.11.0\n```\n1.2 Install Postgres\n`bash\nsudo apt install postgresql postgresql-contrib\nsudo apt-get install libpq-dev`\n1.3 Install PostgREST (optional)\n:::info \nRequired only if Tooljet Database is being used. \nPlease use PostgREST version 10.1.1.x\n:::\nPlease follow the installation PostgREST guide\n\n\nSet up environment variables\nCreate a `.env` file by copying `.env.example`. More information on the variables that can be set is given in the environment variables reference\n`bash\ncp .env.example .env`\n\n\nPopulate the keys in the env file\n   :::info\n   `SECRET_KEY_BASE` requires a 64 byte key. (If you have `openssl` installed, run `openssl rand -hex 64` to create a 64 byte secure   random key)\n\n\n`LOCKBOX_MASTER_KEY` requires a 32 byte key. (Run `openssl rand -hex 32` to create a 32 byte secure random key)\n   :::\nExample:\n   `bash\n   cat .env\n   TOOLJET_HOST=http://localhost:8082\n   LOCKBOX_MASTER_KEY=1d291a926ddfd221205a23adb4cc1db66cb9fcaf28d97c8c1950e3538e3b9281\n   SECRET_KEY_BASE=4229d5774cfe7f60e75d6b3bf3a1dbb054a696b6d21b6d5de7b73291899797a222265e12c0a8e8d844f83ebacdf9a67ec42584edf1c2b23e1e7813f8a3339041`\n\n\nInstall and build dependencies\n    `bash\n    npm install\n    npm install --prefix server\n    npm install --prefix frontend\n    npm run build:plugins`\n\n\nSet up database\n    `bash\n    npm run --prefix server db:reset`\n\n\nRun plugins compilation in watch mode\n    `bash\n    cd ./plugins && npm start`\n\n\nRun the server\n    `bash\n    cd ./server && npm run start:dev`\n\n\nRun the client\n    `bash\n    cd ./frontend && npm start`\nThe client will start running on the port 8082, you can access the client by visiting:  https://localhost:8082\n\n\nCreate login credentials\nVisiting https://localhost:8082 should redirect you to the login page, click on the signup link and enter your email. The emails sent by the server in development environment are captured and are opened in your default browser. Click the invitation link in the email preview to setup the account.\n\n\nRunning tests\nTest config requires the presence of `.env.test` file at the root of the project.\nTo run the unit tests\n`bash\nnpm run --prefix server test`\nTo run e2e tests\n`bash\nnpm run --prefix server test:e2e`\nTo run a specific unit test\n```bash\nnpm run --prefix server test ",
    "tag": "tooljet"
  },
  {
    "title": "Mac OS",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/contributing-guide/setup/macos.md",
    "content": "\nid: macos \ntitle: Mac OS\n\nMac OS\nFollow these steps to setup and run ToolJet on macOS for development purposes. Open terminal and run the commands below. We recommend reading our guide on architecture of ToolJet before proceeding.\nSetting up\n\n\nSet up the environment\n1.1 Install Homebrew\n`bash\n/bin/bash -c \"(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"`\n1.2 Install Node.js ( version: v14.17.3 ) and npm (version: v7.20.0)\n`bash\nbrew install nvm\nexport NVM_DIR=~/.nvm\nsource $(brew --prefix nvm)/nvm.sh\nnvm install 14.17.3\nnvm use 14.17.3\nnpm install -g npm@7.20.0`\n1.3 Install Postgres\n:::tip\nToolJet uses a postgres database as the persistent storage for storing data related to users and apps. We do not plan to support other databases such as MySQL.\n:::\n`bash\nbrew install postgresql`\n1.4 Install PostgREST(optional)\n:::info \nRequired only if Tooljet Database is being used. \nPlease use PostgREST version 10.1.1.x\n:::       \n`bash\nbrew install postgrest --version 10.1.1.20221215`\n1.5 Clone the repository\n`bash\ngit clone https://github.com/tooljet/tooljet.git`\n\n\nSet up environment variables\nCreate a `.env` file by copying `.env.example`. More information on the variables that can be set is given in the environment variables reference\n`bash\ncp .env.example .env`\n\n\nPopulate the keys in the env file\n   :::info\n   `SECRET_KEY_BASE` requires a 64 byte key. (If you have `openssl` installed, run `openssl rand -hex 64` to create a 64 byte secure   random key)\n\n\n`LOCKBOX_MASTER_KEY` requires a 32 byte key. (Run `openssl rand -hex 32` to create a 32 byte secure random key)\n   :::\nExample:\n   `bash\n   cat .env\n   TOOLJET_HOST=http://localhost:8082\n   LOCKBOX_MASTER_KEY=1d291a926ddfd221205a23adb4cc1db66cb9fcaf28d97c8c1950e3538e3b9281\n   SECRET_KEY_BASE=4229d5774cfe7f60e75d6b3bf3a1dbb054a696b6d21b6d5de7b73291899797a222265e12c0a8e8d844f83ebacdf9a67ec42584edf1c2b23e1e7813f8a3339041\n   NODE_ENV=development\n   # DATABASE CONFIG\n   PG_HOST=postgres\n   PG_PORT=5432\n   PG_USER=postgres\n   PG_PASS=postgres\n   PG_DB=tooljet_development\n   ORM_LOGGING=all`\n\n\nInstall and build dependencies\n    `bash\n    npm install\n    npm install --prefix server\n    npm install --prefix frontend\n    npm run build:plugins`\n\n\nSet up database\n    `bash\n    npm run --prefix server db:reset`\n\n\nRun plugins compilation in watch mode\n    `bash\n    cd ./plugins && npm start`\n\n\nRun the server\n    `bash\n    cd ./server && npm run start:dev`\n\n\nRun the client\n    `bash\n    cd ./frontend && npm start`\nThe client will start on the port 8082, you can access the client by visiting:  https://localhost:8082\n\n\nCreate login credentials\nVisiting https://localhost:8082 should redirect you to the login page, click on the signup link and enter your email. The emails sent by the server in development environment are captured and are opened in your default browser. Click the invitation link in the email preview to setup the account.\n\n\nRunning tests\nTest config requires the presence of `.env.test` file at the root of the project.\nTo run the unit tests\n`bash\nnpm run --prefix server test`\nTo run e2e tests\n`bash\nnpm run --prefix server test:e2e`\nTo run a specific unit test\n```bash\nnpm run --prefix server test ",
    "tag": "tooljet"
  },
  {
    "title": "Docker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/contributing-guide/setup/docker.md",
    "content": "\nid: docker\ntitle: Docker\n\nDocker\nDocker compose is the easiest way to setup ToolJet server and client locally.\n:::info\nIf you rather want to try out ToolJet locally with docker, you can follow the steps here.\n:::\nPrerequisites\nMake sure you have the latest version of `docker` and `docker-compose` installed.\nOfficial docker installation guide\nOfficial docker-compose installation guide\nWe recommend:\n```bash\ndocker --version\nDocker version 19.03.12, build 48a66213fe\ndocker-compose --version\ndocker-compose version 1.26.2, build eefe0d31\n```\nSetting up\n:::tip\nIf you are setting up on a Windows machine, we advise you to setup Docker desktop with WSL2.\nPlease find more information here.\n:::\n\n\nClone the repository\n   `bash\n   git clone https://github.com/tooljet/tooljet.git`\n\n\nCreate a `.env` file by copying `.env.example`. More information on the variables that can be set is given in the environment variables reference\n`bash\n   cp .env.example .env\n   cp .env.example .env.test`\n\n\nPopulate the keys in the `.env` and `.env.test` file\n   :::info\n   `SECRET_KEY_BASE` requires a 64 byte key. (If you have `openssl` installed, run `openssl rand -hex 64` to create a 64 byte secure random key)\n\n\n`LOCKBOX_MASTER_KEY` requires a 32 byte key. (Run `openssl rand -hex 32` to create a 32 byte secure random key)\n   :::\n   :::tip \n   If you are setting up on a Windows machine. Please make sure that .env file line endings to be LF as it will be CRLF by default unless configured for Windows machine.\n   :::\nExample:\n`bash\n    cat .env\n    TOOLJET_HOST=http://localhost:8082\n    LOCKBOX_MASTER_KEY=13c9b8364ae71f714774c82498ba328813069e48d80029bb29f49d0ada5a8e40\n    SECRET_KEY_BASE=ea85064ed42ad02cfc022e66d8bccf452e3fa1142421cbd7a13592d91a2cbb866d6001060b73a98a65be57e65524357d445efae00a218461088a706decd62dcb\n    NODE_ENV=development\n    # DATABASE CONFIG\n    PG_HOST=postgres\n    PG_PORT=5432\n    PG_USER=postgres\n    PG_PASS=postgres\n    PG_DB=tooljet_development\n    ORM_LOGGING=all`\n`bash\n    cat .env.test\n    TOOLJET_HOST=http://localhost:8082\n    LOCKBOX_MASTER_KEY=13c9b8364ae71f714774c82498ba328813069e48d80029bb29f49d0ada5a8e40\n    SECRET_KEY_BASE=ea85064ed42ad02cfc022e66d8bccf452e3fa1142421cbd7a13592d91a2cbb866d6001060b73a98a65be57e65524357d445efae00a218461088a706decd62dcb\n    NODE_ENV=test\n    # DATABASE CONFIG\n    PG_HOST=postgres\n    PG_PORT=5432\n    PG_USER=postgres\n    PG_PASS=postgres\n    PG_DB=tooljet_test\n    ORM_LOGGING=error`\n\nBuild docker images\n\n`bash\n   docker-compose build\n   docker-compose run --rm  plugins npm run build:plugins`\n\nRun ToolJet\n\n`bash\n   docker-compose up`\n   ToolJet should now be served locally at `http://localhost:8082`.\n\nTo shut down the containers,\n   `bash\n   docker-compose stop`\n\nMaking changes to the codebase\nIf you make any changes to the codebase/pull the latest changes from upstream, the tooljet server container would hot reload the application without you doing anything.\nCaveat:\n\n\nIf the changes include database migrations or new npm package additions in the package.json, you would need to restart the ToolJet server container by running `docker-compose restart server`.\n\n\nIf you need to add a new binary or system library to the container itself, you would need to add those dependencies in `docker/server.Dockerfile.dev` and then rebuild the ToolJet server image. You can do that by running `docker-compose build server`. Once that completes you can start everything normally with `docker-compose up`.\n\n\nExample:\nLet's say you need to install the `imagemagick` binary in your ToolJet server's container. You'd then need to make sure that `apt` installs `imagemagick` while building the image. The Dockerfile at `docker/server.Dockerfile.dev` for the server would then look something like this:\n```\nFROM node:14.17.0-buster\nRUN apt update && apt install -y \\\n  build-essential  \\\n  postgresql \\\n  freetds-dev \\\n  imagemagick\nRUN mkdir -p /app\nWORKDIR /app\nCOPY ./server/package.json ./server/package-lock.json ./\nRUN npm install\nENV NODE_ENV=development\nCOPY ./server/ ./\nCOPY ./docker/ ./docker/\nCOPY ./.env ../.env\nRUN [\"chmod\", \"755\", \"entrypoint.sh\"]\n```\nOnce you've updated the Dockerfile, rebuild the image by running `docker-compose build server`. After building the new image, start the services by running `docker-compose up`.\nRunning tests\nTest config picks up config from `.env.test` file at the root of the project.\nRun the following command to create and migrate data for test db\n`bash\ndocker-compose run --rm -e NODE_ENV=test server npm run db:create\ndocker-compose run --rm -e NODE_ENV=test server npm run db:migrate`\nTo run the unit tests\n`bash\ndocker-compose run --rm server npm run --prefix server test`\nTo run e2e tests\n`bash\ndocker-compose run --rm server npm run --prefix server test:e2e`\nTo run a specific unit test\n`bash\ndocker-compose run --rm server npm --prefix server run test <path-to-file>`\nTroubleshooting",
    "tag": "tooljet"
  },
  {
    "title": "ESLint ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/contributing-guide/troubleshooting/eslint.md",
    "content": "\nid: eslint\ntitle: EsLint\n\nESLint\nESLint as a code quality tool is a tool that checks your code for errors and helps you to fix them and enforces a coding style. \nSetup\n\nInstall the ESLint extension for your code editor.\nSet your editor's default formatter to `ESLint`.\n\n:::tip\nFor VSCode users, you can set the formatter to `ESLint` in the settings.json.\n:::\n\nInstall the dependencies.\n    `bash\n    npm install\n    npm install --prefix server\n    npm install --prefix frontend`\nRun the linter.\n    `bash\n    npm run --prefix server lint\n    npm run --prefix frontend lint`\nFix the ESlint errors and warnings.\n    `bash\n    npm run --prefix server format\n    npm run --prefix frontend format`\n\nRequirements\n\nNode version 14.17.3\nnpm version 7.20.0\n",
    "tag": "tooljet"
  },
  {
    "title": "Creating Widgets",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/contributing-guide/tutorials/create-widget.md",
    "content": "\nid: creating-widget\ntitle: Creating Widgets\n\nCreating Widgets\nThese are some of the most useful properties and functions passed to the widget\nproperties\nThe `properties` object will contain the configurable properties of a widget, initially obtained from its definition on `widgetConfig.js`.\nThe values inside `properties` change whenever the developer makes changes to the inspector panel of ToolJet editor.\nexposedVariables\nThe `exposedVariables` object will contain the values of all exposed variables as configured in `widgetConfig.js`.\nsetExposedVariable('exposedVariableName', newValue)\nThis function allows you to update the value of an exposed variable to `newValue`.\nvalidate(value)\nThis function validates the `value` passed based on the validation settings configured on the inspector panel for the widget.\nIt returns an array `[isValid, validationError]`, which represents respectively, whether the `value` passed is valid,",
    "tag": "tooljet"
  },
  {
    "title": "Creating plugins for ToolJet ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/contributing-guide/tutorials/creating-a-plugin.md",
    "content": "\nid: creating-a-plugin\ntitle: Creating Plugins\n\nCreating plugins for ToolJet\nWhat are plugins\nToolJet is built with extensibility in mind. Plugins allows developers to extend the functionalities of ToolJet using JavaScript. Plugins can only be connectors at this moment. For example, the data source connectors such as PostgreSQL, MySQL, Twilio, Stripe, etc are built as plugins. \nIn this guide, we will walk you through building plugins for ToolJet with the help of `tooljet` cli.\n`tooljet` cli is a commandline tool built for building plugins easily. We will build a simple plugin for BigQuery in this guide. \nWhat does a plugin look like?\nAll the plugins live under the `/plugins` directory. The structure of a plugin looks like this:\n`my-awesome-plugin/\n    package.json\n    lib/\n      icon.svg\n      index.ts\n      operations.json\n      manifest.json`\n\nmanifest.json should include information such as the name of plugin, description, etc. \noperations.json should include the metadata of all the operations supported by the plugin.\nindex.ts is the main file. It defines a `QueryService` for the plugin. The `QueryService` handles running of queries, testing connections, caching connections, etc.\nicon.svg is the icon for the plugin.\npackage.json is auto generated by the cli. \n\nGetting Started\n\n\nInstall tooljet-cli:\n  `bash\n  $ npm i -g @tooljet/cli`\n\n\nBootstrap a new plugin using cli\n  `bash\n  $ tooljet plugin create bigquery`\n\n\n`bash\n  creating plugin... done\n  Plugin: bigquery created successfully\n  \u2514\u2500 plugins\n    \u2514\u2500 packages\n        \u2514\u2500 bigquery`\n\n\nAdd the npm package of BigQuery to the plugin dependencies\n  `bash\n  $ tooljet plugin install @google-cloud/bigquery --plugin bigquery`\n\n\nNow the directory for our new plugin should looks something like below: \n\n\n`bash\n  plugins/\n    package.json\n    packages/\n      bigquery/\n        __tests__\n          bigquery.test.js\n        package.json\n        lib/\n          icon.svg\n          index.ts\n          operations.json\n          manifest.json`\n\nAdd data source config paramets to manifest.json\n\nOur BigQuery plugin needs private key of a GCP service account to connect to BigQuery. Let's add `private_key` as a property for the data source. \n```json\n  {\n    \"$schema\": \"https://json-schema.org/\",\n    \"$id\": \"https://tooljet.io/BigQuery.schema.json\",\n    \"title\": \"BigQuery datasource\",\n    \"description\": \"A schema defining BigQuery datasource\",\n    \"type\": \"api\",\n    \"source\": {\n      \"name\": \"BigQuery\",\n      \"kind\": \"bigquery\",\n      \"exposedVariables\": {\n        \"isLoading\": false,\n        \"data\": {},\n        \"rawData\": {}\n      },\n      \"options\": {\n        \"private_key\": { \"encrypted\": true }\n      }\n    },\n    \"defaults\": {\n      \"private_key\": { \"value\": \"\" }\n    },\n    \"properties\": {\n      \"private_key\": {\n        \"label\": \"Private key\",\n        \"key\": \"private_key\",\n        \"type\": \"textarea\",\n        \"description\": \"Enter JSON private key for service account\"\n      }\n    },\n    \"required\": [\"private_key\"]\n  }\n```\n\n\nImport npm package BigQuery to index.ts\n  `javascript\n  const { BigQuery } = require('@google-cloud/bigquery');`\n\n\nEdit index.ts to include the logic for creating a connection.  \n  ```javascript\n  async getConnection(sourceOptions: any, _options?: object): Promise {\n    const privateKey = JSON.parse(sourceOptions['private_key']);\n    const client = new BigQuery({\n      projectId: privateKey['project_id'],\n      credentials: {\n        client_email: privateKey['client_email'],\n        private_key: privateKey['private_key'],\n      },\n    });\nreturn client;\n  }\n  ```\n\n\nEdit index.ts to include the logic for testing connection.  \n  When a new data source is being added to a ToolJet application, the connection can be tested. \n\n\n:::info\n  NOTE: Every data source might not have a way to test connection. If not applicable for your data source, you can disable the test connection feature by adding `\"customTesting\": true,` to the `manifest.json` of your plugin.\n  :::\n\n\nAdd manifest entry for operations   \nIn this example, let's add two operations for our BigQuery plugin. \n- List databases - Lists all the databases.\n- Query database   - Query a specific database.\nWe need to make the entries to `operations.json`. The `operations.json` should look like this now:\n```json\n{\n  \"$schema\": \"https://json-schema.org/\",\n  \"$id\": \"https://tooljet.io/dataqueries/Bigquery.schema.json\",\n  \"title\": \"Dynamodb datasource\",\n  \"description\": \"Operations for BigQuery plugin\",\n  \"type\": \"object\",\n  \"defaults\": {},\n  \"properties\": {\n      \"operation\": {\n          \"label\": \"Operation\",\n          \"key\": \"operation\",\n          \"type\": \"dropdown-component-flip\",\n          \"description\": \"Single select dropdown for operation\",\n          \"list\": [\n              {\n                  \"value\": \"list_datasets\",\n                  \"name\": \"List Datasets\"\n              },\n              {\n                  \"value\": \"query\",\n                  \"name\": \"Query\"\n              }\n          ]\n      },\n      \"query\": {\n          \"query\": {\n              \"label\": \"Query\",\n              \"key\": \"query\",\n              \"type\": \"codehinter\",\n              \"description\": \"\",\n              \"height\": \"150px\"\n          }\n      }\n  }\n}\n```\n\n\nHandle the logic for running queries in `index.ts` \n\n\n`QueryService` receives the metadata of the data source including the credentials and configs for connecting and parameters for the query that was run. In our example, `sourceOptions` will have the `private_key` of BigQuery datasource associated with the query. `queryOptions` will have the configs and parameters for the specific query. For example, `queryOption.operation` will give the id of current operation. \n```javascript\n    export default class BigQueryQueryService implements QueryService {\n      async run(sourceOptions: any, queryOptions: any, _dataSourceId: string): Promise {\n        const operation = queryOptions.operation;\n        const client = await this.getConnection(sourceOptions);\n        let result = {};\n\n\n```    try {\n      switch (operation) {\n        case 'list_datasets':\n            result = await client.getDatasets();\n            break;\n      }\n    } catch (error) {\n      throw new QueryError('Query could not be completed', error.message, {});\n    }\n\n    return {\n      status: 'ok',\n      data: result,\n    };\n  }\n}\n```\n\n\n```\n\n\nSince it is a smiliar step for adding the logic for handling `query` operation, skipping it. \n\n\nTest files are generated by the cli when a plugin is created. You can use `jest` for writing the tests.\n\n\nTests for a specific plugin can be run using the command `tooljet plugin test --bigquery`",
    "tag": "tooljet"
  },
  {
    "title": "Generate file",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/actions/generate-file.md",
    "content": "\nid: generate-file\ntitle: Generate file\n\nGenerate file\nThis action allows you to construct files on the fly and let users download it.\nPresently, the only file type supported is `CSV`.\nOptions\n| Option | Description |\n|--------|-------------|\n| Type   | Type of file to be generated |\n| File name | Name of the file to be generated |\n| Data | Data that will be used to construct the file. Its format will depend on the file type, as specified in the following section |\nData format for CSV\nFor `CSV` file type, the data field should be supplied with an array objects. ToolJet assumes that the keys of each of\nthese objects are the same and that they represent the column headers of the csv file.\nExample:\n`javascript\n{{\n  [\n    { name: 'John', email: 'john@tooljet.com' },\n    { name: 'Sarah', email: 'sarah@tooljet.com' },\n  ]\n}}`\nSupplying the above snippet will generate a csv file which looks like this:\n```csv\nname,email\nJohn,john@tooljet.com\nSarah,sarah@tooljet.com",
    "tag": "tooljet"
  },
  {
    "title": "Available Component Specific Actions",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/actions/control-component.md",
    "content": "\nid: control-component\ntitle: Control component\n\nControl component action invokes the component specific actions. Component specific actions are the actions that are exclusive actions for a particular widget. Component specific actions can be triggered either through the event handlers or from the Run JavaScript code query.\n:::info\nCheck out the live demo of Component specific actions demonstrated in one of our community call.\n:::\nAvailable Component Specific Actions\n| Widget | Component Specific Actions |\n|--------|---------------------------|\n| Button | Click, Set label, Disable, Visibility, Loading |\n| Text   | Set text, Set Visibility |\n| Text Input | Set text, Clear, Set Focus, Set Blur, Disable, Visibility |\n| Text Area | Set text, Clear |\n| Modal     | Show, Close |\n| Table   | Set page, Select row, Deselect Row, Discard changes |\n| Dropdown   | Select option |\n| Multiselect   | Select option, Deselect option, Clear selection |\n| Map   | Set location |\n| Checkbox   | Set checked |\n| Radio button | Select option |\n| Tabs   | Set tab |\n| Color picker   | Set color |\n| File picker    | Clear files |\n:::info\nCurrently, Component specific actions are supported only by the above listed widgets. We are working on bringing component specific actions for the remaining widgets.\n:::\nUsing Component Specific Actions\nSet a value for text input widget using button's event handler\n\n\nDrag a Text Input and a Button widget onto the canvas.\n\n\nGo to the Inspector on the left sidebar to check the exposed variables available for the `textinput1` widget under the `components`. You'll see that the variable `value` is an empty string because the field value of the text input widget is empty right now.\n\n\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/inspector.png)\n\n\n\nNow enter some value in the text input widget and you'll see that the `value` in inspector has been updated.\n\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/updated.png)\n\n\n\nNow, click on the button's widget handler to open up its properties in the right sidebar and then add a event handler for On Click event to trigger Control Component action. Select `textinput1` in component dropdown, `Set text` as Action, and in `Text` field enter the text that you want to update in the field value.\n\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/button.png)\n\n\n\nNow when you'll click on the button you'll see that the field value of the text input widget has been updated with value that you set.\n\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/set.png)\n\n\nClear value of text input widget using JavaScript query\n\nLet's clear the value that we set in the previous section, using Run JavaScript code. Create a new Run JavaScript Code query and call the component and the CSA that component provides.\n\nSyntax:\n`js\nawait components.textinput1.clear()`\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/jsoption.png)\n\n\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/clear.png)\n\n\n\nFinally, hit the save and run query button to fire up the query, and you'll see that the field value of the text input widget has been cleared.\n",
    "tag": "tooljet"
  },
  {
    "title": "Set localStorage",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/actions/set-localstorage.md",
    "content": "\nid: set-localstorage\ntitle: Set localStorage\n\nSet localStorage\nThis action allows you to specify a `key` and its corresponding `value` to be stored in localStorage.\nExample: App that stores a name in localStorage and displays it on reload\n\nAdd an input field, button and a text as shown\n\n\n\n![ToolJet - Action reference -Set local storage sample app](/img/actions/localstorage/1.png)\n\n\n\nSelect the button and add a `Set localStorage` action with `key` set to `name` and value pointing at the value of the text field\n\n\n\n![ToolJet - Action reference -Set local storage sample app](/img/actions/localstorage/2.png)\n\n\n\nSelect the text label we've added and set its value to the name item from localStorage\n\n\n\n![ToolJet - Action reference -Set local storage sample app](/img/actions/localstorage/3.png)\n\n\n\n\nNow save the application, this is important as we're about to reload the page.\n\n\nType in anything you wish on the input box and click on the button\n\n\n\n\n![ToolJet - Action reference -Set local storage sample app](/img/actions/localstorage/5.png)\n\n\n\nReload the page, you'll see that the value stored in local storage is persisted and it is displayed on screen!\n\n\n\n![ToolJet - Action reference -Set local storage sample app](/img/actions/localstorage/6.png)\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Snowflake",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/snowflake.md",
    "content": "\nid: snowflake\ntitle: Snowflake\n\nSnowflake\nToolJet can connect to Snowflake databases to read and write data.\n\nConnection\nGetting Started\n\nConnection\nPlease make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP. You can find snowflake docs on network policies here.\nTo add a new Snowflake database, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select Snowflake from the modal that pops up.\nToolJet requires the following to connect to your Snowflake database.\n\nAccount\nUsername\nPassword\n\n:::info\nYou can also configure for additional optional parameters.\n:::\n\n\n![ToolJet - Snowflake connection](/img/datasource-reference/snowflake/snowflake-connect.png)\n\n\nQuerying Snowflake\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the datasource. Query manager then can be used to write raw SQL queries.\n\n\n![ToolJet - Snowflake query](/img/datasource-reference/snowflake/snowflake-query.png)\n\n\nClick on the `run` button to run the query. \nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "REST API ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/restapi.md",
    "content": "\nid: restapi\ntitle: REST API \n\nREST API\nToolJet can connect to any REST endpoint available. \nConnection\nTo add a new REST API datasource, click the Datasources manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select REST API from the modal that pops up.\nClick on the 'Save' button to save the data source.\n\nToolJet requires the following to connect to a REST API  datasource.\n\nURL of the REST endpoint\n\nThe following optional parameters are also supported:\n| Type         | Description |\n   | -----------  | ----------- |\n   | URL params   | Additional query string parameters|\n   | headers      | Any headers the REST API source requires|\n   | body         | Any values or fields the REST API source requires|\n:::info\nREST HTTP methods that are supported are GET, POST, PUT, PATCH & DELETE.\n:::\n\nQuerying REST API\nClick on `+` button of the query manager at the bottom panel of the editor and select the REST API endpoint added in the previous step as the data source.\nClick on the 'run' button to run the query. \n:::note\nNOTE: Query should be saved before running.\n:::\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "SMTP",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/smtp.md",
    "content": "\nid: smtp\ntitle: SMTP\n\nSMTP\nSMTP plugin can connect ToolJet applications to SMTP servers for sending emails.\nConnection\nA SMTP server can be connected with the following credentails:\n- Host\n- Port\n- User\n- Password\n:::info\nYou can also test your connection before saving the configuration by clicking on `Test Connection` button.\n:::\n\n\n\nQuerying SMTP\nGo to the query manager at the bottom panel of the editor and click on the `+` button on the left to create a new query. Select `SMTP` from the datasource dropdown.\nTo create a query for sending email, you will need to provide the following properties:\n  - From `required` : Email address of the sender\n  - From Name : Name of the sender\n  - To `required` : Recipient's email address\n  - Subject : Subject of the email\n\n\nBody : You can enter the body text either in the form of `raw text` or `html` in their respective fields.\nAttachments : Attachments can be added to a SMTP query by referencing the file from the `File Picker` component in the attachments field. \n\nFor example, you can set the `Attachments` field value to `{{ components.filepicker1.file }}` or you can pass an array of `{{ name: 'filename.jpg', dataURL: '......' }}` object to accomplish this.",
    "tag": "tooljet"
  },
  {
    "title": "SendGrid",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/sendgrid.md",
    "content": "\nid: sendgrid\ntitle: SendGrid\n\nSendGrid\nToolJet can connect to your SendGrid account to send emails.\n\n:::info\nThe SendGrid API Datasource supports for interaction with the mail endpoint of the SendGrid v3 API.\n:::\nConnection\nTo add a new SendGrid API datasource, click the Datasource manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select SendGrid API from the modal that pops up.\nEnter your SendGrid API key in the \"API key\" field.\n:::tip\nSendGrid API key is required to create an SendGrid datasource on ToolJet. You can generate API key by visiting SendGrid account page. \n:::\nClick on the 'Save' button to save the data source.\nSupported operations\n\nEmail service\n\nEmail service\nRequired parameters: \n- Send email to\n- Send email from \n- Subject\n- Body as text\nOptional parameters:\n- Body as HTML\n\n:::info\nSend mail to - accepts an array/list of emails separated by comma.\nFor example:\n`{{[\"dev@tooljet.io\", \"admin@tooljet.io\"]}}`.\nSend mail from - accepts a string.\nFor example: `admin@tooljet.io`\n:::\n:::tip\nSend a single email to multiple recipients - The `Send mail to` field can contain an array of recipients, which will send a single email with all of the recipients in the field. \nSend multiple individual emails to multiple recipients - set Multiple recipients field to `{{true}}` and the `Send mail to` field will be split into multiple emails and send to each recipient.\n:::\n:::note\nNOTE: Query should be saved before running.",
    "tag": "tooljet"
  },
  {
    "title": "Mailgun",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/mailgun.md",
    "content": "\nid: mailgun\ntitle: Mailgun\n\nMailgun\nToolJet can connect to your Mailgun account to send emails.\n\n:::info\nThe Mailgun API Datasource supports for interaction with the mail endpoint of the Mailgun API.\n:::\nConnection\nTo add a new Mailgun API datasource, click the Datasource manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select Mailgun API from the modal that pops up.\nEnter your Mailgun API key in the \"API key\" field.\n:::tip\nMailgun API key is required to create an Mailgun datasource on ToolJet. You can generate API key by visiting Mailgun account page.\n:::\nClick on the 'Save' button to save the data source.\nSupported operations\n\nEmail service\n\nEmail service\nRequired parameters:\n\nSend email to\nSend email from\nSubject\nBody as text\n\nOptional parameters:\n\nBody as HTML\n\n\n:::info\nSend mail to - accepts a single email id. \nFor example:\n`{{\"dev@tooljet.io\"}}`.\nSend mail from - accepts a string.\nFor example: `admin@tooljet.io`\n:::\n:::tip\nSend a single email to multiple recipients - The `Send mail to` field can contain an array of recipients, which will send a single email with all of the recipients in the field.\nSend multiple individual emails to multiple recipients - set Multiple recipients field to `{{true}}` and the `Send mail to` field will be split into multiple emails and send to each recipient.\n:::\n:::note\nNOTE: Query should be saved before running.",
    "tag": "tooljet"
  },
  {
    "title": "Datasources : Overview",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/overview.md",
    "content": "\nid: overview\ntitle: Overview\n\nDatasources : Overview\nDatasources pull in and push data to any source including databases, external APIs, or services.\n\n\n\nConnecting datasources\n\n\nAfter logging in to ToolJet, create a new app from the dashboard\n\n\nThere are two ways for connecting a datasource. You can connect from:\n\n\nLeft-sidebar: On the left sidebar, click on the `datasource` icon and then click on the `+ add datasource` button\n\n\n\n\n\nQuery Panel: Go to the query panel at the bottom, click on the `+Add` button and then click `Add datasource` button\n\n\n\n\n\n\n\nFollow the steps in the Datasource Library specific to the desired datasource\n\n\n:::info\nToolJet allows you to transform the data returned by datasources using Transformations\n:::",
    "tag": "tooljet"
  },
  {
    "title": "MariaDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/mariadb.md",
    "content": "\nid: mariadb\ntitle: MariaDB\n\nMariaDB\nToolJet can connect to MariaDB to read and write data.\nConnection\nTo add a new MariaDB data source, click on the `+` button on datasources panel at the left sidebar of the app builder. Select MariaDB from the modal that pops up.\nToolJet requires the following to connect to your DynamoDB.\n\nHost\nUsername\nPassword\nConnection Limit\nPort\nDatabase\nSSL\nSSL Certificate\n\n\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying MariaDB\nClick on `+` button of the query manager at the bottom panel of the builder and select the MariaDB datasource added in the previous step. \n\n\n\nClick on the run button to run the query.\nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "Oracle DB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/oracledb.md",
    "content": "\nid: oracledb\ntitle: Oracle DB\n\nOracle DB\nToolJet can connect to Oracle databases to read and write data. \nConnection\nA Oracle DB can be connected with the following credentails:\n- Host\n- Port\n- SID / Service Name ( Database name must be a SID / Service Name )\n- Database Name\n- SSL\n- Username\n- Password\n- Client Library Path ( Only required for local setup )\n\n\n![ToolJet - Data source - OracleDB](/img/datasource-reference/oracledb/oracleauth.png)\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying Oracle DB\nOnce you have added a Oracle DB data source, click on `+` button of the query manager to create a new query. There are two modes by which you can query SQL:\n\nSQL mode\nGUI mode\n\nSQL mode\nSQL mode can be used to write raw SQL queries. Select SQL mode from the dropdown and enter the SQL query in the editor. Click on the `run` button to run the query.\nNOTE: Query should be saved before running.\nGUI mode\nGUI mode can be used to query Oracle database without writing queries. Select GUI mode from the dropdown and then choose the operation Bulk update using primary key. Enter the Table name and Primary key column name. Now, in the editor enter the records in the form of an array of objects. \nExample: `{{ [ {id: 1, channel: 33}, {id:2, channel:24} ] }}`\nClick on the run button to run the query. NOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "Redis",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/redis.md",
    "content": "\nid: redis\ntitle: Redis\n\nRedis\nToolJet can run Redis commands on your Redis instances.\nConnection\nToolJet requires the following to connect to your Redis instances. \n\n\nHost\nPort - The default port for Redis server is 6379\nUsername\nPassword\n\nClick on \"Test\" button to test the connection and click \"Save\" to save the data source.\nRedis Queries\nList of supported commands: Redis Official Documentation\nExamples\n`PING` command to test the Redis connection. If the connection is ready, the Redis server will respond with `PONG`.\n`shell\nPING`\n`SET` command can be used to set the value for a key \n`shell\nSET key value`\n`GET` command can be used to retrieve the value of a key\n```shell\nGET key",
    "tag": "tooljet"
  },
  {
    "title": "InfluxDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/influxdb.md",
    "content": "\nid: influxdb\ntitle: InfluxDB\n\nInfluxDB\nToolJet can connect to InfluxDB databases to read and write data. Use the Token authentication scheme to authenticate to the InfluxDB API. For more info visit InfluxDB docs.\nConnection\nToolJet connects to InfluxDB using :\n\nAPI Token\nHost\nPort\nProtocol (HTTP/HTTPS)\n\n:::info\nFor generating API Token visit InfluxDB docs.\n:::\n\n\n![ToolJet - Data source - influxDB](/img/datasource-reference/influxdb/influxauth.png)\n\n\nSupported queries:\n\n\nWrite data\n\n\nQuery data\n\n\nGenerate an Abstract Syntax Tree (AST) from a query\n\n\nRetrieve query suggestions\n\n\nRetrieve query suggestions for a branching suggestion\n\n\nAnalyze a Flux query\n\n\nList buckets\n\n\nCreate a bucket\n\n\nRetrieve a bucket\n\n\nUpdate a bucket\n\n\nDelete a bucket\n\n\n\nWrite data\nThis operation writes data to a bucket.\nRequired parameters:\n\nBucket\nOrganization name or ID\n\nOptional parameters:\n\nPrecision\n\nQuery data\nRetrieves data from InfluxDB buckets.\nRequired parameters:\n\nOrganization name or ID\n\nGenerate an Abstract Syntax Tree (AST) from a query\nThis operation analyzes flux query and generates a query specification.\nRequired parameters:\n\nQuery\n\nRetrieve query suggestions\nThis query retrieve query suggestions.\nRetrieve query suggestions for a branching suggestion\nThis operation retrieve query suggestions for a branching suggestion.\nRequired parameters:\n\nName\n\nAnalyze a Flux query\nThis Analyzes a Flux query.\nRequired parameters:\n\nQuery\n\nList buckets\nThis operation lists all the buckets in a database.\nCreate a bucket\nRequired parameters:\n\nQuery\n\nRetrieve a bucket\nThis operation retrieve a bucket in a database.\nRequired parameters:\n\nBucket ID\n\nUpdate a bucket\nRequired parameters:\n\nBucket ID\nQuery\n\nDelete a bucket\nRequired parameters:",
    "tag": "tooljet"
  },
  {
    "title": "Appwrite Database",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/appwrite.md",
    "content": "\nid: appwrite\ntitle: Appwrite Database\n\nAppwrite Database\nNow build applications on top of your Appwrite database.\nConnection\nToolJet connects to your Appwrite app using :\n- Host (API endpoint)\n- Project ID\n- Secret key\nYou'll find the Secret key and other credentials on your Appwrite's project settings page. You may need to create a new key if you don't have one already.\n:::info\nYou should also set the scope for access to a particular resource. Learn more about the API keys and scopes here.\n:::\nTo connect Appwrite datasource to your ToolJet application, go to the data source manager on the left-sidebar and click on the `+` button. Select Appwrite from the list of available datasources, provide the credentials and click Save. It is recommended to check the connection by clicking on 'Test connection' button to verify if the service account can access Appwrite from the ToolJet server.\n\n\n\nQuerying Appwrite\nAfter setting up the Appwrite datasource, you can click on the `+` button of the query manager at the bottom panel of the editor and select the Appwrite data source that you added in the previous step.\n\n\n\nAfter selecting Appwrite datasource, select the operation that you want to perform on the Appwrite database and click Save to save the query. \n:::tip\nQuery results can be transformed using Transformations. Read our Transformation documentation here\n:::\nSupported operations\n\nList documents\nGet document\nCreate document\nUpdate document \nDelete document\nBulk update using document id\n\nList documents\nThis operation can be used to get a list of all the user documents.\nRequired parameters:\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The value for collection ID field should be of `String` type. \n\nOptional parameters:\n\nLimit: Maximum number of documents to return in the response. By default, it will return a maximum of 25 results. A maximum of 100 results is allowed per request. The Limit value should be of `integer` type.\nOrder fields: Array of attributes used to sort results. The order field value should be an `array`.\nOrder types: Array of order directions for sorting attributes. Possible values are DESC for descending order or ASC for ascending order. The order field value should be an `array`.\nField, Operator, and Value: For filtering the results, you can enter a field(attribute) name, use the appropriate operator from the dropdown, and set a value.\n\n\n\n\nGet document\nUse this operation to get a document from a collection by its unique ID. \nRequired parameters:\n\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The value for collection ID should be of `String` type. \n\n\nDocument ID: Enter the document ID of the document that you want to get. The document ID should be of `String` type. \n\n\n\n\n\nAdd Document to Collection\nUse this operation to create a new document in a collection.\nRequired parameters:\n\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The collection ID should be of `String` type. \n\n\nBody: Enter the document data as a JSON object.\n\n\n\n\n\nUpdate document\nUse this operation to update a document.\nRequired parameters:\n\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The value for collection ID should be of `String` type. \n\n\nDocument ID: Enter the document ID of the document that you want to get. The document ID should be of `String` type. \n\n\nBody: Enter the document data as a JSON object.\n\n\n\n\n\nDelete document\nUse this operation for deleting a document in the collection.\nRequired parameters:\n\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The value for collection ID should be of `String` type. \n\n\nDocument ID: Enter the document ID of the document that you want to get. The document ID should be of `String` type. \n\n\n\n\n\nBulk update using document id\nUse this operation for bulk updating a document in a collection.\nRequired parameters:\n\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The value for collection ID should be of `String` type. \n\n\nKey for document ID:  Enter the key or attribute name that can be used to identify each record.\n\n\nRecords: The array of objects that will contain the data for updating each record in the database\nand these objects must contain a key-value pair to point unique record in the database (key for document)\n\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Slack",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/slack.md",
    "content": "\nid: slack\ntitle: Slack\n\nSlack\nToolJet can connect to your Slack workspace to send messages. \n\n\n\nConnection\n\n\nTo add the Slack datasource, click the Datasource manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select Slack from the modal that pops up.\n\n\nIn the next dialog, you'll be asked to choose the permission scope. Choose the permission scope and then click on Connect to Slack button.\n\n\nA new tab will open up asking for authorization confirmation. Once done, you can close the tab.\n\n\n\n\n\n\nClick on the 'Save data source button to save the data source.\n\n:::note\nThe App (which credentials are provided) needs to be installed in the workspace to use the Slack data source, and it needs to be added to the channel where you want to post the message.\n:::\nSupported operations\n\nList members\nSend message\nList messages from a channel\n\nList members\nThis operation will return the data of all the members in your slack workspace.\n\n\n\nSend message\nThis operation will send/post the message to a specified channel or posting to direct messages (also known as DMs or IMs) in your slack workspace.\n| Property | Description |\n| :--- | :--- |\n| Channel | The channel ID or user ID to post the message to. |\n| Message | The message to post. |\n\n\n\nList messages\nThis operation will get the messages from a specified channel.\n| Property | Description                             |\n| :--- |:----------------------------------------|\n| Channel | The channel ID to get the messages from |\n| Limit | The maximum number of messages to return. |\n| Next Cursor | A cursor value returned by a previous call to list messages. |\n\n",
    "tag": "tooljet"
  },
  {
    "title": "SAP HANA",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/saphana.md",
    "content": "\nid: saphana\ntitle: SAP HANA\n\nSAP HANA\nToolJet can connect to SAP HANA databases to read and write data. \n\nConnection\nQuerying SAP HANA\n\nConnection\nTo add a new SAP HANA database, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select SAP HANA from the modal that pops up.\nToolJet requires the following to connect to your SAP HANA database:\n\nHost\nPort\nUsername\nPassword\n\n:::info\nPlease make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\n:::\n\n\n![ToolJet - Data source - SAP HANA](/img/datasource-reference/saphana/connect.png)\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying SAP HANA\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. Enter the query in the editor. Click on the `run` button to run the query.\nNOTE: Query should be saved before running.\n\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "Twilio",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/twilio.md",
    "content": "\nid: twilio\ntitle: Twilio\n\nTwilio\nToolJet can connect to your Twilio account to send sms.\n\n\n![ToolJet - Data source - Twilio](/img/datasource-reference/twilio/connect.png)\n\n\nConnection\n\n\nTo add the Twilio datasource, click the Datasource manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select Twilio from the modal that pops up.\n\n\nIn the next dialog, you'll be asked to enter the Auth Token, Account SID, and Messaging Service SID.\n\n\nYou can get the Auth Token and Account SID on the dashboard of your Twilio account.\n\n\n\n\n![ToolJet - Data source - Twilio](/img/datasource-reference/twilio/auth.png)\n\n\n\nFor Messaging Service SID, you'll need to create a messaging service first from the Services under Messaging in the left-sidebar.\n\n\n\n![ToolJet - Data source - Twilio](/img/datasource-reference/twilio/sid.png)\n\n\n\nAfter entering the three credentials, you can Save the datasource.\n\nSupported operations\n\nSend message\n\nSend message\nThis operation will send the specified message to specified mobile number.\n\n\n![ToolJet - Data source - Twilio](/img/datasource-reference/twilio/sms.png)\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Amazon SES",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/amazonses.md",
    "content": "\nid: amazonses\ntitle: Amazon SES\n\nAmazon SES\nToolJet can connect to your Amazon SES account to send emails.\nConnection\nTo add a new Amazon SES API datasource, click the Datasource manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select Amazon SES from the modal that pops up.\nToolJet requires the following to connect to Amazon SES:\n\nRegion\nAccess key\nSecret key\n\nIt is recommended to create a new IAM user for the database so that you can control the access levels of ToolJet.\nClick on the 'Save' button to save the data source.\n\n\n\nSupported operations\n\nEmail service\n\nEmail service\nRequired parameters:\n- Send email to\n- Send email from\n- Subject\n- Body as text\nOptional parameters:\n- Body as HTML\n- CC Addresses\n- BCC Addresses\n:::info\nSend mail to - accepts an array/list of emails separated by comma.\nFor example:\n`{{[\"dev@tooljet.io\", \"admin@tooljet.io\"]}}`.\nSend mail from - accepts a string.\nFor example: `admin@tooljet.io`\n:::\n:::tip\nSend a single email to multiple recipients - The `Send mail to` field can contain an array of recipients, which will send a single email with all of the recipients in the field.\n:::\n:::info Note\nQuery should be saved before running.",
    "tag": "tooljet"
  },
  {
    "title": "MySQL",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/mysql.md",
    "content": "\nid: mysql\ntitle: MySQL\n\nMySQL\nToolJet can connect to MySQL databases to read and write data. \nConnection\nToolJet requires the following to connect to your MySQL database. Please make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nTo add a new MySQL database, click on the `+` button on data sources panel at left sidebar in the app editor. Select MySQL from the modal that pops up.\nToolJet requires the following to connect to your MySQL database.\n\nHost\nPort\nUsername\nPassword\n\nIt is recommended to create a new MySQL database user so that you can control the access levels of ToolJet. \n\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying MySQL\nOnce you have added a MySQL data source, click on `+` button of the query manager to create a new query. There are two modes by which you can query SQL:\n\nSQL mode\nGUI mode\n\nSQL mode\nSQL mode can be used to write raw SQL queries. Select SQL mode from the dropdown and enter the SQL query in the editor. Click on the `run` button to run the query.\nNOTE: Query should be saved before running.\n\nGUI mode\nGUI mode can be used to query MySQL database without writing queries. Select GUI mode from the dropdown and then choose the operation Bulk update using primary key. Enter the Table name and Primary key column name. Now, in the editor enter the records in the form of an array of objects. \nExample: `{{ [ {id: 1, channel: 33}, {id:2, channel:24} ] }}`\n\nClick on the run button to run the query. NOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "Cloud Firestore",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/firestore.md",
    "content": "\nid: firestore\ntitle: Cloud Firestore\n\nCloud Firestore\nConnection\nToolJet connects to your Cloud Firestore using JSON key of your GCP service account.\nTo generate a new key, check out Firestore's official documentation.\nOnce the key is downloaded, click on `+` button of data sources panel at the left-bottom corner of the app editor. Select Firestore from the modal that pops up. Paste the key in the field for GCP key. Click on Test connection button to verify if the service account can access Firestore from ToolJet server. Click on Save button to save the datasource.\n\nQuerying Firestore\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source.\n\nSelect the operation that you want to perform on Firestore and click Save to save the query. \n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\n\nGet document\nQuery collection\nAdd Document to Collection \nUpdate document \nSet document\nBulk update using document id\nDelete document\n\nGet document\nUse this operation to get the data in a document.\nRequired parameters:\n\nPath: Enter the path of the document. Path format: `collection name/document id`. ex: `books/23e2wsds32`\n\n\nQuery collection\nUse this operation to query all the documents in a collection. Check firestore doc here.\nRequired parameters:\n\nPath: Enter the name of the collection to be queried. Example: `books`\n\nOptional parameters:\n\n\nOrder type: Select ascending or descending from the dropdown.\n\n\nLimit: Maximum number of documents to return in response. By default will return maximum 25 results. Maximum of 100 results allowed per request. The Limit value should be of integer type.\n\n\nField, Operator, and Value: For filtering the results, you can enter a document field name, use appropriate operator from the dropdown and set a value.\n\n\n\nAdd Document to Collection\nUse this operation for creating a new document in a collection.\nRequired parameters:\n\nCollection: Enter the path of the document in a collection. Path format: `collection name/document id`. ex: `books/33243dwe2332`\nBody: Enter the Field names and their values in json form. example body:\n`json\n{\n\"Author\": \"Shubh\",\n\"id\": 5\n}`\n\n\nUpdate document\nUse this operation for updating the existing document in a collection. Also, it only updates fields if they exist, but doesn't replace an entire object like set operation.\nRequired parameters:\n\nPath: Enter the path of the document in a collection. Path format: `collection name/document id`. ex: `books/33243dwe2332`\nBody: Enter the Field names and their values in json form. example body:\n`json\n{\n\"Author\": \"Shubhendra\",\n\"id\": 3\n}`\n\n\nSet document\nThis operation replaces your chosen object with the value that you provide. So if your object has 5 fields, and you use Set operation and pass object with 3 fields, it will now have 3 fields.\nRequired parameters:\n\nPath: Enter the path of the document in a collection. Path format: `collection name/document id`. ex: `books/33243dwe2332`\nBody: Enter the Field names and their values in json form. example body:\n`json\n{\n\"Author\": \"Shefewfbh\",\n\"id\": 9\n}`\n\n\nBulk update using document id\nUse this operation for bulk updating documents.\nRequired parameters:\n\nCollection: \nKey for document ID: \nRecords:\n\n\nDelete document\nUse this operation for deleting a document in a collection.\nRequired parameters:\n\nPath: Enter the path of the document to be deleted in a collection. Path format: `collection name/document id`. ex: `books/33243dwe2332`\n\n\nTransforming firestore query result for Table widget\nThe Firestore query result is in the form of object so we\u2019ll need to transform it into array.\n```js\nreturn data = Array(data)",
    "tag": "tooljet"
  },
  {
    "title": "MinIO",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/minio.md",
    "content": "\nid: minio\ntitle: MinIO\n\nMinIO\nToolJet can connect to minio and perform various operation on them.\nSupported operations\n\nRead object\nPut object\nRemove object\nList buckets\nList objects in a bucket\nPresigned url for download\nPresigned url for upload\n\nConnection\nTo add a new minio source, click on the Add or edit datasource icon on the left sidebar of the app editor and click on `Add datasource` button. Select Minio from the modal that pops up.\nToolJet requires the following to connect to your DynamoDB:\n\nHost\nPort\nAccess key\nSecret key\n\n\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying Minio\nClick on `+` button of the query manager at the bottom panel of the editor and select the data source added in the previous step as the data source. Select the operation that you want to perform and click Save to save the query.\n\nClick on the run button to run the query. \nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "TypeSense",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/typesense.md",
    "content": "\nid: typesense\ntitle: TypeSense\n\nTypeSense\nToolJet can connect to your TypeSense deployment to read and write data.\nConnection\nPlease make sure the host/IP of the TypeSense deployment is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nToolJet requires the following to connect to your TypeSense deployment: \n- Host\n- Port\n- API Key\n- Protocol\n\n\n\nQuerying TypeSense\nClick on `+` button of the query manager at the bottom panel of the editor and select the TypeSense added in the previous step as the data source.\nSelect the operation that you want to perform on your TypeSense cluster and click `Create` to save the query. \n\n\n\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\n1. Create a Collection\nWith this operation you can easily create `Collections` in your TypeSense cluster. In the schema field, you'll need to define the schema for creating a new collection. Check out TypeSense docs to know more about collections here\n\n2. Index a document\nUse this operation to index a document to your collection. You'll need to specify the Collection Name where you want your document to be indexed and also provide the document data according the schema defined in the collection. Read more about Indexing a document in TypeSense here.\n\n3. Search\nUse this operation to perform a search within the specified collection. Know more about the search parameters in the TypeSense doc here.\n\n4. Get a document\nUse this operation to fetch an individual document in a collection by providing the `id` of the document. Read more about it here.\n\n5. Update a document\nUse this operation to update an individual document by providing the Collection Name and Id of the document. You'll need to provide the updated document data in the form of specified schema. Check out the TypeSense's doc on updating a document here.\n\n6. Delete a document\nDelete a document from collection by providing the `Id` of the document. Check out the TypeSense's doc on deleting documents here.\n\n:::tip\nMake sure that you supply JSON strings instead of JavaScript objects for any document or schema that is being passed to the server, in any of the above operations.",
    "tag": "tooljet"
  },
  {
    "title": "Notion",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/notion.md",
    "content": "\nid: notion\ntitle: Notion\n\nNotion\nToolJet can connect to a Notion workspace to do operations on notion pages, databases and blocks.\nConnection\nFor integrating Notion with ToolJet we will need the API token. The API token can be generated from your Notion workspace settings. Read the official Notion docs for Creating an internal integration with notion API.\n\n\n\nQuerying Notion\nNotion API provides support for:\n- Database\n- Page\n- Block\n- User\n\n:::tip\nBefore querying Notion, you must share the database with your integration. Click the share button in your database view, find your integration name select it.\n\n:::\nDatabase\nOn database resource you can perform the following operations:\n- Retrieve a database\n- Query a database\n- Create a database\n- Update a database\n\n1. Retrieve a database\nThis operations retrieves a Database object using the ID specified.\nRequired parameters:\n\nDatabase ID: You'll find the Database ID in the url. Suppose this is the example url: `https://www.notion.so/workspace/XXX?v=YYY&p=ZZZ` then `XXX` is the database ID, `YYY` is the view ID and `ZZZ` is the page ID.\n\n\n2. Query a database\nThis operation gets a list of Pages contained in the database, filtered and ordered according to the filter conditions and sort criteria provided in the query.\nRequired parameters:\n\nDatabase ID : You'll find the Database ID in the url. Suppose this is the example url: `https://www.notion.so/workspace/XXX?v=YYY&p=ZZZ` then `XXX` is the database ID, `YYY` is the view ID and `ZZZ` is the page ID.\n\nOptional parameters:\n\nFilter : This must be an object of filters\nSort : Array of sort objects\nLimit : limit for pagination\nStart Cursor : Next object id to continue pagination\n\n3. Create a database\nThis operation creates a database as a subpage in the specified parent page, with the specified properties.\nRequired parameters:\n\nDatabase ID : You'll find the Database ID in the url. Suppose this is the example url: `https://www.notion.so/workspace/XXX?v=YYY&p=ZZZ` then `XXX` is the database ID, `YYY` is the view ID and `ZZZ` is the page ID.\nPage ID : Page ID of the parent\nProperties : Properties defines the columns in a database\n\nOptional parameters:\n\nTitle : Title should be an array of rich_text properties\nIcon type : Currently notion api accepts two icon options, emoji, external URL\nIcon value : Value of selected icon type\nIcon type : Currently notion api accepts only external URL\nCover value : Value of selected cover type\n\n4. Update a database\nThis operation updates an existing database as specified by the parameters.\nRequired parameters:\n\nDatabase ID\n\nOptional parameters:\n\nTitle : Title should be an array of rich_text properties\nProperties : Properties defines the columns in a database\nIcon type : Currently notion api accepts two icon options, emoji, external URL\nIcon value : Value of selected icon type\nIcon type : Currently notion api accepts only external URL\nCover value : Value of selected cover type\n\nPage\nOn page resource you can perform the following operations:\n- Retrieve a page\n- Create a page\n- Update a page\n- Retrieve a page property\n- Archive a page\n\n1. Retrieve a page\nThis operation retrieves a Page object using the ID specified.\nRequired parameters:\n\nPage ID\n\n2. Create a page\nThis operation creates a new page in the specified database or as a child of an existing page. If the parent is a database, the property values of the new page in the properties parameter must conform to the parent database's property schema. If the parent is a page, the only valid property is title.\nParameters:\n\nPage ID\nProperties : Property values of this page\nIcon type : Currently notion api accepts two icon options, emoji, external URL\nIcon value: Value of selected icon type\nIcon type : Currently notion api accepts only external URL\nCover value : Value of selected cover type\n\n3. Update a page\nThis operation updates page property values for the specified page. Properties that are not set via the properties parameter will remain unchanged.\nParameters:\n\nPage ID\nParent type: A database parent or page parent\nProperties : Property values of this page\nChildren : Page content for the new page as an array of block objects\nIcon type : Currently notion api accepts two icon options, emoji, external URL\nIcon value: Value of selected icon type\nIcon type : Currently notion api accepts only external URL\nCover value : Value of selected cover type\n\n4. Retrieve a page property item\nThis operation retrieves a property_item object for a given page ID and property ID. Depending on the property type, the object returned will either be a value or a paginated list of property item values. See Property item objects for specifics.\nParameters:\n\nPage ID\nProperty ID\nLimit\nStart cursor\n\n5. Archive (delete) a page\nRequired parameters:\n\nPage ID\nArchive: Dropdown for archive and un archive the page\n\nBlocks\nThe following operations can be performed on the block resource:\n- Retrieve a block\n- Append block children\n- Retrieve block children\n- Update a block\n- Delete a block\n\n:::info\nTo get the id for blocks, simply click on the menu icon for the block and click \"Copy link\". Afterwards, paste the link in the browser and it should look like this: `https://www.notion.so/Creating-Page-Sample-ee18b8779ae54f358b09221d6665ee15#7fcb3940a1264aadb2ad4ee9ffe11b0e` the string after # is the block id i.e. `7fcb3940a1264aadb2ad4ee9ffe11b0e`.\n:::\n1. Retrieve a block\nThis operation retrieves a Block object using the ID specified.\nRequired parameters:\n\nBlock ID\n\n2. Append new block children\nThis operation creates and appends new children blocks to the parent block_id specified.\nRequired parameters:\n\nBlock ID\nChildren: Array of block objects\n\n3. Retrieve block children\nThis operation retrieves a paginated array of child block objects contained in the block using the ID specified.\nRequired parameters:\n\nBlock ID\nLimit\nStart cursor\n\n4. Update a block\nThis operation updates the content for the specified block_id based on the block type.\nRequired parameters:\n\nBlock ID\nProperties: The block object type value with the properties to be updated\nArchive\n\n5. Delete a block\nRequired parameters:\n\nBlock ID\n\nUser\nThe following operations can be performed on the user notion resource:\n1. Retrieve a user from current workspace\nThis operation retrieves a User using the ID specified.\n\nRequired parameters:\n\nUser ID\n\n2. Retrieve list of users of a workspace\nThis operation returns a paginated list of Users for the workspace.\nRequired parameters:\n\nLimit\nStart cursor\n",
    "tag": "tooljet"
  },
  {
    "title": "Stripe",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/stripe.md",
    "content": "\nid: stripe\ntitle: Stripe\n\nStripe\nToolJet can connect to your Stripe account to read or write customers' and payments' data.\n:::info\nCheck out the Stripe Refund App tutorial\n:::\nConnection\nTo add a new Stripe data source, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select Stripe from the modal that pops up.\nToolJet requires the Stripe API key to connect to your database.\n\n\n![ToolJet - Data source - Stripe](/img/datasource-reference/stripe/connect.png)\n\n\nYou can get the Stripe API key from the dashboard of your Stripe account. Go to the Stripe account dashboard, click on the Developers on the top right, then on the left-sidebar go to the API Keys, you can simple reveal the Secret Key and copy-paste on ToolJet.\n\n\n![ToolJet - Data source - Stripe](/img/datasource-reference/stripe/apikey.png)\n\n\nQuerying Stripe\nClick on + button of the query manager at the bottom panel of the editor and select the Stripe datasource added in the previous step. Enter the query in the editor. Click on the `Save and Run` button to save and then run the query.\nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\nYou can check out the some of the operations mentioned below. All the operations for Stripe are available and can be performed from ToolJet. Check out the Stripe API documentation for the detailed information about each operation.\n\ndelete,/v1/account\nget,/v1/account\npost,/v1/account\npost,/v1/account/bank_accounts\ndelete,/v1/account/bank_accounts/{id}\nget,/v1/account/bank_accounts/{id}\npost,/v1/account/bank_accounts/{id}\nget,/v1/account/capabilities\nget,/v1/account/capabilities/{capability}\npost,/v1/account/capabilities/{capability}\nget,/v1/account/external_accounts\npost,/v1/account/external_accounts\ndelete,/v1/account/external_accounts/{id}\nget,/v1/account/external_accounts/{id}\npost,/v1/account/external_accounts/{id}\npost,/v1/account/login_links\nget,/v1/account/people\npost,/v1/account/people\ndelete,/v1/account/people/{person}\nget,/v1/account/people/{person}\npost,/v1/account/persons\ndelete,/v1/account/persons/{person}\nget,/v1/account/persons/{person}\npost,/v1/account/persons/{person}\npost,/v1/account_links\nget,/v1/accounts\npost,/v1/accounts\ndelete,/v1/accounts/{account}\nget,/v1/accounts/{account}\npost,/v1/accounts/{account}\npost,/v1/accounts/{account}/bank_accounts\ndelete,/v1/accounts/{account}/bank_accounts/{id}\nget,/v1/accounts/{account}/bank_accounts/{id}\nget,/v1/accounts/{account}/bank_accounts/{id}\nget,/v1/accounts/{account}/capabilities\nget,/v1/accounts/{account}/capabilities/{capability}\npost,/v1/accounts/{account}/capabilities/{capability}\nget,/v1/accounts/{account}/external_accounts\npost,/v1/accounts/{account}/external_accounts\ndelete,/v1/accounts/{account}/external_accounts/{id}\nget,/v1/accounts/{account}/external_accounts/{id}\nget,/v1/accounts/{account}/external_accounts/{id}\npost,/v1/accounts/{account}/login_links\nget,/v1/accounts/{account}/people\npost,/v1/accounts/{account}/people\ndelete,/v1/accounts/{account}/people/{person}\nget,/v1/accounts/{account}/people/{person}\npost,/v1/accounts/{account}/people/{person}\nget,/v1/accounts/{account}/persons\npost,/v1/accounts/{account}/persons\ndelete,/v1/accounts/{account}/persons/{person}\nget,/v1/accounts/{account}/persons/{person}\npost,/v1/accounts/{account}/persons/{person}\npost,/v1/accounts/{account}/reject\nget,/v1/apple_pay/domains\npost,/v1/apple_pay/domains\ndelete,/v1/apple_pay/domains/{domain}\nget,/v1/apple_pay/domains/{domain}\nget,/v1/application_fees\nget,/v1/application_fees/{fee}/refunds/{id}\npost,/v1/application_fees/{fee}/refunds/{id}\nget,/v1/application_fees/{id}\npost,/v1/application_fees/{id}/refund\nget,/v1/application_fees/{id}/refunds\npost,/v1/application_fees/{id}/refunds\nget,/v1/apps/secrets\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Amazon S3",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/s3.md",
    "content": "\nid: s3\ntitle: Amazon S3\n\nAmazon S3\nToolJet can connect to Amazon S3 buckets and perform various operation on them.\nConnection\nTo add a new S3 source, go to the Datasources manager on the left sidebar of the app editor and click on `Add datasource` button. Select AWS S3 from the modal that pops up.\nToolJet requires the following to connect to your AWS S3:\n\nRegion\nAccess key\nSecret key\n\nIt is recommended to create a new IAM user for the database so that you can control the access levels of ToolJet.\n\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\n:::tip\nYou can now connect to different S3 Hosts using custom endpoints.\n:::\nQuerying AWS S3\nClick on `+` button of the query manager at the bottom panel of the editor and select the data source added in the previous step as the data source. Select the operation that you want to perform and click Save to save the query.\n\n\n\nClick on the run button to run the query. \nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nQuery operations\nYou can create query for AWS S3 data source to perform several actions such as:\n  1. Read object\n  2. Upload object\n  3. List buckets\n  4. List objects in a bucket\n  5. Signed url for download\n  6. Signed url for upload\nRead object\nYou can read an object in a bucket by using this operation. It requires two parameters - Bucket name and Key.\n\nUpload object\nYou can use this operation to upload objects(files) to your S3 bucket. It requires four parameters:\n  1. Bucket: Specify the bucket name\n  2. Key: Key of the object/file\n  3. Content type: Specify file type such as text, image etc. \n  4. Upload data: File/object that is to be uploaded. \n\nList buckets\nThis operation will list all the buckets in your S3. This does not require any parameter.\n\nList objects in a bucket\nThis operation will fetch the list of all the files in your bucket. It requires two parameters:\n  1. Bucket: Bucket name (mandatory)\n  2. Prefix: To limit the response to keys that begin with the specified prefix (optional)\n  3. Max keys: The maximum number of keys returned in the response body (optional). Default value is 1000.\n  4. Offset: The key to start with when listing objects in a bucket (optional). \n  5. \"Next Continuation Token\": `Next Continuation Token` indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key (optional).\n:::info\nNext Continuation Token\nFor listing a bucket for objects that begin with a specific character or a prefix, then use the `Offset` parameter. For example, if you want to list all the objects that begin with `a`, then set the `Offset` parameter to `a`. Similarly, if you want to list all the objects that begin with `ab`, then set the `Offset` parameter to `ab`.\nThe `Next Continuation Token` is used to list the next set of objects in a bucket. It is returned by the API when the response is truncated. The results will contain `Next Continuation Token` if there are more keys in the bucket that satisfy the list query. To get the next set of objects, set the `Next Continuation Token` parameter and run the query again.\nThe results will continue from where the last listing finished.\n:::\n\nSigned url for download\nThe object owner can optionally share objects with others by creating a presigned URL, using their own security credentials, to grant time-limited permission to download the objects. For creating a presigned URL, the required parameters are:\n  1. Bucket: name of the bucket for uploading the file\n  2. Key: an object key\n  3. Expires in: an expiration time of URL\n\nSigned url for upload\nThe presigned URLs are useful if you want your user/customer to be able to upload a specific object to your bucket, but you don't require them to have AWS security credentials or permissions. For creating a presigned URL, the required parameters are:\n  1. Bucket: name of the bucket for uploading the file\n  2. Key: an object key\n  3. Expires in: an expiration time of URL\n  4. Content type: the content type such as text, image etc.\n\n:::info\nWe built an app to view and upload files to AWS S3 buckets. Check out the complete tutorial here.",
    "tag": "tooljet"
  },
  {
    "title": "Athena",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/athena.md",
    "content": "Athena\nToolJet can connect to Amazon Athena which is an interactive query service that makes it easy to analyze data in Amazon S3 using standard SQL.\n\nConnection\nQuerying-athena\nBasic Operation\n\nConnection\nToolJet requires the following to connect to your Athena.\n\nDatabase\nS3 output location\nAccess key\nSecret key\nRegion\n\n:::info\nYou can also configure for additional optional parameters.\n:::\n\nQuerying Amazon Athena\n\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the datasource. Query manager then can be used to write SQL queries.\n\n\n\nClick on the `run` button to run the query. \n\nNOTE: Query should be saved before running.\n:::tip\nRefer amazon athena docs here for more info: link\n:::\nBasic queries\nCreating table\n`sql\nCREATE EXTERNAL TABLE student (\n    name STRING,\n    age INT\n)  LOCATION 's3://athena-express-akiatfa53s-2022/';`\nInserting to table\n`sql\nINSERT INTO student\nVALUES ('Lansing',1)`\nSelect operation\n```sql\nSELECT * from student WHERE AGE=1",
    "tag": "tooljet"
  },
  {
    "title": "Zendesk",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/zendesk.md",
    "content": "\nid: zendesk\ntitle: Zendesk\n\nZendesk\nToolJet can connect to Zendesk APIs to read and write data using OAuth 2.0, which helps us to limit an application's access to a user's account.\n\nConnection\nQuerying Zendesk\n\nConnection\nToolJet connects to your Zendesk app using :\n- Zendesk Sub-domain\n- Client ID\n- Client Secret\nAuthorization Scopes\nYou can create a Zendesk data source with one of either of the two permission scopes :\n  1. Read Only\n  2. Read and Write\n:::info\nYou must first be a verified user to make Zendesk API requests. This is configured in the Admin Center interface in Apps and integrations > APIs > Zendesk APIs. For more information, see Security and Authentication in the Zendesk Support API reference or check out Zendesk's docs.\n:::\nTo connect Zendesk datasource to your ToolJet application, go to the data source manager on the left-sidebar and click on the `+` button. Select Zendesk from the list of available datasources, provide the credentials and click Connect to Zendesk and authenticate via OAuth. And click Save to save the datasource.\n\n\n![ToolJet - Data source - Zendesk](/img/datasource-reference/zendesk/zendesk.gif)\n\n\nOperations\n\nList Tickets\nList requested Tickets\nShow a Ticket\nUpdate a Ticket\nList Users\nGet Profile\nSearch query\n\nList Tickets\nLists all the tickets in your Zendesk account.\nList requested Tickets\nLists all the tickets requested by the user. \n| Fields      | description |\n| ----------- | ----------- |\n| User ID    | The id of the user  |\nShow Tickets\nGets a ticket's properties with the given ID, though not the ticket comments.\n| Fields      | description |\n| ----------- | ----------- |\n| Ticket ID    | The id of the ticket  |\nUpdate Tickets\nUpdates a ticket's properties with the given ID.\n| Fields      | description |\n| ----------- | ----------- |\n| Ticket ID    | The id of the ticket  |\n| Body    | The properties and values to update. Example: `{{({ \"ticket\": {\"status\": \"solved\"} })}}` |\nList Users\nLists all the users in your Zendesk account.\nGet Profile\nGets a user's profile with the given ID.\n| Fields      | description |\n| ----------- | ----------- |\n| User ID    | The id of the user  |\nSearch Query\nThe Search Query uses Zendesk's Search API to return tickets, users, and organizations with defined filters.\nCommon filters include:\n- `type:ticket`\n- `type:user`\n- `type:organization`\n- `type:ticket organization:12345 status:open`\n| Fields      | description |\n| ----------- | ----------- |",
    "tag": "tooljet"
  },
  {
    "title": "DynamoDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/dynamodb.md",
    "content": "\nid: dynamodb\ntitle: DynamoDB\n\nDynamoDB\nToolJet can connect to DynamoDB to read and write data.\nConnection\nTo add a new DynamoDB, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select DynamoDB from the modal that pops up.\nToolJet requires the following to connect to your DynamoDB.\n\nRegion\nAccess key\nSecret key\n\nIt is recommended to create a new IAM user for the database so that you can control the access levels of ToolJet.\n\nClick on 'Test connection' button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on 'Save' button to save the data source.\nQuerying DynamoDB\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. Select the operation that you want to perform and click 'Save' to save the query.\n\nClick on the 'run' button to run the query. NOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "MS SQL Server / Azure SQL databases",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/mssql.md",
    "content": "\nid: mssql\ntitle: MS SQL Server / Azure SQL databases\n\nMS SQL Server / Azure SQL databases\nToolJet can connect to MS SQL Server & Azure SQL databases to read and write data. \nConnection\nPlease make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nTo add new MS SQL Server / Azure SQL database, click on the '+' button on data sources panel at the left-bottom corner of the app editor. Select `SQL Server` from the modal that pops up.\nToolJet requires the following to connect to your PostgreSQL database.\n\nHost\nPort\nUsername\nPassword\nAzure - Select this option if you are using Azure SQL databases.\n\nIt is recommended to create a new database user so that you can control the access levels of ToolJet. \nClick on 'Test connection' button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on 'Save' button to save the data source.\n\nQuerying SQL Server / Azure SQL databases\nClick on '+' button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. \nClick on the 'run' button to run the query. NOTE: Query should be saved before running.\n\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "ClickHouse",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/clickhouse.md",
    "content": "\nid: clickhouse\ntitle: ClickHouse\n\nClickHouse\nToolJet can connect to the ClickHouse to read and write data.\n:::info\nToolJet uses this NodeJS client for ClickHouse.\n:::\nConnection\nTo add a new ClickHouse datasource, Go to the Datasource Manager on the left sidebar of the app editor and click on `Add datasource` button. Select ClickHouse from the modal that pops up.\nToolJet requires the following to connect to your ClickHouse Database:\n\nUsername\nPassword\nHost\nPort\nDatabase Name\nProtocol\nUse Post\nTrim Query\nUse Gzip\nDebug\nRaw\n\n\nQuerying ClickHouse\nAfter setting up the ClickHouse datasource, you can click on the `+` button of the query manager and select the ClickHouse datasource that you added in the previous step to create a new query.\n:::info\nFor more details on clickhouse visit Clickhouse docs.\n:::\nSupported Operations:\n\nSQL Query\nInsert array of objects\n\nSQL Query\nUse this to operation to enter ClickHouse SQL Statements. These statements represent various kinds of action you can perform using SQL queries.\nExample SQL queries\n\n\nSELECT:\n`sql\nSELECT * from test array;`\n\n\n\n\n\nCREATE: \n`sql\nCREATE TABLE test array3 (\n    date Date,\n    str String,\n    arr Array(String),\n    arr2 Array (Date)\n    arr3 Array(UInt32) ,\n    id1 UUID\n)ENGINE=MergeTree () ORDER BY(str)`\n\n\n\n\n\nALTER TABLE(add column)\n`sql\nALTER TABLE test array1 ADD COLUMN Added2 UInt32;`\n\n\n\n\n\nSELECT WITH WHERE CLAUSE\n`sql\n    SELECT * FROM test array1 WHERE str='Somethingl...'`\n\n\n\n\n\nUPDATE\n`sql\n    ALTER TABLE test_array1 UPDATE arr = (12] WHERE str='Somethingl...'`\n\n\n\n\n\nDELETE\n`sql\n    ALTER TABLE test_array1 DELETE WHERE str= 'Somethingl...'`\n\n\n\n\n\nNORMAL INSERT\n1) Step 1 - Creating Table\n`sql\nCREATE TABLE test array4 (\nname String,\ndate Date\n   )ENGINE=MergeTree () ORDER BY (name)`\n\n\n\n2) Step 2 - Insert\n`sql\nINSERT INTO test_array4 (*) VALUES ('juvane', '1996-01-13')`\n\n\n\n:::info\nGiving Primary Key\n```\nCREATE TABLE db.table_name\n(\n    name1 type1, name2 type2, ...,\n    PRIMARY KEY(expr1[, expr2,...])]\n)\nENGINE = engine;\nOR \nCREATE TABLE db.table_name\n(\n    name1 type1, name2 type2, ...\n)\nENGINE = engine\nPRIMARY KEY(expr1[, expr2,...]);\n```\n:::\n\n\nInsert array of objects\nUse this operation for inserting array of objects.\nRequired Parameters:\n\nBody\nFields\nTable name\n\nExample Body value:\n`javascript\n[\n            {\n                date: '2018-01-01',\n                str: 'Something1...',\n                arr: [],\n                arr2: ['1985-01-02', '1985-01-03'],\n                arr3: [1,2,3,4,5],\n                id1: '102a05cb-8aaf-4f11-a442-20c3558e4384'\n            },      \n            {\n                date: '2018-02-01',\n                str: 'Something2...',\n                arr: ['5670000000', 'Something3...'],\n                arr2: ['1985-02-02'],\n                arr3: [],\n                id1: 'c2103985-9a1e-4f4a-b288-b292b5209de1'\n            }\n        ];`",
    "tag": "tooljet"
  },
  {
    "title": "Google Cloud Storage",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/gcs.md",
    "content": "\nid: gcs\ntitle: Google Cloud Storage\n\nGoogle Cloud Storage\nToolJet can connect to GCS buckets and perform various operation on them.\nSupported operations\n-Read file\n-Upload file\n-List buckets\n-List files in a bucket\n-Signed url for download\n-Signed url for upload\nConnection\nTo add a new GCS source, click on the Add or edit datasource icon on the left sidebar of the app editor and click on `Add datasource` button. Select GCS from the modal that pops up.\nToolJet requires the json private key of a service account to be able to connect to GCS.\nYou can follow the google documentation to get started.\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying GCS\nClick on `+` button of the query manager at the bottom panel of the editor and select the data source added in the previous step as the data source. Select the operation that you want to perform and click Save to save the query.\n\nClick on the run button to run the query. \nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "PostgreSQL",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/postgresql.md",
    "content": "\nid: postgresql\ntitle: PostgreSQL\n\nPostgreSQL\nToolJet can connect to PostgreSQL databases to read and write data. \nConnection\nPlease make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nTo add a new PostgreSQL database, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select PostgreSQL from the modal that pops up.\nToolJet requires the following to connect to your PostgreSQL database.\n\nHost\nPort\nUsername\nPassword\n\nIt is recommended to create a new PostgreSQL database user so that you can control the access levels of ToolJet.\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying PostgreSQL\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. PostgreSQL query editor has two modes, SQL & GUI. SQL mode can be used to write raw SQL queries and GUI mode can be used to query your PostgreSQL database without writing queries.\nSQL mode\nSelect SQL mode from the dropdown and enter the query in the editor. Click on the `run` button to run the query.\nNOTE: Query should be saved before running.\n\nGUI mode\nSelect GUI mode from the dropdown and then choose the operation Bulk update using primary key. Enter the Table name and Primary key column name. Now, in the editor enter the records in the form of an array of objects. \nClick on the `run` button to run the query. NOTE: Query should be saved before running.\n\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "GraphQL",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/graphql.md",
    "content": "\nid: graphql\ntitle: GraphQL\n\nGraphQL\nToolJet can connect to GraphQL endpoints to execute queries and mutations.\nConnection\nTo add a new GraphQL datasource, click the `+` button on  data sources panel at the bottom-left corner of the app builder and then select GraphQL from the modal that pops up.\nToolJet requires the following to connect to a GraphQL datasource:\n\nURL of the GraphQL endpoint\n\nThe following optional parameters are also supported:\n| Type         | Description |\n   | -----------  | ----------- |\n   | URL params   | Additional query string parameters|\n   | headers      | Any headers the GraphQL source requires|\n\n\n\nClick on the Save button to save the data source.\nQuerying GraphQL\nClick on `+` button of the query manager at the bottom panel of the editor and select the GraphQL endpoint added in the previous step as the  data source.\nRequired Parameters:\n\nQuery\n\nOptional Parameters\n\nVariable\nHeaders\n\n\n\n\nClick on the 'Create' button to create the query or Click on the `Run` button to create and trigger the query.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "Elasticsearch",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/elasticsearch.md",
    "content": "\nid: elasticsearch\ntitle: Elasticsearch\n\nElasticsearch\nToolJet can connect to your Elasticsearch cluster to read and write data.\nConnection\nPlease make sure the host/IP of the Elasticsearch cluster is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nTo add a new Elasticsearch database, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select Elasticsearch from the modal that pops up.\nToolJet requires the following to connect to your Elasticsearch cluster: \n- Host\n- Port\n- Username\n- Password\n\n\n\nElastic search datasource is also providing an option for connecting services with ssl certificates. \n- You can either use CA / Client certificates option. \n\nQuerying Elasticsearch\nClick on `+` button of the query manager at the bottom panel of the editor and select the Elasticsearch added in the previous step as the data source. \nSelect the operation that you want to perform on your Elasticsearch cluster and click `Create` to save the query. \n\n\n\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\nSearch\nThis operation allows you to execute a search query and get back search hits that match the query. Read the Elasticsearch's `Search` guide here.\n\nIndex a document\nThis operation allows you to add a JSON document to the specified data stream or index. Read the Elasticsearch's `Index` guide here.\n\nGet a document\nThis operation allows you to retrieve the specified JSON document from the index. Read the Elasticsearch's `Get` guide here.\n\nUpdate a document\nThis operation allows to update a document using the specified script. Read the Elasticsearch's `Update` guide here.",
    "tag": "tooljet"
  },
  {
    "title": "Baserow",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/baserow.md",
    "content": "\nid: baserow\ntitle: Baserow\n\nBaserow\nConnection\nToolJet can connect to your Baserow account to read and write data. \nSelect the hosted version of Baserow or the self-host option.\nFor self-hosted option, base URL is required to connect.\nBaserow API token is required to create an Baserow data source on ToolJet. You can follow the steps to create API token from this link.\n\n:::tip\nThis guide assumes that you have already gone through Adding a data source tutorial.\n:::\nSupported queries\n\nList fields\nList rows\nGet row\nCreate row\nUpdate row\nMove row\nDelete row\n\nList fields\nThis query lists all the fields in a table.\nRequired parameters:\n\nTable ID\n\n\nExample response from Baserow:\n`json\n[\n  {\n    \"id\": 331156,\n    \"table_id\": 57209,\n    \"name\": \"Name\",\n    \"order\": 0,\n    \"type\": \"text\",\n    \"primary\": true,\n    \"text_default\": \"\"\n  },\n  {\n    \"id\": 331157,\n    \"table_id\": 57209,\n    \"name\": \"Last name\",\n    \"order\": 1,\n    \"type\": \"text\",\n    \"primary\": false,\n    \"text_default\": \"\"\n  },\n  {\n    \"id\": 331158,\n    \"table_id\": 57209,\n    \"name\": \"Notes\",\n    \"order\": 2,\n    \"type\": \"long_text\",\n    \"primary\": false\n  },\n  {\n    \"id\": 331159,\n    \"table_id\": 57209,\n    \"name\": \"Active\",\n    \"order\": 3,\n    \"type\": \"boolean\",\n    \"primary\": false\n  }\n]`\nList rows\nThis query lists all the rows in a table.\nRequired parameters:\n\nTable ID\n\n\nExample response from Baserow:\n`json\n{\n  \"count\": 3,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"id\": 2,\n      \"order\": \"0.99999999999999999991\",\n      \"Name\": \"Bill\",\n      \"Last name\": \"Gates\",\n      \"Notes\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce dignissim, urna eget rutrum sollicitudin, sapien diam interdum nisi, quis malesuada nibh eros a est.\",\n      \"Active\": false\n    },\n    {\n      \"id\": 3,\n      \"order\": \"0.99999999999999999992\",\n      \"Name\": \"Mark\",\n      \"Last name\": \"Zuckerburg\",\n      \"Notes\": null,\n      \"Active\": true\n    },\n    {\n      \"id\": 1,\n      \"order\": \"0.99999999999999999997\",\n      \"Name\": \"Elon\",\n      \"Last name\": \"Musk\",\n      \"Notes\": null,\n      \"Active\": true\n    }\n  ]\n}`\nGet row\nRequired parameters:\n\nTable ID\nRow ID\n\n\nExample response from Baserow:\n`json\n{\n  \"id\": 1,\n  \"order\": \"0.99999999999999999997\",\n  \"Name\": \"Elon\",\n  \"Last name\": \"Musk\",\n  \"Notes\": null,\n  \"Active\": true\n}`\nCreate row\nRequired parameters:\n\nTable ID\nRecords\n\n\nExample Records:\n`json\n{\n  \"Name\": \"Test\",\n  \"Last name\": \"Test Name\",\n  \"Notes\": \"Test Note\",\n  \"Active\": true\n}`\nExample response from Baserow:\n`json\n{\n  \"id\": 19,\n  \"order\": \"0.99999999999999999996\",\n  \"Name\": \"Test\",\n  \"Last name\": \"Test Name\",\n  \"Notes\": \"Test Note\",\n  \"Active\": true\n}`\nUpdate row\nRequired parameters:\n\nTable ID\nRow ID\nRecords\n\n\nExample Records:\n`json\n{\n  \"Name\": \"Test\",\n  \"Last name\": \"Test Name\",\n  \"Notes\": \"Test Note\",\n  \"Active\": true\n}`\nExample response from Baserow:\n`json\n{\n  \"id\": 19,\n  \"order\": \"0.99999999999999999996\",\n  \"Name\": \"Test\",\n  \"Last name\": \"Test Name\",\n  \"Notes\": \"Test Note\",\n  \"Active\": true\n}`\nMove row\nRequired parameters:\n\nTable ID\nRow ID\n\nOptional parameters:\n\nBefore ID (The row will be moved before the entered ID. If not provided, then the row will be moved to the end )\n\n\nExample response from Baserow:\n`json\n{\n  \"id\": 3,\n  \"order\": \"2.00000000000000000000\",\n  \"Name\": \"Mark\",\n  \"Last name\": \"Zuckerburg\",\n  \"Notes\": null,\n  \"Active\": true\n}`\nDelete row\nRequired parameters:\n\nTable ID\nRow ID\n\n",
    "tag": "tooljet"
  },
  {
    "title": "CouchDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/couchdb.md",
    "content": "\nid: couchdb\ntitle: CouchDB\n\nCouchDB\nToolJet can connect to CouchDB databases to read and write data. CocuhDB uses basic auth for authentication , username and password for the database is required to create an CouchDB data source on ToolJet. For more info visit CouchDB docs.\n\nSupported queries:\n\nListing records\nRetrieving a record\nCreating a record\nUpdating a record\nDeleting a record\nFind\nRetrieving a view\n\n:::info\nNOTE: Record ID is same as document ID(\"_id\") .\n:::\nListing records\nThis query lists all the records in a database.\nOptional parameters:\n\nInclude docs\nDescending order\nLimit\nSkip\n\n:::info\ndescending (boolean) \u2013 Return the documents in descending order by key. Default is false.\nlimit (number) \u2013 Limit the number of the returned documents to the specified number.\nskip (number) \u2013 Skip this number of records before starting to return the results. Default is 0.\ninclude_docs (boolean) \u2013 include_docs key is set to false by default , if true it returns the document data along with the default fields.\n:::\n\nExample response from CouchDb: \n`json\n{\n    \"total_rows\": 3,\n    \"offset\": 0,\n    \"rows\": [\n        {\n            \"id\": \"23212104e60a71edb42ebc509f000dc2\",\n            \"key\": \"23212104e60a71edb42ebc509f000dc2\",\n            \"value\": {\n                \"rev\": \"1-0cc7f48876f15883394e5c139c628123\"\n            }\n        },\n        {\n            \"id\": \"23212104e60a71edb42ebc509f00216e\",\n            \"key\": \"23212104e60a71edb42ebc509f00216e\",\n            \"value\": {\n                \"rev\": \"1-b3c45696b10cb08221a335ff7cbd8b7a\"\n            }\n        },\n        {\n            \"id\": \"23212104e60a71edb42ebc509f00282a\",\n            \"key\": \"23212104e60a71edb42ebc509f00282a\",\n            \"value\": {\n                \"rev\": \"1-da5732beb913ecbded309321cac892d2\"\n            }\n        },\n    ]\n}`\nRetrieving a record\nRequired parameters:\n\nRecord ID\n\n\nExample response from CouchDb: \n`json\n{\n    \"_id\": \"e33dc4e209689cb0400d095fc401a1e0\",\n    \"_rev\": \"1-a62af8e14451af88c150e7e718b7a0e8\",\n    \"0\": {\n        \"name\": \"test data\"\n    }\n}`\nThe returned JSON is the JSON of the document, including the document ID and revision number:\nCreating a record\n\nExample Records:\n`json\n  [{\"name\":\"tooljet\"}]`\nClick on the `run` button to run the query.\n:::info\nNOTE: Query must be saved before running.\n:::\nExample response from CouchDb:\n```json\n{\n    \"ok\": true,\n    \"id\": \"23212104e60a71edb42ebc509f0049a2\",\n    \"rev\": \"1-b0a625abc4e21ee554737920156e911f\"\n}\n```\nUpdating a record\nYou can get the revision id  value, by sending a GET request to get the document details.\nYou get the document as JSON in the response. For each update to the document, the revision field \"_rev\" gets changed.\nRequired parameters:\n\nRevision ID\nRecord ID\n\n\nExample body:\n`json\n  [{\"name\":\"tooljet\"}]`\nClick on the `run` button to run the query.\n:::info\nNOTE: Query must be saved before running.\n:::\nExample response from CouchDb:\n`json\n{\n    \"ok\": true,\n    \"id\": \"23212104e60a71edb42ebc509f0049a2\",\n    \"rev\": \"2-b0a625abc4e21ee554737920156e911f\"\n}`\nDeleting a record\nRequired parameters:\n\nRevision ID\nRecord ID\n\n\nClick on the `run` button to run the query.\nExample response from CouchDb:\n`json\n{\n    \"ok\": true,\n    \"id\": \"rev_id=2-3d01e0e87139c57e9bd083e48ecde13d&record_id=e33dc4e209689cb0400d095fc401a1e0\",\n    \"rev\": \"1-2b99ef28c03e68ea70bb668ee55ffb7b\"\n}`\nFind\nFind documents using a declarative JSON querying syntax.\nRequired parameters:\n\nSelector\n\n:::info\nNOTE:\nselector syntax: https://pouchdb.com/guides/mango-queries.html\n:::\n\nExample body:\n`json\n{\n    \"selector\": {\n        \"year\":  {\"$gte\": 2015}\n    },\n    \"fields\": [\"year\"]\n}`\nClick on the `run` button to run the query.\n:::info\nNOTE:\nselector (json) \u2013 JSON object describing criteria used to select documents. \nMore information : https://docs.couchdb.org/en/stable/api/database/find.html\n:::\nExample response from CouchDb:\n\nRetrieving a view\nViews are the primary tool used for querying and reporting on CouchDB documents.\nRequired parameters:\n\nView url\n\nReference for view :https://docs.couchdb.org/en/3.2.0/ddocs/views/intro.html#what-is-a-view\n\nOptional parameters:\n\nStart key\nEnd key\nLimit\nSkip\n\nClick on the `run` button to run the query.\n:::info\nstartkey (json) \u2013 Return records starting with the specified key.\nendkey (json) \u2013 Stop returning records when the specified key is reached.\nlimit (number) \u2013 Limit the number of the returned documents to the specified number.\nskip (number) \u2013 Skip this number of records before starting to return the results. Default is 0.\n:::\nExample response from CouchDb:\n```json\n{\n    \"total_rows\": 4,\n    \"offset\": 0,\n    \"rows\": [\n        {\n            \"id\": \"23212104e60a71edb42ebc509f000dc2\",\n            \"key\": \"23212104e60a71edb42ebc509f000dc2\",\n            \"value\": {\n                \"rev\": \"1-0cc7f48876f15883394e5c139c628123\"\n            }\n        },\n        {\n            \"id\": \"23212104e60a71edb42ebc509f00216e\",\n            \"key\": \"23212104e60a71edb42ebc509f00216e\",\n            \"value\": {\n                \"rev\": \"1-b3c45696b10cb08221a335ff7cbd8b7a\"\n            }\n        },\n        {\n            \"id\": \"23212104e60a71edb42ebc509f00282a\",\n            \"key\": \"23212104e60a71edb42ebc509f00282a\",\n            \"value\": {\n                \"rev\": \"1-da5732beb913ecbded309321cac892d2\"\n            }\n        },\n        {\n            \"id\": \"23212104e60a71edb42ebc509f002cbd\",\n            \"key\": \"23212104e60a71edb42ebc509f002cbd\",\n            \"value\": {\n                \"rev\": \"1-ca5bb3c0767eb42ea6c33eee3d395b59\"\n            }\n\n\n```    }\n]\n```\n\n\n}",
    "tag": "tooljet"
  },
  {
    "title": "Google Sheets",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/google.sheets.md",
    "content": "\nid: google.sheets\ntitle: Google Sheets\n\nGoogle Sheets\nToolJet can connect to Google Sheet using OAuth 2.0, which helps us to limit an application's access to a user's account.\nHow to integrate Google Sheets\n\nSelf-Hosted Configuration\nIf you are self-hosting the application, you will need to perform some additional steps.\n\nFollow the Google OAuth 2.0 setup steps outlined here\nSet the following environment variables with the values from the previous step:\n`GOOGLE_CLIENT_ID`\n`GOOGLE_CLIENT_SECRET`\n`TOOLJET_HOST`\n\n\nEnable the Google Sheets API in the GCP console\n\nAuthorization Scopes\nYou can create a Google Sheets data source with one of either of the two permission scopes :\n  1. Read Only\n  2. Read and Write\n\nOperations\nUsing Google sheets data source you can perform several operations from your applications like:\n\nRead data from a sheet\nAppend data to a sheet\nUpdate single row of a sheet\nDelete row from a sheet\nGet spreadsheet info\n\nRead data from a sheet\nThis operation returns the table data from the spreadsheet in the form of json object. \n| Fields      | description |\n| ----------- | ----------- |\n| Spreadsheet ID | It is mandatory to enter the spreadsheet-id. The spreadsheet-id can be found in the URL of the spreadsheet. Example URL: https://docs.google.com/spreadsheets/d/1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM/edit#gid=0 - in this URL, the `1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM` is the spreadsheet-id. |\n| Range | This is optional. You can specify the range of cells in this field. If left empty, it will select the range `A1:Z500`. |\n| Sheet | This is optional. You can specify `sheet name` if it has more than 1 sheets, else it will automatically choose the first sheet. |\n\nAppend data to a sheet\nYou can add more rows to the table using the append operation.\n| Fields      | description |\n| ----------- | ----------- |\n| Spreadsheet ID | It is mandatory to enter the spreadsheet-id. The spreadsheet-id can be found in the URL of the spreadsheet. Example URL: https://docs.google.com/spreadsheets/d/1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM/edit#gid=0 - in this URL, the `1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM` is the spreadsheet-id. |\n| Sheet | This is optional. You can specify `sheet name` if it has more than 1 sheets, else it will automatically choose the first sheet. |\n| Rows  | Enter the row data in the json array form. Each object in an array will represent a single row. Example: `[ {\"name\":\"John\", \"email\":\"John@tooljet.com\"},{...},{...} ]` In each object, the `key` represents the column name and the `value` represents the cell data.   |\n\nUpdate single row of a sheet\nYou can update the existing data in sheet using this operation.\n| Fields      | description |\n| ----------- | ----------- |\n| Spreadsheet ID | It is mandatory to enter the spreadsheet-id. The spreadsheet-id can be found in the URL of the spreadsheet. Example URL: https://docs.google.com/spreadsheets/d/1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM/edit#gid=0 - in this URL, the `1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM` is the spreadsheet-id. |\n| Where | Enter the column name such as `id` for choosing a row. |\n| Operator | Choose the `===` operator to check the equality. |\n| Value | Enter the any `id` number/name that you want to update. |\n| Rows  | Enter the row data. Example: `{{({id: components.textinput4.value, company: components.textinput1.value, position: components.textinput2.value, url: components.textinput3.value, 'date-applied': components.datepicker1.value, status: components.dropdown1.value})}}`  |\n\nDelete row from a sheet\nUse this operation delete a specific row from the sheet.\n| Fields      | description |\n| ----------- | ----------- |\n| Spreadsheet ID | It is mandatory to enter the spreadsheet-id. The spreadsheet-id can be found in the URL of the spreadsheet. Example URL: https://docs.google.com/spreadsheets/d/1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM/edit#gid=0 - in this URL, the `1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM` is the spreadsheet-id. |\n| GID | You'll find the GID in the end of the URL of spreadsheet. In the example mentioned above, the GID is 0 |\n| Delete row number |  Just enter the row number that you want to delete.  |\n\nGet spreadsheet info\nThis operation can be used to get some basic information of the spreadsheet such as the number of sheets, theme, time-zone, format, and url etc.\nHere is the `Preview` of the query that used the get spreadsheet info operation.",
    "tag": "tooljet"
  },
  {
    "title": "BigQuery",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/bigquery.md",
    "content": "\nid: bigquery\ntitle: BigQuery\n\nBigQuery\nToolJet can connect to BigQuery databases to run BigQuery queries.\nConnection\nPlease refer this link to enable BigQuery API in Google Cloud Console. \nCreate Service Account and key, then get your configs downloaded as JSON\nTo add a new BigQuery, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select BigQuery from the modal that pops up.\nToolJet requires the config json downloaded from your account to connect to BigQuery. Paste the json into the `Private key` field.\nThe json looks like:\n`json\n {\n  \"type\": \"service_account\",\n  \"project_id\": \"tooljet-279812\",\n  \"private_key_id\": \"ea6e234sdfsdf3242b91525626edeef74a14e58761\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADAAhdh67sidfnIUWWWBAQC8V+z0vaM/rFiA\\nrq8fzVjSpEu7Cietjn82SVtguAlAUP9YpRepzi4rDmRgVQiXe4KES7VGQhmg3hUj\\nbBASbdI5WRCvAC2ujzrxv3rbfjYRWfm+OqzpUBWaEKbwSGc6rNkhmirvhjiFdl5k\\nn7aK7w3bmQfBlnNM6+WiQdT09g2qx3lmRDoUUpuCngkhbWOs3gN/U6wlm0cHKtbF\\nWUOwKdyeZrm3UORUDkFvq6rVSF8vob+FQxf24FuvpBmXi2o2dqqglle8rlm8Lz83\\ns4kAVbqVjtGrVXm6QUcnLISqJCJUnFkSuFpo60GCcgAVrwyAq/6aQH3IM78QKzFL\\n8q5b65rXAgMBAAECggEAClIF8tRk0VuG3NZH5lg3q8fDOyaLBFdVKcHKtzCec3Ez\\no6C4RcxP6Hk5IbPrtgggjVIi/Z7exKRv2mAwFvuSuJJSQSSjXC7Fm87AQPdYFWYt\\noFYIeLGPlFMO++H3Nh+Xt3I5NBLR58UmH48iBdgR3pygXi1C5eBvQ2rdNVTL/uxw\\n3iULu8WcVBw8glzkdLNLDq94uqbW7/qyji7QWNkU+804sA0LEj4PWmO7B9k1LCLK\\nFV0Ppv+SJYMS2MhWmXPHnYVfeNaKJKPQpHsS2ep/hyjEO/3Fvm3o3cp6SrEkNGIH\\nGKeozlfV7MQj7tMHLqWddDBXtFwYVEmN0UJVafvGsQKBgQDsEVzb7DG/xlMpuDQv\\nqpLGWXR5DdAhzxVJzeh11Ongb+XxBOVSyTDKJLvOX4rI7tDqqN7b2pabUA3ZjvXv\\nhMPXr7AjL6yoJEzVCyo1+pi26OL99OcO+7gUDa0axHFt6LZuPw00r+2Nl0FqrXNR\\n+qUiPuZpp2MuKjMwLCwhr5YuqwKBgQDMPv6TPMl+oocoQ4uc84uY58Ywb7XZjmhY\\n8jXdA38I454EbQGeLja+2knDpDkF6g14cTzVJe/Ec4A6QmeIieTFSJKBV4VCZ3QN\\npLR4PrET7o9GL3mtwnNqcHPw2dLNHtn1OgsOUfJMWPIrFK2abVNAmYIBtOGA4eyH\\nrOl+NcAUhQKBgC4EKGy6OuxeFYHxZULRZjEB6QFb3vFoM4cieyjU6w4T4ee8g5NC\\nop8U0AMnfp8yZkkHyAFlN6xoy3pYMrqQz7gwiA4j0e0ovk1dEspY4gHtnanRXmT+\\nTmCiVdb86ft5vG37HnDhxlWuYVMRIoSdbikhx7papauvEDFYuvWKC6VnAoGBAJQr\\nvxOhrauozNRw6//YzxUGT8kjwZEqtpiQXnMP7kDMn/4l9l6CuESMp6a+pH+d5FfU\\nDoWzF9Y01HlvYxyyrLxSgbZDf/FEi/S54BK7qEsFbftExclAn+o/2lyIKV2VXBmD\\nGjIxUM4CWOzX+3lkhlj/BEmop0+Qlr92uY1OASLhAoGAfTb/Le0Nf5bGLjK3hI9D\\no/oDI5Ryj5rTMxmG/wRjE+1Jm6BjFzEyH2CvnFonccyHQ+wGn61AgbRFLn+Tg5fz\\nZXpzD2Xq3Y/AXtrdaayK0wnpMvVE1bZt+ikeVAWX+gR79igTqSXRgCuyp+edsgcE\\nZ+2Eser4Z5BpqfFjqFW8MhY=\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"tooljettest@tooljet-279812.iam.gserviceaccount.com\",\n  \"client_id\": \"106795637455432158803\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/tooljettest%40tooljet-279812.iam.gserviceaccount.com\"\n}`\n\n\n\nClick on Test connection button to verify if the credentials are correct and that the API is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying BigQuery\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. Select the operation that you want to perform and click Save to create the query.\n\nClick on the run button to run the query. NOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\n\n\nList Datasets\n\n\nList Tables\n\n\nQuery\n\n\nInsert Record \n\n\nDelete Record \n\n\nUpdate Record\n\n\nCreate View\n\n\nCreate Table\n\n\nDelete Table\n\n\nList Datasets\nReturns list of datasets.\nOptional parameters:\n\nOptions: This can be used to filter the list.\n\n\nList Tables\nReturn list of tables within a dataset\nRequired parameters:\n\nDataset: Enter the dataset name.\n\n\nQuery\nReturn data based on the `Query`. `Query options` (Reference), and `Query result options` (Reference).\n\nInsert Record\n\nTo insert a record.\n\n\nDelete Record\n\nTo delete a record.\n\n\n:::info\nNOTE: Be careful when deleting records in a table. If you omit the WHERE clause, all records in the table will be deleted!\n:::\nUpdate Record\n\nTo update a record.\n\n\n:::info\nNOTE: Be careful when deleting records in a table. If you omit the WHERE clause, all records in the table will be updated!\n:::\nCreate View\n\nTo create a view.\n\n\nCreate Table\n\nTo create a table.\n\n:::info\nNOTE: visit -https://github.com/googleapis/nodejs-bigquery/blob/main/samples/createTable.js for more info on schema.\n:::\nDelete Table",
    "tag": "tooljet"
  },
  {
    "title": "Run JavaScript code",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/custom-js.md",
    "content": "\nid: run-js\ntitle: Run JavaScript code\n\nRun JavaScript code\nYou can write custom JavaScript code to interact with components and queries. To do that, you just need to create a new query and select Run JavaScript Code from the data sources dropdown.\n\n\n\nExample: Displaying random number\n\nLet's drag a button and a text widget inside a container widget.\nClick on the `+` on the query panel to create a query and select Run JavaScript code from the available datasources\nWrite the code in JavaScript editor and save the query:\n`jsx\nconst a = Math.floor(Math.random() * (10 - 1)) + 1;\nreturn a;`\n:::tip\nThe `return` statement is used to end the code and the value specified to the `return` statement will be stored in the `data` property of the query. \nex: `{{queries.runjs1.data}}`\n\nYou cannot use `console.log` in Run JavaScript code\n:::\n\n\nLet's edit the properties of widgets:\n\nAdd an event handler to the button - Select On Click event, Run Query action, and select the `runjs1` query that we created. This will run the JavaScript code every time the button is clicked.\nEdit the property of text widget - In the text field enter Random number: `{{queries.runjs1.data}}`. It will display the output as Random number: result from JS code\n\n\n\n\n\n\nYou can also write custom JavaScript code to get the data from External APIs and manipulate the response for graphical representation. Here's the tutorial on how we used custom JavaScript code to build an app using GitHub API.\nLibraries\nToolJet allows you to internally utilize these libraries:\n| Name        | Documentation |\n| ----------- | ----------- |\n| Moment      | https://momentjs.com/docs/ |\n| Lodash      | https://lodash.com/docs/ |\n| Axios       | https://axios-http.com/docs/intro |\n:::info\nIssues with writing custom JavaScript code? Ask in our Slack community.",
    "tag": "tooljet"
  },
  {
    "title": "WooCommerce",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/woocommerce.md",
    "content": "\nid: woocommerce\ntitle: WooCommerce\n\nWooCommerce\nToolJet can connect to WooCommerce databases to read and write data.\n\nConnection\nGetting Started\n\nConnection\nAuth\nYou may use [HTTP Basic Auth] by providing the REST API Consumer Key as the username and the REST API Consumer Secret as the password.\n- Host\n- Consumer key\n- Consumer secret\n\n:::info\nNOTE: For generating keys visit admin dashboard of woocommerce , more info: https://woocommerce.github.io/woocommerce-rest-api-docs/?javascript#authentication\n:::\nQuerying Woocommerce\nOperations\nCustomer\n\nlist customer\nupdate customer\ndelete customer\nbatch update customer\ncreate customer\nretrieve customer\n\nPRODUCT\n\nlist product\nupdate product\ndelete product\nbatch update product\ncreate product\nretrieve product\n\nORDER\n\nlist order\nupdate order\ndelete order\nbatch update order\ncreate order\nretrieve order\n\nCoupon\n\nlist coupon\ncreate coupon\n\n:::info\nNOTE: For more info visit https://woocommerce.github.io/woocommerce-rest-api-docs/?javascript.",
    "tag": "tooljet"
  },
  {
    "title": "RethinkDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/rethinkdb.md",
    "content": "\nid: rethinkdb\ntitle: RethinkDB\n\nRethinkDB\nToolJet can connect to RethinkDB databases to read and write data. For more info visit this doc.\n\nConnection\nToolJet connects to InfluxDB using :\n\nDatabase\nHost\nPort\nUsername \nPassword \n\nSupported queries:\n\n\nDelete database\n\n\nDelete Table\n\n\nCreate database\n\n\nCreate Table\n\n\nList table\n\n\nList database\n\n\nGet all documents\n\n\nInsert table data\n\n\nUpdate all table data\n\n\nUpdate by id\n\n\nDelete table data by id\n\n\nDelete all table data\n\n\nGet document from primary key\n\n\n:::info\nNOTE: Name field in all operation is database name if not given will take the default database used for connection.",
    "tag": "tooljet"
  },
  {
    "title": "OpenAPI",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/openapi.md",
    "content": "\nid: openapi\ntitle: OpenAPI\n\nOpenAPI\nToolJet has a data source for generating REST API operations from OpenAPI Specs.\nConnection\n\n\nConnections are generated from OpenAPI specifications. Currently supports Basic Auth, API Key, Bearer Token, OAuth 2.0\n\n\nAlso supports specifications with multiple authentications\n\n\nRead more \nQuerying OpenAPI\n\nOperations will be generated from specifications and each one will be different from other  \n\nCommon fields\n\nHost (Base URL)\n\nSome specs can have one or more base URLs/servers and specific operations may have separate Base URLs. So you can select the URL from the host select",
    "tag": "tooljet"
  },
  {
    "title": "MongoDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/mongodb.md",
    "content": "\nid: mongodb\ntitle: MongoDB\n\nMongoDB\nToolJet can connect to MongoDB to read and write data.\nConnection\nPlease make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nTo add a new MongoDB, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select MongoDB from the modal that pops up.\nToolJet requires the following to connect to your MongoDB.\n\nHost\nPort\nUsername\nPassword\n\nIt is recommended to create a new MongoDB user so that you can control the access levels of ToolJet.\n\nClick on 'Test connection' button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on 'Save' button to save the data source.\nQuerying MongoDB\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. Select the operation that you want to perform and click 'Save' to save the query.\n\nClick on the 'run' button to run the query. NOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\n\nList Collections\nFind One\nFind Many\nTotal Count\nCount\nDistinct\nInsert One\nInsert Many\nUpdate One\nUpdate Many\nReplace One\nFind One and Update\nFind One and Replace\nFind One and Delete\nAggregate\nDelete One\nDelete Many\nBulk Operations\n\nList Collections\nReturns list of collections\nFine One\nReturn a document which satisfy the given filter and options. Reference\nFine Many\nReturn list of documents which satisfy the given filter and options. Reference\nTotal Count\nReturns an estimation of the number of documents in the collection based on collection metadata. Reference\nCount\nReturns the number of documents based on the filter. Reference\nDistinct\nRetrieve a list of distinct values for a field based on the filter. Reference\nInsert One\nInsert a document. Reference\nInsert Many\nInsert list of documents. Reference\nUpdate One\nUpdate a document based on the filter. Reference\nUpdate Many\nUpdate many documents based on the filter. Reference\nReplace One\nReplace a document based on filter. Reference\nFind One and Update\nIf your application requires the document after updating, use this instead of `Update One`. Reference\nFind One and Replace\nIf your application requires the document after updating, use this instead of `Replace One`. Reference\nFind One and Delete\nIf your application requires the document after deleting, use this instead of `Delete One`. Reference\nAggregate\nAggregation operations are expressions you can use to produce reduced and summarized results. Reference\nDelete One\nDelete a record based on the filter. Reference\nDelete Many\nDelete many records based on the filter. Reference\nBulk Operations\nPerform bulk operations. Reference\nDynamic Quries\n```javascript\n{ amount: { $lt: '{{ components.textinput1.value }}' }}\n// Dates \n// supported: Extended JSON syntax\n{ createdAt: { $date: '{{ new Date('01/10/2020') }}'} }\n// not supported: MongoDB classic syntax\n{ createdAt: new Date('01/10/2020') }\n```",
    "tag": "tooljet"
  },
  {
    "title": "n8n",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/n8n.md",
    "content": "\nid: n8n\ntitle: n8n\n\nn8n\nToolJet can trigger n8n workflows using webhook URLs. Please refer this to know more about n8n.\nConnection\nGo to the data source manager on the left sidebar and click on `+` button to add new data source. Select n8n from the list of available data sources in the modal that pops-up.\nn8n webhooks can be called with or without an Authentication. You can keep the `Authentication type` as `none` if your webhook didn't have one or if it has one then you can choose the one from the dropdown and provide credentials:\nAuthentication Types\n\nBasic Auth: To connect your n8n webhooks using basic auth you'll need to provide the following credentials:\nUsername\nPassword\n\n\n\n\n\n\n\nHeader Auth: To connect your n8n webhooks using header auth the following fields are required:\nName / Key\nValue\n\n\n\n\n\n\n:::tip\nWebhook credentials and instance credentials are different. Please use the credentials that you use with the webhook trigger. Know more: Webhook Authentication.\n:::\nTrigger Workflow\nClick on `+` button of the query manager at the bottom panel of the editor and the select n8n as the datasource.\nYou can trigger a workflow with `GET/POST` URL. Choose the request type from the `Methods` dropdown and then provide the required fields:\n  - URL parameters (Support for GET & POST) `Optional`\n  - Body (Only for POST URL) `Required`\n",
    "tag": "tooljet"
  },
  {
    "title": "Airtable",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/airtable.md",
    "content": "\nid: airtable\ntitle: Airtable\n\nAirtable\nToolJet can connect to your Airtable account to read and write data. Airtable API key is required to create an Airtable data source on ToolJet. You can generate API key by visiting Airtable account page. \n\n:::info\nAirtable API has a rate limit, and at the time of writing this documentation, the limit is five(5) requests per second per base. You can read more about rate limits here Airtable API.\n:::\n:::tip\nThis guide assumes that you have already gone through Adding a data source tutorial.\n:::\nSupported queries\n\nListing records\nRetrieving a record\nCreating a record\nUpdating a record\nDeleting a record\n\nListing records\nThis query lists all the records in a table. The results are paginated and each page can have up to 100 records. \nRequired parameters:\n\nBase ID: To find the Base ID, first visit airtable.com/api. Select from the list of bases the base whose ID you'd like to find out. Example Base ID: `appDT3UCPffPiSmFd`\nTable name: Enter the table name whose data you want to fetch.\n\nOptional parameters:\n\nPage size: The number of records returned in each request. Must be less than or equal to 100. Default is 100.\noffset: If there are more records, the response will contain an offset. To fetch the next page of records, include offset in the next request's parameters.\n\n\nExample response from Airtable: \n`json\n{\n    \"records\": [\n        {\n            \"id\": \"recu9xMnUdr2n2cw8\",\n            \"fields\": {\n                \"Notes\": \"sdfdsf\",\n                \"Name\": \"dsfdsf\"\n            },\n            \"createdTime\": \"2021-05-12T14:30:33.000Z\"\n        },\n        {\n            \"id\": \"recyIdR7bVdQvmKXa\",\n            \"fields\": {\n                \"Notes\": \"sdfdsf\",\n                \"Name\": \"dfds\"\n            },\n            \"createdTime\": \"2021-05-12T14:30:33.000Z\"\n        },\n        {\n            \"id\": \"recAOzdIHaRpvRaGE\",\n            \"fields\": {\n                \"Notes\": \"sdfsdfsd\",\n                \"Name\": \"sdfdsf\"\n            },\n            \"createdTime\": \"2021-05-12T14:30:33.000Z\"\n        }\n    ],\n    \"offset\": \"recAOzdIHaRpvRaGE\"\n}`\nRetrieving a record\nRequired parameters:\n\nBase ID\nTable name \nRecord ID\n\n\nExample response from Airtable: \n`json\n{\n    \"id\": \"recu9xMnUdr2n2cw8\",\n    \"fields\": {\n        \"Notes\": \"sdfdsf\",\n        \"Name\": \"dsfdsf\"\n    },\n    \"createdTime\": \"2021-05-12T14:30:33.000Z\"\n}`\nCreating a record\nRequired parameters:\n\nBase ID\nTable name\nRecords\n\n\nExample Records:\n```json\n[\n    {\n        \"fields\": {\n            \"Notes\": \"sdfdsf\",\n            \"Name\": \"dsfdsf\"\n        }\n    },\n    {\n        \"fields\": {\n            \"Notes\": \"note1\",\n            \"Name\": \"dsfdsf\"\n        }\n    }\n]\n```\nClick on the `run` button to run the query.\n:::info\nNOTE: Query must be saved before running.\n:::\nExample response from Airtable:\n`json\n{\n    \"records\": [\n        {\n            \"id\": \"rec5RuZ1COoZGtGDY\",\n            \"fields\": {\n                \"Notes\": \"sdfdsf\",\n                \"Name\": \"dsfdsf\"\n            },\n            \"createdTime\": \"2022-02-07T20:25:27.000Z\"\n        },\n        {\n            \"id\": \"recaYbFPonNNu6Cwj\",\n            \"fields\": {\n                \"Notes\": \"note1\",\n                \"Name\": \"dsfdsf\"\n            },\n            \"createdTime\": \"2022-02-07T20:25:27.000Z\"\n        }\n    ]\n}`\nUpdating a record\nRequired parameters:\n\nBase ID\nTable name\nRecord ID\n\n\nExample body:\n\n\n\nClick on the `run` button to run the query.\n:::info\nNOTE: Query must be saved before running.\n:::\nExample response from Airtable:\n`json\n{\n    \"id\": \"recu9xMnUdr2n2cw8\",\n    \"fields\": {\n        \"Notes\": \"Example Notes\",\n        \"Name\": \"change\"\n    },\n    \"createdTime\": \"2021-08-08T17:27:17.000Z\"\n}`\nDeleting a record\nRequired parameters:\n\nBase ID\nTable name\nRecord ID\n\n\nClick on the `run` button to run the query.\n:::info\nNOTE: Query must be saved before running.\n:::\nExample response from Airtable:\n```json\n{\n    deleted: true\n    id: \"recIKsyZgqI4zoqS7\"\n}",
    "tag": "tooljet"
  },
  {
    "title": "Cosmosdb",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/cosmosdb.md",
    "content": "\nid: cosmosdb\ntitle: CosmosDB\n\nCosmosdb\nToolJet can connect to CosmosDB databases to read and write data. \nConnection\nTo add a new Azure Cosmos DB, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select CosmosDB from the modal that pops up.\nToolJet requires the following to connect to your Cosmos DB.\n\nCosmos DB Account End point\nCosmos DB Account Key\n\n:::info\nAzure Cosmos DB End point is the URL of the Cosmos DB service.\nAzure Cosmos DB Key is the key that is used to access the Cosmos DB service.\nYou can find the endpoint and key in the Azure Portal.\n:::\n\n\n![ToolJet - Data source - CosmosDB](/img/datasource-reference/cosmosdb/cosmosdb-connect.png)\n\n\nSupported queries:\n\nListing databases\nListing containers\nInserting item(s)\nRetrieving an item\nDeleting an item\nQuerying documents\n\nListing databases\nThis query lists all the databases in a Cosmos DB.\nListing containers\nThis query lists all the containers of a database in a Cosmos DB.\n| Fields      | description |\n| ----------- | ----------- |\n| database    | id of the database |\nInserting item(s)\nThis query inserts one or more items in a container of a database in a Cosmos DB.\n| Fields      | description |\n| ----------- | ----------- |\n| database    | id of the database |\n| container   | id of the container |\n| items       | items to be inserted. Example: `{{[{name: \"one\", val: 1}, {name:\"two\", val: 2}]}}` |\nRetrieving an item\nTo read a single item from a container of a database in a Cosmos DB, use the following query.\n| Fields      | description |\n| ----------- | ----------- |\n| database    | id of the database |\n| container   | id of the container |\n| item        | id of the item |\nDeleting an item\nTo delete an item from a container of a database in a Cosmos DB, use the following query.\n| Fields      | description |\n| ----------- | ----------- |\n| database    | id of the database |\n| container   | id of the container |\n| item        | id of the item |\nQuerying documents\nTo query documents from a container of a database in a Cosmos DB using SQL-like syntax, use the following query.\n| Fields      | description |\n| ----------- | ----------- |\n| database    | id of the database |\n| container   | id of the container |",
    "tag": "tooljet"
  },
  {
    "title": "run-py.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/data-sources/run-py.md",
    "content": "\nid: run-py\ntitle: Run Python code\n\nYou can write custom Python code to interact with components and queries. To do that, you just need to create a new query and select Run Python Code from the available datasources.\n\n\n\nExample: Using Python code to trigger component specific actions\n\nLet's drag a button and a text widget onto the canvas. We will set a text on the text component and trigger button click event from the Python query.\nClick on the `+` on the query panel to create a query and select Run Python code from the available datasources\n\nLet's write the code in Python Editor and save the query:\n```python\nclass Person:\n  def init(self, name, age):\n    self.name = name\n    self.age = age\ndef myfunc(self):\n    return \"Hello my name is \" + self.name\np1 = Person(tj_globals.currentUser.firstName, 36)\ncomponents.text1.setText(p1.myfunc())\ncomponents.button1.click()\n```\n- The code above has a function`myfunc`which returns a string and we using the component specific action to set the **text component**'s value from the Python query. We are also triggering the button click using`components.button1.click()`\n\n\n:::tip\n- ToolJet's global variables can be accessed using tj_globals. ex: `tj_globals.currentUser.firstName`\n- As of now, Run Python code only supports the Python standard library only.\n:::\n\nLet's edit the properties of widgets:\nAdd an event handler to the button - Select On Click event, Show alert action, and set a success message `Triggered using RunPy`. This will show a success alert popup whenever the button click event is triggered from the Python code.\nFor the text component, we don't have to edit any property since we are changing the value directly from the Python code.\n\n\n\n\n\n\nYou can also write custom Python code to get the data from External APIs and manipulate the response for graphical representation. \n:::info\nIssues with writing custom Python code? Ask in our Slack community.",
    "tag": "tooljet"
  },
  {
    "title": "Role-Based Access Control (RBAC) Glossary",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/org-management/permissions.md",
    "content": "\nid: permissions\ntitle: Permissions\n\nPermissions allow you to create and share resources to easily ensure what level of access each User has to ToolJet Apps and other resources.\nAdmins can invite Users to their workspaces and assign them to the Groups that have Permissions to access Apps, folders, or workspace variables. \n:::info\nSee Manage Users and Groups to learn how to invite users to ToolJet.\n:::\nRole-Based Access Control (RBAC) Glossary\n\nUsers - Users can be added to more than one or more Groups. Each User is associated with an email.\nGroups - By default, there are two groups: All Users and Admin. Additionally, you can create custom groups like Support, Engineering, etc.\nAll Users - Contains all the users in your workspace. When New Users are invited they are added to this group by default. \nAdmins - Contains all Admins in your workspace. Everyone added to this group will Permission to access all the ToolJet resources.\n\n\nApps, Folder, Workspace Variables - Resources that Admins can set permissions on.\n",
    "tag": "tooljet"
  },
  {
    "title": "Color Picker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/color-picker.md",
    "content": "\nid: color-picker\ntitle: Color Picker\n\nColor Picker\nColor Picker widget is used to select the desired color from the color picker\n\n\n\nProperties\nDefault Color\nThe data needs to be an valid hex color\n\nOne can change default color either from color picker or using fx (need to provide only respective hex value)\n\nExample:\n`json\nValid color : #000000 or #000\nInvalid Color : #0000, \"black\" , rgb(0,0,0) ,`\n\n\n\nEvents\nTo add an event to a color-picker component, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on + Add handler.\n\n\n\nOn change\nOn change event is triggered when the color is changed on the color-picker.\nLayout\n| Layout          | description                               | Expected value                                                                                                |\n| --------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display mobile view.  | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n| Style      | Description                                                                                                                                                                                                                                              |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |\n| setColor | Set the  color. | `color` eg - `#ffffff` |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nExample: Selecting/changing color from the color picker and getting respective hex, rgb and rgba value of selected color\n\nLet's start by creating a new app and then dragging the Color Picker  widget onto the canvas.\nClick on the Color Picker widget, a picker pop-up will appear, one can select desired color from the picker.\nIn order to close the appeared picker pop-up, one need's to move away mouse from the picker pop-up and picker pop-up will fade away.\nIn the Inspector, inside component, look for colorpicker, where one can get respective hex, rgb and rgba color\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Text",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/text.md",
    "content": "\nid: text\ntitle: Text\n\nText\nText widget can be used to display text.\n:::info\nUsers cannot enter and edit text.\n::: \nHow To Use Text Widget\n\nProperties\nText\nThis property sets the content/text inside the Text widget. Refer your query data with dynamic variables `{{queries.datasource.data.text}}` or populate it with sample values `Text goes here !`.\nShow loading state\nToggle `on` or `off` to show or hide the loading state. You can also click on the `Fx` next to it to set the value `{{true}}` and `{{false}}` dynamically. Shows a loading status if the value is `true`. This property is often used with the `isLoading` property of queries so that the table shows a spinner while the query is being run. Default value is `false`.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n| Style      | Description |\n| ----------- | ----------- | \n| Font Weight | You can change the font weight of the text in following ways: normal (default), bold, lighter, bolder |\n| Text Decoration | You can change the text decoration in following ways : none(default), overline, line-through, underline, overline underline |\n| Text Transformation | You can transform the text in following ways: none (default), uppercase, lowercase, capitalize |\n| Font Style | You can change the font style in following ways: normal(default), italic, oblique |\n| Line Height | You can change the line height by providing number as input (example - 1.5) |\n| Text Indent | You can change the text indent by providing the number as input (example - 10) |\n| Letter Spacing | You can change the letter spacing by providing the number as input  (example - 2) |\n| Word Spacing  | You can change the letter spacing by providing the number as input  (example - 2) |\n| Font Variant | You can change the font variant of the text in the following ways: normal (default), small-caps, initial, inherit |\n| Text Size | By default, the text size is set to 14. You can enter any value from 1-100 to set custom text size. |\n| Background Color | You can change the background color of the text component by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Text Color |  You can change the color of the text by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Align Text | You can align the text inside the widget in following ways: left, right, center, justified |\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Code Editor",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/code-editor.md",
    "content": "\nid: code-editor\ntitle: Code Editor\n\nCode Editor\nCode Editor widget is a versatile text editor for editing code and supports several languages. \n\n\n\nProperties\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\n\n\n\n| properties      | description | Expected value |\n| ----------- | ----------- | ----------------- |\n| Placeholder |  It specifies a hint that describes the expected value.| This field requires a `String` value |\n| Mode |  It is used to specify the language to be used for the code-editor.| See `info` below for the list of all supported languages |\n| Show Line Number |  This property is used to show or hide line numbers to the left of the editor.| This fields expects a boolean value `{{true}}` or `{{false}}` |\n:::info\n\nSupporting all commonly used languages.\n\nAPL\nASN.1\nAsterisk dialplan\nBrainfuck\nC, C++, C#\nCeylon\nClojure\nClosure Stylesheets (GSS)\nCMake\nCOBOL\nCoffeeScript\nCommon Lisp\nCrystal\nCSS\nCypher\nCython\nD\nDart\nDjango (templating language)\nDockerfile\ndiff\nDTD\nDylan\nEBNF\nECL\nEiffel\nElixir\nElm\nErlang\nFactor\nFCL\nForth\nFortran\nF#\nGas (AT&T-style assembly)\nGherkin\nGo\nGroovy\nHAML\nHandlebars\nHaskell\nHaxe\nHTML embedded (JSP, ASP.NET)\nHTML mixed-mode\nHTTP\nIDL\nJava\nJavaScript (JSX)\nJinja2\nJulia\nKotlin\nLESS\nLiveScript\nLua\nMarkdown (GitHub-flavour)\nMathematica\nmbox\nmIRC\nModelica\nMscGen\nMUMPS\nNginx\nNSIS\nN-Triples/N-Quads\nObjective C\nOCaml\nOctave (MATLAB)\nOz\nPascal\nPEG.js\nPerl\nPGP (ASCII armor)\nPHP\nPig Latin\nPowerShell\nProperties files\nProtoBuf\nPug\nPuppet\nPython\nQ\nR\nRPM\nreStructuredText\nRuby\nRust\nSAS\nSass\nSpreadsheet\nScala\nScheme\nSCSS\nShell\nSieve\nSlim\nSmalltalk\nSmarty\nSolr\nSoy\nStylus\nSQL (several dialects)\nSPARQL\nSquirrel\nSwift\nsTeX, LaTeX\nTcl\nTextile\nTiddlywiki\nTiki wiki\nTOML\nTornado (templating language)\ntroff (for manpages)\nTTCN\nTTCN Configuration\nTurtle\nTwig\nVB.NET\nVBScript\nVelocity\nVerilog/SystemVerilog\nVHDL\nVue.js app\nWeb IDL\nWebAssembly Text Format\nXML/HTML\nXQuery\nYacas\nYAML\nYAML frontmatter\nZ80\n\n\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout  | description |\n| ----------- | ----------- |\n| Show on desktop | Toggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on Fx to set the value `{{true}}` or `{{false}}`. |\n| Show on mobile | Toggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on Fx to set the value `{{true}}` or `{{false}}`. |\nStyles\n\n\n\n| Styles  | description | \n| ----------- | ----------- |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`. |\n| Disable | This is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |",
    "tag": "tooljet"
  },
  {
    "title": "Datepicker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/datepicker.md",
    "content": "\nid: datepicker\ntitle: Datepicker\n\nDatepicker\nThe Datepicker widget allows users to select a single value for date and time from a pre-determined set.\n\n\n\nHow To Use Datepicker Widget\n\nEvents\nTo add an event to a date-picker component, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on + Add handler.\nOn select\nOn select event is triggered when an date is selected.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\nDefault value\nThis value acts as placeholder for the date picker widget, if any value is not provided then the default value will be used from the picker. The default value needs to be a `String` with respect to the `format` field. Ex: If format is set to `MM/YYYY` then provide default value as `04/2022`.\nFormat\nThe format of the date selected by the date picker. Default date format is DD/MM/YYYY. Date format should be followed as ISO 8601 as mentioned in the moment documentation. This field requires a `String` input. Ex: `DD/MM`, `MM/YYYY`, `YY/MM`, `DD/MM/YYYY` etc.\nEnable time selection?\nToggle on or off to enable the time selection. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nEnable date selection?\nToggle on or off to enable the date selection. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nDisabled dates\nWe can give disabled dates property which will make specific dates disabled and cannot be selected. The default value needs to be an array of`Strings`.\nExample for disabling the 9th of January:\n`js\n{{['09-01']}}`\nNow user won't be able to select the mentioned date since it will be disabled. \nValidation\nCustom Validation\nAdd a validation for the date input in the widget using the ternary operator.\nExample of validation for selecting dates that are after the current date:\n`js\n{{moment(components.datepicker1.value, 'DD/MM/YYYY').isAfter(moment()) ? true : 'Date should be after today'}}`\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nBorder Radius\nUse this property to modify the border radius of the date-picker. The field expects only numerical value from `1` to `100`, default is `0`. \n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Modal",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/modal.md",
    "content": "\nid: modal\ntitle: Modal\n\nModal\nModal widget renders in front of a backdrop, and it blocks interaction with the rest of the application until the modal is closed. It can be used to add dialog boxes to your app for lightboxes, user notifications, forms, etc.\n\n\n\nHow To Use Modal Widget\n\nAdd widgets to Modal\nTo add widgets to the Modals please refer to Tutorial - Adding widgets to a modal\nProperties\nTitle\nTitle that should be shown on the header of the modal. \nLoading State\nLoading state can be used to show a spinner on the modal content. Loading state is commonly used with isLoading property of the queries to show a loading status while a query is being run. Enable the toggle On or click on `fx` to programmatically set the value `{{true}}` or `{{false}}` .\nHide title bar\nEnabling this option hides the title bar in the modal. The value `{{true}}` or `{{false}}` can be set programmatically by clicking on the `Fx` button next to it.\nHide close button\nEnabling this option hides the close button in the modal. The value `{{true}}` or `{{false}}` can be set programmatically by clicking on the `Fx` button next to it.\nHide on escape\nEnabling this option closes the modal(opened) whenever the escape key is pressed. The value `{{true}}` or `{{false}}` can be set programmatically by clicking on the `Fx` button next to it. This property is enabled by default.\n:::info\nNow hide the modal by simply clicking anywhere outside the modal (for preview or released apps).\n:::\nModal size\nSize of the modal. Options are `medium`, `small` and `large`. The default is `small`. You can also programmatically configure the value by clicking on the `Fx` and set the value to `sm`, `md` or `lg`.\nOptions\nUse default trigger button\nThe default trigger button is enabled by default, this button can be used to show the modal. The value `{{true}}` or `{{false}}` can be set programmatically by clicking on the `Fx` button next to it.\n:::info\nA modal can be triggered using the default trigger button, action or via JavaScript.\n:::\nTrigger button label\nIt can be used to set the label of the trigger button.\nEvents\nModal supports the following two events:\n- On open\n- On close\n:::info\nJust like any other event on ToolJet, you can set multiple handlers for the events supported by Modal. Check all the actions here.\n:::\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n| Style      | Description | value |\n| ----------- | ----------- | ------ |\n| Header background color | Change the background color of the header in modal | Enter the Hex color code or choose a color of your choice from the color picker |\n| Header title color | Change the color of the Title in modal | Enter the Hex color code or choose a color of your choice from the color picker |\n| Body background color | Change the background color of the body in modal | Enter the Hex color code or choose a color of your choice from the color picker |\n| Visibility | Toggle on or off to control the visibility of the default trigger button that comes with modal | You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the button will not visible after the app is released. By default, it's set to `{{true}}`. |\n| Disable | Toggle on to disable the default trigger button that comes with modal | You can programmatically change its value by clicking on the `Fx` button next to it, if set to `{{true}}`, the button will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Trigger button background color | Change the background color of the default trigger button of modal | Enter the Hex color code or choose a color of your choice from the color picker |\n| Trigger button text color | Change the color of the label in default trigger button of modal | Enter the Hex color code or choose a color of your choice from the color picker |\n:::info\nTrigger Button styles are only visible when Use default trigger button under Options is toggled on.",
    "tag": "tooljet"
  },
  {
    "title": "Components : Overview",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/overview.md",
    "content": "\nid: overview\ntitle: Overview\n\nComponents : Overview\nComponents are used to build the UI of the applications. They can be dragged onto the canvas from the Component Library and can be modified from the Properties Panel without needing to write any code. Event Handlers in Components allow end users to trigger queries and other application events to perform the Actions.\nAdding components\nComponents can be dragged and dropped from the Component Library(from the right side on app builder) on to the canvas. Components can be moved by simply click and hold, and can be resized from edges or borders.\n\n\n\nSelect multiple components\nFor moving the multiple components at once, simply shift+click, to select multiple components. Once grouped, the components can be moved on the canvas while maintaining their relative positions.\n\n\n\nYou can also create a selection triangle and move multiple components together by `click and drag`\n\n\n\n:::tip\nYou can also use many other Keyboard Shortcuts in ToolJet to copy, cut, paste components to the canvas.\n:::\nComponent properties\nEach Component can be modified and styled from the Properties Panel such as the data field, a toggle for disabling the component, or stylings like a background color. Properties can be modified directly or programmatically by using Bindings, which enables you to write JavaScript code.\n\n\n\nComponent Event Handlers\nEvent Handlers can be found in the Component's Property Panel or in the Advanced section of the Query. Event handlers can be used to trigger the queries, perform Component Specific Actions - CSA or for setting a variable.\n:::info Actions\nCheck all the available Actions here.\n:::\n\n\n\nBindings\nBindings allow you to get dynamic data into the components. Anything inside of `{{}}` is evaluated as a JavaScript expression in ToolJet.\nAny arbitrary JavaScript code can be written inside `{{}}`:\n`js\n{{(function () {\n        <your_javascript_code_here>\n    })()\n}}`\nor\n`js\n{{components.xyz.data.key === Sun ?? true : false}}`\n:::tip\nCheck out the How-to guides like changing color of text in table column, Enable/Disable a component using JavaScript, and more.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Calendar",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/calendar.md",
    "content": "\nid: calendar\ntitle: Calendar\n\nCalendar\nCalendar widget comes with the following features:\n- Day, month and week level views\n- Events\n- Resource scheduling\n\n\n\nProperties\nDate format\nDetermines the format in which any date passed to the calendar via any of the properties will be parsed. It also determines the format in which any date made available by the calendar via exposed variables will be displayed. It uses the date format conventions of moment.js. The default Date format is set to `MM-DD-YYYY HH:mm:ss A Z`.\nDefault date\nDetermines the date on which the calendar's view will be centered on. By default, the default date is set to the current date using moment.js i.e. `{{moment().format(\"MM-DD-YYYY HH:mm:ss A Z\")}}`. If the calendar is on `month` view, it will show the month on which this date exists. If the calendar is on `week` view, it will show the week on which this date exists. This property needs to be formatted using the `Date format` property which is configurable on the inspector.\nEvents\n`Events` property should contain an array of objects, each of which describes the events that the calendar needs to display.\nAssuming that you set the date format to `MM-DD-YYYY HH:mm:ss A Z`, setting the `Events` property to the following code snippet will display an event titled `Sample Event` at the first hour of this day, as displayed in the image of calendar at the beginning of this page.\n`javascript\n{{[\n  {\n      title: 'Sample event',\n      start: `${moment().startOf('day').format('MM-DD-YYYY HH:mm:ss A Z')}`,\n      end: `${moment().endOf('day').format('MM-DD-YYYY HH:mm:ss A Z')}`,\n      allDay: false,\n      tooltip: 'Sample event',\n      color: 'lightgreen',\n  }\n]}}`\nEvent object properties\n| Name | Description |\n|------|-------------|\n| title | Title of the event |\n| start | The date(and time) on which this event begins. Needs to be formatted in the `Date format` you've supplied |\n| end | The date(and time) on which this event ends. Needs to be formatted in the `Date format` you've supplied |\n| allDay | Optional. Qualifies the event as an 'All day event', which will pin it to date headers on `day` and `week` level views |\n| tooltip | Tooltip which will be display when the user hovers over the event |\n| color | Background color of the event, any css supported color name or hex code can be used |\n| textColor | Color of the event title, any css supported color name or hex code can be used |\n| textOrientation | Optional. If it is set to `vertical`, the title of the event will be oriented vertically. |\n| resourceId | Applicable only if you're using resource scheduling. This is the id of the resource to which this event correspond to. |\nYou may supply any other additional property to the event(s). These additional properties will available to you when the calendar widget\nexposes any of the events via its exposed variables.\nResources\nSpecifying resources will make the calendar categorize `week` view and `day` view for each of the resources specified.  \nFor example, to categorize week/day view into for three rooms, we specify `resources` this way:\n`javascript\n{{[\n    {resourceId: 1, title: 'Room A'},\n    {resourceId: 2, title: 'Room B'},\n    {resourceId: 3, title: 'Room C'},\n  ]}}`\nIf we specify the `resourceId` of any of the events as `1`, then that event will be assigned to `Room A`, generating the following calendar, assuming that we've set the view to `day` and are viewing the day on which this event exists.\n\n\n\nDefault view\nDetermines whether the calendar would display a `day`, a `week` or a `month`. Setting this property to anything other than these values will make the calendar default to `month` view.\nThe view that is currently selected will be exposed as the variable `currentView`.\nStart time on week and day view\nThis determines the time at which week view and day view cells begins. Keep in mind that this field accepts a date, but still only the time and timezone(if provided) are taken from this date. The date should be provided in the date format chosen by you in the first property field.\nEnd time on week and day view\nThis determines the time at which week view and day view cells ends. Keep in mind that this field accepts a date, but still only the time and timezone(if provided) are taken from this date. The date should be provided in the date format chosen by you in the first property field.\nShow toolbar\nDetermines whether the calendar toolbar should be displayed or not. Click on `Fx` button to programmatically determine the field value to `{{true}}` or `{{false}}`.\nShow view switcher\nDetermines whether the calendar's buttons that allow user to switch between `month`, `week` and `day` level views will be displayed. Click on `Fx` button to programmatically determine the field value to `{{true}}` or `{{false}}`.\nHighlight today\nDetermines whether the today's card on the calendar should be highlighted or not. Click on `Fx` button to programmatically determine the field value to `{{true}}` or `{{false}}`.\nShow popover when the event is clicked\nDetermines whether to display a popover whenever an event is clicked. Click on `Fx` button to programmatically determine the field value to `{{true}}` or `{{false}}`.\nEvents\n\n\n\nOn Event selected\nThis event is fired when the user clicks on a calendar event. \nLast selected event is exposed as `selectedEvent`.\non Slot selected\nThis event is fired when the user either clicks on an calendar slot(empty cell or empty space of a cell with event) or when they click and drag to select multiple slots.  \nLast selected slot(s) are exposed as `selectedSlots`.\nOn Date Navigate\nThis event is fired when the user clicks on `Today`, `Next` or `Back` buttons on the calendar. \nThe corresponding date to which the user navigated, will be exposed as `currentDate`.\nOn View Change\nThis event is fired when a different view is selected by the user. \nThe current view is exposed as `currentView`.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget. Under the General accordion,you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nCell size in views classified by resource\nWhen `resources` are specified, the calendar could take up quite a lot of horizontal space, making the horizontal scroll bar of calendar having to be relied upon all the time.  \nIf we set this property to `compact`, the cell sizes will be smaller in `week` and `day` views.\nHeader date format on week view\nThis format determines how the column header for each day in week view will be displayed. As with every other date format field in ToolJet, this follows the momentjs standard of date formatting. By default, its set to `DD MMM`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Text Input",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/text-input.md",
    "content": "\nid: text-input\ntitle: Text Input\n\nText Input\nText Input widget lets users enter and edit text.\n:::tip\nThe Text Input should be preferred when user input is a single line of text.\n:::\nHow To Use Text Input Widget\n\nProperties\nDefault value\nThe default value that the widget will hold when the app is loaded.\nPlaceholder\nIt specifies a hint that describes the expected value.\nEvents\n\n\n\nOn change\nThis event fires whenever the user types something on the text input.\nOn Enter Pressed\nThis event fires whenever the user presses the enter button on keyboard after entering some text on text input component.\nOn focus\nThis event fires whenever the user clicks inside the text input component.\nOn blur\nThis event fires whenever the user clicks outside the text input component.\n:::info\nCheck Action Reference docs to get detailed information about all the Actions.\n:::\nValidation\nRegex\nUse this field to enter a Regular Expression that will validate the password constraints.\nMin length\nEnter the number for a minimum length of password allowed.\nMax length\nEnter the number for the maximum length of password allowed.\nCustom validation\nIf the condition is true, the validation passes, otherwise returns a string that should be displayed as the error message. For example: `{{components.passwordInput1.value === 'something' ? true: 'value should be something'}}`.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nText Color\nUse this property to set the color of the text inside the text input component. You can select the color from the color picker or set the value using Hex color code.\nBorder color\nAdd a color to the border of the text-input component using this property. You can select the color from the color picker or set the value using Hex color code.\nBorder Radius\nUse this property to modify the border radius of the widget. The field expects only numerical values from `1` to `100`, and default is `0`. \nVisibility\nIt is to control the visibility of the widget. If `{{false}}` the widget will not be visible after the app gets deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will lock and become non-functional. By default, its value is set to `{{false}}`.\n:::info\nCheck the component specific actions available for this component here.",
    "tag": "tooljet"
  },
  {
    "title": "Map",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/map.md",
    "content": "\nid: map\ntitle: Map\n\nMap\nThe map widget can be used to pick or select locations on the Google map with the location's coordinates.\n\n\n\nExposed variables\nExposed variables can be used to get data from the widget.\n| variable      | description |\n| ----------- | ----------- |\n| bounds      | Viewport area of the map |\n| center      | It contains the locations' coordinates at the center of the bounding area |\n| markers     | A marker identifies a location on the map. `markers` contains the list of markers on the map |\n| selectedMarker | Object with the marker selected by the user |\nEvents\n| events      | description |\n| ----------- | ----------- |\n| On bounds change | Triggered when the bounding area is changed. This event is triggered after `bounds` variable is updated |\n| On create marker | This event is triggered when a new marker is created on the map |\n| On marker click | This event is triggered when any of the markers in the map is clicked |\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\n| properties      | description | Expected value |\n| ----------- | ----------- | ------------------ |\n| Initial location | It is the default location's coordinates that the map should focus on. | An object containing the latitude and langitude as key value pairs. ex: `{{ {\"lat\": 40.7128, \"lng\": -73.935242} }}` |\n| Default Markers | List of markers that should be shown on the map | An array of objects containing the coordinates. ex: `{{ [{\"lat\": 40.7128, \"lng\": -73.935242}] }}` | \n| Add new markers | This property should be enabled to add new markers to the map on click. | `On` by default, toggle `off` to disable adding new markers on the map. Can be programmatically configured by clicking on `Fx`, accepts values `{{true}}` or `{{false}}` |\n| Search for places | It can be used to show or hide auto-complete search box. | `On` by default, toggle `off` to disable search on the map. Can be programmatically configured by clicking on `Fx`, accepts values `{{true}}` or `{{false}}` |\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |",
    "tag": "tooljet"
  },
  {
    "title": "Container",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/container.md",
    "content": "\nid: container\ntitle: Container\n\nContainer\nContainers are used to group widgets together. You can move the desired number of widgets inside a container to organize your app better.\n\n\n\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers themouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout      | description |\n| ----------- | ----------- |\n| Show on desktop | This property have toggle switch. If enabled, the Container widget will display in the desktop view else it will not appear. This is enabled by default.|\n| Show on mobile | This property have toggle switch. If enabled, the Container wisget will display in the mobile view else it will not appear.|\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- |\n| Background Color |  You can change the background color of the Container by entering the `Hex color code` or choosing a color of your choice from the color picker. |\n| Border radius | Use this property to modify the border radius of the container. The field expects only numerical value from `1` to `100`, default is `0`. |\n| Border Color |  You can change the border color of the Container by entering the `Hex color code` or choosing a color of your choice from the color picker. |\n| Visibility | This is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`. |\n| Disable |  This property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Star rating",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/star-rating.md",
    "content": "\nid: star-rating\ntitle: Star rating\n\nStar rating\nStar rating widget can be used to display as well as input ratings. The widget supports half stars, and the number of stars can be set too.\n\n\n\nEvents\nOn Change\nThis event is triggered when a star is clicked.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\nLabel\nThe text to be used as the label for the star rating. This field expects a `String` value.\nNumber of stars\nInitial number of stars in the list on initial load. `default: 5`. This field expects an integer value.\nDefault no of selected stars\nThis property specifies the default count of stars that are selected on the initial load. `default: 5` (integer). This field expects an integer value.\nEnable half star\nToggle `on` to allow selection of half stars. `default: false` (bool). Click on `Fx` to programmatically define the value `{{true}}` or `{{false}}`.\nTooltips\nThis is used for displaying informative tooltips on each star, and it is mapped to the index of the star. `default: []` (array of strings ). Ex: `{{[\"bad\", \"okay\", \"good\", \"best\"]}}`\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nStar Color\nDisplay color of the star. `default: #ffb400` (color hex). Change color by providing `Hex color code` or choosing one from the picker.\nLabel color\nChange the color of label in widget by providing `Hex color code` or choosing one from the picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable",
    "tag": "tooljet"
  },
  {
    "title": "Form",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/form.md",
    "content": "\nid: form\ntitle: Form\n\nForm\nForm component can be used to get input from the user and store it in the connected datasource. Form component serves as a parent widget that can store different widgets like texts, input box, dropdown to allow selection, and a button for triggering the event.\n\n\n\nProperties\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| Button To Submit Form | The dropdown can be used to select the button that will be used as the submit button for the form | Any button that will be added as a child component inside the form component can be selected from the dropdown |\n| Loading state | Loading state can be used to show a spinner as the form content. Loading state is commonly used with isLoading property of the queries to show a loading status while a query is being run. | Switch the toggle On or click on `fx` to programmatically set the value `{{true}}` or `{{false}}`  |\n\n\n\nEvents\nTo add an event to a button group, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\nOn submit\nOn submit event is triggered when the button on the form component is clicked. Just like any other event on ToolJet, you can set multiple handlers for on submit event.\nOn invalid\nOn invalid event is triggered when the input on the form is invalid.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget. Under the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\nLayout\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to display mobile view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- | \n| Background color |  You can change the background color of the form by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Border radius | Use this property to modify the border radius of the form component. |\n| Border color |  You can change the color of the border of the form by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Visibility | Toggle on or off to control the visibility of the form. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n| Disable | Toggle on to lock the widget. You can programmatically change its value by clicking on the `Fx` button next to it, if set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Box shadow | This property adds a shadow to the widget. | You can use different values for box shadow property like offsets, blur, spread, and the color code. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Button",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/button.md",
    "content": "\nid: button\ntitle: Button\n\nButton\nButton widget can be used to take actions.\n\nProperties\nTo add an event to a button, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\nEvents\n\n\n\nOn click\nOn Click event is triggered when the button is clicked. \nOn hover\nOn hover event is triggered when the mouse cursor is moved over the button. Just like any other event on ToolJet, you can set multiple handlers for on click event.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\n\n\n\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| Button Text | It can be used to set the label of the button. | Any String value: `Send Message`, `Delete`, or `{{queries.xyz.data.action}}` |\n| Loading state | Loading state can be used to show a spinner as the button content. Loading state is commonly used with isLoading property of the queries to show a loading status while a query is being run. | Switch the toggle On or click on `fx` to programmatically set the value `{{true}}` or `{{false}}`  |\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to display mobile view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- | \n| Background color |  You can change the background color of the widget by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Text color |  You can change the color of the Text in button by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Loader color |  You can change the color of the loader in button by entering the Hex color code or choosing a color of your choice from the color picker. This will only be affective if the loading state property of the button is enabled. |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n| Disable | Toggle on to lock the widget. You can programmatically change its value by clicking on the `Fx` button next to it, if set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Border radius | Use this property to modify the border radius of the button. |\n| Border color | Add a color to the border of the button using this property. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Image",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/image.md",
    "content": "\nid: image\ntitle: Image\n\nImage\nImage widget is used to display images in your app.\n\n\n\nEvents\n\n\n\nOn click\nOn click event is triggered when an image is clicked.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\n\n\n\nURL\nEnter the URL of the image to display it on the widget.\nLoading state\nLoading state can be used to show a spinner as the image content. Loading state is commonly used with `isLoading` property of the queries to show a loading status while a query is being run. Switch the toggle On or click on `fx` to programmatically set the value `{{true}}` or `{{false}}`.\nAlternative text\nUsed for alt text of images.\nZoom buttons\nToggle this to enable zoom options inside image.\nRotate buttons\nToggle this on to enable rotate button in the image.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nBorder type\nChoose a border type for the image from available options:\n- None\n- Rounded\n- Circle\n- Thumbnail\nImage fit\nChoose a image fit - similar to object fit for the image from available options:\n- fill\n- cover\n- contain\n- scale-down\nBackground color\nAdd a background color to widget by providing the `HEX color code` or choosing the color of your choice from the color-picker.\nPadding\nAdds padding between the image and widget border. It accepts any numerical value from `0` to `100`.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Toggle Switch",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/toggle-switch.md",
    "content": "\nid: toggle-switch\ntitle: Toggle Switch\n\nToggle Switch\nThe toggle switch widget allows the user to change a setting between two states.\nThe Toggle switch widget should be used if we want to make a binary choice, such as turning something on or off or enable or disable.\nHow To Use Toggle Switch Widget\n\nProperties\nLabel\nThis property can be used to set a label for the switch. Default Label: Toggle label\nDefault status\nThe property is used to set the default status (enabled or disabled) of the toggle switch component when the app is loaded. By default, the checkbox component is set to `{{false}}`/disabled.\nEvent\nOn change\nThis event is triggered whenever the toggle switch is clicked.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nText color\nChange the color of the text in the widget by providig the `Hex color code` or choosing a color from the picker.\nToggle switch color\nChange the color of the toggle switch in the widget by providig the `Hex color code` or choosing a color from the picker.\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Date-range picker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/date-range-picker.md",
    "content": "\nid: date-range-picker\ntitle: Date-range picker\n\nDate-range picker\nThe date-range picker widget allows users to select a range of dates.\nHow To Use Date Range Picker Widget\n\nProperties\nDefault start date\nSet the start date to be selected by default in the widget\nDefault end date\nSet the start date to be selected by default in the widget\nFormat\nThe format of the date selected by the date picker. Default date format is DD/MM/YYYY. Date format should be followed as ISO 8601 as mentioned in the moment documentation.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nEvents\nDate range picker supports the following events:\nOn select\nThe On select event is triggered when the a start date and end date is selected on the picker. Just like any other event on ToolJet, you can set multiple handlers for on select event.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nBorder Radius\nUse this property to modify the border radius of the date range picker. The field expects only numerical value from `1` to `100`, default is `0`. \nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Filepicker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/file-picker.md",
    "content": "\nid: file-picker\ntitle: Filepicker\n\nFilepicker\nFilepicker widget allows the user to drag and drop files or upload files by browsing the filesystem and selecting one or more files in a directory.\n\n\n\n:::info\n File types must be a valid MIME type according to input element specification or a valid file extension.\nTo accept any/all file type(s), set `Accept file types` to an empty value.\n:::\n\n\n\n:::tip\nMIME type determination is not reliable across platforms. CSV files, for example, are reported as text/plain under macOS but as application/vnd.ms-excel under Windows.\n:::\nEvents\n\n\n\nOn file selected\nOn file selected event is triggered when one or more files are selected by the selector dialogue box.\nOn file loaded\nOn file loaded event is triggered when a file is loaded in the browser.\nOn file deselected\nOn file selected event can be triggered when one or more files are removed from the picker.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\nInstruction Text\nInstruction text can be set to give information on the file picker.\nUse Drop zone\nCreates a drag & drop zone. Files can be dragged and dropped to the \"drag & drop\" zone.\nUse File Picker\nOn clicking it invokes the default OS file prompt.\nPick multiple files\nAllows drag and drop (or selection from the file dialog) of multiple files. `Pick multiple files` is disabled by default.\nMax file count\nThe maximum accepted number of files The default value is `2`.\nAccept file types\nBy providing types, you can make the dropzone accept specific file types and reject the others.\nMax size limit\nMaximum file size (in bytes).\nMin size limit\nMinimum file size (in bytes).\n:::tip\nFiles can be accepted or rejected based on the file types, maximum file count, maximum file size (in bytes) and minimum file size (in bytes).\nIf `Pick multiple files` is set to false and additional files are dropped, all files besides the first will be rejected. \nAny file that does not have a size in the range of `Max size limit` and `Min size limit` will be rejected.\n:::\nOptions\n\n\n\nParse content\nParse the selected files, supports CSV, xls, and xlsx files.\nFile type\nIf Parse content is enabled, options to auto-detect files and parse content or parse selected file types.\n:::info\n- If Parse content option is toggled off, File Type option will not be available.\n- If the Parse content option is toggled on, it only parses the next file that is selected, not the already selected one.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nBorder Radius\nUse this property to modify the border radius of the filepicker widget. The field expects only numerical value from `1` to `100`, default is `0`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nActions\n| Action  | Description | Properties |\n| ----------- | ----------- | ------------ |",
    "tag": "tooljet"
  },
  {
    "title": "Range Slider",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/range-slider.md",
    "content": "\nid: range-slider\ntitle: Range Slider\n\nRange Slider\nRange sliders are widely used across different UIs. One of the main purposes is to filter, explore all the related content and available in the control and settings options.\n:::tip\nRange Sliders have \"Two handles\" option which allows user to select within a range.\n:::\n\n\n\nProperties\nMinimum value\nSet the minimum value for the slider. This field accepts any numerical value.\nMaximum value\nSet the maximum value for the slider. This field accepts any numerical value.\nValue\nSet the default value when the widget loads. This can be used to pre-fill the value based on your data and requirements.\nTwo handles\nThe slider will now have 2 dragging handles. It is used to define a range of values versus a single given value.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nLine color\nEnter the hexcode to set the default color for slider's track. \nHandle color\nEnter the hexcode to set the color for slider's handler. \nTrack color\nEnter the hexcode to set the color for slider's active portion on the track. \nVisibility\nSet the visivlity of the slider programmatically. The default value is `{{true}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Rich Text Editor",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/rich-text-editor.md",
    "content": "\nid: rich-text-editor\ntitle: Rich Text Editor\n\nRich Text Editor\nRich Text Editor can be used to enter and edit the text in HTML format.\nIt should be preferred for blog posts, forum posts or notes sections. The text is to be used as the label for the radio button.\n\n\n\nProperties\nPlaceholder\nIt specifies a hint that describes the expected value.\nDefault Value\nThe default value that the widget will hold when the app is loaded.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable",
    "tag": "tooljet"
  },
  {
    "title": "Checkbox",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/checkbox.md",
    "content": "\nid: checkbox\ntitle: Checkbox\n\nCheckbox\nCheckbox widget can be used for allowing the users to make a binary choice, e.g,. unselected or selected.\n:::info\nThe checkbox widget consists of a single checkbox input.\n:::\nHow To Use Checkbox Widget\n\nProperties\nLabel\nThe text is to be used as the label for the checkbox. This field expects a `String` input.\nDefault Status\nThe property is used to set the default status (enabled or disabled) of the checkbox widget when the app is loaded. By default, the checkbox component is set to `{{false}}`/disabled.\nEvents\nTo add an event to a checkbox component, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on + Add handler.\n\n\n\nOn check\nOn check event is triggered when checkbox input is checked.\nOn uncheck\nOn uncheck event is triggered when checkbox input is unchecked.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nText color\nChange the color of the Text in checkbox by entering the `Hex color code` or choosing a color of your choice from the color-picker. \nCheckbox color\nYou can change the color of the checkbox by entering the `Hex color code` or choosing a color of your choice from the color-picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |",
    "tag": "tooljet"
  },
  {
    "title": "Pagination",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/pagination.md",
    "content": "\nid: pagination\ntitle: Pagination\n\nPagination\nPagination enables the user to select a specific page from a range of pages. It is used to separate the content into discrete pages.\n:::tip\nYou can club pagination widget with the List View widget.\n:::\n\n\n\nProperties\nNumber of pages\nYou can use this to predefined the total number of pages. It is calculated by dividing the length of the data array that will be passed, by the data limit which is the number of posts we will show on each page. \nDefault page index\nIt is used to set and display the default page index when the app initially loads. You can also put a conditional logic to set its value as per your use case.\nEvent\nOn Page Change\nThis event is triggered whenever the user switches to another page index. You can explore various actions associated with this event as per app logic.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Circular Progress Bar",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/circular-progressbar.md",
    "content": "\nid: circular-progress-bar\ntitle: Circular Progress Bar\n\nCircular Progress Bar\nCircular progress bar widget can be used to show progress in a progress circle.\n\n\n\nProperties\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\n\n\n\n| properties  | description | Expected Value |\n| ----------- | ----------- | --------------- |\n| Text | We can set a text inside the progress circle.| It expects a `String`, you can also use js to dynamically update the text as the progress changes. |\n| Progress | It can be used to set the progress of the widget. | Progress should be an integer between 0 and 100.|\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout  | description |\n| ----------- | ----------- |\n| Show on desktop | Toggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on Fx to set the value `{{true}}` or `{{false}}`. |\n| Show on mobile | Toggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on Fx to set the value `{{true}}` or `{{false}}`. |\nStyles\n\n\n\n| properties      | description | Expected Value |\n| ----------- | ----------- | ------------------- |\n| Color | To define stroke color.| `HEX color code` or choose color from color-picker. |\n| Text color | To define color of the text inside circular progress bar.| `HEX color code` or choose color from color-picker. |\n| Text size | To define the size of the text | Value must between 0-100. |\n| Stroke width | To define the width of stroke | Value must between 0-100.|\n| Counter Clockwise | Whether to rotate progress bar in counterclockwise direction. | It accepts `{{true}}` and `{{false}}`, Default value is `false`.|\n| Circle ratio | To define ratio of the full circle diameter the progressbar should use. | It accepts numerical value and the default is `1`. |\n| Visibility | Toggle on or off to control the visibility of the widget. | You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nCircular progress bar widget uses react-circular-progress package. Check the repo for further more details about properties and styles.",
    "tag": "tooljet"
  },
  {
    "title": "Statistics",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/statistics.md",
    "content": "\nid: statistics\ntitle: Statistics\n\nStatistics\nStatistics can be used to display different statistical information.\n\n\n\nProperties\nPrimary value label\nThis property lets you add and remove primary value label.\nPrimary value\nThis property lets you add and remove primary value,the actual amount can be represented here.\nHide secondary value\nThis property lets you show/hide the secondary value from the statistics component. By default, this property is disabled. Toggle it on to hide the secondary value, you can also click on the `Fx` button next to it to dynamically set the value to `{{true}}` or `{{false}}`.\nSecondary value label\nThis property lets you add and remove secondary value label.\nSecondary value\nThis property lets you add and remove secondary value,the change in value can be represented here.\nSecondary sign display\nThis property lets you add and secondary sign either positive or negative,can be used to represent positive(increase) or negative(decrease) movement.Default value is positive.\nLoading state\nLoading state can be used to show a spinner on the statistics. Loading state is commonly used with `isLoading` property of the queries to show a loading status while a query is being run. Switch the toggle On or click on `fx` to programmatically set the value `{{true}}` or `{{false}}`.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nPrimary Label Colour\nYou can change the primary label color by entering the Hex color code or choosing a color of your choice from the color picker.\nPrimary Text Colour\nYou can change the primary text color of the primary label by entering the Hex color code or choosing a color of your choice from the color picker.\nSecondary Label Colour\nYou can change the secondary label color of the primary label by entering the Hex color code or choosing a color of your choice from the color picker.\nSecondary Text Colour\nYou can change the secondary text color of the primary label by entering the Hex color code or choosing a color of your choice from the color picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Table",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/table.md",
    "content": "\nid: table\ntitle: Table\n\nTable\nTables can be used for both displaying and editing data.\n\nTable data\n\n\n\nArray of objects to be displayed on the table. It is commonly used to display data from query (`{{queries.restapi1.data}}`). Table data expects an array of objects, example: \n`{{[{ id: 1, name: 'Sarah', email: 'sarah@example.com'}]}}`\nThe table component will auto-generate all the columns as soon as the expected table data(array of objects) is provided.\nColumns\n\n\n\nCell data types\nYou can define the cell types as per your table's data source using the following:\n\nString | Default: It is used to render the data for cell types: text or textarea,\nNumber: This cell type will only expect the numerical values and can be sorted in ascending or descending order\nBadge: It is a labeling component used to display data with badges for e.g status of a shipment\nMultiple badges: Similar to badge, used to display multiple data badges in the form of array of objects,\nTags: Used to display an array of objects in the form of tags, e.g status, levels, steps\nDropdown: When data is in the form of an array of options to be selected, e.g select priority\nRadio: Used to make a selection from a group of options, e.g select your salary-range\nMultiselect: Similar to dropdown but to collect multiple user inputs from a list of options,\nToggle switch: Allows a user to change a setting between two states, e.g select between Yes/No,\nDate picker: Allowing users to display and select dates, e.g delivery date\nImage: This cell type expects the URL of image and will display the image in the cell. It also has the option to style the image.\n\n:::info\nCheck this how-to guide on dynamically change the color of text in a row and column in the table.\n:::\nDisplaying Data\nThe data object should be an array of objects. Table columns can be added, removed, rearranged from the inspector. `key` property is the accessor key used to get data from a single element of a table data object. For example:\nIf the table data is:\n`js\n[\n    {\n        \"review\": {\n            \"title\": \"An app review\"\n        },\n    \"user\": {\n            \"name\": \"sam\",\n            \"email\": \"sam@example.com\"\n        },\n    }\n]`\nTo display email column, the key for the column should be `user.email`.\nSaving data\nEnable `editable` property of a column to make the cells editable. If a data type is not selected, `string` is selected as the data type.\nIf the data in a cell is changed, `changeSet` property of the table object will have the index of the row and the field that changed.\nFor example, if the name field of second row of example in the 'Displaying Data' section is changed, `changeSet` will look like this:\n`js\n{\n    2: {\n        \"name\": \"new name\"\n    }\n}`\nAlong with `changeSet`, `dataUpdates` property will also be changed when the value of a cell changes. `dataUpdates` will have the whole data of the changed index from the table data. `dataUpdates` will look like this for our example:\n`js\n[{\n    \"review\": {\n        \"title\": \"An app review\"\n    },\n    \"user\": {\n        \"name\": \"new name\",\n        \"email\": \"sam@example.com\"\n    },\n}]`\nIf the data of a cell is changed, \"save changes\" button will be shown at the bottom of the table. This button when clicked will trigger the `Bulk update query` event. This event can be used to run a query to update the data on your data source.\nValidation\nUnder column properties, expand the detailed view of a column type to access a toggle button called `make editable`. You can toggle it `ON` to apply the validations for each column respectively using the following.\nRegex\nUse this field to enter a Regular Expression that will validate the password constraints.\nMin length\nEnter the number for a minimum length of password allowed.\nMax length\nEnter the number for the maximum length of password allowed.\nCustom validation\nIf the condition is true, the validation passes, otherwise return a string that should be displayed as the error message. For example: `{{components.passwordInput1.value === 'something' ? true: 'value should be something'}}`\nAction buttons\n\n\n\nAction buttons will be displayed as the last column of the table. The styles of these buttons can be customised and `on click` actions can be configured. when clicked, `selectedRow` property of the table will have the table data of the row.\n| Property | Description |\n| -------- | ------------ |\n| Background color (Action Button) | Background color of the action button. |\n| Text color (Action Button) | Color of button-text of the action button. |\nOptions\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nServer-side pagination\nServer-side pagination can be used to run a query whenever the page is changed. Go to events section of the inspector and change the action for `on page changed` event. Number of records per page needs to be handled in your query. If server-side pagination is enabled, `pageIndex` property will be exposed on the table object, this property will have the current page index. `pageIndex` can be used to query the next set of results when page is changed.\nWhen Server-side pagination is enabled, you'll be able to set three other table properties:\n- Enable previous page button: When server-side pagination is enabled, this button is enabled by default. Toggle this off to disable the previous page button from the table.\n- Enable next page button: When server-side pagination is enabled, this button is enabled by default. Toggle this off to disable the next page button from the table.\n- Total records server side: Set a numerical value to display particular number of records.\nClient-side pagination\nClient-side pagination is enabled by default. When the client-side pagination is enabled(`{{true}}`), another property Number of rows per page will be shown that can be used to set the number of records per page. By default, the value is set to 10 and if it is disabled(`{{false}}`) then it will show all the records in the single page.\nServer-side search\nIf server-side search is enabled, `on search` event is fired after the content of `searchText` property is changed. `searchText` can be used to run a specific query to search for the records in your data source.\nShow download button\nShow or hide download button at the Table footer.\nHide/Show columns\nTable header has an option(Eye icon) to show/hide one or many columns on the table. \nShow filter button\nShow or hide filter button at the Table header. The following filters are available:\n- contains\n- does not contain\n- matches\n- does not match\n- equals\n- does not equal to\n- is empty\n- is not empty\n- greater than\n- greater than or equal to\n- less than\n- less than or equal to\nShow update buttons\nIt's enabled by default. Table footer will show two update buttons Save changes & Discard changes whenever a cell is edited. Toggle `off` to hide update buttons.\nBulk selection\nTo let the user select one or more rows from the current page of a table, enable 'Bulk selection' from the inspector. The values of selected rows will be exposed as `selectedRows`.\nHighlight selected row\nEnable this option to have the last selected(clicked on) row to be highlighted.\nDisable sorting\nEnable this option to lock the sorting of columns when clicked on column name.\nServer-side sort\nWhen Server-side sort is enabled, clicking on the column headers will not automatically sort the table, instead, the `Sort applied` event will be fired and the applied sorting will be exposed as `sortApplied`. You can use this data to run any query that feeds data to the table in a manner that reflects the sorting applied.\nServer-side filter\nWhen Server-side filter is enabled, applying filters will not automatically filter the table, instead, the `Filter changed` event will be fired and the applied filters will be exposed as `filters`. You can use this data to run any query that feeds data to the table in a manner that reflects the filters applied.\nShow search box\nIt can be used to show or hide Table Search box. Client-side search is enabled by default and server-side search can be enabled from the events section of the inspector. Whenever the search text is changed, the `searchText` property of the table component is updated. If server-side search is enabled, `on search` event is fired after the content of `searchText` property is changed. `searchText` can be used to run a specific query to search for the records in your data source.\nIf you don't wish to use the search feature altogether, you can disable it from the inspector.\nLoading state (Boolean)\nLoading state shows a loading skeleton for the table. This property can be used to show a loading status on the table while data is being loaded. `isLoading` property of a query can be used to get the status of a query.\nEvents\n\nRow hovered\nRow clicked\nSave changes\nCancel changes\nPage changed\nSearch\nSort applied\nCell value changed\nFilter changed\n\nRow hovered\nThis event is triggered when the mouse pointer is moved over a row in the table. The `hoveredRowId` exposed variable of the table will include the id of the latest hovered row and `hoveredRow` property of the table will have the data of the hovered row in the object format.\nRow clicked\nThis event is triggered when a table row is clicked. The `selectedRowId` exposed variable of the table will include the id of the selected row and the `selectedRow` property of the table object will have the table data of the selected row.\nSave changes\nIf any cell of the table is edited, the `save changes` button appears at the footer of the table. Save changes event is triggered when this button is clicked.\nCancel changes\nIf any cell of the table is edited, the `Discard changes` button appears at the footer of the table. Cancel changes event is triggered when this button is clicked.\nPage changed\nIf server-side pagination is enabled, this event is fired when the current page is changed. This event is triggered after updating the `pageIndex` variable.\nSearch\nThis event is triggered when a text is entered to the search input box of the table. `searchText` variable is updated before triggering this event.\nSort applied\nThis event is triggered when the column name header is clicked to apply sorting in `asc` or `desc`. The `sortApplied` variable is updated with an object having `column` and `direction` values.\nCell value changed\nIf any cell of the table is edited, the `cell value changed` event is triggered.\nFilter changed\nThis event is triggered when filter is added, removed, or updated from the filter section of the table. `filters` property of the table is updated to reflect the status of filters applied. The objects will have properties: `condition`, `value`, and `column`. \nExposed variables\n| variable      | description |\n| ----------- | ----------- |\n| currentData      | Data that is currently being displayed by the table ( including edits if any ) |\n| currentPageData  | Data that is displayed on the current page if pagination is enabled ( including edits if any )      |\n| pageIndex | Index of the current page, starting from 1\n| changeSet | Object with row number as the key and object of edited fields and their values as the value |\n| dataUpdates | Just like changeSet but includes the data of the entire row |\n| selectedRow | The data of the row that was last clicked. `selectedRow` also changes when an action button is clicked |\n| searchText | The value of the search field if server-side pagination is enabled |\nStyles\n| Style      | Description |\n| ----------- | ----------- |\n| Text color | Change the color of the text in table by providing `hex color code` or choosing one from the picker |\n| Action button radius | This field can be used to give a radius to all action buttons. The default value is `0` |\n| Table type | Select a type of table from the dropdown. |\n| Cell size |  This decides the size of table cells. You can choose between a `Compact` size for table cells or a `Spacious` size |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n| Disable | Toggle on to lock the widget. You can programmatically change its value by clicking on the `Fx` button next to it, if set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Border radius | Use this property to modify the border radius of the button. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Dropdown",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/dropdown.md",
    "content": "\nid: dropdown\ntitle: Dropdown\n\nDropdown\nThe Dropdown widget can be used to collect user input from a list of options.\nHow To Use Dropdown Widget\n\n:::tip\nDropdown options can be referred to your query data with dynamic variables.\n:::\n\n\n\nEvents\n\n\n\nEvent: On select\nOn select event is triggered when an option is selected.\nEvent: On search text changed\nThis event is triggered whenever the user searches through the options by typing on the dropdown's input box. The corresponding search text will be exposed as `searchText`.\nProperties\n\n\n\nLabel\nThe text is to be used as the label of the dropdown.\nDefault value\nValue of the default option\nOption value\nOption values are values for different options in the list of the dropdown. Refer your query data with dynamic variables `{{queries.datasource.data.map(item => item.value)}}` or populate it with sample values `{{[1,2,3]}}`\nOption labels\nOption labels are labels for different options in the list of the dropdown. Refer your query data with dynamic variables `{{queries.datasource.data.map(item => item.label)}}` or populate it with sample values `{{[\"one\", \"two\", \"three\"]}}`\nOptions loading state\nShow a loading state in the widget using this property. It is off by default, toggle on to enable it. You can also programmatically set the values `{{true}}` or `{{false}}` by clicking on the `Fx` button.\nValidation\nCustom validation\nAdd a validation for the options in dropdown widget using the ternary operator.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nBorder Radius\nUse this property to modify the border radius of the dropdown. The field expects only numerical value from `1` to `100`, default is `0`.\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nSelected text color\nChange the text color of the selected option in the widget by providing the `HEX color code` or choosing the color from color picker.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nAlign text\nYou can align the text inside the widget in following ways: left, right, center, justified \n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Vertical Divider",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/vertical-divider.md",
    "content": "\nid: vertical-divider\ntitle: Vertical Divider\n\nVertical Divider\nVertical Divider widget is used to add vertical separator between components.\n\n\n\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| properties      | description |\n| ----------- | ----------- |\n| Show on Desktop |  This property have toggle switch. If enabled, the divider will display in the desktop view else it will not appear. |\n| Show on Mobile |  This property have toggle switch. If enabled, the divider will display in the mobile view else it will not appear. |\nStyles\n\n\n\n| properties      | description |\n| ----------- | ----------- |\n| Divider Color |  It is used to set the color of the divider. Use hex code to set the background color. |\n| Visibility |  This property is used to set the visibility of the divider. The property accepts Boolean value. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Spinner",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/spinner.md",
    "content": "\nid: spinner\ntitle: Spinner\n\nSpinner\nSpinner widget can be used to provide a visual indication that an action is in progress by awaiting a change.\n\n\n\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nColor\nChange the color of the Spinner by entering the `Hex color code` or choosing a color of your choice from the color-picker. \nSize",
    "tag": "tooljet"
  },
  {
    "title": "Kanban",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/kanban-board.md",
    "content": "\nid: kanban\ntitle: Kanban\n\nKanban\nKanban widget allows you to visually organize and prioritize your tasks with a transparent workflow. You can set the number of columns to display, enable/disable the add cards button, and bind data to the cards.\n\n\n\nEvents\nTo add an event, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\n\nCard added\nCard removed\nCard moved\nCard selected\nCard updated\n\nJust like any other event on ToolJet, you can set multiple handlers for any of the above mentioned events.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\n\n\n\nProperties\n\n\n\n:::caution\nPlease keep in mind that you need to provide an `id` for each card in the `Card data` field \nand this `id` must be of type string.\n:::\n| Properties | description | Expected value |\n| ----------- | ----------- | ----------- |\n| Columns | Enter the columns data - `id` and `title` in the form of array of objects or from a query that returns an array of objects. | `{{[{ \"id\": \"1\", \"title\": \"to do\" },{ \"id\": \"2\", \"title\": \"in progress\" },{ \"id\": \"2\", \"title\": \"Completed\" }]}}` or `{{queries.xyz.data}}` |\n| Card data | Enter the cards data - `id`, `title` and `columnId` in the form of array of objects or from a query that returns an array of objects. | `{{[{ id: \"01\", title: \"one\", columnId: \"1\" },{ id: \"02\", title: \"two\", columnId: \"1\" },{ id: \"03\", title: \"three\", columnId: \"2\" }]}}` or `{{queries.abc.data}}` |\n| Enable Add Card | This property allows you to show or hide the `Add Cards` button at the bottom of every column. | By default its enabled, you can programmatically set `{{true}}` or `{{false}}` enable/disable button by clicking on the `Fx` next to it |\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout          | description                                             | Expected value                                                                                        |\n| --------------- | ------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- |\n| Show on desktop | Toggle on or off to display the widget in desktop view. | You can programmatically set the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display the widget in mobile view.  | You can programmatically set the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n\n\n\n| Style        | Description                                                                                                                                                                   |\n| ------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Disable      | If disabled or set to `{{false}}` the widget will be locked and becomes non-functional. By default, its disabled i.e. its value is set to `{{true}}` .                        |\n| Visibility   | This is to control the visibility of the widget. If `{{false}}`/disabled the widget will not visible after the app is deployed. By default, it's enabled (set to `{{true}}`). |\n| Width        | This property sets the width of the column.                                                                                                                                   |\n| Min width    | This property sets the min width of the column.                                                                                                                               |\n| Accent color | You can change the accent color of the column title by entering the Hex color code or choosing a color of your choice from the color picker.                                  |\nExposed variables\n\n\n\n| Variable | Description |\n| -------- | ----------- |\n| columns | The `columns` variable is an array of objects that includes the columns data in the respective objects. Since the columns variable is an array you'll need to specify the index of the object in the array to get the data within that object. Each object within a column has two keys - `id` and `title` and an array `cards` which is again an array of objects. Example: If you want to get the title of second card then you'll use `{{components.kanbanboard1.columns[1].title}}` - here we have specified the array index as `[1]` and then key which is the `title`. Similarly you can get the card details using `{{components.kanbanboard1.columns[0].cards[1].title}}` |\n| lastAddedCard | The variable `lastAddedCard` holds the properties of the card that has been added lastly. It holds the following data - `id`, `title`, and `columnId` of the last added card. You can get the values using `{{components.kanbanboard1.lastAddedCard.title}}` |\n| lastRemovedCard | The variable `lastRemovedCard` holds the properties of the card that has been recently deleted from the kanban. It holds the following data - `id`, `title`, and `columnId` of the recently deleted card. You can get the values using `{{components.kanbanboard1.lastRemovedCard.title}}` |\n| lastCardMovement | The variable `lastCardMovement` holds the properties of the card that has been recently moved from its original position. It holds the following data - `originColumnId`, `destinationColumnId`, `originCardIndex`, `destinationCardIndex` and an object `cardDetails` which includes `title`. You can get the values using `{{components.kanbanboard1.lastCardMovement.cardDetails.title}}` or `{{components.kanbanboard1.lastCardMovement.destinationCardIndex}}` |\n| lastUpdatedCard | The variable `lastUpdatedCard` holds `id`, `title`, and `columnId` of the latest modified card. You can get the values using `{{components.kanbanboard1.lastUpdatedCard.columnId}}` |",
    "tag": "tooljet"
  },
  {
    "title": "Timeline",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/timeline.md",
    "content": "\nid: timeline\ntitle: Timeline\n\nTimeline\nTimeline widget can be used to do a visual representation of a sequence of events\n\n\n\nProperties\nTimeline data\nData requirements: The data needs to be an array of objects and each object should have `title`, `subTitle`, `iconBackgroundColor` and `date` keys.\nExample:\n`json\n[ \n    { \"title\": \"Product Launched\", \"subTitle\": \"First version of our product released to public\", \"date\": \"20/10/2021\", \"iconBackgroundColor\": \"#4d72fa\"},\n    { \"title\": \"First Signup\", \"subTitle\": \"Congratulations! We got our first signup\", \"date\": \"22/10/2021\", \"iconBackgroundColor\": \"#4d72fa\"}, \n    { \"title\": \"First Payment\", \"subTitle\": \"Hurray! We got our first payment\", \"date\": \"01/11/2021\", \"iconBackgroundColor\": \"#4d72fa\"} \n]`\nHide date\nHide date can be used to hide the date time or Left Hand Side of the timeline widget\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n| Layout| description| Expected value|\n| ----- | ---------  | ------------- |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display mobile view.  | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n| Style      | Description |\n| ----------- | ----------- | \n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Tabs",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/tabs.md",
    "content": "\nid: tabs\ntitle: Tabs\n\nTabs\nA Tabs widget contains a number of defined containers that can be navigated through the tabs. Each tab acts as a container that can have different widgets placed inside it.\n\n\n\nHow To Use Tabs Widget\n\nProperties\nTabs\nThis property lets you add and remove containers from the tabs widget. Each container in the tab has its unique `id` , `title` and `disabled` for disabling individual tabs . This field expects an array of objects.\n`js\n{{[\n    { title: 'Home', id: '0' },\n    { title: 'Profile', id: '1',disabled:'true' },\n    { title: 'Settings', id: '2' }\n]}}`\nAdding background color to Tabs\nYou can specify the different color for each tab using the `backgroundColor` property and use hex color code or color name as the value.\n`js\n{{[ \n        { title: 'Home', id: '0', backgroundColor: '#81D4FA' }, \n        { title: 'Profile', id: '1', backgroundColor: 'blue' }, \n        { title: 'Settings', id: '2', backgroundColor: '#ecf0f1'} \n ]}}`\n\n\n\nDefault tab\nThis property selects the container in the tab which matches the corresponding `id`. By default, the value is set to `0`.\nHide tab\nIt allows you to hide all the tab titles defined in the Tabs property above. It accepts boolean values which can also be set using the toggle option or programmatically by clicking on the FX button.\nRender only active tab\nThis property is enabled by default. When enabled, only the active tab will be rendered and when disabled, all the tabs in the component will be rendered.\nEvents\n\n\n\nOn tab switch\nThis event is triggered when the tab is switched.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |\n| setTab | Set current tab. | `id` |\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nHighlight Color\nYou can change the highlight color of the selected tab by entering the Hex color code or choosing a color of your choice from the color picker.\nTab width\nTab width can be set as auto or equally split.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Password Input",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/password-input.md",
    "content": "\nid: password-input\ntitle: Password Input\n\nPassword Input\nA Password Input widget provides a way for the users to securely enter a password. The Password Input is a one-line plain text editor in which the text is obscured so that it cannot be read, by replacing each character with an asterisk (\"*\") symbol.\nHow To Use Password Input Widget\n\nProperties\nPlaceholder\nIt specifies a hint that describes the expected value. \nValidation\nRegex\nUse this field to enter a Regular Expression that will validate the password constraints.\nMin length\nEnter the number for a minimum length of password allowed.\nMax length\nEnter the number for the maximum length of password allowed.\nCustom validation\nIf the condition is true, the validation passes, otherwise return a string that should be displayed as the error message. For example: `{{components.passwordInput1.value === 'something' ? true: 'value should be something'}}`\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nBorder radius\nAdd a border radius to the number input widget using this property. It accepts any numerical value from `0` to `100`.\nBorder color\nAdd color to the border of the number input component using this property. Enter the hex color code or choose a color from the color picker.\nBackground color\nYou can change the background color of the widget by entering the Hex color code or choosing a color of your choice from the color picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Steps",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/steps.md",
    "content": "\nid: steps\ntitle: Steps\n\nSteps\nSteps are used to guide users through complex processes, making them easier and more intuitive.\n\n\n\nProperties\n\n\n\nSteps\nThis property lets you add and the steps. Every object represents a step.\n`json\n{{\n    [\n        { name: 'step 1', tooltip: 'some tooltip', id: 1},\n        { name: 'step 2', tooltip: 'some tooltip', id: 2},\n        { name: 'step 3', tooltip: 'some tooltip', id: 3},\n        { name: 'step 4', tooltip: 'some tooltip', id: 4},\n        { name: 'step 5', tooltip: 'some tooltip', id: 5}\n    ]\n}}`\nCurrent step\nThis property lets you select the current step you want to be highlighted.\nSteps selectable\nThis property when disabled will disable selection of steps.\nEvents\nOn select\nThis event is fired whenever the user selects any step.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nTheme\nYou can change the theme of widget by selecting available themes from dropdown.\nColour\nYou can change the  color of the widget by entering the Hex color code or choosing a color of your choice from the color picker.\nText Colour\nYou can change the  text color of the widget by entering the Hex color code or choosing a color of your choice from the color picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Tags",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/tags.md",
    "content": "\nid: tags\ntitle: Tags\n\nTags\nTags widget can be used to show array of data as tags.\n\n\n\nProperties\nTags\nIt can be used to set array of tags. It must be an array of objects like this:\n`js\n{{ \n    [ \n        { title: 'success', color: '#2fb344', textColor: '#fff' }, \n        { title: 'info', color: '#206bc4', textColor: '#fff'  }, \n        { title: 'warning', color: '#f59f00', textColor: '#fff'  }, \n        { title: 'danger', color: '#d63939', textColor: '#fff' } \n    ] \n}}`\nEach object should contain a title, color code of a particular tag, and also a text color.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility",
    "tag": "tooljet"
  },
  {
    "title": "Properties",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/icon.md",
    "content": "\nid: icon\ntitle: Icon \n\nAn Icon widget can be used to add icons(sourced from icon library). It supports events like on hover and on click.\n\n\n\nProperties\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| Icon | Use this to choose an icon form the list of available icons | You can also use the search bar in it to look for the icons | \nEvents\n\n\n\nTo add an event, click on the icon widget's configuration handle to open the widget properties on the components drawer on the right. Go to the Events section and click on + Add handler.\nThe Icon widget supports the following events:\n| Event  | Description |\n| ----------- | ----------- |\n| On hover      | This event is triggered when the cursor is hovered over the icon|\n| On click      | This event is triggered when the icon is clicked |\nJust like any other event on ToolJet, you can set multiple handlers for any of the above-mentioned events.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip: Set a tooltip text to specify the information when the user moves the mouse pointer over the widget.\nLayout\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to show/hide the widget on desktop screens. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to show/hide the widget on mobile screens. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`   |\nStyles\n| Style      | Description | Expected value |\n| ----------- | ----------- | ------------- |\n| Icon color |  You can change the color of the icon widget by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Visibility | This is to control the visibility of the widget. | If `{{false}}` the widget will not visible after the app is deployed. | It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`. |\n| Box shadow | This property adds a shadow to the widget. | You can use different values for box shadow property like offsets, blur, spread, and the color code. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Link",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/link.md",
    "content": "\nid: link\ntitle: Link\n\nLink\nLink widget allows you to add a hyperlink and navigate to the external URL.\n\n\n\nProperties\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| Link Target | This property sets the URL where the user needs to be taken on clicking the link | example: `https://dev.to/tooljet` or `{{queries.xyz.data.url}}` | \n| Link Text | This property sets the text for the link widget  | example: `Click here` or `Open webpage` | \n| Target Type | This property specifies the link to be opened in the same tab or new tab on clickinh the link | Options: `New Tab` & `Same Tab` |\nEvents\nTo add an event to a link, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\nOn Click\nOn Click event is triggered when the link is clicked. Just like any other event on ToolJet, you can set multiple handlers for on click event.\nOn hover\nOn Hover event is triggered when the link is hovered. Just like any other event on ToolJet, you can set multiple handlers for on click event.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\nLayout\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to show/hide the widget on desktop view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to show/hide the widget on mobile view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`   |\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- | \n| Text Color |  You can change the background color of the text by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Text Size | By default, the text size is set to 14. You can enter any value from 1-100 to set custom text size. |\n| Underline | You can change the underline of the text in the following ways: on-hover (default), never, always |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Radio Button",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/radio-button.md",
    "content": "\nid: radio-button\ntitle: Radio Button\n\nRadio Button\nRadio button widget can be used to select one option from a group of options.\nHow To Use Radio button Widget\n\n:::tip\nRadio buttons are preferred when the list of options is less than six, and all the options can be displayed at once.\n:::\n:::info\nFor more than six options, consider using Dropdown widget.\n:::\nEvent\nOn select\nThis event is triggered when an option is clicked.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\nLabel\nThe text is to be used as the label for the radio button. This field expects a `String` value.\nDefault value\nThe value of the default option.\nOption values\nList of values for different items/options. Refer your query data with dynamic variables `{{queries.datasource.data.map(item => item.value)}}` or populate it with sample values `{{[true, false]}}`\nOption labels\nList of labels for different items/options. Refer your query data with dynamic variables `{{queries.datasource.data.map(item => item.label)}}` or populate it with sample values `{{[\"yes\", \"no\"]}}`\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nText color\nChange the color of the text in the widget by providing the `Hex color code` or by choosing the color of your choice from the color picker.\nActive color\nChange the color of active radio button by providing the `Hex color code` or by choosing the color of your choice from the color picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nExample\n\n\n\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |",
    "tag": "tooljet"
  },
  {
    "title": "Textarea",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/textarea.md",
    "content": "\nid: textarea\ntitle: Textarea\n\nTextarea\nTextarea widgets let users enter and edit just text like Text Input widget.\n:::tip\nTextarea should be preferred over Text Input when user input is more than one sentence.\n:::\nHow To Use Textarea Widget\n\nProperties\nDefault value\nThis property is used for setting the initial value in the textarea on the initial load. This field expects a `String` value.\nPlaceholder\nIt specifies a hint that describes the expected value. This field expects a `String` value.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nBorder Radius\nUse this property to modify the border radius of the text area widget. The field expects only numerical value from `1` to `100`, default is `0`. \nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |\n| setText | Set the text. | `text` |\n| clear | Clear the text. |  |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Chart",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/chart.md",
    "content": "\nid: chart\ntitle: Chart\n\nChart\nChart widget takes the chart type, data and styles to draw charts using Plotly.js.\nHow To Use Chart Widget\n\nChart types\nLine charts\nData requirements: The data needs to be an array of objects and each object should have `x` and `y` keys.\nExample:\n`json\n[\n  { \"x\": \"Jan\", \"y\": 100},\n  { \"x\": \"Feb\", \"y\": 80},\n  { \"x\": \"Mar\", \"y\": 40},\n  { \"x\": \"Apr\", \"y\": 100},\n  { \"x\": \"May\", \"y\": 80},\n  { \"x\": \"Jun\", \"y\": 40}\n]`\nThe chart will look like this:\n\n\n\nBar charts\nData requirements: The data needs to be an array of objects and each object should have `x` and `y` keys.\nExample:\n`json\n[\n  { \"x\": \"Jan\", \"y\": 100},\n  { \"x\": \"Feb\", \"y\": 80},\n  { \"x\": \"Mar\", \"y\": 40},\n  { \"x\": \"Apr\", \"y\": 100},\n  { \"x\": \"May\", \"y\": 80},\n  { \"x\": \"Jun\", \"y\": 40},\n  { \"x\": \"Jul\", \"y\": 100},\n  { \"x\": \"Aug\", \"y\": 80},\n  { \"x\": \"Sep\", \"y\": 40}\n]`\nThe chart will look like this:\n\n\n\nPie charts\nData requirements: The data needs to be an array of objects and each object should have `label` and `value` keys.\nExample:\n`json\n[\n  { \"x\": \"Jan\", \"y\": 100},\n  { \"x\": \"Feb\", \"y\": 80},\n  { \"x\": \"Mar\", \"y\": 40},\n  { \"x\": \"Apr\", \"y\": 100},\n  { \"x\": \"May\", \"y\": 80},\n  { \"x\": \"Jun\", \"y\": 40}\n]`\nThe chart will look like this:\n\n\n\nProperties\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nTitle\nThis field is used to add a title to your selected chart.\nPlotly JSON chart schema\nIn the chart widget, you can also plot a chart with JSON data. So the JSON will contain the information about the chart type, chart data, etc. You can learn more about the JSON properties from here. \nAnyway, to work with the JSON you need to enable the `Use Plotly JSON schema` toggle from the properties section.\n\n\n\nIt will show the JSON description field to put the JSON data.\nThe result will be like this:\n\n\n\nMarker color\nModify the color of marker using the color picker or by providing a `HEX color code`.\nOptions\nLoading state\nToggle `on` the switch to display a loader on the widget. You can also programmatically define it's value by clicking on `Fx`, acceptable values are - `{{true}}` and `{{false}}`.\nShow Axes\nEnable or disable the `x` and `y` axes on the chart through this property. You can also programmatically define it's value by clicking on `Fx`, acceptable values are - `{{true}}` and `{{false}}`.\nShow grid lines\nToggle `on` or `off` to show or hide the grid lines on the chart. You can also programmatically define it's value by clicking on `Fx`, acceptable values are - `{{true}}` and `{{false}}`.\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nPadding\nDefine a space between the widget element and the widget border using `Padding` property. Use any numerical value between `1` to `100`.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable",
    "tag": "tooljet"
  },
  {
    "title": "PDF",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/pdf.md",
    "content": "\nid: pdf\ntitle: PDF\n\nPDF\nPDF widget can be used to embed the PDF file either by URL or as a Base64 encoded.\nProperties\nFile URL\nThe URL of the PDF file on the web. `data:application/pdf;base64,` format is supported and the input needs to be prefixed with `data:application/pdf;base64,`\nScale page to width\nIt can be toggled to adjust the PDF content to fit the width or height of the component\nShow page controls\nBy default, page number, previous & next button is displayed while hovering the PDF file. It can be toggled on or off.\nShow the download\nThe `Download` button on the PDF component allows you to download the pdf file. By default, Show the download button is enabled. Toggle it off to remove the `Download` button from PDF component, you can also click on the `Fx` button to set the values `{{true}}` or `{{false}}` dynamically.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n| Layout          | description                               | Expected value                                                                                                |\n| --------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display mobile view.  | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n| Style      | Description                                                                                                                                                                                                                                              |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Number Input",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/number-input.md",
    "content": "\nid: number-input\ntitle: Number Input\n\nNumber Input\nNumber Input widget lets users enter and change numbers.\nHow To Use Number Input Widget\n\n:::tip\nNumbers can be changed by using the arrow keys.\n:::\nProperties\nDefault value\nA predefined value that can be fetched from the number input widget if no changes are made in widget.\nMinimum value\nIt specifies the minimum value the number input can go to. This field accepts any numerical value.\nMaximum value\nIt specifies the maximum value the number input can go to. This field accepts any numerical value.\nPlaceholder\nIt specifies a hint that describes the expected value. This field accepts any numerical value.\nEvents\n\n\n\nOn change\nThis event fires whenever the value of the number input widget is changed.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget. Under the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nBorder radius\nAdd a border radius to the number input widget using this property. It accepts any numerical value from `0` to `100`.\nBorder color\nChange the border color number-input component by entering the Hex color code or choosing a color of your choice from the color picker.\nBackground color\nChange the background color of the number-input component by entering the Hex color code or choosing a color of your choice from the color picker.\nText color\nChange the color of the number in number-input component by entering the Hex color code or choosing a color of your choice from the color picker. \n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Iframe",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/iframe.md",
    "content": "\nid: iframe\ntitle: Iframe\n\nIframe\nIframe widget is used to embed another HTML page into the current one and display iframes in your app.\n\n\n\nProperties\nURL\nSet the URL of the page to embed.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the  mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Custom Component",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/custom-component.md",
    "content": "\nid: custom-component\ntitle: Custom Component\n\nCustom Component\nCustom Component can be used to do create your own React component when the needed functionality isn't available in other components.\n\n\n\nProperties\nData\nThe data needs to be an objects which needs to be passed as `data` props to the custom component\nExample:\n`json\n{{{\n    title: \"Hi! There\",\n    buttonText: \"Updated Text\",\n    queryName: \"runjs1\"\n}}}`\nCode\nThis field is used to add a React code for your custom component. The packages for the custom component can be imported from Skypack. For example, to import `React` package into the custom component it can be imported as `import React from 'https://cdn.skypack.dev/react'`.\nTooljet provides 3 props to interact with the app: `data`, `updateData` and `runQuery`.\n\n`data` is a shared object between custom component and Tooljet app.\n`updateData` is a function which accepts a single object used to update the data passed to the custom component.\n`runQuery` is a function which accepts a query name as a string used to run the query from the custom component.\n\nExample:\n```js\nimport React from \"https://cdn.skypack.dev/react\";\nimport ReactDOM from \"https://cdn.skypack.dev/react-dom\";\nimport { Button, Container, Link } from \"https://cdn.skypack.dev/@material-ui/core\";\nconst MyCustomComponent = ({data, updateData, runQuery}) => (\n    \n{data.title}\n {updateData({...data, title: 'Hello World!!'})}}>\n            {data.buttonText}\n        \n {runQuery(data.queryName)}}\n        >\n            Run Query\n        \n\n);\nconst ConnectedComponent = Tooljet.connectComponent(MyCustomComponent);\nReactDOM.render(, document.body);\n```\n:::info\n`Tooljet.connectComponent` acts as a HOC and it is required to get access to the data passed into the custom component and run the query\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n| Layout          | description                               | Expected value                                                                                                |\n| --------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display mobile view.  | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n| Style      | Description                                                                                                                                                                                                                                              |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "QR Scanner",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/qr-scanner.md",
    "content": "\nid: qr-scanner\ntitle: QR Scanner\n\nQR Scanner\nScan QR codes using device camera and hold the data they carry.\n\n\n\n:::note Known Issue\nYou might have to stick to the Safari browser in IOS as camera access is restricted for third-party browsers.\n:::\nExposed variables\nlastDetectedValue\nThis variable holds the data contained in the last QR code scanned by the widget. To fetch the data use `{{components.qrscanner1.lastDetectedValue}}`.\nEvents\nonDetect\nThis event is fired whenever the widget successfully scans a QR code.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\n:::caution Debugging tip\nBrowser camera APIs restrict this widget to only work in either `localhost` or `https`.\nSo if you're testing it out, be sure to either use `localhost` or `https`.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the \nmouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. \nNow hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable",
    "tag": "tooljet"
  },
  {
    "title": "List view",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/listview.md",
    "content": "\nid: listview\ntitle: List view\n\nList view\nList view widget allows to create a list of repeatable rows of data. Just like a container widget, you can nest other widgets inside of it and control how many times they repeat.\n\n\n\nHow To Use List view Widget\n\nEvents\nRow clicked\n\n\n\nTo add an event to a button, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\nRow clicked event is triggered when the button is clicked. Just like any other event on ToolJet, you can set multiple actions for a row clicked event.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\n\n\n\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| List data | Enter the data that you want to display into the widget. Data in the form of an array of objects or data from a query that returns an array of objects.| `{{ [ {id: 0, name: ABC, email: abc@bla.com}, {id: 1, name: XYZ, email: xyz@bla.com} ] }}` or `{{queries.xyz.data}}` |\n| Row height | Enter a numerical value to set the row height accordingly. | Any number between `1` to `100` |\n| Show bottom border | This property allows you to show or hide the row bottom border. | By default its `{{true}}`, set `{{false}}` to hide the border  |\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to display the desktop view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to display the mobile view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`   |\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- |\n| Background Color |  You can change the background color of the widget by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Border Color |  You can change the border color of the listview by entering the `Hex color code` or choosing a color of your choice from the color picker. |\n| Visibility | This is to control the visibility of the widget. If `{{false}}` the widget will not be visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`. |\n| Disable |  This property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Border radius | Use this property to modify the border radius of the list view. The field expects only numerical value from `1` to `100`, default is `0`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nExample: Displaying data in the list view\n\nLet's start by creating a new app and then dragging the List view widget onto the canvas.\n\n\n\n\n\nNow lets create a query and select the REST API from the datasource dropdown. Choose the `GET` method and enter the API endpoint - `https://reqres.in/api/users?page=1`. Save this query and fire it. Inspect the query results from the left sidebar, you'll see that it resulted in the `data` object having an array of objects.\n\n\n\n\n\nNow lets edit the `List data` property of the list view widget for displaying the query data. We will use JS to get the data from the query - `{{queries.restapi1.data.data}}`. Here the last `data` is a data object that includes an array of objects, the first `data` is the data resulted from the `restapi1` query. This will automatically create the rows in the widget using the data.\n\n\n\n\n\nFinally, we will need to nest widgets into the first row of list view widget and the widget will automatically create the subsequent instances. The subsequent rows will appear the same way you'll display the data in the first row.\n\n\n\n\n:::tip\nUse `{{listItem.key}}` to display data on the nested widgets. Example: For displaying the images we used `{{listItem.avatar}}` where avatar is one of the key in the objects from the query result.",
    "tag": "tooljet"
  },
  {
    "title": "Timer",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/timer.md",
    "content": "\nid: timer\ntitle: Timer\n\nTimer\nTimer widget lets users to count timer both upward and downward\n\n\n\nProperties\nDefault value\nIt specifies the initial value of timer. Format is: `HH.mm.ss.SS`.\nTimer type\nIt specifies If its a upward or downward counter. Select `Count Up` or `Count Down` from the dropdown or you can click on `Fx` to programmatically define the values `countUp` or `countDown`.\nEvents\nOn start\nThis event is fired when user clicks on start button.\nOn resume\nThis event is fired when user clicks on resume button.\nOn pause\nThis event is fired when user clicks on pause button.\nOn count down finish\nThis event is fired when the count down timer reaches zero.\nOn reset\nThis event is fired when user clicks on reset button.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Tree Select",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/tree-select.md",
    "content": "\nid: tree-select\ntitle: Tree Select\n\nTree Select\nTree Select widget is a group checkboxes in a TreeView which can be expanded or collapsed.\n\n\n\nProperties\nTitle\nThe text is to be used as the title for the tree select. This field expects a `String` input.\nStructure\nData requirements: The structure needs to be an array of objects and each object should have `label` and `value` keys. If you wish to have `children` under any of the checkbox, then `children` array needs to be passed with `label` and `value` keys.\nExample:\n`json\n[\n  {\n    \"label\": \"Asia\",\n    \"value\": \"asia\",\n    \"children\": [\n      {\n        \"label\": \"China\",\n        \"value\": \"china\",\n        \"children\": [\n          { \"label\": \"Beijing\", \"value\": \"beijing\" },\n          { \"label\": \"Shanghai\", \"value\": \"shanghai\" }\n        ]\n      },\n      { \"label\": \"Japan\", \"value\": \"japan\" },\n      {\n        \"label\": \"India\",\n        \"value\": \"india\",\n        \"children\": [\n          { \"label\": \"Delhi\", \"value\": \"delhi\" },\n          { \"label\": \"Mumbai\", \"value\": \"mumbai\" },\n          { \"label\": \"Bengaluru\", \"value\": \"bengaluru\" }\n        ]\n      }\n    ]\n  },\n  {\n    \"label\": \"Europe\",\n    \"value\": \"europe\",\n    \"children\": [\n      { \"label\": \"France\", \"value\": \"france\" },\n      { \"label\": \"Spain\", \"value\": \"spain\" },\n      { \"label\": \"England\", \"value\": \"england\" }\n    ]\n  },\n  { \"label\": \"Africa\", \"value\": \"africa\" }\n]`\n:::info\nNote: The `value` should be unique throughout the structure array.\n:::\nChecked Values\nChecked values is an array of values passed to select the checkboxes by default.\nExample:\n`json\n[\"asia\", \"spain\"]`\nExpanded Values\nSimilar to checked values, expanded values is an array of values passed to expand the node by default.\nExample:\n`json\n[\"asia\"]`\nEvents\n\n\n\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nOn change\nOn check event is triggered whenever the checkbox value is changed (checked or unchecked).\nOn check\nOn check event is triggered whenever the checkbox value is checked.\nOn uncheck\nOn uncheck event is triggered whenever the checkbox value is unchecked.\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nText color\nChange the color of the Label by entering the `Hex color code` or choosing a color of your choice from the color-picker.\nCheckbox color\nYou can change the color of the checkbox by entering the `Hex color code` or choosing a color of your choice from the color-picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Button group",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/button-group.md",
    "content": "\nid: button-group\ntitle: Button Group\n\nButton group\nButton group widget can be used to take actions.\n\n\n\nProperties\nEvents\nTo add an event to a button group, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\n\n\n\nOn click\nOn click event is triggered when the button group is clicked. Just like any other event on ToolJet, you can set multiple handlers for on click event.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\n\n\n\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| label | label is used to set the heading of the button group. | Any String value |\n| values |Values for button group items. | Array of strings  |\n| labels | It can be used to set the labels of the button group items. |  Array of strings|\n| Default  selected | Initial selected values can be set using this. | Array of strings  |\n| Enable multiple selection | Toggle this to allow multiple button selection. | Toggle to true/false |\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to display mobile view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- | \n| Background color |  You can change the background color of the widget by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Text color |  You can change the color of the Text in button by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n| Disable | Toggle on to lock the widget. You can programmatically change its value by clicking on the `Fx` button next to it, if set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Border radius | Use this property to modify the border radius of the button. |\n| Selected text color | Use this property to modify the background colour of text in selected button |\n| Selected background color | Use this property to modify the background colour of selected button |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "HTML",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/html.md",
    "content": "\nid: html\ntitle: HTML \n\nHTML\nHTML widget can be used to create your own HTML-CSS layout.\n\n\n\nProperties\nRaw HTML\nThe Raw HTML needs to be an HTML. In order to provide styles, one can add inline css to the respective HTML tags\nExample:\n```json\n\n\n\n\n\n          You can build your custom HTML-CSS template here\n        \n\n\n\n```\n\n\n\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n| Layout          | description                               | Expected value                                                                                                |\n| --------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display mobile view.  | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n| Style      | Description                                                                                                                                                                                                                                              |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Multiselect",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/multiselect.md",
    "content": "\nid: multiselect\ntitle: Multiselect\n\nMultiselect\nMultiselect widget can be used to collect multiple user inputs from a list of options.\n\n\n\nEvents\nOn select\nOn select event is triggered when an option is selected.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\nLabel\nThe text is to be used as the label for the multiselect widget.\nDefault value\nThe value of the default option. This should always be an array.\nOption values\nValues for different items/options in the list of the multiselect.\nOption labels\nLabels for different items/options in the list of the multiselect.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nBorder radius\nAdd a border radius to the multiselect using this property. It accepts any numerical value from `0` to `100`.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |\n| `selectOption` | Select options. | pass options as parameter. ex: `components.multiselect1.selectOption(1)` |\n| `deselectOption` | Deselect options.| pass options as parameter. ex: `components.multiselect1.deselectOption(1)` |\n| `clearSelections` | Clear all selection. |  ex: `components.multiselect1.clearSelections()` |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Divider",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/divider.md",
    "content": "\nid: divider\ntitle: Divider\n\nDivider\nDivider widget is used to add separator between components. \n\n\n\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| properties      | description |\n| ----------- | ----------- |\n| Show on Desktop |  This property have toggle switch. If enabled, the divider will display in the desktop view else it will not appear. |\n| Show on Mobile |  This property have toggle switch. If enabled, the divider will display in the mobile view else it will not appear. |\nStyles\n\n\n\n| properties      | description |\n| ----------- | ----------- |\n| Divider Color |  It is used to set the color of the divider. Use hex code to set the background color. |\n| Visibility |  This property is used to set the visibility of the divider. The property accepts Boolean value. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "SVG Image",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/widgets/svg-image.md",
    "content": "\nid: svg-image\ntitle: Svg Image\n\nSVG Image\nIt is used to render vector images. We can display images, icons, texts using this widget. SVGs are vector images and therefore are usually much smaller in file-size than bitmap-based images.\nDevelopers prefer having SVG (Scalable Vector Graphics) files as they are scalable and will render pixel-perfect at any resolution whereas JPEGs, PNGs and GIFs will not. \n\n\n\nProperties\nSVG Data\nEnter the SVG data of the image to display it on the widget. \n:::tip\nRefer to the resources where SVG files are downloaded for free. You copy-paste the below data in this field to see a new icon being rendered.\n:::\n`<svg fill=\"#000000\" xmlns=\"http://www.w3.org/2000/svg\"  viewBox=\"0 0 16 16\" width=\"32px\" height=\"32px\"><path d=\"M 7.5 1 C 3.910156 1 1 3.90625 1 7.488281 C 1 10.355469 2.863281 12.789063 5.445313 13.648438 C 5.769531 13.707031 6 13.375 6 13.125 C 6 12.972656 6.003906 12.789063 6 12.25 C 4.191406 12.640625 3.625 11.375 3.625 11.375 C 3.328125 10.625 2.96875 10.410156 2.96875 10.410156 C 2.378906 10.007813 3.011719 10.019531 3.011719 10.019531 C 3.664063 10.0625 4 10.625 4 10.625 C 4.5 11.5 5.628906 11.414063 6 11.25 C 6 10.851563 6.042969 10.5625 6.152344 10.378906 C 4.109375 10.019531 2.996094 8.839844 3 7.207031 C 3.003906 6.242188 3.335938 5.492188 3.875 4.9375 C 3.640625 4.640625 3.480469 3.625 3.960938 3 C 5.167969 3 5.886719 3.871094 5.886719 3.871094 C 5.886719 3.871094 6.453125 3.625 7.496094 3.625 C 8.542969 3.625 9.105469 3.859375 9.105469 3.859375 C 9.105469 3.859375 9.828125 3 11.035156 3 C 11.515625 3.625 11.355469 4.640625 11.167969 4.917969 C 11.683594 5.460938 12 6.210938 12 7.207031 C 12 8.839844 10.890625 10.019531 8.851563 10.375 C 8.980469 10.570313 9 10.84375 9 11.25 C 9 12.117188 9 12.910156 9 13.125 C 9 13.375 9.226563 13.710938 9.558594 13.648438 C 12.140625 12.785156 14 10.355469 14 7.488281 C 14 3.90625 11.089844 1 7.5 1 Z\"/></svg>`\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility",
    "tag": "tooljet"
  },
  {
    "title": "App-Builder: Overview",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/app-builder/overview.md",
    "content": "\nid: overview\ntitle: Overview\n\nApp-Builder: Overview\nToolJet's App Builder allows you to build applications. ToolJet's app builder has the following major components:\n\nToolbar: configure app settings\nCanvas: Arrange the components to build the interface of app\nLeft-sidebar: Add pages, datasources, inspect the components, queries or variables, and debug the errors.\nComponents library(right sidebar): Drag any component or modify the property or styling\nQuery Panel: Create, edit or manage the queries\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "toolbar.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/app-builder/toolbar.md",
    "content": "\nid: toolbar\ntitle: Toolbar\n\nToolbar is present at the top of the app-builder, and is used to configure the app settings.\n\n\n\nApp name\nApp name can be edited from the left side of the toolbar next to the ToolJet logo.\nWhen a new app is created, by default its name is set to Untitled app\n\n\n\nGlobal Settings\nTo configure the app's global settings, click on the kebab menu(three vertical dots) on the left of the app name. Global settings include:\n\nHide heaeder for launched apps: Toggle this on to the hide the tooljet's header when the applications are launched\nMaintenance mode: Toggle this on to put the application in maintenance mode. When in maintenance mode, on launching the app, the user will get an error message that the app is under maintenance.\nMax width of canvas: Modify the width of the canvas in px or %. The default width is 1292 px.\nMax height of canvas: Modify the width of the canvas in px or %. The default height is 2400 px and currently it is the maximum height limit.\nBackground color of canvas: Enter the hex color code or choose a color from the picker to change the background color of the canvas. You can also click on the Fx to programmatically set the value.\n\n\n\n\nDesktop or Mobile layout\nSwitch the canvas mode in Mobile or Desktop layout from the toolbar.\nAdding existing component to mobile layout\nClick on the component handle to open component config inspector on the right side. Scroll down to the Layout section and enable Mobile Layout. The width of the widget will be adjusted to fit the Mobile Layout.\nAdding a new component to mobile layout\nSwitch the layout to mobile by clicking the button on the toolbar. Drag and drop a component to the canvas. This widget will not be shown on desktop layout unless Show on desktop is enabled from the component config inspector.\n:::info\nWidth of the component will be automatically adjusted to fit the screen while viewing the application in app viewer.\n:::\n\n\n\nUndo or Redo\nUse the undo or redo buttons from the toolbar to undo or redo any change on the canvas.\nYou can also Keyboard Shortcuts to perform such actions.\n\n\n\nVersion Manager\nCreate or Remove Versions of the applications from the Version Manager. You can also edit the version name from the edit button.\nWhen many developers are working on an app, Versioning allows them to save their own version of the app. This also prevents developers from overwriting the other developer's work.\n\n\n\nComments\nComment anywhere on the canvas and collaborate with other users in the workspace. Click on the comments button to enable it and then drop comment anywhere on the canvas.\n\n\n\nShare\nShare your applications with a unique URL generated automatically or edit the URL slug to personalize it.\n\nWhen Make the application public is off and URL is shared then the users will have to login to ToolJet to use the application. Toggle on the option then anyone on the internet will be able to access the application without logging in to ToolJet.\nToolJet generates the Embedded link which can be used to embed application on the webpages.\n\n\n\n\nPreview\nClicking on Preview button will open up the currently opened version of the app in the new tab. This is really handy when the app developer wants to immediately check the app preview in production.\n\n\n\nRelease\nRelease the app to publish the current version of the app and push the changes into the production.\n:::caution\nToolJet will block editing of the Released version of an app and will display a prompt to create a new version to make the changes. This is to prevent accidentally pushing an unfinished app to the live version.\n:::\n\n",
    "tag": "tooljet"
  },
  {
    "title": "canvas.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/app-builder/canvas.md",
    "content": "\nid: canvas\ntitle: Canvas\n\nCanvas is the center area of the ToolJet app builder where the application is built. You arrange the components by dragging them from the Components library(right-sidebar).\n\n\n\nArrange Components\nAll the components are fully interactive in editor mode - to prevent interaction you can click and hold the Component Handle to change component's position.\n\n\n\nResize Components\nComponents on the canvas can be resized from the edges.\nYou can precisely set the position of selected components using keyboard arrow keys after clicking the component handle.\n\n\n\nGroup Components\nToolJet comes with flexible components to group other components together, such as Container and Form. When you drag and drop components in containers/forms they create a group of nested components. All components can be nested in this way.\nHide or Disable Components\nHide or Disable a component by setting its Visibility or Disabled property to `true`. Click on the component handle to open config inspector on right side. These values can also evaluate to true based on a truthy value. For example, you can use the property of one component to toggle the Visibility property of another component dynamically, you just need to write a conditional statement. \nFor example: We want to disable a button when a checkbox is checked so we can simple use `{{components.checkbox1.value}}` in Disable property of the button. `{{components.checkbox1.value}}` evaluates to `true` when the checkbox is checked, and false when unchecked.\n\n\n\nClone Components\nYou can clone existing components on the canvas by cmd/ctrl + d. Check other Keyboard Shortcuts",
    "tag": "tooljet"
  },
  {
    "title": "Query Manager",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/app-builder/query-panel.md",
    "content": "\nid: query-panel\ntitle: Query Panel\n\nThe Query Panel is present at the bottom of the app-builder, this is where you create queries to interact with connected datasources. You can perform API requests, query databases, or transform or manipulate data with JavaScript & Python.\nThe Query Panel has two sections:\n- Query Manager on the right that includes a list of all the created queries\n- Query Editor is used to configure the selected query\n\n\n\nQuery Manager\nQuery Manager will list all the queries that has been created in the application. Query Manager is used to:\nSearch\nOn the top of the query manager is search box that can be used to search for a specific query.\n\n\n\nAdd\nAdd button is used to add more queries in the application. When Add button is clicked, the Query Editor will show you a list of options for creating a query from: Rest API, connected datasources, ToolJet Database, JavaScript Code, Python Code or Add a new datasource.\n\n\n\nDelete\nDelete button will delete the selected query, the button will only show up when you hover over the query name.\n\n\n\nEdit\nEdit button is used edit the name of the selected query, the button will only show up when you hover over the query name.\n\n\n\nQuery Editor\nQuery editor used to configure the query parameters, preview or transform the data return by the query.\n\n\n\nTopbar\nOn the top of the query panel there are a few options:\nQuery Name editor\nEdit the name of the query by clicking on the edit button next to the default query name.\n\n\n\nPreview\nPreview gives you a quick look at the data returned by the query without triggering the query in the app.\nThe Preview of data is returned in two different formats:\nRaw\n\n\n\nJSON\n\n\n\nSave\nSave is used to save the changes whenever a change is made in query.\n\n\n\nRun\nRun is used to trigger the query, running the query will interact with the application unlike `Preview`.\n\n\n\nQuery Parameters\nQuery Parameters are the values required for the query to return a response from the server. Parameters include endpoints, methods, or operations. Query Parameters are different for each datasource.\n\n\n\nTransformation\nTransformations can be enabled on queries to transform the query results. ToolJet allows you to transform the query results using two programming languages JavaScript & Python. Check the detailed documentation on Transformations.\n\n\n\nAdvanced options\nRun this query on application load?\nEnabling this option will fire the query every time the app is loaded.\nRequest confirmation before running the query?\nEnabling this option show a confirmation modal to confirm `Yes` or `No` if you want to fire that query.\nRun this query on application load?\nEnabling this option show a success toast notification when the query is successfully triggered.\nEvent Handlers\nEvent Handler are used to add some action when a particular event happens. You can add event handlers to the query for the following events:\n\nQuery Success\nQuery Failure\n\n:::info\nLearn more about Event Handlers and Actions.\n:::\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Pages",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/app-builder/left-sidebar.md",
    "content": "\nid: left-sidebar\ntitle: Left-sidebar\n\nLeft-sidebar has the following options:\n\nPages\nInspector\nDatasources Manager\nDebugger\nTheme switch\n\n\n\n\nPages\nPages allows you to have multiple pages in a single application, making your ToolJet applications more robust and user-friendly.\nCheck the detailed documentation for Pages.\n\n\n\nInspector\nThe Inspector can be used to inspect the data of the queries, properties and values of the components that are there on the canvas, ToolJet's global variables and the variables that have been set by the user.\nCheck the detailed guide on using Inspector.\n\n\n\nDatasources Manager\nDatasources Manager is used to connect or remove the datasources. \nCheck the detailed Datasources documentation.\n\n\n\nDebugger\nThe debugger captures errors that happens while running the queries. For example, when a database query fails due to the unavailability of a database or when a REST API query fails due to an incorrect URL, the errors will be displayed on the debugger. The debugger also displays relevant data related to the error along with the error message.\n\n\n\nTheme switch",
    "tag": "tooljet"
  },
  {
    "title": "Component Config Inspector",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/docs/app-builder/right-sidebar.md",
    "content": "\nid: components-library\ntitle: Components Library\n\nThe Components Library on the right sidebar contains all of the available components. Use this to drag-and-drop a component from the library to the canvas. It organizes components into sections and you can enter a search term to quickly find a component you need.\n\n\n\n:::tip\nCheck the Components Catalog here to know more about specific component.\n:::\nComponent Config Inspector\nThe Component Config Inspector is also called as component inspector. It contains all the available settings for the selected component and is where you set values, update component names, and create event handlers. The Compoenent Inspector organizes settings into different sections, such as Property and Styles. \nTo open the Component Config Inspector, click on the component handle that is present on the top of the component including \u2699\ufe0f + Component Name and the component inspector will open up on the right side:\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "ToolJet Marketplace",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/marketplace.md",
    "content": "\nid: marketplace\ntitle: Marketplace\n\nToolJet Marketplace\nToolJet marketplace for plugins will allow users to install the custom plugins (datasources) for their ToolJet instances. This will allow ToolJet users to build their own custom plugins according to their requirements and then easily connect them to ToolJet.\nEnabling the marketplace for your instance\nUsers must add the following environment variable to the .env file to enable the marketplace feature:\n`bash\nENABLE_MARKETPLACE_FEATURE=true`\nOnce the marketplace feature is enabled, users can open the Marketplace page from the dropdown on the navbar of the dashboard. Users can also directly access the marketplace using the URL: `https://tooljet.yourcompany.com/integrations`\n:::info\nThe user logged-in should be the Administrator to access the marketplace page.\n:::\nInstalling a plugin\nWhen you create a plugin using the tooljet cli, an object is created in the plugins.json (`ToolJet/server/src/assets/marketplace/plugins.json`) file for that particular plugin.\nHere's an example of an entry created for AWS S3 plugin:\n`json\n[\n  {\n    \"name\": \"AWS S3 plugin\",\n    \"description\": \"Datasource plugin for AWS S3\",\n    \"version\": \"1.0.0\",\n    \"id\": \"s3\",\n    \"repo\": \"\",\n    \"author\": \"Tooljet\",\n    \"timestamp\": \"Mon, 31 Oct 2022 11:02:10 GMT\"\n  }\n]`\nNow to install the plugin to the marketplace, you'll have to install npm package to a plugin:\n`bash\nnpm i <npm-package-name> --workspace=<plugin-name-in-package-json>`\nFinally, run the build commands:\n`bash\nnpm install\nnpm run build --workspaces`\nOnce done, you'll find the plugin on the marketplace page.\nRemoving a plugin\nTo remove a plugin from the marketplace, you can simply remove the object entry of the plugin from the plugins.json(`ToolJet/server/src/assets/marketplace/plugins.json`) and then re-run the build commands.\nUsing a plugin as datasource\nThe flow for installing and using a plugin as a datasource is really simple. The steps are:\n- Go to the Marketplace\n- Click the Marketplace link in the left sidebar to view all available plugins.\n    \n\n\n```<img className=\"screenshot-full\" src=\"/img/marketplace/marketplacemain.png\" alt=\"Marketplace\" />\n\n</div>\n```\n\n\n\nClick on the Install button of the plugin that you want to install\n\nOnce installed, you can check the installed plugins from Installed on the left sidebar. You can also remove the plugins from the Installed section of the marketplace.\n    \n\n\n- Now, let's use the installed plugin as the datasource for an application. User will have to open the application, go to the Add Datasource button on the left sidebar of the app builder, and then select Plugins on the modal that pops-up. The Plugins section will include all the plugins installed via Marketplace. The next steps are same as connecting a datasource to the application.\n\n\n\n\n\nCreating a marketplace plugin\nThe steps for creating a Marketplace plugin are similar to those for creating plugins for ToolJet except that for a Marketplace plugin, the user will have to type `yes` when prompted `Is it a marketplace integration?` in the `tooljet command line`.\nThe steps to create a marketplace plugin are:\n\nInstall tooljet-cli:\n  `bash\n  npm i -g @tooljet/cli`\nBootstrap a new plugin using cli\n  `bash\n  tooljet plugin create bigquery`\nOn the CLI, you'll be prompted to enter a display name:\n  `bash\n  Enter plugin display name:`\nIn the next step, you'll be asked to choose a plugin type database, api, or cloud-storage\nNow choose if `Is it a marketplace integration?` by entering `y/N`\nEnter the repository URL if the plugin is hosted on GitHub or else just press enter to skip to the next step\nOnce done, all the plugin files will be generated inside the marketplace directory\n  `bash\n  creating plugin... done\n  Plugin: bigquery created successfully\n  \u2514\u2500 marketplace\n    \u2514\u2500 plugin\n        \u2514\u2500 bigquery`\n\n:::info\nFor more information on creating plugin for ToolJet, please see the documentation on creating plugins.",
    "tag": "tooljet"
  },
  {
    "title": "Tracking    ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/tracking.md",
    "content": "\nid: tracking\ntitle: Tracking\nslug: /tracking\n\nTracking\n:::tip\nToolJet does not store any data fetched from the data sources. ToolJet acts as a proxy and the data from data sources is sent to the client application without storing.\n:::\nServer\n:::tip\nSelf-hosted version of ToolJet pings our server to fetch the latest product updates every 24 hours. You can disable this by setting the value of `CHECK_FOR_UPDATES` environment variable to `0`. This feature is enabled by default.\n:::\nClient\nToolJet tracks anonymous usage data such as page loads and clicks. ToolJet tracks only the events and doesn't capture data from data sources.",
    "tag": "tooljet"
  },
  {
    "title": "Welcome to ToolJet Docs",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/getting-started.md",
    "content": "\nid: getting-started\ntitle: Getting Started\ndescription: ToolJet is an open-source low-code framework to build and deploy custom internal tools. ToolJet can connect to your data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ). Once the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc.\nslug: /\n\nWelcome to ToolJet Docs\n\nWhat is ToolJet\nToolJet is an open-source low-code framework to build and deploy custom internal tools. \nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ). \nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\n\nHow ToolJet works\n\n\n\nWith ToolJet, you can build apps in 3 simple steps:\n\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as `on click`, `on row selected`, `on page changed`, etc. ToolJet apps can be used in light and dark mode.\n:::tip\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n:::\nChoose your ToolJet\n\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\n\n:::info\n- Data security is top priority at ToolJet, read about our data security here.\n:::\nThe very quick quickstart\nLet's say you're an eCommerce company and your Customer Support/Operations team need a Support Tool/Admin panel for managing the orders, updating inventory, and track revenue and metrics. This quickstart will guide you through building your first custom internal tool in less than 5 minutes.\nYou will:\n- Create a database\n- Create a new application\n- Build the UI\n- Build queries and bind data to UI\n- Preview, Release and Share app\n:::tip\nBefore getting into the quickstart, Sign up and create your account on ToolJet.\n::: \nCreate a database\n\n\nNavigate to ToolJet DB Editor from the left sidebar on the dashboard\n    \n\n\n\n\nClick on Add Table button, enter Table name and Add columns from the drawer that slides from the right.\n    \n\n\n\n\nOnce the table is created, click on the Add new row button to add the data to the table and click Create.\n    \n\n\n\n\n:::info\nLearn more about the ToolJet Database here\n:::\nCreate a new application\n\n\nTo create a new ToolJet application, go to the Dashboard -> New App from scratch. \n\n\n\n:::info\nYou can also use the existing UI templates for your application or import an application to your workspace.\n:::\n\n\nWhen you click on create new app the App-builder will open up. You can rename your application from `untitled` to Support Tool from the top left of app-builder.\n    \n\n\n\n\nBuild the UI\n\nLet's build the UI of the application by dragging and dropping the components on the canvas.\n\nTo build the UI, we will use:\n\nTable for displaying the customers data \nText components for the Title and description of the app as the header\nText Input component for getting product name input from the user\nNumber Input component for getting product quantity and price input from the user\nButton component that will be used to trigger the query for inserting a row in the database using the button's OnClick event handler\n\n\n\n\n\n\n:::info\nToolJet application's User interface is constructed using Components like Tables, Forms, Charts, or Buttons etc. Check Components Catalog to learn more.\n:::\nBuild queries and bind data to UI\n\n\nWe can add a new datasource from the Datasource manager on the left-sidebar of the app builder but since we are using ToolJet Database we don't need to add any external datasource. Go to the Query Panel -> Run ToolJetDb Query\n\n\n\n:::info\nToolJet can connect to several databases, APIs and external services to fetch and modify data. Check Datasource Catalog to learn more.\n:::\n\n\nChoose a Table from the dropdown, Select the List rows option from the Operation dropdown, You can leave other query parameters. Scroll down and enable Run this query on application load - this will trigger the query when the app is loaded. \n\n\nClick on Create to create the query and then click Run to trigger the query and get response. You can also check the query response by clicking Preview button without firing the query.\n    \n\n\n\n\nGo to the Table properties by clicking on the component handle and bind the data returned by the query in the Table data property. When building apps in ToolJet anything inside `{{}}` is JavaScript and we javascript dot notation to get the data from query and populate the table using {{queries.tooljetdb1.data}}. The table will be auto-populated once the table data is entered.\n    \n\n\n\n\nLet's create another query that will get the data from the input fields and will add a new row in the tooljet database. Create New Query -> Select Table (Customers) -> Select Operation (Create row) -> add the following columns with the respective value:\n\nid - `{{components.textinput1.value}}`\nquantity - `{{components.numberinput1.value}}`\nprice - `{{components.numberinput2.value}}`\ncreated_at - `{{moment().format(\"DD/MM/YYYY hh:mm A\")}}` (We are using momentjs library to get the current date from the system rather than getting input by the user )\n\n\n\n\n:::tip\nYou can also add event handler to this query for On Success event to run the `tooljetdb1` query that populates the table, so that whenever this is successful the table is refreshed.\n:::\n\n\nNow, let's bind this query to the Add Product button. Click on the button handle to open its properties, Add an handler -> Select Event (On Click) -> Select Action (Run Query) -> Select Query (tooljetdb2). \n    \n\n\n\n\n:::info\n- You can manipulate the data returned by the queries using Transformations\n- You can also Run JS query or Python query to perform custom behavior inside ToolJet\n:::\nPreview, Release and Share app\n\nClick on the Preview on the top-right of app builder to immediately check the currently opened version of the app in production. \nClick on the  Release button to publish the currently opneded version of the app and push the changes to production.\nShare option allows you to share the released version of the application with other users or you can also make the app public and anyone with the URL will be able to use the app.\n\n:::tip\nYou can control how much access to users have to your ToolJet apps and resources using Org Management.\n:::\nWhat Can I Do With ToolJet\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started: \n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\nFor ToolJet Contributors\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n\n\n\n\n\n\nHelp and Support\n\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\n",
    "tag": "tooljet"
  },
  {
    "title": "Enabling the ToolJet Database for your instance",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/tooljet_database.md",
    "content": "\nid: tooljet-database\ntitle: ToolJet Database\n\nUse the ToolJet-hosted database to build apps faster, and manage your data with ease. ToolJet database require no setup and give you a powerful user interface for managing your data.\n\n\n\nEnabling the ToolJet Database for your instance\nRequires:\n- PostgREST server\n- Additional configuration for ToolJet server\nThis feature is only enabled if ENABLE_TOOLJET_DB is set to `true`.\nPostgREST server\nPostgREST is a standalone web server that turns your PostgreSQL database directly into queryable RESTful APIs which is utilized for Tooljet Database. This server only talks with ToolJet server and therefore does not have to be publicly exposed.\n:::tip\nIf you have openssl installed, you can run the following command `openssl rand -hex 32` to generate the value for `PGRST_JWT_SECRET`.\nIf this parameter is not specified then PostgREST refuses authentication requests.\n:::\n| variable           | description                                     |\n| ------------------ | ----------------------------------------------- |\n| PGRST_JWT_SECRET   | JWT token client provided for authentication    |\n| PGRST_DB_URI       | database connection string for tooljet database |\n| PGRST_LOG_LEVEL    | `info`                                          |\n:::info\nPlease make sure that DB_URI is given in the format `postgres://[USERNAME]:[PASSWORD]@[HOST]:[PORT]/[DATABASE]`\n:::\nAdditional ToolJet server configuration\n| variable           | description                                  |\n| ------------------ | -------------------------------------------- |\n| ENABLE_TOOLJET_DB  | `true` or `false`                            |\n| TOOLJET_DB         | Default value is `tooljet_db`                |\n| TOOLJET_DB_HOST    | database host                                |\n| TOOLJET_DB_USER    | database username                            |\n| TOOLJET_DB_PASS    | database password                            |\n| TOOLJET_DB_PORT    | database port                                |\n| PGRST_JWT_SECRET   | JWT token client provided for authentication |\n| PGRST_HOST         | postgrest database host                      |\nIf you intent to make changes in the above configuration. Please refer PostgREST configuration docs.\n:::tip\nWhen this feature is enabled, the database name provided for `TOOLJET_DB` will be utilized to create a new database during server boot process in all of our production deploy setups.\nIncase you want to trigger it manually, use the command `npm run db:create` on ToolJet server.\n:::\nFeatures\nToolJet database allows you to:\n\nMaintain tables of data in a secure database that's only accessible within your ToolJet organization.\nEdit, search, filter, sort, and filter data using a spreadsheet-like interface.\nQuickly build applications and write queries to interact with the ToolJet Database, just like any other datasource but without any setup.\n\nAccessing ToolJet Database\nOnce you log-in to your ToolJet account, from the left sidebar of the dashboard you can navigate to ToolJet Database.\nThe ToolJet Database is available on: ToolJet Cloud, Self-Host, and Enterprise Edition. You can view and manage your database and the data it contains using the Database editor UI.\n\n\n\nDatabase Editor\nYou can manage the ToolJet Database directly from the Database Editor. ToolJet Database organizes the data into tables that can have different structures. All the tables will be listed lexicographically on the left, click on any of the table to view the table data.\n\n\n\nAdd table\nFor creating a new table in ToolJet Database, click on the Add table button on the top left corner of the Database editor.\n\n\n\nWhen the Add table button is clicked, a drawer opens up from the right where you can enter the details of your new table.\n\n\n\nFor creating a new table, you'll need to:\n\nEnter a Table name\nAdd Columns (Any one column is required to be set as Primary key)\n\nSupported data types\n\nvarchar: varchar data type is used to store characters of indefinite length\nserial: serial is used to generate a sequence of integers which are often used as the Primary key of a table.\nint: It is a numeric data type used to store whole numbers, that is, numbers without fractional components.\nfloat: float is also a numeric data type that is used to store inexact, variable-precision values.\nboolean: boolean data type can hold true, false, and null values.\n\nClick on Create button to create a new table.\n\n\n\nSearch Table\nYou can enter a search term to search through all tables in the database.\n\n\n\nAdd column\nYou can add a new column to the existing table by clicking on the Add new column button from the top of the database editor.\nA drawer from the right will open up from where you can create a new column by entering the values for the new column such as:\n- Column name: name of the column (key)\n- Data type: Check available data types here\n- Default Value Any default value for the column (not mandatory)\n\n\n\nFilter\nYou can add as many filter as you want into the table by clicking on the Filter button present on the top of the database editor.\nAdding a filter on the table data\n\nSelect a column from the Columns dropdown\nChoose an operation\nEnter a value for the selected operation\n\nAvailable operations are:\n\nequals\ngreater than\ngreater than or equal\nless than\nless than or equal\nnot equal\nlike\nilike\nmatch\nimatch\nin\ncontains\ncontained\nnot\n\n\n\n\nSort\nTo sort the table data, click on the Sort button on top, select a column from the dropdown, and then choose an order ascending or descending.\n\n\n\nAdd new row\nTo add a new row to the existing table data, click on the Add new row button. A drawer will open from the right where you can enter the values for the new row.\n\n\n\nDelete records\nTo delete one or many records/rows, select on the checkbox at the right of the record or records that you want to delete. As soon as you select a single record, the button to delete record will appear on the top, click on the Delete record button to delete the selected records.\n\n\n\nDelete column\nTo delete a particular column, just click on the column name and the delete button will appear, click on it to delete the column.\n\n\n\nEdit or Delete a table\nWhen you click on the kebab menu (three vertical dots icon) on the right of the table name, you'll get two options: Edit and Delete.\n- Edit will allow you to rename the table\n- Delete will allow you to delete the table permanently\n\n\n\nQuerying data from the ToolJet database\nQuerying ToolJet database is as easy as querying any other datasource on ToolJet.\n\n\nGo to the query panel, and click on the +Add button to add a new query, and select Run ToolJetDb query\n\n\n\n\n\nEnter the Name of the table that you want to query, select an Operation from the dropdown, Create the query, and then Run the query to get the response.\n    \n\n\n\n\n:::info\n- Preview button on the query panel returns the query response without executing the query. Once clicked, the response will be displayed on the Preview section of the query panel which can be viewed in JSON or Raw.\n- When a new query is created, by default the query name is set to `tooljetdbN` (where N is a number) - you can rename the query by click on the query name or from the left sidebar of query panel.\n:::\nAvailable operations\nList rows\nThis operation returns the list of all the records in the table\nOptional parameters\n\nFilter: Add a filter to the query response by setting a column, operation and value.\nSort: Add a sort to the query response by setting a column and direction.\nLimit: Limit the query response. This parameter expects a numerical value. ex: 5\n\nCreate row\nThis operation creates a new record in the table\nRequired parameters\n\nColumns: Choose a column from the dropdown and enter a value for the new record.\n\nUpdate row\nThis operation updates an existing record in the table\nRequired parameter\n\nFilter: Add a condition by choosing a column, an operation, and the value for updating a particular record.\n\nDelete row\nThis operation deletes a record from the table\nRequired parameters\n\nFilter: Add a condition by choosing a column, an operation, and the value for deleting a particular record.\n\n:::info\nIf you have any other questions or feedback about ToolJet Database, please reach us out at hello@tooljet.com or join our Slack Community",
    "tag": "tooljet"
  },
  {
    "title": "Security",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/security.md",
    "content": "\nid: security\ntitle: Security\nslug: /security\n\nSecurity\nData storage\nToolJet does not store data returned from your data sources. ToolJet server acts as a proxy and passes the data as it is to the ToolJet client. The credentials for the data sources are handled by the server and never exposed to the client. For example, if you are making an API request, the query is run from the server and not from the frontend.\nDatasource credentials\nAll the datasource credentials are securely encrypted using `aes-256-gcm`. The credentials are never exposed to the frontend ( ToolJet client ).\nOther security features\n\nTLS: If you are using ToolJet cloud, all connections are encrypted using TLS. We also have documentation for setting up TLS for self-hosted installations of ToolJet.\nAudit logs: Audit logs are available on the enterprise edition of ToolJet. Every user action is logged along with the IP addresses and user information.\nRequest logging: All the requests to server are logged. If self-hosted, you can easily extend ToolJet to use your preferred logging service. ToolJet comes with built-in Sentry integration.\nWhitelisted IPs: If you are using ToolJet cloud, you can whitelist our IP address (3.129.198.40) so that your datasources are not exposed to the public.\nBackups: ToolJet cloud is hosted on AWS using EKS with autoscaling and regular backups.\n",
    "tag": "tooljet"
  },
  {
    "title": "Single Sign-On General Settings",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/user-authentication/general-settings.md",
    "content": "\nid: general-settings\ntitle: General Settings\n\nSingle Sign-On General Settings\n\n\nGo to the Workspace Settings (\u2699\ufe0f) from the left sidebar in the ToolJet dashboard\n\n\n\n\n\n\n\nSelect `SSO` from sidebar and then select General Settings\n\n\n\n\n\n\n\nEnable Signup\nYou can enable/disable `Enable signup`. If it is enabled, new account will be created for user's first time SSO sign in else only existing users will be allowed to sign in via SSO.\nAllowed domains\nYou can set allowed domains for SSO login, can add multiple domains comma separated. Allowed all domains by default.\nLogin URL\nYou can use the login URL to login directly to the workspace. This will be hidden if Multi-Workspace is disabled.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "User Lifecycle",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/user-authentication/user-lifecycle.md",
    "content": "\nid: user-lifecycle\ntitle: User Lifecycle\n\nUser Lifecycle\nSingle-Workspace\nUser onboarding\n\nIf no user is present in the system, there will be `Sign-up` option in the login page. User can sign up by entering their email address. Tooljet will be sending a welcome email with activation URL to the email address. User can follow the activation URL and onboard to ToolJet.\n\n\n\n  ![ToolJet - Single-Workspace sign up](/img/user-lifecycle/single-ws-signup.png)\n\n  \n\nUser with admin privileges can invite members\n\n\n\n  ![ToolJet - Single-Workspace invite user](/img/user-lifecycle/user-invite-sw.png)\n\n  \n\nInvited user will receive welcome email with activation URL, unregistered user can follow the link and setup Tooljet account\n\n\n\n  ![ToolJet - Single-Workspace accept invite](/img/user-lifecycle/accept-invite-sw.png)\n\n  \n\nInvited user can onboard through SSO login, without using an invitation link\n\n\n\n  ![ToolJet - Single-Workspace accept invite](/img/user-lifecycle/sso-onboard-sw.png)\n\n  \n\nIf `enable signup` option in enabled in SSO general settings, user can setup account through SSO login without an invite\n\n\n\n  ![ToolJet - Single-Workspace sign up using SSO](/img/user-lifecycle/sso-enable-signup-sw.png)\n\n  \nArchive user\n\n\nUser can be archived by workspace admin from using `Manage User` page\n\n\n\n\n\nUnarchive user\n\n\nUser can be unArchived by workspace admin from using `Manage User` page\n\n\n\n\n\n:::info\n  Archive or unarchive will affect user login, user won't be able to login using email id and password unless user is in active state\n  :::\nMulti-Workspace\n:::info\nCheck Multi-workspace docs here.\n:::\nUser onboarding\n\n\nUser can sign up using the sign up link provided on the login page, user will receive a welcome email with activation link. New workspace will be created for the user.\n\n\n\n\n\nUsers can be added to multiple workspaces. Users can create their own workspaces and manage them.\n\n\n\n\n\nExisting user in active state for a workspace can be invited and on boarded to other workspaces, User will receive an invitation email with join link. If a user does not exist in the system, then they will receive a welcome email to setup the account, user can follow the link and on setup the account, once its done the user will be assigned to the new workspace created for the user.\n\n\n\n\n\nInvited user can onboard through SSO login,  without using an invitation link from the workspace login page\n\n\n\n\n\nIf `enable sign up` option in enabled in SSO general settings for the workspace, user can setup account through SSO login without an invite from the workspace login page\n\n\n\n\n\nArchive user\n\n\nUser can be archived by workspace admin from using `Manage User` page\n\n\n\n\n\nUnarchive user\n\n\nUser can be unarchive by workspace admin from using `Manage User` page\n\n\n\n\n\n:::info\n  Archive or unarchive will not affect user login, user can login and use other workspaces where user is in active state.\n  :::\nSwitch between workspaces\n\n\n  ![ToolJet - Single-Workspace sign up using SSO](/img/user-lifecycle/switch.png)\n\n  \nUser status\n| Status   | Able to log in   | How to activate                      |\n| -------- | ---------------- | ------------------------------------ |\n| active   | Yes              |                                      |\n| invited  | No (Yes with SSO)| Login through SSO or invitation link |\n| archived | No               | Not able to activate. Invite from `Manage Users` page, status will be changed to invited |\nMulti-Workspace SSO flow\n\nDiagram shows how SSO configurations are chosen in common login page and workspace login page. Instance level SSO is configured in environment variables and Workspace level SSO is configured in respective `Manage SSO` page.\n\n\n\n    ![ToolJet - SSO Flow](/img/user-lifecycle/sso-flow.png)",
    "tag": "tooljet"
  },
  {
    "title": "GitHub Single Sign-on",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/user-authentication/sso/github.md",
    "content": "\nid: github\ntitle: GitHub\n\nGitHub Single Sign-on\n\n\nGo to the Workspace Settings (\u2699\ufe0f) from the left sidebar in the ToolJet dashboard\n\n\n\n\n\n\n\nSelect `SSO` from sidebar and then select GitHub. GitHub login will be disabled by default,\n\n\n\n\n\n\n\nEnable GitHub. You can see `Redirect URL` generated\n\n\n\n\n\n\n\nGo to GitHub Developer settings and navigate to `OAuth Apps` and create a project. `Authorization callback URL` should be the generated `Redirect URL` in Git manage SSO page.\n\n\n\n\n\n\n\nOpen the application details, and you can see the `Client ID`\n\n\n\n\n\n\n\nThen create `Client secrets` by clicking `Generate new client secret`\n\n\n\n\n\n\n\nLastly, enter Client Id and Client Secret in GitHub manage SSO page and save.\nThe GitHub sign-in button will now be available in your ToolJet login screen if you have not enabled Multi-Workspace.\n:::info\nShould configure `Host Name` if you are using GitHub Enterprise self hosted. Host name should be a URL and should not ends with `/`, example: `https://github.tooljet.com`\n:::\nMulti-Workspace\nIf you have enabled Multi-Workspace you can configure GitHub SSO as mentioned above, for setting default SSO for the instance use environment variable.\n| variable                              | description                                                   |\n| ------------------------------------- | -----------------------------------------------------------   |\n| SSO_GIT_OAUTH2_CLIENT_ID              | GitHub OAuth client id |\n| SSO_GIT_OAUTH2_CLIENT_SECRET          | GitHub OAuth client secret |\n| SSO_GIT_OAUTH2_HOST                   | GitHub OAuth host name if GitHub is self hosted |",
    "tag": "tooljet"
  },
  {
    "title": "Google Single Sign-on",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/user-authentication/sso/google.md",
    "content": "\nid: google\ntitle: Google\n\nGoogle Single Sign-on\n\n\nGo to the Workspace Settings (\u2699\ufe0f) from the left sidebar in the ToolJet dashboard\n\n\n\n\n\n\n\nSelect `SSO` from sidebar and then select Google. Google login will be disabled by default,\n\n\n\n\n\n\n\nEnable Google. You can see `Redirect URL` generated\n\n\n\n\n\n\n\nGo to Google cloud console and create a project.\n\n\n\n\n\n\n\nGo to the Google cloud console credentials page, and create an OAuth client ID\n\n\n\n\n\n\n\nYou'll be asked to select user type in consent screen. To allow only users within your workspace, select 'Internal', otherwise,\nselect 'External'.\n\n\n\n\n\n\n\nYou'll be led to an app registration page where you can set OAuth scopes. Select 'Add or remove scopes' and add the scopes\nuserinfo.email and userinfo.profile as shown in the image. This will allow ToolJet to store the email and name of the\nuser who is signing in\n\n\n\n\n\n\n\nSet the domain on which ToolJet is hosted as an authorized domain\n\n\n\n\n\n\n\nSet the `Redirect URL` generated at manage SSO `Google` page under Authorised redirect URIs\n\n\n\n\n\n\n\nLastly, set the `client id` in google manage SSO page. This value will be available from your Google cloud console credentials page\nThe Google sign-in button will now be available in your ToolJet login screen, if you are not enabled Multi-Workspace.\nMulti-Workspace\nIf you have enabled Multi-Workspace you can configure Google SSO as mentioned above, for setting default SSO for the instance use environment variable.\n| variable                              | description                                                   |\n| ------------------------------------- | -----------------------------------------------------------   |\n| SSO_GOOGLE_OAUTH2_CLIENT_ID           | Google OAuth client id |",
    "tag": "tooljet"
  },
  {
    "title": "AzureAD Single Sign-on",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/user-authentication/sso/openid/azuread.md",
    "content": "\nid: azuread\ntitle: AzureAD\n\nAzureAD Single Sign-on\n:::info\nTo construct a Well Known URL refer this link :: https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-protocols-oidc\n:::\n\n\nOpen your organisation page and select `app registration`\n\n\n\n\n\n\n\nSelect `new registration`\n\n\n\n\n\n\n\nOpen your organisation page and select App registration.\n\n\nEnter name, select supported account type and enter the redirect URL which can be copied from `Manage SSO -> Open Id -> Redirect URL, click on register`.\n\n\n\n\n\n\n\nApplication will be registered and will be able to view the details\n\n\nConfigure Application (Client) ID as `client id` in Open Id configuration page.\n\n\n\n\n\n\n\nClick on `Add certificate or secret` next to the Client credentials.\n\n\nClick on `+New Client Secret`\n\n\n\n\n\n\n\nGive a description, set the expiry, and then click on the `Add` button.\n\n\n\n\n\n\n\nSecret will be created, copy value and add it to the `client secret` section of Open Id SSO config.\n\n\nYou can brand the redirect page using the branding and properties option.\n\n\n\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Okta Single Sign-on",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/user-authentication/sso/openid/okta.md",
    "content": "\nid: okta\ntitle: Okta\n\nOkta Single Sign-on\n\n\nSign in to Okta developer console\n\n\nGo to the `Applications` section and click on the `Create App Integration`\n\n\n\n\n\n\n\nSelect `Sign-in method` as `OIDC - OpenID Connect` and `Application type` as `Web Application`. Go to the next step\n\n\n\n\n\n\n\nEnter `App integration name` and then enter `Sign-in redirect URIs` as `<YOUR-DOMAIN>/sso/okta`.\n\n\n\n\n\n\n\nCreate application and configure `Client Credentials` in the UI. \n\n\n\n\n\n\n\nIf you wish to show your application on Okta, edit the application and select `Login initiated by` section as `Either Okta or App`, set visibility according to your preference and `Login flow` should `Redirect to app to initiate login (OIDC Compliant)`.\n\n\n\n\n\n\n\n:::info Change Grant type\nTo change the Login flow to `Redirect to app to initiate login (OIDC Compliant)`, its mandatory to change the `Grant type` - `Client acting on behalf of a user` section to `Implicit (hybrid)` and tick `Allow Access Token with implicit grant type`.\n:::\n\nThe Okta sign-in button will now be available in your ToolJet login screen.\n\n:::info Find Well Known URL\nRefer to this Link: https://developer.okta.com/docs/concepts/auth-servers/#org-authorization-server",
    "tag": "tooljet"
  },
  {
    "title": "google-openid.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/user-authentication/sso/openid/google-openid.md",
    "content": "\nid: google-openid\ntitle: Google (Open ID)\n\n\n\nGo to the Workspace Settings (\u2699\ufe0f) from the left sidebar in the ToolJet dashboard\n\n\n\n\n\n\n\nSelect `SSO` from workspace options\n\n\n\n\n\n\n\nSelect `Open ID Connect` from the left sidebar\n\n\n\n\n\n\n\nSet Name as `Google` and get the Client ID and Client Secret from your Google Clound Console.\n\n\nSet the Well Known URL to `https://accounts.google.com/.well-known/openid-configuration`\n\n\nGenerating Cliend ID and Cliend Secret on GCS\n\n\nGo to Google cloud console and create a project.\n\n\n\n\n\n\n\nGo to the Google cloud console credentials page, and create an OAuth client ID\n\n\n\n\n\n\n\nYou'll be asked to select user type in consent screen. To allow only users within your workspace, select 'Internal', otherwise,\nselect 'External'.\n\n\n\n\n\n\n\nYou'll be led to an app registration page where you can set OAuth scopes. Select 'Add or remove scopes' and add the scopes\nuserinfo.email and userinfo.profile as shown in the image. This will allow ToolJet to store the email and name of the\nuser who is signing in\n\n\n\n\n\n\n\nSet the domain on which ToolJet is hosted as an authorized domain\n\n\n\n\n\n\n\nSet the `Redirect URL` generated at manage SSO `Open ID` page under Authorised redirect URIs\n\n\n\n\n\n\n\nNow, you can view your client ID and client secret from the Credentials page in API Console:\n\nGo to the Credentials page.\nClick the name of your credential or the pencil icon. Your client ID and secret are at the top of the page.\n",
    "tag": "tooljet"
  },
  {
    "title": "Using Multi-environments",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/release-management/multi-env.md",
    "content": "\nid: multi-environment\ntitle: Multi-Environment\n\nAvailable on: Enterprise Edition\nToolJet's multi-environment helps in streamlining workflows, thereby minimizing the chances of errors, and enables effective application management. Using multi-environment ensures that your ToolJet application is rigorously tested before it is made available to users.\n\n\n\nUsing Multi-environments\nToolJet comes with three default environments:\n- Production\n- Development\n- Staging\nSwitching environments\nFor switching the environment, click on the Environment Manager on the navbar of app-builder to open the dropdown and select a environment.\nThe datasource credentials are required to be entered specifically for every environment.\n:::tip Best Practice\nMake your default environment the Production environment - the environment in which the users use the final versions of your developed applications. This will help ensure that the production environment has access to all of the data sources.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Preview and Sharing Apps",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/tutorial/sharing-and-deploying.md",
    "content": "\nid: sharing-and-deploying\ntitle: Preview and Sharing Apps\n\nPreview and Sharing Apps\nPreview\nClicking on `Preview` will open up the currently opened version of the app in the new tab. This is useful if you want to immediately check the app in production.\n\nSharing an app\nOnce you have released a version of your app, you can share the app with others using a customised url. To share an app:\n\nClick on the Share button on the top-right corner\n\n\n\n\n\nIn the dialog box, turn on the toggle switch to `Make the application public` and shareable\n\n\n\n\n\nCreate your own `customised URL` for the app and click on `copy` to copy the URL\n\n\n\n\n\nYou can also `Embedd` your application using the embeddable link\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Adding a data source",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/tutorial/adding-a-datasource.md",
    "content": "\nid: adding-a-datasource\ntitle: Adding a data source\n\nAdding a data source\n:::tip\nThe data sources are created on app level and not on workspace level.\n:::\nDatasource manager is on the left-sidebar of the app builder. To add a new data source, click on the  `Add datasource` button.\n\nYou will be prompted to select the data source that you wish to add. Let's select PostgreSQL for this tutorial. You will then need to provide the credentials of your PostgreSQL database. The fields that are marked as `encrypted` will be encrypted before saving to ToolJet's database. \n\n\n![ToolJet - Tutorial - Adding a data source](/img/tutorial/adding-datasource/datasources.png)\n\n\nThe name of the data source must be unique (within the app) and can be changed by clicking on the data source name at the top of the prompt. Click on `Test Connection` button to verify the connection, this might take a couple of minutes. Once verified, save the data source. \n:::tip\nIf you are using ToolJet cloud and if your data source is not publicly accessible, please white-list our IP address ( shown while creating a new data source ).\n:::\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Multi-Workspace",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/tutorial/multiworkspace.md",
    "content": "\nid: multiworkspace\ntitle: Multi-Workspace\n\nMulti-Workspace\nUser can create their own workspaces, user who created workspace will be having admin privileges for the workspace.\n\n\n\nHierarchy\n\n\n\nPermissions\n:::tip\nPlease check the detailed doc on Permissions.\n:::\n\nThe administrator can manage users and groups of each workspace\nApplications and settings can not be shared between workspaces\nA user authorised to login to Tooljet will not have access to all workspaces, Usesr should be invited or signed up to a workspace to log-in to it.\n\nEnabling Multi-Workspace\nSet environment variable DISABLE_MULTI_WORKSPACE value to false  to enable the feature, and true  to disable it.\nWhen enabled\n\nWhen Multi-Workspace feature is enabled, user should login with username and password to log in to Tooljet.\nAdministrator can configure authentication methods for their workspaces.\nIf password login is enabled, switching to the workspace will happen without any other authorization since the user is already authorized with password login.\nUser logged in to Toojet and trying to switch to a workspace where SSO is enabled and password login is disabled, will be redirected to workspace login page and enabled SSO options will be shown\nUser can directly login to a workspace using workspace login URL, Administrator can view the URL Manage SSO -> General Settings -> Login URL.\n\nWhen disabled\n\nIf Multi-Workspace is disabled, Create workspace feature won\u2019t be available.\n",
    "tag": "tooljet"
  },
  {
    "title": "Debugger    ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/tutorial/debugger.md",
    "content": "\nid: debugger\ntitle: Debugger\n\nDebugger\nThe debugger captures errors that happens while running the queries. For example, when a database query fails due to the unavailability of a database or when a REST API query fails due to an incorrect URL, the errors will be displayed on the debugger. The debugger also displays relevant data related to the error along with the error message. Debugger is located on the left-sidebar.\n\nPin Debugger\nYou can click on the `pin` icon at the top-right corner of the debugger if you do not want the debugger to close. The debugger will remain open until it is unpinned.",
    "tag": "tooljet"
  },
  {
    "title": "Pages Panel",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/tutorial/pages.md",
    "content": "\nid: pages\ntitle: Pages\n\nPages allows you to have multiple pages in a single application, making your ToolJet applications more robust and user-friendly.\n\n\n\nPages Panel\nYou can open the Pages Panel by clicking on the Pages icon on the left sidebar of the app-builder.\n\n\n\nPanel Options\n\nAdd Page\nSettings\nPin\nSearch\n\nAdd Page\nOn the header of the Pages Manager, the + button that allows you to add more pages to your application\n\n\n\nOn clicking the + button, a new page will be added, enter the name for the page and press enter.\n\n\n\nSettings\nFrom Settings, you can hide the page navigation sidebar in viewer mode, by enabling the Disable Menu option.\n\n\n\nPin\nYou can pin the pages panel from the Pin button and the panel won't close until you unpin it.\n\n\n\nSearch\nIf there are many pages on the panel then you can use the Search bar to look for specific page.\n\n\n\nPage options\nThere are several options available for a Page. To use these options, click on the kebab menu on the right of the page card.\n\nPage Handle\nRename\n\n\n\nMark Home\nHide Page\nDelete Page\nEvent Handlers\n\n\n\n\nPage Handle\nPage Handle is the slug that is added at the end of the application URL. Page Handle get its default value when the page name is entered on the creation of the page. You can change the Page Handle from this option.\n\n\n\nRename\nRename option will allow you to rename the page.\n\n\n\n\nMark Home\nMark home option can be used to make a page the default landing page of the application, so whenever the app will be loaded the page that is marked home will be loaded.\n\n\n\n:::info\nThe page which is marked home will have a Home icon on the left of the Page Card.\n\n\n\n:::\nHide Page\nHide Page option can be used to hide a page from the page navigation sidebar in viewer mode.\n\n\n\n:::info\nIf a page is hidden then you'll see an eye icon on the right of the card.\n\n\n\n:::\nYou can go to the options again and unhide the app from the page navigation sidebar\n\n\n\nDelete Page\nYou can delete a page from an application using this option.\n\n\n\n:::info\nIf a page is Marked Home then you won't be able to delete and the delete page option will be disabled.\n\n\n\n:::\nEvent Handlers\nJust like other Event Handlers on ToolJet, you can add event handlers too pages too.\nCurrently, there is On page load event available. You can use all the available actions for this event along with the new actions added specifically for the pages:\n- switch page\n- set page variable\n- unset page variable\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Keyboard Shortcuts",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/tutorial/keyboard-shortcuts.md",
    "content": "\nid: keyboard-shortcuts\ntitle: Keyboard Shortcuts\n\nKeyboard Shortcuts\nYou can perform operations like undo, redo, clone, or removing the widget directly using the keyboard shortcuts.\nCopy\nYou can copy the component  on the visual app editor using the following shortcut keys:\nOn Mac: `cmd + c`\nOn Linux/Windows: `ctrl + c`\n\n\n\nCut\nYou can cut the component  on the visual app editor using the following shortcut keys:\nOn Mac: `cmd + x`\nOn Linux/Windows: `ctrl + x`\n\n\n\nPaste\nYou can paste the selected component  using the following shortcut keys:\nOn Mac: `cmd + v`\nOn Linux/Windows: `ctrl + v`\n\n\n\n:::caution\nThere are few edge cases when copy-paste commands might not work:\n- The URL should be `https` and it won't work on http on many browsers\n- Recent Firefox versions has some issue with copy functionality\n:::\nUndo\nYou can undo any operation performed on the visual app editor using the following shortcut keys:\nOn Mac: `cmd + z`\nOn Linux/Windows: `ctrl + z`\n\n\n\nRedo\nIf you have `undo` an operation and want to redo that again than you can use the following shortcut keys:\nOn Mac: `cmd + shift + z`\nOn Linux/Windows: `ctrl + shift + z`\n\n\n\nClone\nNow you can create multiple clones of any widget without having to drag and drop the widget again from the sidebar. Just select any widget that you want to create a clone and use the following shortcut keys:\nOn Mac: `cmd + d`\nOn Linux/Windows: `ctrl + d`\n\n\n\nRemove widget\nNow you can delete a selected widget by using the following shortcut keys:\nOn Mac: `delete`\nOn Linux/Windows: `backspace`\n\n\n\nUnselect the selected widget\nYou can quickly deselect a widget using the `esc` key.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Building Queries",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/tutorial/building-queries.md",
    "content": "\nid: building-queries\ntitle: Building Queries\n\nBuilding Queries\nQuery Editor lives at the bottom of the page. We will now build a query for the PostgreSQL datasource that we connected in the previous step.\n:::tip \nYou can click on the 'enlarge' icon to enlarge query editor pane. \n:::\n\nClick on the `+` icon of the query editor to create a new query.\nSelect the PostgreSQL datasource created in previous step.\nCopy the query given below and paste on the query area.\nSelect SQL mode\n\n`sql\nSELECT * FROM customers;`\n\nQuery results can be previewed by clicking the `preview` button. Previewing queries will not alter the state of the app.\n\nAdvanced options\n\nRun query on page load\nIf this option is enabled, the query will be run when the app is loaded for the first time. The queries can have more than one trigger, ie the same query can later be triggered again using a button's click event or table's row selected event or any other events.\nRequest confirmation before running query\nEnable this option to show a prompt to confirm the action before a query is run. The confirmation prompt will look like this:\n\n\n\nShow notification on success",
    "tag": "tooljet"
  },
  {
    "title": "Versioning and Release",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/tutorial/versioning-and-release.md",
    "content": "\nid: versioning-and-release\ntitle: Versioning and Release\n\nVersioning and Release\nVersioning and Release lets you version control your apps and release app changes to the users. \nVersioning\nVersioning is really useful if multiple developers are working on an app, it allows them to save their own version of the app. This also prevents developers from overwriting the other developer's work. \nCreating a Version\nYou can create new versions from App Version Manager on the top-right corner. It displays the version of the app that you're currently working and can be used to switch between the different version of the app. To create a new version:\n\n\nGo to the App Version Manager from the toolbar and click on the dropdown. It will display all the versions of the app that have been created.\n\n\n\n\n\n\n\nClick on Create Version and a modal will pop-up. Enter a Version Name and click on Create version from dropdown that will include all the versions of the app, choose a version that you want to use for your new version and then click on `Create Version`.\n\n\n\n\n\n\n\nRelease\nMaking a release let's you publish the app and push the changes to production.\nReleasing a version\nTo release a version:\n\n\nGo to the App Version Manager and select the `version` from the dropdown that you want to release.\n\n\n\n\n\n\n\nClick on the `Release` button on the top-right corner.\n\n\n\n\n\n\n\n:::tip \nToolJet will block editing of the `Released version` of an app and will display a prompt to create a new version to make the changes. This is to prevent accidentally pushing an unfinished app to the live version.\n\n\n\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Transformations",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/tutorial/transformations.md",
    "content": "\nid: transformations\ntitle: Transformations\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nTransformations\nTransformations can be enabled on queries to transform the query results. ToolJet allows you to transform the query results using two programming languages: \n\nJavaScript \nPython \n\n:::caution\n- Every transformation is scoped to the query it's written for. \n- Actions and CSA(Component Specific Actions) cannot be called within the transformation, they can only be called within RunJS query or RunPy query.\n:::\nTransform using JavaScript\nLet's assume a query is returning the customers data with a `name` row, so we will write a simple transformation to compute `first_name` and `last_name` for all the customers.\n`javascript\n// write your code here\n// return value will be set as data and the original data will be available as rawData\nreturn data.map((row) => {\n  return {\n    ...row,\n    first_name: row.name.split(' ')[0],\n    last_name: row.name.split(' ')[1],\n  };\n});`\nThe query will now look like this:\n\n\n\nTransform using Python\nLet's use Python transformation to compute `first_name` and `last_name` for all the customers that we fetch in the previous step.\n`python\nreturn list(map(lambda row: {\n  **row,\n  'first_name': row['name'].split(' ')[0],\n  'last_name': row['name'].split(' ')[1],\n}, data))`\nExample\n\n\nLet's take a look at the data returned by a RESTAPI (using mock data here):\n\n\n\n\n\n\n\nNow we will transform the returned data using Python that will append a new key in the returned data called `user` and that user will have the value from the exposed global variables of ToolJet which is `globals.currentUser.email`\n`python\n  return list(map(lambda item: {**item, \"user\": f\"{globals['currentUser']['email']}\"}, data))`\n\n\nNow, you can click on the preview button to check the transformed data.\n\n\n\n\n\n\n\n\nClick the `Save` button to create the query. Saved queries can be run using the `Run` button on the top-right of query panel. Queries run using the run button will behave just as if it was triggered by an app event like button click and thus will alter the state of the app. You can view the query results using the state inspector on the left side-bar of the app builder.\n\n\n\nWe can see that `first_name` and `last_name` are added to all the rows in the `data` object of the query. If you need the original data of the query, it will be available in the `rawData` object of the query.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Adding a widget",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/tutorial/adding-widget.md",
    "content": "\nid: adding-widget\ntitle: Adding a widget\n\nAdding a widget\nTo add a widget, navigate to the `Widget manager` on the right sidebar. It will display the list of built-in widgets that can be added to the app. Use the search functionality to quickly find the widget that you want.\n\nDrag and drop a widget\nLet's add a `table` widget to the app to show the customer data from the query that we created in the previous steps.\nTo add a widget, drag and drop the widget to the canvas.\nResize a widget\nThe widgets can be resized and repositioned within the canvas.\n\nAdding widgets to Modal\nTo add a widget to Modal, we need to trigger Show modal action\n:::info\nBefore triggering `Show modal action` we need to add a modal widget to the canvas.\n:::\n\nAdd a `modal widget` to the app\nTrigger the Show modal action\nClick on the canvas area for the `Widget manager` sidebar\nNavigate to the Widget manager on the right sidebar and Drag and drop a widget into the Modal\n\n\nResize table columns\nWe can resize the column width using the resize handle of the column.\n\nChange widget properties\nClick on the widget to open the inspect panel on right sidebar. Here you can change the properties of the widgets. Let's configure the table columns to display the customer data. The display order of columns can be changed by dragging icon near the column name.\n\nConnecting data with widget\nNow we will connect the `data` object of the `fetch customers` query with the table. Click on the table widget to open the inspector on the right sidebar. We can see that the data property of the table has an empty array as the value. The data field, like almost every other field on the editor supports single-line javascript code within double brackets. Variable suggestions will be shown as a dropdown while you type the code in the field.\nLet's select the `data` object of the 'postgresql' query.\n`{{queries.postgresql1.data}}`\nSince we have already run the query in the previous step, the data will be immediately displayed in the table.\n\nSo far in this tutorial, we have connected to a PostgreSQL database and displayed the data on a table.\n:::tip\nRead the widget reference of table here for more customizations such as server-side pagination, actions, editing data.",
    "tag": "tooljet"
  },
  {
    "title": "Adding actions",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/tutorial/actions.md",
    "content": "\nid: actions\ntitle: Adding actions\n\nAdding actions\nToolJet supports several actions that can be invoked as the handler for any `event` that is triggered in an application.\nTo add actions\nTo attach an action for component events, click on the component's handle, and then click on the `Add handler` button on the\ninspector panel available on the right side.  \nTo attach an action for query events, select the query, go to the `advanced` tab and then click on the `Add handler` button.\nAvailable actions\nSome of the actions that ToolJet Support are\nAction| Description|\n   ----| -----------  |\n   Show alert | Show an alert message as a bootstrap toast           |\n   Run query | Run any of the data queries that you have created           |\n   Open webpage | Go to another webpage in a new tab          |\n   Goto app | Go to another ToolJet application          |\n   Show modal | Open any modal that you've added          |\n   Close modal | Close any modal that you've added if its already open          |\n   Copy to clipboard | Copy any available text that you see on the application to clipboard          |\n   Set localStorage | Set a key and corresponding value to localStorage          |",
    "tag": "tooljet"
  },
  {
    "title": "How can we add these variables to an Workspace?",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/tutorial/workspace-environment-variables.md",
    "content": "\nid: workspace-environment-variables\ntitle: Workspace Variables\n\nWorkspace Variables are the variables with some value(usually tokens/secret keys/API keys) that can be used in different apps across the same Workspace.\nHow can we add these variables to an Workspace?\nSuppose there is an `API key` or a value that you want to use in the queries or widgets in the multiple apps of the same Workspace then the Workspace admin or the user with permissions can add an environment variable.\nAdding the environment variable\n\nGo to the ToolJet Dashboard, and click on the dropdown on the navigation bar to show `Workspace` options\nSelect `Manage Environment Variables`\nClick on `Add New Variable` button\nGive a `Name` to the variable, set the value, choose `Type`, toggle `Encryption`, and click Add Variable button\nNow this variable can be used inside any application of this Workspace\n\n\n\n\nTypes of variables\n\n\nClient: The client variable can be used in widgets and queries.\n\n\nServer: The server variables can be used with all the queries except the `RunJS`. The reason why we don't allow the server variables to be used with the widgets is that these variables are only resolved during the runtime so they're highly secured.\n\n\n:::info\nVariable Type cannot be changed once it has been created.\n:::\n\n\n\nEncryption\nThis feature enables us to add a client variable with and without `encryption`. The server variables are always encrypted by default.\nUsing variable in an app\nLet's use the variable that we created here. If you have used ToolJet before, then you know that for getting the values from any variable we use JS notation i.e. `{{}}` but for using the Workspace variables we have different opening and closing notation `%% %%`. The environment variables will not work inside js code `{{}}`.\nSo, the syntax for using the variable that we created before will be `%%client.pi%%`\nExample for client variable usage:\n\n\n\nExample for server variable usage:\n\n",
    "tag": "tooljet"
  },
  {
    "title": "App menu options",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/tutorial/app-menu-options.md",
    "content": "\nid: app-menu-options\ntitle: App menu options\n\nApp menu options\nOptions that are available in the overflow menu of the app card are:\n\nChange Icon\nAdd to folder\nClone app\nExport app\nDelete app\n\n\n\n\nChange Icon\nThe icon on the app cards can be customised by selecting the `Change Icon` option.\n\n\n\nAdd to folder\nToolJet allows you to create folders (`+ Create new folder` from the left sidebar) on the dashboard, and any application can be added to these folders.\n\n\n\nClone app\nAny application created on ToolJet can be cloned using the `Clone app` option. The cloned application is the exact copy of the original app except that the user will have to re-enter the datasource credentials in cloned app.\nExport app\nExport app option will allow the users to download `JSON` file with all the information about your application(excluding credentials). This JSON file can be used to import this application to the same or other workspace.\nUsers get the option to export:\n- the currently released version\n- a particular version from list latest version to oldest version\n- all versions\n\n\n\nDelete app\nUse this option to complete remove the app from the workspace.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Creating new app",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/tutorial/creating-app.md",
    "content": "\nid: creating-app\ntitle: Creating new app\n\nCreating new app\n:::info\nApps in ToolJet binds the widgets, data sources and queries together.\n:::\nThis tutorial will walk you through building a simple app to fetch customer information from a PostgreSQL database and display the data using the table widget.\nTo create a new ToolJet app, click on the 'Create new application' button on the ToolJet dashboard. \n\nYou will be redirected to the visual app editor once the app has been created. Create the first version of your app to start building. The name of the app can be changed by clicking on the app name at top-left of the app builder.\n\n\n![ToolJet - Creating an app](/img/tutorial/creating-new-app/visual-app-editor.png)\n\n\nThe main components of an app: \n\nWidgets - UI components such as tables, buttons, dropdowns.\nData sources - ToolJet can connect to databases, APIs and external services to fetch and modify data.\n",
    "tag": "tooljet"
  },
  {
    "title": "Mobile layout",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/tutorial/mobile-layout.md",
    "content": "\nid: mobile-layout\ntitle: Mobile layout\n\nMobile layout\nMobile layout is activated when the width of the window is less than 600px.\n:::tip\nWidgets can be shown on desktop, mobile, or both.\n:::\n\nAdding existing widget to mobile layout\nClick on the widget to open inspector. Scroll down to the `layout` section and enable mobile layout. The width of the widget will be adjusted to fit the mobile layout.\nAdding a new widget to mobile layout\nSwitch the layout to mobile by clicking the button on the top navigation bar. Drag and drop a widget to the canvas. This widget will not be shown on desktop layout unless enabled from the widget inspector via the \"Show on desktop\" button manually.\n:::tip\nWidth of the widgets will be automatically adjusted to fit the screen while viewing the application in app viewer.",
    "tag": "tooljet"
  },
  {
    "title": "Managing Users and Groups",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/tutorial/manage-users-groups.md",
    "content": "\nid: manage-users-groups\ntitle: Managing Users and Groups\n\nManaging Users and Groups\nManaging Users\nAdmin of a workspace can add users to the workspace. To manage the users in your workspace, just go to the Workspace Settings from the left sidebar on the dashboard and click on the Users option.\n\n\n\nInviting users\nAdmins can invite anyone to a workspace using the email address. To invite a user:\n\n\nOn the Users page click on the `Invite new user` button.\n\n\n\n\n\n\n\nNow enter the details of new user such as first name, last name, email, and then click on the Create User.\n\n\n\n\n\n\n\nAn email including the Invite Link to join your workspace will be send to the created user. The status will turn from invited to active after the user successfully joins your workspace using the invite link.\n\n\n:::tip\n  You can also copy the invitation url by clicking on the copy icon next to `invited` status of the created user.\n  :::\n\n\n\n:::tip\nYou can also Bulk Invite Users by editing and uploading the sample CSV file including all the users details.\n\n\n\n:::\nDisabling a user's access\nYou can disable any active user's access to your workspace by clicking on the Archive button and the status of the user will change from active to archived.\n\n\n\nEnabling a user's access\nSimilar to archiving a user's access, you can enable it again by clicking on Unarchive. The status of user will change from archived to invited and the user will have to join again using the invite link received via the e-mail.\n\n\n\nManaging Groups\nOn ToolJet, Admins can create groups for users added in a workspace and grant them access to particular app(s) with specific permissions. To manage groups, just go to the Workspace Settings from the left-sidebar of the dashboard and click on the Groups.\n\n\n\nGroup properties\nEvery group on ToolJet has three sections:\nApps:\nAdmins can add or remove any number of apps for a group of users. To add an app to a group, select an app from the dropdown and click on `Add` button next to it. You can also set app permissions such as `View` or `Edit` for the group. You can set different permissions for different apps in a group.\n\n\n\nUsers:\nAdmins can add or remove any numbers of users in a group. Just select a user from the dropdown and click on `Add` button to add it to a group. To delete a user from a group, click on `Delete` button next to it.\n\n\n\nPermissions:\nAdmins can set granular permission like creating/deleting apps or creating folder for a group of users.\n\n\n\n:::tip\nAll the activities performed by any Admin or any user in a workspace is logged in `Audit logs` - including any activity related with managing users and groups.\n:::\nPredefined Groups\nBy default, every workspace will have two User Groups:\n1. All Users\nThis group contains all the users and admins.\n| Apps | Users | Permissions |\n| ----------- | ----------- | ----------- |\n| You can add or remove apps. | Modification is disabled. This group will have all the users and admins added in a workspace. | You can edit permissions for all the users globally. |\n\n\n\n2. Admin\nThis group contains admins by default. Admins can add more admins or remove the users in this group.\n| Apps | Users | Permissions |\n| ----------- | ----------- | ----------- |\n| Modification is disabled. By default, this group has `Edit` permission for all the apps in a workspace  | Admins can add or remove users in this group. | Modification is disabled. By default, all the admins can create and delete apps or create folders. |\n\n\n\nCreating new group\n\n\nClick on `Create new group` button in the User Groups page.\n\n\n\n\n\n\n\nEnter a name for the group and click `Create Group` button.\n\n\n\n\n\n\n\nOnce the group is created, you can add Apps, Users and set their Permissions for that group.\n\n\nDeleting a group\nTo delete a group, click on `Delete` next to it. It will confirm whether you want to delete it or not, Click on `Yes` to delete the group.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Configuration",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/Enterprise/white-label.md",
    "content": "\nid: white-label\ntitle: White Label\n\nAvailable on: Enterprise Edition\nWhite Label feature will allow you to remove the ToolJet branding from the ToolJet platform and add your own custom logo and text.\nThis feature allows you to rebrand the following:\n- App logo (Logo on login screen, dashboard, and app-editor)\n\n\n\n\n\n\n\n\n\n\nFavicon\n\n\nPage Title (next to Favicon)\n\n\n\n\n\n\n\nConfiguration\nTo enable white labelling, you'll need to set the below mentioned environment variables in the .env file:\n\n`WHITE_LABEL_LOGO`: URL of the logo. Preferred dimensions of the logo are: width 130px and height 26px\n`WHITE_LABEL_TEXT`: The text that you want to display as Page Title\n",
    "tag": "tooljet"
  },
  {
    "title": "audit_logs.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/Enterprise/audit_logs.md",
    "content": "\nid: audit_logs\ntitle: Audit logs\n\nAvailable on: Enterprise Edition\nThe audit log is the report of all the activities done in your ToolJet account. It will capture and display events automatically by recording who performed an activity, what when, and where the activity was performed, along with other information such as IP address.\n\n\n\nFilter audit logs\nAudited events can be filtered using the below characteristics:\nSelect Users\nSelect a specific user from this dropdown to check all their activities. \nSelect Apps\nThe dropdown will list all the apps present in your account. Choose an app to filter the logs associated with that app.\nSelect Resources\n| Resources  | description |\n| ----------- | ----------- |\n| User | Filter all the User events like `USER_LOGIN`, `USER_SIGNUP`, `USER_INVITE`, AND `USER_INVITE_REDEEM`. |\n| App | Filter all the App events like `APP_CREATE`, `APP_UPDATE`,`APP_VIEW`,`APP_DELETE`,`APP_IMPORT`,`APP_EXPORT`,`APP_CLONE`. |\n| Data Query | Filters the events associated with Data Query like `DATA_QUERY_RUN`. |\n| Group Permission | All the events associated with Group Permissions will be filtered. Group Permissions include `GROUP_CREATE`, `GROUP_UPDATE`, `GROUP_DELETE`. |\n| App Group Permission | Within each group, you can set apps for read or edit privileges. These events get recorded as App Group Permissions. |\nSelect Actions\n| Actions  | description |\n| ----------- | ----------- |\n| USER_LOGIN | This event is recorded everytime a user logins. |\n| USER_SIGNUP | This event is recorded everytime a new signup is made. |\n| USER_INVITE | You can invite users to your account from `Manage Users` section and an event is audited everytime an invite is sent. |\n| USER_INVITE_REDEEM | This event is recorded whenever an invite is redeemed. |\n| APP_CREATE | This event is recorded when a user creates a new app. |\n| APP_UPDATE | This event is recorded whenever actions like renaming the app, making the app public, editing shareable link, or deploying the app are made. |\n| APP_VIEW | This event is logged when someone views the launched app. (public apps aren't accounted for) |\n| APP_DELETE | This event is recorded whenever a user deletes an app from the dashboard. |\n| APP_IMPORT | This event is recorded whenever a user imports an app. |\n| APP_EXPORT | This event is recorded whenever an app is exported. |\n| APP_CLONE | This event is recorded whenever a clone of the existing app is created. |\n| DATA_QUERY_RUN | This event is logged whenever a data source is added, a query is created, or whenever a query is run either from the query editor or from the launched app. |\n| GROUP_PERMISSION_CREATE | This event is recorded whenever a group is created. |\n| GROUP_PERMISSION_UPDATE | This event is recorded whenever an app or user is added to or removed from a group, or the permissions for a group are updated. |\n| GROUP_PERMISSION_DELETE | This event is recorded whenever a user group is deleted from an account. |\n| APP_GROUP_PERMISSION_UPDATE | For every app added in to user group, you can set privileges like `View` or `Edit` and whenever these privileges are updated this event is recorded. By default, the permission of an app for a user group is set to `View`. |\n:::info\nIt is mandatory to set a Data Range in `From` and `To` to filter audit logs.\n:::\nUnderstanding information from logs\n\n\n\n| Property  | description |\n| ----------- | ----------- |\n| action_type | It is the type of action that was logged in this event. Refer this to know about actions. |\n| created_at | Displays the date and time of a logged event.  |\n| id | Every event logged has a specific event id associated with it. |\n| ip_address | Displays the IP address from where the event was logged. |\n| metadata | Metadata includes two sub-properties - `tooljet_version` and `user_agent`. `tooljet_version` displays the version of ToolJet used for the logged event and `user_agent` contains information about the device and browser used for that event. |\n| organization_id | Every organization in ToolJet has an id associated with it and is recorded when an event occurs. |\n| resource_id | There are several resources and for each resource that is created, an id gets associated with it.|\n| resource_name | Displays the name of the resources that were logged in the event. For example, if an app was created or deleted then it will display the name of the app. |\n| resource_type | Displays the type of the resources that were logged in the event. |",
    "tag": "tooljet"
  },
  {
    "title": "How is Super Admin different from Admin",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/Enterprise/superadmin.md",
    "content": "\nid: superadmin\ntitle: Super Admin\n\nAvailable on: Enterprise Edition\nA Super Admin is the user who has full access to all the Workspaces, Users, and Groups of an instance. An instance can have more than one Super Admin. A Super Admin has full control over other users' workspaces and can create users, groups, and other super admins.\nThe user details entered while setting up ToolJet will have Super Admin privileges.\nHow is Super Admin different from Admin\n| Privilege | Admin | Super Admin | \n| --------- | ----- | ----------- |\n| Manage Users in their workspace (Invite/Archive/Unarchive) | \u2705 | \u2705 |\n| Manage Groups in their workspace (Create Group/Add or Delete Users from groups/ Modify Group Permissions) | \u2705 | \u2705 |\n| Manage SSO in their workspace | \u2705 | \u2705 |\n| Manage Workspace Variables in their workspace | \u2705 | \u2705 |\n| Access any user's personal workspace (create, edit or delete apps) | \u274c | \u2705 |\n| Archive Admin or any user of any workspace | \u274c | \u2705 |\n| Access any user's ToolJet database (create, edit or delete database) | \u274c | \u2705 |\n| Manage any workspace's setting (Groups/SSO/Workspace Variables) | \u274c | \u2705 |\n| Manage all users from all the workspaces in the instance | \u274c | \u2705 |\n| Make any user Super Admin | \u274c | \u2705 |\n| Restrict personal workspace of invited users | \u274c | \u2705 |\n\n\n\nSuper Admin features\nAccess any workspace\nIf a user is a Super Admin then they can switch to any workspace created by any user in the instance from the dropdown on the top-left of dashboard that is used to switch between workspaces.\nThe dropdown will list all the workspaces including workspaces created by the Super Admin or Any User.\n\n\n\nCreate Edit or Delete apps from any user's personal workspace\nOnce the Super Admin accesses the workspace of any other user, they can create, edit or delete app on the workspace.\nThis also includes - modifying folders and importing, exporting, or cloning apps to any user's workspace.\nArchive/Unarchive Users\nSuper Admin can not only archive/unarchive users/admins on their workspace but also from the workspaces of any other user.\nIf a user is Super Admin, they just need to open the workspace in which they want to archive or unarchive a user. Then go to the Workspace Settings from the sidebar -> Manage Users -> Archive/Unarchive any user/admin\n\n\n\nAccess ToolJet DB in any workspace\nSuper Admins have access to the database of any user's workspace - just like Super Admins can access any application in any workspace. They have full access to modify or create any table in the ToolJet DB of any workspace.\nManage Workspace Settings (Groups/SSO/Workspace Variables)\nSuper Admins have all the privileges that an Admin of a workspace have, Super Admins can:\n- \u2705 Manage Groups: Creating/Deleting/Updating a Group in any workspace\n- \u2705 Manage SSO: Full control over General Settings, Password login and other SSO options\n- \u2705 Workspace Variables: Adding, updating or deleting workspace variables\nInstance Settings\nOnly Super Admins can access the Instance Settings:\n\nManage All Users\nManage Instance Settings\n\nChecking all the users in the instance\nManage All Users can be used to check all the users that are there - altogether from all the workspaces in an instance.\n\n\n\nArchiving a user from workspace\nSuper Admins have the privilege to remove any user from any of the workspace they belong.\nSuper Admins can go to Manage All Users page, Under the Workspaces column they'll see the number of workspaces a user belongs to. Click on the `View(n)`, a modal will pop up that will have the list of `n` number the workspaces, click on the Archive/Unarchive button next to the workspace name to remove the user from the workspace.\n\n\n\nMake the user super admin\nSuper Admins can make any user as Super Admin or remove any Super Admin from the Manage All Users in the Instance Settings page.\nClick on the Edit button next to any user, Enable the Make the user Super Admin option, and then Save it.\nThe user will become Super Admin and the Type column will update from `workspace` to `instance`.\n\n\n\nAllow users to create personal workspace\nWhen a user joins a workspace, they are provided with their own personal workspace and option to create new workspaces.\nSuper Admins can control this behavior from the Manage Instance Settings page, they can toggle off the option to Allow personal workspace. Now whenever a user joins a workspace they won't be provided a personal workspace nor they will be able to create a new workspace in the instance.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "AWS EC2",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/setup/ec2.md",
    "content": "\nid: ec2\ntitle: AWS EC2\n\nAWS EC2\n:::info\nYou should setup a PostgreSQL database manually to be used by the ToolJet server.\n:::\nFollow the steps below to deploy ToolJet on AWS EC2 instances.\n\n\nSetup a PostgreSQL database and make sure that the database is accessible from the EC2 instance.\n\n\nLogin to your AWS management console and go to the EC2 management page.\n\n\nUnder the `Images` section, click on the `AMIs` button.\n\n\nFind the ToolJet version you want to deploy. Now, from the AMI search page, select the search type as \"Public Images\" and input the version you'd want `AMI Name : tooljet_vX.X.X.ubuntu_bionic` in the search bar.\n\n\nSelect ToolJet's AMI and bootup an EC2 instance.\n\n\nCreating a new security group is recommended. For example, if the installation should receive traffic from the internet, the inbound rules of the security group should look like this:\nprotocol| port     | allowed_cidr|\n   ----| -----------  | ----------- |\n   tcp | 22           | your IP |\n   tcp | 80           | 0.0.0.0/0 |\n   tcp | 443          | 0.0.0.0/0   |\n\n\nOnce the instance boots up, SSH into the instance by running `ssh -i <path_to_pem_file> ubuntu@<public_ip_of_the_instance>`\n\n\nSwitch to the app directory by running `cd ~/app`. Modify the contents of the `.env` file. ( Eg: `vim .env` )\n\n\nThe default `.env` file looks like this:\n   `bash\n   TOOLJET_HOST=http://<example>\n   LOCKBOX_MASTER_KEY=<example>\n   SECRET_KEY_BASE=<example>\n   PG_DB=tooljet_prod\n   PG_USER=<pg user name>\n   PG_HOST=<pg host>\n   PG_PASS=<pg user password>`\n   Read environment variables reference\n:::info\n   If there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates.\n   :::\n\n`TOOLJET_HOST` environment variable determines where you can access the ToolJet client. It can either be the public ipv4 address of your instance or a custom domain that you want to use.\n\nExamples:\n   `TOOLJET_HOST=http://12.34.56.78` or\n   `TOOLJET_HOST=https://yourdomain.com` or\n   `TOOLJET_HOST=https://tooljet.yourdomain.com`\n:::info\n   We use a lets encrypt plugin on top of nginx to create TLS certificates on the fly.\n   :::\n:::info\n   Please make sure that `TOOLJET_HOST` starts with either `http://` or `https://`\n   :::\n\n\nOnce you've configured the `.env` file, run `./setup_app`. This script will install all the dependencies of ToolJet and then will start the required services.\n\n\nIf you've set a custom domain for `TOOLJET_HOST`, add a `A record` entry in your DNS settings to point to the IP address of the EC2 instance.\n\n\nYou're all done, ToolJet client would now be served at the value you've set in `TOOLJET_HOST`.\n\n\nDeploying Tooljet Database\nToolJet AMI comes inbuilt with PostgREST. If you intend to use this feature, you'd only have to setup the environment variables in `~/app/.env` file and run `./setup_app` script.",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Kubernetes",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/setup/kubernetes.md",
    "content": "\nid: kubernetes\ntitle: Kubernetes\n\nDeploying ToolJet on Kubernetes\n:::info\nYou should setup a PostgreSQL database manually to be used by ToolJet.\n:::\nFollow the steps below to deploy ToolJet on a Kubernetes cluster.\n\n\nSetup a PostgreSQL database\n   ToolJet uses a postgres database as the persistent storage for storing data related to users and apps. We do not have plans to support other databases such as MySQL.\n\n\nCreate a Kubernetes secret with name `server`. For the minimal setup, ToolJet requires `pg_host`, `pg_db`, `pg_user`, `pg_password`, `secret_key_base` & `lockbox_key` keys in the secret.\n\n\nRead environment variables reference\n\nCreate a Kubernetes deployment\n\n`bash\n    kubectl apply -f https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/deployment.yaml`\n:::info\nThe file given above is just a template and might not suit production environments. You should download the file and configure parameters such as the replica count and environment variables according to your needs.\n:::\n:::info\nIf there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates. You can make use of kubernetes secrets to mount the certificate file onto the containers.\n:::\n\nVerify if ToolJet is running\n\n`bash\n    kubectl get pods`\n\nCreate a Kubernetes services to publish the Kubernetes deployment that you've created. This step varies with cloud providers. We have a template for exposing the ToolJet server as a service using an AWS loadbalancer.\n\nExamples:\n   - Application load balancing on Amazon EKS\n   - GKE Ingress for HTTP(S) Load Balancing\n:::tip\nIf you want to serve ToolJet client from services such as Firebase or Netlify, please read the client Setup documentation here.\n:::\nToolJet Database\nIf you intend to use this feature, you'd have to set up and deploy PostgREST server which helps querying ToolJet Database. Please follow the instructions here for additional environment variables configuration to be done.\n\nSetup PostgREST server\n\n`bash\n    kubectl apply -f https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/postgrest.yaml`",
    "tag": "tooljet"
  },
  {
    "title": "Version 2 migration guide",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/setup/v2-migration.md",
    "content": "\nid: v2-migration-guide\ntitle: V2 migration guide\n\nVersion 2 migration guide\nToolJet version 2 comes with a bunch of exciting features, with the major ones being:\n1. Multi page\n2. Multi env\n3. Forms widget\n4. Database (Requires opt-in)\n5. Marketplace (Requires opt-in)\nCheckout the latest changelog for v2 here.\nDeployment\nBased on your opted deployment method from our setup doc, you can directly deploy v2 without any additional configuration for the default setup.\nAdditional configuration are only required for the opt-in features mentioned above. You can check the respective documentation of those features for the configuration changes needed.\n:::info\nServer may take some time to be ready to handle the HTTP request as v2 changes requires some data migrations for the initial deployment. This is automatically triggered as a part of the server boot.\n::::\nDeprecations\nDeployments\n\nDocker compose deployments with auto SSL is deprecated\n\nHelp and Support\n\nFeel free to join our highly active Slack Community or you can also e-mail us at hello@tooljet.com.\n",
    "tag": "tooljet"
  },
  {
    "title": "Try ToolJet",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/setup/try-tooljet.md",
    "content": "\nid: try-tooljet\ntitle: Try ToolJet\n\nTry ToolJet\nOn local with Docker\nYou can run the command below to have ToolJet up and running right away.\n`bash\ndocker run \\\n  --name tooljet \\\n  --restart unless-stopped \\\n  -p 80:80 \\\n  -v tooljet_data:/var/lib/postgresql/13/main \\\n  tooljet/try:latest`\nSetup information\n\nRuns the ToolJet server on the port 80 on your machine.\nContainer has postgres already configured within. All the data will be available in the docker volume `tooljet_data`.\nYou can make use of `--env` or `--env-file` flag to test against various env configurables mentioned here.\nUse `docker stop tooljet` to stop the container and `docker start tooljet` to start the container thereafter.\n\nOn Play with docker\nYou can deploy ToolJet on PWD for free with the one-click-deployment button below.\n\n\n\nSetup information\n\nOpen port 80 after the docker containers are up and running\n",
    "tag": "tooljet"
  },
  {
    "title": "tooljet-subpath.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/setup/tooljet-subpath.md",
    "content": "\nid: tooljet-subpath\ntitle: Deploying ToolJet on a subpath\n\nToolJet can now be deployed at a subpath rather than the root (`/`) of a public domain. Example subpath installation URL: `http://www.yourcompany.com/apps/tooljet`\nYou'll need to setup the following environment variables if ToolJet installation is on a domain subpath:\n| variable | value |\n| -------- | ---------------------- |\n| TOOLJET_HOST | the public URL ( eg: https://www.yourcompany.com )  |\n| SERVE_CLIENT | By default, this variable will be unset and the server will serve the client at its `/` end-point. You can set `SERVE_CLIENT` to `false` to disable this behaviour. |\n| SUB_PATH | Set a subpath to this variable. The subpath is to be set with trailing `/` and is applicable only when the server is serving the frontend client. ( eg: `/apps/tooljet/` )  |\n:::info\nSee all Environment Variables here.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Heroku",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/setup/heroku.md",
    "content": "\nid: heroku\ntitle: Heroku\n\nDeploying ToolJet on Heroku\n\nFollow the steps below to deploy ToolJet on Heroku:\n\n\nClick the button below to start one click deployment.\n\n\n\n   [![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/tooljet/tooljet/tree/main)\n\n   \n\n\n\nOn Heroku tab, you'll be asked to provide an `App name` and `Choose a region`. Enter the name for your deployment and select the region according to your choice.\n\n\n\n\n\n\nNow let's enter the `Config vars` to configure additional environment variables that are required for the installation.\nLOCKBOX_MASTER_KEY: ToolJet server uses lockbox to encrypt datasource credentials. You should set the environment variable LOCKBOX_MASTER_KEY with a 32 byte hexadecimal string. If you have OpenSSL installed, you can run the command `openssl rand -hex 32` to generate the key.\nNODE_ENV: By default NODE_ENV is set to production. \nNODE_OPTIONS: Node options are configured to increase node memory to support app build.\nSECRET_KEY_BASE: ToolJet server uses a secure 64 byte hexadecimal string to encrypt session cookies. You should set the environment variable SECRET_KEY_BASE. If you have OpenSSL installed, you can run the command `openssl rand -hex 64` to generate the key.\nTOOLJET_HOST: Public URL of ToolJet installation. This is usually `https://<app-name-in-first-step\\>.herokuapp.com`.\n\nTOOLJET_SERVER_URL: URL of ToolJet server installation. (This is same as the TOOLJET_HOST for Heroku deployments)\n\n\nClick on `Deploy app` button at the bottom to initiate the build.\n\n\nAfter the successful build, you'll see two buttons at the bottom: `Manage App` and `View`. Click on the `View` to open the app or click on `Manage App` to configure any settings.\n\n\n\n\n\n:::tip\nToolJet server and client can be deployed as standalone applications. If you do not want to deploy the client on Heroku, modify `package.json` accordingly. We have a guide on deploying ToolJet client using services such as Firebase.\n:::\nDeploying Tooljet Database\nIf you intend to use this feature, you'd have to set up and deploy PostgREST server which helps querying ToolJet Database.\nThis feature is only enabled if `ENABLE_TOOLJET_DB` is set to `true` in the Tooljet application.\nFollow the steps below to deploy ToolJet Database on Heroku:\n:::note\nPlease install Heroku CLI on your local machine. Please refer Heroku CLI installation steps here. \n:::\n\nCreate a new Heroku app using the PostgREST buildpack\n\n1.1 Create a folder with your app name. Please give a unique name to the app.  \n`bash\n  mkdir ${YOUR_PGRST_APP_NAME}\n  cd $${YOUR_PGRST_APP_NAME}\n  git init`\n1.2 Add PostgREST buildpack to your app. \n`bash\n  heroku apps:create ${YOUR_PGRST_APP_NAME} --buildpack https://github.com/PostgREST/postgrest-heroku.git\n  heroku git:remote -a ${YOUR_PGRST_APP_NAME}`\n\nAttach the Tooljet app\u2019s PostgreSQL database your Tooljet database app\n\n`${HEROKU_PG_DB_NAME` Should be the name of the PostgreSQL created by the Tooljet app. \nYou can get the `${HEROKU_PG_DB_NAME` of the Tooljet application from the Resources tab under Heroku Postgre attachments as shown below. (eg: `${HEROKU_PG_DB_NAME = postgresql-transparent-24158` ). \n`bash\n  heroku addons:attach ${HEROKU_PG_DB_NAME} -a ${YOUR_PGRST_APP_NAME}`\n\n\n\n\nCreate a Procfile\n\n:::info\n  The Procfile is a simple text file that is named Procfile without a file extension. For example, Procfile.txt is not valid.\n  :::\nPlease paste the below string within the Procfile file.\n`bash\n  web: PGRST_SERVER_HOST=0.0.0.0 PGRST_SERVER_PORT=${PORT} PGRST_DB_URI=${PGRST_DB_URI:-${DATABASE_URL}} ./postgrest-${POSTGREST_VER}`\n\nSet environment variables\n\nYou can also refer environment variable here.\n:::tip\n  If you have openssl installed, you can run the following command `openssl rand -hex 32` to generate the value for `PGRST_JWT_SECRET`.\nIf this parameter is not specified then PostgREST refuses authentication requests.\n  :::\n`bash\n  heroku config:set PGRST_JWT_SECRET=\n  heroku config:set POSTGREST_VER=10.0.0`\nYou can also refer environment variable here.  \n\nBuild and deploy your app\n\n`bash\n  git add Procfile\n  git commit -m \"PostgREST on Heroku\"\n  git push --set-upstream heroku main`\nYour Heroku app should be live at `${YOUR_APP_NAME}.herokuapp.com`. \n\nAdditional environment variables for Tooljet application\n",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Google Cloud Run",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/setup/google-cloud-run.md",
    "content": "\nid: google-cloud-run\ntitle: Google Cloud Run\n\nDeploying ToolJet on Google Cloud Run\n:::info\nYou should setup a PostgreSQL database manually to be used by ToolJet.\n:::\nFollow the steps below to deploy ToolJet on Cloud run with `gcloud` CLI.\nDeploying ToolJet application\n\nCloud Run requires prebuilt image to be present within cloud registry. You can pull specific tooljet image from docker hub and then tag with your project to push it to cloud registry.\n\n`bash\n   gcloud auth configure-docker\n   docker pull tooljet/tooljet-ce:latest\n   docker tag tooljet/tooljet-ce:latest gcr.io/<replace-your-project-id>/tooljet/tooljet-ce:latest\n   docker push gcr.io/<replace-your-project-id>/tooljet/tooljet-ce:latest`\nPlease run the above command by launching GoogleCLI which will help to push the Tooljet application image to Google container registry. \n\n\n\n\n\nCreate new cloud run service\nSelect and add the pushed Tooljet application image as shown below.\n\n\n\n\n\n\nIngress and Authentication can be set as shown below, to begin with. Feel free to change the security configurations as per you see fit.\n\n\n\n\n\nUnder containers tab, please make sure the port is set 3000 and command `npm, run, start:prod` is entered in container argument field with CPU capacity is set to 2GiB.\n\n\n\n\n\nUnder environmental variable please add the below Tooljet application variables. You can also refer env variable here. \n\nUpdate `TOOLJET_HOST` environment variable if you want to use the default url assigned with Cloud run after the initial deploy.\n\n\n\n:::tip\nIf you are using Public IP for Cloud SQL, then database host connection (value for `PG_HOST`) needs to be set using unix socket format, `/cloudsql/<CLOUD_SQL_CONNECTION_NAME>`.\n:::\n\nPlease go to the connection tab. Under Cloud SQL instance please select the PostgreSQL database which you have set-up.\n\n\n\n\nClick on deploy once the above parameters are set. \n:::info\nOnce the Service is created and live, to make the  Cloud Service URL public. Please follow the steps here to make the service public.\n:::\nDeploying ToolJet Database\nIf you intend to use this feature, you'd have to set up and deploy PostgREST server which helps querying ToolJet Database.\nPostgREST server\n\nCloud Run requires prebuilt image to be present within cloud registry. You can pull specific PostgREST image from docker hub and then tag with your project to push it to cloud registry.\n\n`bash\n   gcloud auth configure-docker\n   docker pull postgrest/postgrest:v10.1.1.20221215\n   docker tag postgrest/postgrest:v10.1.1.20221215\u00a0gcr.io/tooljet-test-338806/postgrest/postgrest:v10.1.1.20221215\n   docker push\u00a0gcr.io/tooljet-test-338806/postgrest/postgrest:v10.1.1.20221215`\nPlease run the above command by launching googleCLI which will help to push the PostgREST image to Google container registry. \n\n\n\n\nOnce the PostgREST image is pushed. Click on create service.\n\nSelect and add the pushed PostgREST image as shown in below.\n\n\n\n\nIngress and Authentication can be set as shown below, to begin with. Feel free to change the security configurations as per you see fit.\n\n\n\n\n\nUnder containers tab, please make sure the port is set 3000 and CPU capacity is set to 1GiB.\n\n\n\n\n\n\nUnder environmental variable please add corresponding Tooljet database env variables. You can also refer env variable.\n\n\nPlease go to connection tab. Under Cloud SQL instance please select the PostgreSQL database which you have set-up for Tooljet application or the separate PostgreSQL database created respective to Tooljet Database from the drop-down option.\n\n\n\n\n\nClick on deploy once the above parameters are set. \n:::info\nOnce the Service is created and live, to make the  Cloud Service URL public. Please follow the steps here to make the service public.\n:::\n\nAdditional Environmental variable to be added to Tooljet application or Tooljet Server connect to PostgREST server. You can also refer env variable here\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Amazon ECS",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/setup/ecs.md",
    "content": "\nid: ecs\ntitle: AWS ECS\n\nDeploying ToolJet on Amazon ECS\n:::info\nYou should setup a PostgreSQL database manually to be used by ToolJet.\n:::\nFollow the steps below to deploy ToolJet on a ECS cluster.\n\n\nSetup a PostgreSQL database\n    ToolJet uses a postgres database as the persistent storage for storing data related to users and apps.\n\n\nCreate a target group and an application load balancer to route traffic onto ToolJet containers.\n    You can reference AWS docs to set it up. Please note that ToolJet server exposes `/api/health`, which you can configure for health checks.\n:::note\nThis setup follows the old AWS UI for ECS as some options are missing on the latest experience.\n:::\n\n\nCreate task definition for deploying ToolJet app as a service on your preconfigured cluster.\n\n\nSelect Fargate as launch type compatibility.\n    \n\n\nConfigure IAM roles and set operating system family as Linux\n    \n\n\nSelect task size to have 3GB of memory and 1vCpu\n    \n\n\nClick on add container to update container definitions\n    \nWithin the add container form that is shown:\n\nSpecify your container name ex: `tooljet-ce`\nSet the image you intend to deploy. ex: `tooljet/tooljet-ce:v1.26.0`\n\nUpdate port mappings at container port `3000` for tcp protocol.\n  \n\n\nUpdate container command field to be `npm,run,start:prod`.\n  \n\n\nSpecify environmental values for the container. You'd want to make use of secrets to store sensitive information or credentials, kindly refer the AWS docs to set it up.\n\n\n\n:::note\n  For the minimal setup, ToolJet requires:\n  `TOOLJET_HOST`, `PG_HOST`, `PG_DB`, `PG_USER`, `PG_PASSWORD`, `SECRET_KEY_BASE` & `LOCKBOX_MASTER_KEY` keys in the secret.\nRead environment variables reference\n:::\n\n\n\n\nCreate a service to run your task definition within your cluster.\n\nSelect launch type as Fargate.\nSet operating system family as Linux\nSelect task definition family as the one created earlier. ex: `tooljet-ce`\nSelect the cluster and set the service name\nYou can set the number of tasks to start with as two\nRest of the values can be kept as default\n  \nClick on next step to configure networking options\nSelect your designated VPC, Subnets and Security groups. Kindly ensure that the security group allows for inbound traffic to http port 3000 for the task.\n  \nSince migrations are run as a part of container boot, please specify health check grace period for 900 seconds.\nSelect the application loadbalancer option and set the target group name to the one we had created earlier. This will auto populate the health check endpoints.\n\n\n\n:::info\nThe setup above is just a template. Feel free to update the task definition and configure parameters for resources and environment variables according to your needs.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Kubernetes (GKE)",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/setup/kubernetes-gke.md",
    "content": "\nid: kubernetes-gke\ntitle: Kubernetes (GKE)\n\nDeploying ToolJet on Kubernetes (GKE)\n:::info\nYou should setup a PostgreSQL database manually to be used by ToolJet. We recommend using Cloud SQL since this guide is for deploying using GKE.\n:::\nFollow the steps below to deploy ToolJet on a GKE Kubernetes cluster.\n\nCreate an SSL certificate.\n\n`bash\ncurl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/GKE/certificate.yaml`\nChange the domain name to the domain/subdomain that you wish to use for ToolJet installation.\n\nReserve a static IP address using `gcloud` cli\n\n`bash\ngcloud compute addresses create tj-static-ip --global`\n\nCreate k8s deployment\n\n`bash\ncurl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/GKE/deployment.yaml`\nMake sure to edit the environment variables in the `deployment.yaml`. You can check out the available options here.\n:::info\nIf there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates. You can make use of kubernetes secrets to mount the certificate file onto the containers.\n:::\n\nCreate k8s service\n\n`bash\ncurl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/GKE/service.yaml`\n\nCreate k8s ingress\n\n`bash\ncurl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/GKE/ingress.yaml`\nChange the domain name to the domain/subdomain that you wish to use for ToolJet installation.\n\nApply YAML configs\n\n`bash\nkubectl apply -f certificate.yaml, deployment.yaml, service.yaml, ingress.yaml`\n:::info\nIt might take a few minutes to provision the managed certificates. Managed certificates documentation.\n:::\nYou will be able to access your ToolJet installation once the pods, service and the ingress is running.\nToolJet Database\nIf you intend to use this feature, you'd have to set up and deploy PostgREST server which helps querying ToolJet Database. Please follow the instructions here for additional environment variables configuration to be done.\n\nSetup PostgREST server\n\n`bash\n    kubectl apply -f https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/GKE/postgrest.yaml`",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Kubernetes (AKS)",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/setup/kubernetes-aks.md",
    "content": "\nid: kubernetes-aks\ntitle: Kubernetes (AKS)\n\nDeploying ToolJet on Kubernetes (AKS)\n:::info\nYou should setup a PostgreSQL database manually to be used by ToolJet. We recommend using Azure Database for PostgreSQL since this guide is for deploying using AKS.\n:::\nFollow the steps below to deploy ToolJet on a AKS Kubernetes cluster.\n\n\nCreate an AKS cluster and connect to it to start with the deployment. You can follow the steps as mentioned on the Azure's documentation.\n\n\nCreate k8s deployment\n\n\n`bash\n    curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/AKS/deployment.yaml`\nMake sure to edit the environment variables in the `deployment.yaml`. We advise to use secrets to setup sensitive information. You can check out the available options here.\n:::info\nIf there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates. You can make use of kubernetes secrets to mount the certificate file onto the containers.\n:::\n\n\nCreate k8s service and reserve a static IP and inorder expose it via a service load balancer as mentioned in the doc. You can refer `service.yaml`.\n   `bash\n    curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/AKS/service.yaml`\n\n\nApply YAML configs\n\n\n`bash\n    kubectl apply -f deployment.yaml, service.yaml`\nYou will be able to access your ToolJet installation once the pods and services running.\nToolJet Database\nIf you intend to use this feature, you'd have to set up and deploy PostgREST server which helps querying ToolJet Database. Please follow the instructions here for additional environment variables configuration to be done.\n\nSetup PostgREST server\n\n`bash\n    kubectl apply -f https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/GKE/postgrest.yaml`",
    "tag": "tooljet"
  },
  {
    "title": "Environment variables",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/setup/env-vars.md",
    "content": "\nid: env-vars\ntitle: Environment variables\n\nEnvironment variables\nBoth the ToolJet server and client requires some environment variables to start running.\nToolJet server\nToolJet host ( required )\n| variable     | description                                                     |\n| ------------ | --------------------------------------------------------------- |\n| TOOLJET_HOST | the public URL of ToolJet client ( eg: https://app.tooljet.com )  |\nLockbox configuration ( required )\nToolJet server uses lockbox to encrypt datasource credentials. You should set the environment variable `LOCKBOX_MASTER_KEY` with a 32 byte hexadecimal string.\nApplication Secret ( required )\nToolJet server uses a secure 64 byte hexadecimal string to encrypt session cookies. You should set the environment variable `SECRET_KEY_BASE`.\n:::tip\nIf you have `openssl` installed, you can run the following commands to generate the value for `LOCKBOX_MASTER_KEY` and `SECRET_KEY_BASE`.\nFor `LOCKBOX_MASTER_KEY` use `openssl rand -hex 32`\nFor `SECRET_KEY_BASE` use `openssl rand -hex 64`\n:::\nDatabase configuration ( required )\nToolJet server uses PostgreSQL as the database.\n| variable | description            |\n| -------- | ---------------------- |\n| PG_HOST  | postgres database host |\n| PG_DB    | name of the database   |\n| PG_USER  | username               |\n| PG_PASS  | password               |\n| PG_PORT  | port                   |\n:::tip\nIf you are using docker-compose setup, you can set PG_HOST as `postgres` which will be DNS resolved by docker\n:::\nDisable database and extension creation (optional)\nToolJet by default tries to create database based on `PG_DB` variable set and additionally my try to create postgres extensions. This requires the postgres user to have CREATEDB permission. If this cannot be granted you can disable this behaviour by setting `PG_DB_OWNER` as `false` and will have to manually run them.\nCheck for updates ( optional )\nSelf-hosted version of ToolJet pings our server to fetch the latest product updates every 24 hours. You can disable this by setting the value of `CHECK_FOR_UPDATES` environment variable to `0`. This feature is enabled by default.\nComment feature enable ( optional )\nUse this environment variable to enable/disable the feature that allows you to add comments on the canvas.\n| variable | value            |\n| -------- | ---------------------- |\n| COMMENT_FEATURE_ENABLE  | `true` or `false` |\nMultiplayer feature enable ( optional )\nUse this environment variable to enable/disable the feature that allows users to collaboratively work on the canvas.\n| variable | value            |\n| -------- | ---------------------- |\n| ENABLE_MULTIPLAYER_EDITING  | `true` or `false` |\nMarketplace feature enable ( optional )\nUse this environment variable to enable/disable the feature that allows users to use the marketplace.\n| variable | value            |\n| -------- | ---------------------- |\n| ENABLE_MARKETPLACE_FEATURE  | `true` or `false` |\nEnable ToolJet Database ( optional )\n| variable           | description                                  |\n| ------------------ | -------------------------------------------- |\n| ENABLE_TOOLJET_DB  | `true` or `false`                            |\n| TOOLJET_DB         | Default value is `tooljet_db`                |\n| TOOLJET_DB_HOST    | database host                                |\n| TOOLJET_DB_USER    | database username                            |\n| TOOLJET_DB_PASS    | database password                            |\n| TOOLJET_DB_PORT    | database port                                |\n| PGRST_JWT_SECRET   | JWT token client provided for authentication |\n| PGRST_HOST         | postgrest database host                      |\nUse `ENABLE_TOOLJET_DB` to enable/disable the feature that allows users to work with inbuilt data store to build apps with. Inorder to set it up, follow the instructions here.\n:::tip\nWhen this feature is enabled, the database name provided for `TOOLJET_DB` will be utilized to create a new database during server boot process in all of our production deploy setups.\nIncase you want to trigger it manually, use the command `npm run db:create` on ToolJet server.\n:::\nServer Host ( optional )\nYou can specify a different server for backend if it is hosted on another server.\n| variable | value            |\n| -------- | ---------------------- |\n| SERVER_HOST  | Configure a hostname for the server as a proxy pass. If no value is set, it defaults to `server`. |\nDisable Multi-Workspace ( optional )\nIf you want to disable Multi-Workspace feature, set the environment variable `DISABLE_MULTI_WORKSPACE` to `true`.\nHide account setup link\nIf you want to hide account setup link from admin in manage user page, set the environment variable `HIDE_ACCOUNT_SETUP_LINK` to `true`, please make sure you have configured SMTP to receive welcome mail for users. Valid only if `DISABLE_MULTI_WORKSPACE` is not `true`.\nDisabling signups ( optional )\nSign up is enabled only if Multi-Workspace is enabled. If you want to restrict the signups and allow new users only by invitations, set the environment variable `DISABLE_SIGNUPS` to `true`.\n:::tip\nYou will still be able to see the signup page but won't be able to successfully submit the form.\n:::\nServe client as a server end-point ( optional )\nBy default, the `SERVE_CLIENT` variable will be unset and the server will serve the client at its `/` end-point.\nYou can set `SERVE_CLIENT` to `false` to disable this behaviour.\nServe client at subpath\nIf ToolJet is hosted on a domain subpath, you can set the environment variable `SUB_PATH` to support it.\nPlease note the subpath is to be set with trailing `/` and is applicable only when the server is serving the frontend client.\nSMTP configuration ( optional )\nToolJet uses SMTP services to send emails ( Eg: invitation email when you add new users to your workspace ).\n| variable           | description                               |\n| ------------------ | ----------------------------------------- |\n| DEFAULT_FROM_EMAIL | from email for the email fired by ToolJet |\n| SMTP_USERNAME      | username                                  |\n| SMTP_PASSWORD      | password                                  |\n| SMTP_DOMAIN        | domain or host                            |\n| SMTP_PORT          | port                                      |\nSlack configuration ( optional )\nIf your ToolJet installation requires Slack as a data source, you need to create a Slack app and set the following environment variables:\n| variable            | description                    |\n| ------------------- | ------------------------------ |\n| SLACK_CLIENT_ID     | client id of the slack app     |\n| SLACK_CLIENT_SECRET | client secret of the slack app |\nGoogle OAuth ( optional )\nIf your ToolJet installation needs access to data sources such as Google sheets, you need to create OAuth credentials from Google Cloud Console.\n| variable             | description   |\n| -------------------- | ------------- |\n| GOOGLE_CLIENT_ID     | client id     |\n| GOOGLE_CLIENT_SECRET | client secret |\nGoogle maps configuration ( optional )\nIf your ToolJet installation requires `Maps` widget, you need to create an API key for Google Maps API.\n| variable            | description         |\n| ------------------- | ------------------- |\n| GOOGLE_MAPS_API_KEY | Google maps API key |\nAPM VENDOR ( optional )\nSpecify application monitoring vendor. Currently supported values - `sentry`.\n| variable   | description                               |\n| ---------- | ----------------------------------------- |\n| APM_VENDOR | Application performance monitoring vendor |\nSENTRY DNS ( optional )\n| variable   | description                               |\n| ---------- | ----------------------------------------- |\n| SENTRY_DNS |  DSN tells a Sentry SDK where to send events so the events are associated with the correct project  |\nSENTRY DEBUG ( optional )\nPrints logs for sentry.\n| variable   | description                               |\n| ---------- | ----------------------------------------- |\n| SENTRY_DEBUG | `true` or `false`. Default value is `false` |\nServer URL ( optional)\nThis is used to set up for CSP headers and put trace info to be used with APM vendors.\n| variable           | description                                                 |\n| ------------------ | ----------------------------------------------------------- |\n| TOOLJET_SERVER_URL | the URL of ToolJet server ( eg: https://server.tooljet.com ) |\nRELEASE VERSION ( optional)\nOnce set any APM provider that supports segregation with releases will track it.\nNODE_EXTRA_CA_CERTS (optional)\nTooljet needs to be configured for custom CA certificate to be able to trust and establish connection over https. This requires you to configure an additional env var `NODE_EXTRA_CA_CERTS` to have absolute path to your CA certificates. This file named `cert.pem` needs to be in PEM format and can have more than one certificates.\n| variable            | description                                                       |\n| ------------------  | ----------------------------------------------------------------- |\n| NODE_EXTRA_CA_CERTS | absolute path to certificate PEM file ( eg: /ToolJet/ca/cert.pem ) |\nDisable telemetry ( optional )\nPings our server to update the total user count every 24 hours. You can disable this by setting the value of `DISABLE_TOOLJET_TELEMETRY` environment variable to `true`. This feature is enabled by default.\nPassword Retry Limit (Optional)\nThe maximum retry limit of login password for a user is by default set to 5, account will be locked after 5 unsuccessful login attempts. Use the variables mentioned below to control this behavior:\n| variable                              | description                                                   |\n| ------------------------------------- | -----------------------------------------------------------   |\n| DISABLE_PASSWORD_RETRY_LIMIT          | (true/false) To disable the password retry check, if value is `true` then no limits for password retry |\n| PASSWORD_RETRY_LIMIT                  | To change the default password retry limit (5) |\nSSO Configurations (Optional)\nConfigurations for instance level SSO. Valid only if `DISABLE_MULTI_WORKSPACE` is not `true`.\n| variable                              | description                                                   |\n| ------------------------------------- | -----------------------------------------------------------   |\n| SSO_GOOGLE_OAUTH2_CLIENT_ID           | Google OAuth client id |\n| SSO_GIT_OAUTH2_CLIENT_ID              | GitHub OAuth client id |\n| SSO_GIT_OAUTH2_CLIENT_SECRET          | GitHub OAuth client secret |\n| SSO_GIT_OAUTH2_HOST                   | GitHub OAuth host name if GitHub is self hosted |\n| SSO_ACCEPTED_DOMAINS                  | comma separated email domains that supports SSO authentication |\n| SSO_DISABLE_SIGNUPS                   | Disable user sign up if authenticated user does not exist |\nToolJet client\nServer URL ( optionally required )\nThis is required when client is built separately.\n| variable           | description                                                 |\n| ------------------ | ----------------------------------------------------------- |\n| TOOLJET_SERVER_URL | the URL of ToolJet server ( eg: https://server.tooljet.com ) |\nServer Port ( optional)\nThis could be used to for local development, it will set the server url like so: `http://localhost:<TOOLJET_SERVER_PORT>`\n| variable            | description                             |\n|---------------------|-----------------------------------------|\n| TOOLJET_SERVER_PORT | the port of ToolJet server ( eg: 3000 ) |\nAsset path ( optionally required )\nThis is required when the assets for the client are to be loaded from elsewhere (eg: CDN).\nThis can be an absolute path, or relative to main HTML file.\n| variable           | description                                                   |\n| ------------------ | -----------------------------------------------------------   |\n| ASSET_PATH         | the asset path for the website ( eg: https://app.tooljet.com/) |\nServe client as a server end-point ( optional )\nBy default the client build will be done to be served with ToolJet server.\nIf you intend to use client separately then can set `SERVE_CLIENT` to `false`.\nPostgREST server (Optional)\n| variable           | description                                     |\n| ------------------ | ----------------------------------------------- |\n| PGRST_JWT_SECRET   | JWT token client provided for authentication    |\n| PGRST_DB_URI       | database connection string for tooljet database |\n| PGRST_LOG_LEVEL    | `info`                                          |\nIf you intent to make changes in the above configuration. Please refer PostgREST configuration docs.\n:::tip\nIf you have openssl installed, you can run the following command `openssl rand -hex 32` to generate the value for `PGRST_JWT_SECRET`.\nIf this parameter is not specified then PostgREST refuses authentication requests.\n:::\n:::info\nPlease make sure that DB_URI is given in the format `postgrest://[USERNAME]:[PASSWORD]@[HOST]:[PORT]/[DATABASE]`",
    "tag": "tooljet"
  },
  {
    "title": "Try ToolJet with Docker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/setup/docker-local.md",
    "content": "\nid: docker-local\ntitle: Try ToolJet locally\n\nTry ToolJet with Docker\n:::info\nThis doc is not for setting up the development environment, it is only for trying out ToolJet locally using Docker. Check out Contributing Guide.\n:::\nYou can run the command below to have ToolJet up and running right away.\n`bash\ndocker run \\\n  --name tooljet \\\n  --restart unless-stopped \\\n  -p 3000:3000 \\\n  -v tooljet_data:/var/lib/postgresql/13/main \\\n  tooljet/try:latest`\nSetup information\n\nRuns the ToolJet server on the port 3000 on your machine.\nContainer has postgres already configured within. All the data will be available in the docker volume `tooljet_data`.\nDefault user credentials to login (email: `dev@tooljet.io`, password: `password`).\nYou can make use of `--env` or `--env-file` flag to test against various env configurables mentioned here.\n",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on DigitalOcean",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/setup/digitalocean.md",
    "content": "\nid: digitalocean\ntitle: DigitalOcean\n\nDeploying ToolJet on DigitalOcean\nNow you can quickly deploy ToolJet using the Deploy to DigitalOcean button.\nDeploying\nFollow the steps below to deploy ToolJet on DigitalOcean:\n\nClick on the button below to start one click deployment\n\n\n\n  [![Deploy to DigitalOcean](https://www.deploytodo.com/do-btn-blue.svg)](https://cloud.digitalocean.com/apps/new?repo=https://github.com/ToolJet/ToolJet/tree/main)\n\n  \n\nA new tab will open up, sign-in to your DigitalOCean account. Once signed-in, the Create App page will open up and Resources will be already selected. Click on Next button.\n\n\n\nNow, on Environment Variables page you can add new variables or edit the existing ones. Check the environment variables here.\n\n\n\nOn the next page, you can change the App name, Project, and the Region.\n\n\n\nOn the last page, you'll be asked to Review all the app details such that we entered before such as Resources, Environment Variables, Region, and there will also be Billing section at the end. Review all the details and click the Create Resource button.\n\n\n\nOnce you click the Create Resource button, the build will begin. Once the build is complete, you'll see the resource and a URL next to it. Click on the URL to open the deployed ToolJet.\n\n:::tip\nToolJet server and client can be deployed as standalone applications. If you do not want to deploy the client on DigitalOcean, modify `package.json` accordingly. We have a guide on deploying ToolJet client using services such as Firebase.\n:::\nDeploying Tooljet Database\nIf you intend to use this feature, you'd have to set up and deploy PostgREST server which helps querying ToolJet Database.\nYou can learn more about this feature here.\nFollow the steps below to deploy ToolJet Database on DigitalOcean:\n\n\nIf you are using dev database within ToolJet deployment, upgrade it to managed database. You could also add a separate database, if you intent use a differenet database, please refer the environment variables for additional env variables. \n\n\nCreate a new app for PostgREST server. You can opt for docker hub to deploy PostgREST image of version `10.1.x`.\n\n\n\n\nUpdate the environment variables for PostgREST and expose the HTTP port `3000`.\n\n\n\nAdd your newly created PostgREST app to the trusted sources of your managed or separate database.\n",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet using Docker Compose",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/setup/docker.md",
    "content": "\nid: docker\ntitle: Docker\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nDeploying ToolJet using Docker Compose\nFollow the steps below to deploy ToolJet on a server using Docker Compose. ToolJet requires a PostgreSQL database to store applications definitions, (encrypted) credentials for datasources and user authentication data.\n:::info\nIf you rather want to try out ToolJet on your local machine with Docker, you can follow the steps here.\n:::\nInstalling Docker and Docker Compose\nInstall docker and docker-compose on the server.\n   - Docs for Docker Installation\n   - Docs for Docker Compose Installation\nDeployment options\nThere are two options to deploy ToolJet using Docker Compose:\n1.   Using an external PostgreSQL database. This setup is recommended if you want to use a managed PostgreSQL service such as AWS RDS or Google Cloud SQL.\n2.   Using in-built PostgreSQL database. This setup uses the official Docker image of PostgreSQL.\nConfused about which setup to select? Feel free to ask the community via Slack: https://tooljet.com/slack.\n:::info\nWe recommend using the managed PostgreSQL service on production for ease of administration, security, and management (backups, monitoring, etc).\nIf you'd want to run postgres with persistent volume rather, curl for the alternate docker compose file shared in the next step.\n:::\n\n\n\n\nSetup a PostgreSQL database and make sure that the database is accessible.\n\n\nDownload our production docker-compose file into the server.\n  `bash\n  curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/docker/docker-compose.yaml`\n\n\nCreate `.env` file in the current directory (where the docker-compose.yaml file is downloaded):\n\n\n`bash\n  curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/docker/.env.example\n  mv .env.example .env`\nSet up environment variables in `.env` file as explained in environment variables reference\n`TOOLJET_HOST` environment variable can either be the public ipv4 address of your server or a custom domain that you want to use.\nExamples:\n  `TOOLJET_HOST=http://12.34.56.78` or\n  `TOOLJET_HOST=https://yourdomain.com` or\n  `TOOLJET_HOST=https://tooljet.yourdomain.com`\n:::info\n  Please make sure that `TOOLJET_HOST` starts with either `http://` or `https://`\n  :::\n:::info\n  If there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates.\n  :::\n\nOnce you've populated the `.env` file, run\n\n:::note\n  Kindly uncomment PostgREST service within the docker-compose.yaml if you intend to use tooljet database.\n  :::\n`bash\n  docker-compose up -d`\nto start all the required services.\n:::info\n  If you're running a linux server, `docker` might need sudo permissions. In that case you can either run:\n  `sudo docker-compose up -d`\n  or\n  setup docker to run without root privileges by following the instructions written here https://docs.docker.com/engine/install/linux-postinstall/\n  :::\n\nIf you've set a custom domain for `TOOLJET_HOST`, add a `A record` entry in your DNS settings to point to the IP address of the server.\n\n\n\n\n\nDownload our production docker-compose file into the server.\n  `bash\n  curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/docker/docker-compose-db.yaml\n  mv docker-compose-db.yaml docker-compose.yaml\n  mkdir postgres_data`\n\n\nCreate `.env` file in the current directory (where the docker-compose.yaml file is downloaded):\n\n\n`bash\n  curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/docker/.env.example\n  mv .env.example .env`\nSet up environment variables in `.env` file as explained in environment variables reference\n`TOOLJET_HOST` environment variable can either be the public ipv4 address of your server or a custom domain that you want to use.\nExamples:\n  `TOOLJET_HOST=http://12.34.56.78` or\n  `TOOLJET_HOST=https://yourdomain.com` or\n  `TOOLJET_HOST=https://tooljet.yourdomain.com`\n:::info\n  Please make sure that `TOOLJET_HOST` starts with either `http://` or `https://`\n  :::\n:::info\n  If there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates.\n  :::\n\nOnce you've populated the `.env` file, run\n\n:::note\n  Kindly uncomment PostgREST service within the docker-compose.yaml if you intend to use tooljet database.\n  :::\n`bash\n  docker-compose up -d`\nto start all the required services.\n:::info\n  If you're running on a linux server, `docker` might need sudo permissions. In that case you can either run:\n  `sudo docker-compose up -d`\n  OR\n  Setup docker to run without root privileges by following the instructions written here https://docs.docker.com/engine/install/linux-postinstall/\n  :::\n\nIf you've set a custom domain for `TOOLJET_HOST`, add a `A record` entry in your DNS settings to point to the IP address of the server.\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet client",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/setup/client.md",
    "content": "\nid: client\ntitle: Deploying ToolJet client\n\nDeploying ToolJet client\nToolJet client is a standalone application and can be deployed on static website hosting services such as Netlify, Firebase, S3/Cloudfront, etc.\nYou can build standalone client with the below command:\n`bash\nSERVE_CLIENT=false npm run build`\nDeploying ToolJet client on Firebase\n:::tip\nYou should set the environment variable `TOOLJET_SERVER_URL` ( URL of the server ) while building the frontend and also set `SERVE_CLIENT` to `false`` for standalone client build.\nFor example: `SERVE_CLIENT=false TOOLJET_SERVER_URL=https://server.tooljet.com npm run build && firebase deploy`\n:::\n\nInitialize firebase project\n   `bash\n    firebase init`\n   Select Firebase Hosting and set build as the static file directory\nDeploy client to Firebase\n   `bash\n    firebase deploy`\n\nDeploying ToolJet client with Google Cloud Storage\n:::tip\nYou should set the environment variable `TOOLJET_SERVER_URL` ( URL of the server ) while building the frontend.\nFor example: `SERVE_CLIENT=false TOOLJET_SERVER_URL=https://server.tooljet.io npm run build`\n:::\nUsing Load balancer\nTooljet client can be hosted from Cloud Storage bucket just like hosting any other static website.\nFollow the instructions from google documentation here.\nSummarising the steps below:\n1. Create a bucket and upload files within the build folder such that the `index.html` is at the bucket root.\n\n\nEdit permissions for the bucket to assign New principal as `allUsers` with role as `Storage Object Viewer` and permit for public access for the bucket.\n\n\nClick on Edit website configuration from the buckets browser and specify the main page as `index.html`\n\n\nFollow the instructions on creating a load balancer for hosting a static website.\n\n\nOptionally, create Cloud CDN to use with the backend bucket assigned to the load balancer.\n\n\nAfter the load balancer is created there will be an IP assigned to it. Try hitting it to check the website is being loaded.\n\n\nUse the load balancer IP as the static IP for the A record of your domain.\n\n\nUsing Google App Engine\n\n\nUpload the build folder onto a bucket\n\n\nUpload `app.yaml` file onto bucket with the following config\n\n\n```yaml\n   runtime: python27\n   api_version: 1\n   threadsafe: true\nhandlers:\n   - url: /\n     static_files: build/index.html\n     upload: build/index.html\n\n\nurl: /(.)\n     static_files: build/\\1\n     upload: build/(.)\n   ```\n\n\nActivate cloud shell on your browser and create build folder\n   `bash\n   mkdir tooljet-assets`\n\n\nCopy the uploaded files onto an assets folder which is to be served\n   `bash\n   gsutil rsync -r gs://your-bucket-name/path-to-assets ./tooljet-assets`\n\n\nDeploy static assets to be served\n   ```bash\n   cd tooljet-assets && gcloud app deploy\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Examples",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/how-to/import-external-lib-py.md",
    "content": "\nid: import-external-libraries-using-runpy\ntitle: Import external libraries using RunPy\n\nToolJet allows you to utilize python packages in your app by importing them using the RunPy query. \nIn this how-to guide, we will import a few packages and use it in the application.\n:::caution Unsupported modules\nThe modules that are not currently supported in Pyodide are those that have C or C++ extensions that rely on system libraries. These modules cannot be used in Pyodide because it runs in a web browser, which does not have access to the underlying system libraries that the C or C++ extensions rely on. Additionally, Pyodide uses a version of Python that has been compiled to WebAssembly, which does not support the same system calls as a regular version of Python. Therefore, any module that requires access to system libraries or system calls will not work in Pyodide.\n:::\n\n\nCreate a new application and then create a new RunPy query from the query panel.\n    \n\n\n\n\nLet's write some code for importing packages. We will first import the micropip which is a package installer for Python and then we will install the `Pandas` and `NumPy` using micropip. Run the query to install the packages.\n    `python\n    import micropip\n    await micropip.install('pandas')\n    await micropip.install('numpy')`\n\n\n\n\n\n:::tip\nEnable the Run this query on application load? option to make the packages available throughout the application.\n:::\nExamples\nArray of random numbers of using NumPy\n\n\nLet's create a RunPy query that will use random module from the NumPy package and the query will generate array of random numbers. \n    ```python\n    from numpy import random\nx = random.binomial(n=10, p=0.5, size=10)\nprint(x)\n```\n\n\n\n\n\n:::info\nYou can check the output on the browser's console.\n:::\nParse CSV data\n\n\nLet's create a RunPy query that will parse the data from the csv file. In this query we will use `StringIO`, `csv`, and `Pandas` module.\n    ```python\n    from io import StringIO\n    import csv\n    import pandas as pd\nscsv = components.filepicker1.file[0].content\nf = StringIO(scsv)\nreader = csv.reader(f, delimiter=',')\ndf = pd.DataFrame(reader)\nprint(df.info())\nprint(df)\n```\n\n\n\n\n\nAdd a file picker component on the canvas and set a event handler for On file loaded event to Run Query that we created for parsing the data.\n    \n\n\n\n\nFinally, let's load a csv file on the file picker and check the output by the RunPy query on the browser console.\n    \n\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Upload and download files on AWS S3 bucket",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/how-to/upload-files-aws.md",
    "content": "\nid: upload-files-aws\ntitle: Upload files on AWS S3 bucket\n\nUpload and download files on AWS S3 bucket\nThis guide will help you in quickly building a basic UI for uploading or downloading files from AWS S3 buckets.\nBefore building the UI, check out the docs for AWS S3 data source to learn about setting up AWS S3 and adding the data source. \nOnce you have successfully added the AWS data source, build a basic UI using the following widgets:\n- Dropdown: For selecting a bucket in S3 storage.\n- Table: For listing all the objects inside the selected bucket in dropdown.\n- Text Input: For getting a path for the file that is to be uploaded.\n- File picker: For uploading the file.\n- Button: This will be used to fire the upload query.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/ui.png)\n\n\nQueries\nWe'll create the following queries:\n\ngetBuckets\nlistObjects\nuploadToS3\ndownload\n\ngetBuckets\nThis query will fetch the list of all the buckets in your S3. Just create a new query, select AWS S3 data source, and choose List buckets operation. Name the query getBuckets and click Save.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/getBuckets.png)\n\n\nNow, let's edit the properties of dropdown widget.\n\nLabel: Set the label as Bucket.\nOption values: Set option values as `{{queries.getBuckets.data.Buckets.map(bucket => bucket['Name'])}}`. We're mapping the data returned by the query as the returned data is array of abjects.\nOption label: Set option values as `{{queries.getBuckets.data.Buckets.map(bucket => bucket['Name'])}}`. This will display the same option label as option values.\n\nYou can later add an event handler for running the listObject query whenever an option is selected from the dropdown.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/dropdown.png)\n\n\nlistObjects\nThis query will list all the objects inside the selected Bucket in dropdown. Select List objects in a bucket operation, enter `{{components.dropdown1.value}}` in the Bucket field - this will dynamically get the field value from the selected option in dropdown.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/listObjects.png)\n\n\nEdit the properties of table widget:\n- Table data: `{{queries.listObjects.data['Contents']}}`\n- Add Columns:\n  - Key: Set the Column Name to `Key` and Key to `Key`\n  - Last Modified: Set the Column Name to `Last Modified` and Key to `LastModified`\n  - Size: Set the Column Name to `Size` and Key to `Size`\n- Add a Action button: Set button text to Copy signed URL, Add a handler to this button for On Click event and Action to Copy to clipboard, in the text field enter `{{queries.download.data.url}}` - this will get the download url from the download query that we will create next.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/table.png)\n\n\ndownload\nCreate a new query and select Signed URL for download operation. In the Bucket field, enter `{{components.dropdown1.value}}` and in Key enter `{{components.table1.selectedRow.Key}}`.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/download.png)\n\n\nEdit the properties of the table, add a Event handler for running the `download` query for `Row clicked` event. This will generate a signed url for download every time a row is clicked on the table.\nuploadToS3\nCreate a new query, select the Upload object operation. Enter the following values in their respective fields:\n- Bucket: `{{components.dropdown1.value}}`\n- Key:  {{ components.textinput1.value + '/' +components.filepicker1.file[0].name}}`- **Content type**:`{{components.filepicker1.file[0].type}}`- **Upload data**:`{{components.filepicker1.file[0].base64Data}}`- **Encoding**:`base64`\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/uploadToS3.png)\n\n\nConfigure the file picker:\nClick on the widget handle to edit the file picker properties: \n\nChange the Accept file types to `{{\"application/pdf\"}}` for the picker to accept only pdf files or `{{\"image/*\"}}` for the picker to accept only image files . In the screenshot below, we have set the accepted file type property to `{{\"application/pdf\"}}` so it will allow to select only pdf files:\n\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/result-filepicker.png)\n\n\n\n\nChange the Max file count to `{{1}}` as we are only going to upload 1 file at a time.\n\n\nSelect a pdf file and hold it in the file picker.\n\n\n:::info\n File types must be valid MIME type according to input element specification or a valid file extension.\nTo accept any/all file type(s), set `Accept file types` to an empty value.\n:::\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/config-filepicker.png)\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Change text color in columns by accessing `cellValue` and `rowData` in the table",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/how-to/access-cellvalue-rowdata.md",
    "content": "\nid: access-cellvalue-rowdata\ntitle: Change text color in columns of the table\n\nChange text color in columns by accessing `cellValue` and `rowData` in the table\nIn this how-to guide, we will build an app that will use a sample RestAPI to display the data in the table, and then we will change the text color of the columns according to the condition.\n\nLet's start by creating a new application and then adding a table widget into the canvas.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/newapp.gif)\n\n\n\nNow go to the Query Panel at the bottom of the app editor and click on the `+` button.\nChoose RestAPI data source\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/restapi.png)\n\n\n\nNow we will use a sample RestAPI endpoint -  I have used the API provided by coinstats.app, API-URL:\nhttps://api.coinstats.app/public/v1/coins?skip=0&limit=100&currency=USD\nChoose `GET` method, enter the request URL (API URL in previous step), name the query - I have named it `crypto`, and then Create the query\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/apiendpoint.png)\n\n\n\nNow hit the Run button next to the query name to run the query.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/runquery.png)\n\n\n\nOnce you run the query, you can check the data returned by the query in the Inspector on the left sidebar.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/inspectord.png)\n\n\n\nNow that we have got the data, we will display it on the table. To do this, click on the widget handle of the table to open its properties in the right sidebar. \nIn the Table Data field, enter `{{queries.crypto.data.coins}}` - as you can see in the screenshot of the inspector the data is inside the `coins` array. You'll see the data in the Preview(green box) below the field.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/data.png)\n\n\n\nLet's add the columns that we want to display on the table. Go to the Columns section, Add columns, set their Names, and set key for each column. I have added 5 columns: Rank, Name, Symbol, Price, and Market Cap.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/columns.png)\n\n\n\nOnce you've added the columns, you'll get the table like this:\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/table.png)\n\n\nUsing cellValue to change column text color\nNow that we have our data on the table, we will change the color of the text in the Price and Market Cap columns.\n\nEdit table properties, go to Columns, and click on the Price Column to open its properties.\nFor Price column, we want to change color of those cells who have value which is greater than 1000 to red else to green if it is less than 1000. So to do this, we will set a condition in Text Color property of this column: `{{cellValue >= 1000 ? 'red' : 'green'}}`\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/price.png)\n\n\n\nSimilarly, we will do for Market Cap column. We want to change the text color of those cells who have value which is greater than 60000000000 to red else to green if it is less than 60000000000. so the condition will be `{{cellValue >= 60000000000 ? 'red' : 'green'}}`\nNow the text color of cells in the columns will be updated.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/cellvalue.png)\n\n\n:::info\nYou can also use Hex Color Code instead of mentioning color in plane text.\n:::\nUsing rowData to change column text color\n\nTo change the color of the text using `rowData` variable it is required to mention the column name whose cell value we will be comparing in the condition. Let's take a look by changing the text color of Symbol column. \nWe will add a condition to look in the row data and if the row has column called `name` which has value `Solana` then it should change the color to red else the color should be green.\nEdit the properties of the Symbol column, set the Text Color field value to `{{rowData.name ===  'Solana' ? 'red' : 'green'}}`.\nYou'll see that in the Symbols column all the values has become green except the one that has Solana in Name column.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/rowData.png)",
    "tag": "tooljet"
  },
  {
    "title": "Upload files using GCS",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/how-to/upload-files-gcs.md",
    "content": "\nid: upload-files-gcs\ntitle: Upload files using GCS\n\nUpload files using GCS\nIn this guide, we are going to create an interface to upload PDFs to Google Cloud Storage.\nBefore adding the new data source we will need to have a private key for our GCS bucket and make sure the key has the appropriate rights.\nSetting up Google Cloud Storage data source\n\nGo to the data source manager on the left-sidebar and click on the `+` button.\nAdd a new GCS data source from the  APIs section in modal that pops up.\nEnter the JSON private key for service account and test the connection.\nClick on Save to add the data source.\n\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/adding-account.png)\n\n\nAdding a file picker\n\nDrag and drop the file picker widget on the canvas\nConfigure the file picker:\nChange the Accept file types to `{{\"application/pdf\"}}` for the picker to accept only pdf files. In the screenshot below, we have set the accepted file type property to `{{\"application/pdf\"}}` so it will allow to select only pdf files:\n\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/result-filepicker.png)\n\n\n\n\nChange the Max file count to `{{1}}` as we are only going to upload 1 file at a time.\n\n\nSelect a pdf file and hold it in the file picker.\n\n\n:::info\n File types must be valid MIME type according to input element specification or a valid file extension.\nTo accept any/all file type(s), set `Accept file types` to an empty value.\n:::\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/config-filepicker.png)\n\n\nCreating a query\n\nClick on the `+` button of the query manager at the bottom panel of the editor and select the GCS data source\nSelect Upload file operation and enter the required parameters:\nBucket: `gs://test-1`\nFile Name: `{{components.file1.file[0]['name']}}`\nContent Type: `{{components.file1.file[0]['type']}}`\nUpload data: `{{components.file1.file[0]['base64Data']}}`\nEncoding: `base64`\nClick on Save to create the query\n\nRunning the query\n\nAdd a button that will fire the query to upload the file\nEdit the properties of the button and add a event handler to Run the query on On-Click event.\nClick on Button to fire the query, this will upload the pdf file that you selected earlier through the file picker and will upload it on the GCS.\n\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/final-result.png)",
    "tag": "tooljet"
  },
  {
    "title": "use-form-component.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/how-to/use-form-component.md",
    "content": "\nid: use-form-component\ntitle: Use form component\n\nIn this how-to guide, we will be building a simple application that will leverage the form component for adding a record into the database. For this guide, we will be using Google Sheet datasource to read and write data.\n\n\n\n\n\nLet's connect to the datasource i.e. Google Sheets and give the `Read and Write` permission.\n    \n\n\n- Now, drag a table on the canvas and add the form component next to it.\n\n\n\n\n\nCurrently, the table component is populated with the sample data that it has by default. Let's create a new query from the query panel and choose the Google Sheet datasource. \n    \n\n\n\n\nThe query will read the data from the database and we will use the returned data to populate the table. Go to the table property and in the table data value enter {{queries.queryname.data}} where queryname is the name of the query that we created in previous step.\n    \n\n\n\n\nlet's go to the form and add the components inside it required for adding a record into the database.\n    \n\n\n\n\nSince our database record has five fields Id, Title, Price, Category and Image we will add the components in the form for the same. The form already comes with a Submit button so we don't have to add that. For Id, Title, and Image we will use text-input, for Price we will use number-input and for category we can use dropdown components.\n    \n\n\n\n\nBefore editing the form properties, let's make a few changes in the components that we have added inside it. First edit the property of the number input and set the default value, maximum and minimum value, and then edit the dropdown component and set the option values and option labels.\n    \n\n\n\n\nNow, we can edit the properties of the form component. Go to its properties, in Button To Submit Form select the button1 that was already there on the form. Go to event handler, and for On submit event we will run the query that will get the data from the form and will store into the database.\n    \n\n\n\n\nLet's create a query that will get the data from the form and add a record in the sheet. Create a new google sheeet query and from the operation choose Append data to a spreadsheet\n`js\n    [ \n        {\n            \"id\":\"{{components.form1.data.textinput1.value}}\",\n            \"title\":\"{{components.form1.data.textinput2.value}}\",\n            \"price\":\"{{components.form1.data.numberinput1.value}}\",\n            \"category\":\"{{components.form1.data.dropdown1.value}}\",\n            \"image\":\"{{components.form1.data.textinput4.value}}\"\n        } \n    ]`\n\n\nOnce done, save the query and add it to the Form's event handler.\n\n\nNow, this application can be used to load the data from the Google Sheet and the form can be used to append more records to the sheet.\n\n\n:::tip\n- Make sure to enable Run query on page load? option of the read query to populate the table everytime the app is loaded\n- You can also add a event handler on the append query to run the read query when append is successful, this will update the table data when the append is done\n- Learn more about the connecting Google sheet datasource and the CRUD operations available here.",
    "tag": "tooljet"
  },
  {
    "title": "REST API authentication using OAuth 2.0",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/how-to/oauth2-authorization.md",
    "content": "\nid: oauth2-authorization\ntitle: REST API authentication using OAuth 2.0\n\nREST API authentication using OAuth 2.0\nToolJet\u2019s REST API data source supports OAuth 2.0 as the authentication type. In this guide, we\u2019ll learn how to use Google OAuth2 API to delegate authorization and authentication for your ToolJet Application.\nBefore setting up the REST API data source in ToolJet, we need to configure the Google Cloud Platform to gather the API keys required for the authorization access.\nSetting up Google Cloud Platform\nGoogle Cloud Platform provides access to more than 350 APIs and Services that can allow us to access data from our Google account and its services. Let's create an OAuth application that can be given permission to use our Google profile data such as Name and Profile picture.\n\nSign in to your Google Cloud account, and from the console create a New Project.\nNavigate to the APIs and Services, and then open the OAuth consent screen section from the left sidebar.\nEnter the Application details and select the appropriate scopes for your application. We will select the profile and the email scopes. \nOnce you have created the OAuth consent screen, Create new credentials for the OAuth client ID from the Credentials section in the left sidebar.\nSelect the application type, enter the application name, and then add the following URIs under Authorised Redirect URIs:\n`https://app.tooljet.com/oauth2/authorize` (if you\u2019re using ToolJet cloud)\n`http://localhost:8082/oauth2/authorize` (if you\u2019re using ToolJet locally)\n\n\nNow save and then you\u2019ll get the Client ID and Client secret for your application.\n\n\nConfiguring ToolJet Application with Google's OAuth 2.0 API\nLet's follow the steps to authorize ToolJet to access your Google profile data:\n\nSelect add data source from the left sidebar, and choose REST API from the dialog window.\n\n:::info\nYou can rename the data source by clicking on its default name `REST API`\n:::\n\nIn the URL field, enter the base URL `https://www.googleapis.com/oauth2/v1/userinfo`; the base URL specifies the network address of the API service.\nSelect authentication type as `OAuth 2.0`\nKeep the default values for Grant Type, Add Access Token To, and Header Prefix i.e. `Authorization Code`, `Request Header`, and `Bearer` respectively.\nEnter Access Token URL: `https://oauth2.googleapis.com/token`; this token allows users to verify their identity, and in return, receive a unique access token.\nEnter the Client ID and Client Secret that we generated from the Google Console.\nIn the Scope field, enter `https://www.googleapis.com/auth/userinfo.profile`; Scope is a mechanism in OAuth 2.0 to limit an application's access to a user's account. Check the scopes available for Google OAuth2 API here.\nEnter Authorization URL: `https://accounts.google.com/o/oauth2/v2/auth`; the Authorization URL requests authorization from the user and redirects to retrieve an authorization code from identity server.\n\nCreate three Custom Authentication Parameters:\n| params      | description |\n| ----------- | ----------- |\n| response_type | code ( `code` refers to the Authorization Code) |\n| client_id | Client ID  |\n| redirect_uri | `http://localhost:8082/oauth2/authorize` if using ToolJet locally or enter this `https://app.tooljet.com/oauth2/authorize` if using ToolJet Cloud.  |\n\n\nKeep the default selection for Client Authentication and Save the data source.\n\n\n\nCreate the query\nLet\u2019s create a query to make a `GET` request to the URL, it will pop a new window and ask the user to authenticate against the API.\n\nAdd a new query and select the REST API datasource from the dropdown\nIn the Method dropdown select `GET` and in advance tab toggle `run query on page load?`\nSave and Run the query.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Access a user's location using RunJS query (Geolocation API)",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/how-to/access-users-location.md",
    "content": "\nid: access-users-location\ntitle: Access a user's location\n\nAccess a user's location using RunJS query (Geolocation API)\nIn this how-to guide, we will build a ToolJet application that will utilize the JavaScript Geolocation API to get the user's location. The Geolocation API provides access to geographical location data associated with a user's device. This can be determined using GPS, WIFI, IP Geolocation and so on.\n:::info\nTo protect the user's privacy, Geolocation API requests permission to locate the device. If the user grants permission, you will gain access to location data such as latitude, longitude, altitude, and speed. \n:::\n\n\nLet's start by creating a new application\n\n\n\n\n\nIn the app editor, go to the query panel at the bottom and create a RunJS query by selecting Run JavaScript Code as the datasource\n\n\n\n\n\nYou can use the following javascript code that makes use of geolocation api to get the location\n```js\nfunction getCoordinates() {\nreturn new Promise(function(resolve, reject) {\n    navigator.geolocation.getCurrentPosition(resolve, reject);\n});\n}\nasync function getAddress() {\n// notice, no then(), cause await would block and \n// wait for the resolved result\nconst position = await getCoordinates(); \nlet latitude = position.coords.latitude;\nlet longitude = position.coords.longitude;\nreturn [latitude, longitude];\n}\nreturn await getAddress()\n```\n\n\nNow, go to the Advanced tab and enable the `Run query on page load?` option. Enabling this option will run this javascript query every time the app is opened by the user and the query will return the location\n\n\nSave the query and hit the fire button\n\n\nAs soon as you hit the fire button, the browser will prompt you to allow the permission to share the location access to ToolJet app. You'll need to allow it to return the location data\n\n\n\n\n\nNow, to check the data returned by the query go to the Inspector on the left sidebar. Expand the queries -> `runjs1`(query name) -> and then expand the data. You'll find the coordinates\n\n\n\n\n\nNext, we can use these coordinates returned by the query on the map component to show the location. Drop a map component on the canvas and edit its properties. In the Initial location property, enter\n`js\n{{ {\"lat\": queries.runjs1.data[0], \"lng\": queries.runjs1.data[1]} }}`\n\n\n\n\n\nFinally, you'll see the location updated on the map component\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Enable/Disable a component using current user's property",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/how-to/access-users-groups.md",
    "content": "\nid: access-currentuser\ntitle: Enable/Disable a component using current user's property\n\nEnable/Disable a component using current user's property\nLet's take look at the exposed variables of the current user property:\n\nemail : The value can accessed using `{{globals.currentUser.email}}`\nfirstName : The value can accessed using `{{globals.currentUser.firstName}}`\nlastName : The value can accessed using `{{globals.currentUser.lastName}}`\nlastName : The value can accessed using `{{globals.currentUser.lastName}}`\ngroups : By default, the admin will be in the two groups `all_users` and `admin`, and any user who is not admin will always be in the `all_users` group by default. Since the groups is an array you\u2019ll have to provide the index ([0], [1], and so on) to return the group name. The value can be accessed using `{{globals.currentUser.groups[1]}}`.\n\n\n\n\nExample: Disable a button if a user is not admin\n\n\nClick on the Button handle to open its properties, on the Styles tab go to the Disable property. \n\n\n\n\n\nSet a condition on the Disable field so that if the the user who is using the app does not have admin value in the first index of groups array return true. The condition can be:\n`javascript\n{{globals.currentUser.groups[1] !== \"admin\" ? true : false}}`\n\n\n\n\n\nNow, when you'll release the app, if the user is not is not admin the button will be disabled. \n\n\n\n\n\n:::info\nIn this how-to we have used the Groups property of the Current User. You can use any of the exposed variables mentioned above according to your use.",
    "tag": "tooljet"
  },
  {
    "title": "loading-image-pdf-from-db.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/how-to/loading-image-pdf-from-db.md",
    "content": "\nid: loading-image-pdf-from-db\ntitle: Loading image/PDF from base64 string\n\nIn this how-to guide we will see how we can load an image or PDF file using the base64 string available on the database. In this how-to, we have used the postgres database which already has the base64 strings for the image or the PDF files available.\n\n\nLet's drag a filepicker component onto the canvas, and pick one image and one pdf file\n    \n\n\n\n\nNow, create a query for inserting an image from the filepicker. As you can see in the screenshot below, we are using the exposed variable of the filepicker component to retrieve the base64 data of the uploaded files.\n    \n\n\n\n\nCreate another query for returning the data from the database and we will use this base64 data returned in this query to display on the image and pdf components.\n    \n\n\n\n\nDrag the image and a PDF component on the canvas. Edit the property of the PDF component and in the file URL enter:\n    `js\n    {{'data:image/png;base64,' + queries.get.data[7].pdf}}`\n    Similarly for the image component:\n    `js\n    {{'data:image/jpeg;base64,' + queries.get.data[7].image}}`\n\n\n\n\n\n:::info\nYou can also use transformations in the query response and concat `data:image/jpeg;base64,` to the base64 data.",
    "tag": "tooljet"
  },
  {
    "title": "run-query-at-specified-intervals.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/how-to/run-query-at-specified-intervals.md",
    "content": "\nid: run-query-at-specified-intervals\ntitle: Run query at specified intervals\n\nIn this how-to guide, we will learn how to make a query trigger at the specific intervals.\n\nLet's go to the ToolJet dashboard and create a new application\nOnce the app builder opens up, drag a table component to canvas\n\nNow, create a new REST API query from the query panel at the bottom of the app builder. We will be using the data from the mock REST API and then load the data on the table. Let's create a REST API, choose `GET` method from the dropdown, enter the endpoint `(https://jsonplaceholder.typicode.com/posts)`, name the query `post` and then save and run it\n    \n\n\n- Go to the Table properties and add connect the query data to table by adding value to table data property which is `{{queries.post.data}}`\n\n\n\n\n\nNow, we will create a RunJS query that will first set a variable called `interval` which will include the value returned by the `setInterval()` method that calls a function `countdown` at specified intervals. The countdown function has the code to trigger the `post` query that we created in the previous step.\n`js\nactions.setVariable('interval',setInterval(countdown, 5000));\nfunction countdown(){\n    queries.post.run()\n}`\n- Go to the Advanced tab of the query, enable `Run query on page load?` this will trigger this RunJS query when the app is loaded. Name the query as `set` and Save it. Note that you will have to save the query and not `Save and Run` because doing it will trigger the query and you won't be able to stop the query unless you reload the page or go back to dashboard.\n\n\n\n- To prevent the query from triggering indefinitely, we will create another RunJS query that will make use of `clearInterval()` method. In this method we will get the value from the variable that we created in `set` query. Save this query as `clear`.\n`js\nclearInterval(variables.interval)`\n- Finally, let's add a button on to the canvas and add the event handler to the button to run the `clear` query.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Layout",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/how-to/use-inspector.md",
    "content": "\nid: use-inspector\ntitle: Use Inspector\n\nIn this how-to guide, we will take a look at Inspector of the app-builder and see how it can be helpful in building applications.\nThe Inspector can be used to inspect the data of the queries, properties and values of the components that are there on the canvas, ToolJet's global variables and the variables that have been set by the user.\n\n\n\nLayout\nLet's take a look at the layout of the Inspector panel:\n\n\nOn the top-right, we have a Pin button to pin and unpin the inspector panel. This button can be useful when you want to see the live changes on inspector while triggering a query or performing some event/action on any component.\n    \n\n\n\n\nAt the bottom right, you can click and hold to resize the inspector.\n    \n\n\n\n\nOn hovering an item on the inspector, the copy path and copy value buttons will appear on the right of the item. Copying the path and pasting it onto the component property or query parameter will always get the dynamic value but using `Copy value` uption will copy the current value of the item and will be static when pasted in a component property or query parameter.\n    \n\n\n\n\nSections\nThe Inspector panel has the following 4 main sections:\n\nqueries\ncomponents\nglobals\nvariables\n\nqueries\nThe queries section can be used to inspect the query details but the data of the query will only be available if query has been run/triggered.\n:::tip\nYou can click on the Preview button of the button on the query manager to check the response(data) of the query without triggering it.\n:::\nExample\n\nLet's create a new query using a mock REST API endpoint (`https://fakestoreapi.com/products`).\n\nNow go to the Inspector and expand the queries section, you'll see an entry inside queries with the query name that we created in the previous step i.e. `restapi1` but if you notice the `data` and `rawData` object is empty i.e. 0 entry. The reason is the data won't show up on the inspector unless query is run.\n    \n\n\n\n\nLet's pin the inspector and then trigger the query from the query manager. You'll see that as soon as the query is triggered the `rawData` and `data` object in the query has 20 entries and the query has more properties like `request`, `response`, and `responseHeaders` data.\n    \n\n\n\n\ncomponents\ncomponents section can be used to inspect the properties and values of the components that are added onto the canvas.\n\n\n\nglobals\nglobals section includes the following sub-sections:\n\ncurrentUser: The currentUser object contains information about the currently logged-in user such as email, firstName, and lastName.\ngroups: The groups array contains the name of the groups the currently logged-in user is added to. Note: The `all_users` is default groups for everyone.\ntheme: The theme object contains the name of the currently active theme.\nurlparam: The urlparams contains the information about the url parameters of the application.\n\n:::info\nAll the global variables can be accessed anywhere inside the ToolJet applications. Here's an example use-case of using these variables.\n:::\n\n\n\nvariables\nvariables section include all the variables set by the user in the application. These variables can be set from the event handlers from the components or from the queries. The variables will be in the key-value pair and can be accessed throughout the application.\n:::info\n\nSetting variables from the event handler\nSetting variables from the Run JavaScript code\n",
    "tag": "tooljet"
  },
  {
    "title": "Run `Actions` from RunJS query",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/how-to/run-action-from-runjs.md",
    "content": "\nid: run-actions-from-runjs\ntitle: Run Actions from RunJS query\n\nRun `Actions` from RunJS query\nNow you can trigger all the `actions` available in ToolJet from within the `RunJS` query. This guide includes the syntax for each action along with the example.\nRun Query\nSyntax:\n`js\nqueries.queryName.run()`\nor\n`js\nawait actions.runQuery('queryName')`\nExample: In the screenshot below, we are triggering the two different queries `customers` and `getData` using the two different syntax available for `Run Query` action.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/runquery.png)\n\n\nSet Variable\nSyntax:\n`javascript\nactions.setVariable(variableName, variableValue)`\nExample: In the screenshot below, we are setting the two variables `test` and `test2`. `test` variable includes a numerical value so we haven't wrapped it inside the quotes but the variable `test2` is a string so we have wrapped it in quotes.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/setvariable.png)\n\n\nUnset Variable\nSyntax:\n`javascript\nactions.unSetVariable(variableName)`\nExample: In the screenshot below, we are unsetting the variable `test2` that we created in the previous step.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/unsetvariable.png)\n\n\nLogout\nSyntax:\n`javascript\nactions.logout()`\nExample: Triggering `actions.logout()` will log out the current logged in user from the ToolJet and will redirect to sign in page.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/logout.png)\n\n\nShow Modal\nSyntax:\n`javascript\nactions.showModal('modalName')`\nExample: In the screenshot below, there is a modal on the canvas (renamed it to `formModal` from `modal1`) and we are using RunJS query to show the modal.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/showmodal.png)\n\n\nClose Modal\nSyntax:\n`javascript\nactions.closeModal('modalName')`\nExample: In the screenshot below, we have used RunJS query to close the modal that we showed up in previous step.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/closemodal.png)\n\n\nSet Local Storage\nSyntax:\n`javascript\nactions.setLocalStorage('key','value')`\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/setlocalstorage.png)\n\n\nCopy to Clipboard\nSyntax:\n`javascript\nactions.copyToClipboard('contentToCopy')`\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/copytoclipboard.png)\n\n\nGenerate File\nSyntax:\n`javascript\nactions.generateFile('fileName', 'fileType', 'data')`\nExample: `fileName` is the name that you want to give the file(string), `fileType` can be `csv` or `text`, and `data` is the data that you want to store in the file.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/generatefile.png)\n\n\nGo to App\nSyntax:\n`javascript\nactions.goToApp('slug',queryparams)`\n\n`slug` can be found in URL of the released app after the `application/`, or in the `Share` modal\n`queryparams` can be provided like this `[{\"key\":\"value\"}, {\"key2\":\"value2\"}]`\n\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/gotoapp1.png)\n\n\nShow Alert\nSyntax:\n`javascript\nactions.showAlert(alert type , message ) // alert types are info, success, warning, and danger`\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/showalert.png)\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Bulk update multiple rows in table",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/how-to/bulk-update-multiple-rows-in-table.md",
    "content": "\nid: bulk-update-multiple-rows\ntitle: Bulk update multiple rows in table\n\nBulk update multiple rows in table\nCurrently, the datasources in ToolJet have operation for bulk update(GUI mode) but that only works for changes made in the single row. We will soon be adding a new operation for bulk updating the multiple rows but for now we can bulk update multiple rows by creating a Custom JS query. \nIn this guide, We have assumed that you have successfully connected the data source. For this guide, we will be using the PostgreSQL data source as an example database, currently, this workaround can be used only for PostgreSQL and MySQL.\n1. Create a query to get the data from the database\nLet's create the query that will be getting the data from the database:\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/postgres1.png)\n\n\n2. Display the data on the table\n\nDrag a Table widget on the canvas and click on its handle to open the properties on the left sidebar\nEdit the Table data field value and enter `{{queries.postgresql1.data}}`\n\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/showData.png)\n\n\n3. Make the columns editable\n\nGo to the Columns, Add or edit columns section and enter the Column Name that you want to display on the table and the Key name. Key is the name of the column in your database.\nEnable the toggle for Make editable for the columns that you want to be editable.\n\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/columns.png)\n\n\n4. Enable bulk update options for table widget\n\nGo to the Options section and enable the Show update buttons. Enabling this will add two buttons - Save Changes and Discard Changes at the bottom of the table, only when any cell in the table is edited.\nYou can also enable highlight selected row.(Optional)\n\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/options.png)\n\n\n5. Create a Custom JS query\nWe will create a new Custom JS query(runjs1) that will generate SQL query for updating multiple rows.\n```js\nconst uniqueIdentifier = \"id\"\nconst cols = Object.values(components.table1.changeSet).map((col, index) => {\n  return {\n    col: Object.keys(col),\n    [uniqueIdentifier]: Object.values(components.table1.dataUpdates)[index][uniqueIdentifier],\n    values: Object.values(col),\n  };\n});\nconst sql = cols.map((column) => {\n  const { col, id, values } = column;\n  const cols = col.map((col, index) => `${col} = '${values[index]}'`);\n  return `UPDATE users SET ${cols.join(\", \")} WHERE id = '${id}';`;\n});\nreturn sql\n```\n:::info\nHere the Unique identifier is id, this is the column name that is used to identify the row in the database.\nUpdate the Unique identifier if you are using a different column name.\n:::\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/runjs1.png)\n\n\n6. Create an Update query\nLet's create a new PostgreSQL query and name it `update`. In SQL mode, enter `{{queries.runjs1.data.join(' ')}}` and Save it.\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/update.png)\n\n\n7. Creating a flow for queries\n\nClick on the handle of the Table widget to open its properties\nGo to the Events, and add a handler\nSelect Bulk Update in Events, Run Query in Actions, and then select the runjs1 query in Query. Now whenever a user will edit the table and hit the Save Changes button runjs1 will run.\n\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/event.png)\n\n\n\nNow, go to the Advanced tab of runjs1 and add a handler to run update query for Query Success Event. Now whenever the runjs1 query will be run - the update operation will be performed on the database.\n\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/success.png)",
    "tag": "tooljet"
  },
  {
    "title": "Making Axios HTTP requests",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/how-to/use-axios.md",
    "content": "\nid: use-axios-in-runjs\ntitle: Use Axios in RunJS\n\nToolJet allows you to utilize the three libraries - Moment.js, Lodash, and Axios. In this guide, we will see a few examples on how to use Axios library using RunJS query.\nAxios is a promise-based HTTP library that lets developers make requests to either their own or a third-party server to fetch data. It offers different ways of making requests such as `GET`, `POST`, `PUT/PATCH`, and `DELETE`.\nMaking Axios HTTP requests\nIn this section, you will make `GET` and `PUT` requests. You will be using a free \u201cfake\u201d API: JSONPlaceholder.\nMaking a GET request\nCreate a RunJS query and copy the code below:\n```javascript\nvar url = \"https://jsonplaceholder.typicode.com/users/1\";\nvar data = (await axios.get(url)).data;\nreturn data\n```\nIn the code snippet, a variable url is declared which is assigned the URL of the  JSON API. Then another variable is decalared which sends a GET request to the JSON API. Save the query and hit Preview to view the data returned by the API.\n\n\n\nMaking a POST request\nA post request is a little different because you will be passing some data in the request to the server. In the request, you will be creating a user and passing in details for that user. The code snippet for the request will look something like this:\n```javascript\nvar url = \"https://jsonplaceholder.typicode.com/users\";\nvar data = axios.post(url,{\n  id: 11,\n  name: \"Shubhendra\",\n  username: \"camelcaseguy\",\n  email: \"shubhendra@tooljet.com\",})\nreturn data\n```\nThe Axios POST request uses an object after the request URL to define the properties you want to create for your user. Once the operation has been completed, there will be a response from the server. In the screenshot below, you can see the that it return Status: 201 which means the request has been fulfilled and resulted in a new resource being created.\n\n\n\n:::tip\nCheck out the tutorial on Build GitHub star history tracker that utlizes the axios library.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "s3-custom-endpoint.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/how-to/s3-custom-endpoint.md",
    "content": "\nid: s3-custom-endpoints\ntitle: Use custom endpoint for s3 hosts\n\nIn this how-to guide, we will see how we can connect to different S3 compatible object storages using the custom endpoint. In this guide, we are using Minio since it is an S3-compatible object storage. \n\nGo to the ToolJet dashboard, and create a new application\nOn the left-sidebar, go to the Sources and add a new AWS S3 datasource\n\nNow the connection modal will pop-up\n    \n\n\n- To get the Credentials which is Access Key and Secret Key, you'll need to go to the Minio console to generate the keys\n- Enable the Custom Endpoint toggle switch, and enter the custom host URL i.e where your Minio server API is exposed \n\n",
    "tag": "tooljet"
  },
  {
    "title": "Contributor Covenant Code of Conduct  ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/contributing-guide/code-of-conduct.md",
    "content": "\nid: code-of-conduct\ntitle: Contributor Code of Conduct\n\nContributor Covenant Code of Conduct\nOur Pledge\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\nOur Standards\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or\n  advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others' private information, such as a physical or electronic\n  address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a\n  professional setting\n\nOur Responsibilities\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\nScope\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\nEnforcement\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at hello@tooljet.com . All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\nAttribution\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\nFor answers to common questions about this code of conduct, see",
    "tag": "tooljet"
  },
  {
    "title": "Setting up",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/contributing-guide/testing.md",
    "content": "\nid: testing\ntitle: Testing\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\nSetting up\n\nNavigate to the `cypress-tests` directory and enter the following command:\n  `bash\n  npm install`\n\nRunning Tests\nHeaded mode\n\nTo run cypress in headed mode, run the following command:\n  `bash\n  npm run cy:open`\nIn headed mode, the user will be able to choose the test specs from the test runner:\n\n\n\n\n\n\nHeadless mode\n\n\nTo run cypress in headless mode, run the following command:\n  `bash\n npm run cy:run`\n\n\nFor running specific spec in headless mode, run for specific spec \n  `bash\n  npm run cy:run --  --spec \"cypress/e2e/dashboard/multi-workspace/manageSSO.cy.js`\n\n\n\n\n\n:::caution\n  If some test specs need the environment variables, the user can pass them similar to the following command:\n  `bash\n  npm run cy:open -- --env='{\"pg_host\":\"localhost\",\"pg_user\":\"postgres\", \"pg_password\":\"postgres\"}'`\n  or the user can add env-vars in the cypress.config.js file\n  :::\n:::info\nCheck all the Cypress commands here",
    "tag": "tooljet"
  },
  {
    "title": "Slack Code of Conduct",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/contributing-guide/slackcoc.md",
    "content": "\nid: slackcoc\ntitle: Slack Code of Conduct\n\nSlack Code of Conduct\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nIntroduction\n\n\nDiversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand.\n\n\nOur goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic.\n\n\nThis code and related procedures apply to unacceptable behavior occurring in all community venues, including behavior outside the scope of community activities \u2014 online and in-person\u2014 as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members.\n\n\nExpected behavior\n\nBe welcoming.\nBe kind.\nLook out for each other.\n\nUnacceptable Behavior\n\nConduct or speech which might be considered sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory or offensive in nature.\nDo not use unwelcome, suggestive, derogatory or inappropriate nicknames or terms.\nDo not show disrespect towards others. (Jokes, innuendo, dismissive attitudes.)\nIntimidation or harassment (online or in-person).\nDisrespect towards differences of opinion.\nInappropriate attention or contact. Be aware of how your actions affect others. If it makes someone uncomfortable, stop.\nNot understanding the differences between constructive criticism and disparagement.\nSustained disruptions.\nViolence, threats of violence or violent language.\n\nWhere does the Code of Conduct apply?\nThis Code of Conduct applies to all spaces managed by ToolJet. This includes:\n\nConferences (including social events and peripheral activities)\nUnconferences and sprints\nMeetups, including their discussion boards\nWorkshops\nPresentation materials used in talks or sessions\nSlack\nGitHub\nTwitter hashtag and mentions\nAny forums created by the ToolJet which the community uses for communication.\n\nThe Code of Conduct does not exclusively apply to slack or events on an official agenda. For example, if after a scheduled social event you go to a bar with a group of fellow participants, and someone harasses you there, we would still treat that as a CoC violation. Similarly, harassment in Twitter direct messages related to ToolJet can still be covered under this Code of Conduct.\nIn addition, violations of this code outside our spaces may affect a person\u2019s ability to participate in them.\nEnforcement\n\nUnderstand that speech and actions have consequences, and unacceptable behavior will not be tolerated.\nIf you are the subject of, or witness to any violations of this Code of Conduct, please contact us via email at hello@tooljet.com or dm @navaneeth on slack.\nIf violations occur, organizers will take any action they deem appropriate for the infraction, up to and including expulsion.\n\n:::info\nPortions derived from the Django Code of Conduct, The Rust Code of Conduct and The Ada Initiative under a Creative Commons Attribution-ShareAlike license.\n:::\n\nEtiquettes to follow\n1. Be nice to everyone\n2. Check off your resolved questions\nIf you have received a useful reply to your question, please drop a \u2705 reaction or a reply for affirmation.\n3. Try not to repost question\nIf you have asked a question and have not got a response in 24hrs, please review your question for clarity and revise it. If you still feel you haven't received adequate response, feel free to ping @navaneeth.\n4. Post in public\nPlease don't direct message any individual member of ToolJet community without their explicit permission, independent of reason. Your question might be helpful for other community members.\n5. Don't spam tags\nToolJet's community of volunteer is very active and helpful, generally avoid tagging members unless it is urgent.\n6. Use threads for discussion",
    "tag": "tooljet"
  },
  {
    "title": "Adding Translations",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/contributing-guide/l10n.md",
    "content": "\nid: l10n\ntitle: Localization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and  general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\nAdding Translations\n\n\nFor adding the translations of your language in ToolJet, you'll need to create a new languagecode.json file which will include all the translations for the keywords in your language, and then list the language in the languages.json file for the language to be listed in the dashboard of the ToolJet.\n\n\nGo to the frontend directory which is at the root of ToolJet, then go to the assets and inside assets, you'll find the translations directory. You have created a new json file with the language code as the file name. The language code should follow ISO 639-1 Code.\n`\\frontend\n|--\\assets\n|--\\--\\translations\n|--\\--\\--\\languages.json\n|--\\--\\--\\en.json`\n\n\n\n\n\nLet's localize ToolJet in the French language. Create a new json file inside the translations directory and name it fr.json. `fr` is the language code for French.\n\n\nAfter creating the new file, open the en.json file and copy all the contents of the file to the newly created fr.json.\n\n\n\n\n\nOnce copied, you can now start adding the translations for the keywords in the french language.\n\n\nAfter completing the translation, all you need to do is list the language in languages.json file. You'll need to add an object with three key-value pairs. lang - the name of the language that you added, code - the language code, and the nativeLang - name of language in the native.\n`js\n{\n    \"languageList\":\n    [\n        { \"lang\": \"English\", \"code\": \"en\", \"nativeLang\": \"English\" },\n        { \"lang\": \"French\", \"code\": \"fr\", \"nativeLang\": \"Fran\u00e7ais\" }\n    ]\n}`\n\n\n\n:::note\nFeel free to reach us on Slack for any help related to Localization.",
    "tag": "tooljet"
  },
  {
    "title": "Introduction",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/contributing-guide/setup/architecture.md",
    "content": "\nid: architecture\ntitle: Architecture\n\nIntroduction\nToolJet has two main components: ToolJet Server and ToolJet Client.\n1. ToolJet Server\nToolJet server is a Node.js API application. Server is responsible for authentication, authorization, persisting application definitions, running queries, storing data source credentials securely and more. \nDependencies:\n- PostgreSQL - ToolJet server persists data to a postgres database. \n- Email service (SMTP/Sendgrid/Mailgun/etc) - Required to send user invitations and password reset emails. \n- PostgREST (Optional) - Standalone web server that converts PostgreSQL database into queryable RESTful APIs for Tooljet Database.\n2. ToolJet Client\nToolJet client is a ReactJS application. Client is responsible for visually editing the applications, building & editing queries, rendering applications, executing events and their trigger, etc.\nRequirements",
    "tag": "tooljet"
  },
  {
    "title": "Ubuntu",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/contributing-guide/setup/ubuntu.md",
    "content": "\nid: ubuntu\ntitle: Ubuntu\n\nUbuntu\nFollow these steps to setup and run ToolJet on Ubuntu. Open terminal and run the commands below.\nSetting up\n\n\nSet up the environment\n1.1 Install Node.js\n```bash\ncurl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\nRequired for compilation of Plugins (https://stackoverflow.com/a/44182915/19432410)\napt-get -y install build-essential gcc g++ make python3-dev\nEnsure you have the correct version of npm, or it will cause an error about fsevents.\nnpm i -g npm@8.11.0\n```\n1.2 Install Postgres\n`bash\nsudo apt install postgresql postgresql-contrib\nsudo apt-get install libpq-dev`\n1.3 Install PostgREST (optional)\n:::info \nRequired only if Tooljet Database is being used. \nPlease use PostgREST version 10.1.1.x\n:::\nPlease follow the installation PostgREST guide\n\n\nSet up environment variables\nCreate a `.env` file by copying `.env.example`. More information on the variables that can be set is given in the environment variables reference\n`bash\ncp .env.example .env`\n\n\nPopulate the keys in the env file\n   :::info\n   `SECRET_KEY_BASE` requires a 64 byte key. (If you have `openssl` installed, run `openssl rand -hex 64` to create a 64 byte secure   random key)\n\n\n`LOCKBOX_MASTER_KEY` requires a 32 byte key. (Run `openssl rand -hex 32` to create a 32 byte secure random key)\n   :::\nExample:\n   `bash\n   cat .env\n   TOOLJET_HOST=http://localhost:8082\n   LOCKBOX_MASTER_KEY=1d291a926ddfd221205a23adb4cc1db66cb9fcaf28d97c8c1950e3538e3b9281\n   SECRET_KEY_BASE=4229d5774cfe7f60e75d6b3bf3a1dbb054a696b6d21b6d5de7b73291899797a222265e12c0a8e8d844f83ebacdf9a67ec42584edf1c2b23e1e7813f8a3339041`\n\n\nInstall and build dependencies\n    `bash\n    npm install\n    npm install --prefix server\n    npm install --prefix frontend\n    npm run build:plugins`\n\n\nSet up database\n    `bash\n    npm run --prefix server db:reset`\n\n\nRun plugins compilation in watch mode\n    `bash\n    cd ./plugins && npm start`\n\n\nRun the server\n    `bash\n    cd ./server && npm run start:dev`\n\n\nRun the client\n    `bash\n    cd ./frontend && npm start`\nThe client will start running on the port 8082, you can access the client by visiting:  https://localhost:8082\n\n\nCreate login credentials\nVisiting https://localhost:8082 should redirect you to the login page, click on the signup link and enter your email. The emails sent by the server in development environment are captured and are opened in your default browser. Click the invitation link in the email preview to setup the account.\n\n\nRunning tests\nTest config requires the presence of `.env.test` file at the root of the project.\nTo run the unit tests\n`bash\nnpm run --prefix server test`\nTo run e2e tests\n`bash\nnpm run --prefix server test:e2e`\nTo run a specific unit test\n```bash\nnpm run --prefix server test ",
    "tag": "tooljet"
  },
  {
    "title": "Mac OS",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/contributing-guide/setup/macos.md",
    "content": "\nid: macos \ntitle: Mac OS\n\nMac OS\nFollow these steps to setup and run ToolJet on macOS for development purposes. Open terminal and run the commands below. We recommend reading our guide on architecture of ToolJet before proceeding.\nSetting up\n\n\nSet up the environment\n1.1 Install Homebrew\n`bash\n/bin/bash -c \"(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"`\n1.2 Install Node.js ( version: v14.17.3 ) and npm (version: v7.20.0)\n`bash\nbrew install nvm\nexport NVM_DIR=~/.nvm\nsource $(brew --prefix nvm)/nvm.sh\nnvm install 14.17.3\nnvm use 14.17.3\nnpm install -g npm@7.20.0`\n1.3 Install Postgres\n:::tip\nToolJet uses a postgres database as the persistent storage for storing data related to users and apps. We do not plan to support other databases such as MySQL.\n:::\n`bash\nbrew install postgresql`\n1.4 Install PostgREST(optional)\n:::info \nRequired only if Tooljet Database is being used. \nPlease use PostgREST version 10.1.1.x\n:::       \n`bash\nbrew install postgrest --version 10.1.1.20221215`\n1.5 Clone the repository\n`bash\ngit clone https://github.com/tooljet/tooljet.git`\n\n\nSet up environment variables\nCreate a `.env` file by copying `.env.example`. More information on the variables that can be set is given in the environment variables reference\n`bash\ncp .env.example .env`\n\n\nPopulate the keys in the env file\n   :::info\n   `SECRET_KEY_BASE` requires a 64 byte key. (If you have `openssl` installed, run `openssl rand -hex 64` to create a 64 byte secure   random key)\n\n\n`LOCKBOX_MASTER_KEY` requires a 32 byte key. (Run `openssl rand -hex 32` to create a 32 byte secure random key)\n   :::\nExample:\n   `bash\n   cat .env\n   TOOLJET_HOST=http://localhost:8082\n   LOCKBOX_MASTER_KEY=1d291a926ddfd221205a23adb4cc1db66cb9fcaf28d97c8c1950e3538e3b9281\n   SECRET_KEY_BASE=4229d5774cfe7f60e75d6b3bf3a1dbb054a696b6d21b6d5de7b73291899797a222265e12c0a8e8d844f83ebacdf9a67ec42584edf1c2b23e1e7813f8a3339041\n   NODE_ENV=development\n   # DATABASE CONFIG\n   PG_HOST=postgres\n   PG_PORT=5432\n   PG_USER=postgres\n   PG_PASS=postgres\n   PG_DB=tooljet_development\n   ORM_LOGGING=all`\n\n\nInstall and build dependencies\n    `bash\n    npm install\n    npm install --prefix server\n    npm install --prefix frontend\n    npm run build:plugins`\n\n\nSet up database\n    `bash\n    npm run --prefix server db:reset`\n\n\nRun plugins compilation in watch mode\n    `bash\n    cd ./plugins && npm start`\n\n\nRun the server\n    `bash\n    cd ./server && npm run start:dev`\n\n\nRun the client\n    `bash\n    cd ./frontend && npm start`\nThe client will start on the port 8082, you can access the client by visiting:  https://localhost:8082\n\n\nCreate login credentials\nVisiting https://localhost:8082 should redirect you to the login page, click on the signup link and enter your email. The emails sent by the server in development environment are captured and are opened in your default browser. Click the invitation link in the email preview to setup the account.\n\n\nRunning tests\nTest config requires the presence of `.env.test` file at the root of the project.\nTo run the unit tests\n`bash\nnpm run --prefix server test`\nTo run e2e tests\n`bash\nnpm run --prefix server test:e2e`\nTo run a specific unit test\n```bash\nnpm run --prefix server test ",
    "tag": "tooljet"
  },
  {
    "title": "Docker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/contributing-guide/setup/docker.md",
    "content": "\nid: docker\ntitle: Docker\n\nDocker\nDocker compose is the easiest way to setup ToolJet server and client locally.\n:::info\nIf you rather want to try out ToolJet locally with docker, you can follow the steps here.\n:::\nPrerequisites\nMake sure you have the latest version of `docker` and `docker-compose` installed.\nOfficial docker installation guide\nOfficial docker-compose installation guide\nWe recommend:\n```bash\ndocker --version\nDocker version 19.03.12, build 48a66213fe\ndocker-compose --version\ndocker-compose version 1.26.2, build eefe0d31\n```\nSetting up\n:::tip\nIf you are setting up on a Windows machine, we advise you to setup Docker desktop with WSL2.\nPlease find more information here.\n:::\n\n\nClone the repository\n   `bash\n   git clone https://github.com/tooljet/tooljet.git`\n\n\nCreate a `.env` file by copying `.env.example`. More information on the variables that can be set is given in the environment variables reference\n`bash\n   cp .env.example .env\n   cp .env.example .env.test`\n\n\nPopulate the keys in the `.env` and `.env.test` file\n   :::info\n   `SECRET_KEY_BASE` requires a 64 byte key. (If you have `openssl` installed, run `openssl rand -hex 64` to create a 64 byte secure random key)\n\n\n`LOCKBOX_MASTER_KEY` requires a 32 byte key. (Run `openssl rand -hex 32` to create a 32 byte secure random key)\n   :::\n   :::tip \n   If you are setting up on a Windows machine. Please make sure that .env file line endings to be LF as it will be CRLF by default unless configured for Windows machine.\n   :::\nExample:\n`bash\n    cat .env\n    TOOLJET_HOST=http://localhost:8082\n    LOCKBOX_MASTER_KEY=13c9b8364ae71f714774c82498ba328813069e48d80029bb29f49d0ada5a8e40\n    SECRET_KEY_BASE=ea85064ed42ad02cfc022e66d8bccf452e3fa1142421cbd7a13592d91a2cbb866d6001060b73a98a65be57e65524357d445efae00a218461088a706decd62dcb\n    NODE_ENV=development\n    # DATABASE CONFIG\n    PG_HOST=postgres\n    PG_PORT=5432\n    PG_USER=postgres\n    PG_PASS=postgres\n    PG_DB=tooljet_development\n    ORM_LOGGING=all`\n`bash\n    cat .env.test\n    TOOLJET_HOST=http://localhost:8082\n    LOCKBOX_MASTER_KEY=13c9b8364ae71f714774c82498ba328813069e48d80029bb29f49d0ada5a8e40\n    SECRET_KEY_BASE=ea85064ed42ad02cfc022e66d8bccf452e3fa1142421cbd7a13592d91a2cbb866d6001060b73a98a65be57e65524357d445efae00a218461088a706decd62dcb\n    NODE_ENV=test\n    # DATABASE CONFIG\n    PG_HOST=postgres\n    PG_PORT=5432\n    PG_USER=postgres\n    PG_PASS=postgres\n    PG_DB=tooljet_test\n    ORM_LOGGING=error`\n\nBuild docker images\n\n`bash\n   docker-compose build\n   docker-compose run --rm  plugins npm run build:plugins`\n\nRun ToolJet\n\n`bash\n   docker-compose up`\n   ToolJet should now be served locally at `http://localhost:8082`.\n\nTo shut down the containers,\n   `bash\n   docker-compose stop`\n\nMaking changes to the codebase\nIf you make any changes to the codebase/pull the latest changes from upstream, the tooljet server container would hot reload the application without you doing anything.\nCaveat:\n\n\nIf the changes include database migrations or new npm package additions in the package.json, you would need to restart the ToolJet server container by running `docker-compose restart server`.\n\n\nIf you need to add a new binary or system library to the container itself, you would need to add those dependencies in `docker/server.Dockerfile.dev` and then rebuild the ToolJet server image. You can do that by running `docker-compose build server`. Once that completes you can start everything normally with `docker-compose up`.\n\n\nExample:\nLet's say you need to install the `imagemagick` binary in your ToolJet server's container. You'd then need to make sure that `apt` installs `imagemagick` while building the image. The Dockerfile at `docker/server.Dockerfile.dev` for the server would then look something like this:\n```\nFROM node:14.17.0-buster\nRUN apt update && apt install -y \\\n  build-essential  \\\n  postgresql \\\n  freetds-dev \\\n  imagemagick\nRUN mkdir -p /app\nWORKDIR /app\nCOPY ./server/package.json ./server/package-lock.json ./\nRUN npm install\nENV NODE_ENV=development\nCOPY ./server/ ./\nCOPY ./docker/ ./docker/\nCOPY ./.env ../.env\nRUN [\"chmod\", \"755\", \"entrypoint.sh\"]\n```\nOnce you've updated the Dockerfile, rebuild the image by running `docker-compose build server`. After building the new image, start the services by running `docker-compose up`.\nRunning tests\nTest config picks up config from `.env.test` file at the root of the project.\nRun the following command to create and migrate data for test db\n`bash\ndocker-compose run --rm -e NODE_ENV=test server npm run db:create\ndocker-compose run --rm -e NODE_ENV=test server npm run db:migrate`\nTo run the unit tests\n`bash\ndocker-compose run --rm server npm run --prefix server test`\nTo run e2e tests\n`bash\ndocker-compose run --rm server npm run --prefix server test:e2e`\nTo run a specific unit test\n`bash\ndocker-compose run --rm server npm --prefix server run test <path-to-file>`\nTroubleshooting",
    "tag": "tooljet"
  },
  {
    "title": "ESLint ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/contributing-guide/troubleshooting/eslint.md",
    "content": "\nid: eslint\ntitle: EsLint\n\nESLint\nESLint as a code quality tool is a tool that checks your code for errors and helps you to fix them and enforces a coding style. \nSetup\n\nInstall the ESLint extension for your code editor.\nSet your editor's default formatter to `ESLint`.\n\n:::tip\nFor VSCode users, you can set the formatter to `ESLint` in the settings.json.\n:::\n\nInstall the dependencies.\n    `bash\n    npm install\n    npm install --prefix server\n    npm install --prefix frontend`\nRun the linter.\n    `bash\n    npm run --prefix server lint\n    npm run --prefix frontend lint`\nFix the ESlint errors and warnings.\n    `bash\n    npm run --prefix server format\n    npm run --prefix frontend format`\n\nRequirements\n\nNode version 14.17.3\nnpm version 7.20.0\n",
    "tag": "tooljet"
  },
  {
    "title": "Creating Widgets",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/contributing-guide/tutorials/create-widget.md",
    "content": "\nid: creating-widget\ntitle: Creating Widgets\n\nCreating Widgets\nThese are some of the most useful properties and functions passed to the widget\nproperties\nThe `properties` object will contain the configurable properties of a widget, initially obtained from its definition on `widgetConfig.js`.\nThe values inside `properties` change whenever the developer makes changes to the inspector panel of ToolJet editor.\nexposedVariables\nThe `exposedVariables` object will contain the values of all exposed variables as configured in `widgetConfig.js`.\nsetExposedVariable('exposedVariableName', newValue)\nThis function allows you to update the value of an exposed variable to `newValue`.\nvalidate(value)\nThis function validates the `value` passed based on the validation settings configured on the inspector panel for the widget.\nIt returns an array `[isValid, validationError]`, which represents respectively, whether the `value` passed is valid,",
    "tag": "tooljet"
  },
  {
    "title": "Creating plugins for ToolJet ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/contributing-guide/tutorials/creating-a-plugin.md",
    "content": "\nid: creating-a-plugin\ntitle: Creating Plugins\n\nCreating plugins for ToolJet\nWhat are plugins\nToolJet is built with extensibility in mind. Plugins allows developers to extend the functionalities of ToolJet using JavaScript. Plugins can only be connectors at this moment. For example, the data source connectors such as PostgreSQL, MySQL, Twilio, Stripe, etc are built as plugins. \nIn this guide, we will walk you through building plugins for ToolJet with the help of `tooljet` cli.\n`tooljet` cli is a commandline tool built for building plugins easily. We will build a simple plugin for BigQuery in this guide. \nWhat does a plugin look like?\nAll the plugins live under the `/plugins` directory. The structure of a plugin looks like this:\n`my-awesome-plugin/\n    package.json\n    lib/\n      icon.svg\n      index.ts\n      operations.json\n      manifest.json`\n\nmanifest.json should include information such as the name of plugin, description, etc. \noperations.json should include the metadata of all the operations supported by the plugin.\nindex.ts is the main file. It defines a `QueryService` for the plugin. The `QueryService` handles running of queries, testing connections, caching connections, etc.\nicon.svg is the icon for the plugin.\npackage.json is auto generated by the cli. \n\nGetting Started\n\n\nInstall tooljet-cli:\n  `bash\n  $ npm i -g @tooljet/cli`\n\n\nBootstrap a new plugin using cli\n  `bash\n  $ tooljet plugin create bigquery`\n\n\n`bash\n  creating plugin... done\n  Plugin: bigquery created successfully\n  \u2514\u2500 plugins\n    \u2514\u2500 packages\n        \u2514\u2500 bigquery`\n\n\nAdd the npm package of BigQuery to the plugin dependencies\n  `bash\n  $ tooljet plugin install @google-cloud/bigquery --plugin bigquery`\n\n\nNow the directory for our new plugin should looks something like below: \n\n\n`bash\n  plugins/\n    package.json\n    packages/\n      bigquery/\n        __tests__\n          bigquery.test.js\n        package.json\n        lib/\n          icon.svg\n          index.ts\n          operations.json\n          manifest.json`\n\nAdd data source config paramets to manifest.json\n\nOur BigQuery plugin needs private key of a GCP service account to connect to BigQuery. Let's add `private_key` as a property for the data source. \n```json\n  {\n    \"$schema\": \"https://json-schema.org/\",\n    \"$id\": \"https://tooljet.io/BigQuery.schema.json\",\n    \"title\": \"BigQuery datasource\",\n    \"description\": \"A schema defining BigQuery datasource\",\n    \"type\": \"api\",\n    \"source\": {\n      \"name\": \"BigQuery\",\n      \"kind\": \"bigquery\",\n      \"exposedVariables\": {\n        \"isLoading\": false,\n        \"data\": {},\n        \"rawData\": {}\n      },\n      \"options\": {\n        \"private_key\": { \"encrypted\": true }\n      }\n    },\n    \"defaults\": {\n      \"private_key\": { \"value\": \"\" }\n    },\n    \"properties\": {\n      \"private_key\": {\n        \"label\": \"Private key\",\n        \"key\": \"private_key\",\n        \"type\": \"textarea\",\n        \"description\": \"Enter JSON private key for service account\"\n      }\n    },\n    \"required\": [\"private_key\"]\n  }\n```\n\n\nImport npm package BigQuery to index.ts\n  `javascript\n  const { BigQuery } = require('@google-cloud/bigquery');`\n\n\nEdit index.ts to include the logic for creating a connection.  \n  ```javascript\n  async getConnection(sourceOptions: any, _options?: object): Promise {\n    const privateKey = JSON.parse(sourceOptions['private_key']);\n    const client = new BigQuery({\n      projectId: privateKey['project_id'],\n      credentials: {\n        client_email: privateKey['client_email'],\n        private_key: privateKey['private_key'],\n      },\n    });\nreturn client;\n  }\n  ```\n\n\nEdit index.ts to include the logic for testing connection.  \n  When a new data source is being added to a ToolJet application, the connection can be tested. \n\n\n:::info\n  NOTE: Every data source might not have a way to test connection. If not applicable for your data source, you can disable the test connection feature by adding `\"customTesting\": true,` to the `manifest.json` of your plugin.\n  :::\n\n\nAdd manifest entry for operations   \nIn this example, let's add two operations for our BigQuery plugin. \n- List databases - Lists all the databases.\n- Query database   - Query a specific database.\nWe need to make the entries to `operations.json`. The `operations.json` should look like this now:\n```json\n{\n  \"$schema\": \"https://json-schema.org/\",\n  \"$id\": \"https://tooljet.io/dataqueries/Bigquery.schema.json\",\n  \"title\": \"Dynamodb datasource\",\n  \"description\": \"Operations for BigQuery plugin\",\n  \"type\": \"object\",\n  \"defaults\": {},\n  \"properties\": {\n      \"operation\": {\n          \"label\": \"Operation\",\n          \"key\": \"operation\",\n          \"type\": \"dropdown-component-flip\",\n          \"description\": \"Single select dropdown for operation\",\n          \"list\": [\n              {\n                  \"value\": \"list_datasets\",\n                  \"name\": \"List Datasets\"\n              },\n              {\n                  \"value\": \"query\",\n                  \"name\": \"Query\"\n              }\n          ]\n      },\n      \"query\": {\n          \"query\": {\n              \"label\": \"Query\",\n              \"key\": \"query\",\n              \"type\": \"codehinter\",\n              \"description\": \"\",\n              \"height\": \"150px\"\n          }\n      }\n  }\n}\n```\n\n\nHandle the logic for running queries in `index.ts` \n\n\n`QueryService` receives the metadata of the data source including the credentials and configs for connecting and parameters for the query that was run. In our example, `sourceOptions` will have the `private_key` of BigQuery datasource associated with the query. `queryOptions` will have the configs and parameters for the specific query. For example, `queryOption.operation` will give the id of current operation. \n```javascript\n    export default class BigQueryQueryService implements QueryService {\n      async run(sourceOptions: any, queryOptions: any, _dataSourceId: string): Promise {\n        const operation = queryOptions.operation;\n        const client = await this.getConnection(sourceOptions);\n        let result = {};\n\n\n```    try {\n      switch (operation) {\n        case 'list_datasets':\n            result = await client.getDatasets();\n            break;\n      }\n    } catch (error) {\n      throw new QueryError('Query could not be completed', error.message, {});\n    }\n\n    return {\n      status: 'ok',\n      data: result,\n    };\n  }\n}\n```\n\n\n```\n\n\nSince it is a smiliar step for adding the logic for handling `query` operation, skipping it. \n\n\nTest files are generated by the cli when a plugin is created. You can use `jest` for writing the tests.\n\n\nTests for a specific plugin can be run using the command `tooljet plugin test --bigquery`",
    "tag": "tooljet"
  },
  {
    "title": "Generate file",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/actions/generate-file.md",
    "content": "\nid: generate-file\ntitle: Generate file\n\nGenerate file\nThis action allows you to construct files on the fly and let users download it.\nPresently, the only file type supported is `CSV`.\nOptions\n| Option | Description |\n|--------|-------------|\n| Type   | Type of file to be generated |\n| File name | Name of the file to be generated |\n| Data | Data that will be used to construct the file. Its format will depend on the file type, as specified in the following section |\nData format for CSV\nFor `CSV` file type, the data field should be supplied with an array objects. ToolJet assumes that the keys of each of\nthese objects are the same and that they represent the column headers of the csv file.\nExample:\n`javascript\n{{\n  [\n    { name: 'John', email: 'john@tooljet.com' },\n    { name: 'Sarah', email: 'sarah@tooljet.com' },\n  ]\n}}`\nSupplying the above snippet will generate a csv file which looks like this:\n```csv\nname,email\nJohn,john@tooljet.com\nSarah,sarah@tooljet.com",
    "tag": "tooljet"
  },
  {
    "title": "Available Component Specific Actions",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/actions/control-component.md",
    "content": "\nid: control-component\ntitle: Control component\n\nControl component action invokes the component specific actions. Component specific actions are the actions that are exclusive actions for a particular widget. Component specific actions can be triggered either through the event handlers or from the Run JavaScript code query.\n:::info\nCheck out the live demo of Component specific actions demonstrated in one of our community call.\n:::\nAvailable Component Specific Actions\n| Widget | Component Specific Actions |\n|--------|---------------------------|\n| Button | Click, Set label, Disable, Visibility, Loading |\n| Text   | Set text, Set Visibility |\n| Text Input | Set text, Clear, Set Focus, Set Blur, Disable, Visibility |\n| Text Area | Set text, Clear |\n| Modal     | Show, Close |\n| Table   | Set page      |\n| Dropdown   | Select option |\n| Multiselect   | Select option, Deselect option, Clear selection |\n| Map   | Set location |\n| Checkbox   | Set checked |\n| Radio button | Select option |\n| Tabs   | Set tab |\n| Color picker   | Set color |\n| File picker    | Clear files |\n:::info\nCurrently, Component specific actions are supported only by the above listed widgets. We are working on bringing component specific actions for the remaining widgets.\n:::\nUsing Component Specific Actions\nSet a value for text input widget using button's event handler\n\n\nDrag a Text Input and a Button widget onto the canvas.\n\n\nGo to the Inspector on the left sidebar to check the exposed variables available for the `textinput1` widget under the `components`. You'll see that the variable `value` is an empty string because the field value of the text input widget is empty right now.\n\n\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/inspector.png)\n\n\n\nNow enter some value in the text input widget and you'll see that the `value` in inspector has been updated.\n\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/updated.png)\n\n\n\nNow, click on the button's widget handler to open up its properties in the right sidebar and then add a event handler for On Click event to trigger Control Component action. Select `textinput1` in component dropdown, `Set text` as Action, and in `Text` field enter the text that you want to update in the field value.\n\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/button.png)\n\n\n\nNow when you'll click on the button you'll see that the field value of the text input widget has been updated with value that you set.\n\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/set.png)\n\n\nClear value of text input widget using JavaScript query\n\nLet's clear the value that we set in the previous section, using Run JavaScript code. Create a new Run JavaScript Code query and call the component and the CSA that component provides.\n\nSyntax:\n`js\nawait components.textinput1.clear()`\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/jsoption.png)\n\n\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/clear.png)\n\n\n\nFinally, hit the save and run query button to fire up the query, and you'll see that the field value of the text input widget has been cleared.\n",
    "tag": "tooljet"
  },
  {
    "title": "Set localStorage",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/actions/set-localstorage.md",
    "content": "\nid: set-localstorage\ntitle: Set localStorage\n\nSet localStorage\nThis action allows you to specify a `key` and its corresponding `value` to be stored in localStorage.\nExample: App that stores a name in localStorage and displays it on reload\n\nAdd an input field, button and a text as shown\n\n\n\n![ToolJet - Action reference -Set local storage sample app](/img/actions/localstorage/1.png)\n\n\n\nSelect the button and add a `Set localStorage` action with `key` set to `name` and value pointing at the value of the text field\n\n\n\n![ToolJet - Action reference -Set local storage sample app](/img/actions/localstorage/2.png)\n\n\n\nSelect the text label we've added and set its value to the name item from localStorage\n\n\n\n![ToolJet - Action reference -Set local storage sample app](/img/actions/localstorage/3.png)\n\n\n\n\nNow save the application, this is important as we're about to reload the page.\n\n\nType in anything you wish on the input box and click on the button\n\n\n\n\n![ToolJet - Action reference -Set local storage sample app](/img/actions/localstorage/5.png)\n\n\n\nReload the page, you'll see that the value stored in local storage is persisted and it is displayed on screen!\n\n\n\n![ToolJet - Action reference -Set local storage sample app](/img/actions/localstorage/6.png)\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Snowflake",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/snowflake.md",
    "content": "\nid: snowflake\ntitle: Snowflake\n\nSnowflake\nToolJet can connect to Snowflake databases to read and write data.\n\nConnection\nGetting Started\n\nConnection\nPlease make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP. You can find snowflake docs on network policies here.\nTo add a new Snowflake database, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select Snowflake from the modal that pops up.\nToolJet requires the following to connect to your Snowflake database.\n\nAccount\nUsername\nPassword\n\n:::info\nYou can also configure for additional optional parameters.\n:::\n\n\n![ToolJet - Snowflake connection](/img/datasource-reference/snowflake/snowflake-connect.png)\n\n\nQuerying Snowflake\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the datasource. Query manager then can be used to write raw SQL queries.\n\n\n![ToolJet - Snowflake query](/img/datasource-reference/snowflake/snowflake-query.png)\n\n\nClick on the `run` button to run the query. \nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "REST API ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/restapi.md",
    "content": "\nid: restapi\ntitle: REST API \n\nREST API\nToolJet can connect to any REST endpoint available. \nConnection\nTo add a new REST API datasource, click the Datasources manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select REST API from the modal that pops up.\nClick on the 'Save' button to save the data source.\n\nToolJet requires the following to connect to a REST API  datasource.\n\nURL of the REST endpoint\n\nThe following optional parameters are also supported:\n| Type         | Description |\n   | -----------  | ----------- |\n   | URL params   | Additional query string parameters|\n   | headers      | Any headers the REST API source requires|\n   | body         | Any values or fields the REST API source requires|\n:::info\nREST HTTP methods that are supported are GET, POST, PUT, PATCH & DELETE.\n:::\n\nQuerying REST API\nClick on `+` button of the query manager at the bottom panel of the editor and select the REST API endpoint added in the previous step as the data source.\nClick on the 'run' button to run the query. \n:::note\nNOTE: Query should be saved before running.\n:::\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "SMTP",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/smtp.md",
    "content": "\nid: smtp\ntitle: SMTP\n\nSMTP\nSMTP plugin can connect ToolJet applications to SMTP servers for sending emails.\nConnection\nA SMTP server can be connected with the following credentails:\n- Host\n- Port\n- User\n- Password\n:::info\nYou can also test your connection before saving the configuration by clicking on `Test Connection` button.\n:::\n\n\n\nQuerying SMTP\nGo to the query manager at the bottom panel of the editor and click on the `+` button on the left to create a new query. Select `SMTP` from the datasource dropdown.\nTo create a query for sending email, you will need to provide the following properties:\n  - From `required` : Email address of the sender\n  - From Name : Name of the sender\n  - To `required` : Recipient's email address\n  - Subject : Subject of the email\n\n\nBody : You can enter the body text either in the form of `raw text` or `html` in their respective fields.\nAttachments : Attachments can be added to a SMTP query by referencing the file from the `File Picker` component in the attachments field. \n\nFor example, you can set the `Attachments` field value to `{{ components.filepicker1.file }}` or you can pass an array of `{{ name: 'filename.jpg', dataURL: '......' }}` object to accomplish this.",
    "tag": "tooljet"
  },
  {
    "title": "SendGrid",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/sendgrid.md",
    "content": "\nid: sendgrid\ntitle: SendGrid\n\nSendGrid\nToolJet can connect to your SendGrid account to send emails.\n\n:::info\nThe SendGrid API Datasource supports for interaction with the mail endpoint of the SendGrid v3 API.\n:::\nConnection\nTo add a new SendGrid API datasource, click the Datasource manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select SendGrid API from the modal that pops up.\nEnter your SendGrid API key in the \"API key\" field.\n:::tip\nSendGrid API key is required to create an SendGrid datasource on ToolJet. You can generate API key by visiting SendGrid account page. \n:::\nClick on the 'Save' button to save the data source.\nSupported operations\n\nEmail service\n\nEmail service\nRequired parameters: \n- Send email to\n- Send email from \n- Subject\n- Body as text\nOptional parameters:\n- Body as HTML\n\n:::info\nSend mail to - accepts an array/list of emails separated by comma.\nFor example:\n`{{[\"dev@tooljet.io\", \"admin@tooljet.io\"]}}`.\nSend mail from - accepts a string.\nFor example: `admin@tooljet.io`\n:::\n:::tip\nSend a single email to multiple recipients - The `Send mail to` field can contain an array of recipients, which will send a single email with all of the recipients in the field. \nSend multiple individual emails to multiple recipients - set Multiple recipients field to `{{true}}` and the `Send mail to` field will be split into multiple emails and send to each recipient.\n:::\n:::note\nNOTE: Query should be saved before running.",
    "tag": "tooljet"
  },
  {
    "title": "Mailgun",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/mailgun.md",
    "content": "\nid: mailgun\ntitle: Mailgun\n\nMailgun\nToolJet can connect to your Mailgun account to send emails.\n\n:::info\nThe Mailgun API Datasource supports for interaction with the mail endpoint of the Mailgun API.\n:::\nConnection\nTo add a new Mailgun API datasource, click the Datasource manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select Mailgun API from the modal that pops up.\nEnter your Mailgun API key in the \"API key\" field.\n:::tip\nMailgun API key is required to create an Mailgun datasource on ToolJet. You can generate API key by visiting Mailgun account page.\n:::\nClick on the 'Save' button to save the data source.\nSupported operations\n\nEmail service\n\nEmail service\nRequired parameters:\n\nSend email to\nSend email from\nSubject\nBody as text\n\nOptional parameters:\n\nBody as HTML\n\n\n:::info\nSend mail to - accepts a single email id. \nFor example:\n`{{\"dev@tooljet.io\"}}`.\nSend mail from - accepts a string.\nFor example: `admin@tooljet.io`\n:::\n:::tip\nSend a single email to multiple recipients - The `Send mail to` field can contain an array of recipients, which will send a single email with all of the recipients in the field.\nSend multiple individual emails to multiple recipients - set Multiple recipients field to `{{true}}` and the `Send mail to` field will be split into multiple emails and send to each recipient.\n:::\n:::note\nNOTE: Query should be saved before running.",
    "tag": "tooljet"
  },
  {
    "title": "Datasources : Overview",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/overview.md",
    "content": "\nid: overview\ntitle: Overview\n\nDatasources : Overview\nDatasources pull in and push data to any source including databases, external APIs, or services.\n\n\n\nConnecting datasources\n\n\nAfter logging in to ToolJet, create a new app from the dashboard\n\n\nThere are two ways for connecting a datasource. You can connect from:\n\n\nLeft-sidebar: On the left sidebar, click on the `datasource` icon and then click on the `+ add datasource` button\n\n\n\n\n\nQuery Panel: Go to the query panel at the bottom, click on the `+Add` button and then click `Add datasource` button\n\n\n\n\n\n\n\nFollow the steps in the Datasource Library specific to the desired datasource\n\n\n:::info\nToolJet allows you to transform the data returned by datasources using Transformations\n:::",
    "tag": "tooljet"
  },
  {
    "title": "MariaDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/mariadb.md",
    "content": "\nid: mariadb\ntitle: MariaDB\n\nMariaDB\nToolJet can connect to MariaDB to read and write data.\nConnection\nTo add a new MariaDB data source, click on the `+` button on datasources panel at the left sidebar of the app builder. Select MariaDB from the modal that pops up.\nToolJet requires the following to connect to your DynamoDB.\n\nHost\nUsername\nPassword\nConnection Limit\nPort\nDatabase\nSSL\nSSL Certificate\n\n\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying MariaDB\nClick on `+` button of the query manager at the bottom panel of the builder and select the MariaDB datasource added in the previous step. \n\n\n\nClick on the run button to run the query.\nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "Oracle DB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/oracledb.md",
    "content": "\nid: oracledb\ntitle: Oracle DB\n\nOracle DB\nToolJet can connect to Oracle databases to read and write data. \nConnection\nA Oracle DB can be connected with the following credentails:\n- Host\n- Port\n- SID / Service Name ( Database name must be a SID / Service Name )\n- Database Name\n- SSL\n- Username\n- Password\n- Client Library Path ( Only required for local setup )\n\n\n![ToolJet - Data source - OracleDB](/img/datasource-reference/oracledb/oracleauth.png)\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying Oracle DB\nOnce you have added a Oracle DB data source, click on `+` button of the query manager to create a new query. There are two modes by which you can query SQL:\n\nSQL mode\nGUI mode\n\nSQL mode\nSQL mode can be used to write raw SQL queries. Select SQL mode from the dropdown and enter the SQL query in the editor. Click on the `run` button to run the query.\nNOTE: Query should be saved before running.\nGUI mode\nGUI mode can be used to query Oracle database without writing queries. Select GUI mode from the dropdown and then choose the operation Bulk update using primary key. Enter the Table name and Primary key column name. Now, in the editor enter the records in the form of an array of objects. \nExample: `{{ [ {id: 1, channel: 33}, {id:2, channel:24} ] }}`\nClick on the run button to run the query. NOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "Redis",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/redis.md",
    "content": "\nid: redis\ntitle: Redis\n\nRedis\nToolJet can run Redis commands on your Redis instances.\nConnection\nToolJet requires the following to connect to your Redis instances. \n\n\nHost\nPort - The default port for Redis server is 6379\nUsername\nPassword\n\nClick on \"Test\" button to test the connection and click \"Save\" to save the data source.\nRedis Queries\nList of supported commands: Redis Official Documentation\nExamples\n`PING` command to test the Redis connection. If the connection is ready, the Redis server will respond with `PONG`.\n`shell\nPING`\n`SET` command can be used to set the value for a key \n`shell\nSET key value`\n`GET` command can be used to retrieve the value of a key\n```shell\nGET key",
    "tag": "tooljet"
  },
  {
    "title": "InfluxDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/influxdb.md",
    "content": "\nid: influxdb\ntitle: InfluxDB\n\nInfluxDB\nToolJet can connect to InfluxDB databases to read and write data. Use the Token authentication scheme to authenticate to the InfluxDB API. For more info visit InfluxDB docs.\nConnection\nToolJet connects to InfluxDB using :\n\nAPI Token\nHost\nPort\nProtocol (HTTP/HTTPS)\n\n:::info\nFor generating API Token visit InfluxDB docs.\n:::\n\n\n![ToolJet - Data source - influxDB](/img/datasource-reference/influxdb/influxauth.png)\n\n\nSupported queries:\n\n\nWrite data\n\n\nQuery data\n\n\nGenerate an Abstract Syntax Tree (AST) from a query\n\n\nRetrieve query suggestions\n\n\nRetrieve query suggestions for a branching suggestion\n\n\nAnalyze a Flux query\n\n\nList buckets\n\n\nCreate a bucket\n\n\nRetrieve a bucket\n\n\nUpdate a bucket\n\n\nDelete a bucket\n\n\n\nWrite data\nThis operation writes data to a bucket.\nRequired parameters:\n\nBucket\nOrganization name or ID\n\nOptional parameters:\n\nPrecision\n\nQuery data\nRetrieves data from InfluxDB buckets.\nRequired parameters:\n\nOrganization name or ID\n\nGenerate an Abstract Syntax Tree (AST) from a query\nThis operation analyzes flux query and generates a query specification.\nRequired parameters:\n\nQuery\n\nRetrieve query suggestions\nThis query retrieve query suggestions.\nRetrieve query suggestions for a branching suggestion\nThis operation retrieve query suggestions for a branching suggestion.\nRequired parameters:\n\nName\n\nAnalyze a Flux query\nThis Analyzes a Flux query.\nRequired parameters:\n\nQuery\n\nList buckets\nThis operation lists all the buckets in a database.\nCreate a bucket\nRequired parameters:\n\nQuery\n\nRetrieve a bucket\nThis operation retrieve a bucket in a database.\nRequired parameters:\n\nBucket ID\n\nUpdate a bucket\nRequired parameters:\n\nBucket ID\nQuery\n\nDelete a bucket\nRequired parameters:",
    "tag": "tooljet"
  },
  {
    "title": "Appwrite Database",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/appwrite.md",
    "content": "\nid: appwrite\ntitle: Appwrite Database\n\nAppwrite Database\nNow build applications on top of your Appwrite database.\nConnection\nToolJet connects to your Appwrite app using :\n- Host (API endpoint)\n- Project ID\n- Secret key\nYou'll find the Secret key and other credentials on your Appwrite's project settings page. You may need to create a new key if you don't have one already.\n:::info\nYou should also set the scope for access to a particular resource. Learn more about the API keys and scopes here.\n:::\nTo connect Appwrite datasource to your ToolJet application, go to the data source manager on the left-sidebar and click on the `+` button. Select Appwrite from the list of available datasources, provide the credentials and click Save. It is recommended to check the connection by clicking on 'Test connection' button to verify if the service account can access Appwrite from the ToolJet server.\n\n\n\nQuerying Appwrite\nAfter setting up the Appwrite datasource, you can click on the `+` button of the query manager at the bottom panel of the editor and select the Appwrite data source that you added in the previous step.\n\n\n\nAfter selecting Appwrite datasource, select the operation that you want to perform on the Appwrite database and click Save to save the query. \n:::tip\nQuery results can be transformed using Transformations. Read our Transformation documentation here\n:::\nSupported operations\n\nList documents\nGet document\nCreate document\nUpdate document \nDelete document\nBulk update using document id\n\nList documents\nThis operation can be used to get a list of all the user documents.\nRequired parameters:\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The value for collection ID field should be of `String` type. \n\nOptional parameters:\n\nLimit: Maximum number of documents to return in the response. By default, it will return a maximum of 25 results. A maximum of 100 results is allowed per request. The Limit value should be of `integer` type.\nOrder fields: Array of attributes used to sort results. The order field value should be an `array`.\nOrder types: Array of order directions for sorting attributes. Possible values are DESC for descending order or ASC for ascending order. The order field value should be an `array`.\nField, Operator, and Value: For filtering the results, you can enter a field(attribute) name, use the appropriate operator from the dropdown, and set a value.\n\n\n\n\nGet document\nUse this operation to get a document from a collection by its unique ID. \nRequired parameters:\n\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The value for collection ID should be of `String` type. \n\n\nDocument ID: Enter the document ID of the document that you want to get. The document ID should be of `String` type. \n\n\n\n\n\nAdd Document to Collection\nUse this operation to create a new document in a collection.\nRequired parameters:\n\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The collection ID should be of `String` type. \n\n\nBody: Enter the document data as a JSON object.\n\n\n\n\n\nUpdate document\nUse this operation to update a document.\nRequired parameters:\n\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The value for collection ID should be of `String` type. \n\n\nDocument ID: Enter the document ID of the document that you want to get. The document ID should be of `String` type. \n\n\nBody: Enter the document data as a JSON object.\n\n\n\n\n\nDelete document\nUse this operation for deleting a document in the collection.\nRequired parameters:\n\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The value for collection ID should be of `String` type. \n\n\nDocument ID: Enter the document ID of the document that you want to get. The document ID should be of `String` type. \n\n\n\n\n\nBulk update using document id\nUse this operation for bulk updating a document in a collection.\nRequired parameters:\n\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The value for collection ID should be of `String` type. \n\n\nKey for document ID:  Enter the key or attribute name that can be used to identify each record.\n\n\nRecords: The array of objects that will contain the data for updating each record in the database\nand these objects must contain a key-value pair to point unique record in the database (key for document)\n\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Slack",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/slack.md",
    "content": "\nid: slack\ntitle: Slack\n\nSlack\nToolJet can connect to your Slack workspace to send messages. \n\n\n![ToolJet - Data source - Slack](/img/datasource-reference/slack/connect.png)\n\n\nConnection\n\n\nTo add the Slack datasource, click the Datasource manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select Slack from the modal that pops up.\n\n\nIn the next dialog, you'll be asked to choose the permission scope. Choose the permission scope and then click on Connect to Slack button.\n\n\nA new tab will open up asking for authorization confirmation. Once done, you can close the tab.\n\n\n\n\n![ToolJet - Data source - Slack](/img/datasource-reference/slack/authorize.png)\n\n\n\nClick on the 'Save data source button to save the data source.\n\n:::note\nThe App (which credentials are provided) needs to be installed in the workspace to use the Slack data source, and it needs to be added to the channel where you want to post the message.\n:::\nSupported operations\n\nList members\nSend message\n\nList members\nThis operation will return the data of all the members in your slack workspace.\n\n\n![ToolJet - Data source - Slack](/img/datasource-reference/slack/listmembers.png)\n\n\nSend message\nThis operation will send/post the message to a specified channel or posting to direct messages (also known as DMs or IMs) in your slack workspace.\n| Property | Description |\n| :--- | :--- |\n| Channel | The channel ID or user ID to post the message to. |\n| Message | The message to post. |\n\n\n![ToolJet - Data source - Slack](/img/datasource-reference/slack/sendmessage.png)\n\n",
    "tag": "tooljet"
  },
  {
    "title": "SAP HANA",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/saphana.md",
    "content": "\nid: saphana\ntitle: SAP HANA\n\nSAP HANA\nToolJet can connect to SAP HANA databases to read and write data. \n\nConnection\nQuerying SAP HANA\n\nConnection\nTo add a new SAP HANA database, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select SAP HANA from the modal that pops up.\nToolJet requires the following to connect to your SAP HANA database:\n\nHost\nPort\nUsername\nPassword\n\n:::info\nPlease make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\n:::\n\n\n![ToolJet - Data source - SAP HANA](/img/datasource-reference/saphana/connect.png)\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying SAP HANA\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. Enter the query in the editor. Click on the `run` button to run the query.\nNOTE: Query should be saved before running.\n\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "Twilio",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/twilio.md",
    "content": "\nid: twilio\ntitle: Twilio\n\nTwilio\nToolJet can connect to your Twilio account to send sms.\n\n\n![ToolJet - Data source - Twilio](/img/datasource-reference/twilio/connect.png)\n\n\nConnection\n\n\nTo add the Twilio datasource, click the Datasource manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select Twilio from the modal that pops up.\n\n\nIn the next dialog, you'll be asked to enter the Auth Token, Account SID, and Messaging Service SID.\n\n\nYou can get the Auth Token and Account SID on the dashboard of your Twilio account.\n\n\n\n\n![ToolJet - Data source - Twilio](/img/datasource-reference/twilio/auth.png)\n\n\n\nFor Messaging Service SID, you'll need to create a messaging service first from the Services under Messaging in the left-sidebar.\n\n\n\n![ToolJet - Data source - Twilio](/img/datasource-reference/twilio/sid.png)\n\n\n\nAfter entering the three credentials, you can Save the datasource.\n\nSupported operations\n\nSend message\n\nSend message\nThis operation will send the specified message to specified mobile number.\n\n\n![ToolJet - Data source - Twilio](/img/datasource-reference/twilio/sms.png)\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Amazon SES",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/amazonses.md",
    "content": "\nid: amazonses\ntitle: Amazon SES\n\nAmazon SES\nToolJet can connect to your Amazon SES account to send emails.\nConnection\nTo add a new Amazon SES API datasource, click the Datasource manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select Amazon SES from the modal that pops up.\nToolJet supports connecting to DynamoDB using IAM credentials or AWS Instance Profile. If you are using IAM credentials, you will need to provide the following details:\n\nRegion\nAccess key\nSecret key\n\nIt is recommended to create a new IAM user for the database so that you can control the access levels of ToolJet.\nTo connect to DynamoDB using AWS Instance Profile, select the Use AWS Instance Profile. This will use the IAM role attached to the EC2 instance where ToolJet is running.\nTo access the metadata service of an ECS container and the EC2 instance, we use the WebIdentityToken parameter which is obtained from a successful login with an identity provider.\nClick on the 'Save' button to save the data source.\n\n\n\nSupported operations\n\nEmail service\n\nEmail service\nRequired parameters:\n- Send email to\n- Send email from\n- Subject\n- Body as text or HTML\nOptional parameters:\n- CC Addresses\n- BCC Addresses\n:::info\nSend mail to - accepts an array/list of emails separated by comma.\nFor example:\n`{{[\"dev@tooljet.io\", \"admin@tooljet.io\"]}}`.\nSend mail from - accepts a string.\nFor example: `admin@tooljet.io`\n:::\n:::tip\nSend a single email to multiple recipients - The `Send mail to` field can contain an array of recipients, which will send a single email with all of the recipients in the field.\n:::\n:::info Note\nQuery should be saved before running.",
    "tag": "tooljet"
  },
  {
    "title": "MySQL",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/mysql.md",
    "content": "\nid: mysql\ntitle: MySQL\n\nMySQL\nToolJet can connect to MySQL databases to read and write data. \nConnection\nToolJet requires the following to connect to your MySQL database. Please make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nTo add a new MySQL database, click on the `+` button on data sources panel at left sidebar in the app editor. Select MySQL from the modal that pops up.\nToolJet requires the following to connect to your MySQL database.\n\nHost\nPort\nUsername\nPassword\n\nIt is recommended to create a new MySQL database user so that you can control the access levels of ToolJet. \n\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying MySQL\nOnce you have added a MySQL data source, click on `+` button of the query manager to create a new query. There are two modes by which you can query SQL:\n\nSQL mode\nGUI mode\n\nSQL mode\nSQL mode can be used to write raw SQL queries. Select SQL mode from the dropdown and enter the SQL query in the editor. Click on the `run` button to run the query.\nNOTE: Query should be saved before running.\n\nGUI mode\nGUI mode can be used to query MySQL database without writing queries. Select GUI mode from the dropdown and then choose the operation Bulk update using primary key. Enter the Table name and Primary key column name. Now, in the editor enter the records in the form of an array of objects. \nExample: `{{ [ {id: 1, channel: 33}, {id:2, channel:24} ] }}`\n\nClick on the run button to run the query. NOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "Cloud Firestore",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/firestore.md",
    "content": "\nid: firestore\ntitle: Cloud Firestore\n\nCloud Firestore\nConnection\nToolJet connects to your Cloud Firestore using JSON key of your GCP service account.\nTo generate a new key, check out Firestore's official documentation.\nOnce the key is downloaded, click on `+` button of data sources panel at the left-bottom corner of the app editor. Select Firestore from the modal that pops up. Paste the key in the field for GCP key. Click on Test connection button to verify if the service account can access Firestore from ToolJet server. Click on Save button to save the datasource.\n\nQuerying Firestore\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source.\n\nSelect the operation that you want to perform on Firestore and click Save to save the query. \n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\n\nGet document\nQuery collection\nAdd Document to Collection \nUpdate document \nSet document\nBulk update using document id\nDelete document\n\nGet document\nUse this operation to get the data in a document.\nRequired parameters:\n\nPath: Enter the path of the document. Path format: `collection name/document id`. ex: `books/23e2wsds32`\n\n\nQuery collection\nUse this operation to query all the documents in a collection. Check firestore doc here.\nRequired parameters:\n\nPath: Enter the name of the collection to be queried. Example: `books`\n\nOptional parameters:\n\n\nOrder type: Select ascending or descending from the dropdown.\n\n\nLimit: Maximum number of documents to return in response. By default will return maximum 25 results. Maximum of 100 results allowed per request. The Limit value should be of integer type.\n\n\nField, Operator, and Value: For filtering the results, you can enter a document field name, use appropriate operator from the dropdown and set a value.\n\n\n\nAdd Document to Collection\nUse this operation for creating a new document in a collection.\nRequired parameters:\n\nCollection: Enter the path of the document in a collection. Path format: `collection name/document id`. ex: `books/33243dwe2332`\nBody: Enter the Field names and their values in json form. example body:\n`json\n{\n\"Author\": \"Shubh\",\n\"id\": 5\n}`\n\n\nUpdate document\nUse this operation for updating the existing document in a collection. Also, it only updates fields if they exist, but doesn't replace an entire object like set operation.\nRequired parameters:\n\nPath: Enter the path of the document in a collection. Path format: `collection name/document id`. ex: `books/33243dwe2332`\nBody: Enter the Field names and their values in json form. example body:\n`json\n{\n\"Author\": \"Shubhendra\",\n\"id\": 3\n}`\n\n\nSet document\nThis operation replaces your chosen object with the value that you provide. So if your object has 5 fields, and you use Set operation and pass object with 3 fields, it will now have 3 fields.\nRequired parameters:\n\nPath: Enter the path of the document in a collection. Path format: `collection name/document id`. ex: `books/33243dwe2332`\nBody: Enter the Field names and their values in json form. example body:\n`json\n{\n\"Author\": \"Shefewfbh\",\n\"id\": 9\n}`\n\n\nBulk update using document id\nUse this operation for bulk updating documents.\nRequired parameters:\n\nCollection: \nKey for document ID: \nRecords:\n\n\nDelete document\nUse this operation for deleting a document in a collection.\nRequired parameters:\n\nPath: Enter the path of the document to be deleted in a collection. Path format: `collection name/document id`. ex: `books/33243dwe2332`\n\n\nTransforming firestore query result for Table widget\nThe Firestore query result is in the form of object so we\u2019ll need to transform it into array.\n```js\nreturn data = Array(data)",
    "tag": "tooljet"
  },
  {
    "title": "MinIO",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/minio.md",
    "content": "\nid: minio\ntitle: MinIO\n\nMinIO\nToolJet can connect to minio and perform various operation on them.\nSupported operations\n\nRead object\nPut object\nRemove object\nList buckets\nList objects in a bucket\nPresigned url for download\nPresigned url for upload\n\nConnection\nTo add a new minio source, click on the Add or edit datasource icon on the left sidebar of the app editor and click on `Add datasource` button. Select Minio from the modal that pops up.\nToolJet requires the following to connect to your DynamoDB:\n\nHost\nPort\nAccess key\nSecret key\n\n\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying Minio\nClick on `+` button of the query manager at the bottom panel of the editor and select the data source added in the previous step as the data source. Select the operation that you want to perform and click Save to save the query.\n\nClick on the run button to run the query. \nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "TypeSense",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/typesense.md",
    "content": "\nid: typesense\ntitle: TypeSense\n\nTypeSense\nToolJet can connect to your TypeSense deployment to read and write data.\nConnection\nPlease make sure the host/IP of the TypeSense deployment is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nToolJet requires the following to connect to your TypeSense deployment: \n- Host\n- Port\n- API Key\n- Protocol\n\n\n\nQuerying TypeSense\nClick on `+` button of the query manager at the bottom panel of the editor and select the TypeSense added in the previous step as the data source.\nSelect the operation that you want to perform on your TypeSense cluster and click `Create` to save the query. \n\n\n\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\n1. Create a Collection\nWith this operation you can easily create `Collections` in your TypeSense cluster. In the schema field, you'll need to define the schema for creating a new collection. Check out TypeSense docs to know more about collections here\n\n2. Index a document\nUse this operation to index a document to your collection. You'll need to specify the Collection Name where you want your document to be indexed and also provide the document data according the schema defined in the collection. Read more about Indexing a document in TypeSense here.\n\n3. Search\nUse this operation to perform a search within the specified collection. Know more about the search parameters in the TypeSense doc here.\n\n4. Get a document\nUse this operation to fetch an individual document in a collection by providing the `id` of the document. Read more about it here.\n\n5. Update a document\nUse this operation to update an individual document by providing the Collection Name and Id of the document. You'll need to provide the updated document data in the form of specified schema. Check out the TypeSense's doc on updating a document here.\n\n6. Delete a document\nDelete a document from collection by providing the `Id` of the document. Check out the TypeSense's doc on deleting documents here.\n\n:::tip\nMake sure that you supply JSON strings instead of JavaScript objects for any document or schema that is being passed to the server, in any of the above operations.",
    "tag": "tooljet"
  },
  {
    "title": "Notion",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/notion.md",
    "content": "\nid: notion\ntitle: Notion\n\nNotion\nToolJet can connect to a Notion workspace to do operations on notion pages, databases and blocks.\nConnection\nFor integrating Notion with ToolJet we will need the API token. The API token can be generated from your Notion workspace settings. Read the official Notion docs for Creating an internal integration with notion API.\n\n\n\nQuerying Notion\nNotion API provides support for:\n- Database\n- Page\n- Block\n- User\n\n:::tip\nBefore querying Notion, you must share the database with your integration. Click the share button in your database view, find your integration name select it.\n\n:::\nDatabase\nOn database resource you can perform the following operations:\n- Retrieve a database\n- Query a database\n- Create a database\n- Update a database\n\n1. Retrieve a database\nThis operations retrieves a Database object using the ID specified.\nRequired parameters:\n\nDatabase ID: You'll find the Database ID in the url. Suppose this is the example url: `https://www.notion.so/workspace/XXX?v=YYY&p=ZZZ` then `XXX` is the database ID, `YYY` is the view ID and `ZZZ` is the page ID.\n\n\n2. Query a database\nThis operation gets a list of Pages contained in the database, filtered and ordered according to the filter conditions and sort criteria provided in the query.\nRequired parameters:\n\nDatabase ID : You'll find the Database ID in the url. Suppose this is the example url: `https://www.notion.so/workspace/XXX?v=YYY&p=ZZZ` then `XXX` is the database ID, `YYY` is the view ID and `ZZZ` is the page ID.\n\nOptional parameters:\n\nFilter : This must be an object of filters\nSort : Array of sort objects\nLimit : limit for pagination\nStart Cursor : Next object id to continue pagination\n\n3. Create a database\nThis operation creates a database as a subpage in the specified parent page, with the specified properties.\nRequired parameters:\n\nDatabase ID : You'll find the Database ID in the url. Suppose this is the example url: `https://www.notion.so/workspace/XXX?v=YYY&p=ZZZ` then `XXX` is the database ID, `YYY` is the view ID and `ZZZ` is the page ID.\nPage ID : Page ID of the parent\nProperties : Properties defines the columns in a database\n\nOptional parameters:\n\nTitle : Title should be an array of rich_text properties\nIcon type : Currently notion api accepts two icon options, emoji, external URL\nIcon value : Value of selected icon type\nIcon type : Currently notion api accepts only external URL\nCover value : Value of selected cover type\n\n4. Update a database\nThis operation updates an existing database as specified by the parameters.\nRequired parameters:\n\nDatabase ID\n\nOptional parameters:\n\nTitle : Title should be an array of rich_text properties\nProperties : Properties defines the columns in a database\nIcon type : Currently notion api accepts two icon options, emoji, external URL\nIcon value : Value of selected icon type\nIcon type : Currently notion api accepts only external URL\nCover value : Value of selected cover type\n\nPage\nOn page resource you can perform the following operations:\n- Retrieve a page\n- Create a page\n- Update a page\n- Retrieve a page property\n- Archive a page\n\n1. Retrieve a page\nThis operation retrieves a Page object using the ID specified.\nRequired parameters:\n\nPage ID\n\n2. Create a page\nThis operation creates a new page in the specified database or as a child of an existing page. If the parent is a database, the property values of the new page in the properties parameter must conform to the parent database's property schema. If the parent is a page, the only valid property is title.\nParameters:\n\nPage ID\nProperties : Property values of this page\nIcon type : Currently notion api accepts two icon options, emoji, external URL\nIcon value: Value of selected icon type\nIcon type : Currently notion api accepts only external URL\nCover value : Value of selected cover type\n\n3. Update a page\nThis operation updates page property values for the specified page. Properties that are not set via the properties parameter will remain unchanged.\nParameters:\n\nPage ID\nParent type: A database parent or page parent\nProperties : Property values of this page\nChildren : Page content for the new page as an array of block objects\nIcon type : Currently notion api accepts two icon options, emoji, external URL\nIcon value: Value of selected icon type\nIcon type : Currently notion api accepts only external URL\nCover value : Value of selected cover type\n\n4. Retrieve a page property item\nThis operation retrieves a property_item object for a given page ID and property ID. Depending on the property type, the object returned will either be a value or a paginated list of property item values. See Property item objects for specifics.\nParameters:\n\nPage ID\nProperty ID\nLimit\nStart cursor\n\n5. Archive (delete) a page\nRequired parameters:\n\nPage ID\nArchive: Dropdown for archive and un archive the page\n\nBlocks\nThe following operations can be performed on the block resource:\n- Retrieve a block\n- Append block children\n- Retrieve block children\n- Update a block\n- Delete a block\n\n:::info\nTo get the id for blocks, simply click on the menu icon for the block and click \"Copy link\". Afterwards, paste the link in the browser and it should look like this: `https://www.notion.so/Creating-Page-Sample-ee18b8779ae54f358b09221d6665ee15#7fcb3940a1264aadb2ad4ee9ffe11b0e` the string after # is the block id i.e. `7fcb3940a1264aadb2ad4ee9ffe11b0e`.\n:::\n1. Retrieve a block\nThis operation retrieves a Block object using the ID specified.\nRequired parameters:\n\nBlock ID\n\n2. Append new block children\nThis operation creates and appends new children blocks to the parent block_id specified.\nRequired parameters:\n\nBlock ID\nChildren: Array of block objects\n\n3. Retrieve block children\nThis operation retrieves a paginated array of child block objects contained in the block using the ID specified.\nRequired parameters:\n\nBlock ID\nLimit\nStart cursor\n\n4. Update a block\nThis operation updates the content for the specified block_id based on the block type.\nRequired parameters:\n\nBlock ID\nProperties: The block object type value with the properties to be updated\nArchive\n\n5. Delete a block\nRequired parameters:\n\nBlock ID\n\nUser\nThe following operations can be performed on the user notion resource:\n1. Retrieve a user from current workspace\nThis operation retrieves a User using the ID specified.\n\nRequired parameters:\n\nUser ID\n\n2. Retrieve list of users of a workspace\nThis operation returns a paginated list of Users for the workspace.\nRequired parameters:\n\nLimit\nStart cursor\n",
    "tag": "tooljet"
  },
  {
    "title": "Stripe",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/stripe.md",
    "content": "\nid: stripe\ntitle: Stripe\n\nStripe\nToolJet can connect to your Stripe account to read or write customers' and payments' data.\n:::info\nCheck out the Stripe Refund App tutorial\n:::\nConnection\nTo add a new Stripe data source, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select Stripe from the modal that pops up.\nToolJet requires the Stripe API key to connect to your database.\n\n\n![ToolJet - Data source - Stripe](/img/datasource-reference/stripe/connect.png)\n\n\nYou can get the Stripe API key from the dashboard of your Stripe account. Go to the Stripe account dashboard, click on the Developers on the top right, then on the left-sidebar go to the API Keys, you can simple reveal the Secret Key and copy-paste on ToolJet.\n\n\n![ToolJet - Data source - Stripe](/img/datasource-reference/stripe/apikey.png)\n\n\nQuerying Stripe\nClick on + button of the query manager at the bottom panel of the editor and select the Stripe datasource added in the previous step. Enter the query in the editor. Click on the `Save and Run` button to save and then run the query.\nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\nYou can check out the some of the operations mentioned below. All the operations for Stripe are available and can be performed from ToolJet. Check out the Stripe API documentation for the detailed information about each operation.\n\ndelete,/v1/account\nget,/v1/account\npost,/v1/account\npost,/v1/account/bank_accounts\ndelete,/v1/account/bank_accounts/{id}\nget,/v1/account/bank_accounts/{id}\npost,/v1/account/bank_accounts/{id}\nget,/v1/account/capabilities\nget,/v1/account/capabilities/{capability}\npost,/v1/account/capabilities/{capability}\nget,/v1/account/external_accounts\npost,/v1/account/external_accounts\ndelete,/v1/account/external_accounts/{id}\nget,/v1/account/external_accounts/{id}\npost,/v1/account/external_accounts/{id}\npost,/v1/account/login_links\nget,/v1/account/people\npost,/v1/account/people\ndelete,/v1/account/people/{person}\nget,/v1/account/people/{person}\npost,/v1/account/persons\ndelete,/v1/account/persons/{person}\nget,/v1/account/persons/{person}\npost,/v1/account/persons/{person}\npost,/v1/account_links\nget,/v1/accounts\npost,/v1/accounts\ndelete,/v1/accounts/{account}\nget,/v1/accounts/{account}\npost,/v1/accounts/{account}\npost,/v1/accounts/{account}/bank_accounts\ndelete,/v1/accounts/{account}/bank_accounts/{id}\nget,/v1/accounts/{account}/bank_accounts/{id}\nget,/v1/accounts/{account}/bank_accounts/{id}\nget,/v1/accounts/{account}/capabilities\nget,/v1/accounts/{account}/capabilities/{capability}\npost,/v1/accounts/{account}/capabilities/{capability}\nget,/v1/accounts/{account}/external_accounts\npost,/v1/accounts/{account}/external_accounts\ndelete,/v1/accounts/{account}/external_accounts/{id}\nget,/v1/accounts/{account}/external_accounts/{id}\nget,/v1/accounts/{account}/external_accounts/{id}\npost,/v1/accounts/{account}/login_links\nget,/v1/accounts/{account}/people\npost,/v1/accounts/{account}/people\ndelete,/v1/accounts/{account}/people/{person}\nget,/v1/accounts/{account}/people/{person}\npost,/v1/accounts/{account}/people/{person}\nget,/v1/accounts/{account}/persons\npost,/v1/accounts/{account}/persons\ndelete,/v1/accounts/{account}/persons/{person}\nget,/v1/accounts/{account}/persons/{person}\npost,/v1/accounts/{account}/persons/{person}\npost,/v1/accounts/{account}/reject\nget,/v1/apple_pay/domains\npost,/v1/apple_pay/domains\ndelete,/v1/apple_pay/domains/{domain}\nget,/v1/apple_pay/domains/{domain}\nget,/v1/application_fees\nget,/v1/application_fees/{fee}/refunds/{id}\npost,/v1/application_fees/{fee}/refunds/{id}\nget,/v1/application_fees/{id}\npost,/v1/application_fees/{id}/refund\nget,/v1/application_fees/{id}/refunds\npost,/v1/application_fees/{id}/refunds\nget,/v1/apps/secrets\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Amazon S3",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/s3.md",
    "content": "\nid: s3\ntitle: Amazon S3\n\nAmazon S3\nToolJet can connect to Amazon S3 buckets and perform various operation on them.\nConnection\nTo add a new S3 source, go to the Datasources manager on the left sidebar of the app editor and click on `Add datasource` button. Select AWS S3 from the modal that pops up.\nToolJet supports connecting to DynamoDB using IAM credentials or AWS Instance Profile. If you are using IAM credentials, you will need to provide the following details:\n\nRegion\nAccess key\nSecret key\n\nIt is recommended to create a new IAM user for the database so that you can control the access levels of ToolJet.\nTo connect to DynamoDB using AWS Instance Profile, select the Use AWS Instance Profile. This will use the IAM role attached to the EC2 instance where ToolJet is running.\nTo access the metadata service of an ECS container and the EC2 instance, we use the WebIdentityToken parameter which is obtained from a successful login with an identity provider.\n\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\n:::tip\nYou can now connect to different S3 Hosts using custom endpoints.\n:::\nQuerying AWS S3\nClick on `+` button of the query manager at the bottom panel of the editor and select the data source added in the previous step as the data source. Select the operation that you want to perform and click Save to save the query.\n\n\n\nClick on the run button to run the query. \nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nQuery operations\nYou can create query for AWS S3 data source to perform several actions such as:\n  1. Read object\n  2. Upload object\n  3. List buckets\n  4. List objects in a bucket\n  5. Signed url for download\n  6. Signed url for upload\nRead object\nYou can read an object in a bucket by using this operation. It requires two parameters - Bucket name and Key.\n\nUpload object\nYou can use this operation to upload objects(files) to your S3 bucket. It requires four parameters:\n  1. Bucket: Specify the bucket name\n  2. Key: Key of the object/file\n  3. Content type: Specify file type such as text, image etc. \n  4. Upload data: File/object that is to be uploaded. \n\nList buckets\nThis operation will list all the buckets in your S3. This does not require any parameter.\n\nList objects in a bucket\nThis operation will fetch the list of all the files in your bucket. It requires two parameters:\n  1. Bucket: Bucket name (mandatory)\n  2. Prefix: To limit the response to keys that begin with the specified prefix (optional)\n  3. Max keys: The maximum number of keys returned in the response body (optional). Default value is 1000.\n  4. Offset: The key to start with when listing objects in a bucket (optional). \n  5. \"Next Continuation Token\": `Next Continuation Token` indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key (optional).\n:::info\nNext Continuation Token\nFor listing a bucket for objects that begin with a specific character or a prefix, then use the `Offset` parameter. For example, if you want to list all the objects that begin with `a`, then set the `Offset` parameter to `a`. Similarly, if you want to list all the objects that begin with `ab`, then set the `Offset` parameter to `ab`.\nThe `Next Continuation Token` is used to list the next set of objects in a bucket. It is returned by the API when the response is truncated. The results will contain `Next Continuation Token` if there are more keys in the bucket that satisfy the list query. To get the next set of objects, set the `Next Continuation Token` parameter and run the query again.\nThe results will continue from where the last listing finished.\n:::\n\nSigned url for download\nThe object owner can optionally share objects with others by creating a presigned URL, using their own security credentials, to grant time-limited permission to download the objects. For creating a presigned URL, the required parameters are:\n  1. Bucket: name of the bucket for uploading the file\n  2. Key: an object key\n  3. Expires in: an expiration time of URL\n\nSigned url for upload\nThe presigned URLs are useful if you want your user/customer to be able to upload a specific object to your bucket, but you don't require them to have AWS security credentials or permissions. For creating a presigned URL, the required parameters are:\n  1. Bucket: name of the bucket for uploading the file\n  2. Key: an object key\n  3. Expires in: an expiration time of URL\n  4. Content type: the content type such as text, image etc.\n\n:::info\nWe built an app to view and upload files to AWS S3 buckets. Check out the complete tutorial here.",
    "tag": "tooljet"
  },
  {
    "title": "Athena",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/athena.md",
    "content": "Athena\nToolJet can connect to Amazon Athena which is an interactive query service that makes it easy to analyze data in Amazon S3 using standard SQL.\n\nConnection\nQuerying-athena\nBasic Operation\n\nConnection\nToolJet requires the following to connect to your Athena.\n\nDatabase\nS3 output location\nAccess key\nSecret key\nRegion\n\n:::info\nYou can also configure for additional optional parameters.\n:::\n\nQuerying Amazon Athena\n\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the datasource. Query manager then can be used to write SQL queries.\n\n\n\nClick on the `run` button to run the query. \n\nNOTE: Query should be saved before running.\n:::tip\nRefer amazon athena docs here for more info: link\n:::\nBasic queries\nCreating table\n`sql\nCREATE EXTERNAL TABLE student (\n    name STRING,\n    age INT\n)  LOCATION 's3://athena-express-akiatfa53s-2022/';`\nInserting to table\n`sql\nINSERT INTO student\nVALUES ('Lansing',1)`\nSelect operation\n```sql\nSELECT * from student WHERE AGE=1",
    "tag": "tooljet"
  },
  {
    "title": "Zendesk",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/zendesk.md",
    "content": "\nid: zendesk\ntitle: Zendesk\n\nZendesk\nToolJet can connect to Zendesk APIs to read and write data using OAuth 2.0, which helps us to limit an application's access to a user's account.\n\nConnection\nQuerying Zendesk\n\nConnection\nToolJet connects to your Zendesk app using :\n- Zendesk Sub-domain\n- Client ID\n- Client Secret\nAuthorization Scopes\nYou can create a Zendesk data source with one of either of the two permission scopes :\n  1. Read Only\n  2. Read and Write\n:::info\nYou must first be a verified user to make Zendesk API requests. This is configured in the Admin Center interface in Apps and integrations > APIs > Zendesk APIs. For more information, see Security and Authentication in the Zendesk Support API reference or check out Zendesk's docs.\n:::\nTo connect Zendesk datasource to your ToolJet application, go to the data source manager on the left-sidebar and click on the `+` button. Select Zendesk from the list of available datasources, provide the credentials and click Connect to Zendesk and authenticate via OAuth. And click Save to save the datasource.\n\n\n![ToolJet - Data source - Zendesk](/img/datasource-reference/zendesk/zendesk.gif)\n\n\nOperations\n\nList Tickets\nList requested Tickets\nShow a Ticket\nUpdate a Ticket\nList Users\nGet Profile\nSearch query\n\nList Tickets\nLists all the tickets in your Zendesk account.\nList requested Tickets\nLists all the tickets requested by the user. \n| Fields      | description |\n| ----------- | ----------- |\n| User ID    | The id of the user  |\nShow Tickets\nGets a ticket's properties with the given ID, though not the ticket comments.\n| Fields      | description |\n| ----------- | ----------- |\n| Ticket ID    | The id of the ticket  |\nUpdate Tickets\nUpdates a ticket's properties with the given ID.\n| Fields      | description |\n| ----------- | ----------- |\n| Ticket ID    | The id of the ticket  |\n| Body    | The properties and values to update. Example: `{{({ \"ticket\": {\"status\": \"solved\"} })}}` |\nList Users\nLists all the users in your Zendesk account.\nGet Profile\nGets a user's profile with the given ID.\n| Fields      | description |\n| ----------- | ----------- |\n| User ID    | The id of the user  |\nSearch Query\nThe Search Query uses Zendesk's Search API to return tickets, users, and organizations with defined filters.\nCommon filters include:\n- `type:ticket`\n- `type:user`\n- `type:organization`\n- `type:ticket organization:12345 status:open`\n| Fields      | description |\n| ----------- | ----------- |",
    "tag": "tooljet"
  },
  {
    "title": "DynamoDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/dynamodb.md",
    "content": "\nid: dynamodb\ntitle: DynamoDB\n\nDynamoDB\nToolJet can connect to DynamoDB to read and write data.\nConnection\nTo add a new DynamoDB, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select DynamoDB from the modal that pops up.\nToolJet supports connecting to DynamoDB using IAM credentials or AWS Instance Profile. If you are using IAM credentials, you will need to provide the following details:\nToolJet requires the following to connect to your DynamoDB.\n\nRegion\nAccess key\nSecret key\n\nIt is recommended to create a new IAM user for the database so that you can control the access levels of ToolJet.\nTo connect to DynamoDB using AWS Instance Profile, select the Use AWS Instance Profile. This will use the IAM role attached to the EC2 instance where ToolJet is running.\nTo access the metadata service of an ECS container and the EC2 instance, we use the WebIdentityToken parameter which is obtained from a successful login with an identity provider.\n\nClick on 'Test connection' button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on 'Save' button to save the data source.\nQuerying DynamoDB\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. Select the operation that you want to perform and click 'Save' to save the query.\n\nClick on the 'run' button to run the query. NOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "MS SQL Server / Azure SQL databases",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/mssql.md",
    "content": "\nid: mssql\ntitle: MS SQL Server / Azure SQL databases\n\nMS SQL Server / Azure SQL databases\nToolJet can connect to MS SQL Server & Azure SQL databases to read and write data. \nConnection\nPlease make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nTo add new MS SQL Server / Azure SQL database, click on the '+' button on data sources panel at the left-bottom corner of the app editor. Select `SQL Server` from the modal that pops up.\nToolJet requires the following to connect to your PostgreSQL database.\n\nHost\nPort\nUsername\nPassword\nAzure - Select this option if you are using Azure SQL databases.\n\nIt is recommended to create a new database user so that you can control the access levels of ToolJet. \nClick on 'Test connection' button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on 'Save' button to save the data source.\n\nQuerying SQL Server / Azure SQL databases\nClick on '+' button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. \nClick on the 'run' button to run the query. NOTE: Query should be saved before running.\n\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "ClickHouse",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/clickhouse.md",
    "content": "\nid: clickhouse\ntitle: ClickHouse\n\nClickHouse\nToolJet can connect to the ClickHouse to read and write data.\n:::info\nToolJet uses this NodeJS client for ClickHouse.\n:::\nConnection\nTo add a new ClickHouse datasource, Go to the Datasource Manager on the left sidebar of the app editor and click on `Add datasource` button. Select ClickHouse from the modal that pops up.\nToolJet requires the following to connect to your ClickHouse Database:\n\nUsername\nPassword\nHost\nPort\nDatabase Name\nProtocol\nUse Post\nTrim Query\nUse Gzip\nDebug\nRaw\n\n\nQuerying ClickHouse\nAfter setting up the ClickHouse datasource, you can click on the `+` button of the query manager and select the ClickHouse datasource that you added in the previous step to create a new query.\n:::info\nFor more details on clickhouse visit Clickhouse docs.\n:::\nSupported Operations:\n\nSQL Query\nInsert array of objects\n\nSQL Query\nUse this to operation to enter ClickHouse SQL Statements. These statements represent various kinds of action you can perform using SQL queries.\nExample SQL queries\n\n\nSELECT:\n`sql\nSELECT * from test array;`\n\n\n\n\n\nCREATE: \n`sql\nCREATE TABLE test array3 (\n    date Date,\n    str String,\n    arr Array(String),\n    arr2 Array (Date)\n    arr3 Array(UInt32) ,\n    id1 UUID\n)ENGINE=MergeTree () ORDER BY(str)`\n\n\n\n\n\nALTER TABLE(add column)\n`sql\nALTER TABLE test array1 ADD COLUMN Added2 UInt32;`\n\n\n\n\n\nSELECT WITH WHERE CLAUSE\n`sql\n    SELECT * FROM test array1 WHERE str='Somethingl...'`\n\n\n\n\n\nUPDATE\n`sql\n    ALTER TABLE test_array1 UPDATE arr = (12] WHERE str='Somethingl...'`\n\n\n\n\n\nDELETE\n`sql\n    ALTER TABLE test_array1 DELETE WHERE str= 'Somethingl...'`\n\n\n\n\n\nNORMAL INSERT\n1) Step 1 - Creating Table\n`sql\nCREATE TABLE test array4 (\nname String,\ndate Date\n   )ENGINE=MergeTree () ORDER BY (name)`\n\n\n\n2) Step 2 - Insert\n`sql\nINSERT INTO test_array4 (*) VALUES ('juvane', '1996-01-13')`\n\n\n\n:::info\nGiving Primary Key\n```\nCREATE TABLE db.table_name\n(\n    name1 type1, name2 type2, ...,\n    PRIMARY KEY(expr1[, expr2,...])]\n)\nENGINE = engine;\nOR \nCREATE TABLE db.table_name\n(\n    name1 type1, name2 type2, ...\n)\nENGINE = engine\nPRIMARY KEY(expr1[, expr2,...]);\n```\n:::\n\n\nInsert array of objects\nUse this operation for inserting array of objects.\nRequired Parameters:\n\nBody\nFields\nTable name\n\nExample Body value:\n`javascript\n[\n            {\n                date: '2018-01-01',\n                str: 'Something1...',\n                arr: [],\n                arr2: ['1985-01-02', '1985-01-03'],\n                arr3: [1,2,3,4,5],\n                id1: '102a05cb-8aaf-4f11-a442-20c3558e4384'\n            },      \n            {\n                date: '2018-02-01',\n                str: 'Something2...',\n                arr: ['5670000000', 'Something3...'],\n                arr2: ['1985-02-02'],\n                arr3: [],\n                id1: 'c2103985-9a1e-4f4a-b288-b292b5209de1'\n            }\n        ];`",
    "tag": "tooljet"
  },
  {
    "title": "Google Cloud Storage",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/gcs.md",
    "content": "\nid: gcs\ntitle: Google Cloud Storage\n\nGoogle Cloud Storage\nToolJet can connect to GCS buckets and perform various operation on them.\nSupported operations\n-Read file\n-Upload file\n-List buckets\n-List files in a bucket\n-Signed url for download\n-Signed url for upload\nConnection\nTo add a new GCS source, click on the Add or edit datasource icon on the left sidebar of the app editor and click on `Add datasource` button. Select GCS from the modal that pops up.\nToolJet requires the json private key of a service account to be able to connect to GCS.\nYou can follow the google documentation to get started.\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying GCS\nClick on `+` button of the query manager at the bottom panel of the editor and select the data source added in the previous step as the data source. Select the operation that you want to perform and click Save to save the query.\n\nClick on the run button to run the query. \nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "PostgreSQL",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/postgresql.md",
    "content": "\nid: postgresql\ntitle: PostgreSQL\n\nPostgreSQL\nToolJet can connect to PostgreSQL databases to read and write data. \nConnection\nPlease make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nTo add a new PostgreSQL database, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select PostgreSQL from the modal that pops up.\nToolJet requires the following to connect to your PostgreSQL database.\n\nHost\nPort\nUsername\nPassword\n\nIt is recommended to create a new PostgreSQL database user so that you can control the access levels of ToolJet.\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying PostgreSQL\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. PostgreSQL query editor has two modes, SQL & GUI. SQL mode can be used to write raw SQL queries and GUI mode can be used to query your PostgreSQL database without writing queries.\nSQL mode\nSelect SQL mode from the dropdown and enter the query in the editor. Click on the `run` button to run the query.\nNOTE: Query should be saved before running.\n\nGUI mode\nSelect GUI mode from the dropdown and then choose the operation Bulk update using primary key. Enter the Table name and Primary key column name. Now, in the editor enter the records in the form of an array of objects. \nClick on the `run` button to run the query. NOTE: Query should be saved before running.\n\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "GraphQL",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/graphql.md",
    "content": "\nid: graphql\ntitle: GraphQL\n\nGraphQL\nToolJet can connect to GraphQL endpoints to execute queries and mutations.\nConnection\nTo add a new GraphQL datasource, click the `+` button on  data sources panel at the bottom-left corner of the app builder and then select GraphQL from the modal that pops up.\nToolJet requires the following to connect to a GraphQL datasource:\n\nURL of the GraphQL endpoint\n\nThe following optional parameters are also supported:\n| Type         | Description |\n   | -----------  | ----------- |\n   | URL params   | Additional query string parameters|\n   | headers      | Any headers the GraphQL source requires|\n\n\n![ToolJet - Data source - GraphQl](/img/datasource-reference/graphql/graphql-ds.png)\n\n\nClick on the Save button to save the data source.\nQuerying GraphQL\nClick on `+` button of the query manager at the bottom panel of the editor and select the GraphQL endpoint added in the previous step as the  data source.\n\nClick on the 'run' button to run the query. NOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Elasticsearch",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/elasticsearch.md",
    "content": "\nid: elasticsearch\ntitle: Elasticsearch\n\nElasticsearch\nToolJet can connect to your Elasticsearch cluster to read and write data.\nConnection\nPlease make sure the host/IP of the Elasticsearch cluster is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nTo add a new Elasticsearch database, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select Elasticsearch from the modal that pops up.\nToolJet requires the following to connect to your Elasticsearch cluster: \n- Host\n- Port\n- Username\n- Password\n\n\n\nElastic search datasource is also providing an option for connecting services with ssl certificates. \n- You can either use CA / Client certificates option. \n\nQuerying Elasticsearch\nClick on `+` button of the query manager at the bottom panel of the editor and select the Elasticsearch added in the previous step as the data source. \nSelect the operation that you want to perform on your Elasticsearch cluster and click `Create` to save the query. \n\n\n\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\nSearch\nThis operation allows you to execute a search query and get back search hits that match the query. Read the Elasticsearch's `Search` guide here.\n\nIndex a document\nThis operation allows you to add a JSON document to the specified data stream or index. Read the Elasticsearch's `Index` guide here.\n\nGet a document\nThis operation allows you to retrieve the specified JSON document from the index. Read the Elasticsearch's `Get` guide here.\n\nUpdate a document\nThis operation allows to update a document using the specified script. Read the Elasticsearch's `Update` guide here.",
    "tag": "tooljet"
  },
  {
    "title": "Baserow",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/baserow.md",
    "content": "\nid: baserow\ntitle: Baserow\n\nBaserow\nConnection\nToolJet can connect to your Baserow account to read and write data. \nSelect the hosted version of Baserow or the self-host option.\nFor self-hosted option, base URL is required to connect.\nBaserow API token is required to create an Baserow data source on ToolJet. You can follow the steps to create API token from this link.\n\n:::tip\nThis guide assumes that you have already gone through Adding a data source tutorial.\n:::\nSupported queries\n\nList fields\nList rows\nGet row\nCreate row\nUpdate row\nMove row\nDelete row\n\nList fields\nThis query lists all the fields in a table.\nRequired parameters:\n\nTable ID\n\n\nExample response from Baserow:\n`json\n[\n  {\n    \"id\": 331156,\n    \"table_id\": 57209,\n    \"name\": \"Name\",\n    \"order\": 0,\n    \"type\": \"text\",\n    \"primary\": true,\n    \"text_default\": \"\"\n  },\n  {\n    \"id\": 331157,\n    \"table_id\": 57209,\n    \"name\": \"Last name\",\n    \"order\": 1,\n    \"type\": \"text\",\n    \"primary\": false,\n    \"text_default\": \"\"\n  },\n  {\n    \"id\": 331158,\n    \"table_id\": 57209,\n    \"name\": \"Notes\",\n    \"order\": 2,\n    \"type\": \"long_text\",\n    \"primary\": false\n  },\n  {\n    \"id\": 331159,\n    \"table_id\": 57209,\n    \"name\": \"Active\",\n    \"order\": 3,\n    \"type\": \"boolean\",\n    \"primary\": false\n  }\n]`\nList rows\nThis query lists all the rows in a table.\nRequired parameters:\n\nTable ID\n\n\nExample response from Baserow:\n`json\n{\n  \"count\": 3,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"id\": 2,\n      \"order\": \"0.99999999999999999991\",\n      \"Name\": \"Bill\",\n      \"Last name\": \"Gates\",\n      \"Notes\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce dignissim, urna eget rutrum sollicitudin, sapien diam interdum nisi, quis malesuada nibh eros a est.\",\n      \"Active\": false\n    },\n    {\n      \"id\": 3,\n      \"order\": \"0.99999999999999999992\",\n      \"Name\": \"Mark\",\n      \"Last name\": \"Zuckerburg\",\n      \"Notes\": null,\n      \"Active\": true\n    },\n    {\n      \"id\": 1,\n      \"order\": \"0.99999999999999999997\",\n      \"Name\": \"Elon\",\n      \"Last name\": \"Musk\",\n      \"Notes\": null,\n      \"Active\": true\n    }\n  ]\n}`\nGet row\nRequired parameters:\n\nTable ID\nRow ID\n\n\nExample response from Baserow:\n`json\n{\n  \"id\": 1,\n  \"order\": \"0.99999999999999999997\",\n  \"Name\": \"Elon\",\n  \"Last name\": \"Musk\",\n  \"Notes\": null,\n  \"Active\": true\n}`\nCreate row\nRequired parameters:\n\nTable ID\nRecords\n\n\nExample Records:\n`json\n{\n  \"Name\": \"Test\",\n  \"Last name\": \"Test Name\",\n  \"Notes\": \"Test Note\",\n  \"Active\": true\n}`\nExample response from Baserow:\n`json\n{\n  \"id\": 19,\n  \"order\": \"0.99999999999999999996\",\n  \"Name\": \"Test\",\n  \"Last name\": \"Test Name\",\n  \"Notes\": \"Test Note\",\n  \"Active\": true\n}`\nUpdate row\nRequired parameters:\n\nTable ID\nRow ID\nRecords\n\n\nExample Records:\n`json\n{\n  \"Name\": \"Test\",\n  \"Last name\": \"Test Name\",\n  \"Notes\": \"Test Note\",\n  \"Active\": true\n}`\nExample response from Baserow:\n`json\n{\n  \"id\": 19,\n  \"order\": \"0.99999999999999999996\",\n  \"Name\": \"Test\",\n  \"Last name\": \"Test Name\",\n  \"Notes\": \"Test Note\",\n  \"Active\": true\n}`\nMove row\nRequired parameters:\n\nTable ID\nRow ID\n\nOptional parameters:\n\nBefore ID (The row will be moved before the entered ID. If not provided, then the row will be moved to the end )\n\n\nExample response from Baserow:\n`json\n{\n  \"id\": 3,\n  \"order\": \"2.00000000000000000000\",\n  \"Name\": \"Mark\",\n  \"Last name\": \"Zuckerburg\",\n  \"Notes\": null,\n  \"Active\": true\n}`\nDelete row\nRequired parameters:\n\nTable ID\nRow ID\n\n",
    "tag": "tooljet"
  },
  {
    "title": "CouchDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/couchdb.md",
    "content": "\nid: couchdb\ntitle: CouchDB\n\nCouchDB\nToolJet can connect to CouchDB databases to read and write data. CocuhDB uses basic auth for authentication , username and password for the database is required to create an CouchDB data source on ToolJet. For more info visit CouchDB docs.\n\nSupported queries:\n\nListing records\nRetrieving a record\nCreating a record\nUpdating a record\nDeleting a record\nFind\nRetrieving a view\n\n:::info\nNOTE: Record ID is same as document ID(\"_id\") .\n:::\nListing records\nThis query lists all the records in a database.\nOptional parameters:\n\nInclude docs\nDescending order\nLimit\nSkip\n\n:::info\ndescending (boolean) \u2013 Return the documents in descending order by key. Default is false.\nlimit (number) \u2013 Limit the number of the returned documents to the specified number.\nskip (number) \u2013 Skip this number of records before starting to return the results. Default is 0.\ninclude_docs (boolean) \u2013 include_docs key is set to false by default , if true it returns the document data along with the default fields.\n:::\n\nExample response from CouchDb: \n`json\n{\n    \"total_rows\": 3,\n    \"offset\": 0,\n    \"rows\": [\n        {\n            \"id\": \"23212104e60a71edb42ebc509f000dc2\",\n            \"key\": \"23212104e60a71edb42ebc509f000dc2\",\n            \"value\": {\n                \"rev\": \"1-0cc7f48876f15883394e5c139c628123\"\n            }\n        },\n        {\n            \"id\": \"23212104e60a71edb42ebc509f00216e\",\n            \"key\": \"23212104e60a71edb42ebc509f00216e\",\n            \"value\": {\n                \"rev\": \"1-b3c45696b10cb08221a335ff7cbd8b7a\"\n            }\n        },\n        {\n            \"id\": \"23212104e60a71edb42ebc509f00282a\",\n            \"key\": \"23212104e60a71edb42ebc509f00282a\",\n            \"value\": {\n                \"rev\": \"1-da5732beb913ecbded309321cac892d2\"\n            }\n        },\n    ]\n}`\nRetrieving a record\nRequired parameters:\n\nRecord ID\n\n\nExample response from CouchDb: \n`json\n{\n    \"_id\": \"e33dc4e209689cb0400d095fc401a1e0\",\n    \"_rev\": \"1-a62af8e14451af88c150e7e718b7a0e8\",\n    \"0\": {\n        \"name\": \"test data\"\n    }\n}`\nThe returned JSON is the JSON of the document, including the document ID and revision number:\nCreating a record\n\nExample Records:\n`json\n  [{\"name\":\"tooljet\"}]`\nClick on the `run` button to run the query.\n:::info\nNOTE: Query must be saved before running.\n:::\nExample response from CouchDb:\n```json\n{\n    \"ok\": true,\n    \"id\": \"23212104e60a71edb42ebc509f0049a2\",\n    \"rev\": \"1-b0a625abc4e21ee554737920156e911f\"\n}\n```\nUpdating a record\nYou can get the revision id  value, by sending a GET request to get the document details.\nYou get the document as JSON in the response. For each update to the document, the revision field \"_rev\" gets changed.\nRequired parameters:\n\nRevision ID\nRecord ID\n\n\nExample body:\n`json\n  [{\"name\":\"tooljet\"}]`\nClick on the `run` button to run the query.\n:::info\nNOTE: Query must be saved before running.\n:::\nExample response from CouchDb:\n`json\n{\n    \"ok\": true,\n    \"id\": \"23212104e60a71edb42ebc509f0049a2\",\n    \"rev\": \"2-b0a625abc4e21ee554737920156e911f\"\n}`\nDeleting a record\nRequired parameters:\n\nRevision ID\nRecord ID\n\n\nClick on the `run` button to run the query.\nExample response from CouchDb:\n`json\n{\n    \"ok\": true,\n    \"id\": \"rev_id=2-3d01e0e87139c57e9bd083e48ecde13d&record_id=e33dc4e209689cb0400d095fc401a1e0\",\n    \"rev\": \"1-2b99ef28c03e68ea70bb668ee55ffb7b\"\n}`\nFind\nFind documents using a declarative JSON querying syntax.\nRequired parameters:\n\nSelector\n\n:::info\nNOTE:\nselector syntax: https://pouchdb.com/guides/mango-queries.html\n:::\n\nExample body:\n`json\n{\n    \"selector\": {\n        \"year\":  {\"$gte\": 2015}\n    },\n    \"fields\": [\"year\"]\n}`\nClick on the `run` button to run the query.\n:::info\nNOTE:\nselector (json) \u2013 JSON object describing criteria used to select documents. \nMore information : https://docs.couchdb.org/en/stable/api/database/find.html\n:::\nExample response from CouchDb:\n\nRetrieving a view\nViews are the primary tool used for querying and reporting on CouchDB documents.\nRequired parameters:\n\nView url\n\nReference for view :https://docs.couchdb.org/en/3.2.0/ddocs/views/intro.html#what-is-a-view\n\nOptional parameters:\n\nStart key\nEnd key\nLimit\nSkip\n\nClick on the `run` button to run the query.\n:::info\nstartkey (json) \u2013 Return records starting with the specified key.\nendkey (json) \u2013 Stop returning records when the specified key is reached.\nlimit (number) \u2013 Limit the number of the returned documents to the specified number.\nskip (number) \u2013 Skip this number of records before starting to return the results. Default is 0.\n:::\nExample response from CouchDb:\n```json\n{\n    \"total_rows\": 4,\n    \"offset\": 0,\n    \"rows\": [\n        {\n            \"id\": \"23212104e60a71edb42ebc509f000dc2\",\n            \"key\": \"23212104e60a71edb42ebc509f000dc2\",\n            \"value\": {\n                \"rev\": \"1-0cc7f48876f15883394e5c139c628123\"\n            }\n        },\n        {\n            \"id\": \"23212104e60a71edb42ebc509f00216e\",\n            \"key\": \"23212104e60a71edb42ebc509f00216e\",\n            \"value\": {\n                \"rev\": \"1-b3c45696b10cb08221a335ff7cbd8b7a\"\n            }\n        },\n        {\n            \"id\": \"23212104e60a71edb42ebc509f00282a\",\n            \"key\": \"23212104e60a71edb42ebc509f00282a\",\n            \"value\": {\n                \"rev\": \"1-da5732beb913ecbded309321cac892d2\"\n            }\n        },\n        {\n            \"id\": \"23212104e60a71edb42ebc509f002cbd\",\n            \"key\": \"23212104e60a71edb42ebc509f002cbd\",\n            \"value\": {\n                \"rev\": \"1-ca5bb3c0767eb42ea6c33eee3d395b59\"\n            }\n\n\n```    }\n]\n```\n\n\n}",
    "tag": "tooljet"
  },
  {
    "title": "Google Sheets",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/google.sheets.md",
    "content": "\nid: google.sheets\ntitle: Google Sheets\n\nGoogle Sheets\nToolJet can connect to Google Sheet using OAuth 2.0, which helps us to limit an application's access to a user's account.\nHow to integrate Google Sheets\n\nSelf-Hosted Configuration\nIf you are self-hosting the application, you will need to perform some additional steps.\n\nFollow the Google OAuth 2.0 setup steps outlined here\nSet the following environment variables with the values from the previous step:\n`GOOGLE_CLIENT_ID`\n`GOOGLE_CLIENT_SECRET`\n`TOOLJET_HOST`\n\n\nEnable the Google Sheets API in the GCP console\n\nAuthorization Scopes\nYou can create a Google Sheets data source with one of either of the two permission scopes :\n  1. Read Only\n  2. Read and Write\n\nOperations\nUsing Google sheets data source you can perform several operations from your applications like:\n\nRead data from a sheet\nAppend data to a sheet\nUpdate single row of a sheet\nDelete row from a sheet\nGet spreadsheet info\n\nRead data from a sheet\nThis operation returns the table data from the spreadsheet in the form of json object. \n| Fields      | description |\n| ----------- | ----------- |\n| Spreadsheet ID | It is mandatory to enter the spreadsheet-id. The spreadsheet-id can be found in the URL of the spreadsheet. Example URL: https://docs.google.com/spreadsheets/d/1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM/edit#gid=0 - in this URL, the `1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM` is the spreadsheet-id. |\n| Range | This is optional. You can specify the range of cells in this field. If left empty, it will select the range `A1:Z500`. |\n| Sheet | This is optional. You can specify `sheet name` if it has more than 1 sheets, else it will automatically choose the first sheet. |\n\nAppend data to a sheet\nYou can add more rows to the table using the append operation.\n| Fields      | description |\n| ----------- | ----------- |\n| Spreadsheet ID | It is mandatory to enter the spreadsheet-id. The spreadsheet-id can be found in the URL of the spreadsheet. Example URL: https://docs.google.com/spreadsheets/d/1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM/edit#gid=0 - in this URL, the `1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM` is the spreadsheet-id. |\n| Sheet | This is optional. You can specify `sheet name` if it has more than 1 sheets, else it will automatically choose the first sheet. |\n| Rows  | Enter the row data in the json array form. Each object in an array will represent a single row. Example: `[ {\"name\":\"John\", \"email\":\"John@tooljet.com\"},{...},{...} ]` In each object, the `key` represents the column name and the `value` represents the cell data.   |\n\nUpdate single row of a sheet\nYou can update the existing data in sheet using this operation.\n| Fields      | description |\n| ----------- | ----------- |\n| Spreadsheet ID | It is mandatory to enter the spreadsheet-id. The spreadsheet-id can be found in the URL of the spreadsheet. Example URL: https://docs.google.com/spreadsheets/d/1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM/edit#gid=0 - in this URL, the `1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM` is the spreadsheet-id. |\n| Where | Enter the column name such as `id` for choosing a row. |\n| Operator | Choose the `===` operator to check the equality. |\n| Value | Enter the any `id` number/name that you want to update. |\n| Rows  | Enter the row data. Example: `{{({id: components.textinput4.value, company: components.textinput1.value, position: components.textinput2.value, url: components.textinput3.value, 'date-applied': components.datepicker1.value, status: components.dropdown1.value})}}`  |\n\nDelete row from a sheet\nUse this operation delete a specific row from the sheet.\n| Fields      | description |\n| ----------- | ----------- |\n| Spreadsheet ID | It is mandatory to enter the spreadsheet-id. The spreadsheet-id can be found in the URL of the spreadsheet. Example URL: https://docs.google.com/spreadsheets/d/1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM/edit#gid=0 - in this URL, the `1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM` is the spreadsheet-id. |\n| GID | You'll find the GID in the end of the URL of spreadsheet. In the example mentioned above, the GID is 0 |\n| Delete row number |  Just enter the row number that you want to delete.  |\n\nGet spreadsheet info\nThis operation can be used to get some basic information of the spreadsheet such as the number of sheets, theme, time-zone, format, and url etc.\nHere is the `Preview` of the query that used the get spreadsheet info operation.",
    "tag": "tooljet"
  },
  {
    "title": "BigQuery",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/bigquery.md",
    "content": "\nid: bigquery\ntitle: BigQuery\n\nBigQuery\nToolJet can connect to BigQuery databases to run BigQuery queries.\nConnection\nPlease refer this link to enable BigQuery API in Google Cloud Console. \nCreate Service Account and key, then get your configs downloaded as JSON\nTo add a new BigQuery, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select BigQuery from the modal that pops up.\nToolJet requires the config json downloaded from your account to connect to BigQuery. Paste the json into the `Private key` field.\nThe json looks like:\n`json\n {\n  \"type\": \"service_account\",\n  \"project_id\": \"tooljet-279812\",\n  \"private_key_id\": \"ea6e234sdfsdf3242b91525626edeef74a14e58761\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADAAhdh67sidfnIUWWWBAQC8V+z0vaM/rFiA\\nrq8fzVjSpEu7Cietjn82SVtguAlAUP9YpRepzi4rDmRgVQiXe4KES7VGQhmg3hUj\\nbBASbdI5WRCvAC2ujzrxv3rbfjYRWfm+OqzpUBWaEKbwSGc6rNkhmirvhjiFdl5k\\nn7aK7w3bmQfBlnNM6+WiQdT09g2qx3lmRDoUUpuCngkhbWOs3gN/U6wlm0cHKtbF\\nWUOwKdyeZrm3UORUDkFvq6rVSF8vob+FQxf24FuvpBmXi2o2dqqglle8rlm8Lz83\\ns4kAVbqVjtGrVXm6QUcnLISqJCJUnFkSuFpo60GCcgAVrwyAq/6aQH3IM78QKzFL\\n8q5b65rXAgMBAAECggEAClIF8tRk0VuG3NZH5lg3q8fDOyaLBFdVKcHKtzCec3Ez\\no6C4RcxP6Hk5IbPrtgggjVIi/Z7exKRv2mAwFvuSuJJSQSSjXC7Fm87AQPdYFWYt\\noFYIeLGPlFMO++H3Nh+Xt3I5NBLR58UmH48iBdgR3pygXi1C5eBvQ2rdNVTL/uxw\\n3iULu8WcVBw8glzkdLNLDq94uqbW7/qyji7QWNkU+804sA0LEj4PWmO7B9k1LCLK\\nFV0Ppv+SJYMS2MhWmXPHnYVfeNaKJKPQpHsS2ep/hyjEO/3Fvm3o3cp6SrEkNGIH\\nGKeozlfV7MQj7tMHLqWddDBXtFwYVEmN0UJVafvGsQKBgQDsEVzb7DG/xlMpuDQv\\nqpLGWXR5DdAhzxVJzeh11Ongb+XxBOVSyTDKJLvOX4rI7tDqqN7b2pabUA3ZjvXv\\nhMPXr7AjL6yoJEzVCyo1+pi26OL99OcO+7gUDa0axHFt6LZuPw00r+2Nl0FqrXNR\\n+qUiPuZpp2MuKjMwLCwhr5YuqwKBgQDMPv6TPMl+oocoQ4uc84uY58Ywb7XZjmhY\\n8jXdA38I454EbQGeLja+2knDpDkF6g14cTzVJe/Ec4A6QmeIieTFSJKBV4VCZ3QN\\npLR4PrET7o9GL3mtwnNqcHPw2dLNHtn1OgsOUfJMWPIrFK2abVNAmYIBtOGA4eyH\\nrOl+NcAUhQKBgC4EKGy6OuxeFYHxZULRZjEB6QFb3vFoM4cieyjU6w4T4ee8g5NC\\nop8U0AMnfp8yZkkHyAFlN6xoy3pYMrqQz7gwiA4j0e0ovk1dEspY4gHtnanRXmT+\\nTmCiVdb86ft5vG37HnDhxlWuYVMRIoSdbikhx7papauvEDFYuvWKC6VnAoGBAJQr\\nvxOhrauozNRw6//YzxUGT8kjwZEqtpiQXnMP7kDMn/4l9l6CuESMp6a+pH+d5FfU\\nDoWzF9Y01HlvYxyyrLxSgbZDf/FEi/S54BK7qEsFbftExclAn+o/2lyIKV2VXBmD\\nGjIxUM4CWOzX+3lkhlj/BEmop0+Qlr92uY1OASLhAoGAfTb/Le0Nf5bGLjK3hI9D\\no/oDI5Ryj5rTMxmG/wRjE+1Jm6BjFzEyH2CvnFonccyHQ+wGn61AgbRFLn+Tg5fz\\nZXpzD2Xq3Y/AXtrdaayK0wnpMvVE1bZt+ikeVAWX+gR79igTqSXRgCuyp+edsgcE\\nZ+2Eser4Z5BpqfFjqFW8MhY=\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"tooljettest@tooljet-279812.iam.gserviceaccount.com\",\n  \"client_id\": \"106795637455432158803\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/tooljettest%40tooljet-279812.iam.gserviceaccount.com\"\n}`\n\n\n\nClick on Test connection button to verify if the credentials are correct and that the API is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying BigQuery\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. Select the operation that you want to perform and click Save to create the query.\n\nClick on the run button to run the query. NOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\n\n\nList Datasets\n\n\nList Tables\n\n\nQuery\n\n\nInsert Record \n\n\nDelete Record \n\n\nUpdate Record\n\n\nCreate View\n\n\nCreate Table\n\n\nDelete Table\n\n\nList Datasets\nReturns list of datasets.\nOptional parameters:\n\nOptions: This can be used to filter the list.\n\n\nList Tables\nReturn list of tables within a dataset\nRequired parameters:\n\nDataset: Enter the dataset name.\n\n\nQuery\nReturn data based on the `Query`. `Query options` (Reference), and `Query result options` (Reference).\n\nInsert Record\n\nTo insert a record.\n\n\nDelete Record\n\nTo delete a record.\n\n\n:::info\nNOTE: Be careful when deleting records in a table. If you omit the WHERE clause, all records in the table will be deleted!\n:::\nUpdate Record\n\nTo update a record.\n\n\n:::info\nNOTE: Be careful when deleting records in a table. If you omit the WHERE clause, all records in the table will be updated!\n:::\nCreate View\n\nTo create a view.\n\n\nCreate Table\n\nTo create a table.\n\n:::info\nNOTE: visit -https://github.com/googleapis/nodejs-bigquery/blob/main/samples/createTable.js for more info on schema.\n:::\nDelete Table",
    "tag": "tooljet"
  },
  {
    "title": "Run JavaScript code",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/custom-js.md",
    "content": "\nid: run-js\ntitle: Run JavaScript code\n\nRun JavaScript code\nYou can write custom JavaScript code to interact with components and queries. To do that, you just need to create a new query and select Run JavaScript Code from the data sources dropdown.\n\n\n\nExample: Displaying random number\n\nLet's drag a button and a text widget inside a container widget.\nClick on the `+` on the query panel to create a query and select Run JavaScript code from the available datasources\nWrite the code in JavaScript editor and save the query:\n`jsx\nconst a = Math.floor(Math.random() * (10 - 1)) + 1;\nreturn a;`\n:::tip\nThe `return` statement is used to end the code and the value specified to the `return` statement will be stored in the `data` property of the query. \nex: `{{queries.runjs1.data}}`\n\nYou cannot use `console.log` in Run JavaScript code\n:::\n\n\nLet's edit the properties of widgets:\n\nAdd an event handler to the button - Select On Click event, Run Query action, and select the `runjs1` query that we created. This will run the JavaScript code every time the button is clicked.\nEdit the property of text widget - In the text field enter Random number: `{{queries.runjs1.data}}`. It will display the output as Random number: result from JS code\n\n\n\n\n\n\nYou can also write custom JavaScript code to get the data from External APIs and manipulate the response for graphical representation. Here's the tutorial on how we used custom JavaScript code to build an app using GitHub API.\nLibraries\nToolJet allows you to internally utilize these libraries:\n| Name        | Documentation |\n| ----------- | ----------- |\n| Moment      | https://momentjs.com/docs/ |\n| Lodash      | https://lodash.com/docs/ |\n| Axios       | https://axios-http.com/docs/intro |\n:::info\nIssues with writing custom JavaScript code? Ask in our Slack community.",
    "tag": "tooljet"
  },
  {
    "title": "WooCommerce",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/woocommerce.md",
    "content": "\nid: woocommerce\ntitle: WooCommerce\n\nWooCommerce\nToolJet can connect to WooCommerce databases to read and write data.\n\nConnection\nGetting Started\n\nConnection\nAuth\nYou may use [HTTP Basic Auth] by providing the REST API Consumer Key as the username and the REST API Consumer Secret as the password.\n- Host\n- Consumer key\n- Consumer secret\n\n:::info\nNOTE: For generating keys visit admin dashboard of woocommerce , more info: https://woocommerce.github.io/woocommerce-rest-api-docs/?javascript#authentication\n:::\nQuerying Woocommerce\nOperations\nCustomer\n\nlist customer\nupdate customer\ndelete customer\nbatch update customer\ncreate customer\nretrieve customer\n\nPRODUCT\n\nlist product\nupdate product\ndelete product\nbatch update product\ncreate product\nretrieve product\n\nORDER\n\nlist order\nupdate order\ndelete order\nbatch update order\ncreate order\nretrieve order\n\nCoupon\n\nlist coupon\ncreate coupon\n\n:::info\nNOTE: For more info visit https://woocommerce.github.io/woocommerce-rest-api-docs/?javascript.",
    "tag": "tooljet"
  },
  {
    "title": "RethinkDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/rethinkdb.md",
    "content": "\nid: rethinkdb\ntitle: RethinkDB\n\nRethinkDB\nToolJet can connect to RethinkDB databases to read and write data. For more info visit this doc.\n\nConnection\nToolJet connects to InfluxDB using :\n\nDatabase\nHost\nPort\nUsername \nPassword \n\nSupported queries:\n\n\nDelete database\n\n\nDelete Table\n\n\nCreate database\n\n\nCreate Table\n\n\nList table\n\n\nList database\n\n\nGet all documents\n\n\nInsert table data\n\n\nUpdate all table data\n\n\nUpdate by id\n\n\nDelete table data by id\n\n\nDelete all table data\n\n\nGet document from primary key\n\n\n:::info\nNOTE: Name field in all operation is database name if not given will take the default database used for connection.",
    "tag": "tooljet"
  },
  {
    "title": "OpenAPI",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/openapi.md",
    "content": "\nid: openapi\ntitle: OpenAPI\n\nOpenAPI\nToolJet has a data source for generating REST API operations from OpenAPI Specs.\nConnection\n\n\nConnections are generated from OpenAPI specifications. Currently supports Basic Auth, API Key, Bearer Token, OAuth 2.0\n\n\nAlso supports specifications with multiple authentications\n\n\nRead more \nQuerying OpenAPI\n\nOperations will be generated from specifications and each one will be different from other  \n\nCommon fields\n\nHost (Base URL)\n\nSome specs can have one or more base URLs/servers and specific operations may have separate Base URLs. So you can select the URL from the host select",
    "tag": "tooljet"
  },
  {
    "title": "MongoDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/mongodb.md",
    "content": "\nid: mongodb\ntitle: MongoDB\n\nMongoDB\nToolJet can connect to MongoDB to read and write data.\nConnection\nPlease make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nTo add a new MongoDB, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select MongoDB from the modal that pops up.\nToolJet requires the following to connect to your MongoDB.\n\nHost\nPort\nUsername\nPassword\n\nIt is recommended to create a new MongoDB user so that you can control the access levels of ToolJet.\n\nClick on 'Test connection' button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on 'Save' button to save the data source.\nQuerying MongoDB\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. Select the operation that you want to perform and click 'Save' to save the query.\n\nClick on the 'run' button to run the query. NOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\n\nList Collections\nFind One\nFind Many\nTotal Count\nCount\nDistinct\nInsert One\nInsert Many\nUpdate One\nUpdate Many\nReplace One\nFind One and Update\nFind One and Replace\nFind One and Delete\nAggregate\nDelete One\nDelete Many\nBulk Operations\n\nList Collections\nReturns list of collections\nFine One\nReturn a document which satisfy the given filter and options. Reference\nFine Many\nReturn list of documents which satisfy the given filter and options. Reference\nTotal Count\nReturns an estimation of the number of documents in the collection based on collection metadata. Reference\nCount\nReturns the number of documents based on the filter. Reference\nDistinct\nRetrieve a list of distinct values for a field based on the filter. Reference\nInsert One\nInsert a document. Reference\nInsert Many\nInsert list of documents. Reference\nUpdate One\nUpdate a document based on the filter. Reference\nUpdate Many\nUpdate many documents based on the filter. Reference\nReplace One\nReplace a document based on filter. Reference\nFind One and Update\nIf your application requires the document after updating, use this instead of `Update One`. Reference\nFind One and Replace\nIf your application requires the document after updating, use this instead of `Replace One`. Reference\nFind One and Delete\nIf your application requires the document after deleting, use this instead of `Delete One`. Reference\nAggregate\nAggregation operations are expressions you can use to produce reduced and summarized results. Reference\nDelete One\nDelete a record based on the filter. Reference\nDelete Many\nDelete many records based on the filter. Reference\nBulk Operations\nPerform bulk operations. Reference\nDynamic Quries\n```javascript\n{ amount: { $lt: '{{ components.textinput1.value }}' }}\n// Dates \n// supported: Extended JSON syntax\n{ createdAt: { $date: '{{ new Date('01/10/2020') }}'} }\n// not supported: MongoDB classic syntax\n{ createdAt: new Date('01/10/2020') }\n```",
    "tag": "tooljet"
  },
  {
    "title": "n8n",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/n8n.md",
    "content": "\nid: n8n\ntitle: n8n\n\nn8n\nToolJet can trigger n8n workflows using webhook URLs. Please refer this to know more about n8n.\nConnection\nGo to the data source manager on the left sidebar and click on `+` button to add new data source. Select n8n from the list of available data sources in the modal that pops-up.\nn8n webhooks can be called with or without an Authentication. You can keep the `Authentication type` as `none` if your webhook didn't have one or if it has one then you can choose the one from the dropdown and provide credentials:\nAuthentication Types\n\nBasic Auth: To connect your n8n webhooks using basic auth you'll need to provide the following credentials:\nUsername\nPassword\n\n\n\n\n\n\n\nHeader Auth: To connect your n8n webhooks using header auth the following fields are required:\nName / Key\nValue\n\n\n\n\n\n\n:::tip\nWebhook credentials and instance credentials are different. Please use the credentials that you use with the webhook trigger. Know more: Webhook Authentication.\n:::\nTrigger Workflow\nClick on `+` button of the query manager at the bottom panel of the editor and the select n8n as the datasource.\nYou can trigger a workflow with `GET/POST` URL. Choose the request type from the `Methods` dropdown and then provide the required fields:\n  - URL parameters (Support for GET & POST) `Optional`\n  - Body (Only for POST URL) `Required`\n",
    "tag": "tooljet"
  },
  {
    "title": "Airtable",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/airtable.md",
    "content": "\nid: airtable\ntitle: Airtable\n\nAirtable\nToolJet can connect to your Airtable account to read and write data. Airtable API key is required to create an Airtable data source on ToolJet. You can generate API key by visiting Airtable account page. \n\n:::info\nAirtable API has a rate limit, and at the time of writing this documentation, the limit is five(5) requests per second per base. You can read more about rate limits here Airtable API.\n:::\n:::tip\nThis guide assumes that you have already gone through Adding a data source tutorial.\n:::\nSupported queries\n\nListing records\nRetrieving a record\nCreating a record\nUpdating a record\nDeleting a record\n\nListing records\nThis query lists all the records in a table. The results are paginated and each page can have up to 100 records. \nRequired parameters:\n\nBase ID: To find the Base ID, first visit airtable.com/api. Select from the list of bases the base whose ID you'd like to find out. Example Base ID: `appDT3UCPffPiSmFd`\nTable name: Enter the table name whose data you want to fetch.\n\nOptional parameters:\n\nPage size: The number of records returned in each request. Must be less than or equal to 100. Default is 100.\noffset: If there are more records, the response will contain an offset. To fetch the next page of records, include offset in the next request's parameters.\n\n\nExample response from Airtable: \n`json\n{\n    \"records\": [\n        {\n            \"id\": \"recu9xMnUdr2n2cw8\",\n            \"fields\": {\n                \"Notes\": \"sdfdsf\",\n                \"Name\": \"dsfdsf\"\n            },\n            \"createdTime\": \"2021-05-12T14:30:33.000Z\"\n        },\n        {\n            \"id\": \"recyIdR7bVdQvmKXa\",\n            \"fields\": {\n                \"Notes\": \"sdfdsf\",\n                \"Name\": \"dfds\"\n            },\n            \"createdTime\": \"2021-05-12T14:30:33.000Z\"\n        },\n        {\n            \"id\": \"recAOzdIHaRpvRaGE\",\n            \"fields\": {\n                \"Notes\": \"sdfsdfsd\",\n                \"Name\": \"sdfdsf\"\n            },\n            \"createdTime\": \"2021-05-12T14:30:33.000Z\"\n        }\n    ],\n    \"offset\": \"recAOzdIHaRpvRaGE\"\n}`\nRetrieving a record\nRequired parameters:\n\nBase ID\nTable name \nRecord ID\n\n\nExample response from Airtable: \n`json\n{\n    \"id\": \"recu9xMnUdr2n2cw8\",\n    \"fields\": {\n        \"Notes\": \"sdfdsf\",\n        \"Name\": \"dsfdsf\"\n    },\n    \"createdTime\": \"2021-05-12T14:30:33.000Z\"\n}`\nCreating a record\nRequired parameters:\n\nBase ID\nTable name\nRecords\n\n\nExample Records:\n```json\n[\n    {\n        \"fields\": {\n            \"Notes\": \"sdfdsf\",\n            \"Name\": \"dsfdsf\"\n        }\n    },\n    {\n        \"fields\": {\n            \"Notes\": \"note1\",\n            \"Name\": \"dsfdsf\"\n        }\n    }\n]\n```\nClick on the `run` button to run the query.\n:::info\nNOTE: Query must be saved before running.\n:::\nExample response from Airtable:\n`json\n{\n    \"records\": [\n        {\n            \"id\": \"rec5RuZ1COoZGtGDY\",\n            \"fields\": {\n                \"Notes\": \"sdfdsf\",\n                \"Name\": \"dsfdsf\"\n            },\n            \"createdTime\": \"2022-02-07T20:25:27.000Z\"\n        },\n        {\n            \"id\": \"recaYbFPonNNu6Cwj\",\n            \"fields\": {\n                \"Notes\": \"note1\",\n                \"Name\": \"dsfdsf\"\n            },\n            \"createdTime\": \"2022-02-07T20:25:27.000Z\"\n        }\n    ]\n}`\nUpdating a record\nRequired parameters:\n\nBase ID\nTable name\nRecord ID\n\n\nExample body:\n\n\n\nClick on the `run` button to run the query.\n:::info\nNOTE: Query must be saved before running.\n:::\nExample response from Airtable:\n`json\n{\n    \"id\": \"recu9xMnUdr2n2cw8\",\n    \"fields\": {\n        \"Notes\": \"Example Notes\",\n        \"Name\": \"change\"\n    },\n    \"createdTime\": \"2021-08-08T17:27:17.000Z\"\n}`\nDeleting a record\nRequired parameters:\n\nBase ID\nTable name\nRecord ID\n\n\nClick on the `run` button to run the query.\n:::info\nNOTE: Query must be saved before running.\n:::\nExample response from Airtable:\n```json\n{\n    deleted: true\n    id: \"recIKsyZgqI4zoqS7\"\n}",
    "tag": "tooljet"
  },
  {
    "title": "Cosmosdb",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/cosmosdb.md",
    "content": "\nid: cosmosdb\ntitle: CosmosDB\n\nCosmosdb\nToolJet can connect to CosmosDB databases to read and write data. \nConnection\nTo add a new Azure Cosmos DB, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select CosmosDB from the modal that pops up.\nToolJet requires the following to connect to your Cosmos DB.\n\nCosmos DB Account End point\nCosmos DB Account Key\n\n:::info\nAzure Cosmos DB End point is the URL of the Cosmos DB service.\nAzure Cosmos DB Key is the key that is used to access the Cosmos DB service.\nYou can find the endpoint and key in the Azure Portal.\n:::\n\n\n![ToolJet - Data source - CosmosDB](/img/datasource-reference/cosmosdb/cosmosdb-connect.png)\n\n\nSupported queries:\n\nListing databases\nListing containers\nInserting item(s)\nRetrieving an item\nDeleting an item\nQuerying documents\n\nListing databases\nThis query lists all the databases in a Cosmos DB.\nListing containers\nThis query lists all the containers of a database in a Cosmos DB.\n| Fields      | description |\n| ----------- | ----------- |\n| database    | id of the database |\nInserting item(s)\nThis query inserts one or more items in a container of a database in a Cosmos DB.\n| Fields      | description |\n| ----------- | ----------- |\n| database    | id of the database |\n| container   | id of the container |\n| items       | items to be inserted. Example: `{{[{name: \"one\", val: 1}, {name:\"two\", val: 2}]}}` |\nRetrieving an item\nTo read a single item from a container of a database in a Cosmos DB, use the following query.\n| Fields      | description |\n| ----------- | ----------- |\n| database    | id of the database |\n| container   | id of the container |\n| item        | id of the item |\nDeleting an item\nTo delete an item from a container of a database in a Cosmos DB, use the following query.\n| Fields      | description |\n| ----------- | ----------- |\n| database    | id of the database |\n| container   | id of the container |\n| item        | id of the item |\nQuerying documents\nTo query documents from a container of a database in a Cosmos DB using SQL-like syntax, use the following query.\n| Fields      | description |\n| ----------- | ----------- |\n| database    | id of the database |\n| container   | id of the container |",
    "tag": "tooljet"
  },
  {
    "title": "run-py.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/data-sources/run-py.md",
    "content": "\nid: run-py\ntitle: Run Python code\n\nYou can write custom Python code to interact with components and queries. To do that, you just need to create a new query and select Run Python Code from the available datasources.\n\n\n\nExample: Using Python code to trigger component specific actions\n\nLet's drag a button and a text widget onto the canvas. We will set a text on the text component and trigger button click event from the Python query.\nClick on the `+` on the query panel to create a query and select Run Python code from the available datasources\n\nLet's write the code in Python Editor and save the query:\n```python\nclass Person:\n  def init(self, name, age):\n    self.name = name\n    self.age = age\ndef myfunc(self):\n    return \"Hello my name is \" + self.name\np1 = Person(tj_globals.currentUser.firstName, 36)\ncomponents.text1.setText(p1.myfunc())\ncomponents.button1.click()\n```\n- The code above has a function`myfunc`which returns a string and we using the component specific action to set the **text component**'s value from the Python query. We are also triggering the button click using`components.button1.click()`\n\n\n:::tip\n- ToolJet's global variables can be accessed using tj_globals. ex: `tj_globals.currentUser.firstName`\n- As of now, Run Python code only supports the Python standard library only.\n:::\n\nLet's edit the properties of widgets:\nAdd an event handler to the button - Select On Click event, Show alert action, and set a success message `Triggered using RunPy`. This will show a success alert popup whenever the button click event is triggered from the Python code.\nFor the text component, we don't have to edit any property since we are changing the value directly from the Python code.\n\n\n\n\n\n\nYou can also write custom Python code to get the data from External APIs and manipulate the response for graphical representation. \n:::info\nIssues with writing custom Python code? Ask in our Slack community.",
    "tag": "tooljet"
  },
  {
    "title": "Role-Based Access Control (RBAC) Glossary",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/org-management/permissions.md",
    "content": "\nid: permissions\ntitle: Permissions\n\nPermissions allow you to create and share resources to easily ensure what level of access each User has to ToolJet Apps and other resources.\nAdmins can invite Users to their workspaces and assign them to the Groups that have Permissions to access Apps, folders, or workspace variables. \n:::info\nSee Manage Users and Groups to learn how to invite users to ToolJet.\n:::\nRole-Based Access Control (RBAC) Glossary\n\nUsers - Users can be added to more than one or more Groups. Each User is associated with an email.\nGroups - By default, there are two groups: All Users and Admin. Additionally, you can create custom groups like Support, Engineering, etc.\nAll Users - Contains all the users in your workspace. When New Users are invited they are added to this group by default. \nAdmins - Contains all Admins in your workspace. Everyone added to this group will Permission to access all the ToolJet resources.\n\n\nApps, Folder, Workspace Variables - Resources that Admins can set permissions on.\n",
    "tag": "tooljet"
  },
  {
    "title": "Color Picker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/color-picker.md",
    "content": "\nid: color-picker\ntitle: Color Picker\n\nColor Picker\nColor Picker widget is used to select the desired color from the color picker\n\n\n\nProperties\nDefault Color\nThe data needs to be an valid hex color\n\nOne can change default color either from color picker or using fx (need to provide only respective hex value)\n\nExample:\n`json\nValid color : #000000 or #000\nInvalid Color : #0000, \"black\" , rgb(0,0,0) ,`\n\n\n\nEvents\nTo add an event to a color-picker component, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on + Add handler.\n\n\n\nOn change\nOn change event is triggered when the color is changed on the color-picker.\nLayout\n| Layout          | description                               | Expected value                                                                                                |\n| --------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display mobile view.  | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n| Style      | Description                                                                                                                                                                                                                                              |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |\n| setColor | Set the  color. | `color` eg - `#ffffff` |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nExample: Selecting/changing color from the color picker and getting respective hex, rgb and rgba value of selected color\n\nLet's start by creating a new app and then dragging the Color Picker  widget onto the canvas.\nClick on the Color Picker widget, a picker pop-up will appear, one can select desired color from the picker.\nIn order to close the appeared picker pop-up, one need's to move away mouse from the picker pop-up and picker pop-up will fade away.\nIn the Inspector, inside component, look for colorpicker, where one can get respective hex, rgb and rgba color\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Text",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/text.md",
    "content": "\nid: text\ntitle: Text\n\nText\nText widget can be used to display text.\n:::info\nUsers cannot enter and edit text.\n::: \nHow To Use Text Widget\n\nProperties\nText\nThis property sets the content/text inside the Text widget. Refer your query data with dynamic variables `{{queries.datasource.data.text}}` or populate it with sample values `Text goes here !`.\nShow loading state\nToggle `on` or `off` to show or hide the loading state. You can also click on the `Fx` next to it to set the value `{{true}}` and `{{false}}` dynamically. Shows a loading status if the value is `true`. This property is often used with the `isLoading` property of queries so that the table shows a spinner while the query is being run. Default value is `false`.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n| Style      | Description |\n| ----------- | ----------- | \n| Font Weight | You can change the font weight of the text in following ways: normal (default), bold, lighter, bolder |\n| Text Decoration | You can change the text decoration in following ways : none(default), overline, line-through, underline, overline underline |\n| Text Transformation | You can transform the text in following ways: none (default), uppercase, lowercase, capitalize |\n| Font Style | You can change the font style in following ways: normal(default), italic, oblique |\n| Line Height | You can change the line height by providing number as input (example - 1.5) |\n| Text Indent | You can change the text indent by providing the number as input (example - 10) |\n| Letter Spacing | You can change the letter spacing by providing the number as input  (example - 2) |\n| Word Spacing  | You can change the letter spacing by providing the number as input  (example - 2) |\n| Font Variant | You can change the font variant of the text in the following ways: normal (default), small-caps, initial, inherit |\n| Text Size | By default, the text size is set to 14. You can enter any value from 1-100 to set custom text size. |\n| Background Color | You can change the background color of the text component by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Text Color |  You can change the color of the text by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Align Text | You can align the text inside the widget in following ways: left, right, center, justified |\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Code Editor",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/code-editor.md",
    "content": "\nid: code-editor\ntitle: Code Editor\n\nCode Editor\nCode Editor widget is a versatile text editor for editing code and supports several languages. \n\n\n\nProperties\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\n\n\n\n| properties      | description | Expected value |\n| ----------- | ----------- | ----------------- |\n| Placeholder |  It specifies a hint that describes the expected value.| This field requires a `String` value |\n| Mode |  It is used to specify the language to be used for the code-editor.| See `info` below for the list of all supported languages |\n| Show Line Number |  This property is used to show or hide line numbers to the left of the editor.| This fields expects a boolean value `{{true}}` or `{{false}}` |\n:::info\n\nSupporting all commonly used languages.\n\nAPL\nASN.1\nAsterisk dialplan\nBrainfuck\nC, C++, C#\nCeylon\nClojure\nClosure Stylesheets (GSS)\nCMake\nCOBOL\nCoffeeScript\nCommon Lisp\nCrystal\nCSS\nCypher\nCython\nD\nDart\nDjango (templating language)\nDockerfile\ndiff\nDTD\nDylan\nEBNF\nECL\nEiffel\nElixir\nElm\nErlang\nFactor\nFCL\nForth\nFortran\nF#\nGas (AT&T-style assembly)\nGherkin\nGo\nGroovy\nHAML\nHandlebars\nHaskell\nHaxe\nHTML embedded (JSP, ASP.NET)\nHTML mixed-mode\nHTTP\nIDL\nJava\nJavaScript (JSX)\nJinja2\nJulia\nKotlin\nLESS\nLiveScript\nLua\nMarkdown (GitHub-flavour)\nMathematica\nmbox\nmIRC\nModelica\nMscGen\nMUMPS\nNginx\nNSIS\nN-Triples/N-Quads\nObjective C\nOCaml\nOctave (MATLAB)\nOz\nPascal\nPEG.js\nPerl\nPGP (ASCII armor)\nPHP\nPig Latin\nPowerShell\nProperties files\nProtoBuf\nPug\nPuppet\nPython\nQ\nR\nRPM\nreStructuredText\nRuby\nRust\nSAS\nSass\nSpreadsheet\nScala\nScheme\nSCSS\nShell\nSieve\nSlim\nSmalltalk\nSmarty\nSolr\nSoy\nStylus\nSQL (several dialects)\nSPARQL\nSquirrel\nSwift\nsTeX, LaTeX\nTcl\nTextile\nTiddlywiki\nTiki wiki\nTOML\nTornado (templating language)\ntroff (for manpages)\nTTCN\nTTCN Configuration\nTurtle\nTwig\nVB.NET\nVBScript\nVelocity\nVerilog/SystemVerilog\nVHDL\nVue.js app\nWeb IDL\nWebAssembly Text Format\nXML/HTML\nXQuery\nYacas\nYAML\nYAML frontmatter\nZ80\n\n\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout  | description |\n| ----------- | ----------- |\n| Show on desktop | Toggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on Fx to set the value `{{true}}` or `{{false}}`. |\n| Show on mobile | Toggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on Fx to set the value `{{true}}` or `{{false}}`. |\nStyles\n\n\n\n| Styles  | description | \n| ----------- | ----------- |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`. |\n| Disable | This is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |",
    "tag": "tooljet"
  },
  {
    "title": "Datepicker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/datepicker.md",
    "content": "\nid: datepicker\ntitle: Datepicker\n\nDatepicker\nThe Datepicker widget allows users to select a single value for date and time from a pre-determined set.\n\n\n\nHow To Use Datepicker Widget\n\nEvents\nTo add an event to a date-picker component, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on + Add handler.\nOn select\nOn select event is triggered when an date is selected.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\nDefault value\nThis value acts as placeholder for the date picker widget, if any value is not provided then the default value will be used from the picker. The default value needs to be a `String` with respect to the `format` field. Ex: If format is set to `MM/YYYY` then provide default value as `04/2022`.\nFormat\nThe format of the date selected by the date picker. Default date format is DD/MM/YYYY. Date format should be followed as ISO 8601 as mentioned in the moment documentation. This field requires a `String` input. Ex: `DD/MM`, `MM/YYYY`, `YY/MM`, `DD/MM/YYYY` etc.\nEnable time selection?\nToggle on or off to enable the time selection. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nEnable date selection?\nToggle on or off to enable the date selection. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nDisabled dates\nWe can give disabled dates property which will make specific dates disabled and cannot be selected. The default value needs to be an array of`Strings`.\nExample for disabling the 9th of January:\n`js\n{{['09-01']}}`\nNow user won't be able to select the mentioned date since it will be disabled. \nValidation\nCustom Validation\nAdd a validation for the date input in the widget using the ternary operator.\nExample of validation for selecting dates that are after the current date:\n`js\n{{moment(components.datepicker1.value, 'DD/MM/YYYY').isAfter(moment()) ? true : 'Date should be after today'}}`\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nBorder Radius\nUse this property to modify the border radius of the date-picker. The field expects only numerical value from `1` to `100`, default is `0`. \n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Modal",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/modal.md",
    "content": "\nid: modal\ntitle: Modal\n\nModal\nModal widget renders in front of a backdrop, and it blocks interaction with the rest of the application until the modal is closed. It can be used to add dialog boxes to your app for lightboxes, user notifications, forms, etc.\n\n\n\nHow To Use Modal Widget\n\nAdd widgets to Modal\nTo add widgets to the Modals please refer to Tutorial - Adding widgets to a modal\nProperties\nTitle\nTitle that should be shown on the header of the modal. \nLoading State\nLoading state can be used to show a spinner on the modal content. Loading state is commonly used with isLoading property of the queries to show a loading status while a query is being run. Enable the toggle On or click on `fx` to programmatically set the value `{{true}}` or `{{false}}` .\nHide title bar\nEnabling this option hides the title bar in the modal. The value `{{true}}` or `{{false}}` can be set programmatically by clicking on the `Fx` button next to it.\nHide close button\nEnabling this option hides the close button in the modal. The value `{{true}}` or `{{false}}` can be set programmatically by clicking on the `Fx` button next to it.\nHide on escape\nEnabling this option closes the modal(opened) whenever the escape key is pressed. The value `{{true}}` or `{{false}}` can be set programmatically by clicking on the `Fx` button next to it. This property is enabled by default.\n:::info\nNow hide the modal by simply clicking anywhere outside the modal (for preview or released apps).\n:::\nModal size\nSize of the modal. Options are `medium`, `small` and `large`. The default is `small`. You can also programmatically configure the value by clicking on the `Fx` and set the value to `sm`, `md` or `lg`.\nOptions\nUse default trigger button\nThe default trigger button is enabled by default, this button can be used to show the modal. The value `{{true}}` or `{{false}}` can be set programmatically by clicking on the `Fx` button next to it.\n:::info\nA modal can be triggered using the default trigger button, action or via JavaScript.\n:::\nTrigger button label\nIt can be used to set the label of the trigger button.\nEvents\nModal supports the following two events:\n- On open\n- On close\n:::info\nJust like any other event on ToolJet, you can set multiple handlers for the events supported by Modal. Check all the actions here.\n:::\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n| Style      | Description | value |\n| ----------- | ----------- | ------ |\n| Header background color | Change the background color of the header in modal | Enter the Hex color code or choose a color of your choice from the color picker |\n| Header title color | Change the color of the Title in modal | Enter the Hex color code or choose a color of your choice from the color picker |\n| Body background color | Change the background color of the body in modal | Enter the Hex color code or choose a color of your choice from the color picker |\n| Visibility | Toggle on or off to control the visibility of the default trigger button that comes with modal | You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the button will not visible after the app is released. By default, it's set to `{{true}}`. |\n| Disable | Toggle on to disable the default trigger button that comes with modal | You can programmatically change its value by clicking on the `Fx` button next to it, if set to `{{true}}`, the button will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Trigger button background color | Change the background color of the default trigger button of modal | Enter the Hex color code or choose a color of your choice from the color picker |\n| Trigger button text color | Change the color of the label in default trigger button of modal | Enter the Hex color code or choose a color of your choice from the color picker |\n:::info\nTrigger Button styles are only visible when Use default trigger button under Options is toggled on.",
    "tag": "tooljet"
  },
  {
    "title": "Components : Overview",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/overview.md",
    "content": "\nid: overview\ntitle: Overview\n\nComponents : Overview\nComponents are used to build the UI of the applications. They can be dragged onto the canvas from the Component Library and can be modified from the Properties Panel without needing to write any code. Event Handlers in Components allow end users to trigger queries and other application events to perform the Actions.\nAdding components\nComponents can be dragged and dropped from the Component Library(from the right side on app builder) on to the canvas. Components can be moved by simply click and hold, and can be resized from edges or borders.\n\n\n\nSelect multiple components\nFor moving the multiple components at once, simply shift+click, to select multiple components. Once grouped, the components can be moved on the canvas while maintaining their relative positions.\n\n\n\nYou can also create a selection triangle and move multiple components together by `click and drag`\n\n\n\n:::tip\nYou can also use many other Keyboard Shortcuts in ToolJet to copy, cut, paste components to the canvas.\n:::\nComponent properties\nEach Component can be modified and styled from the Properties Panel such as the data field, a toggle for disabling the component, or stylings like a background color. Properties can be modified directly or programmatically by using Bindings, which enables you to write JavaScript code.\n\n\n\nComponent Event Handlers\nEvent Handlers can be found in the Component's Property Panel or in the Advanced section of the Query. Event handlers can be used to trigger the queries, perform Component Specific Actions - CSA or for setting a variable.\n:::info Actions\nCheck all the available Actions here.\n:::\n\n\n\nBindings\nBindings allow you to get dynamic data into the components. Anything inside of `{{}}` is evaluated as a JavaScript expression in ToolJet.\nAny arbitrary JavaScript code can be written inside `{{}}`:\n`js\n{{(function () {\n        <your_javascript_code_here>\n    })()\n}}`\nor\n`js\n{{components.xyz.data.key === Sun ?? true : false}}`\n:::tip\nCheck out the How-to guides like changing color of text in table column, Enable/Disable a component using JavaScript, and more.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Calendar",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/calendar.md",
    "content": "\nid: calendar\ntitle: Calendar\n\nCalendar\nCalendar widget comes with the following features:\n- Day, month and week level views\n- Events\n- Resource scheduling\n\n\n\nProperties\nDate format\nDetermines the format in which any date passed to the calendar via any of the properties will be parsed. It also determines the format in which any date made available by the calendar via exposed variables will be displayed. It uses the date format conventions of moment.js. The default Date format is set to `MM-DD-YYYY HH:mm:ss A Z`.\nDefault date\nDetermines the date on which the calendar's view will be centered on. By default, the default date is set to the current date using moment.js i.e. `{{moment().format(\"MM-DD-YYYY HH:mm:ss A Z\")}}`. If the calendar is on `month` view, it will show the month on which this date exists. If the calendar is on `week` view, it will show the week on which this date exists. This property needs to be formatted using the `Date format` property which is configurable on the inspector.\nEvents\n`Events` property should contain an array of objects, each of which describes the events that the calendar needs to display.\nAssuming that you set the date format to `MM-DD-YYYY HH:mm:ss A Z`, setting the `Events` property to the following code snippet will display an event titled `Sample Event` at the first hour of this day, as displayed in the image of calendar at the beginning of this page.\n`javascript\n{{[\n  {\n      title: 'Sample event',\n      start: `${moment().startOf('day').format('MM-DD-YYYY HH:mm:ss A Z')}`,\n      end: `${moment().endOf('day').format('MM-DD-YYYY HH:mm:ss A Z')}`,\n      allDay: false,\n      tooltip: 'Sample event',\n      color: 'lightgreen',\n  }\n]}}`\nEvent object properties\n| Name | Description |\n|------|-------------|\n| title | Title of the event |\n| start | The date(and time) on which this event begins. Needs to be formatted in the `Date format` you've supplied |\n| end | The date(and time) on which this event ends. Needs to be formatted in the `Date format` you've supplied |\n| allDay | Optional. Qualifies the event as an 'All day event', which will pin it to date headers on `day` and `week` level views |\n| tooltip | Tooltip which will be display when the user hovers over the event |\n| color | Background color of the event, any css supported color name or hex code can be used |\n| textColor | Color of the event title, any css supported color name or hex code can be used |\n| textOrientation | Optional. If it is set to `vertical`, the title of the event will be oriented vertically. |\n| resourceId | Applicable only if you're using resource scheduling. This is the id of the resource to which this event correspond to. |\nYou may supply any other additional property to the event(s). These additional properties will available to you when the calendar widget\nexposes any of the events via its exposed variables.\nResources\nSpecifying resources will make the calendar categorize `week` view and `day` view for each of the resources specified.  \nFor example, to categorize week/day view into for three rooms, we specify `resources` this way:\n`javascript\n{{[\n    {resourceId: 1, title: 'Room A'},\n    {resourceId: 2, title: 'Room B'},\n    {resourceId: 3, title: 'Room C'},\n  ]}}`\nIf we specify the `resourceId` of any of the events as `1`, then that event will be assigned to `Room A`, generating the following calendar, assuming that we've set the view to `day` and are viewing the day on which this event exists.\n\n\n\nDefault view\nDetermines whether the calendar would display a `day`, a `week` or a `month`. Setting this property to anything other than these values will make the calendar default to `month` view.\nThe view that is currently selected will be exposed as the variable `currentView`.\nStart time on week and day view\nThis determines the time at which week view and day view cells begins. Keep in mind that this field accepts a date, but still only the time and timezone(if provided) are taken from this date. The date should be provided in the date format chosen by you in the first property field.\nEnd time on week and day view\nThis determines the time at which week view and day view cells ends. Keep in mind that this field accepts a date, but still only the time and timezone(if provided) are taken from this date. The date should be provided in the date format chosen by you in the first property field.\nShow toolbar\nDetermines whether the calendar toolbar should be displayed or not. Click on `Fx` button to programmatically determine the field value to `{{true}}` or `{{false}}`.\nShow view switcher\nDetermines whether the calendar's buttons that allow user to switch between `month`, `week` and `day` level views will be displayed. Click on `Fx` button to programmatically determine the field value to `{{true}}` or `{{false}}`.\nHighlight today\nDetermines whether the today's card on the calendar should be highlighted or not. Click on `Fx` button to programmatically determine the field value to `{{true}}` or `{{false}}`.\nShow popover when the event is clicked\nDetermines whether to display a popover whenever an event is clicked. Click on `Fx` button to programmatically determine the field value to `{{true}}` or `{{false}}`.\nEvents\n\n\n\nOn Event selected\nThis event is fired when the user clicks on a calendar event. \nLast selected event is exposed as `selectedEvent`.\non Slot selected\nThis event is fired when the user either clicks on an calendar slot(empty cell or empty space of a cell with event) or when they click and drag to select multiple slots.  \nLast selected slot(s) are exposed as `selectedSlots`.\nOn Date Navigate\nThis event is fired when the user clicks on `Today`, `Next` or `Back` buttons on the calendar. \nThe corresponding date to which the user navigated, will be exposed as `currentDate`.\nOn View Change\nThis event is fired when a different view is selected by the user. \nThe current view is exposed as `currentView`.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget. Under the General accordion,you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nCell size in views classified by resource\nWhen `resources` are specified, the calendar could take up quite a lot of horizontal space, making the horizontal scroll bar of calendar having to be relied upon all the time.  \nIf we set this property to `compact`, the cell sizes will be smaller in `week` and `day` views.\nHeader date format on week view\nThis format determines how the column header for each day in week view will be displayed. As with every other date format field in ToolJet, this follows the momentjs standard of date formatting. By default, its set to `DD MMM`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Text Input",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/text-input.md",
    "content": "\nid: text-input\ntitle: Text Input\n\nText Input\nText Input widget lets users enter and edit text.\n:::tip\nThe Text Input should be preferred when user input is a single line of text.\n:::\nHow To Use Text Input Widget\n\nProperties\nDefault value\nThe default value that the widget will hold when the app is loaded.\nPlaceholder\nIt specifies a hint that describes the expected value.\nEvents\n\n\n\nOn change\nThis event fires whenever the user types something on the text input.\nOn Enter Pressed\nThis event fires whenever the user presses the enter button on keyboard after entering some text on text input component.\nOn focus\nThis event fires whenever the user clicks inside the text input component.\nOn blur\nThis event fires whenever the user clicks outside the text input component.\n:::info\nCheck Action Reference docs to get detailed information about all the Actions.\n:::\nValidation\nRegex\nUse this field to enter a Regular Expression that will validate the password constraints.\nMin length\nEnter the number for a minimum length of password allowed.\nMax length\nEnter the number for the maximum length of password allowed.\nCustom validation\nIf the condition is true, the validation passes, otherwise returns a string that should be displayed as the error message. For example: `{{components.passwordInput1.value === 'something' ? true: 'value should be something'}}`.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nText Color\nUse this property to set the color of the text inside the text input component. You can select the color from the color picker or set the value using Hex color code.\nBorder color\nAdd a color to the border of the text-input component using this property. You can select the color from the color picker or set the value using Hex color code.\nBorder Radius\nUse this property to modify the border radius of the widget. The field expects only numerical values from `1` to `100`, and default is `0`. \nVisibility\nIt is to control the visibility of the widget. If `{{false}}` the widget will not be visible after the app gets deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will lock and become non-functional. By default, its value is set to `{{false}}`.\n:::info\nCheck the component specific actions available for this component here.",
    "tag": "tooljet"
  },
  {
    "title": "Map",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/map.md",
    "content": "\nid: map\ntitle: Map\n\nMap\nThe map widget can be used to pick or select locations on the Google map with the location's coordinates.\n\n\n\nExposed variables\nExposed variables can be used to get data from the widget.\n| variable      | description |\n| ----------- | ----------- |\n| bounds      | Viewport area of the map |\n| center      | It contains the locations' coordinates at the center of the bounding area |\n| markers     | A marker identifies a location on the map. `markers` contains the list of markers on the map |\n| selectedMarker | Object with the marker selected by the user |\nEvents\n| events      | description |\n| ----------- | ----------- |\n| On bounds change | Triggered when the bounding area is changed. This event is triggered after `bounds` variable is updated |\n| On create marker | This event is triggered when a new marker is created on the map |\n| On marker click | This event is triggered when any of the markers in the map is clicked |\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\n| properties      | description | Expected value |\n| ----------- | ----------- | ------------------ |\n| Initial location | It is the default location's coordinates that the map should focus on. | An object containing the latitude and langitude as key value pairs. ex: `{{ {\"lat\": 40.7128, \"lng\": -73.935242} }}` |\n| Default Markers | List of markers that should be shown on the map | An array of objects containing the coordinates. ex: `{{ [{\"lat\": 40.7128, \"lng\": -73.935242}] }}` | \n| Add new markers | This property should be enabled to add new markers to the map on click. | `On` by default, toggle `off` to disable adding new markers on the map. Can be programmatically configured by clicking on `Fx`, accepts values `{{true}}` or `{{false}}` |\n| Search for places | It can be used to show or hide auto-complete search box. | `On` by default, toggle `off` to disable search on the map. Can be programmatically configured by clicking on `Fx`, accepts values `{{true}}` or `{{false}}` |\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |",
    "tag": "tooljet"
  },
  {
    "title": "Container",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/container.md",
    "content": "\nid: container\ntitle: Container\n\nContainer\nContainers are used to group widgets together. You can move the desired number of widgets inside a container to organize your app better.\n\n\n\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers themouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout      | description |\n| ----------- | ----------- |\n| Show on desktop | This property have toggle switch. If enabled, the Container widget will display in the desktop view else it will not appear. This is enabled by default.|\n| Show on mobile | This property have toggle switch. If enabled, the Container wisget will display in the mobile view else it will not appear.|\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- |\n| Background Color |  You can change the background color of the Container by entering the `Hex color code` or choosing a color of your choice from the color picker. |\n| Border radius | Use this property to modify the border radius of the container. The field expects only numerical value from `1` to `100`, default is `0`. |\n| Border Color |  You can change the border color of the Container by entering the `Hex color code` or choosing a color of your choice from the color picker. |\n| Visibility | This is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`. |\n| Disable |  This property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Star rating",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/star-rating.md",
    "content": "\nid: star-rating\ntitle: Star rating\n\nStar rating\nStar rating widget can be used to display as well as input ratings. The widget supports half stars, and the number of stars can be set too.\n\n\n\nEvents\nOn Change\nThis event is triggered when a star is clicked.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\nLabel\nThe text to be used as the label for the star rating. This field expects a `String` value.\nNumber of stars\nInitial number of stars in the list on initial load. `default: 5`. This field expects an integer value.\nDefault no of selected stars\nThis property specifies the default count of stars that are selected on the initial load. `default: 5` (integer). This field expects an integer value.\nEnable half star\nToggle `on` to allow selection of half stars. `default: false` (bool). Click on `Fx` to programmatically define the value `{{true}}` or `{{false}}`.\nTooltips\nThis is used for displaying informative tooltips on each star, and it is mapped to the index of the star. `default: []` (array of strings ). Ex: `{{[\"bad\", \"okay\", \"good\", \"best\"]}}`\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nStar Color\nDisplay color of the star. `default: #ffb400` (color hex). Change color by providing `Hex color code` or choosing one from the picker.\nLabel color\nChange the color of label in widget by providing `Hex color code` or choosing one from the picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable",
    "tag": "tooljet"
  },
  {
    "title": "Form",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/form.md",
    "content": "\nid: form\ntitle: Form\n\nForm\nForm component can be used to get input from the user and store it in the connected datasource. Form component serves as a parent widget that can store different widgets like texts, input box, dropdown to allow selection, and a button for triggering the event.\n\n\n\nProperties\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| Button To Submit Form | The dropdown can be used to select the button that will be used as the submit button for the form | Any button that will be added as a child component inside the form component can be selected from the dropdown |\n| Loading state | Loading state can be used to show a spinner as the form content. Loading state is commonly used with isLoading property of the queries to show a loading status while a query is being run. | Switch the toggle On or click on `fx` to programmatically set the value `{{true}}` or `{{false}}`  |\n\n\n\nEvents\nTo add an event to a button group, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\nOn submit\nOn submit event is triggered when the button on the form component is clicked. Just like any other event on ToolJet, you can set multiple handlers for on submit event.\nOn invalid\nOn invalid event is triggered when the input on the form is invalid.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget. Under the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\nLayout\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to display mobile view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- | \n| Background color |  You can change the background color of the form by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Border radius | Use this property to modify the border radius of the form component. |\n| Border color |  You can change the color of the border of the form by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Visibility | Toggle on or off to control the visibility of the form. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n| Disable | Toggle on to lock the widget. You can programmatically change its value by clicking on the `Fx` button next to it, if set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Box shadow | This property adds a shadow to the widget. | You can use different values for box shadow property like offsets, blur, spread, and the color code. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Button",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/button.md",
    "content": "\nid: button\ntitle: Button\n\nButton\nButton widget can be used to take actions.\n\nProperties\nTo add an event to a button, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\nEvents\n\n\n\nOn click\nOn Click event is triggered when the button is clicked. \nOn hover\nOn hover event is triggered when the mouse cursor is moved over the button. Just like any other event on ToolJet, you can set multiple handlers for on click event.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\n\n\n\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| Button Text | It can be used to set the label of the button. | Any String value: `Send Message`, `Delete`, or `{{queries.xyz.data.action}}` |\n| Loading state | Loading state can be used to show a spinner as the button content. Loading state is commonly used with isLoading property of the queries to show a loading status while a query is being run. | Switch the toggle On or click on `fx` to programmatically set the value `{{true}}` or `{{false}}`  |\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to display mobile view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- | \n| Background color |  You can change the background color of the widget by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Text color |  You can change the color of the Text in button by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Loader color |  You can change the color of the loader in button by entering the Hex color code or choosing a color of your choice from the color picker. This will only be affective if the loading state property of the button is enabled. |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n| Disable | Toggle on to lock the widget. You can programmatically change its value by clicking on the `Fx` button next to it, if set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Border radius | Use this property to modify the border radius of the button. |\n| Border color | Add a color to the border of the button using this property. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Image",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/image.md",
    "content": "\nid: image\ntitle: Image\n\nImage\nImage widget is used to display images in your app.\n\n\n\nEvents\n\n\n\nOn click\nOn click event is triggered when an image is clicked.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\n\n\n\nURL\nEnter the URL of the image to display it on the widget.\nLoading state\nLoading state can be used to show a spinner as the image content. Loading state is commonly used with `isLoading` property of the queries to show a loading status while a query is being run. Switch the toggle On or click on `fx` to programmatically set the value `{{true}}` or `{{false}}`.\nAlternative text\nUsed for alt text of images.\nZoom buttons\nToggle this to enable zoom options inside image.\nRotate buttons\nToggle this on to enable rotate button in the image.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nBorder type\nChoose a border type for the image from available options:\n- None\n- Rounded\n- Circle\n- Thumbnail\nImage fit\nChoose a image fit - similar to object fit for the image from available options:\n- fill\n- cover\n- contain\n- scale-down\nBackground color\nAdd a background color to widget by providing the `HEX color code` or choosing the color of your choice from the color-picker.\nPadding\nAdds padding between the image and widget border. It accepts any numerical value from `0` to `100`.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Toggle Switch",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/toggle-switch.md",
    "content": "\nid: toggle-switch\ntitle: Toggle Switch\n\nToggle Switch\nThe toggle switch widget allows the user to change a setting between two states.\nThe Toggle switch widget should be used if we want to make a binary choice, such as turning something on or off or enable or disable.\nHow To Use Toggle Switch Widget\n\nProperties\nLabel\nThis property can be used to set a label for the switch. Default Label: Toggle label\nDefault status\nThe property is used to set the default status (enabled or disabled) of the toggle switch component when the app is loaded. By default, the checkbox component is set to `{{false}}`/disabled.\nEvent\nOn change\nThis event is triggered whenever the toggle switch is clicked.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nText color\nChange the color of the text in the widget by providig the `Hex color code` or choosing a color from the picker.\nToggle switch color\nChange the color of the toggle switch in the widget by providig the `Hex color code` or choosing a color from the picker.\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Date-range picker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/date-range-picker.md",
    "content": "\nid: date-range-picker\ntitle: Date-range picker\n\nDate-range picker\nThe date-range picker widget allows users to select a range of dates.\nHow To Use Date Range Picker Widget\n\nProperties\nDefault start date\nSet the start date to be selected by default in the widget\nDefault end date\nSet the start date to be selected by default in the widget\nFormat\nThe format of the date selected by the date picker. Default date format is DD/MM/YYYY. Date format should be followed as ISO 8601 as mentioned in the moment documentation.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nEvents\nDate range picker supports the following events:\nOn select\nThe On select event is triggered when the a start date and end date is selected on the picker. Just like any other event on ToolJet, you can set multiple handlers for on select event.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nBorder Radius\nUse this property to modify the border radius of the date range picker. The field expects only numerical value from `1` to `100`, default is `0`. \nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Filepicker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/file-picker.md",
    "content": "\nid: file-picker\ntitle: Filepicker\n\nFilepicker\nFilepicker widget allows the user to drag and drop files or upload files by browsing the filesystem and selecting one or more files in a directory.\n\n\n\n:::info\n File types must be a valid MIME type according to input element specification or a valid file extension.\nTo accept any/all file type(s), set `Accept file types` to an empty value.\n:::\n\n\n\n:::tip\nMIME type determination is not reliable across platforms. CSV files, for example, are reported as text/plain under macOS but as application/vnd.ms-excel under Windows.\n:::\nEvents\n\n\n\nOn file selected\nOn file selected event is triggered when one or more files are selected by the selector dialogue box.\nOn file loaded\nOn file loaded event is triggered when a file is loaded in the browser.\nOn file deselected\nOn file selected event can be triggered when one or more files are removed from the picker.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\nInstruction Text\nInstruction text can be set to give information on the file picker.\nUse Drop zone\nCreates a drag & drop zone. Files can be dragged and dropped to the \"drag & drop\" zone.\nUse File Picker\nOn clicking it invokes the default OS file prompt.\nPick multiple files\nAllows drag and drop (or selection from the file dialog) of multiple files. `Pick multiple files` is disabled by default.\nMax file count\nThe maximum accepted number of files The default value is `2`.\nAccept file types\nBy providing types, you can make the dropzone accept specific file types and reject the others.\nMax size limit\nMaximum file size (in bytes).\nMin size limit\nMinimum file size (in bytes).\n:::tip\nFiles can be accepted or rejected based on the file types, maximum file count, maximum file size (in bytes) and minimum file size (in bytes).\nIf `Pick multiple files` is set to false and additional files are dropped, all files besides the first will be rejected. \nAny file that does not have a size in the range of `Max size limit` and `Min size limit` will be rejected.\n:::\nOptions\n\n\n\nParse content\nParse the selected files, supports CSV, xls, and xlsx files.\nFile type\nIf Parse content is enabled, options to auto-detect files and parse content or parse selected file types.\n:::info\n- If Parse content option is toggled off, File Type option will not be available.\n- If the Parse content option is toggled on, it only parses the next file that is selected, not the already selected one.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nBorder Radius\nUse this property to modify the border radius of the filepicker widget. The field expects only numerical value from `1` to `100`, default is `0`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nActions\n| Action  | Description | Properties |\n| ----------- | ----------- | ------------ |",
    "tag": "tooljet"
  },
  {
    "title": "Range Slider",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/range-slider.md",
    "content": "\nid: range-slider\ntitle: Range Slider\n\nRange Slider\nRange sliders are widely used across different UIs. One of the main purposes is to filter, explore all the related content and available in the control and settings options.\n:::tip\nRange Sliders have \"Two handles\" option which allows user to select within a range.\n:::\n\n\n\nProperties\nMinimum value\nSet the minimum value for the slider. This field accepts any numerical value.\nMaximum value\nSet the maximum value for the slider. This field accepts any numerical value.\nValue\nSet the default value when the widget loads. This can be used to pre-fill the value based on your data and requirements.\nTwo handles\nThe slider will now have 2 dragging handles. It is used to define a range of values versus a single given value.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nLine color\nEnter the hexcode to set the default color for slider's track. \nHandle color\nEnter the hexcode to set the color for slider's handler. \nTrack color\nEnter the hexcode to set the color for slider's active portion on the track. \nVisibility\nSet the visivlity of the slider programmatically. The default value is `{{true}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Rich Text Editor",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/rich-text-editor.md",
    "content": "\nid: rich-text-editor\ntitle: Rich Text Editor\n\nRich Text Editor\nRich Text Editor can be used to enter and edit the text in HTML format.\nIt should be preferred for blog posts, forum posts or notes sections. The text is to be used as the label for the radio button.\n\n\n\nProperties\nPlaceholder\nIt specifies a hint that describes the expected value.\nDefault Value\nThe default value that the widget will hold when the app is loaded.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable",
    "tag": "tooljet"
  },
  {
    "title": "Checkbox",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/checkbox.md",
    "content": "\nid: checkbox\ntitle: Checkbox\n\nCheckbox\nCheckbox widget can be used for allowing the users to make a binary choice, e.g,. unselected or selected.\n:::info\nThe checkbox widget consists of a single checkbox input.\n:::\nHow To Use Checkbox Widget\n\nProperties\nLabel\nThe text is to be used as the label for the checkbox. This field expects a `String` input.\nDefault Status\nThe property is used to set the default status (enabled or disabled) of the checkbox widget when the app is loaded. By default, the checkbox component is set to `{{false}}`/disabled.\nEvents\nTo add an event to a checkbox component, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on + Add handler.\n\n\n\nOn check\nOn check event is triggered when checkbox input is checked.\nOn uncheck\nOn uncheck event is triggered when checkbox input is unchecked.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nText color\nChange the color of the Text in checkbox by entering the `Hex color code` or choosing a color of your choice from the color-picker. \nCheckbox color\nYou can change the color of the checkbox by entering the `Hex color code` or choosing a color of your choice from the color-picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |",
    "tag": "tooljet"
  },
  {
    "title": "Pagination",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/pagination.md",
    "content": "\nid: pagination\ntitle: Pagination\n\nPagination\nPagination enables the user to select a specific page from a range of pages. It is used to separate the content into discrete pages.\n:::tip\nYou can club pagination widget with the List View widget.\n:::\n\n\n\nProperties\nNumber of pages\nYou can use this to predefined the total number of pages. It is calculated by dividing the length of the data array that will be passed, by the data limit which is the number of posts we will show on each page. \nDefault page index\nIt is used to set and display the default page index when the app initially loads. You can also put a conditional logic to set its value as per your use case.\nEvent\nOn Page Change\nThis event is triggered whenever the user switches to another page index. You can explore various actions associated with this event as per app logic.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Circular Progress Bar",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/circular-progressbar.md",
    "content": "\nid: circular-progress-bar\ntitle: Circular Progress Bar\n\nCircular Progress Bar\nCircular progress bar widget can be used to show progress in a progress circle.\n\n\n\nProperties\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\n\n\n\n| properties  | description | Expected Value |\n| ----------- | ----------- | --------------- |\n| Text | We can set a text inside the progress circle.| It expects a `String`, you can also use js to dynamically update the text as the progress changes. |\n| Progress | It can be used to set the progress of the widget. | Progress should be an integer between 0 and 100.|\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout  | description |\n| ----------- | ----------- |\n| Show on desktop | Toggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on Fx to set the value `{{true}}` or `{{false}}`. |\n| Show on mobile | Toggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on Fx to set the value `{{true}}` or `{{false}}`. |\nStyles\n\n\n\n| properties      | description | Expected Value |\n| ----------- | ----------- | ------------------- |\n| Color | To define stroke color.| `HEX color code` or choose color from color-picker. |\n| Text color | To define color of the text inside circular progress bar.| `HEX color code` or choose color from color-picker. |\n| Text size | To define the size of the text | Value must between 0-100. |\n| Stroke width | To define the width of stroke | Value must between 0-100.|\n| Counter Clockwise | Whether to rotate progress bar in counterclockwise direction. | It accepts `{{true}}` and `{{false}}`, Default value is `false`.|\n| Circle ratio | To define ratio of the full circle diameter the progressbar should use. | It accepts numerical value and the default is `1`. |\n| Visibility | Toggle on or off to control the visibility of the widget. | You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nCircular progress bar widget uses react-circular-progress package. Check the repo for further more details about properties and styles.",
    "tag": "tooljet"
  },
  {
    "title": "Statistics",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/statistics.md",
    "content": "\nid: statistics\ntitle: Statistics\n\nStatistics\nStatistics can be used to display different statistical information.\n\n\n\nProperties\nPrimary value label\nThis property lets you add and remove primary value label.\nPrimary value\nThis property lets you add and remove primary value,the actual amount can be represented here.\nHide secondary value\nThis property lets you show/hide the secondary value from the statistics component. By default, this property is disabled. Toggle it on to hide the secondary value, you can also click on the `Fx` button next to it to dynamically set the value to `{{true}}` or `{{false}}`.\nSecondary value label\nThis property lets you add and remove secondary value label.\nSecondary value\nThis property lets you add and remove secondary value,the change in value can be represented here.\nSecondary sign display\nThis property lets you add and secondary sign either positive or negative,can be used to represent positive(increase) or negative(decrease) movement.Default value is positive.\nLoading state\nLoading state can be used to show a spinner on the statistics. Loading state is commonly used with `isLoading` property of the queries to show a loading status while a query is being run. Switch the toggle On or click on `fx` to programmatically set the value `{{true}}` or `{{false}}`.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nPrimary Label Colour\nYou can change the primary label color by entering the Hex color code or choosing a color of your choice from the color picker.\nPrimary Text Colour\nYou can change the primary text color of the primary label by entering the Hex color code or choosing a color of your choice from the color picker.\nSecondary Label Colour\nYou can change the secondary label color of the primary label by entering the Hex color code or choosing a color of your choice from the color picker.\nSecondary Text Colour\nYou can change the secondary text color of the primary label by entering the Hex color code or choosing a color of your choice from the color picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Table",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/table.md",
    "content": "\nid: table\ntitle: Table\n\nTable\nTables can be used for both displaying and editing data.\n\nTable data\n\n\n\nArray of objects to be displayed on the table. It is commonly used to display data from query (`{{queries.restapi1.data}}`). Table data expects an array of objects, example: \n`{{[{ id: 1, name: 'Sarah', email: 'sarah@example.com'}]}}`\nThe table component will auto-generate all the columns as soon as the expected table data(array of objects) is provided.\nColumns\n\n\n\nCell data types\nYou can define the cell types as per your table's data source using the following:\n\nString | Default: It is used to render the data for cell types: text or textarea,\nNumber: This cell type will only expect the numerical values and can be sorted in ascending or descending order\nBadge: It is a labeling component used to display data with badges for e.g status of a shipment\nMultiple badges: Similar to badge, used to display multiple data badges in the form of array of objects,\nTags: Used to display an array of objects in the form of tags, e.g status, levels, steps\nDropdown: When data is in the form of an array of options to be selected, e.g select priority\nRadio: Used to make a selection from a group of options, e.g select your salary-range\nMultiselect: Similar to dropdown but to collect multiple user inputs from a list of options,\nToggle switch: Allows a user to change a setting between two states, e.g select between Yes/No,\nDate picker: Allowing users to display and select dates, e.g delivery date\nImage: This cell type expects the URL of image and will display the image in the cell. It also has the option to style the image.\n\n:::info\nCheck this how-to guide on dynamically change the color of text in a row and column in the table.\n:::\nDisplaying Data\nThe data object should be an array of objects. Table columns can be added, removed, rearranged from the inspector. `key` property is the accessor key used to get data from a single element of a table data object. For example:\nIf the table data is:\n`js\n[\n    {\n        \"review\": {\n            \"title\": \"An app review\"\n        },\n    \"user\": {\n            \"name\": \"sam\",\n            \"email\": \"sam@example.com\"\n        },\n    }\n]`\nTo display email column, the key for the column should be `user.email`.\nSaving data\nEnable `editable` property of a column to make the cells editable. If a data type is not selected, `string` is selected as the data type.\nIf the data in a cell is changed, `changeSet` property of the table object will have the index of the row and the field that changed.\nFor example, if the name field of second row of example in the 'Displaying Data' section is changed, `changeSet` will look like this:\n`js\n{\n    2: {\n        \"name\": \"new name\"\n    }\n}`\nAlong with `changeSet`, `dataUpdates` property will also be changed when the value of a cell changes. `dataUpdates` will have the whole data of the changed index from the table data. `dataUpdates` will look like this for our example:\n`js\n[{\n    \"review\": {\n        \"title\": \"An app review\"\n    },\n    \"user\": {\n        \"name\": \"new name\",\n        \"email\": \"sam@example.com\"\n    },\n}]`\nIf the data of a cell is changed, \"save changes\" button will be shown at the bottom of the table. This button when clicked will trigger the `Bulk update query` event. This event can be used to run a query to update the data on your data source.\nValidation\nUnder column properties, expand the detailed view of a column type to access a toggle button called `make editable`. You can toggle it `ON` to apply the validations for each column respectively using the following.\nRegex\nUse this field to enter a Regular Expression that will validate the password constraints.\nMin length\nEnter the number for a minimum length of password allowed.\nMax length\nEnter the number for the maximum length of password allowed.\nCustom validation\nIf the condition is true, the validation passes, otherwise return a string that should be displayed as the error message. For example: `{{components.passwordInput1.value === 'something' ? true: 'value should be something'}}`\nAction buttons\n\n\n\nAction buttons will be displayed as the last column of the table. The styles of these buttons can be customised and `on click` actions can be configured. when clicked, `selectedRow` property of the table will have the table data of the row.\n| Property | Description |\n| -------- | ------------ |\n| Background color (Action Button) | Background color of the action button. |\n| Text color (Action Button) | Color of button-text of the action button. |\nOptions\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nServer-side pagination\nServer-side pagination can be used to run a query whenever the page is changed. Go to events section of the inspector and change the action for `on page changed` event. Number of records per page needs to be handled in your query. If server-side pagination is enabled, `pageIndex` property will be exposed on the table object, this property will have the current page index. `pageIndex` can be used to query the next set of results when page is changed.\nWhen Server-side pagination is enabled, you'll be able to set three other table properties:\n- Enable previous page button: When server-side pagination is enabled, this button is enabled by default. Toggle this off to disable the previous page button from the table.\n- Enable next page button: When server-side pagination is enabled, this button is enabled by default. Toggle this off to disable the next page button from the table.\n- Total records server side: Set a numerical value to display particular number of records.\nClient-side pagination\nClient-side pagination is enabled by default. When the client-side pagination is enabled(`{{true}}`), another property Number of rows per page will be shown that can be used to set the number of records per page. By default, the value is set to 10 and if it is disabled(`{{false}}`) then it will show all the records in the single page.\nServer-side search\nIf server-side search is enabled, `on search` event is fired after the content of `searchText` property is changed. `searchText` can be used to run a specific query to search for the records in your data source.\nShow download button\nShow or hide download button at the Table footer.\nHide/Show columns\nTable header has an option(Eye icon) to show/hide one or many columns on the table. \nShow filter button\nShow or hide filter button at the Table header. The following filters are available:\n- contains\n- does not contain\n- matches\n- does not match\n- equals\n- does not equal to\n- is empty\n- is not empty\n- greater than\n- greater than or equal to\n- less than\n- less than or equal to\nShow update buttons\nIt's enabled by default. Table footer will show two update buttons Save changes & Discard changes whenever a cell is edited. Toggle `off` to hide update buttons.\nBulk selection\nTo let the user select one or more rows from the current page of a table, enable 'Bulk selection' from the inspector. The values of selected rows will be exposed as `selectedRows`.\nHighlight selected row\nEnable this option to have the last selected(clicked on) row to be highlighted.\nDisable sorting\nEnable this option to lock the sorting of columns when clicked on column name.\nServer-side sort\nWhen Server-side sort is enabled, clicking on the column headers will not automatically sort the table, instead, the `Sort applied` event will be fired and the applied sorting will be exposed as `sortApplied`. You can use this data to run any query that feeds data to the table in a manner that reflects the sorting applied.\nServer-side filter\nWhen Server-side filter is enabled, applying filters will not automatically filter the table, instead, the `Filter changed` event will be fired and the applied filters will be exposed as `filters`. You can use this data to run any query that feeds data to the table in a manner that reflects the filters applied.\nShow search box\nIt can be used to show or hide Table Search box. Client-side search is enabled by default and server-side search can be enabled from the events section of the inspector. Whenever the search text is changed, the `searchText` property of the table component is updated. If server-side search is enabled, `on search` event is fired after the content of `searchText` property is changed. `searchText` can be used to run a specific query to search for the records in your data source.\nIf you don't wish to use the search feature altogether, you can disable it from the inspector.\nLoading state (Boolean)\nLoading state shows a loading skeleton for the table. This property can be used to show a loading status on the table while data is being loaded. `isLoading` property of a query can be used to get the status of a query.\nEvents\n\nRow hovered\nRow clicked\nSave changes\nCancel changes\nPage changed\nSearch\nSort applied\nCell value changed\nFilter changed\n\nRow hovered\nThis event is triggered when the mouse pointer is moved over a row in the table. The `hoveredRowId` exposed variable of the table will include the id of the latest hovered row and `hoveredRow` property of the table will have the data of the hovered row in the object format.\nRow clicked\nThis event is triggered when a table row is clicked. The `selectedRowId` exposed variable of the table will include the id of the selected row and the `selectedRow` property of the table object will have the table data of the selected row.\nSave changes\nIf any cell of the table is edited, the `save changes` button appears at the footer of the table. Save changes event is triggered when this button is clicked.\nCancel changes\nIf any cell of the table is edited, the `Discard changes` button appears at the footer of the table. Cancel changes event is triggered when this button is clicked.\nPage changed\nIf server-side pagination is enabled, this event is fired when the current page is changed. This event is triggered after updating the `pageIndex` variable.\nSearch\nThis event is triggered when a text is entered to the search input box of the table. `searchText` variable is updated before triggering this event.\nSort applied\nThis event is triggered when the column name header is clicked to apply sorting in `asc` or `desc`. The `sortApplied` variable is updated with an object having `column` and `direction` values.\nCell value changed\nIf any cell of the table is edited, the `cell value changed` event is triggered.\nFilter changed\nThis event is triggered when filter is added, removed, or updated from the filter section of the table. `filters` property of the table is updated to reflect the status of filters applied. The objects will have properties: `condition`, `value`, and `column`. \nExposed variables\n| variable      | description |\n| ----------- | ----------- |\n| currentData      | Data that is currently being displayed by the table ( including edits if any ) |\n| currentPageData  | Data that is displayed on the current page if pagination is enabled ( including edits if any )      |\n| pageIndex | Index of the current page, starting from 1\n| changeSet | Object with row number as the key and object of edited fields and their values as the value |\n| dataUpdates | Just like changeSet but includes the data of the entire row |\n| selectedRow | The data of the row that was last clicked. `selectedRow` also changes when an action button is clicked |\n| searchText | The value of the search field if server-side pagination is enabled |\nStyles\n| Style      | Description |\n| ----------- | ----------- |\n| Text color | Change the color of the text in table by providing `hex color code` or choosing one from the picker |\n| Action button radius | This field can be used to give a radius to all action buttons. The default value is `0` |\n| Table type | Select a type of table from the dropdown. |\n| Cell size |  This decides the size of table cells. You can choose between a `Compact` size for table cells or a `Spacious` size |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n| Disable | Toggle on to lock the widget. You can programmatically change its value by clicking on the `Fx` button next to it, if set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Border radius | Use this property to modify the border radius of the button. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Dropdown",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/dropdown.md",
    "content": "\nid: dropdown\ntitle: Dropdown\n\nDropdown\nThe Dropdown widget can be used to collect user input from a list of options.\nHow To Use Dropdown Widget\n\n:::tip\nDropdown options can be referred to your query data with dynamic variables.\n:::\n\n\n\nEvents\n\n\n\nEvent: On select\nOn select event is triggered when an option is selected.\nEvent: On search text changed\nThis event is triggered whenever the user searches through the options by typing on the dropdown's input box. The corresponding search text will be exposed as `searchText`.\nProperties\n\n\n\nLabel\nThe text is to be used as the label of the dropdown.\nDefault value\nValue of the default option\nOption value\nOption values are values for different options in the list of the dropdown. Refer your query data with dynamic variables `{{queries.datasource.data.map(item => item.value)}}` or populate it with sample values `{{[1,2,3]}}`\nOption labels\nOption labels are labels for different options in the list of the dropdown. Refer your query data with dynamic variables `{{queries.datasource.data.map(item => item.label)}}` or populate it with sample values `{{[\"one\", \"two\", \"three\"]}}`\nOptions loading state\nShow a loading state in the widget using this property. It is off by default, toggle on to enable it. You can also programmatically set the values `{{true}}` or `{{false}}` by clicking on the `Fx` button.\nValidation\nCustom validation\nAdd a validation for the options in dropdown widget using the ternary operator.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nBorder Radius\nUse this property to modify the border radius of the dropdown. The field expects only numerical value from `1` to `100`, default is `0`.\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nSelected text color\nChange the text color of the selected option in the widget by providing the `HEX color code` or choosing the color from color picker.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nAlign text\nYou can align the text inside the widget in following ways: left, right, center, justified \n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Vertical Divider",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/vertical-divider.md",
    "content": "\nid: vertical-divider\ntitle: Vertical Divider\n\nVertical Divider\nVertical Divider widget is used to add vertical separator between components.\n\n\n\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| properties      | description |\n| ----------- | ----------- |\n| Show on Desktop |  This property have toggle switch. If enabled, the divider will display in the desktop view else it will not appear. |\n| Show on Mobile |  This property have toggle switch. If enabled, the divider will display in the mobile view else it will not appear. |\nStyles\n\n\n\n| properties      | description |\n| ----------- | ----------- |\n| Divider Color |  It is used to set the color of the divider. Use hex code to set the background color. |\n| Visibility |  This property is used to set the visibility of the divider. The property accepts Boolean value. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Spinner",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/spinner.md",
    "content": "\nid: spinner\ntitle: Spinner\n\nSpinner\nSpinner widget can be used to provide a visual indication that an action is in progress by awaiting a change.\n\n\n\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nColor\nChange the color of the Spinner by entering the `Hex color code` or choosing a color of your choice from the color-picker. \nSize",
    "tag": "tooljet"
  },
  {
    "title": "Kanban",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/kanban-board.md",
    "content": "\nid: kanban\ntitle: Kanban\n\nKanban\nKanban widget allows you to visually organize and prioritize your tasks with a transparent workflow. You can set the number of columns to display, enable/disable the add cards button, and bind data to the cards.\n\n\n\nEvents\nTo add an event, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\n\nCard added\nCard removed\nCard moved\nCard selected\nCard updated\n\nJust like any other event on ToolJet, you can set multiple handlers for any of the above mentioned events.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\n\n\n\nProperties\n\n\n\n:::caution\nPlease keep in mind that you need to provide an `id` for each card in the `Card data` field \nand this `id` must be of type string.\n:::\n| Properties | description | Expected value |\n| ----------- | ----------- | ----------- |\n| Columns | Enter the columns data - `id` and `title` in the form of array of objects or from a query that returns an array of objects. | `{{[{ \"id\": \"1\", \"title\": \"to do\" },{ \"id\": \"2\", \"title\": \"in progress\" },{ \"id\": \"2\", \"title\": \"Completed\" }]}}` or `{{queries.xyz.data}}` |\n| Card data | Enter the cards data - `id`, `title` and `columnId` in the form of array of objects or from a query that returns an array of objects. | `{{[{ id: \"01\", title: \"one\", columnId: \"1\" },{ id: \"02\", title: \"two\", columnId: \"1\" },{ id: \"03\", title: \"three\", columnId: \"2\" }]}}` or `{{queries.abc.data}}` |\n| Enable Add Card | This property allows you to show or hide the `Add Cards` button at the bottom of every column. | By default its enabled, you can programmatically set `{{true}}` or `{{false}}` enable/disable button by clicking on the `Fx` next to it |\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout          | description                                             | Expected value                                                                                        |\n| --------------- | ------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- |\n| Show on desktop | Toggle on or off to display the widget in desktop view. | You can programmatically set the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display the widget in mobile view.  | You can programmatically set the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n\n\n\n| Style        | Description                                                                                                                                                                   |\n| ------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Disable      | If disabled or set to `{{false}}` the widget will be locked and becomes non-functional. By default, its disabled i.e. its value is set to `{{true}}` .                        |\n| Visibility   | This is to control the visibility of the widget. If `{{false}}`/disabled the widget will not visible after the app is deployed. By default, it's enabled (set to `{{true}}`). |\n| Width        | This property sets the width of the column.                                                                                                                                   |\n| Min width    | This property sets the min width of the column.                                                                                                                               |\n| Accent color | You can change the accent color of the column title by entering the Hex color code or choosing a color of your choice from the color picker.                                  |\nExposed variables\n\n\n\n| Variable | Description |\n| -------- | ----------- |\n| columns | The `columns` variable is an array of objects that includes the columns data in the respective objects. Since the columns variable is an array you'll need to specify the index of the object in the array to get the data within that object. Each object within a column has two keys - `id` and `title` and an array `cards` which is again an array of objects. Example: If you want to get the title of second card then you'll use `{{components.kanbanboard1.columns[1].title}}` - here we have specified the array index as `[1]` and then key which is the `title`. Similarly you can get the card details using `{{components.kanbanboard1.columns[0].cards[1].title}}` |\n| lastAddedCard | The variable `lastAddedCard` holds the properties of the card that has been added lastly. It holds the following data - `id`, `title`, and `columnId` of the last added card. You can get the values using `{{components.kanbanboard1.lastAddedCard.title}}` |\n| lastRemovedCard | The variable `lastRemovedCard` holds the properties of the card that has been recently deleted from the kanban. It holds the following data - `id`, `title`, and `columnId` of the recently deleted card. You can get the values using `{{components.kanbanboard1.lastRemovedCard.title}}` |\n| lastCardMovement | The variable `lastCardMovement` holds the properties of the card that has been recently moved from its original position. It holds the following data - `originColumnId`, `destinationColumnId`, `originCardIndex`, `destinationCardIndex` and an object `cardDetails` which includes `title`. You can get the values using `{{components.kanbanboard1.lastCardMovement.cardDetails.title}}` or `{{components.kanbanboard1.lastCardMovement.destinationCardIndex}}` |\n| lastUpdatedCard | The variable `lastUpdatedCard` holds `id`, `title`, and `columnId` of the latest modified card. You can get the values using `{{components.kanbanboard1.lastUpdatedCard.columnId}}` |",
    "tag": "tooljet"
  },
  {
    "title": "Timeline",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/timeline.md",
    "content": "\nid: timeline\ntitle: Timeline\n\nTimeline\nTimeline widget can be used to do a visual representation of a sequence of events\n\n\n\nProperties\nTimeline data\nData requirements: The data needs to be an array of objects and each object should have `title`, `subTitle`, `iconBackgroundColor` and `date` keys.\nExample:\n`json\n[ \n    { \"title\": \"Product Launched\", \"subTitle\": \"First version of our product released to public\", \"date\": \"20/10/2021\", \"iconBackgroundColor\": \"#4d72fa\"},\n    { \"title\": \"First Signup\", \"subTitle\": \"Congratulations! We got our first signup\", \"date\": \"22/10/2021\", \"iconBackgroundColor\": \"#4d72fa\"}, \n    { \"title\": \"First Payment\", \"subTitle\": \"Hurray! We got our first payment\", \"date\": \"01/11/2021\", \"iconBackgroundColor\": \"#4d72fa\"} \n]`\nHide date\nHide date can be used to hide the date time or Left Hand Side of the timeline widget\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n| Layout| description| Expected value|\n| ----- | ---------  | ------------- |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display mobile view.  | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n| Style      | Description |\n| ----------- | ----------- | \n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Tabs",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/tabs.md",
    "content": "\nid: tabs\ntitle: Tabs\n\nTabs\nA Tabs widget contains a number of defined containers that can be navigated through the tabs. Each tab acts as a container that can have different widgets placed inside it.\n\n\n\nHow To Use Tabs Widget\n\nProperties\nTabs\nThis property lets you add and remove containers from the tabs widget. Each container in the tab has its unique `id` , `title` and `disabled` for disabling individual tabs . This field expects an array of objects.\n`js\n{{[\n    { title: 'Home', id: '0' },\n    { title: 'Profile', id: '1',disabled:'true' },\n    { title: 'Settings', id: '2' }\n]}}`\nAdding background color to Tabs\nYou can specify the different color for each tab using the `backgroundColor` property and use hex color code or color name as the value.\n`js\n{{[ \n        { title: 'Home', id: '0', backgroundColor: '#81D4FA' }, \n        { title: 'Profile', id: '1', backgroundColor: 'blue' }, \n        { title: 'Settings', id: '2', backgroundColor: '#ecf0f1'} \n ]}}`\n\n\n\nDefault tab\nThis property selects the container in the tab which matches the corresponding `id`. By default, the value is set to `0`.\nHide tab\nIt allows you to hide all the tab titles defined in the Tabs property above. It accepts boolean values which can also be set using the toggle option or programmatically by clicking on the FX button.\nRender only active tab\nThis property is enabled by default. When enabled, only the active tab will be rendered and when disabled, all the tabs in the component will be rendered.\nEvents\n\n\n\nOn tab switch\nThis event is triggered when the tab is switched.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |\n| setTab | Set current tab. | `id` |\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nHighlight Color\nYou can change the highlight color of the selected tab by entering the Hex color code or choosing a color of your choice from the color picker.\nTab width\nTab width can be set as auto or equally split.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Password Input",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/password-input.md",
    "content": "\nid: password-input\ntitle: Password Input\n\nPassword Input\nA Password Input widget provides a way for the users to securely enter a password. The Password Input is a one-line plain text editor in which the text is obscured so that it cannot be read, by replacing each character with an asterisk (\"*\") symbol.\nHow To Use Password Input Widget\n\nProperties\nPlaceholder\nIt specifies a hint that describes the expected value. \nValidation\nRegex\nUse this field to enter a Regular Expression that will validate the password constraints.\nMin length\nEnter the number for a minimum length of password allowed.\nMax length\nEnter the number for the maximum length of password allowed.\nCustom validation\nIf the condition is true, the validation passes, otherwise return a string that should be displayed as the error message. For example: `{{components.passwordInput1.value === 'something' ? true: 'value should be something'}}`\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nBorder radius\nAdd a border radius to the number input widget using this property. It accepts any numerical value from `0` to `100`.\nBorder color\nAdd color to the border of the number input component using this property. Enter the hex color code or choose a color from the color picker.\nBackground color\nYou can change the background color of the widget by entering the Hex color code or choosing a color of your choice from the color picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Steps",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/steps.md",
    "content": "\nid: steps\ntitle: Steps\n\nSteps\nSteps are used to guide users through complex processes, making them easier and more intuitive.\n\n\n\nProperties\n\n\n\nSteps\nThis property lets you add and the steps. Every object represents a step.\n`json\n{{\n    [\n        { name: 'step 1', tooltip: 'some tooltip', id: 1},\n        { name: 'step 2', tooltip: 'some tooltip', id: 2},\n        { name: 'step 3', tooltip: 'some tooltip', id: 3},\n        { name: 'step 4', tooltip: 'some tooltip', id: 4},\n        { name: 'step 5', tooltip: 'some tooltip', id: 5}\n    ]\n}}`\nCurrent step\nThis property lets you select the current step you want to be highlighted.\nSteps selectable\nThis property when disabled will disable selection of steps.\nEvents\nOn select\nThis event is fired whenever the user selects any step.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nTheme\nYou can change the theme of widget by selecting available themes from dropdown.\nColour\nYou can change the  color of the widget by entering the Hex color code or choosing a color of your choice from the color picker.\nText Colour\nYou can change the  text color of the widget by entering the Hex color code or choosing a color of your choice from the color picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Tags",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/tags.md",
    "content": "\nid: tags\ntitle: Tags\n\nTags\nTags widget can be used to show array of data as tags.\n\n\n\nProperties\nTags\nIt can be used to set array of tags. It must be an array of objects like this:\n`js\n{{ \n    [ \n        { title: 'success', color: '#2fb344', textColor: '#fff' }, \n        { title: 'info', color: '#206bc4', textColor: '#fff'  }, \n        { title: 'warning', color: '#f59f00', textColor: '#fff'  }, \n        { title: 'danger', color: '#d63939', textColor: '#fff' } \n    ] \n}}`\nEach object should contain a title, color code of a particular tag, and also a text color.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility",
    "tag": "tooljet"
  },
  {
    "title": "Properties",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/icon.md",
    "content": "\nid: icon\ntitle: Icon \n\nAn Icon widget can be used to add icons(sourced from icon library). It supports events like on hover and on click.\n\n\n\nProperties\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| Icon | Use this to choose an icon form the list of available icons | You can also use the search bar in it to look for the icons | \nEvents\n\n\n\nTo add an event, click on the icon widget's configuration handle to open the widget properties on the components drawer on the right. Go to the Events section and click on + Add handler.\nThe Icon widget supports the following events:\n| Event  | Description |\n| ----------- | ----------- |\n| On hover      | This event is triggered when the cursor is hovered over the icon|\n| On click      | This event is triggered when the icon is clicked |\nJust like any other event on ToolJet, you can set multiple handlers for any of the above-mentioned events.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip: Set a tooltip text to specify the information when the user moves the mouse pointer over the widget.\nLayout\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to show/hide the widget on desktop screens. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to show/hide the widget on mobile screens. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`   |\nStyles\n| Style      | Description | Expected value |\n| ----------- | ----------- | ------------- |\n| Icon color |  You can change the color of the icon widget by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Visibility | This is to control the visibility of the widget. | If `{{false}}` the widget will not visible after the app is deployed. | It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`. |\n| Box shadow | This property adds a shadow to the widget. | You can use different values for box shadow property like offsets, blur, spread, and the color code. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Link",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/link.md",
    "content": "\nid: link\ntitle: Link\n\nLink\nLink widget allows you to add a hyperlink and navigate to the external URL.\n\n\n\nProperties\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| Link Target | This property sets the URL where the user needs to be taken on clicking the link | example: `https://dev.to/tooljet` or `{{queries.xyz.data.url}}` | \n| Link Text | This property sets the text for the link widget  | example: `Click here` or `Open webpage` | \n| Target Type | This property specifies the link to be opened in the same tab or new tab on clickinh the link | Options: `New Tab` & `Same Tab` |\nEvents\nTo add an event to a link, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\nOn Click\nOn Click event is triggered when the link is clicked. Just like any other event on ToolJet, you can set multiple handlers for on click event.\nOn hover\nOn Hover event is triggered when the link is hovered. Just like any other event on ToolJet, you can set multiple handlers for on click event.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\nLayout\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to show/hide the widget on desktop view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to show/hide the widget on mobile view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`   |\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- | \n| Text Color |  You can change the background color of the text by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Text Size | By default, the text size is set to 14. You can enter any value from 1-100 to set custom text size. |\n| Underline | You can change the underline of the text in the following ways: on-hover (default), never, always |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Radio Button",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/radio-button.md",
    "content": "\nid: radio-button\ntitle: Radio Button\n\nRadio Button\nRadio button widget can be used to select one option from a group of options.\nHow To Use Radio button Widget\n\n:::tip\nRadio buttons are preferred when the list of options is less than six, and all the options can be displayed at once.\n:::\n:::info\nFor more than six options, consider using Dropdown widget.\n:::\nEvent\nOn select\nThis event is triggered when an option is clicked.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\nLabel\nThe text is to be used as the label for the radio button. This field expects a `String` value.\nDefault value\nThe value of the default option.\nOption values\nList of values for different items/options. Refer your query data with dynamic variables `{{queries.datasource.data.map(item => item.value)}}` or populate it with sample values `{{[true, false]}}`\nOption labels\nList of labels for different items/options. Refer your query data with dynamic variables `{{queries.datasource.data.map(item => item.label)}}` or populate it with sample values `{{[\"yes\", \"no\"]}}`\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nText color\nChange the color of the text in the widget by providing the `Hex color code` or by choosing the color of your choice from the color picker.\nActive color\nChange the color of active radio button by providing the `Hex color code` or by choosing the color of your choice from the color picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nExample\n\n\n\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |",
    "tag": "tooljet"
  },
  {
    "title": "Textarea",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/textarea.md",
    "content": "\nid: textarea\ntitle: Textarea\n\nTextarea\nTextarea widgets let users enter and edit just text like Text Input widget.\n:::tip\nTextarea should be preferred over Text Input when user input is more than one sentence.\n:::\nHow To Use Textarea Widget\n\nProperties\nDefault value\nThis property is used for setting the initial value in the textarea on the initial load. This field expects a `String` value.\nPlaceholder\nIt specifies a hint that describes the expected value. This field expects a `String` value.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nBorder Radius\nUse this property to modify the border radius of the text area widget. The field expects only numerical value from `1` to `100`, default is `0`. \nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |\n| setText | Set the text. | `text` |\n| clear | Clear the text. |  |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Chart",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/chart.md",
    "content": "\nid: chart\ntitle: Chart\n\nChart\nChart widget takes the chart type, data and styles to draw charts using Plotly.js.\nHow To Use Chart Widget\n\nChart types\nLine charts\nData requirements: The data needs to be an array of objects and each object should have `x` and `y` keys.\nExample:\n`json\n[\n  { \"x\": \"Jan\", \"y\": 100},\n  { \"x\": \"Feb\", \"y\": 80},\n  { \"x\": \"Mar\", \"y\": 40},\n  { \"x\": \"Apr\", \"y\": 100},\n  { \"x\": \"May\", \"y\": 80},\n  { \"x\": \"Jun\", \"y\": 40}\n]`\nThe chart will look like this:\n\n\n\nBar charts\nData requirements: The data needs to be an array of objects and each object should have `x` and `y` keys.\nExample:\n`json\n[\n  { \"x\": \"Jan\", \"y\": 100},\n  { \"x\": \"Feb\", \"y\": 80},\n  { \"x\": \"Mar\", \"y\": 40},\n  { \"x\": \"Apr\", \"y\": 100},\n  { \"x\": \"May\", \"y\": 80},\n  { \"x\": \"Jun\", \"y\": 40},\n  { \"x\": \"Jul\", \"y\": 100},\n  { \"x\": \"Aug\", \"y\": 80},\n  { \"x\": \"Sep\", \"y\": 40}\n]`\nThe chart will look like this:\n\n\n\nPie charts\nData requirements: The data needs to be an array of objects and each object should have `label` and `value` keys.\nExample:\n`json\n[\n  { \"x\": \"Jan\", \"y\": 100},\n  { \"x\": \"Feb\", \"y\": 80},\n  { \"x\": \"Mar\", \"y\": 40},\n  { \"x\": \"Apr\", \"y\": 100},\n  { \"x\": \"May\", \"y\": 80},\n  { \"x\": \"Jun\", \"y\": 40}\n]`\nThe chart will look like this:\n\n\n\nProperties\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nTitle\nThis field is used to add a title to your selected chart.\nPlotly JSON chart schema\nIn the chart widget, you can also plot a chart with JSON data. So the JSON will contain the information about the chart type, chart data, etc. You can learn more about the JSON properties from here. \nAnyway, to work with the JSON you need to enable the `Use Plotly JSON schema` toggle from the properties section.\n\n\n\nIt will show the JSON description field to put the JSON data.\nThe result will be like this:\n\n\n\nMarker color\nModify the color of marker using the color picker or by providing a `HEX color code`.\nOptions\nLoading state\nToggle `on` the switch to display a loader on the widget. You can also programmatically define it's value by clicking on `Fx`, acceptable values are - `{{true}}` and `{{false}}`.\nShow Axes\nEnable or disable the `x` and `y` axes on the chart through this property. You can also programmatically define it's value by clicking on `Fx`, acceptable values are - `{{true}}` and `{{false}}`.\nShow grid lines\nToggle `on` or `off` to show or hide the grid lines on the chart. You can also programmatically define it's value by clicking on `Fx`, acceptable values are - `{{true}}` and `{{false}}`.\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nPadding\nDefine a space between the widget element and the widget border using `Padding` property. Use any numerical value between `1` to `100`.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable",
    "tag": "tooljet"
  },
  {
    "title": "PDF",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/pdf.md",
    "content": "\nid: pdf\ntitle: PDF\n\nPDF\nPDF widget can be used to embed the PDF file either by URL or as a Base64 encoded.\nProperties\nFile URL\nThe URL of the PDF file on the web. `data:application/pdf;base64,` format is supported and the input needs to be prefixed with `data:application/pdf;base64,`\nScale page to width\nIt can be toggled to adjust the PDF content to fit the width or height of the component\nShow page controls\nBy default, page number, previous & next button is displayed while hovering the PDF file. It can be toggled on or off.\nShow the download\nThe `Download` button on the PDF component allows you to download the pdf file. By default, Show the download button is enabled. Toggle it off to remove the `Download` button from PDF component, you can also click on the `Fx` button to set the values `{{true}}` or `{{false}}` dynamically.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n| Layout          | description                               | Expected value                                                                                                |\n| --------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display mobile view.  | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n| Style      | Description                                                                                                                                                                                                                                              |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Number Input",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/number-input.md",
    "content": "\nid: number-input\ntitle: Number Input\n\nNumber Input\nNumber Input widget lets users enter and change numbers.\nHow To Use Number Input Widget\n\n:::tip\nNumbers can be changed by using the arrow keys.\n:::\nProperties\nDefault value\nA predefined value that can be fetched from the number input widget if no changes are made in widget.\nMinimum value\nIt specifies the minimum value the number input can go to. This field accepts any numerical value.\nMaximum value\nIt specifies the maximum value the number input can go to. This field accepts any numerical value.\nPlaceholder\nIt specifies a hint that describes the expected value. This field accepts any numerical value.\nEvents\n\n\n\nOn change\nThis event fires whenever the value of the number input widget is changed.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget. Under the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nBorder radius\nAdd a border radius to the number input widget using this property. It accepts any numerical value from `0` to `100`.\nBorder color\nChange the border color number-input component by entering the Hex color code or choosing a color of your choice from the color picker.\nBackground color\nChange the background color of the number-input component by entering the Hex color code or choosing a color of your choice from the color picker.\nText color\nChange the color of the number in number-input component by entering the Hex color code or choosing a color of your choice from the color picker. \n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Iframe",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/iframe.md",
    "content": "\nid: iframe\ntitle: Iframe\n\nIframe\nIframe widget is used to embed another HTML page into the current one and display iframes in your app.\n\n\n\nProperties\nURL\nSet the URL of the page to embed.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the  mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Custom Component",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/custom-component.md",
    "content": "\nid: custom-component\ntitle: Custom Component\n\nCustom Component\nCustom Component can be used to do create your own React component when the needed functionality isn't available in other components.\n\n\n\nProperties\nData\nThe data needs to be an objects which needs to be passed as `data` props to the custom component\nExample:\n`json\n{{{\n    title: \"Hi! There\",\n    buttonText: \"Updated Text\",\n    queryName: \"runjs1\"\n}}}`\nCode\nThis field is used to add a React code for your custom component. The packages for the custom component can be imported from Skypack. For example, to import `React` package into the custom component it can be imported as `import React from 'https://cdn.skypack.dev/react'`.\nTooljet provides 3 props to interact with the app: `data`, `updateData` and `runQuery`.\n\n`data` is a shared object between custom component and Tooljet app.\n`updateData` is a function which accepts a single object used to update the data passed to the custom component.\n`runQuery` is a function which accepts a query name as a string used to run the query from the custom component.\n\nExample:\n```js\nimport React from \"https://cdn.skypack.dev/react\";\nimport ReactDOM from \"https://cdn.skypack.dev/react-dom\";\nimport { Button, Container, Link } from \"https://cdn.skypack.dev/@material-ui/core\";\nconst MyCustomComponent = ({data, updateData, runQuery}) => (\n    \n{data.title}\n {updateData({...data, title: 'Hello World!!'})}}>\n            {data.buttonText}\n        \n {runQuery(data.queryName)}}\n        >\n            Run Query\n        \n\n);\nconst ConnectedComponent = Tooljet.connectComponent(MyCustomComponent);\nReactDOM.render(, document.body);\n```\n:::info\n`Tooljet.connectComponent` acts as a HOC and it is required to get access to the data passed into the custom component and run the query\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n| Layout          | description                               | Expected value                                                                                                |\n| --------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display mobile view.  | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n| Style      | Description                                                                                                                                                                                                                                              |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "QR Scanner",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/qr-scanner.md",
    "content": "\nid: qr-scanner\ntitle: QR Scanner\n\nQR Scanner\nScan QR codes using device camera and hold the data they carry.\n\n\n\n:::note Known Issue\nYou might have to stick to the Safari browser in IOS as camera access is restricted for third-party browsers.\n:::\nExposed variables\nlastDetectedValue\nThis variable holds the data contained in the last QR code scanned by the widget. To fetch the data use `{{components.qrscanner1.lastDetectedValue}}`.\nEvents\nonDetect\nThis event is fired whenever the widget successfully scans a QR code.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\n:::caution Debugging tip\nBrowser camera APIs restrict this widget to only work in either `localhost` or `https`.\nSo if you're testing it out, be sure to either use `localhost` or `https`.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the \nmouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. \nNow hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable",
    "tag": "tooljet"
  },
  {
    "title": "List view",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/listview.md",
    "content": "\nid: listview\ntitle: List view\n\nList view\nList view widget allows to create a list of repeatable rows of data. Just like a container widget, you can nest other widgets inside of it and control how many times they repeat.\n\n\n\nHow To Use List view Widget\n\nEvents\nRow clicked\n\n\n\nTo add an event to a button, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\nRow clicked event is triggered when the button is clicked. Just like any other event on ToolJet, you can set multiple actions for a row clicked event.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\n\n\n\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| List data | Enter the data that you want to display into the widget. Data in the form of an array of objects or data from a query that returns an array of objects.| `{{ [ {id: 0, name: ABC, email: abc@bla.com}, {id: 1, name: XYZ, email: xyz@bla.com} ] }}` or `{{queries.xyz.data}}` |\n| Row height | Enter a numerical value to set the row height accordingly. | Any number between `1` to `100` |\n| Show bottom border | This property allows you to show or hide the row bottom border. | By default its `{{true}}`, set `{{false}}` to hide the border  |\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to display the desktop view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to display the mobile view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`   |\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- |\n| Background Color |  You can change the background color of the widget by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Border Color |  You can change the border color of the listview by entering the `Hex color code` or choosing a color of your choice from the color picker. |\n| Visibility | This is to control the visibility of the widget. If `{{false}}` the widget will not be visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`. |\n| Disable |  This property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Border radius | Use this property to modify the border radius of the list view. The field expects only numerical value from `1` to `100`, default is `0`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nExample: Displaying data in the list view\n\nLet's start by creating a new app and then dragging the List view widget onto the canvas.\n\n\n\n\n\nNow lets create a query and select the REST API from the datasource dropdown. Choose the `GET` method and enter the API endpoint - `https://reqres.in/api/users?page=1`. Save this query and fire it. Inspect the query results from the left sidebar, you'll see that it resulted in the `data` object having an array of objects.\n\n\n\n\n\nNow lets edit the `List data` property of the list view widget for displaying the query data. We will use JS to get the data from the query - `{{queries.restapi1.data.data}}`. Here the last `data` is a data object that includes an array of objects, the first `data` is the data resulted from the `restapi1` query. This will automatically create the rows in the widget using the data.\n\n\n\n\n\nFinally, we will need to nest widgets into the first row of list view widget and the widget will automatically create the subsequent instances. The subsequent rows will appear the same way you'll display the data in the first row.\n\n\n\n\n:::tip\nUse `{{listItem.key}}` to display data on the nested widgets. Example: For displaying the images we used `{{listItem.avatar}}` where avatar is one of the key in the objects from the query result.",
    "tag": "tooljet"
  },
  {
    "title": "Timer",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/timer.md",
    "content": "\nid: timer\ntitle: Timer\n\nTimer\nTimer widget lets users to count timer both upward and downward\n\n\n\nProperties\nDefault value\nIt specifies the initial value of timer. Format is: `HH.mm.ss.SS`.\nTimer type\nIt specifies If its a upward or downward counter. Select `Count Up` or `Count Down` from the dropdown or you can click on `Fx` to programmatically define the values `countUp` or `countDown`.\nEvents\nOn start\nThis event is fired when user clicks on start button.\nOn resume\nThis event is fired when user clicks on resume button.\nOn pause\nThis event is fired when user clicks on pause button.\nOn count down finish\nThis event is fired when the count down timer reaches zero.\nOn reset\nThis event is fired when user clicks on reset button.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Tree Select",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/tree-select.md",
    "content": "\nid: tree-select\ntitle: Tree Select\n\nTree Select\nTree Select widget is a group checkboxes in a TreeView which can be expanded or collapsed.\n\n\n\nProperties\nTitle\nThe text is to be used as the title for the tree select. This field expects a `String` input.\nStructure\nData requirements: The structure needs to be an array of objects and each object should have `label` and `value` keys. If you wish to have `children` under any of the checkbox, then `children` array needs to be passed with `label` and `value` keys.\nExample:\n`json\n[\n  {\n    \"label\": \"Asia\",\n    \"value\": \"asia\",\n    \"children\": [\n      {\n        \"label\": \"China\",\n        \"value\": \"china\",\n        \"children\": [\n          { \"label\": \"Beijing\", \"value\": \"beijing\" },\n          { \"label\": \"Shanghai\", \"value\": \"shanghai\" }\n        ]\n      },\n      { \"label\": \"Japan\", \"value\": \"japan\" },\n      {\n        \"label\": \"India\",\n        \"value\": \"india\",\n        \"children\": [\n          { \"label\": \"Delhi\", \"value\": \"delhi\" },\n          { \"label\": \"Mumbai\", \"value\": \"mumbai\" },\n          { \"label\": \"Bengaluru\", \"value\": \"bengaluru\" }\n        ]\n      }\n    ]\n  },\n  {\n    \"label\": \"Europe\",\n    \"value\": \"europe\",\n    \"children\": [\n      { \"label\": \"France\", \"value\": \"france\" },\n      { \"label\": \"Spain\", \"value\": \"spain\" },\n      { \"label\": \"England\", \"value\": \"england\" }\n    ]\n  },\n  { \"label\": \"Africa\", \"value\": \"africa\" }\n]`\n:::info\nNote: The `value` should be unique throughout the structure array.\n:::\nChecked Values\nChecked values is an array of values passed to select the checkboxes by default.\nExample:\n`json\n[\"asia\", \"spain\"]`\nExpanded Values\nSimilar to checked values, expanded values is an array of values passed to expand the node by default.\nExample:\n`json\n[\"asia\"]`\nEvents\n\n\n\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nOn change\nOn check event is triggered whenever the checkbox value is changed (checked or unchecked).\nOn check\nOn check event is triggered whenever the checkbox value is checked.\nOn uncheck\nOn uncheck event is triggered whenever the checkbox value is unchecked.\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nText color\nChange the color of the Label by entering the `Hex color code` or choosing a color of your choice from the color-picker.\nCheckbox color\nYou can change the color of the checkbox by entering the `Hex color code` or choosing a color of your choice from the color-picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Button group",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/button-group.md",
    "content": "\nid: button-group\ntitle: Button Group\n\nButton group\nButton group widget can be used to take actions.\n\n\n\nProperties\nEvents\nTo add an event to a button group, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\n\n\n\nOn click\nOn click event is triggered when the button group is clicked. Just like any other event on ToolJet, you can set multiple handlers for on click event.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\n\n\n\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| label | label is used to set the heading of the button group. | Any String value |\n| values |Values for button group items. | Array of strings  |\n| labels | It can be used to set the labels of the button group items. |  Array of strings|\n| Default  selected | Initial selected values can be set using this. | Array of strings  |\n| Enable multiple selection | Toggle this to allow multiple button selection. | Toggle to true/false |\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to display mobile view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- | \n| Background color |  You can change the background color of the widget by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Text color |  You can change the color of the Text in button by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n| Disable | Toggle on to lock the widget. You can programmatically change its value by clicking on the `Fx` button next to it, if set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Border radius | Use this property to modify the border radius of the button. |\n| Selected text color | Use this property to modify the background colour of text in selected button |\n| Selected background color | Use this property to modify the background colour of selected button |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "HTML",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/html.md",
    "content": "\nid: html\ntitle: HTML \n\nHTML\nHTML widget can be used to create your own HTML-CSS layout.\n\n\n\nProperties\nRaw HTML\nThe Raw HTML needs to be an HTML. In order to provide styles, one can add inline css to the respective HTML tags\nExample:\n```json\n\n\n\n\n\n          You can build your custom HTML-CSS template here\n        \n\n\n\n```\n\n\n\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n| Layout          | description                               | Expected value                                                                                                |\n| --------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display mobile view.  | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n| Style      | Description                                                                                                                                                                                                                                              |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Multiselect",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/multiselect.md",
    "content": "\nid: multiselect\ntitle: Multiselect\n\nMultiselect\nMultiselect widget can be used to collect multiple user inputs from a list of options.\n\n\n\nEvents\nOn select\nOn select event is triggered when an option is selected.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\nLabel\nThe text is to be used as the label for the multiselect widget.\nDefault value\nThe value of the default option. This should always be an array.\nOption values\nValues for different items/options in the list of the multiselect.\nOption labels\nLabels for different items/options in the list of the multiselect.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nBorder radius\nAdd a border radius to the multiselect using this property. It accepts any numerical value from `0` to `100`.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |\n| `selectOption` | Select options. | pass options as parameter. ex: `components.multiselect1.selectOption(1)` |\n| `deselectOption` | Deselect options.| pass options as parameter. ex: `components.multiselect1.deselectOption(1)` |\n| `clearSelections` | Clear all selection. |  ex: `components.multiselect1.clearSelections()` |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Divider",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/divider.md",
    "content": "\nid: divider\ntitle: Divider\n\nDivider\nDivider widget is used to add separator between components. \n\n\n\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| properties      | description |\n| ----------- | ----------- |\n| Show on Desktop |  This property have toggle switch. If enabled, the divider will display in the desktop view else it will not appear. |\n| Show on Mobile |  This property have toggle switch. If enabled, the divider will display in the mobile view else it will not appear. |\nStyles\n\n\n\n| properties      | description |\n| ----------- | ----------- |\n| Divider Color |  It is used to set the color of the divider. Use hex code to set the background color. |\n| Visibility |  This property is used to set the visibility of the divider. The property accepts Boolean value. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "SVG Image",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/widgets/svg-image.md",
    "content": "\nid: svg-image\ntitle: Svg Image\n\nSVG Image\nIt is used to render vector images. We can display images, icons, texts using this widget. SVGs are vector images and therefore are usually much smaller in file-size than bitmap-based images.\nDevelopers prefer having SVG (Scalable Vector Graphics) files as they are scalable and will render pixel-perfect at any resolution whereas JPEGs, PNGs and GIFs will not. \n\n\n\nProperties\nSVG Data\nEnter the SVG data of the image to display it on the widget. \n:::tip\nRefer to the resources where SVG files are downloaded for free. You copy-paste the below data in this field to see a new icon being rendered.\n:::\n`<svg fill=\"#000000\" xmlns=\"http://www.w3.org/2000/svg\"  viewBox=\"0 0 16 16\" width=\"32px\" height=\"32px\"><path d=\"M 7.5 1 C 3.910156 1 1 3.90625 1 7.488281 C 1 10.355469 2.863281 12.789063 5.445313 13.648438 C 5.769531 13.707031 6 13.375 6 13.125 C 6 12.972656 6.003906 12.789063 6 12.25 C 4.191406 12.640625 3.625 11.375 3.625 11.375 C 3.328125 10.625 2.96875 10.410156 2.96875 10.410156 C 2.378906 10.007813 3.011719 10.019531 3.011719 10.019531 C 3.664063 10.0625 4 10.625 4 10.625 C 4.5 11.5 5.628906 11.414063 6 11.25 C 6 10.851563 6.042969 10.5625 6.152344 10.378906 C 4.109375 10.019531 2.996094 8.839844 3 7.207031 C 3.003906 6.242188 3.335938 5.492188 3.875 4.9375 C 3.640625 4.640625 3.480469 3.625 3.960938 3 C 5.167969 3 5.886719 3.871094 5.886719 3.871094 C 5.886719 3.871094 6.453125 3.625 7.496094 3.625 C 8.542969 3.625 9.105469 3.859375 9.105469 3.859375 C 9.105469 3.859375 9.828125 3 11.035156 3 C 11.515625 3.625 11.355469 4.640625 11.167969 4.917969 C 11.683594 5.460938 12 6.210938 12 7.207031 C 12 8.839844 10.890625 10.019531 8.851563 10.375 C 8.980469 10.570313 9 10.84375 9 11.25 C 9 12.117188 9 12.910156 9 13.125 C 9 13.375 9.226563 13.710938 9.558594 13.648438 C 12.140625 12.785156 14 10.355469 14 7.488281 C 14 3.90625 11.089844 1 7.5 1 Z\"/></svg>`\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility",
    "tag": "tooljet"
  },
  {
    "title": "App-Builder: Overview",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/app-builder/overview.md",
    "content": "\nid: overview\ntitle: Overview\n\nApp-Builder: Overview\nToolJet's App Builder allows you to build applications. ToolJet's app builder has the following major components:\n\nToolbar: configure app settings\nCanvas: Arrange the components to build the interface of app\nLeft-sidebar: Add pages, datasources, inspect the components, queries or variables, and debug the errors.\nComponents library(right sidebar): Drag any component or modify the property or styling\nQuery Panel: Create, edit or manage the queries\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "toolbar.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/app-builder/toolbar.md",
    "content": "\nid: toolbar\ntitle: Toolbar\n\nToolbar is present at the top of the app-builder, and is used to configure the app settings.\n\n\n\nApp name\nApp name can be edited from the left side of the toolbar next to the ToolJet logo.\nWhen a new app is created, by default its name is set to Untitled app\n\n\n\nGlobal Settings\nTo configure the app's global settings, click on the kebab menu(three vertical dots) on the left of the app name. Global settings include:\n\nHide heaeder for launched apps: Toggle this on to the hide the tooljet's header when the applications are launched\nMaintenance mode: Toggle this on to put the application in maintenance mode. When in maintenance mode, on launching the app, the user will get an error message that the app is under maintenance.\nMax width of canvas: Modify the width of the canvas in px or %. The default width is 1292 px.\nMax height of canvas: Modify the width of the canvas in px or %. The default height is 2400 px and currently it is the maximum height limit.\nBackground color of canvas: Enter the hex color code or choose a color from the picker to change the background color of the canvas. You can also click on the Fx to programmatically set the value.\n\n\n\n\nDesktop or Mobile layout\nSwitch the canvas mode in Mobile or Desktop layout from the toolbar.\nAdding existing component to mobile layout\nClick on the component handle to open component config inspector on the right side. Scroll down to the Layout section and enable Mobile Layout. The width of the widget will be adjusted to fit the Mobile Layout.\nAdding a new component to mobile layout\nSwitch the layout to mobile by clicking the button on the toolbar. Drag and drop a component to the canvas. This widget will not be shown on desktop layout unless Show on desktop is enabled from the component config inspector.\n:::info\nWidth of the component will be automatically adjusted to fit the screen while viewing the application in app viewer.\n:::\n\n\n\nUndo or Redo\nUse the undo or redo buttons from the toolbar to undo or redo any change on the canvas.\nYou can also Keyboard Shortcuts to perform such actions.\n\n\n\nVersion Manager\nCreate or Remove Versions of the applications from the Version Manager. You can also edit the version name from the edit button.\nWhen many developers are working on an app, Versioning allows them to save their own version of the app. This also prevents developers from overwriting the other developer's work.\n\n\n\nComments\nComment anywhere on the canvas and collaborate with other users in the workspace. Click on the comments button to enable it and then drop comment anywhere on the canvas.\n\n\n\nShare\nShare your applications with a unique URL generated automatically or edit the URL slug to personalize it.\n\nWhen Make the application public is off and URL is shared then the users will have to login to ToolJet to use the application. Toggle on the option then anyone on the internet will be able to access the application without logging in to ToolJet.\nToolJet generates the Embedded link which can be used to embed application on the webpages.\n\n\n\n\nPreview\nClicking on Preview button will open up the currently opened version of the app in the new tab. This is really handy when the app developer wants to immediately check the app preview in production.\n\n\n\nRelease\nRelease the app to publish the current version of the app and push the changes into the production.\n:::caution\nToolJet will block editing of the Released version of an app and will display a prompt to create a new version to make the changes. This is to prevent accidentally pushing an unfinished app to the live version.\n:::\n\n",
    "tag": "tooljet"
  },
  {
    "title": "canvas.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/app-builder/canvas.md",
    "content": "\nid: canvas\ntitle: Canvas\n\nCanvas is the center area of the ToolJet app builder where the application is built. You arrange the components by dragging them from the Components library(right-sidebar).\n\n\n\nArrange Components\nAll the components are fully interactive in editor mode - to prevent interaction you can click and hold the Component Handle to change component's position.\n\n\n\nResize Components\nComponents on the canvas can be resized from the edges.\nYou can precisely set the position of selected components using keyboard arrow keys after clicking the component handle.\n\n\n\nGroup Components\nToolJet comes with flexible components to group other components together, such as Container and Form. When you drag and drop components in containers/forms they create a group of nested components. All components can be nested in this way.\nHide or Disable Components\nHide or Disable a component by setting its Visibility or Disabled property to `true`. Click on the component handle to open config inspector on right side. These values can also evaluate to true based on a truthy value. For example, you can use the property of one component to toggle the Visibility property of another component dynamically, you just need to write a conditional statement. \nFor example: We want to disable a button when a checkbox is checked so we can simple use `{{components.checkbox1.value}}` in Disable property of the button. `{{components.checkbox1.value}}` evaluates to `true` when the checkbox is checked, and false when unchecked.\n\n\n\nClone Components\nYou can clone existing components on the canvas by cmd/ctrl + d. Check other Keyboard Shortcuts",
    "tag": "tooljet"
  },
  {
    "title": "Query Manager",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/app-builder/query-panel.md",
    "content": "\nid: query-panel\ntitle: Query Panel\n\nThe Query Panel is present at the bottom of the app-builder, this is where you create queries to interact with connected datasources. You can perform API requests, query databases, or transform or manipulate data with JavaScript & Python.\nThe Query Panel has two sections:\n- Query Manager on the right that includes a list of all the created queries\n- Query Editor is used to configure the selected query\n\n\n\nQuery Manager\nQuery Manager will list all the queries that has been created in the application. Query Manager is used to:\nSearch\nOn the top of the query manager is search box that can be used to search for a specific query.\n\n\n\nAdd\nAdd button is used to add more queries in the application. When Add button is clicked, the Query Editor will show you a list of options for creating a query from: Rest API, connected datasources, ToolJet Database, JavaScript Code, Python Code or Add a new datasource.\n\n\n\nDelete\nDelete button will delete the selected query, the button will only show up when you hover over the query name.\n\n\n\nEdit\nEdit button is used edit the name of the selected query, the button will only show up when you hover over the query name.\n\n\n\nQuery Editor\nQuery editor used to configure the query parameters, preview or transform the data return by the query.\n\n\n\nTopbar\nOn the top of the query panel there are a few options:\nQuery Name editor\nEdit the name of the query by clicking on the edit button next to the default query name.\n\n\n\nPreview\nPreview gives you a quick look at the data returned by the query without triggering the query in the app.\nThe Preview of data is returned in two different formats:\nRaw\n\n\n\nJSON\n\n\n\nSave\nSave is used to save the changes whenever a change is made in query.\n\n\n\nRun\nRun is used to trigger the query, running the query will interact with the application unlike `Preview`.\n\n\n\nQuery Parameters\nQuery Parameters are the values required for the query to return a response from the server. Parameters include endpoints, methods, or operations. Query Parameters are different for each datasource.\n\n\n\nTransformation\nTransformations can be enabled on queries to transform the query results. ToolJet allows you to transform the query results using two programming languages JavaScript & Python. Check the detailed documentation on Transformations.\n\n\n\nAdvanced options\nRun this query on application load?\nEnabling this option will fire the query every time the app is loaded.\nRequest confirmation before running the query?\nEnabling this option show a confirmation modal to confirm `Yes` or `No` if you want to fire that query.\nRun this query on application load?\nEnabling this option show a success toast notification when the query is successfully triggered.\nEvent Handlers\nEvent Handler are used to add some action when a particular event happens. You can add event handlers to the query for the following events:\n\nQuery Success\nQuery Failure\n\n:::info\nLearn more about Event Handlers and Actions.\n:::\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Pages",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/app-builder/left-sidebar.md",
    "content": "\nid: left-sidebar\ntitle: Left-sidebar\n\nLeft-sidebar has the following options:\n\nPages\nInspector\nDatasources Manager\nDebugger\nTheme switch\n\n\n\n\nPages\nPages allows you to have multiple pages in a single application, making your ToolJet applications more robust and user-friendly.\nCheck the detailed documentation for Pages.\n\n\n\nInspector\nThe Inspector can be used to inspect the data of the queries, properties and values of the components that are there on the canvas, ToolJet's global variables and the variables that have been set by the user.\nCheck the detailed guide on using Inspector.\n\n\n\nDatasources Manager\nDatasources Manager is used to connect or remove the datasources. \nCheck the detailed Datasources documentation.\n\n\n\nDebugger\nThe debugger captures errors that happens while running the queries. For example, when a database query fails due to the unavailability of a database or when a REST API query fails due to an incorrect URL, the errors will be displayed on the debugger. The debugger also displays relevant data related to the error along with the error message.\n\n\n\nTheme switch",
    "tag": "tooljet"
  },
  {
    "title": "Component Config Inspector",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.0.0/app-builder/right-sidebar.md",
    "content": "\nid: components-library\ntitle: Components Library\n\nThe Components Library on the right sidebar contains all of the available components. Use this to drag-and-drop a component from the library to the canvas. It organizes components into sections and you can enter a search term to quickly find a component you need.\n\n\n\n:::tip\nCheck the Components Catalog here to know more about specific component.\n:::\nComponent Config Inspector\nThe Component Config Inspector is also called as component inspector. It contains all the available settings for the selected component and is where you set values, update component names, and create event handlers. The Compoenent Inspector organizes settings into different sections, such as Property and Styles. \nTo open the Component Config Inspector, click on the component handle that is present on the top of the component including \u2699\ufe0f + Component Name and the component inspector will open up on the right side:\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "ToolJet Marketplace",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/marketplace.md",
    "content": "\nid: marketplace\ntitle: Marketplace\n\nToolJet Marketplace\nToolJet marketplace for plugins will allow users to install the custom plugins (datasources) for their ToolJet instances. This will allow ToolJet users to build their own custom plugins according to their requirements and then easily connect them to ToolJet.\nEnabling the marketplace for your instance\nUsers must add the following environment variable to the .env file to enable the marketplace feature:\n`bash\nENABLE_MARKETPLACE_FEATURE=true`\nOnce the marketplace feature is enabled, users can open the Marketplace page from the dropdown on the navbar of the dashboard. Users can also directly access the marketplace using the URL: `https://tooljet.yourcompany.com/integrations`\n:::info\nThe user logged-in should be the Administrator to access the marketplace page.\n:::\nInstalling a plugin\nWhen you create a plugin using the tooljet cli, an object is created in the plugins.json (`ToolJet/server/src/assets/marketplace/plugins.json`) file for that particular plugin.\nHere's an example of an entry created for AWS S3 plugin:\n`json\n[\n  {\n    \"name\": \"AWS S3 plugin\",\n    \"description\": \"Datasource plugin for AWS S3\",\n    \"version\": \"1.0.0\",\n    \"id\": \"s3\",\n    \"repo\": \"\",\n    \"author\": \"Tooljet\",\n    \"timestamp\": \"Mon, 31 Oct 2022 11:02:10 GMT\"\n  }\n]`\nNow to install the plugin to the marketplace, you'll have to install npm package to a plugin:\n`bash\nnpm i <npm-package-name> --workspace=<plugin-name-in-package-json>`\nFinally, run the build commands:\n`bash\nnpm install\nnpm run build --workspaces`\nOnce done, you'll find the plugin on the marketplace page.\nRemoving a plugin\nTo remove a plugin from the marketplace, you can simply remove the object entry of the plugin from the plugins.json(`ToolJet/server/src/assets/marketplace/plugins.json`) and then re-run the build commands.\nUsing a plugin as datasource\nThe flow for installing and using a plugin as a datasource is really simple. The steps are:\n- Go to the Marketplace\n- Click the Marketplace link in the left sidebar to view all available plugins.\n    \n\n\n```<img className=\"screenshot-full\" src=\"/img/marketplace/marketplacemain.png\" alt=\"Marketplace\" />\n\n</div>\n```\n\n\n\nClick on the Install button of the plugin that you want to install\n\nOnce installed, you can check the installed plugins from Installed on the left sidebar. You can also remove the plugins from the Installed section of the marketplace.\n    \n\n\n- Now, let's use the installed plugin as the datasource for an application. User will have to open the application, go to the Add Datasource button on the left sidebar of the app builder, and then select Plugins on the modal that pops-up. The Plugins section will include all the plugins installed via Marketplace. The next steps are same as connecting a datasource to the application.\n\n\n\n\n\nCreating a marketplace plugin\nThe steps for creating a Marketplace plugin are similar to those for creating plugins for ToolJet except that for a Marketplace plugin, the user will have to type `yes` when prompted `Is it a marketplace integration?` in the `tooljet command line`.\nThe steps to create a marketplace plugin are:\n\nInstall tooljet-cli:\n  `bash\n  npm i -g @tooljet/cli`\nBootstrap a new plugin using cli\n  `bash\n  tooljet plugin create bigquery`\nOn the CLI, you'll be prompted to enter a display name:\n  `bash\n  Enter plugin display name:`\nIn the next step, you'll be asked to choose a plugin type database, api, or cloud-storage\nNow choose if `Is it a marketplace integration?` by entering `y/N`\nEnter the repository URL if the plugin is hosted on GitHub or else just press enter to skip to the next step\nOnce done, all the plugin files will be generated inside the marketplace directory\n  `bash\n  creating plugin... done\n  Plugin: bigquery created successfully\n  \u2514\u2500 marketplace\n    \u2514\u2500 plugin\n        \u2514\u2500 bigquery`\n\n:::info\nFor more information on creating plugin for ToolJet, please see the documentation on creating plugins.",
    "tag": "tooljet"
  },
  {
    "title": "Tracking    ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/tracking.md",
    "content": "\nid: tracking\ntitle: Tracking\nslug: /tracking\n\nTracking\n:::tip\nToolJet does not store any data fetched from the data sources. ToolJet acts as a proxy and the data from data sources is sent to the client application without storing.\n:::\nServer\n:::tip\nSelf-hosted version of ToolJet pings our server to fetch the latest product updates every 24 hours. You can disable this by setting the value of `CHECK_FOR_UPDATES` environment variable to `0`. This feature is enabled by default.\n:::\nClient\nToolJet tracks anonymous usage data such as page loads and clicks. ToolJet tracks only the events and doesn't capture data from data sources.",
    "tag": "tooljet"
  },
  {
    "title": "Welcome to ToolJet Docs",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/getting-started.md",
    "content": "\nid: getting-started\ntitle: Getting Started\ndescription: ToolJet is an open-source low-code framework to build and deploy custom internal tools. ToolJet can connect to your data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ). Once the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc.\nslug: /\n\nWelcome to ToolJet Docs\n\nWhat is ToolJet\nToolJet is an open-source low-code framework to build and deploy custom internal tools. \nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ). \nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\n\nHow ToolJet works\n\n\n\nWith ToolJet, you can build apps in 3 simple steps:\n\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as `on click`, `on row selected`, `on page changed`, etc. ToolJet apps can be used in light and dark mode.\n:::tip\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n:::\nChoose your ToolJet\n\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\n\n:::info\n- Data security is top priority at ToolJet, read about our data security here.\n:::\nThe very quick quickstart\nLet's say you're an eCommerce company and your Customer Support/Operations team need a Support Tool/Admin panel for managing the orders, updating inventory, and track revenue and metrics. This quickstart will guide you through building your first custom internal tool in less than 5 minutes.\nYou will:\n- Create a database\n- Create a new application\n- Build the UI\n- Build queries and bind data to UI\n- Preview, Release and Share app\n:::tip\nBefore getting into the quickstart, Sign up and create your account on ToolJet.\n::: \nCreate a database\n\n\nNavigate to ToolJet DB Editor from the left sidebar on the dashboard\n    \n\n\n\n\nClick on Add Table button, enter Table name and Add columns from the drawer that slides from the right.\n    \n\n\n\n\nOnce the table is created, click on the Add new row button to add the data to the table and click Create.\n    \n\n\n\n\n:::info\nLearn more about the ToolJet Database here\n:::\nCreate a new application\n\n\nTo create a new ToolJet application, go to the Dashboard -> New App from scratch. \n\n\n\n:::info\nYou can also use the existing UI templates for your application or import an application to your workspace.\n:::\n\n\nWhen you click on create new app the App-builder will open up. You can rename your application from `untitled` to Support Tool from the top left of app-builder.\n    \n\n\n\n\nBuild the UI\n\nLet's build the UI of the application by dragging and dropping the components on the canvas.\n\nTo build the UI, we will use:\n\nTable for displaying the customers data \nText components for the Title and description of the app as the header\nText Input component for getting product name input from the user\nNumber Input component for getting product quantity and price input from the user\nButton component that will be used to trigger the query for inserting a row in the database using the button's OnClick event handler\n\n\n\n\n\n\n:::info\nToolJet application's User interface is constructed using Components like Tables, Forms, Charts, or Buttons etc. Check Components Catalog to learn more.\n:::\nBuild queries and bind data to UI\n\n\nWe can add a new datasource from the Datasource manager on the left-sidebar of the app builder but since we are using ToolJet Database we don't need to add any external datasource. Go to the Query Panel -> Run ToolJetDb Query\n\n\n\n:::info\nToolJet can connect to several databases, APIs and external services to fetch and modify data. Check Datasource Catalog to learn more.\n:::\n\n\nChoose a Table from the dropdown, Select the List rows option from the Operation dropdown, You can leave other query parameters. Scroll down and enable Run this query on application load - this will trigger the query when the app is loaded. \n\n\nClick on Create to create the query and then click Run to trigger the query and get response. You can also check the query response by clicking Preview button without firing the query.\n    \n\n\n\n\nGo to the Table properties by clicking on the component handle and bind the data returned by the query in the Table data property. When building apps in ToolJet anything inside `{{}}` is JavaScript and we javascript dot notation to get the data from query and populate the table using {{queries.tooljetdb1.data}}. The table will be auto-populated once the table data is entered.\n    \n\n\n\n\nLet's create another query that will get the data from the input fields and will add a new row in the tooljet database. Create New Query -> Select Table (Customers) -> Select Operation (Create row) -> add the following columns with the respective value:\n\nid - `{{components.textinput1.value}}`\nquantity - `{{components.numberinput1.value}}`\nprice - `{{components.numberinput2.value}}`\ncreated_at - `{{moment().format(\"DD/MM/YYYY hh:mm A\")}}` (We are using momentjs library to get the current date from the system rather than getting input by the user )\n\n\n\n\n:::tip\nYou can also add event handler to this query for On Success event to run the `tooljetdb1` query that populates the table, so that whenever this is successful the table is refreshed.\n:::\n\n\nNow, let's bind this query to the Add Product button. Click on the button handle to open its properties, Add an handler -> Select Event (On Click) -> Select Action (Run Query) -> Select Query (tooljetdb2). \n    \n\n\n\n\n:::info\n- You can manipulate the data returned by the queries using Transformations\n- You can also Run JS query or Python query to perform custom behavior inside ToolJet\n:::\nPreview, Release and Share app\n\nClick on the Preview on the top-right of app builder to immediately check the currently opened version of the app in production. \nClick on the  Release button to publish the currently opneded version of the app and push the changes to production.\nShare option allows you to share the released version of the application with other users or you can also make the app public and anyone with the URL will be able to use the app.\n\n:::tip\nYou can control how much access to users have to your ToolJet apps and resources using Org Management.\n:::\nWhat Can I Do With ToolJet\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started: \n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\nFor ToolJet Contributors\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n\n\n\n\n\n\nHelp and Support\n\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\n",
    "tag": "tooljet"
  },
  {
    "title": "Enabling the ToolJet Database for your instance",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/tooljet_database.md",
    "content": "\nid: tooljet-database\ntitle: ToolJet Database\n\nUse the ToolJet-hosted database to build apps faster, and manage your data with ease. ToolJet database require no setup and give you a powerful user interface for managing your data.\n\n\n\nEnabling the ToolJet Database for your instance\nRequires:\n- PostgREST server\n- Additional configuration for ToolJet server\nThis feature is only enabled if ENABLE_TOOLJET_DB is set to `true`.\nPostgREST server\nPostgREST is a standalone web server that turns your PostgreSQL database directly into queryable RESTful APIs which is utilized for Tooljet Database. This server only talks with ToolJet server and therefore does not have to be publicly exposed.\n:::tip\nIf you have openssl installed, you can run the following command `openssl rand -hex 32` to generate the value for `PGRST_JWT_SECRET`.\nIf this parameter is not specified then PostgREST refuses authentication requests.\n:::\n| variable           | description                                     |\n| ------------------ | ----------------------------------------------- |\n| PGRST_JWT_SECRET   | JWT token client provided for authentication    |\n| PGRST_DB_URI       | database connection string for tooljet database |\n| PGRST_LOG_LEVEL    | `info`                                          |\n:::info\nPlease make sure that DB_URI is given in the format `postgres://[USERNAME]:[PASSWORD]@[HOST]:[PORT]/[DATABASE]`\n:::\nAdditional ToolJet server configuration\n| variable           | description                                  |\n| ------------------ | -------------------------------------------- |\n| ENABLE_TOOLJET_DB  | `true` or `false`                            |\n| TOOLJET_DB         | Default value is `tooljet_db`                |\n| TOOLJET_DB_HOST    | database host                                |\n| TOOLJET_DB_USER    | database username                            |\n| TOOLJET_DB_PASS    | database password                            |\n| TOOLJET_DB_PORT    | database port                                |\n| PGRST_JWT_SECRET   | JWT token client provided for authentication |\n| PGRST_HOST         | postgrest database host                      |\nIf you intent to make changes in the above configuration. Please refer PostgREST configuration docs.\n:::tip\nWhen this feature is enabled, the database name provided for `TOOLJET_DB` will be utilized to create a new database during server boot process in all of our production deploy setups.\nIncase you want to trigger it manually, use the command `npm run db:create` on ToolJet server.\n:::\nFeatures\nToolJet database allows you to:\n\nMaintain tables of data in a secure database that's only accessible within your ToolJet organization.\nEdit, search, filter, sort, and filter data using a spreadsheet-like interface.\nQuickly build applications and write queries to interact with the ToolJet Database, just like any other datasource but without any setup.\n\nAccessing ToolJet Database\nOnce you log-in to your ToolJet account, from the left sidebar of the dashboard you can navigate to ToolJet Database.\nThe ToolJet Database is available on: ToolJet Cloud, Self-Host, and Enterprise Edition. You can view and manage your database and the data it contains using the Database editor UI.\n\n\n\nDatabase Editor\nYou can manage the ToolJet Database directly from the Database Editor. ToolJet Database organizes the data into tables that can have different structures. All the tables will be listed lexicographically on the left, click on any of the table to view the table data.\n\n\n\nAdd table\nFor creating a new table in ToolJet Database, click on the Add table button on the top left corner of the Database editor.\n\n\n\nWhen the Add table button is clicked, a drawer opens up from the right where you can enter the details of your new table.\n\n\n\nFor creating a new table, you'll need to:\n\nEnter a Table name\nAdd Columns (Any one column is required to be set as Primary key)\n\nSupported data types\n\nvarchar: varchar data type is used to store characters of indefinite length\nserial: serial is used to generate a sequence of integers which are often used as the Primary key of a table.\nint: It is a numeric data type used to store whole numbers, that is, numbers without fractional components.\nfloat: float is also a numeric data type that is used to store inexact, variable-precision values.\nboolean: boolean data type can hold true, false, and null values.\n\nClick on Create button to create a new table.\n\n\n\nSearch Table\nYou can enter a search term to search through all tables in the database.\n\n\n\nAdd column\nYou can add a new column to the existing table by clicking on the Add new column button from the top of the database editor.\nA drawer from the right will open up from where you can create a new column by entering the values for the new column such as:\n- Column name: name of the column (key)\n- Data type: Check available data types here\n- Default Value Any default value for the column (not mandatory)\n\n\n\nFilter\nYou can add as many filter as you want into the table by clicking on the Filter button present on the top of the database editor.\nAdding a filter on the table data\n\nSelect a column from the Columns dropdown\nChoose an operation\nEnter a value for the selected operation\n\nAvailable operations are:\n\nequals\ngreater than\ngreater than or equal\nless than\nless than or equal\nnot equal\nlike\nilike\nmatch\nimatch\nin\ncontains\ncontained\nnot\n\n\n\n\nSort\nTo sort the table data, click on the Sort button on top, select a column from the dropdown, and then choose an order ascending or descending.\n\n\n\nAdd new row\nTo add a new row to the existing table data, click on the Add new row button. A drawer will open from the right where you can enter the values for the new row.\n\n\n\nDelete records\nTo delete one or many records/rows, select on the checkbox at the right of the record or records that you want to delete. As soon as you select a single record, the button to delete record will appear on the top, click on the Delete record button to delete the selected records.\n\n\n\nDelete column\nTo delete a particular column, just click on the column name and the delete button will appear, click on it to delete the column.\n\n\n\nEdit or Delete a table\nWhen you click on the kebab menu (three vertical dots icon) on the right of the table name, you'll get two options: Edit and Delete.\n- Edit will allow you to rename the table\n- Delete will allow you to delete the table permanently\n\n\n\nQuerying data from the ToolJet database\nQuerying ToolJet database is as easy as querying any other datasource on ToolJet.\n\n\nGo to the query panel, and click on the +Add button to add a new query, and select Run ToolJetDb query\n\n\n\n\n\nEnter the Name of the table that you want to query, select an Operation from the dropdown, Create the query, and then Run the query to get the response.\n    \n\n\n\n\n:::info\n- Preview button on the query panel returns the query response without executing the query. Once clicked, the response will be displayed on the Preview section of the query panel which can be viewed in JSON or Raw.\n- When a new query is created, by default the query name is set to `tooljetdbN` (where N is a number) - you can rename the query by click on the query name or from the left sidebar of query panel.\n:::\nAvailable operations\nList rows\nThis operation returns the list of all the records in the table\nOptional parameters\n\nFilter: Add a filter to the query response by setting a column, operation and value.\nSort: Add a sort to the query response by setting a column and direction.\nLimit: Limit the query response. This parameter expects a numerical value. ex: 5\n\nCreate row\nThis operation creates a new record in the table\nRequired parameters\n\nColumns: Choose a column from the dropdown and enter a value for the new record.\n\nUpdate row\nThis operation updates an existing record in the table\nRequired parameter\n\nFilter: Add a condition by choosing a column, an operation, and the value for updating a particular record.\n\nDelete row\nThis operation deletes a record from the table\nRequired parameters\n\nFilter: Add a condition by choosing a column, an operation, and the value for deleting a particular record.\n\n:::info\nIf you have any other questions or feedback about ToolJet Database, please reach us out at hello@tooljet.com or join our Slack Community",
    "tag": "tooljet"
  },
  {
    "title": "Security",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/security.md",
    "content": "\nid: security\ntitle: Security\nslug: /security\n\nSecurity\nData storage\nToolJet does not store data returned from your data sources. ToolJet server acts as a proxy and passes the data as it is to the ToolJet client. The credentials for the data sources are handled by the server and never exposed to the client. For example, if you are making an API request, the query is run from the server and not from the frontend.\nDatasource credentials\nAll the datasource credentials are securely encrypted using `aes-256-gcm`. The credentials are never exposed to the frontend ( ToolJet client ).\nOther security features\n\nTLS: If you are using ToolJet cloud, all connections are encrypted using TLS. We also have documentation for setting up TLS for self-hosted installations of ToolJet.\nAudit logs: Audit logs are available on the enterprise edition of ToolJet. Every user action is logged along with the IP addresses and user information.\nRequest logging: All the requests to server are logged. If self-hosted, you can easily extend ToolJet to use your preferred logging service. ToolJet comes with built-in Sentry integration.\nWhitelisted IPs: If you are using ToolJet cloud, you can whitelist our IP address (3.129.198.40) so that your datasources are not exposed to the public.\nBackups: ToolJet cloud is hosted on AWS using EKS with autoscaling and regular backups.\n",
    "tag": "tooljet"
  },
  {
    "title": "Single Sign-On General Settings",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/user-authentication/general-settings.md",
    "content": "\nid: general-settings\ntitle: General Settings\n\nSingle Sign-On General Settings\n\n\nGo to the Workspace Settings (\u2699\ufe0f) from the left sidebar in the ToolJet dashboard\n\n\n\n\n\n\n\nSelect `SSO` from sidebar and then select General Settings\n\n\n\n\n\n\n\nEnable Signup\nYou can enable/disable `Enable signup`. If it is enabled, new account will be created for user's first time SSO sign in else only existing users will be allowed to sign in via SSO.\nAllowed domains\nYou can set allowed domains for SSO login, can add multiple domains comma separated. Allowed all domains by default.\nLogin URL\nYou can use the login URL to login directly to the workspace. This will be hidden if Multi-Workspace is disabled.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "User Lifecycle",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/user-authentication/user-lifecycle.md",
    "content": "\nid: user-lifecycle\ntitle: User Lifecycle\n\nUser Lifecycle\nSingle-Workspace\nUser onboarding\n\nIf no user is present in the system, there will be `Sign-up` option in the login page. User can sign up by entering their email address. Tooljet will be sending a welcome email with activation URL to the email address. User can follow the activation URL and onboard to ToolJet.\n\n\n\n  ![ToolJet - Single-Workspace sign up](/img/user-lifecycle/single-ws-signup.png)\n\n  \n\nUser with admin privileges can invite members\n\n\n\n  ![ToolJet - Single-Workspace invite user](/img/user-lifecycle/user-invite-sw.png)\n\n  \n\nInvited user will receive welcome email with activation URL, unregistered user can follow the link and setup Tooljet account\n\n\n\n  ![ToolJet - Single-Workspace accept invite](/img/user-lifecycle/accept-invite-sw.png)\n\n  \n\nInvited user can onboard through SSO login, without using an invitation link\n\n\n\n  ![ToolJet - Single-Workspace accept invite](/img/user-lifecycle/sso-onboard-sw.png)\n\n  \n\nIf `enable signup` option in enabled in SSO general settings, user can setup account through SSO login without an invite\n\n\n\n  ![ToolJet - Single-Workspace sign up using SSO](/img/user-lifecycle/sso-enable-signup-sw.png)\n\n  \nArchive user\n\n\nUser can be archived by workspace admin from using `Manage User` page\n\n\n\n\n\nUnarchive user\n\n\nUser can be unArchived by workspace admin from using `Manage User` page\n\n\n\n\n\n:::info\n  Archive or unarchive will affect user login, user won't be able to login using email id and password unless user is in active state\n  :::\nMulti-Workspace\n:::info\nCheck Multi-workspace docs here.\n:::\nUser onboarding\n\n\nUser can sign up using the sign up link provided on the login page, user will receive a welcome email with activation link. New workspace will be created for the user.\n\n\n\n\n\nUsers can be added to multiple workspaces. Users can create their own workspaces and manage them.\n\n\n\n\n\nExisting user in active state for a workspace can be invited and on boarded to other workspaces, User will receive an invitation email with join link. If a user does not exist in the system, then they will receive a welcome email to setup the account, user can follow the link and on setup the account, once its done the user will be assigned to the new workspace created for the user.\n\n\n\n\n\nInvited user can onboard through SSO login,  without using an invitation link from the workspace login page\n\n\n\n\n\nIf `enable sign up` option in enabled in SSO general settings for the workspace, user can setup account through SSO login without an invite from the workspace login page\n\n\n\n\n\nArchive user\n\n\nUser can be archived by workspace admin from using `Manage User` page\n\n\n\n\n\nUnarchive user\n\n\nUser can be unarchive by workspace admin from using `Manage User` page\n\n\n\n\n\n:::info\n  Archive or unarchive will not affect user login, user can login and use other workspaces where user is in active state.\n  :::\nSwitch between workspaces\n\n\n  ![ToolJet - Single-Workspace sign up using SSO](/img/user-lifecycle/switch.png)\n\n  \nUser status\n| Status   | Able to log in   | How to activate                      |\n| -------- | ---------------- | ------------------------------------ |\n| active   | Yes              |                                      |\n| invited  | No (Yes with SSO)| Login through SSO or invitation link |\n| archived | No               | Not able to activate. Invite from `Manage Users` page, status will be changed to invited |\nMulti-Workspace SSO flow\n\nDiagram shows how SSO configurations are chosen in common login page and workspace login page. Instance level SSO is configured in environment variables and Workspace level SSO is configured in respective `Manage SSO` page.\n\n\n\n    ![ToolJet - SSO Flow](/img/user-lifecycle/sso-flow.png)",
    "tag": "tooljet"
  },
  {
    "title": "GitHub Single Sign-on",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/user-authentication/sso/github.md",
    "content": "\nid: github\ntitle: GitHub\n\nGitHub Single Sign-on\n\n\nGo to the Workspace Settings (\u2699\ufe0f) from the left sidebar in the ToolJet dashboard\n\n\n\n\n\n\n\nSelect `SSO` from sidebar and then select GitHub. GitHub login will be disabled by default,\n\n\n\n\n\n\n\nEnable GitHub. You can see `Redirect URL` generated\n\n\n\n\n\n\n\nGo to GitHub Developer settings and navigate to `OAuth Apps` and create a project. `Authorization callback URL` should be the generated `Redirect URL` in Git manage SSO page.\n\n\n\n\n\n\n\nOpen the application details, and you can see the `Client ID`\n\n\n\n\n\n\n\nThen create `Client secrets` by clicking `Generate new client secret`\n\n\n\n\n\n\n\nLastly, enter Client Id and Client Secret in GitHub manage SSO page and save.\nThe GitHub sign-in button will now be available in your ToolJet login screen if you have not enabled Multi-Workspace.\n:::info\nShould configure `Host Name` if you are using GitHub Enterprise self hosted. Host name should be a URL and should not ends with `/`, example: `https://github.tooljet.com`\n:::\nMulti-Workspace\nIf you have enabled Multi-Workspace you can configure GitHub SSO as mentioned above, for setting default SSO for the instance use environment variable.\n| variable                              | description                                                   |\n| ------------------------------------- | -----------------------------------------------------------   |\n| SSO_GIT_OAUTH2_CLIENT_ID              | GitHub OAuth client id |\n| SSO_GIT_OAUTH2_CLIENT_SECRET          | GitHub OAuth client secret |\n| SSO_GIT_OAUTH2_HOST                   | GitHub OAuth host name if GitHub is self hosted |",
    "tag": "tooljet"
  },
  {
    "title": "Google Single Sign-on",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/user-authentication/sso/google.md",
    "content": "\nid: google\ntitle: Google\n\nGoogle Single Sign-on\n\n\nGo to the Workspace Settings (\u2699\ufe0f) from the left sidebar in the ToolJet dashboard\n\n\n\n\n\n\n\nSelect `SSO` from sidebar and then select Google. Google login will be disabled by default,\n\n\n\n\n\n\n\nEnable Google. You can see `Redirect URL` generated\n\n\n\n\n\n\n\nGo to Google cloud console and create a project.\n\n\n\n\n\n\n\nGo to the Google cloud console credentials page, and create an OAuth client ID\n\n\n\n\n\n\n\nYou'll be asked to select user type in consent screen. To allow only users within your workspace, select 'Internal', otherwise,\nselect 'External'.\n\n\n\n\n\n\n\nYou'll be led to an app registration page where you can set OAuth scopes. Select 'Add or remove scopes' and add the scopes\nuserinfo.email and userinfo.profile as shown in the image. This will allow ToolJet to store the email and name of the\nuser who is signing in\n\n\n\n\n\n\n\nSet the domain on which ToolJet is hosted as an authorized domain\n\n\n\n\n\n\n\nSet the `Redirect URL` generated at manage SSO `Google` page under Authorised redirect URIs\n\n\n\n\n\n\n\nLastly, set the `client id` in google manage SSO page. This value will be available from your Google cloud console credentials page\nThe Google sign-in button will now be available in your ToolJet login screen, if you are not enabled Multi-Workspace.\nMulti-Workspace\nIf you have enabled Multi-Workspace you can configure Google SSO as mentioned above, for setting default SSO for the instance use environment variable.\n| variable                              | description                                                   |\n| ------------------------------------- | -----------------------------------------------------------   |\n| SSO_GOOGLE_OAUTH2_CLIENT_ID           | Google OAuth client id |",
    "tag": "tooljet"
  },
  {
    "title": "AzureAD Single Sign-on",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/user-authentication/sso/openid/azuread.md",
    "content": "\nid: azuread\ntitle: AzureAD\n\nAzureAD Single Sign-on\n:::info\nTo construct a Well Known URL refer this link :: https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-protocols-oidc\n:::\n\n\nOpen your organisation page and select `app registration`\n\n\n\n\n\n\n\nSelect `new registration`\n\n\n\n\n\n\n\nOpen your organisation page and select App registration.\n\n\nEnter name, select supported account type and enter the redirect URL which can be copied from `Manage SSO -> Open Id -> Redirect URL, click on register`.\n\n\n\n\n\n\n\nApplication will be registered and will be able to view the details\n\n\nConfigure Application (Client) ID as `client id` in Open Id configuration page.\n\n\n\n\n\n\n\nClick on `Add certificate or secret` next to the Client credentials.\n\n\nClick on `+New Client Secret`\n\n\n\n\n\n\n\nGive a description, set the expiry, and then click on the `Add` button.\n\n\n\n\n\n\n\nSecret will be created, copy value and add it to the `client secret` section of Open Id SSO config.\n\n\nYou can brand the redirect page using the branding and properties option.\n\n\n\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Okta Single Sign-on",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/user-authentication/sso/openid/okta.md",
    "content": "\nid: okta\ntitle: Okta\n\nOkta Single Sign-on\n\n\nSign in to Okta developer console\n\n\nGo to the `Applications` section and click on the `Create App Integration`\n\n\n\n\n\n\n\nSelect `Sign-in method` as `OIDC - OpenID Connect` and `Application type` as `Web Application`. Go to the next step\n\n\n\n\n\n\n\nEnter `App integration name` and then enter `Sign-in redirect URIs` as `<YOUR-DOMAIN>/sso/okta`.\n\n\n\n\n\n\n\nCreate application and configure `Client Credentials` in the UI. \n\n\n\n\n\n\n\nIf you wish to show your application on Okta, edit the application and select `Login initiated by` section as `Either Okta or App`, set visibility according to your preference and `Login flow` should `Redirect to app to initiate login (OIDC Compliant)`.\n\n\n\n\n\n\n\n:::info Change Grant type\nTo change the Login flow to `Redirect to app to initiate login (OIDC Compliant)`, its mandatory to change the `Grant type` - `Client acting on behalf of a user` section to `Implicit (hybrid)` and tick `Allow Access Token with implicit grant type`.\n:::\n\nThe Okta sign-in button will now be available in your ToolJet login screen.\n\n:::info Find Well Known URL\nRefer to this Link: https://developer.okta.com/docs/concepts/auth-servers/#org-authorization-server",
    "tag": "tooljet"
  },
  {
    "title": "google-openid.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/user-authentication/sso/openid/google-openid.md",
    "content": "\nid: google-openid\ntitle: Google (Open ID)\n\n\n\nGo to the Workspace Settings (\u2699\ufe0f) from the left sidebar in the ToolJet dashboard\n\n\n\n\n\n\n\nSelect `SSO` from workspace options\n\n\n\n\n\n\n\nSelect `Open ID Connect` from the left sidebar\n\n\n\n\n\n\n\nSet Name as `Google` and get the Client ID and Client Secret from your Google Clound Console.\n\n\nSet the Well Known URL to `https://accounts.google.com/.well-known/openid-configuration`\n\n\nGenerating Cliend ID and Cliend Secret on GCS\n\n\nGo to Google cloud console and create a project.\n\n\n\n\n\n\n\nGo to the Google cloud console credentials page, and create an OAuth client ID\n\n\n\n\n\n\n\nYou'll be asked to select user type in consent screen. To allow only users within your workspace, select 'Internal', otherwise,\nselect 'External'.\n\n\n\n\n\n\n\nYou'll be led to an app registration page where you can set OAuth scopes. Select 'Add or remove scopes' and add the scopes\nuserinfo.email and userinfo.profile as shown in the image. This will allow ToolJet to store the email and name of the\nuser who is signing in\n\n\n\n\n\n\n\nSet the domain on which ToolJet is hosted as an authorized domain\n\n\n\n\n\n\n\nSet the `Redirect URL` generated at manage SSO `Open ID` page under Authorised redirect URIs\n\n\n\n\n\n\n\nNow, you can view your client ID and client secret from the Credentials page in API Console:\n\nGo to the Credentials page.\nClick the name of your credential or the pencil icon. Your client ID and secret are at the top of the page.\n",
    "tag": "tooljet"
  },
  {
    "title": "Using Multi-environments",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/release-management/multi-env.md",
    "content": "\nid: multi-environment\ntitle: Multi-Environment\n\nAvailable on: Enterprise Edition\nToolJet's multi-environment helps in streamlining workflows, thereby minimizing the chances of errors, and enables effective application management. Using multi-environment ensures that your ToolJet application is rigorously tested before it is made available to users.\n\n\n\nUsing Multi-environments\nToolJet comes with three default environments:\n- Production\n- Development\n- Staging\nSwitching environments\nFor switching the environment, click on the Environment Manager on the navbar of app-builder to open the dropdown and select a environment.\nThe datasource credentials are required to be entered specifically for every environment.\n:::tip Best Practice\nMake your default environment the Production environment - the environment in which the users use the final versions of your developed applications. This will help ensure that the production environment has access to all of the data sources.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Preview and Sharing Apps",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/tutorial/sharing-and-deploying.md",
    "content": "\nid: sharing-and-deploying\ntitle: Preview and Sharing Apps\n\nPreview and Sharing Apps\nPreview\nClicking on `Preview` will open up the currently opened version of the app in the new tab. This is useful if you want to immediately check the app in production.\n\nSharing an app\nOnce you have released a version of your app, you can share the app with others using a customised url. To share an app:\n\nClick on the Share button on the top-right corner\n\n\n\n\n\nIn the dialog box, turn on the toggle switch to `Make the application public` and shareable\n\n\n\n\n\nCreate your own `customised URL` for the app and click on `copy` to copy the URL\n\n\n\n\n\nYou can also `Embedd` your application using the embeddable link\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Adding a data source",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/tutorial/adding-a-datasource.md",
    "content": "\nid: adding-a-datasource\ntitle: Adding a data source\n\nAdding a data source\n:::tip\nThe data sources are created on app level and not on workspace level.\n:::\nDatasource manager is on the left-sidebar of the app builder. To add a new data source, click on the  `Add datasource` button.\n\nYou will be prompted to select the data source that you wish to add. Let's select PostgreSQL for this tutorial. You will then need to provide the credentials of your PostgreSQL database. The fields that are marked as `encrypted` will be encrypted before saving to ToolJet's database. \n\n\n![ToolJet - Tutorial - Adding a data source](/img/tutorial/adding-datasource/datasources.png)\n\n\nThe name of the data source must be unique (within the app) and can be changed by clicking on the data source name at the top of the prompt. Click on `Test Connection` button to verify the connection, this might take a couple of minutes. Once verified, save the data source. \n:::tip\nIf you are using ToolJet cloud and if your data source is not publicly accessible, please white-list our IP address ( shown while creating a new data source ).\n:::\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Multi-Workspace",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/tutorial/multiworkspace.md",
    "content": "\nid: multiworkspace\ntitle: Multi-Workspace\n\nMulti-Workspace\nUser can create their own workspaces, user who created workspace will be having admin privileges for the workspace.\n\n\n\nHierarchy\n\n\n\nPermissions\n:::tip\nPlease check the detailed doc on Permissions.\n:::\n\nThe administrator can manage users and groups of each workspace\nApplications and settings can not be shared between workspaces\nA user authorised to login to Tooljet will not have access to all workspaces, Usesr should be invited or signed up to a workspace to log-in to it.\n\nEnabling Multi-Workspace\nSet environment variable DISABLE_MULTI_WORKSPACE value to false  to enable the feature, and true  to disable it.\nWhen enabled\n\nWhen Multi-Workspace feature is enabled, user should login with username and password to log in to Tooljet.\nAdministrator can configure authentication methods for their workspaces.\nIf password login is enabled, switching to the workspace will happen without any other authorization since the user is already authorized with password login.\nUser logged in to Toojet and trying to switch to a workspace where SSO is enabled and password login is disabled, will be redirected to workspace login page and enabled SSO options will be shown\nUser can directly login to a workspace using workspace login URL, Administrator can view the URL Manage SSO -> General Settings -> Login URL.\n\nWhen disabled\n\nIf Multi-Workspace is disabled, Create workspace feature won\u2019t be available.\n",
    "tag": "tooljet"
  },
  {
    "title": "Debugger    ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/tutorial/debugger.md",
    "content": "\nid: debugger\ntitle: Debugger\n\nDebugger\nThe debugger captures errors that happens while running the queries. For example, when a database query fails due to the unavailability of a database or when a REST API query fails due to an incorrect URL, the errors will be displayed on the debugger. The debugger also displays relevant data related to the error along with the error message. Debugger is located on the left-sidebar.\n\nPin Debugger\nYou can click on the `pin` icon at the top-right corner of the debugger if you do not want the debugger to close. The debugger will remain open until it is unpinned.",
    "tag": "tooljet"
  },
  {
    "title": "Pages Panel",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/tutorial/pages.md",
    "content": "\nid: pages\ntitle: Pages\n\nPages allows you to have multiple pages in a single application, making your ToolJet applications more robust and user-friendly.\n\n\n\nPages Panel\nYou can open the Pages Panel by clicking on the Pages icon on the left sidebar of the app-builder.\n\n\n\nPanel Options\n\nAdd Page\nSettings\nPin\nSearch\n\nAdd Page\nOn the header of the Pages Manager, the + button that allows you to add more pages to your application\n\n\n\nOn clicking the + button, a new page will be added, enter the name for the page and press enter.\n\n\n\nSettings\nFrom Settings, you can hide the page navigation sidebar in viewer mode, by enabling the Disable Menu option.\n\n\n\nPin\nYou can pin the pages panel from the Pin button and the panel won't close until you unpin it.\n\n\n\nSearch\nIf there are many pages on the panel then you can use the Search bar to look for specific page.\n\n\n\nPage options\nThere are several options available for a Page. To use these options, click on the kebab menu on the right of the page card.\n\nPage Handle\nRename\n\n\n\nMark Home\nHide Page\nDelete Page\nEvent Handlers\n\n\n\n\nPage Handle\nPage Handle is the slug that is added at the end of the application URL. Page Handle get its default value when the page name is entered on the creation of the page. You can change the Page Handle from this option.\n\n\n\nRename\nRename option will allow you to rename the page.\n\n\n\n\nMark Home\nMark home option can be used to make a page the default landing page of the application, so whenever the app will be loaded the page that is marked home will be loaded.\n\n\n\n:::info\nThe page which is marked home will have a Home icon on the left of the Page Card.\n\n\n\n:::\nHide Page\nHide Page option can be used to hide a page from the page navigation sidebar in viewer mode.\n\n\n\n:::info\nIf a page is hidden then you'll see an eye icon on the right of the card.\n\n\n\n:::\nYou can go to the options again and unhide the app from the page navigation sidebar\n\n\n\nDelete Page\nYou can delete a page from an application using this option.\n\n\n\n:::info\nIf a page is Marked Home then you won't be able to delete and the delete page option will be disabled.\n\n\n\n:::\nEvent Handlers\nJust like other Event Handlers on ToolJet, you can add event handlers too pages too.\nCurrently, there is On page load event available. You can use all the available actions for this event along with the new actions added specifically for the pages:\n- switch page\n- set page variable\n- unset page variable\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Keyboard Shortcuts",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/tutorial/keyboard-shortcuts.md",
    "content": "\nid: keyboard-shortcuts\ntitle: Keyboard Shortcuts\n\nKeyboard Shortcuts\nYou can perform operations like undo, redo, clone, or removing the widget directly using the keyboard shortcuts.\nCopy\nYou can copy the component  on the visual app editor using the following shortcut keys:\nOn Mac: `cmd + c`\nOn Linux/Windows: `ctrl + c`\n\n\n\nCut\nYou can cut the component  on the visual app editor using the following shortcut keys:\nOn Mac: `cmd + x`\nOn Linux/Windows: `ctrl + x`\n\n\n\nPaste\nYou can paste the selected component  using the following shortcut keys:\nOn Mac: `cmd + v`\nOn Linux/Windows: `ctrl + v`\n\n\n\n:::caution\nThere are few edge cases when copy-paste commands might not work:\n- The URL should be `https` and it won't work on http on many browsers\n- Recent Firefox versions has some issue with copy functionality\n:::\nUndo\nYou can undo any operation performed on the visual app editor using the following shortcut keys:\nOn Mac: `cmd + z`\nOn Linux/Windows: `ctrl + z`\n\n\n\nRedo\nIf you have `undo` an operation and want to redo that again than you can use the following shortcut keys:\nOn Mac: `cmd + shift + z`\nOn Linux/Windows: `ctrl + shift + z`\n\n\n\nClone\nNow you can create multiple clones of any widget without having to drag and drop the widget again from the sidebar. Just select any widget that you want to create a clone and use the following shortcut keys:\nOn Mac: `cmd + d`\nOn Linux/Windows: `ctrl + d`\n\n\n\nRemove widget\nNow you can delete a selected widget by using the following shortcut keys:\nOn Mac: `delete`\nOn Linux/Windows: `backspace`\n\n\n\nUnselect the selected widget\nYou can quickly deselect a widget using the `esc` key.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Building Queries",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/tutorial/building-queries.md",
    "content": "\nid: building-queries\ntitle: Building Queries\n\nBuilding Queries\nQuery Editor lives at the bottom of the page. We will now build a query for the PostgreSQL datasource that we connected in the previous step.\n:::tip \nYou can click on the 'enlarge' icon to enlarge query editor pane. \n:::\n\nClick on the `+` icon of the query editor to create a new query.\nSelect the PostgreSQL datasource created in previous step.\nCopy the query given below and paste on the query area.\nSelect SQL mode\n\n`sql\nSELECT * FROM customers;`\n\nQuery results can be previewed by clicking the `preview` button. Previewing queries will not alter the state of the app.\n\nAdvanced options\n\nRun query on page load\nIf this option is enabled, the query will be run when the app is loaded for the first time. The queries can have more than one trigger, ie the same query can later be triggered again using a button's click event or table's row selected event or any other events.\nRequest confirmation before running query\nEnable this option to show a prompt to confirm the action before a query is run. The confirmation prompt will look like this:\n\n\n\nShow notification on success",
    "tag": "tooljet"
  },
  {
    "title": "Versioning and Release",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/tutorial/versioning-and-release.md",
    "content": "\nid: versioning-and-release\ntitle: Versioning and Release\n\nVersioning and Release\nVersioning and Release lets you version control your apps and release app changes to the users. \nVersioning\nVersioning is really useful if multiple developers are working on an app, it allows them to save their own version of the app. This also prevents developers from overwriting the other developer's work. \nCreating a Version\nYou can create new versions from App Version Manager on the top-right corner. It displays the version of the app that you're currently working and can be used to switch between the different version of the app. To create a new version:\n\n\nGo to the App Version Manager from the toolbar and click on the dropdown. It will display all the versions of the app that have been created.\n\n\n\n\n\n\n\nClick on Create Version and a modal will pop-up. Enter a Version Name and click on Create version from dropdown that will include all the versions of the app, choose a version that you want to use for your new version and then click on `Create Version`.\n\n\n\n\n\n\n\nRelease\nMaking a release let's you publish the app and push the changes to production.\nReleasing a version\nTo release a version:\n\n\nGo to the App Version Manager and select the `version` from the dropdown that you want to release.\n\n\n\n\n\n\n\nClick on the `Release` button on the top-right corner.\n\n\n\n\n\n\n\n:::tip \nToolJet will block editing of the `Released version` of an app and will display a prompt to create a new version to make the changes. This is to prevent accidentally pushing an unfinished app to the live version.\n\n\n\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Transformations",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/tutorial/transformations.md",
    "content": "\nid: transformations\ntitle: Transformations\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nTransformations\nTransformations can be enabled on queries to transform the query results. ToolJet allows you to transform the query results using two programming languages: \n\nJavaScript \nPython \n\n:::caution\n- Every transformation is scoped to the query it's written for. \n- Actions and CSA(Component Specific Actions) cannot be called within the transformation, they can only be called within RunJS query or RunPy query.\n:::\nTransform using JavaScript\nLet's assume a query is returning the customers data with a `name` row, so we will write a simple transformation to compute `first_name` and `last_name` for all the customers.\n`javascript\n// write your code here\n// return value will be set as data and the original data will be available as rawData\nreturn data.map((row) => {\n  return {\n    ...row,\n    first_name: row.name.split(' ')[0],\n    last_name: row.name.split(' ')[1],\n  };\n});`\nThe query will now look like this:\n\n\n\nTransform using Python\nLet's use Python transformation to compute `first_name` and `last_name` for all the customers that we fetch in the previous step.\n`python\nreturn list(map(lambda row: {\n  **row,\n  'first_name': row['name'].split(' ')[0],\n  'last_name': row['name'].split(' ')[1],\n}, data))`\nExample\n\n\nLet's take a look at the data returned by a RESTAPI (using mock data here):\n\n\n\n\n\n\n\nNow we will transform the returned data using Python that will append a new key in the returned data called `user` and that user will have the value from the exposed global variables of ToolJet which is `globals.currentUser.email`\n`python\n  return list(map(lambda item: {**item, \"user\": f\"{globals['currentUser']['email']}\"}, data))`\n\n\nNow, you can click on the preview button to check the transformed data.\n\n\n\n\n\n\n\n\nClick the `Save` button to create the query. Saved queries can be run using the `Run` button on the top-right of query panel. Queries run using the run button will behave just as if it was triggered by an app event like button click and thus will alter the state of the app. You can view the query results using the state inspector on the left side-bar of the app builder.\n\n\n\nWe can see that `first_name` and `last_name` are added to all the rows in the `data` object of the query. If you need the original data of the query, it will be available in the `rawData` object of the query.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Adding a widget",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/tutorial/adding-widget.md",
    "content": "\nid: adding-widget\ntitle: Adding a widget\n\nAdding a widget\nTo add a widget, navigate to the `Widget manager` on the right sidebar. It will display the list of built-in widgets that can be added to the app. Use the search functionality to quickly find the widget that you want.\n\nDrag and drop a widget\nLet's add a `table` widget to the app to show the customer data from the query that we created in the previous steps.\nTo add a widget, drag and drop the widget to the canvas.\nResize a widget\nThe widgets can be resized and repositioned within the canvas.\n\nAdding widgets to Modal\nTo add a widget to Modal, we need to trigger Show modal action\n:::info\nBefore triggering `Show modal action` we need to add a modal widget to the canvas.\n:::\n\nAdd a `modal widget` to the app\nTrigger the Show modal action\nClick on the canvas area for the `Widget manager` sidebar\nNavigate to the Widget manager on the right sidebar and Drag and drop a widget into the Modal\n\n\nResize table columns\nWe can resize the column width using the resize handle of the column.\n\nChange widget properties\nClick on the widget to open the inspect panel on right sidebar. Here you can change the properties of the widgets. Let's configure the table columns to display the customer data. The display order of columns can be changed by dragging icon near the column name.\n\nConnecting data with widget\nNow we will connect the `data` object of the `fetch customers` query with the table. Click on the table widget to open the inspector on the right sidebar. We can see that the data property of the table has an empty array as the value. The data field, like almost every other field on the editor supports single-line javascript code within double brackets. Variable suggestions will be shown as a dropdown while you type the code in the field.\nLet's select the `data` object of the 'postgresql' query.\n`{{queries.postgresql1.data}}`\nSince we have already run the query in the previous step, the data will be immediately displayed in the table.\n\nSo far in this tutorial, we have connected to a PostgreSQL database and displayed the data on a table.\n:::tip\nRead the widget reference of table here for more customizations such as server-side pagination, actions, editing data.",
    "tag": "tooljet"
  },
  {
    "title": "Adding actions",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/tutorial/actions.md",
    "content": "\nid: actions\ntitle: Adding actions\n\nAdding actions\nToolJet supports several actions that can be invoked as the handler for any `event` that is triggered in an application.\nTo add actions\nTo attach an action for component events, click on the component's handle, and then click on the `Add handler` button on the\ninspector panel available on the right side.  \nTo attach an action for query events, select the query, go to the `advanced` tab and then click on the `Add handler` button.\nAvailable actions\nSome of the actions that ToolJet Support are\nAction| Description|\n   ----| -----------  |\n   Show alert | Show an alert message as a bootstrap toast           |\n   Run query | Run any of the data queries that you have created           |\n   Open webpage | Go to another webpage in a new tab          |\n   Goto app | Go to another ToolJet application          |\n   Show modal | Open any modal that you've added          |\n   Close modal | Close any modal that you've added if its already open          |\n   Copy to clipboard | Copy any available text that you see on the application to clipboard          |\n   Set localStorage | Set a key and corresponding value to localStorage          |",
    "tag": "tooljet"
  },
  {
    "title": "How can we add these variables to an Workspace?",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/tutorial/workspace-environment-variables.md",
    "content": "\nid: workspace-environment-variables\ntitle: Workspace Variables\n\nWorkspace Variables are the variables with some value(usually tokens/secret keys/API keys) that can be used in different apps across the same Workspace.\nHow can we add these variables to an Workspace?\nSuppose there is an `API key` or a value that you want to use in the queries or widgets in the multiple apps of the same Workspace then the Workspace admin or the user with permissions can add an environment variable.\nAdding the environment variable\n\nGo to the ToolJet Dashboard, and click on the dropdown on the navigation bar to show `Workspace` options\nSelect `Manage Environment Variables`\nClick on `Add New Variable` button\nGive a `Name` to the variable, set the value, choose `Type`, toggle `Encryption`, and click Add Variable button\nNow this variable can be used inside any application of this Workspace\n\n\n\n\nTypes of variables\n\n\nClient: The client variable can be used in widgets and queries.\n\n\nServer: The server variables can be used with all the queries except the `RunJS`. The reason why we don't allow the server variables to be used with the widgets is that these variables are only resolved during the runtime so they're highly secured.\n\n\n:::info\nVariable Type cannot be changed once it has been created.\n:::\n\n\n\nEncryption\nThis feature enables us to add a client variable with and without `encryption`. The server variables are always encrypted by default.\nUsing variable in an app\nLet's use the variable that we created here. If you have used ToolJet before, then you know that for getting the values from any variable we use JS notation i.e. `{{}}` but for using the Workspace variables we have different opening and closing notation `%% %%`. The environment variables will not work inside js code `{{}}`.\nSo, the syntax for using the variable that we created before will be `%%client.pi%%`\nExample for client variable usage:\n\n\n\nExample for server variable usage:\n\n",
    "tag": "tooljet"
  },
  {
    "title": "App menu options",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/tutorial/app-menu-options.md",
    "content": "\nid: app-menu-options\ntitle: App menu options\n\nApp menu options\nOptions that are available in the overflow menu of the app card are:\n\nChange Icon\nAdd to folder\nClone app\nExport app\nDelete app\n\n\n\n\nChange Icon\nThe icon on the app cards can be customised by selecting the `Change Icon` option.\n\n\n\nAdd to folder\nToolJet allows you to create folders (`+ Create new folder` from the left sidebar) on the dashboard, and any application can be added to these folders.\n\n\n\nClone app\nAny application created on ToolJet can be cloned using the `Clone app` option. The cloned application is the exact copy of the original app except that the user will have to re-enter the datasource credentials in cloned app.\nExport app\nExport app option will allow the users to download `JSON` file with all the information about your application(excluding credentials). This JSON file can be used to import this application to the same or other workspace.\nUsers get the option to export:\n- the currently released version\n- a particular version from list latest version to oldest version\n- all versions\n\n\n\nDelete app\nUse this option to complete remove the app from the workspace.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Creating new app",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/tutorial/creating-app.md",
    "content": "\nid: creating-app\ntitle: Creating new app\n\nCreating new app\n:::info\nApps in ToolJet binds the widgets, data sources and queries together.\n:::\nThis tutorial will walk you through building a simple app to fetch customer information from a PostgreSQL database and display the data using the table widget.\nTo create a new ToolJet app, click on the 'Create new application' button on the ToolJet dashboard. \n\nYou will be redirected to the visual app editor once the app has been created. Create the first version of your app to start building. The name of the app can be changed by clicking on the app name at top-left of the app builder.\n\n\n![ToolJet - Creating an app](/img/tutorial/creating-new-app/visual-app-editor.png)\n\n\nThe main components of an app: \n\nWidgets - UI components such as tables, buttons, dropdowns.\nData sources - ToolJet can connect to databases, APIs and external services to fetch and modify data.\n",
    "tag": "tooljet"
  },
  {
    "title": "Mobile layout",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/tutorial/mobile-layout.md",
    "content": "\nid: mobile-layout\ntitle: Mobile layout\n\nMobile layout\nMobile layout is activated when the width of the window is less than 600px.\n:::tip\nWidgets can be shown on desktop, mobile, or both.\n:::\n\nAdding existing widget to mobile layout\nClick on the widget to open inspector. Scroll down to the `layout` section and enable mobile layout. The width of the widget will be adjusted to fit the mobile layout.\nAdding a new widget to mobile layout\nSwitch the layout to mobile by clicking the button on the top navigation bar. Drag and drop a widget to the canvas. This widget will not be shown on desktop layout unless enabled from the widget inspector via the \"Show on desktop\" button manually.\n:::tip\nWidth of the widgets will be automatically adjusted to fit the screen while viewing the application in app viewer.",
    "tag": "tooljet"
  },
  {
    "title": "Managing Users and Groups",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/tutorial/manage-users-groups.md",
    "content": "\nid: manage-users-groups\ntitle: Managing Users and Groups\n\nManaging Users and Groups\nManaging Users\nAdmin of a workspace can add users to the workspace. To manage the users in your workspace, just go to the Workspace Settings from the left sidebar on the dashboard and click on the Users option.\n\n\n\nInviting users\nAdmins can invite anyone to a workspace using the email address. To invite a user:\n\n\nOn the Users page click on the `Invite new user` button.\n\n\n\n\n\n\n\nNow enter the details of new user such as first name, last name, email, and then click on the Create User.\n\n\n\n\n\n\n\nAn email including the Invite Link to join your workspace will be send to the created user. The status will turn from invited to active after the user successfully joins your workspace using the invite link.\n\n\n:::tip\n  You can also copy the invitation url by clicking on the copy icon next to `invited` status of the created user.\n  :::\n\n\n\n:::tip\nYou can also Bulk Invite Users by editing and uploading the sample CSV file including all the users details.\n\n\n\n:::\nDisabling a user's access\nYou can disable any active user's access to your workspace by clicking on the Archive button and the status of the user will change from active to archived.\n\n\n\nEnabling a user's access\nSimilar to archiving a user's access, you can enable it again by clicking on Unarchive. The status of user will change from archived to invited and the user will have to join again using the invite link received via the e-mail.\n\n\n\nManaging Groups\nOn ToolJet, Admins can create groups for users added in a workspace and grant them access to particular app(s) with specific permissions. To manage groups, just go to the Workspace Settings from the left-sidebar of the dashboard and click on the Groups.\n\n\n\nGroup properties\nEvery group on ToolJet has three sections:\nApps:\nAdmins can add or remove any number of apps for a group of users. To add an app to a group, select an app from the dropdown and click on `Add` button next to it. You can also set app permissions such as `View` or `Edit` for the group. You can set different permissions for different apps in a group.\n\n\n\nUsers:\nAdmins can add or remove any numbers of users in a group. Just select a user from the dropdown and click on `Add` button to add it to a group. To delete a user from a group, click on `Delete` button next to it.\n\n\n\nPermissions:\nAdmins can set granular permission like creating/deleting apps or creating folder for a group of users.\n\n\n\n:::tip\nAll the activities performed by any Admin or any user in a workspace is logged in `Audit logs` - including any activity related with managing users and groups.\n:::\nPredefined Groups\nBy default, every workspace will have two User Groups:\n1. All Users\nThis group contains all the users and admins.\n| Apps | Users | Permissions |\n| ----------- | ----------- | ----------- |\n| You can add or remove apps. | Modification is disabled. This group will have all the users and admins added in a workspace. | You can edit permissions for all the users globally. |\n\n\n\n2. Admin\nThis group contains admins by default. Admins can add more admins or remove the users in this group.\n| Apps | Users | Permissions |\n| ----------- | ----------- | ----------- |\n| Modification is disabled. By default, this group has `Edit` permission for all the apps in a workspace  | Admins can add or remove users in this group. | Modification is disabled. By default, all the admins can create and delete apps or create folders. |\n\n\n\nCreating new group\n\n\nClick on `Create new group` button in the User Groups page.\n\n\n\n\n\n\n\nEnter a name for the group and click `Create Group` button.\n\n\n\n\n\n\n\nOnce the group is created, you can add Apps, Users and set their Permissions for that group.\n\n\nDeleting a group\nTo delete a group, click on `Delete` next to it. It will confirm whether you want to delete it or not, Click on `Yes` to delete the group.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Configuration",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/Enterprise/white-label.md",
    "content": "\nid: white-label\ntitle: White Label\n\nAvailable on: Enterprise Edition\nWhite Label feature will allow you to remove the ToolJet branding from the ToolJet platform and add your own custom logo and text.\nThis feature allows you to rebrand the following:\n- App logo (Logo on login screen, dashboard, and app-editor)\n\n\n\n\n\n\n\n\n\n\nFavicon\n\n\nPage Title (next to Favicon)\n\n\n\n\n\n\n\nConfiguration\nTo enable white labelling, you'll need to set the below mentioned environment variables in the .env file:\n\n`WHITE_LABEL_LOGO`: URL of the logo. Preferred dimensions of the logo are: width 130px and height 26px\n`WHITE_LABEL_TEXT`: The text that you want to display as Page Title\n",
    "tag": "tooljet"
  },
  {
    "title": "audit_logs.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/Enterprise/audit_logs.md",
    "content": "\nid: audit_logs\ntitle: Audit logs\n\nAvailable on: Enterprise Edition\nThe audit log is the report of all the activities done in your ToolJet account. It will capture and display events automatically by recording who performed an activity, what when, and where the activity was performed, along with other information such as IP address.\n\n\n\nFilter audit logs\nAudited events can be filtered using the below characteristics:\nSelect Users\nSelect a specific user from this dropdown to check all their activities. \nSelect Apps\nThe dropdown will list all the apps present in your account. Choose an app to filter the logs associated with that app.\nSelect Resources\n| Resources  | description |\n| ----------- | ----------- |\n| User | Filter all the User events like `USER_LOGIN`, `USER_SIGNUP`, `USER_INVITE`, AND `USER_INVITE_REDEEM`. |\n| App | Filter all the App events like `APP_CREATE`, `APP_UPDATE`,`APP_VIEW`,`APP_DELETE`,`APP_IMPORT`,`APP_EXPORT`,`APP_CLONE`. |\n| Data Query | Filters the events associated with Data Query like `DATA_QUERY_RUN`. |\n| Group Permission | All the events associated with Group Permissions will be filtered. Group Permissions include `GROUP_CREATE`, `GROUP_UPDATE`, `GROUP_DELETE`. |\n| App Group Permission | Within each group, you can set apps for read or edit privileges. These events get recorded as App Group Permissions. |\nSelect Actions\n| Actions  | description |\n| ----------- | ----------- |\n| USER_LOGIN | This event is recorded everytime a user logins. |\n| USER_SIGNUP | This event is recorded everytime a new signup is made. |\n| USER_INVITE | You can invite users to your account from `Manage Users` section and an event is audited everytime an invite is sent. |\n| USER_INVITE_REDEEM | This event is recorded whenever an invite is redeemed. |\n| APP_CREATE | This event is recorded when a user creates a new app. |\n| APP_UPDATE | This event is recorded whenever actions like renaming the app, making the app public, editing shareable link, or deploying the app are made. |\n| APP_VIEW | This event is logged when someone views the launched app. (public apps aren't accounted for) |\n| APP_DELETE | This event is recorded whenever a user deletes an app from the dashboard. |\n| APP_IMPORT | This event is recorded whenever a user imports an app. |\n| APP_EXPORT | This event is recorded whenever an app is exported. |\n| APP_CLONE | This event is recorded whenever a clone of the existing app is created. |\n| DATA_QUERY_RUN | This event is logged whenever a data source is added, a query is created, or whenever a query is run either from the query editor or from the launched app. |\n| GROUP_PERMISSION_CREATE | This event is recorded whenever a group is created. |\n| GROUP_PERMISSION_UPDATE | This event is recorded whenever an app or user is added to or removed from a group, or the permissions for a group are updated. |\n| GROUP_PERMISSION_DELETE | This event is recorded whenever a user group is deleted from an account. |\n| APP_GROUP_PERMISSION_UPDATE | For every app added in to user group, you can set privileges like `View` or `Edit` and whenever these privileges are updated this event is recorded. By default, the permission of an app for a user group is set to `View`. |\n:::info\nIt is mandatory to set a Data Range in `From` and `To` to filter audit logs.\n:::\nUnderstanding information from logs\n\n\n\n| Property  | description |\n| ----------- | ----------- |\n| action_type | It is the type of action that was logged in this event. Refer this to know about actions. |\n| created_at | Displays the date and time of a logged event.  |\n| id | Every event logged has a specific event id associated with it. |\n| ip_address | Displays the IP address from where the event was logged. |\n| metadata | Metadata includes two sub-properties - `tooljet_version` and `user_agent`. `tooljet_version` displays the version of ToolJet used for the logged event and `user_agent` contains information about the device and browser used for that event. |\n| organization_id | Every organization in ToolJet has an id associated with it and is recorded when an event occurs. |\n| resource_id | There are several resources and for each resource that is created, an id gets associated with it.|\n| resource_name | Displays the name of the resources that were logged in the event. For example, if an app was created or deleted then it will display the name of the app. |\n| resource_type | Displays the type of the resources that were logged in the event. |",
    "tag": "tooljet"
  },
  {
    "title": "How is Super Admin different from Admin",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/Enterprise/superadmin.md",
    "content": "\nid: superadmin\ntitle: Super Admin\n\nAvailable on: Enterprise Edition\nA Super Admin is the user who has full access to all the Workspaces, Users, and Groups of an instance. An instance can have more than one Super Admin. A Super Admin has full control over other users' workspaces and can create users, groups, and other super admins.\nThe user details entered while setting up ToolJet will have Super Admin privileges.\nHow is Super Admin different from Admin\n| Privilege | Admin | Super Admin | \n| --------- | ----- | ----------- |\n| Manage Users in their workspace (Invite/Archive/Unarchive) | \u2705 | \u2705 |\n| Manage Groups in their workspace (Create Group/Add or Delete Users from groups/ Modify Group Permissions) | \u2705 | \u2705 |\n| Manage SSO in their workspace | \u2705 | \u2705 |\n| Manage Workspace Variables in their workspace | \u2705 | \u2705 |\n| Access any user's personal workspace (create, edit or delete apps) | \u274c | \u2705 |\n| Archive Admin or any user of any workspace | \u274c | \u2705 |\n| Access any user's ToolJet database (create, edit or delete database) | \u274c | \u2705 |\n| Manage any workspace's setting (Groups/SSO/Workspace Variables) | \u274c | \u2705 |\n| Manage all users from all the workspaces in the instance | \u274c | \u2705 |\n| Make any user Super Admin | \u274c | \u2705 |\n| Restrict personal workspace of invited users | \u274c | \u2705 |\n\n\n\nSuper Admin features\nAccess any workspace\nIf a user is a Super Admin then they can switch to any workspace created by any user in the instance from the dropdown on the top-left of dashboard that is used to switch between workspaces.\nThe dropdown will list all the workspaces including workspaces created by the Super Admin or Any User.\n\n\n\nCreate Edit or Delete apps from any user's personal workspace\nOnce the Super Admin accesses the workspace of any other user, they can create, edit or delete app on the workspace.\nThis also includes - modifying folders and importing, exporting, or cloning apps to any user's workspace.\nArchive/Unarchive Users\nSuper Admin can not only archive/unarchive users/admins on their workspace but also from the workspaces of any other user.\nIf a user is Super Admin, they just need to open the workspace in which they want to archive or unarchive a user. Then go to the Workspace Settings from the sidebar -> Manage Users -> Archive/Unarchive any user/admin\n\n\n\nAccess ToolJet DB in any workspace\nSuper Admins have access to the database of any user's workspace - just like Super Admins can access any application in any workspace. They have full access to modify or create any table in the ToolJet DB of any workspace.\nManage Workspace Settings (Groups/SSO/Workspace Variables)\nSuper Admins have all the privileges that an Admin of a workspace have, Super Admins can:\n- \u2705 Manage Groups: Creating/Deleting/Updating a Group in any workspace\n- \u2705 Manage SSO: Full control over General Settings, Password login and other SSO options\n- \u2705 Workspace Variables: Adding, updating or deleting workspace variables\nInstance Settings\nOnly Super Admins can access the Instance Settings:\n\nManage All Users\nManage Instance Settings\n\nChecking all the users in the instance\nManage All Users can be used to check all the users that are there - altogether from all the workspaces in an instance.\n\n\n\nArchiving a user from workspace\nSuper Admins have the privilege to remove any user from any of the workspace they belong.\nSuper Admins can go to Manage All Users page, Under the Workspaces column they'll see the number of workspaces a user belongs to. Click on the `View(n)`, a modal will pop up that will have the list of `n` number the workspaces, click on the Archive/Unarchive button next to the workspace name to remove the user from the workspace.\n\n\n\nMake the user super admin\nSuper Admins can make any user as Super Admin or remove any Super Admin from the Manage All Users in the Instance Settings page.\nClick on the Edit button next to any user, Enable the Make the user Super Admin option, and then Save it.\nThe user will become Super Admin and the Type column will update from `workspace` to `instance`.\n\n\n\nAllow users to create personal workspace\nWhen a user joins a workspace, they are provided with their own personal workspace and option to create new workspaces.\nSuper Admins can control this behavior from the Manage Instance Settings page, they can toggle off the option to Allow personal workspace. Now whenever a user joins a workspace they won't be provided a personal workspace nor they will be able to create a new workspace in the instance.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "AWS EC2",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/setup/ec2.md",
    "content": "\nid: ec2\ntitle: AWS EC2\n\nAWS EC2\n:::info\nYou should setup a PostgreSQL database manually to be used by the ToolJet server.\n:::\nFollow the steps below to deploy ToolJet on AWS EC2 instances.\n\n\nSetup a PostgreSQL database and make sure that the database is accessible from the EC2 instance.\n\n\nLogin to your AWS management console and go to the EC2 management page.\n\n\nUnder the `Images` section, click on the `AMIs` button.\n\n\nFind the ToolJet version you want to deploy. Now, from the AMI search page, select the search type as \"Public Images\" and input the version you'd want `AMI Name : tooljet_vX.X.X.ubuntu_bionic` in the search bar.\n\n\nSelect ToolJet's AMI and bootup an EC2 instance.\n\n\nCreating a new security group is recommended. For example, if the installation should receive traffic from the internet, the inbound rules of the security group should look like this:\nprotocol| port     | allowed_cidr|\n   ----| -----------  | ----------- |\n   tcp | 22           | your IP |\n   tcp | 80           | 0.0.0.0/0 |\n   tcp | 443          | 0.0.0.0/0   |\n\n\nOnce the instance boots up, SSH into the instance by running `ssh -i <path_to_pem_file> ubuntu@<public_ip_of_the_instance>`\n\n\nSwitch to the app directory by running `cd ~/app`. Modify the contents of the `.env` file. ( Eg: `vim .env` )\n\n\nThe default `.env` file looks like this:\n   `bash\n   TOOLJET_HOST=http://<example>\n   LOCKBOX_MASTER_KEY=<example>\n   SECRET_KEY_BASE=<example>\n   PG_DB=tooljet_prod\n   PG_USER=<pg user name>\n   PG_HOST=<pg host>\n   PG_PASS=<pg user password>`\n   Read environment variables reference\n:::info\n   If there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates.\n   :::\n\n`TOOLJET_HOST` environment variable determines where you can access the ToolJet client. It can either be the public ipv4 address of your instance or a custom domain that you want to use.\n\nExamples:\n   `TOOLJET_HOST=http://12.34.56.78` or\n   `TOOLJET_HOST=https://yourdomain.com` or\n   `TOOLJET_HOST=https://tooljet.yourdomain.com`\n:::info\n   We use a lets encrypt plugin on top of nginx to create TLS certificates on the fly.\n   :::\n:::info\n   Please make sure that `TOOLJET_HOST` starts with either `http://` or `https://`\n   :::\n\n\nOnce you've configured the `.env` file, run `./setup_app`. This script will install all the dependencies of ToolJet and then will start the required services.\n\n\nIf you've set a custom domain for `TOOLJET_HOST`, add a `A record` entry in your DNS settings to point to the IP address of the EC2 instance.\n\n\nYou're all done, ToolJet client would now be served at the value you've set in `TOOLJET_HOST`.\n\n\nDeploying Tooljet Database\nToolJet AMI comes inbuilt with PostgREST. If you intend to use this feature, you'd only have to setup the environment variables in `~/app/.env` file and run `./setup_app` script.",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Kubernetes",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/setup/kubernetes.md",
    "content": "\nid: kubernetes\ntitle: Kubernetes\n\nDeploying ToolJet on Kubernetes\n:::info\nYou should setup a PostgreSQL database manually to be used by ToolJet.\n:::\nFollow the steps below to deploy ToolJet on a Kubernetes cluster.\n\n\nSetup a PostgreSQL database\n   ToolJet uses a postgres database as the persistent storage for storing data related to users and apps. We do not have plans to support other databases such as MySQL.\n\n\nCreate a Kubernetes secret with name `server`. For the minimal setup, ToolJet requires `pg_host`, `pg_db`, `pg_user`, `pg_password`, `secret_key_base` & `lockbox_key` keys in the secret.\n\n\nRead environment variables reference\n\nCreate a Kubernetes deployment\n\n`bash\n    kubectl apply -f https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/deployment.yaml`\n:::info\nThe file given above is just a template and might not suit production environments. You should download the file and configure parameters such as the replica count and environment variables according to your needs.\n:::\n:::info\nIf there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates. You can make use of kubernetes secrets to mount the certificate file onto the containers.\n:::\n\nVerify if ToolJet is running\n\n`bash\n    kubectl get pods`\n\nCreate a Kubernetes services to publish the Kubernetes deployment that you've created. This step varies with cloud providers. We have a template for exposing the ToolJet server as a service using an AWS loadbalancer.\n\nExamples:\n   - Application load balancing on Amazon EKS\n   - GKE Ingress for HTTP(S) Load Balancing\n:::tip\nIf you want to serve ToolJet client from services such as Firebase or Netlify, please read the client Setup documentation here.\n:::\nToolJet Database\nIf you intend to use this feature, you'd have to set up and deploy PostgREST server which helps querying ToolJet Database. Please follow the instructions here for additional environment variables configuration to be done.\n\nSetup PostgREST server\n\n`bash\n    kubectl apply -f https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/postgrest.yaml`",
    "tag": "tooljet"
  },
  {
    "title": "Version 2 migration guide",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/setup/v2-migration.md",
    "content": "\nid: v2-migration-guide\ntitle: V2 migration guide\n\nVersion 2 migration guide\nToolJet version 2 comes with a bunch of exciting features, with the major ones being:\n1. Multi page\n2. Multi env\n3. Forms widget\n4. Database (Requires opt-in)\n5. Marketplace (Requires opt-in)\nCheckout the latest changelog for v2 here.\nDeployment\nBased on your opted deployment method from our setup doc, you can directly deploy v2 without any additional configuration for the default setup.\nAdditional configuration are only required for the opt-in features mentioned above. You can check the respective documentation of those features for the configuration changes needed.\n:::info\nServer may take some time to be ready to handle the HTTP request as v2 changes requires some data migrations for the initial deployment. This is automatically triggered as a part of the server boot.\n::::\nDeprecations\nDeployments\n\nDocker compose deployments with auto SSL is deprecated\n\nHelp and Support\n\nFeel free to join our highly active Slack Community or you can also e-mail us at hello@tooljet.com.\n",
    "tag": "tooljet"
  },
  {
    "title": "Try ToolJet",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/setup/try-tooljet.md",
    "content": "\nid: try-tooljet\ntitle: Try ToolJet\n\nTry ToolJet\nOn local with Docker\nYou can run the command below to have ToolJet up and running right away.\n`bash\ndocker run \\\n  --name tooljet \\\n  --restart unless-stopped \\\n  -p 80:80 \\\n  -v tooljet_data:/var/lib/postgresql/13/main \\\n  tooljet/try:latest`\nSetup information\n\nRuns the ToolJet server on the port 80 on your machine.\nContainer has postgres already configured within. All the data will be available in the docker volume `tooljet_data`.\nYou can make use of `--env` or `--env-file` flag to test against various env configurables mentioned here.\nUse `docker stop tooljet` to stop the container and `docker start tooljet` to start the container thereafter.\n\nOn Play with docker\nYou can deploy ToolJet on PWD for free with the one-click-deployment button below.\n\n\n\nSetup information\n\nOpen port 80 after the docker containers are up and running\n",
    "tag": "tooljet"
  },
  {
    "title": "tooljet-subpath.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/setup/tooljet-subpath.md",
    "content": "\nid: tooljet-subpath\ntitle: Deploying ToolJet on a subpath\n\nToolJet can now be deployed at a subpath rather than the root (`/`) of a public domain. Example subpath installation URL: `http://www.yourcompany.com/apps/tooljet`\nYou'll need to setup the following environment variables if ToolJet installation is on a domain subpath:\n| variable | value |\n| -------- | ---------------------- |\n| TOOLJET_HOST | the public URL ( eg: https://www.yourcompany.com )  |\n| SERVE_CLIENT | By default, this variable will be unset and the server will serve the client at its `/` end-point. You can set `SERVE_CLIENT` to `false` to disable this behaviour. |\n| SUB_PATH | Set a subpath to this variable. The subpath is to be set with trailing `/` and is applicable only when the server is serving the frontend client. ( eg: `/apps/tooljet/` )  |\n:::info\nSee all Environment Variables here.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Heroku",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/setup/heroku.md",
    "content": "\nid: heroku\ntitle: Heroku\n\nDeploying ToolJet on Heroku\n\nFollow the steps below to deploy ToolJet on Heroku:\n\n\nClick the button below to start one click deployment.\n\n\n\n   [![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/tooljet/tooljet/tree/main)\n\n   \n\n\n\nOn Heroku tab, you'll be asked to provide an `App name` and `Choose a region`. Enter the name for your deployment and select the region according to your choice.\n\n\n\n\n\n\nNow let's enter the `Config vars` to configure additional environment variables that are required for the installation.\nLOCKBOX_MASTER_KEY: ToolJet server uses lockbox to encrypt datasource credentials. You should set the environment variable LOCKBOX_MASTER_KEY with a 32 byte hexadecimal string. If you have OpenSSL installed, you can run the command `openssl rand -hex 32` to generate the key.\nNODE_ENV: By default NODE_ENV is set to production. \nNODE_OPTIONS: Node options are configured to increase node memory to support app build.\nSECRET_KEY_BASE: ToolJet server uses a secure 64 byte hexadecimal string to encrypt session cookies. You should set the environment variable SECRET_KEY_BASE. If you have OpenSSL installed, you can run the command `openssl rand -hex 64` to generate the key.\nTOOLJET_HOST: Public URL of ToolJet installation. This is usually `https://<app-name-in-first-step\\>.herokuapp.com`.\n\nTOOLJET_SERVER_URL: URL of ToolJet server installation. (This is same as the TOOLJET_HOST for Heroku deployments)\n\n\nClick on `Deploy app` button at the bottom to initiate the build.\n\n\nAfter the successful build, you'll see two buttons at the bottom: `Manage App` and `View`. Click on the `View` to open the app or click on `Manage App` to configure any settings.\n\n\n\n\n\n:::tip\nToolJet server and client can be deployed as standalone applications. If you do not want to deploy the client on Heroku, modify `package.json` accordingly. We have a guide on deploying ToolJet client using services such as Firebase.\n:::\nDeploying Tooljet Database\nIf you intend to use this feature, you'd have to set up and deploy PostgREST server which helps querying ToolJet Database.\nThis feature is only enabled if `ENABLE_TOOLJET_DB` is set to `true` in the Tooljet application.\nFollow the steps below to deploy ToolJet Database on Heroku:\n:::note\nPlease install Heroku CLI on your local machine. Please refer Heroku CLI installation steps here. \n:::\n\nCreate a new Heroku app using the PostgREST buildpack\n\n1.1 Create a folder with your app name. Please give a unique name to the app.  \n`bash\n  mkdir ${YOUR_PGRST_APP_NAME}\n  cd $${YOUR_PGRST_APP_NAME}\n  git init`\n1.2 Add PostgREST buildpack to your app. \n`bash\n  heroku apps:create ${YOUR_PGRST_APP_NAME} --buildpack https://github.com/PostgREST/postgrest-heroku.git\n  heroku git:remote -a ${YOUR_PGRST_APP_NAME}`\n\nAttach the Tooljet app\u2019s PostgreSQL database your Tooljet database app\n\n`${HEROKU_PG_DB_NAME` Should be the name of the PostgreSQL created by the Tooljet app. \nYou can get the `${HEROKU_PG_DB_NAME` of the Tooljet application from the Resources tab under Heroku Postgre attachments as shown below. (eg: `${HEROKU_PG_DB_NAME = postgresql-transparent-24158` ). \n`bash\n  heroku addons:attach ${HEROKU_PG_DB_NAME} -a ${YOUR_PGRST_APP_NAME}`\n\n\n\n\nCreate a Procfile\n\n:::info\n  The Procfile is a simple text file that is named Procfile without a file extension. For example, Procfile.txt is not valid.\n  :::\nPlease paste the below string within the Procfile file.\n`bash\n  web: PGRST_SERVER_HOST=0.0.0.0 PGRST_SERVER_PORT=${PORT} PGRST_DB_URI=${PGRST_DB_URI:-${DATABASE_URL}} ./postgrest-${POSTGREST_VER}`\n\nSet environment variables\n\nYou can also refer environment variable here.\n:::tip\n  If you have openssl installed, you can run the following command `openssl rand -hex 32` to generate the value for `PGRST_JWT_SECRET`.\nIf this parameter is not specified then PostgREST refuses authentication requests.\n  :::\n`bash\n  heroku config:set PGRST_JWT_SECRET=\n  heroku config:set POSTGREST_VER=10.0.0`\nYou can also refer environment variable here.  \n\nBuild and deploy your app\n\n`bash\n  git add Procfile\n  git commit -m \"PostgREST on Heroku\"\n  git push --set-upstream heroku main`\nYour Heroku app should be live at `${YOUR_APP_NAME}.herokuapp.com`. \n\nAdditional environment variables for Tooljet application\n",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Google Cloud Run",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/setup/google-cloud-run.md",
    "content": "\nid: google-cloud-run\ntitle: Google Cloud Run\n\nDeploying ToolJet on Google Cloud Run\n:::info\nYou should setup a PostgreSQL database manually to be used by ToolJet.\n:::\nFollow the steps below to deploy ToolJet on Cloud run with `gcloud` CLI.\nDeploying ToolJet application\n\nCloud Run requires prebuilt image to be present within cloud registry. You can pull specific tooljet image from docker hub and then tag with your project to push it to cloud registry.\n\n`bash\n   gcloud auth configure-docker\n   docker pull tooljet/tooljet-ce:latest\n   docker tag tooljet/tooljet-ce:latest gcr.io/<replace-your-project-id>/tooljet/tooljet-ce:latest\n   docker push gcr.io/<replace-your-project-id>/tooljet/tooljet-ce:latest`\nPlease run the above command by launching GoogleCLI which will help to push the Tooljet application image to Google container registry. \n\n\n\n\n\nCreate new cloud run service\nSelect and add the pushed Tooljet application image as shown below.\n\n\n\n\n\n\nIngress and Authentication can be set as shown below, to begin with. Feel free to change the security configurations as per you see fit.\n\n\n\n\n\nUnder containers tab, please make sure the port is set 3000 and command `npm, run, start:prod` is entered in container argument field with CPU capacity is set to 2GiB.\n\n\n\n\n\nUnder environmental variable please add the below Tooljet application variables. You can also refer env variable here. \n\nUpdate `TOOLJET_HOST` environment variable if you want to use the default url assigned with Cloud run after the initial deploy.\n\n\n\n:::tip\nIf you are using Public IP for Cloud SQL, then database host connection (value for `PG_HOST`) needs to be set using unix socket format, `/cloudsql/<CLOUD_SQL_CONNECTION_NAME>`.\n:::\n\nPlease go to the connection tab. Under Cloud SQL instance please select the PostgreSQL database which you have set-up.\n\n\n\n\nClick on deploy once the above parameters are set. \n:::info\nOnce the Service is created and live, to make the  Cloud Service URL public. Please follow the steps here to make the service public.\n:::\nDeploying ToolJet Database\nIf you intend to use this feature, you'd have to set up and deploy PostgREST server which helps querying ToolJet Database.\nPostgREST server\n\nCloud Run requires prebuilt image to be present within cloud registry. You can pull specific PostgREST image from docker hub and then tag with your project to push it to cloud registry.\n\n`bash\n   gcloud auth configure-docker\n   docker pull postgrest/postgrest:v10.1.1.20221215\n   docker tag postgrest/postgrest:v10.1.1.20221215\u00a0gcr.io/tooljet-test-338806/postgrest/postgrest:v10.1.1.20221215\n   docker push\u00a0gcr.io/tooljet-test-338806/postgrest/postgrest:v10.1.1.20221215`\nPlease run the above command by launching googleCLI which will help to push the PostgREST image to Google container registry. \n\n\n\n\nOnce the PostgREST image is pushed. Click on create service.\n\nSelect and add the pushed PostgREST image as shown in below.\n\n\n\n\nIngress and Authentication can be set as shown below, to begin with. Feel free to change the security configurations as per you see fit.\n\n\n\n\n\nUnder containers tab, please make sure the port is set 3000 and CPU capacity is set to 1GiB.\n\n\n\n\n\n\nUnder environmental variable please add corresponding Tooljet database env variables. You can also refer env variable.\n\n\nPlease go to connection tab. Under Cloud SQL instance please select the PostgreSQL database which you have set-up for Tooljet application or the separate PostgreSQL database created respective to Tooljet Database from the drop-down option.\n\n\n\n\n\nClick on deploy once the above parameters are set. \n:::info\nOnce the Service is created and live, to make the  Cloud Service URL public. Please follow the steps here to make the service public.\n:::\n\nAdditional Environmental variable to be added to Tooljet application or Tooljet Server connect to PostgREST server. You can also refer env variable here\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Amazon ECS",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/setup/ecs.md",
    "content": "\nid: ecs\ntitle: AWS ECS\n\nDeploying ToolJet on Amazon ECS\n:::info\nYou should setup a PostgreSQL database manually to be used by ToolJet.\n:::\nFollow the steps below to deploy ToolJet on a ECS cluster.\n\n\nSetup a PostgreSQL database\n    ToolJet uses a postgres database as the persistent storage for storing data related to users and apps.\n\n\nCreate a target group and an application load balancer to route traffic onto ToolJet containers.\n    You can reference AWS docs to set it up. Please note that ToolJet server exposes `/api/health`, which you can configure for health checks.\n:::note\nThis setup follows the old AWS UI for ECS as some options are missing on the latest experience.\n:::\n\n\nCreate task definition for deploying ToolJet app as a service on your preconfigured cluster.\n\n\nSelect Fargate as launch type compatibility.\n    \n\n\nConfigure IAM roles and set operating system family as Linux\n    \n\n\nSelect task size to have 3GB of memory and 1vCpu\n    \n\n\nClick on add container to update container definitions\n    \nWithin the add container form that is shown:\n\nSpecify your container name ex: `tooljet-ce`\nSet the image you intend to deploy. ex: `tooljet/tooljet-ce:v1.26.0`\n\nUpdate port mappings at container port `3000` for tcp protocol.\n  \n\n\nUpdate container command field to be `npm,run,start:prod`.\n  \n\n\nSpecify environmental values for the container. You'd want to make use of secrets to store sensitive information or credentials, kindly refer the AWS docs to set it up.\n\n\n\n:::note\n  For the minimal setup, ToolJet requires:\n  `TOOLJET_HOST`, `PG_HOST`, `PG_DB`, `PG_USER`, `PG_PASSWORD`, `SECRET_KEY_BASE` & `LOCKBOX_MASTER_KEY` keys in the secret.\nRead environment variables reference\n:::\n\n\n\n\nCreate a service to run your task definition within your cluster.\n\nSelect launch type as Fargate.\nSet operating system family as Linux\nSelect task definition family as the one created earlier. ex: `tooljet-ce`\nSelect the cluster and set the service name\nYou can set the number of tasks to start with as two\nRest of the values can be kept as default\n  \nClick on next step to configure networking options\nSelect your designated VPC, Subnets and Security groups. Kindly ensure that the security group allows for inbound traffic to http port 3000 for the task.\n  \nSince migrations are run as a part of container boot, please specify health check grace period for 900 seconds.\nSelect the application loadbalancer option and set the target group name to the one we had created earlier. This will auto populate the health check endpoints.\n\n\n\n:::info\nThe setup above is just a template. Feel free to update the task definition and configure parameters for resources and environment variables according to your needs.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Kubernetes (GKE)",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/setup/kubernetes-gke.md",
    "content": "\nid: kubernetes-gke\ntitle: Kubernetes (GKE)\n\nDeploying ToolJet on Kubernetes (GKE)\n:::info\nYou should setup a PostgreSQL database manually to be used by ToolJet. We recommend using Cloud SQL since this guide is for deploying using GKE.\n:::\nFollow the steps below to deploy ToolJet on a GKE Kubernetes cluster.\n\nCreate an SSL certificate.\n\n`bash\ncurl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/GKE/certificate.yaml`\nChange the domain name to the domain/subdomain that you wish to use for ToolJet installation.\n\nReserve a static IP address using `gcloud` cli\n\n`bash\ngcloud compute addresses create tj-static-ip --global`\n\nCreate k8s deployment\n\n`bash\ncurl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/GKE/deployment.yaml`\nMake sure to edit the environment variables in the `deployment.yaml`. You can check out the available options here.\n:::info\nIf there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates. You can make use of kubernetes secrets to mount the certificate file onto the containers.\n:::\n\nCreate k8s service\n\n`bash\ncurl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/GKE/service.yaml`\n\nCreate k8s ingress\n\n`bash\ncurl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/GKE/ingress.yaml`\nChange the domain name to the domain/subdomain that you wish to use for ToolJet installation.\n\nApply YAML configs\n\n`bash\nkubectl apply -f certificate.yaml, deployment.yaml, service.yaml, ingress.yaml`\n:::info\nIt might take a few minutes to provision the managed certificates. Managed certificates documentation.\n:::\nYou will be able to access your ToolJet installation once the pods, service and the ingress is running.\nToolJet Database\nIf you intend to use this feature, you'd have to set up and deploy PostgREST server which helps querying ToolJet Database. Please follow the instructions here for additional environment variables configuration to be done.\n\nSetup PostgREST server\n\n`bash\n    kubectl apply -f https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/GKE/postgrest.yaml`",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Kubernetes (AKS)",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/setup/kubernetes-aks.md",
    "content": "\nid: kubernetes-aks\ntitle: Kubernetes (AKS)\n\nDeploying ToolJet on Kubernetes (AKS)\n:::info\nYou should setup a PostgreSQL database manually to be used by ToolJet. We recommend using Azure Database for PostgreSQL since this guide is for deploying using AKS.\n:::\nFollow the steps below to deploy ToolJet on a AKS Kubernetes cluster.\n\n\nCreate an AKS cluster and connect to it to start with the deployment. You can follow the steps as mentioned on the Azure's documentation.\n\n\nCreate k8s deployment\n\n\n`bash\n    curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/AKS/deployment.yaml`\nMake sure to edit the environment variables in the `deployment.yaml`. We advise to use secrets to setup sensitive information. You can check out the available options here.\n:::info\nIf there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates. You can make use of kubernetes secrets to mount the certificate file onto the containers.\n:::\n\n\nCreate k8s service and reserve a static IP and inorder expose it via a service load balancer as mentioned in the doc. You can refer `service.yaml`.\n   `bash\n    curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/AKS/service.yaml`\n\n\nApply YAML configs\n\n\n`bash\n    kubectl apply -f deployment.yaml, service.yaml`\nYou will be able to access your ToolJet installation once the pods and services running.\nToolJet Database\nIf you intend to use this feature, you'd have to set up and deploy PostgREST server which helps querying ToolJet Database. Please follow the instructions here for additional environment variables configuration to be done.\n\nSetup PostgREST server\n\n`bash\n    kubectl apply -f https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/GKE/postgrest.yaml`",
    "tag": "tooljet"
  },
  {
    "title": "Environment variables",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/setup/env-vars.md",
    "content": "\nid: env-vars\ntitle: Environment variables\n\nEnvironment variables\nBoth the ToolJet server and client requires some environment variables to start running.\nToolJet server\nToolJet host ( required )\n| variable     | description                                                     |\n| ------------ | --------------------------------------------------------------- |\n| TOOLJET_HOST | the public URL of ToolJet client ( eg: https://app.tooljet.com )  |\nLockbox configuration ( required )\nToolJet server uses lockbox to encrypt datasource credentials. You should set the environment variable `LOCKBOX_MASTER_KEY` with a 32 byte hexadecimal string.\nApplication Secret ( required )\nToolJet server uses a secure 64 byte hexadecimal string to encrypt session cookies. You should set the environment variable `SECRET_KEY_BASE`.\n:::tip\nIf you have `openssl` installed, you can run the following commands to generate the value for `LOCKBOX_MASTER_KEY` and `SECRET_KEY_BASE`.\nFor `LOCKBOX_MASTER_KEY` use `openssl rand -hex 32`\nFor `SECRET_KEY_BASE` use `openssl rand -hex 64`\n:::\nDatabase configuration ( required )\nToolJet server uses PostgreSQL as the database.\n| variable | description            |\n| -------- | ---------------------- |\n| PG_HOST  | postgres database host |\n| PG_DB    | name of the database   |\n| PG_USER  | username               |\n| PG_PASS  | password               |\n| PG_PORT  | port                   |\n:::tip\nIf you are using docker-compose setup, you can set PG_HOST as `postgres` which will be DNS resolved by docker\n:::\nDisable database and extension creation (optional)\nToolJet by default tries to create database based on `PG_DB` variable set and additionally my try to create postgres extensions. This requires the postgres user to have CREATEDB permission. If this cannot be granted you can disable this behaviour by setting `PG_DB_OWNER` as `false` and will have to manually run them.\nCheck for updates ( optional )\nSelf-hosted version of ToolJet pings our server to fetch the latest product updates every 24 hours. You can disable this by setting the value of `CHECK_FOR_UPDATES` environment variable to `0`. This feature is enabled by default.\nComment feature enable ( optional )\nUse this environment variable to enable/disable the feature that allows you to add comments on the canvas.\n| variable | value            |\n| -------- | ---------------------- |\n| COMMENT_FEATURE_ENABLE  | `true` or `false` |\nMultiplayer feature enable ( optional )\nUse this environment variable to enable/disable the feature that allows users to collaboratively work on the canvas.\n| variable | value            |\n| -------- | ---------------------- |\n| ENABLE_MULTIPLAYER_EDITING  | `true` or `false` |\nMarketplace feature enable ( optional )\nUse this environment variable to enable/disable the feature that allows users to use the marketplace.\n| variable | value            |\n| -------- | ---------------------- |\n| ENABLE_MARKETPLACE_FEATURE  | `true` or `false` |\nEnable ToolJet Database ( optional )\n| variable           | description                                  |\n| ------------------ | -------------------------------------------- |\n| ENABLE_TOOLJET_DB  | `true` or `false`                            |\n| TOOLJET_DB         | Default value is `tooljet_db`                |\n| TOOLJET_DB_HOST    | database host                                |\n| TOOLJET_DB_USER    | database username                            |\n| TOOLJET_DB_PASS    | database password                            |\n| TOOLJET_DB_PORT    | database port                                |\n| PGRST_JWT_SECRET   | JWT token client provided for authentication |\n| PGRST_HOST         | postgrest database host                      |\nUse `ENABLE_TOOLJET_DB` to enable/disable the feature that allows users to work with inbuilt data store to build apps with. Inorder to set it up, follow the instructions here.\n:::tip\nWhen this feature is enabled, the database name provided for `TOOLJET_DB` will be utilized to create a new database during server boot process in all of our production deploy setups.\nIncase you want to trigger it manually, use the command `npm run db:create` on ToolJet server.\n:::\nServer Host ( optional )\nYou can specify a different server for backend if it is hosted on another server.\n| variable | value            |\n| -------- | ---------------------- |\n| SERVER_HOST  | Configure a hostname for the server as a proxy pass. If no value is set, it defaults to `server`. |\nDisable Multi-Workspace ( optional )\nIf you want to disable Multi-Workspace feature, set the environment variable `DISABLE_MULTI_WORKSPACE` to `true`.\nHide account setup link\nIf you want to hide account setup link from admin in manage user page, set the environment variable `HIDE_ACCOUNT_SETUP_LINK` to `true`, please make sure you have configured SMTP to receive welcome mail for users. Valid only if `DISABLE_MULTI_WORKSPACE` is not `true`.\nDisabling signups ( optional )\nSign up is enabled only if Multi-Workspace is enabled. If you want to restrict the signups and allow new users only by invitations, set the environment variable `DISABLE_SIGNUPS` to `true`.\n:::tip\nYou will still be able to see the signup page but won't be able to successfully submit the form.\n:::\nServe client as a server end-point ( optional )\nBy default, the `SERVE_CLIENT` variable will be unset and the server will serve the client at its `/` end-point.\nYou can set `SERVE_CLIENT` to `false` to disable this behaviour.\nServe client at subpath\nIf ToolJet is hosted on a domain subpath, you can set the environment variable `SUB_PATH` to support it.\nPlease note the subpath is to be set with trailing `/` and is applicable only when the server is serving the frontend client.\nSMTP configuration ( optional )\nToolJet uses SMTP services to send emails ( Eg: invitation email when you add new users to your workspace ).\n| variable           | description                               |\n| ------------------ | ----------------------------------------- |\n| DEFAULT_FROM_EMAIL | from email for the email fired by ToolJet |\n| SMTP_USERNAME      | username                                  |\n| SMTP_PASSWORD      | password                                  |\n| SMTP_DOMAIN        | domain or host                            |\n| SMTP_PORT          | port                                      |\nSlack configuration ( optional )\nIf your ToolJet installation requires Slack as a data source, you need to create a Slack app and set the following environment variables:\n| variable            | description                    |\n| ------------------- | ------------------------------ |\n| SLACK_CLIENT_ID     | client id of the slack app     |\n| SLACK_CLIENT_SECRET | client secret of the slack app |\nGoogle OAuth ( optional )\nIf your ToolJet installation needs access to data sources such as Google sheets, you need to create OAuth credentials from Google Cloud Console.\n| variable             | description   |\n| -------------------- | ------------- |\n| GOOGLE_CLIENT_ID     | client id     |\n| GOOGLE_CLIENT_SECRET | client secret |\nGoogle maps configuration ( optional )\nIf your ToolJet installation requires `Maps` widget, you need to create an API key for Google Maps API.\n| variable            | description         |\n| ------------------- | ------------------- |\n| GOOGLE_MAPS_API_KEY | Google maps API key |\nAPM VENDOR ( optional )\nSpecify application monitoring vendor. Currently supported values - `sentry`.\n| variable   | description                               |\n| ---------- | ----------------------------------------- |\n| APM_VENDOR | Application performance monitoring vendor |\nSENTRY DNS ( optional )\n| variable   | description                               |\n| ---------- | ----------------------------------------- |\n| SENTRY_DNS |  DSN tells a Sentry SDK where to send events so the events are associated with the correct project  |\nSENTRY DEBUG ( optional )\nPrints logs for sentry.\n| variable   | description                               |\n| ---------- | ----------------------------------------- |\n| SENTRY_DEBUG | `true` or `false`. Default value is `false` |\nServer URL ( optional)\nThis is used to set up for CSP headers and put trace info to be used with APM vendors.\n| variable           | description                                                 |\n| ------------------ | ----------------------------------------------------------- |\n| TOOLJET_SERVER_URL | the URL of ToolJet server ( eg: https://server.tooljet.com ) |\nRELEASE VERSION ( optional)\nOnce set any APM provider that supports segregation with releases will track it.\nNODE_EXTRA_CA_CERTS (optional)\nTooljet needs to be configured for custom CA certificate to be able to trust and establish connection over https. This requires you to configure an additional env var `NODE_EXTRA_CA_CERTS` to have absolute path to your CA certificates. This file named `cert.pem` needs to be in PEM format and can have more than one certificates.\n| variable            | description                                                       |\n| ------------------  | ----------------------------------------------------------------- |\n| NODE_EXTRA_CA_CERTS | absolute path to certificate PEM file ( eg: /ToolJet/ca/cert.pem ) |\nDisable telemetry ( optional )\nPings our server to update the total user count every 24 hours. You can disable this by setting the value of `DISABLE_TOOLJET_TELEMETRY` environment variable to `true`. This feature is enabled by default.\nPassword Retry Limit (Optional)\nThe maximum retry limit of login password for a user is by default set to 5, account will be locked after 5 unsuccessful login attempts. Use the variables mentioned below to control this behavior:\n| variable                              | description                                                   |\n| ------------------------------------- | -----------------------------------------------------------   |\n| DISABLE_PASSWORD_RETRY_LIMIT          | (true/false) To disable the password retry check, if value is `true` then no limits for password retry |\n| PASSWORD_RETRY_LIMIT                  | To change the default password retry limit (5) |\nSSO Configurations (Optional)\nConfigurations for instance level SSO. Valid only if `DISABLE_MULTI_WORKSPACE` is not `true`.\n| variable                              | description                                                   |\n| ------------------------------------- | -----------------------------------------------------------   |\n| SSO_GOOGLE_OAUTH2_CLIENT_ID           | Google OAuth client id |\n| SSO_GIT_OAUTH2_CLIENT_ID              | GitHub OAuth client id |\n| SSO_GIT_OAUTH2_CLIENT_SECRET          | GitHub OAuth client secret |\n| SSO_GIT_OAUTH2_HOST                   | GitHub OAuth host name if GitHub is self hosted |\n| SSO_ACCEPTED_DOMAINS                  | comma separated email domains that supports SSO authentication |\n| SSO_DISABLE_SIGNUPS                   | Disable user sign up if authenticated user does not exist |\nToolJet client\nServer URL ( optionally required )\nThis is required when client is built separately.\n| variable           | description                                                 |\n| ------------------ | ----------------------------------------------------------- |\n| TOOLJET_SERVER_URL | the URL of ToolJet server ( eg: https://server.tooljet.com ) |\nServer Port ( optional)\nThis could be used to for local development, it will set the server url like so: `http://localhost:<TOOLJET_SERVER_PORT>`\n| variable            | description                             |\n|---------------------|-----------------------------------------|\n| TOOLJET_SERVER_PORT | the port of ToolJet server ( eg: 3000 ) |\nAsset path ( optionally required )\nThis is required when the assets for the client are to be loaded from elsewhere (eg: CDN).\nThis can be an absolute path, or relative to main HTML file.\n| variable           | description                                                   |\n| ------------------ | -----------------------------------------------------------   |\n| ASSET_PATH         | the asset path for the website ( eg: https://app.tooljet.com/) |\nServe client as a server end-point ( optional )\nBy default the client build will be done to be served with ToolJet server.\nIf you intend to use client separately then can set `SERVE_CLIENT` to `false`.\nPostgREST server (Optional)\n| variable           | description                                     |\n| ------------------ | ----------------------------------------------- |\n| PGRST_JWT_SECRET   | JWT token client provided for authentication    |\n| PGRST_DB_URI       | database connection string for tooljet database |\n| PGRST_LOG_LEVEL    | `info`                                          |\nIf you intent to make changes in the above configuration. Please refer PostgREST configuration docs.\n:::tip\nIf you have openssl installed, you can run the following command `openssl rand -hex 32` to generate the value for `PGRST_JWT_SECRET`.\nIf this parameter is not specified then PostgREST refuses authentication requests.\n:::\n:::info\nPlease make sure that DB_URI is given in the format `postgrest://[USERNAME]:[PASSWORD]@[HOST]:[PORT]/[DATABASE]`",
    "tag": "tooljet"
  },
  {
    "title": "Try ToolJet with Docker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/setup/docker-local.md",
    "content": "\nid: docker-local\ntitle: Try ToolJet locally\n\nTry ToolJet with Docker\n:::info\nThis doc is not for setting up the development environment, it is only for trying out ToolJet locally using Docker. Check out Contributing Guide.\n:::\nYou can run the command below to have ToolJet up and running right away.\n`bash\ndocker run \\\n  --name tooljet \\\n  --restart unless-stopped \\\n  -p 3000:3000 \\\n  -v tooljet_data:/var/lib/postgresql/13/main \\\n  tooljet/try:latest`\nSetup information\n\nRuns the ToolJet server on the port 3000 on your machine.\nContainer has postgres already configured within. All the data will be available in the docker volume `tooljet_data`.\nDefault user credentials to login (email: `dev@tooljet.io`, password: `password`).\nYou can make use of `--env` or `--env-file` flag to test against various env configurables mentioned here.\n",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on DigitalOcean",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/setup/digitalocean.md",
    "content": "\nid: digitalocean\ntitle: DigitalOcean\n\nDeploying ToolJet on DigitalOcean\nNow you can quickly deploy ToolJet using the Deploy to DigitalOcean button.\nDeploying\nFollow the steps below to deploy ToolJet on DigitalOcean:\n\nClick on the button below to start one click deployment\n\n\n\n  [![Deploy to DigitalOcean](https://www.deploytodo.com/do-btn-blue.svg)](https://cloud.digitalocean.com/apps/new?repo=https://github.com/ToolJet/ToolJet/tree/main)\n\n  \n\nA new tab will open up, sign-in to your DigitalOCean account. Once signed-in, the Create App page will open up and Resources will be already selected. Click on Next button.\n\n\n\nNow, on Environment Variables page you can add new variables or edit the existing ones. Check the environment variables here.\n\n\n\nOn the next page, you can change the App name, Project, and the Region.\n\n\n\nOn the last page, you'll be asked to Review all the app details such that we entered before such as Resources, Environment Variables, Region, and there will also be Billing section at the end. Review all the details and click the Create Resource button.\n\n\n\nOnce you click the Create Resource button, the build will begin. Once the build is complete, you'll see the resource and a URL next to it. Click on the URL to open the deployed ToolJet.\n\n:::tip\nToolJet server and client can be deployed as standalone applications. If you do not want to deploy the client on DigitalOcean, modify `package.json` accordingly. We have a guide on deploying ToolJet client using services such as Firebase.\n:::\nDeploying Tooljet Database\nIf you intend to use this feature, you'd have to set up and deploy PostgREST server which helps querying ToolJet Database.\nYou can learn more about this feature here.\nFollow the steps below to deploy ToolJet Database on DigitalOcean:\n\n\nIf you are using dev database within ToolJet deployment, upgrade it to managed database. You could also add a separate database, if you intent use a differenet database, please refer the environment variables for additional env variables. \n\n\nCreate a new app for PostgREST server. You can opt for docker hub to deploy PostgREST image of version `10.1.x`.\n\n\n\n\nUpdate the environment variables for PostgREST and expose the HTTP port `3000`.\n\n\n\nAdd your newly created PostgREST app to the trusted sources of your managed or separate database.\n",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet using Docker Compose",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/setup/docker.md",
    "content": "\nid: docker\ntitle: Docker\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nDeploying ToolJet using Docker Compose\nFollow the steps below to deploy ToolJet on a server using Docker Compose. ToolJet requires a PostgreSQL database to store applications definitions, (encrypted) credentials for datasources and user authentication data.\n:::info\nIf you rather want to try out ToolJet on your local machine with Docker, you can follow the steps here.\n:::\nInstalling Docker and Docker Compose\nInstall docker and docker-compose on the server.\n   - Docs for Docker Installation\n   - Docs for Docker Compose Installation\nDeployment options\nThere are two options to deploy ToolJet using Docker Compose:\n1.   Using an external PostgreSQL database. This setup is recommended if you want to use a managed PostgreSQL service such as AWS RDS or Google Cloud SQL.\n2.   Using in-built PostgreSQL database. This setup uses the official Docker image of PostgreSQL.\nConfused about which setup to select? Feel free to ask the community via Slack: https://tooljet.com/slack.\n:::info\nWe recommend using the managed PostgreSQL service on production for ease of administration, security, and management (backups, monitoring, etc).\nIf you'd want to run postgres with persistent volume rather, curl for the alternate docker compose file shared in the next step.\n:::\n\n\n\n\nSetup a PostgreSQL database and make sure that the database is accessible.\n\n\nDownload our production docker-compose file into the server.\n  `bash\n  curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/docker/docker-compose.yaml`\n\n\nCreate `.env` file in the current directory (where the docker-compose.yaml file is downloaded):\n\n\n`bash\n  curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/docker/.env.example\n  mv .env.example .env`\nSet up environment variables in `.env` file as explained in environment variables reference\n`TOOLJET_HOST` environment variable can either be the public ipv4 address of your server or a custom domain that you want to use.\nExamples:\n  `TOOLJET_HOST=http://12.34.56.78` or\n  `TOOLJET_HOST=https://yourdomain.com` or\n  `TOOLJET_HOST=https://tooljet.yourdomain.com`\n:::info\n  Please make sure that `TOOLJET_HOST` starts with either `http://` or `https://`\n  :::\n:::info\n  If there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates.\n  :::\n\nOnce you've populated the `.env` file, run\n\n:::note\n  Kindly uncomment PostgREST service within the docker-compose.yaml if you intend to use tooljet database.\n  :::\n`bash\n  docker-compose up -d`\nto start all the required services.\n:::info\n  If you're running a linux server, `docker` might need sudo permissions. In that case you can either run:\n  `sudo docker-compose up -d`\n  or\n  setup docker to run without root privileges by following the instructions written here https://docs.docker.com/engine/install/linux-postinstall/\n  :::\n\nIf you've set a custom domain for `TOOLJET_HOST`, add a `A record` entry in your DNS settings to point to the IP address of the server.\n\n\n\n\n\nDownload our production docker-compose file into the server.\n  `bash\n  curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/docker/docker-compose-db.yaml\n  mv docker-compose-db.yaml docker-compose.yaml\n  mkdir postgres_data`\n\n\nCreate `.env` file in the current directory (where the docker-compose.yaml file is downloaded):\n\n\n`bash\n  curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/docker/.env.example\n  mv .env.example .env`\nSet up environment variables in `.env` file as explained in environment variables reference\n`TOOLJET_HOST` environment variable can either be the public ipv4 address of your server or a custom domain that you want to use.\nExamples:\n  `TOOLJET_HOST=http://12.34.56.78` or\n  `TOOLJET_HOST=https://yourdomain.com` or\n  `TOOLJET_HOST=https://tooljet.yourdomain.com`\n:::info\n  Please make sure that `TOOLJET_HOST` starts with either `http://` or `https://`\n  :::\n:::info\n  If there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates.\n  :::\n\nOnce you've populated the `.env` file, run\n\n:::note\n  Kindly uncomment PostgREST service within the docker-compose.yaml if you intend to use tooljet database.\n  :::\n`bash\n  docker-compose up -d`\nto start all the required services.\n:::info\n  If you're running on a linux server, `docker` might need sudo permissions. In that case you can either run:\n  `sudo docker-compose up -d`\n  OR\n  Setup docker to run without root privileges by following the instructions written here https://docs.docker.com/engine/install/linux-postinstall/\n  :::\n\nIf you've set a custom domain for `TOOLJET_HOST`, add a `A record` entry in your DNS settings to point to the IP address of the server.\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet client",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/setup/client.md",
    "content": "\nid: client\ntitle: Deploying ToolJet client\n\nDeploying ToolJet client\nToolJet client is a standalone application and can be deployed on static website hosting services such as Netlify, Firebase, S3/Cloudfront, etc.\nYou can build standalone client with the below command:\n`bash\nSERVE_CLIENT=false npm run build`\nDeploying ToolJet client on Firebase\n:::tip\nYou should set the environment variable `TOOLJET_SERVER_URL` ( URL of the server ) while building the frontend and also set `SERVE_CLIENT` to `false`` for standalone client build.\nFor example: `SERVE_CLIENT=false TOOLJET_SERVER_URL=https://server.tooljet.com npm run build && firebase deploy`\n:::\n\nInitialize firebase project\n   `bash\n    firebase init`\n   Select Firebase Hosting and set build as the static file directory\nDeploy client to Firebase\n   `bash\n    firebase deploy`\n\nDeploying ToolJet client with Google Cloud Storage\n:::tip\nYou should set the environment variable `TOOLJET_SERVER_URL` ( URL of the server ) while building the frontend.\nFor example: `SERVE_CLIENT=false TOOLJET_SERVER_URL=https://server.tooljet.io npm run build`\n:::\nUsing Load balancer\nTooljet client can be hosted from Cloud Storage bucket just like hosting any other static website.\nFollow the instructions from google documentation here.\nSummarising the steps below:\n1. Create a bucket and upload files within the build folder such that the `index.html` is at the bucket root.\n\n\nEdit permissions for the bucket to assign New principal as `allUsers` with role as `Storage Object Viewer` and permit for public access for the bucket.\n\n\nClick on Edit website configuration from the buckets browser and specify the main page as `index.html`\n\n\nFollow the instructions on creating a load balancer for hosting a static website.\n\n\nOptionally, create Cloud CDN to use with the backend bucket assigned to the load balancer.\n\n\nAfter the load balancer is created there will be an IP assigned to it. Try hitting it to check the website is being loaded.\n\n\nUse the load balancer IP as the static IP for the A record of your domain.\n\n\nUsing Google App Engine\n\n\nUpload the build folder onto a bucket\n\n\nUpload `app.yaml` file onto bucket with the following config\n\n\n```yaml\n   runtime: python27\n   api_version: 1\n   threadsafe: true\nhandlers:\n   - url: /\n     static_files: build/index.html\n     upload: build/index.html\n\n\nurl: /(.)\n     static_files: build/\\1\n     upload: build/(.)\n   ```\n\n\nActivate cloud shell on your browser and create build folder\n   `bash\n   mkdir tooljet-assets`\n\n\nCopy the uploaded files onto an assets folder which is to be served\n   `bash\n   gsutil rsync -r gs://your-bucket-name/path-to-assets ./tooljet-assets`\n\n\nDeploy static assets to be served\n   ```bash\n   cd tooljet-assets && gcloud app deploy\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Examples",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/how-to/import-external-lib-py.md",
    "content": "\nid: import-external-libraries-using-runpy\ntitle: Import external libraries using RunPy\n\nToolJet allows you to utilize python packages in your app by importing them using the RunPy query. \nIn this how-to guide, we will import a few packages and use it in the application.\n:::caution Unsupported modules\nThe modules that are not currently supported in Pyodide are those that have C or C++ extensions that rely on system libraries. These modules cannot be used in Pyodide because it runs in a web browser, which does not have access to the underlying system libraries that the C or C++ extensions rely on. Additionally, Pyodide uses a version of Python that has been compiled to WebAssembly, which does not support the same system calls as a regular version of Python. Therefore, any module that requires access to system libraries or system calls will not work in Pyodide.\n:::\n\n\nCreate a new application and then create a new RunPy query from the query panel.\n    \n\n\n\n\nLet's write some code for importing packages. We will first import the micropip which is a package installer for Python and then we will install the `Pandas` and `NumPy` using micropip. Run the query to install the packages.\n    `python\n    import micropip\n    await micropip.install('pandas')\n    await micropip.install('numpy')`\n\n\n\n\n\n:::tip\nEnable the Run this query on application load? option to make the packages available throughout the application.\n:::\nExamples\nArray of random numbers of using NumPy\n\n\nLet's create a RunPy query that will use random module from the NumPy package and the query will generate array of random numbers. \n    ```python\n    from numpy import random\nx = random.binomial(n=10, p=0.5, size=10)\nprint(x)\n```\n\n\n\n\n\n:::info\nYou can check the output on the browser's console.\n:::\nParse CSV data\n\n\nLet's create a RunPy query that will parse the data from the csv file. In this query we will use `StringIO`, `csv`, and `Pandas` module.\n    ```python\n    from io import StringIO\n    import csv\n    import pandas as pd\nscsv = components.filepicker1.file[0].content\nf = StringIO(scsv)\nreader = csv.reader(f, delimiter=',')\ndf = pd.DataFrame(reader)\nprint(df.info())\nprint(df)\n```\n\n\n\n\n\nAdd a file picker component on the canvas and set a event handler for On file loaded event to Run Query that we created for parsing the data.\n    \n\n\n\n\nFinally, let's load a csv file on the file picker and check the output by the RunPy query on the browser console.\n    \n\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Upload and download files on AWS S3 bucket",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/how-to/upload-files-aws.md",
    "content": "\nid: upload-files-aws\ntitle: Upload files on AWS S3 bucket\n\nUpload and download files on AWS S3 bucket\nThis guide will help you in quickly building a basic UI for uploading or downloading files from AWS S3 buckets.\nBefore building the UI, check out the docs for AWS S3 data source to learn about setting up AWS S3 and adding the data source. \nOnce you have successfully added the AWS data source, build a basic UI using the following widgets:\n- Dropdown: For selecting a bucket in S3 storage.\n- Table: For listing all the objects inside the selected bucket in dropdown.\n- Text Input: For getting a path for the file that is to be uploaded.\n- File picker: For uploading the file.\n- Button: This will be used to fire the upload query.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/ui.png)\n\n\nQueries\nWe'll create the following queries:\n\ngetBuckets\nlistObjects\nuploadToS3\ndownload\n\ngetBuckets\nThis query will fetch the list of all the buckets in your S3. Just create a new query, select AWS S3 data source, and choose List buckets operation. Name the query getBuckets and click Save.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/getBuckets.png)\n\n\nNow, let's edit the properties of dropdown widget.\n\nLabel: Set the label as Bucket.\nOption values: Set option values as `{{queries.getBuckets.data.Buckets.map(bucket => bucket['Name'])}}`. We're mapping the data returned by the query as the returned data is array of abjects.\nOption label: Set option values as `{{queries.getBuckets.data.Buckets.map(bucket => bucket['Name'])}}`. This will display the same option label as option values.\n\nYou can later add an event handler for running the listObject query whenever an option is selected from the dropdown.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/dropdown.png)\n\n\nlistObjects\nThis query will list all the objects inside the selected Bucket in dropdown. Select List objects in a bucket operation, enter `{{components.dropdown1.value}}` in the Bucket field - this will dynamically get the field value from the selected option in dropdown.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/listObjects.png)\n\n\nEdit the properties of table widget:\n- Table data: `{{queries.listObjects.data['Contents']}}`\n- Add Columns:\n  - Key: Set the Column Name to `Key` and Key to `Key`\n  - Last Modified: Set the Column Name to `Last Modified` and Key to `LastModified`\n  - Size: Set the Column Name to `Size` and Key to `Size`\n- Add a Action button: Set button text to Copy signed URL, Add a handler to this button for On Click event and Action to Copy to clipboard, in the text field enter `{{queries.download.data.url}}` - this will get the download url from the download query that we will create next.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/table.png)\n\n\ndownload\nCreate a new query and select Signed URL for download operation. In the Bucket field, enter `{{components.dropdown1.value}}` and in Key enter `{{components.table1.selectedRow.Key}}`.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/download.png)\n\n\nEdit the properties of the table, add a Event handler for running the `download` query for `Row clicked` event. This will generate a signed url for download every time a row is clicked on the table.\nuploadToS3\nCreate a new query, select the Upload object operation. Enter the following values in their respective fields:\n- Bucket: `{{components.dropdown1.value}}`\n- Key:  {{ components.textinput1.value + '/' +components.filepicker1.file[0].name}}`- **Content type**:`{{components.filepicker1.file[0].type}}`- **Upload data**:`{{components.filepicker1.file[0].base64Data}}`- **Encoding**:`base64`\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/uploadToS3.png)\n\n\nConfigure the file picker:\nClick on the widget handle to edit the file picker properties: \n\nChange the Accept file types to `{{\"application/pdf\"}}` for the picker to accept only pdf files or `{{\"image/*\"}}` for the picker to accept only image files . In the screenshot below, we have set the accepted file type property to `{{\"application/pdf\"}}` so it will allow to select only pdf files:\n\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/result-filepicker.png)\n\n\n\n\nChange the Max file count to `{{1}}` as we are only going to upload 1 file at a time.\n\n\nSelect a pdf file and hold it in the file picker.\n\n\n:::info\n File types must be valid MIME type according to input element specification or a valid file extension.\nTo accept any/all file type(s), set `Accept file types` to an empty value.\n:::\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/config-filepicker.png)\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Change text color in columns by accessing `cellValue` and `rowData` in the table",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/how-to/access-cellvalue-rowdata.md",
    "content": "\nid: access-cellvalue-rowdata\ntitle: Change text color in columns of the table\n\nChange text color in columns by accessing `cellValue` and `rowData` in the table\nIn this how-to guide, we will build an app that will use a sample RestAPI to display the data in the table, and then we will change the text color of the columns according to the condition.\n\nLet's start by creating a new application and then adding a table widget into the canvas.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/newapp.gif)\n\n\n\nNow go to the Query Panel at the bottom of the app editor and click on the `+` button.\nChoose RestAPI data source\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/restapi.png)\n\n\n\nNow we will use a sample RestAPI endpoint -  I have used the API provided by coinstats.app, API-URL:\nhttps://api.coinstats.app/public/v1/coins?skip=0&limit=100&currency=USD\nChoose `GET` method, enter the request URL (API URL in previous step), name the query - I have named it `crypto`, and then Create the query\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/apiendpoint.png)\n\n\n\nNow hit the Run button next to the query name to run the query.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/runquery.png)\n\n\n\nOnce you run the query, you can check the data returned by the query in the Inspector on the left sidebar.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/inspectord.png)\n\n\n\nNow that we have got the data, we will display it on the table. To do this, click on the widget handle of the table to open its properties in the right sidebar. \nIn the Table Data field, enter `{{queries.crypto.data.coins}}` - as you can see in the screenshot of the inspector the data is inside the `coins` array. You'll see the data in the Preview(green box) below the field.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/data.png)\n\n\n\nLet's add the columns that we want to display on the table. Go to the Columns section, Add columns, set their Names, and set key for each column. I have added 5 columns: Rank, Name, Symbol, Price, and Market Cap.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/columns.png)\n\n\n\nOnce you've added the columns, you'll get the table like this:\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/table.png)\n\n\nUsing cellValue to change column text color\nNow that we have our data on the table, we will change the color of the text in the Price and Market Cap columns.\n\nEdit table properties, go to Columns, and click on the Price Column to open its properties.\nFor Price column, we want to change color of those cells who have value which is greater than 1000 to red else to green if it is less than 1000. So to do this, we will set a condition in Text Color property of this column: `{{cellValue >= 1000 ? 'red' : 'green'}}`\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/price.png)\n\n\n\nSimilarly, we will do for Market Cap column. We want to change the text color of those cells who have value which is greater than 60000000000 to red else to green if it is less than 60000000000. so the condition will be `{{cellValue >= 60000000000 ? 'red' : 'green'}}`\nNow the text color of cells in the columns will be updated.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/cellvalue.png)\n\n\n:::info\nYou can also use Hex Color Code instead of mentioning color in plane text.\n:::\nUsing rowData to change column text color\n\nTo change the color of the text using `rowData` variable it is required to mention the column name whose cell value we will be comparing in the condition. Let's take a look by changing the text color of Symbol column. \nWe will add a condition to look in the row data and if the row has column called `name` which has value `Solana` then it should change the color to red else the color should be green.\nEdit the properties of the Symbol column, set the Text Color field value to `{{rowData.name ===  'Solana' ? 'red' : 'green'}}`.\nYou'll see that in the Symbols column all the values has become green except the one that has Solana in Name column.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/rowData.png)",
    "tag": "tooljet"
  },
  {
    "title": "Upload files using GCS",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/how-to/upload-files-gcs.md",
    "content": "\nid: upload-files-gcs\ntitle: Upload files using GCS\n\nUpload files using GCS\nIn this guide, we are going to create an interface to upload PDFs to Google Cloud Storage.\nBefore adding the new data source we will need to have a private key for our GCS bucket and make sure the key has the appropriate rights.\nSetting up Google Cloud Storage data source\n\nGo to the data source manager on the left-sidebar and click on the `+` button.\nAdd a new GCS data source from the  APIs section in modal that pops up.\nEnter the JSON private key for service account and test the connection.\nClick on Save to add the data source.\n\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/adding-account.png)\n\n\nAdding a file picker\n\nDrag and drop the file picker widget on the canvas\nConfigure the file picker:\nChange the Accept file types to `{{\"application/pdf\"}}` for the picker to accept only pdf files. In the screenshot below, we have set the accepted file type property to `{{\"application/pdf\"}}` so it will allow to select only pdf files:\n\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/result-filepicker.png)\n\n\n\n\nChange the Max file count to `{{1}}` as we are only going to upload 1 file at a time.\n\n\nSelect a pdf file and hold it in the file picker.\n\n\n:::info\n File types must be valid MIME type according to input element specification or a valid file extension.\nTo accept any/all file type(s), set `Accept file types` to an empty value.\n:::\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/config-filepicker.png)\n\n\nCreating a query\n\nClick on the `+` button of the query manager at the bottom panel of the editor and select the GCS data source\nSelect Upload file operation and enter the required parameters:\nBucket: `gs://test-1`\nFile Name: `{{components.file1.file[0]['name']}}`\nContent Type: `{{components.file1.file[0]['type']}}`\nUpload data: `{{components.file1.file[0]['base64Data']}}`\nEncoding: `base64`\nClick on Save to create the query\n\nRunning the query\n\nAdd a button that will fire the query to upload the file\nEdit the properties of the button and add a event handler to Run the query on On-Click event.\nClick on Button to fire the query, this will upload the pdf file that you selected earlier through the file picker and will upload it on the GCS.\n\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/final-result.png)",
    "tag": "tooljet"
  },
  {
    "title": "use-form-component.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/how-to/use-form-component.md",
    "content": "\nid: use-form-component\ntitle: Use form component\n\nIn this how-to guide, we will be building a simple application that will leverage the form component for adding a record into the database. For this guide, we will be using Google Sheet datasource to read and write data.\n\n\n\n\n\nLet's connect to the datasource i.e. Google Sheets and give the `Read and Write` permission.\n    \n\n\n- Now, drag a table on the canvas and add the form component next to it.\n\n\n\n\n\nCurrently, the table component is populated with the sample data that it has by default. Let's create a new query from the query panel and choose the Google Sheet datasource. \n    \n\n\n\n\nThe query will read the data from the database and we will use the returned data to populate the table. Go to the table property and in the table data value enter {{queries.queryname.data}} where queryname is the name of the query that we created in previous step.\n    \n\n\n\n\nlet's go to the form and add the components inside it required for adding a record into the database.\n    \n\n\n\n\nSince our database record has five fields Id, Title, Price, Category and Image we will add the components in the form for the same. The form already comes with a Submit button so we don't have to add that. For Id, Title, and Image we will use text-input, for Price we will use number-input and for category we can use dropdown components.\n    \n\n\n\n\nBefore editing the form properties, let's make a few changes in the components that we have added inside it. First edit the property of the number input and set the default value, maximum and minimum value, and then edit the dropdown component and set the option values and option labels.\n    \n\n\n\n\nNow, we can edit the properties of the form component. Go to its properties, in Button To Submit Form select the button1 that was already there on the form. Go to event handler, and for On submit event we will run the query that will get the data from the form and will store into the database.\n    \n\n\n\n\nLet's create a query that will get the data from the form and add a record in the sheet. Create a new google sheeet query and from the operation choose Append data to a spreadsheet\n`js\n    [ \n        {\n            \"id\":\"{{components.form1.data.textinput1.value}}\",\n            \"title\":\"{{components.form1.data.textinput2.value}}\",\n            \"price\":\"{{components.form1.data.numberinput1.value}}\",\n            \"category\":\"{{components.form1.data.dropdown1.value}}\",\n            \"image\":\"{{components.form1.data.textinput4.value}}\"\n        } \n    ]`\n\n\nOnce done, save the query and add it to the Form's event handler.\n\n\nNow, this application can be used to load the data from the Google Sheet and the form can be used to append more records to the sheet.\n\n\n:::tip\n- Make sure to enable Run query on page load? option of the read query to populate the table everytime the app is loaded\n- You can also add a event handler on the append query to run the read query when append is successful, this will update the table data when the append is done\n- Learn more about the connecting Google sheet datasource and the CRUD operations available here.",
    "tag": "tooljet"
  },
  {
    "title": "REST API authentication using OAuth 2.0",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/how-to/oauth2-authorization.md",
    "content": "\nid: oauth2-authorization\ntitle: REST API authentication using OAuth 2.0\n\nREST API authentication using OAuth 2.0\nToolJet\u2019s REST API data source supports OAuth 2.0 as the authentication type. In this guide, we\u2019ll learn how to use Google OAuth2 API to delegate authorization and authentication for your ToolJet Application.\nBefore setting up the REST API data source in ToolJet, we need to configure the Google Cloud Platform to gather the API keys required for the authorization access.\nSetting up Google Cloud Platform\nGoogle Cloud Platform provides access to more than 350 APIs and Services that can allow us to access data from our Google account and its services. Let's create an OAuth application that can be given permission to use our Google profile data such as Name and Profile picture.\n\nSign in to your Google Cloud account, and from the console create a New Project.\nNavigate to the APIs and Services, and then open the OAuth consent screen section from the left sidebar.\nEnter the Application details and select the appropriate scopes for your application. We will select the profile and the email scopes. \nOnce you have created the OAuth consent screen, Create new credentials for the OAuth client ID from the Credentials section in the left sidebar.\nSelect the application type, enter the application name, and then add the following URIs under Authorised Redirect URIs:\n`https://app.tooljet.com/oauth2/authorize` (if you\u2019re using ToolJet cloud)\n`http://localhost:8082/oauth2/authorize` (if you\u2019re using ToolJet locally)\n\n\nNow save and then you\u2019ll get the Client ID and Client secret for your application.\n\n\nConfiguring ToolJet Application with Google's OAuth 2.0 API\nLet's follow the steps to authorize ToolJet to access your Google profile data:\n\nSelect add data source from the left sidebar, and choose REST API from the dialog window.\n\n:::info\nYou can rename the data source by clicking on its default name `REST API`\n:::\n\nIn the URL field, enter the base URL `https://www.googleapis.com/oauth2/v1/userinfo`; the base URL specifies the network address of the API service.\nSelect authentication type as `OAuth 2.0`\nKeep the default values for Grant Type, Add Access Token To, and Header Prefix i.e. `Authorization Code`, `Request Header`, and `Bearer` respectively.\nEnter Access Token URL: `https://oauth2.googleapis.com/token`; this token allows users to verify their identity, and in return, receive a unique access token.\nEnter the Client ID and Client Secret that we generated from the Google Console.\nIn the Scope field, enter `https://www.googleapis.com/auth/userinfo.profile`; Scope is a mechanism in OAuth 2.0 to limit an application's access to a user's account. Check the scopes available for Google OAuth2 API here.\nEnter Authorization URL: `https://accounts.google.com/o/oauth2/v2/auth`; the Authorization URL requests authorization from the user and redirects to retrieve an authorization code from identity server.\n\nCreate three Custom Authentication Parameters:\n| params      | description |\n| ----------- | ----------- |\n| response_type | code ( `code` refers to the Authorization Code) |\n| client_id | Client ID  |\n| redirect_uri | `http://localhost:8082/oauth2/authorize` if using ToolJet locally or enter this `https://app.tooljet.com/oauth2/authorize` if using ToolJet Cloud.  |\n\n\nKeep the default selection for Client Authentication and Save the data source.\n\n\n\nCreate the query\nLet\u2019s create a query to make a `GET` request to the URL, it will pop a new window and ask the user to authenticate against the API.\n\nAdd a new query and select the REST API datasource from the dropdown\nIn the Method dropdown select `GET` and in advance tab toggle `run query on page load?`\nSave and Run the query.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Access a user's location using RunJS query (Geolocation API)",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/how-to/access-users-location.md",
    "content": "\nid: access-users-location\ntitle: Access a user's location\n\nAccess a user's location using RunJS query (Geolocation API)\nIn this how-to guide, we will build a ToolJet application that will utilize the JavaScript Geolocation API to get the user's location. The Geolocation API provides access to geographical location data associated with a user's device. This can be determined using GPS, WIFI, IP Geolocation and so on.\n:::info\nTo protect the user's privacy, Geolocation API requests permission to locate the device. If the user grants permission, you will gain access to location data such as latitude, longitude, altitude, and speed. \n:::\n\n\nLet's start by creating a new application\n\n\n\n\n\nIn the app editor, go to the query panel at the bottom and create a RunJS query by selecting Run JavaScript Code as the datasource\n\n\n\n\n\nYou can use the following javascript code that makes use of geolocation api to get the location\n```js\nfunction getCoordinates() {\nreturn new Promise(function(resolve, reject) {\n    navigator.geolocation.getCurrentPosition(resolve, reject);\n});\n}\nasync function getAddress() {\n// notice, no then(), cause await would block and \n// wait for the resolved result\nconst position = await getCoordinates(); \nlet latitude = position.coords.latitude;\nlet longitude = position.coords.longitude;\nreturn [latitude, longitude];\n}\nreturn await getAddress()\n```\n\n\nNow, go to the Advanced tab and enable the `Run query on page load?` option. Enabling this option will run this javascript query every time the app is opened by the user and the query will return the location\n\n\nSave the query and hit the fire button\n\n\nAs soon as you hit the fire button, the browser will prompt you to allow the permission to share the location access to ToolJet app. You'll need to allow it to return the location data\n\n\n\n\n\nNow, to check the data returned by the query go to the Inspector on the left sidebar. Expand the queries -> `runjs1`(query name) -> and then expand the data. You'll find the coordinates\n\n\n\n\n\nNext, we can use these coordinates returned by the query on the map component to show the location. Drop a map component on the canvas and edit its properties. In the Initial location property, enter\n`js\n{{ {\"lat\": queries.runjs1.data[0], \"lng\": queries.runjs1.data[1]} }}`\n\n\n\n\n\nFinally, you'll see the location updated on the map component\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Enable/Disable a component using current user's property",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/how-to/access-users-groups.md",
    "content": "\nid: access-currentuser\ntitle: Enable/Disable a component using current user's property\n\nEnable/Disable a component using current user's property\nLet's take look at the exposed variables of the current user property:\n\nemail : The value can accessed using `{{globals.currentUser.email}}`\nfirstName : The value can accessed using `{{globals.currentUser.firstName}}`\nlastName : The value can accessed using `{{globals.currentUser.lastName}}`\nlastName : The value can accessed using `{{globals.currentUser.lastName}}`\ngroups : By default, the admin will be in the two groups `all_users` and `admin`, and any user who is not admin will always be in the `all_users` group by default. Since the groups is an array you\u2019ll have to provide the index ([0], [1], and so on) to return the group name. The value can be accessed using `{{globals.currentUser.groups[1]}}`.\n\n\n\n\nExample: Disable a button if a user is not admin\n\n\nClick on the Button handle to open its properties, on the Styles tab go to the Disable property. \n\n\n\n\n\nSet a condition on the Disable field so that if the the user who is using the app does not have admin value in the first index of groups array return true. The condition can be:\n`javascript\n{{globals.currentUser.groups[1] !== \"admin\" ? true : false}}`\n\n\n\n\n\nNow, when you'll release the app, if the user is not is not admin the button will be disabled. \n\n\n\n\n\n:::info\nIn this how-to we have used the Groups property of the Current User. You can use any of the exposed variables mentioned above according to your use.",
    "tag": "tooljet"
  },
  {
    "title": "loading-image-pdf-from-db.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/how-to/loading-image-pdf-from-db.md",
    "content": "\nid: loading-image-pdf-from-db\ntitle: Loading image/PDF from base64 string\n\nIn this how-to guide we will see how we can load an image or PDF file using the base64 string available on the database. In this how-to, we have used the postgres database which already has the base64 strings for the image or the PDF files available.\n\n\nLet's drag a filepicker component onto the canvas, and pick one image and one pdf file\n    \n\n\n\n\nNow, create a query for inserting an image from the filepicker. As you can see in the screenshot below, we are using the exposed variable of the filepicker component to retrieve the base64 data of the uploaded files.\n    \n\n\n\n\nCreate another query for returning the data from the database and we will use this base64 data returned in this query to display on the image and pdf components.\n    \n\n\n\n\nDrag the image and a PDF component on the canvas. Edit the property of the PDF component and in the file URL enter:\n    `js\n    {{'data:image/png;base64,' + queries.get.data[7].pdf}}`\n    Similarly for the image component:\n    `js\n    {{'data:image/jpeg;base64,' + queries.get.data[7].image}}`\n\n\n\n\n\n:::info\nYou can also use transformations in the query response and concat `data:image/jpeg;base64,` to the base64 data.",
    "tag": "tooljet"
  },
  {
    "title": "run-query-at-specified-intervals.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/how-to/run-query-at-specified-intervals.md",
    "content": "\nid: run-query-at-specified-intervals\ntitle: Run query at specified intervals\n\nIn this how-to guide, we will learn how to make a query trigger at the specific intervals.\n\nLet's go to the ToolJet dashboard and create a new application\nOnce the app builder opens up, drag a table component to canvas\n\nNow, create a new REST API query from the query panel at the bottom of the app builder. We will be using the data from the mock REST API and then load the data on the table. Let's create a REST API, choose `GET` method from the dropdown, enter the endpoint `(https://jsonplaceholder.typicode.com/posts)`, name the query `post` and then save and run it\n    \n\n\n- Go to the Table properties and add connect the query data to table by adding value to table data property which is `{{queries.post.data}}`\n\n\n\n\n\nNow, we will create a RunJS query that will first set a variable called `interval` which will include the value returned by the `setInterval()` method that calls a function `countdown` at specified intervals. The countdown function has the code to trigger the `post` query that we created in the previous step.\n`js\nactions.setVariable('interval',setInterval(countdown, 5000));\nfunction countdown(){\n    queries.post.run()\n}`\n- Go to the Advanced tab of the query, enable `Run query on page load?` this will trigger this RunJS query when the app is loaded. Name the query as `set` and Save it. Note that you will have to save the query and not `Save and Run` because doing it will trigger the query and you won't be able to stop the query unless you reload the page or go back to dashboard.\n\n\n\n- To prevent the query from triggering indefinitely, we will create another RunJS query that will make use of `clearInterval()` method. In this method we will get the value from the variable that we created in `set` query. Save this query as `clear`.\n`js\nclearInterval(variables.interval)`\n- Finally, let's add a button on to the canvas and add the event handler to the button to run the `clear` query.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Layout",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/how-to/use-inspector.md",
    "content": "\nid: use-inspector\ntitle: Use Inspector\n\nIn this how-to guide, we will take a look at Inspector of the app-builder and see how it can be helpful in building applications.\nThe Inspector can be used to inspect the data of the queries, properties and values of the components that are there on the canvas, ToolJet's global variables and the variables that have been set by the user.\n\n\n\nLayout\nLet's take a look at the layout of the Inspector panel:\n\n\nOn the top-right, we have a Pin button to pin and unpin the inspector panel. This button can be useful when you want to see the live changes on inspector while triggering a query or performing some event/action on any component.\n    \n\n\n\n\nAt the bottom right, you can click and hold to resize the inspector.\n    \n\n\n\n\nOn hovering an item on the inspector, the copy path and copy value buttons will appear on the right of the item. Copying the path and pasting it onto the component property or query parameter will always get the dynamic value but using `Copy value` uption will copy the current value of the item and will be static when pasted in a component property or query parameter.\n    \n\n\n\n\nSections\nThe Inspector panel has the following 4 main sections:\n\nqueries\ncomponents\nglobals\nvariables\n\nqueries\nThe queries section can be used to inspect the query details but the data of the query will only be available if query has been run/triggered.\n:::tip\nYou can click on the Preview button of the button on the query manager to check the response(data) of the query without triggering it.\n:::\nExample\n\nLet's create a new query using a mock REST API endpoint (`https://fakestoreapi.com/products`).\n\nNow go to the Inspector and expand the queries section, you'll see an entry inside queries with the query name that we created in the previous step i.e. `restapi1` but if you notice the `data` and `rawData` object is empty i.e. 0 entry. The reason is the data won't show up on the inspector unless query is run.\n    \n\n\n\n\nLet's pin the inspector and then trigger the query from the query manager. You'll see that as soon as the query is triggered the `rawData` and `data` object in the query has 20 entries and the query has more properties like `request`, `response`, and `responseHeaders` data.\n    \n\n\n\n\ncomponents\ncomponents section can be used to inspect the properties and values of the components that are added onto the canvas.\n\n\n\nglobals\nglobals section includes the following sub-sections:\n\ncurrentUser: The currentUser object contains information about the currently logged-in user such as email, firstName, and lastName.\ngroups: The groups array contains the name of the groups the currently logged-in user is added to. Note: The `all_users` is default groups for everyone.\ntheme: The theme object contains the name of the currently active theme.\nurlparam: The urlparams contains the information about the url parameters of the application.\n\n:::info\nAll the global variables can be accessed anywhere inside the ToolJet applications. Here's an example use-case of using these variables.\n:::\n\n\n\nvariables\nvariables section include all the variables set by the user in the application. These variables can be set from the event handlers from the components or from the queries. The variables will be in the key-value pair and can be accessed throughout the application.\n:::info\n\nSetting variables from the event handler\nSetting variables from the Run JavaScript code\n",
    "tag": "tooljet"
  },
  {
    "title": "Run `Actions` from RunJS query",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/how-to/run-action-from-runjs.md",
    "content": "\nid: run-actions-from-runjs\ntitle: Run Actions from RunJS query\n\nRun `Actions` from RunJS query\nNow you can trigger all the `actions` available in ToolJet from within the `RunJS` query. This guide includes the syntax for each action along with the example.\nRun Query\nSyntax:\n`js\nqueries.queryName.run()`\nor\n`js\nawait actions.runQuery('queryName')`\nExample: In the screenshot below, we are triggering the two different queries `customers` and `getData` using the two different syntax available for `Run Query` action.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/runquery.png)\n\n\nSet Variable\nSyntax:\n`javascript\nactions.setVariable(variableName, variableValue)`\nExample: In the screenshot below, we are setting the two variables `test` and `test2`. `test` variable includes a numerical value so we haven't wrapped it inside the quotes but the variable `test2` is a string so we have wrapped it in quotes.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/setvariable.png)\n\n\nUnset Variable\nSyntax:\n`javascript\nactions.unSetVariable(variableName)`\nExample: In the screenshot below, we are unsetting the variable `test2` that we created in the previous step.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/unsetvariable.png)\n\n\nLogout\nSyntax:\n`javascript\nactions.logout()`\nExample: Triggering `actions.logout()` will log out the current logged in user from the ToolJet and will redirect to sign in page.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/logout.png)\n\n\nShow Modal\nSyntax:\n`javascript\nactions.showModal('modalName')`\nExample: In the screenshot below, there is a modal on the canvas (renamed it to `formModal` from `modal1`) and we are using RunJS query to show the modal.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/showmodal.png)\n\n\nClose Modal\nSyntax:\n`javascript\nactions.closeModal('modalName')`\nExample: In the screenshot below, we have used RunJS query to close the modal that we showed up in previous step.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/closemodal.png)\n\n\nSet Local Storage\nSyntax:\n`javascript\nactions.setLocalStorage('key','value')`\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/setlocalstorage.png)\n\n\nCopy to Clipboard\nSyntax:\n`javascript\nactions.copyToClipboard('contentToCopy')`\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/copytoclipboard.png)\n\n\nGenerate File\nSyntax:\n`javascript\nactions.generateFile('fileName', 'fileType', 'data')`\nExample: `fileName` is the name that you want to give the file(string), `fileType` can be `csv` or `text`, and `data` is the data that you want to store in the file.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/generatefile.png)\n\n\nGo to App\nSyntax:\n`javascript\nactions.goToApp('slug',queryparams)`\n\n`slug` can be found in URL of the released app after the `application/`, or in the `Share` modal\n`queryparams` can be provided like this `[{\"key\":\"value\"}, {\"key2\":\"value2\"}]`\n\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/gotoapp1.png)\n\n\nShow Alert\nSyntax:\n`javascript\nactions.showAlert(alert type , message ) // alert types are info, success, warning, and danger`\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/showalert.png)\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Bulk update multiple rows in table",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/how-to/bulk-update-multiple-rows-in-table.md",
    "content": "\nid: bulk-update-multiple-rows\ntitle: Bulk update multiple rows in table\n\nBulk update multiple rows in table\nCurrently, the datasources in ToolJet have operation for bulk update(GUI mode) but that only works for changes made in the single row. We will soon be adding a new operation for bulk updating the multiple rows but for now we can bulk update multiple rows by creating a Custom JS query. \nIn this guide, We have assumed that you have successfully connected the data source. For this guide, we will be using the PostgreSQL data source as an example database, currently, this workaround can be used only for PostgreSQL and MySQL.\n1. Create a query to get the data from the database\nLet's create the query that will be getting the data from the database:\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/postgres1.png)\n\n\n2. Display the data on the table\n\nDrag a Table widget on the canvas and click on its handle to open the properties on the left sidebar\nEdit the Table data field value and enter `{{queries.postgresql1.data}}`\n\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/showData.png)\n\n\n3. Make the columns editable\n\nGo to the Columns, Add or edit columns section and enter the Column Name that you want to display on the table and the Key name. Key is the name of the column in your database.\nEnable the toggle for Make editable for the columns that you want to be editable.\n\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/columns.png)\n\n\n4. Enable bulk update options for table widget\n\nGo to the Options section and enable the Show update buttons. Enabling this will add two buttons - Save Changes and Discard Changes at the bottom of the table, only when any cell in the table is edited.\nYou can also enable highlight selected row.(Optional)\n\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/options.png)\n\n\n5. Create a Custom JS query\nWe will create a new Custom JS query(runjs1) that will generate SQL query for updating multiple rows.\n```js\nconst uniqueIdentifier = \"id\"\nconst cols = Object.values(components.table1.changeSet).map((col, index) => {\n  return {\n    col: Object.keys(col),\n    [uniqueIdentifier]: Object.values(components.table1.dataUpdates)[index][uniqueIdentifier],\n    values: Object.values(col),\n  };\n});\nconst sql = cols.map((column) => {\n  const { col, id, values } = column;\n  const cols = col.map((col, index) => `${col} = '${values[index]}'`);\n  return `UPDATE users SET ${cols.join(\", \")} WHERE id = '${id}';`;\n});\nreturn sql\n```\n:::info\nHere the Unique identifier is id, this is the column name that is used to identify the row in the database.\nUpdate the Unique identifier if you are using a different column name.\n:::\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/runjs1.png)\n\n\n6. Create an Update query\nLet's create a new PostgreSQL query and name it `update`. In SQL mode, enter `{{queries.runjs1.data.join(' ')}}` and Save it.\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/update.png)\n\n\n7. Creating a flow for queries\n\nClick on the handle of the Table widget to open its properties\nGo to the Events, and add a handler\nSelect Bulk Update in Events, Run Query in Actions, and then select the runjs1 query in Query. Now whenever a user will edit the table and hit the Save Changes button runjs1 will run.\n\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/event.png)\n\n\n\nNow, go to the Advanced tab of runjs1 and add a handler to run update query for Query Success Event. Now whenever the runjs1 query will be run - the update operation will be performed on the database.\n\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/success.png)",
    "tag": "tooljet"
  },
  {
    "title": "Making Axios HTTP requests",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/how-to/use-axios.md",
    "content": "\nid: use-axios-in-runjs\ntitle: Use Axios in RunJS\n\nToolJet allows you to utilize the three libraries - Moment.js, Lodash, and Axios. In this guide, we will see a few examples on how to use Axios library using RunJS query.\nAxios is a promise-based HTTP library that lets developers make requests to either their own or a third-party server to fetch data. It offers different ways of making requests such as `GET`, `POST`, `PUT/PATCH`, and `DELETE`.\nMaking Axios HTTP requests\nIn this section, you will make `GET` and `PUT` requests. You will be using a free \u201cfake\u201d API: JSONPlaceholder.\nMaking a GET request\nCreate a RunJS query and copy the code below:\n```javascript\nvar url = \"https://jsonplaceholder.typicode.com/users/1\";\nvar data = (await axios.get(url)).data;\nreturn data\n```\nIn the code snippet, a variable url is declared which is assigned the URL of the  JSON API. Then another variable is decalared which sends a GET request to the JSON API. Save the query and hit Preview to view the data returned by the API.\n\n\n\nMaking a POST request\nA post request is a little different because you will be passing some data in the request to the server. In the request, you will be creating a user and passing in details for that user. The code snippet for the request will look something like this:\n```javascript\nvar url = \"https://jsonplaceholder.typicode.com/users\";\nvar data = axios.post(url,{\n  id: 11,\n  name: \"Shubhendra\",\n  username: \"camelcaseguy\",\n  email: \"shubhendra@tooljet.com\",})\nreturn data\n```\nThe Axios POST request uses an object after the request URL to define the properties you want to create for your user. Once the operation has been completed, there will be a response from the server. In the screenshot below, you can see the that it return Status: 201 which means the request has been fulfilled and resulted in a new resource being created.\n\n\n\n:::tip\nCheck out the tutorial on Build GitHub star history tracker that utlizes the axios library.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "s3-custom-endpoint.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/how-to/s3-custom-endpoint.md",
    "content": "\nid: s3-custom-endpoints\ntitle: Use custom endpoint for s3 hosts\n\nIn this how-to guide, we will see how we can connect to different S3 compatible object storages using the custom endpoint. In this guide, we are using Minio since it is an S3-compatible object storage. \n\nGo to the ToolJet dashboard, and create a new application\nOn the left-sidebar, go to the Sources and add a new AWS S3 datasource\n\nNow the connection modal will pop-up\n    \n\n\n- To get the Credentials which is Access Key and Secret Key, you'll need to go to the Minio console to generate the keys\n- Enable the Custom Endpoint toggle switch, and enter the custom host URL i.e where your Minio server API is exposed \n\n",
    "tag": "tooljet"
  },
  {
    "title": "Contributor Covenant Code of Conduct  ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/contributing-guide/code-of-conduct.md",
    "content": "\nid: code-of-conduct\ntitle: Contributor Code of Conduct\n\nContributor Covenant Code of Conduct\nOur Pledge\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\nOur Standards\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or\n  advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others' private information, such as a physical or electronic\n  address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a\n  professional setting\n\nOur Responsibilities\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\nScope\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\nEnforcement\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at hello@tooljet.com . All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\nAttribution\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\nFor answers to common questions about this code of conduct, see",
    "tag": "tooljet"
  },
  {
    "title": "Setting up",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/contributing-guide/testing.md",
    "content": "\nid: testing\ntitle: Testing\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\nSetting up\n\nNavigate to the `cypress-tests` directory and enter the following command:\n  `bash\n  npm install`\n\nRunning Tests\nHeaded mode\n\nTo run cypress in headed mode, run the following command:\n  `bash\n  npm run cy:open`\nIn headed mode, the user will be able to choose the test specs from the test runner:\n\n\n\n\n\n\nHeadless mode\n\n\nTo run cypress in headless mode, run the following command:\n  `bash\n npm run cy:run`\n\n\nFor running specific spec in headless mode, run for specific spec \n  `bash\n  npm run cy:run --  --spec \"cypress/e2e/dashboard/multi-workspace/manageSSO.cy.js`\n\n\n\n\n\n:::caution\n  If some test specs need the environment variables, the user can pass them similar to the following command:\n  `bash\n  npm run cy:open -- --env='{\"pg_host\":\"localhost\",\"pg_user\":\"postgres\", \"pg_password\":\"postgres\"}'`\n  or the user can add env-vars in the cypress.config.js file\n  :::\n:::info\nCheck all the Cypress commands here",
    "tag": "tooljet"
  },
  {
    "title": "Slack Code of Conduct",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/contributing-guide/slackcoc.md",
    "content": "\nid: slackcoc\ntitle: Slack Code of Conduct\n\nSlack Code of Conduct\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nIntroduction\n\n\nDiversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand.\n\n\nOur goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic.\n\n\nThis code and related procedures apply to unacceptable behavior occurring in all community venues, including behavior outside the scope of community activities \u2014 online and in-person\u2014 as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members.\n\n\nExpected behavior\n\nBe welcoming.\nBe kind.\nLook out for each other.\n\nUnacceptable Behavior\n\nConduct or speech which might be considered sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory or offensive in nature.\nDo not use unwelcome, suggestive, derogatory or inappropriate nicknames or terms.\nDo not show disrespect towards others. (Jokes, innuendo, dismissive attitudes.)\nIntimidation or harassment (online or in-person).\nDisrespect towards differences of opinion.\nInappropriate attention or contact. Be aware of how your actions affect others. If it makes someone uncomfortable, stop.\nNot understanding the differences between constructive criticism and disparagement.\nSustained disruptions.\nViolence, threats of violence or violent language.\n\nWhere does the Code of Conduct apply?\nThis Code of Conduct applies to all spaces managed by ToolJet. This includes:\n\nConferences (including social events and peripheral activities)\nUnconferences and sprints\nMeetups, including their discussion boards\nWorkshops\nPresentation materials used in talks or sessions\nSlack\nGitHub\nTwitter hashtag and mentions\nAny forums created by the ToolJet which the community uses for communication.\n\nThe Code of Conduct does not exclusively apply to slack or events on an official agenda. For example, if after a scheduled social event you go to a bar with a group of fellow participants, and someone harasses you there, we would still treat that as a CoC violation. Similarly, harassment in Twitter direct messages related to ToolJet can still be covered under this Code of Conduct.\nIn addition, violations of this code outside our spaces may affect a person\u2019s ability to participate in them.\nEnforcement\n\nUnderstand that speech and actions have consequences, and unacceptable behavior will not be tolerated.\nIf you are the subject of, or witness to any violations of this Code of Conduct, please contact us via email at hello@tooljet.com or dm @navaneeth on slack.\nIf violations occur, organizers will take any action they deem appropriate for the infraction, up to and including expulsion.\n\n:::info\nPortions derived from the Django Code of Conduct, The Rust Code of Conduct and The Ada Initiative under a Creative Commons Attribution-ShareAlike license.\n:::\n\nEtiquettes to follow\n1. Be nice to everyone\n2. Check off your resolved questions\nIf you have received a useful reply to your question, please drop a \u2705 reaction or a reply for affirmation.\n3. Try not to repost question\nIf you have asked a question and have not got a response in 24hrs, please review your question for clarity and revise it. If you still feel you haven't received adequate response, feel free to ping @navaneeth.\n4. Post in public\nPlease don't direct message any individual member of ToolJet community without their explicit permission, independent of reason. Your question might be helpful for other community members.\n5. Don't spam tags\nToolJet's community of volunteer is very active and helpful, generally avoid tagging members unless it is urgent.\n6. Use threads for discussion",
    "tag": "tooljet"
  },
  {
    "title": "Adding Translations",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/contributing-guide/l10n.md",
    "content": "\nid: l10n\ntitle: Localization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and  general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\nAdding Translations\n\n\nFor adding the translations of your language in ToolJet, you'll need to create a new languagecode.json file which will include all the translations for the keywords in your language, and then list the language in the languages.json file for the language to be listed in the dashboard of the ToolJet.\n\n\nGo to the frontend directory which is at the root of ToolJet, then go to the assets and inside assets, you'll find the translations directory. You have created a new json file with the language code as the file name. The language code should follow ISO 639-1 Code.\n`\\frontend\n|--\\assets\n|--\\--\\translations\n|--\\--\\--\\languages.json\n|--\\--\\--\\en.json`\n\n\n\n\n\nLet's localize ToolJet in the French language. Create a new json file inside the translations directory and name it fr.json. `fr` is the language code for French.\n\n\nAfter creating the new file, open the en.json file and copy all the contents of the file to the newly created fr.json.\n\n\n\n\n\nOnce copied, you can now start adding the translations for the keywords in the french language.\n\n\nAfter completing the translation, all you need to do is list the language in languages.json file. You'll need to add an object with three key-value pairs. lang - the name of the language that you added, code - the language code, and the nativeLang - name of language in the native.\n`js\n{\n    \"languageList\":\n    [\n        { \"lang\": \"English\", \"code\": \"en\", \"nativeLang\": \"English\" },\n        { \"lang\": \"French\", \"code\": \"fr\", \"nativeLang\": \"Fran\u00e7ais\" }\n    ]\n}`\n\n\n\n:::note\nFeel free to reach us on Slack for any help related to Localization.",
    "tag": "tooljet"
  },
  {
    "title": "Introduction",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/contributing-guide/setup/architecture.md",
    "content": "\nid: architecture\ntitle: Architecture\n\nIntroduction\nToolJet has two main components: ToolJet Server and ToolJet Client.\n1. ToolJet Server\nToolJet server is a Node.js API application. Server is responsible for authentication, authorization, persisting application definitions, running queries, storing data source credentials securely and more. \nDependencies:\n- PostgreSQL - ToolJet server persists data to a postgres database. \n- Email service (SMTP/Sendgrid/Mailgun/etc) - Required to send user invitations and password reset emails. \n- PostgREST (Optional) - Standalone web server that converts PostgreSQL database into queryable RESTful APIs for Tooljet Database.\n2. ToolJet Client\nToolJet client is a ReactJS application. Client is responsible for visually editing the applications, building & editing queries, rendering applications, executing events and their trigger, etc.\nRequirements",
    "tag": "tooljet"
  },
  {
    "title": "Ubuntu",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/contributing-guide/setup/ubuntu.md",
    "content": "\nid: ubuntu\ntitle: Ubuntu\n\nUbuntu\nFollow these steps to setup and run ToolJet on Ubuntu. Open terminal and run the commands below.\nSetting up\n\n\nSet up the environment\n1.1 Install Node.js\n```bash\ncurl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\nRequired for compilation of Plugins (https://stackoverflow.com/a/44182915/19432410)\napt-get -y install build-essential gcc g++ make python3-dev\nEnsure you have the correct version of npm, or it will cause an error about fsevents.\nnpm i -g npm@8.11.0\n```\n1.2 Install Postgres\n`bash\nsudo apt install postgresql postgresql-contrib\nsudo apt-get install libpq-dev`\n1.3 Install PostgREST (optional)\n:::info \nRequired only if Tooljet Database is being used. \nPlease use PostgREST version 10.1.1.x\n:::\nPlease follow the installation PostgREST guide\n\n\nSet up environment variables\nCreate a `.env` file by copying `.env.example`. More information on the variables that can be set is given in the environment variables reference\n`bash\ncp .env.example .env`\n\n\nPopulate the keys in the env file\n   :::info\n   `SECRET_KEY_BASE` requires a 64 byte key. (If you have `openssl` installed, run `openssl rand -hex 64` to create a 64 byte secure   random key)\n\n\n`LOCKBOX_MASTER_KEY` requires a 32 byte key. (Run `openssl rand -hex 32` to create a 32 byte secure random key)\n   :::\nExample:\n   `bash\n   cat .env\n   TOOLJET_HOST=http://localhost:8082\n   LOCKBOX_MASTER_KEY=1d291a926ddfd221205a23adb4cc1db66cb9fcaf28d97c8c1950e3538e3b9281\n   SECRET_KEY_BASE=4229d5774cfe7f60e75d6b3bf3a1dbb054a696b6d21b6d5de7b73291899797a222265e12c0a8e8d844f83ebacdf9a67ec42584edf1c2b23e1e7813f8a3339041`\n\n\nInstall and build dependencies\n    `bash\n    npm install\n    npm install --prefix server\n    npm install --prefix frontend\n    npm run build:plugins`\n\n\nSet up database\n    `bash\n    npm run --prefix server db:reset`\n\n\nRun plugins compilation in watch mode\n    `bash\n    cd ./plugins && npm start`\n\n\nRun the server\n    `bash\n    cd ./server && npm run start:dev`\n\n\nRun the client\n    `bash\n    cd ./frontend && npm start`\nThe client will start running on the port 8082, you can access the client by visiting:  https://localhost:8082\n\n\nCreate login credentials\nVisiting https://localhost:8082 should redirect you to the login page, click on the signup link and enter your email. The emails sent by the server in development environment are captured and are opened in your default browser. Click the invitation link in the email preview to setup the account.\n\n\nRunning tests\nTest config requires the presence of `.env.test` file at the root of the project.\nTo run the unit tests\n`bash\nnpm run --prefix server test`\nTo run e2e tests\n`bash\nnpm run --prefix server test:e2e`\nTo run a specific unit test\n```bash\nnpm run --prefix server test ",
    "tag": "tooljet"
  },
  {
    "title": "Mac OS",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/contributing-guide/setup/macos.md",
    "content": "\nid: macos \ntitle: Mac OS\n\nMac OS\nFollow these steps to setup and run ToolJet on macOS for development purposes. Open terminal and run the commands below. We recommend reading our guide on architecture of ToolJet before proceeding.\nSetting up\n\n\nSet up the environment\n1.1 Install Homebrew\n`bash\n/bin/bash -c \"(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"`\n1.2 Install Node.js ( version: v14.17.3 ) and npm (version: v7.20.0)\n`bash\nbrew install nvm\nexport NVM_DIR=~/.nvm\nsource $(brew --prefix nvm)/nvm.sh\nnvm install 14.17.3\nnvm use 14.17.3\nnpm install -g npm@7.20.0`\n1.3 Install Postgres\n:::tip\nToolJet uses a postgres database as the persistent storage for storing data related to users and apps. We do not plan to support other databases such as MySQL.\n:::\n`bash\nbrew install postgresql`\n1.4 Install PostgREST(optional)\n:::info \nRequired only if Tooljet Database is being used. \nPlease use PostgREST version 10.1.1.x\n:::       \n`bash\nbrew install postgrest --version 10.1.1.20221215`\n1.5 Clone the repository\n`bash\ngit clone https://github.com/tooljet/tooljet.git`\n\n\nSet up environment variables\nCreate a `.env` file by copying `.env.example`. More information on the variables that can be set is given in the environment variables reference\n`bash\ncp .env.example .env`\n\n\nPopulate the keys in the env file\n   :::info\n   `SECRET_KEY_BASE` requires a 64 byte key. (If you have `openssl` installed, run `openssl rand -hex 64` to create a 64 byte secure   random key)\n\n\n`LOCKBOX_MASTER_KEY` requires a 32 byte key. (Run `openssl rand -hex 32` to create a 32 byte secure random key)\n   :::\nExample:\n   `bash\n   cat .env\n   TOOLJET_HOST=http://localhost:8082\n   LOCKBOX_MASTER_KEY=1d291a926ddfd221205a23adb4cc1db66cb9fcaf28d97c8c1950e3538e3b9281\n   SECRET_KEY_BASE=4229d5774cfe7f60e75d6b3bf3a1dbb054a696b6d21b6d5de7b73291899797a222265e12c0a8e8d844f83ebacdf9a67ec42584edf1c2b23e1e7813f8a3339041\n   NODE_ENV=development\n   # DATABASE CONFIG\n   PG_HOST=postgres\n   PG_PORT=5432\n   PG_USER=postgres\n   PG_PASS=postgres\n   PG_DB=tooljet_development\n   ORM_LOGGING=all`\n\n\nInstall and build dependencies\n    `bash\n    npm install\n    npm install --prefix server\n    npm install --prefix frontend\n    npm run build:plugins`\n\n\nSet up database\n    `bash\n    npm run --prefix server db:reset`\n\n\nRun plugins compilation in watch mode\n    `bash\n    cd ./plugins && npm start`\n\n\nRun the server\n    `bash\n    cd ./server && npm run start:dev`\n\n\nRun the client\n    `bash\n    cd ./frontend && npm start`\nThe client will start on the port 8082, you can access the client by visiting:  https://localhost:8082\n\n\nCreate login credentials\nVisiting https://localhost:8082 should redirect you to the login page, click on the signup link and enter your email. The emails sent by the server in development environment are captured and are opened in your default browser. Click the invitation link in the email preview to setup the account.\n\n\nRunning tests\nTest config requires the presence of `.env.test` file at the root of the project.\nTo run the unit tests\n`bash\nnpm run --prefix server test`\nTo run e2e tests\n`bash\nnpm run --prefix server test:e2e`\nTo run a specific unit test\n```bash\nnpm run --prefix server test ",
    "tag": "tooljet"
  },
  {
    "title": "Docker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/contributing-guide/setup/docker.md",
    "content": "\nid: docker\ntitle: Docker\n\nDocker\nDocker compose is the easiest way to setup ToolJet server and client locally.\n:::info\nIf you rather want to try out ToolJet locally with docker, you can follow the steps here.\n:::\nPrerequisites\nMake sure you have the latest version of `docker` and `docker-compose` installed.\nOfficial docker installation guide\nOfficial docker-compose installation guide\nWe recommend:\n```bash\ndocker --version\nDocker version 19.03.12, build 48a66213fe\ndocker-compose --version\ndocker-compose version 1.26.2, build eefe0d31\n```\nSetting up\n:::tip\nIf you are setting up on a Windows machine, we advise you to setup Docker desktop with WSL2.\nPlease find more information here.\n:::\n\n\nClone the repository\n   `bash\n   git clone https://github.com/tooljet/tooljet.git`\n\n\nCreate a `.env` file by copying `.env.example`. More information on the variables that can be set is given in the environment variables reference\n`bash\n   cp .env.example .env\n   cp .env.example .env.test`\n\n\nPopulate the keys in the `.env` and `.env.test` file\n   :::info\n   `SECRET_KEY_BASE` requires a 64 byte key. (If you have `openssl` installed, run `openssl rand -hex 64` to create a 64 byte secure random key)\n\n\n`LOCKBOX_MASTER_KEY` requires a 32 byte key. (Run `openssl rand -hex 32` to create a 32 byte secure random key)\n   :::\n   :::tip \n   If you are setting up on a Windows machine. Please make sure that .env file line endings to be LF as it will be CRLF by default unless configured for Windows machine.\n   :::\nExample:\n`bash\n    cat .env\n    TOOLJET_HOST=http://localhost:8082\n    LOCKBOX_MASTER_KEY=13c9b8364ae71f714774c82498ba328813069e48d80029bb29f49d0ada5a8e40\n    SECRET_KEY_BASE=ea85064ed42ad02cfc022e66d8bccf452e3fa1142421cbd7a13592d91a2cbb866d6001060b73a98a65be57e65524357d445efae00a218461088a706decd62dcb\n    NODE_ENV=development\n    # DATABASE CONFIG\n    PG_HOST=postgres\n    PG_PORT=5432\n    PG_USER=postgres\n    PG_PASS=postgres\n    PG_DB=tooljet_development\n    ORM_LOGGING=all`\n`bash\n    cat .env.test\n    TOOLJET_HOST=http://localhost:8082\n    LOCKBOX_MASTER_KEY=13c9b8364ae71f714774c82498ba328813069e48d80029bb29f49d0ada5a8e40\n    SECRET_KEY_BASE=ea85064ed42ad02cfc022e66d8bccf452e3fa1142421cbd7a13592d91a2cbb866d6001060b73a98a65be57e65524357d445efae00a218461088a706decd62dcb\n    NODE_ENV=test\n    # DATABASE CONFIG\n    PG_HOST=postgres\n    PG_PORT=5432\n    PG_USER=postgres\n    PG_PASS=postgres\n    PG_DB=tooljet_test\n    ORM_LOGGING=error`\n\nBuild docker images\n\n`bash\n   docker-compose build\n   docker-compose run --rm  plugins npm run build:plugins`\n\nRun ToolJet\n\n`bash\n   docker-compose up`\n   ToolJet should now be served locally at `http://localhost:8082`.\n\nTo shut down the containers,\n   `bash\n   docker-compose stop`\n\nMaking changes to the codebase\nIf you make any changes to the codebase/pull the latest changes from upstream, the tooljet server container would hot reload the application without you doing anything.\nCaveat:\n\n\nIf the changes include database migrations or new npm package additions in the package.json, you would need to restart the ToolJet server container by running `docker-compose restart server`.\n\n\nIf you need to add a new binary or system library to the container itself, you would need to add those dependencies in `docker/server.Dockerfile.dev` and then rebuild the ToolJet server image. You can do that by running `docker-compose build server`. Once that completes you can start everything normally with `docker-compose up`.\n\n\nExample:\nLet's say you need to install the `imagemagick` binary in your ToolJet server's container. You'd then need to make sure that `apt` installs `imagemagick` while building the image. The Dockerfile at `docker/server.Dockerfile.dev` for the server would then look something like this:\n```\nFROM node:14.17.0-buster\nRUN apt update && apt install -y \\\n  build-essential  \\\n  postgresql \\\n  freetds-dev \\\n  imagemagick\nRUN mkdir -p /app\nWORKDIR /app\nCOPY ./server/package.json ./server/package-lock.json ./\nRUN npm install\nENV NODE_ENV=development\nCOPY ./server/ ./\nCOPY ./docker/ ./docker/\nCOPY ./.env ../.env\nRUN [\"chmod\", \"755\", \"entrypoint.sh\"]\n```\nOnce you've updated the Dockerfile, rebuild the image by running `docker-compose build server`. After building the new image, start the services by running `docker-compose up`.\nRunning tests\nTest config picks up config from `.env.test` file at the root of the project.\nRun the following command to create and migrate data for test db\n`bash\ndocker-compose run --rm -e NODE_ENV=test server npm run db:create\ndocker-compose run --rm -e NODE_ENV=test server npm run db:migrate`\nTo run the unit tests\n`bash\ndocker-compose run --rm server npm run --prefix server test`\nTo run e2e tests\n`bash\ndocker-compose run --rm server npm run --prefix server test:e2e`\nTo run a specific unit test\n`bash\ndocker-compose run --rm server npm --prefix server run test <path-to-file>`\nTroubleshooting",
    "tag": "tooljet"
  },
  {
    "title": "ESLint ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/contributing-guide/troubleshooting/eslint.md",
    "content": "\nid: eslint\ntitle: EsLint\n\nESLint\nESLint as a code quality tool is a tool that checks your code for errors and helps you to fix them and enforces a coding style. \nSetup\n\nInstall the ESLint extension for your code editor.\nSet your editor's default formatter to `ESLint`.\n\n:::tip\nFor VSCode users, you can set the formatter to `ESLint` in the settings.json.\n:::\n\nInstall the dependencies.\n    `bash\n    npm install\n    npm install --prefix server\n    npm install --prefix frontend`\nRun the linter.\n    `bash\n    npm run --prefix server lint\n    npm run --prefix frontend lint`\nFix the ESlint errors and warnings.\n    `bash\n    npm run --prefix server format\n    npm run --prefix frontend format`\n\nRequirements\n\nNode version 14.17.3\nnpm version 7.20.0\n",
    "tag": "tooljet"
  },
  {
    "title": "Creating Widgets",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/contributing-guide/tutorials/create-widget.md",
    "content": "\nid: creating-widget\ntitle: Creating Widgets\n\nCreating Widgets\nThese are some of the most useful properties and functions passed to the widget\nproperties\nThe `properties` object will contain the configurable properties of a widget, initially obtained from its definition on `widgetConfig.js`.\nThe values inside `properties` change whenever the developer makes changes to the inspector panel of ToolJet editor.\nexposedVariables\nThe `exposedVariables` object will contain the values of all exposed variables as configured in `widgetConfig.js`.\nsetExposedVariable('exposedVariableName', newValue)\nThis function allows you to update the value of an exposed variable to `newValue`.\nvalidate(value)\nThis function validates the `value` passed based on the validation settings configured on the inspector panel for the widget.\nIt returns an array `[isValid, validationError]`, which represents respectively, whether the `value` passed is valid,",
    "tag": "tooljet"
  },
  {
    "title": "Creating plugins for ToolJet ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/contributing-guide/tutorials/creating-a-plugin.md",
    "content": "\nid: creating-a-plugin\ntitle: Creating Plugins\n\nCreating plugins for ToolJet\nWhat are plugins\nToolJet is built with extensibility in mind. Plugins allows developers to extend the functionalities of ToolJet using JavaScript. Plugins can only be connectors at this moment. For example, the data source connectors such as PostgreSQL, MySQL, Twilio, Stripe, etc are built as plugins. \nIn this guide, we will walk you through building plugins for ToolJet with the help of `tooljet` cli.\n`tooljet` cli is a commandline tool built for building plugins easily. We will build a simple plugin for BigQuery in this guide. \nWhat does a plugin look like?\nAll the plugins live under the `/plugins` directory. The structure of a plugin looks like this:\n`my-awesome-plugin/\n    package.json\n    lib/\n      icon.svg\n      index.ts\n      operations.json\n      manifest.json`\n\nmanifest.json should include information such as the name of plugin, description, etc. \noperations.json should include the metadata of all the operations supported by the plugin.\nindex.ts is the main file. It defines a `QueryService` for the plugin. The `QueryService` handles running of queries, testing connections, caching connections, etc.\nicon.svg is the icon for the plugin.\npackage.json is auto generated by the cli. \n\nGetting Started\n\n\nInstall tooljet-cli:\n  `bash\n  $ npm i -g @tooljet/cli`\n\n\nBootstrap a new plugin using cli\n  `bash\n  $ tooljet plugin create bigquery`\n\n\n`bash\n  creating plugin... done\n  Plugin: bigquery created successfully\n  \u2514\u2500 plugins\n    \u2514\u2500 packages\n        \u2514\u2500 bigquery`\n\n\nAdd the npm package of BigQuery to the plugin dependencies\n  `bash\n  $ tooljet plugin install @google-cloud/bigquery --plugin bigquery`\n\n\nNow the directory for our new plugin should looks something like below: \n\n\n`bash\n  plugins/\n    package.json\n    packages/\n      bigquery/\n        __tests__\n          bigquery.test.js\n        package.json\n        lib/\n          icon.svg\n          index.ts\n          operations.json\n          manifest.json`\n\nAdd data source config paramets to manifest.json\n\nOur BigQuery plugin needs private key of a GCP service account to connect to BigQuery. Let's add `private_key` as a property for the data source. \n```json\n  {\n    \"$schema\": \"https://json-schema.org/\",\n    \"$id\": \"https://tooljet.io/BigQuery.schema.json\",\n    \"title\": \"BigQuery datasource\",\n    \"description\": \"A schema defining BigQuery datasource\",\n    \"type\": \"api\",\n    \"source\": {\n      \"name\": \"BigQuery\",\n      \"kind\": \"bigquery\",\n      \"exposedVariables\": {\n        \"isLoading\": false,\n        \"data\": {},\n        \"rawData\": {}\n      },\n      \"options\": {\n        \"private_key\": { \"encrypted\": true }\n      }\n    },\n    \"defaults\": {\n      \"private_key\": { \"value\": \"\" }\n    },\n    \"properties\": {\n      \"private_key\": {\n        \"label\": \"Private key\",\n        \"key\": \"private_key\",\n        \"type\": \"textarea\",\n        \"description\": \"Enter JSON private key for service account\"\n      }\n    },\n    \"required\": [\"private_key\"]\n  }\n```\n\n\nImport npm package BigQuery to index.ts\n  `javascript\n  const { BigQuery } = require('@google-cloud/bigquery');`\n\n\nEdit index.ts to include the logic for creating a connection.  \n  ```javascript\n  async getConnection(sourceOptions: any, _options?: object): Promise {\n    const privateKey = JSON.parse(sourceOptions['private_key']);\n    const client = new BigQuery({\n      projectId: privateKey['project_id'],\n      credentials: {\n        client_email: privateKey['client_email'],\n        private_key: privateKey['private_key'],\n      },\n    });\nreturn client;\n  }\n  ```\n\n\nEdit index.ts to include the logic for testing connection.  \n  When a new data source is being added to a ToolJet application, the connection can be tested. \n\n\n:::info\n  NOTE: Every data source might not have a way to test connection. If not applicable for your data source, you can disable the test connection feature by adding `\"customTesting\": true,` to the `manifest.json` of your plugin.\n  :::\n\n\nAdd manifest entry for operations   \nIn this example, let's add two operations for our BigQuery plugin. \n- List databases - Lists all the databases.\n- Query database   - Query a specific database.\nWe need to make the entries to `operations.json`. The `operations.json` should look like this now:\n```json\n{\n  \"$schema\": \"https://json-schema.org/\",\n  \"$id\": \"https://tooljet.io/dataqueries/Bigquery.schema.json\",\n  \"title\": \"Dynamodb datasource\",\n  \"description\": \"Operations for BigQuery plugin\",\n  \"type\": \"object\",\n  \"defaults\": {},\n  \"properties\": {\n      \"operation\": {\n          \"label\": \"Operation\",\n          \"key\": \"operation\",\n          \"type\": \"dropdown-component-flip\",\n          \"description\": \"Single select dropdown for operation\",\n          \"list\": [\n              {\n                  \"value\": \"list_datasets\",\n                  \"name\": \"List Datasets\"\n              },\n              {\n                  \"value\": \"query\",\n                  \"name\": \"Query\"\n              }\n          ]\n      },\n      \"query\": {\n          \"query\": {\n              \"label\": \"Query\",\n              \"key\": \"query\",\n              \"type\": \"codehinter\",\n              \"description\": \"\",\n              \"height\": \"150px\"\n          }\n      }\n  }\n}\n```\n\n\nHandle the logic for running queries in `index.ts` \n\n\n`QueryService` receives the metadata of the data source including the credentials and configs for connecting and parameters for the query that was run. In our example, `sourceOptions` will have the `private_key` of BigQuery datasource associated with the query. `queryOptions` will have the configs and parameters for the specific query. For example, `queryOption.operation` will give the id of current operation. \n```javascript\n    export default class BigQueryQueryService implements QueryService {\n      async run(sourceOptions: any, queryOptions: any, _dataSourceId: string): Promise {\n        const operation = queryOptions.operation;\n        const client = await this.getConnection(sourceOptions);\n        let result = {};\n\n\n```    try {\n      switch (operation) {\n        case 'list_datasets':\n            result = await client.getDatasets();\n            break;\n      }\n    } catch (error) {\n      throw new QueryError('Query could not be completed', error.message, {});\n    }\n\n    return {\n      status: 'ok',\n      data: result,\n    };\n  }\n}\n```\n\n\n```\n\n\nSince it is a smiliar step for adding the logic for handling `query` operation, skipping it. \n\n\nTest files are generated by the cli when a plugin is created. You can use `jest` for writing the tests.\n\n\nTests for a specific plugin can be run using the command `tooljet plugin test --bigquery`",
    "tag": "tooljet"
  },
  {
    "title": "Generate file",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/actions/generate-file.md",
    "content": "\nid: generate-file\ntitle: Generate file\n\nGenerate file\nThis action allows you to construct files on the fly and let users download it.\nPresently, the only file type supported is `CSV`.\nOptions\n| Option | Description |\n|--------|-------------|\n| Type   | Type of file to be generated |\n| File name | Name of the file to be generated |\n| Data | Data that will be used to construct the file. Its format will depend on the file type, as specified in the following section |\nData format for CSV\nFor `CSV` file type, the data field should be supplied with an array objects. ToolJet assumes that the keys of each of\nthese objects are the same and that they represent the column headers of the csv file.\nExample:\n`javascript\n{{\n  [\n    { name: 'John', email: 'john@tooljet.com' },\n    { name: 'Sarah', email: 'sarah@tooljet.com' },\n  ]\n}}`\nSupplying the above snippet will generate a csv file which looks like this:\n```csv\nname,email\nJohn,john@tooljet.com\nSarah,sarah@tooljet.com",
    "tag": "tooljet"
  },
  {
    "title": "Available Component Specific Actions",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/actions/control-component.md",
    "content": "\nid: control-component\ntitle: Control component\n\nControl component action invokes the component specific actions. Component specific actions are the actions that are exclusive actions for a particular widget. Component specific actions can be triggered either through the event handlers or from the Run JavaScript code query.\n:::info\nCheck out the live demo of Component specific actions demonstrated in one of our community call.\n:::\nAvailable Component Specific Actions\n| Widget | Component Specific Actions |\n|--------|---------------------------|\n| Button | Click, Set label, Disable, Visibility, Loading |\n| Text   | Set text, Set Visibility |\n| Text Input | Set text, Clear, Set Focus, Set Blur, Disable, Visibility |\n| Text Area | Set text, Clear |\n| Modal     | Show, Close |\n| Table   | Set page, Select row, Deselect Row, Discard changes |\n| Dropdown   | Select option |\n| Multiselect   | Select option, Deselect option, Clear selection |\n| Map   | Set location |\n| Checkbox   | Set checked |\n| Radio button | Select option |\n| Tabs   | Set tab |\n| Color picker   | Set color |\n| File picker    | Clear files |\n:::info\nCurrently, Component specific actions are supported only by the above listed widgets. We are working on bringing component specific actions for the remaining widgets.\n:::\nUsing Component Specific Actions\nSet a value for text input widget using button's event handler\n\n\nDrag a Text Input and a Button widget onto the canvas.\n\n\nGo to the Inspector on the left sidebar to check the exposed variables available for the `textinput1` widget under the `components`. You'll see that the variable `value` is an empty string because the field value of the text input widget is empty right now.\n\n\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/inspector.png)\n\n\n\nNow enter some value in the text input widget and you'll see that the `value` in inspector has been updated.\n\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/updated.png)\n\n\n\nNow, click on the button's widget handler to open up its properties in the right sidebar and then add a event handler for On Click event to trigger Control Component action. Select `textinput1` in component dropdown, `Set text` as Action, and in `Text` field enter the text that you want to update in the field value.\n\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/button.png)\n\n\n\nNow when you'll click on the button you'll see that the field value of the text input widget has been updated with value that you set.\n\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/set.png)\n\n\nClear value of text input widget using JavaScript query\n\nLet's clear the value that we set in the previous section, using Run JavaScript code. Create a new Run JavaScript Code query and call the component and the CSA that component provides.\n\nSyntax:\n`js\nawait components.textinput1.clear()`\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/jsoption.png)\n\n\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/clear.png)\n\n\n\nFinally, hit the save and run query button to fire up the query, and you'll see that the field value of the text input widget has been cleared.\n",
    "tag": "tooljet"
  },
  {
    "title": "Set localStorage",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/actions/set-localstorage.md",
    "content": "\nid: set-localstorage\ntitle: Set localStorage\n\nSet localStorage\nThis action allows you to specify a `key` and its corresponding `value` to be stored in localStorage.\nExample: App that stores a name in localStorage and displays it on reload\n\nAdd an input field, button and a text as shown\n\n\n\n![ToolJet - Action reference -Set local storage sample app](/img/actions/localstorage/1.png)\n\n\n\nSelect the button and add a `Set localStorage` action with `key` set to `name` and value pointing at the value of the text field\n\n\n\n![ToolJet - Action reference -Set local storage sample app](/img/actions/localstorage/2.png)\n\n\n\nSelect the text label we've added and set its value to the name item from localStorage\n\n\n\n![ToolJet - Action reference -Set local storage sample app](/img/actions/localstorage/3.png)\n\n\n\n\nNow save the application, this is important as we're about to reload the page.\n\n\nType in anything you wish on the input box and click on the button\n\n\n\n\n![ToolJet - Action reference -Set local storage sample app](/img/actions/localstorage/5.png)\n\n\n\nReload the page, you'll see that the value stored in local storage is persisted and it is displayed on screen!\n\n\n\n![ToolJet - Action reference -Set local storage sample app](/img/actions/localstorage/6.png)\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Snowflake",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/snowflake.md",
    "content": "\nid: snowflake\ntitle: Snowflake\n\nSnowflake\nToolJet can connect to Snowflake databases to read and write data.\n\nConnection\nGetting Started\n\nConnection\nPlease make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP. You can find snowflake docs on network policies here.\nTo add a new Snowflake database, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select Snowflake from the modal that pops up.\nToolJet requires the following to connect to your Snowflake database.\n\nAccount\nUsername\nPassword\n\n:::info\nYou can also configure for additional optional parameters.\n:::\n\n\n![ToolJet - Snowflake connection](/img/datasource-reference/snowflake/snowflake-connect.png)\n\n\nQuerying Snowflake\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the datasource. Query manager then can be used to write raw SQL queries.\n\n\n![ToolJet - Snowflake query](/img/datasource-reference/snowflake/snowflake-query.png)\n\n\nClick on the `run` button to run the query. \nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "REST API ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/restapi.md",
    "content": "\nid: restapi\ntitle: REST API \n\nREST API\nToolJet can connect to any REST endpoint available. \nConnection\nTo add a new REST API datasource, click the Datasources manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select REST API from the modal that pops up.\nClick on the 'Save' button to save the data source.\n\nToolJet requires the following to connect to a REST API  datasource.\n\nURL of the REST endpoint\n\nThe following optional parameters are also supported:\n| Type         | Description |\n   | -----------  | ----------- |\n   | URL params   | Additional query string parameters|\n   | headers      | Any headers the REST API source requires|\n   | body         | Any values or fields the REST API source requires|\n:::info\nREST HTTP methods that are supported are GET, POST, PUT, PATCH & DELETE.\n:::\n\nQuerying REST API\nClick on `+` button of the query manager at the bottom panel of the editor and select the REST API endpoint added in the previous step as the data source.\nClick on the 'run' button to run the query. \n:::note\nNOTE: Query should be saved before running.\n:::\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "SMTP",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/smtp.md",
    "content": "\nid: smtp\ntitle: SMTP\n\nSMTP\nSMTP plugin can connect ToolJet applications to SMTP servers for sending emails.\nConnection\nA SMTP server can be connected with the following credentails:\n- Host\n- Port\n- User\n- Password\n:::info\nYou can also test your connection before saving the configuration by clicking on `Test Connection` button.\n:::\n\n\n\nQuerying SMTP\nGo to the query manager at the bottom panel of the editor and click on the `+` button on the left to create a new query. Select `SMTP` from the datasource dropdown.\nTo create a query for sending email, you will need to provide the following properties:\n  - From `required` : Email address of the sender\n  - From Name : Name of the sender\n  - To `required` : Recipient's email address\n  - Subject : Subject of the email\n\n\nBody : You can enter the body text either in the form of `raw text` or `html` in their respective fields.\nAttachments : Attachments can be added to a SMTP query by referencing the file from the `File Picker` component in the attachments field. \n\nFor example, you can set the `Attachments` field value to `{{ components.filepicker1.file }}` or you can pass an array of `{{ name: 'filename.jpg', dataURL: '......' }}` object to accomplish this.",
    "tag": "tooljet"
  },
  {
    "title": "SendGrid",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/sendgrid.md",
    "content": "\nid: sendgrid\ntitle: SendGrid\n\nSendGrid\nToolJet can connect to your SendGrid account to send emails.\n\n:::info\nThe SendGrid API Datasource supports for interaction with the mail endpoint of the SendGrid v3 API.\n:::\nConnection\nTo add a new SendGrid API datasource, click the Datasource manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select SendGrid API from the modal that pops up.\nEnter your SendGrid API key in the \"API key\" field.\n:::tip\nSendGrid API key is required to create an SendGrid datasource on ToolJet. You can generate API key by visiting SendGrid account page. \n:::\nClick on the 'Save' button to save the data source.\nSupported operations\n\nEmail service\n\nEmail service\nRequired parameters: \n- Send email to\n- Send email from \n- Subject\n- Body as text\nOptional parameters:\n- Body as HTML\n\n:::info\nSend mail to - accepts an array/list of emails separated by comma.\nFor example:\n`{{[\"dev@tooljet.io\", \"admin@tooljet.io\"]}}`.\nSend mail from - accepts a string.\nFor example: `admin@tooljet.io`\n:::\n:::tip\nSend a single email to multiple recipients - The `Send mail to` field can contain an array of recipients, which will send a single email with all of the recipients in the field. \nSend multiple individual emails to multiple recipients - set Multiple recipients field to `{{true}}` and the `Send mail to` field will be split into multiple emails and send to each recipient.\n:::\n:::note\nNOTE: Query should be saved before running.",
    "tag": "tooljet"
  },
  {
    "title": "Mailgun",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/mailgun.md",
    "content": "\nid: mailgun\ntitle: Mailgun\n\nMailgun\nToolJet can connect to your Mailgun account to send emails.\n\n:::info\nThe Mailgun API Datasource supports for interaction with the mail endpoint of the Mailgun API.\n:::\nConnection\nTo add a new Mailgun API datasource, click the Datasource manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select Mailgun API from the modal that pops up.\nEnter your Mailgun API key in the \"API key\" field.\n:::tip\nMailgun API key is required to create an Mailgun datasource on ToolJet. You can generate API key by visiting Mailgun account page.\n:::\nClick on the 'Save' button to save the data source.\nSupported operations\n\nEmail service\n\nEmail service\nRequired parameters:\n\nSend email to\nSend email from\nSubject\nBody as text\n\nOptional parameters:\n\nBody as HTML\n\n\n:::info\nSend mail to - accepts a single email id. \nFor example:\n`{{\"dev@tooljet.io\"}}`.\nSend mail from - accepts a string.\nFor example: `admin@tooljet.io`\n:::\n:::tip\nSend a single email to multiple recipients - The `Send mail to` field can contain an array of recipients, which will send a single email with all of the recipients in the field.\nSend multiple individual emails to multiple recipients - set Multiple recipients field to `{{true}}` and the `Send mail to` field will be split into multiple emails and send to each recipient.\n:::\n:::note\nNOTE: Query should be saved before running.",
    "tag": "tooljet"
  },
  {
    "title": "Datasources : Overview",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/overview.md",
    "content": "\nid: overview\ntitle: Overview\n\nDatasources : Overview\nDatasources pull in and push data to any source including databases, external APIs, or services.\n\n\n\nConnecting datasources\n\n\nAfter logging in to ToolJet, create a new app from the dashboard\n\n\nThere are two ways for connecting a datasource. You can connect from:\n\n\nLeft-sidebar: On the left sidebar, click on the `datasource` icon and then click on the `+ add datasource` button\n\n\n\n\n\nQuery Panel: Go to the query panel at the bottom, click on the `+Add` button and then click `Add datasource` button\n\n\n\n\n\n\n\nFollow the steps in the Datasource Library specific to the desired datasource\n\n\n:::info\nToolJet allows you to transform the data returned by datasources using Transformations\n:::",
    "tag": "tooljet"
  },
  {
    "title": "MariaDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/mariadb.md",
    "content": "\nid: mariadb\ntitle: MariaDB\n\nMariaDB\nToolJet can connect to MariaDB to read and write data.\nConnection\nTo add a new MariaDB data source, click on the `+` button on datasources panel at the left sidebar of the app builder. Select MariaDB from the modal that pops up.\nToolJet requires the following to connect to your DynamoDB.\n\nHost\nUsername\nPassword\nConnection Limit\nPort\nDatabase\nSSL\nSSL Certificate\n\n\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying MariaDB\nClick on `+` button of the query manager at the bottom panel of the builder and select the MariaDB datasource added in the previous step. \n\n\n\nClick on the run button to run the query.\nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "Oracle DB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/oracledb.md",
    "content": "\nid: oracledb\ntitle: Oracle DB\n\nOracle DB\nToolJet can connect to Oracle databases to read and write data. \nConnection\nA Oracle DB can be connected with the following credentails:\n- Host\n- Port\n- SID / Service Name ( Database name must be a SID / Service Name )\n- Database Name\n- SSL\n- Username\n- Password\n- Client Library Path ( Only required for local setup )\n\n\n![ToolJet - Data source - OracleDB](/img/datasource-reference/oracledb/oracleauth.png)\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying Oracle DB\nOnce you have added a Oracle DB data source, click on `+` button of the query manager to create a new query. There are two modes by which you can query SQL:\n\nSQL mode\nGUI mode\n\nSQL mode\nSQL mode can be used to write raw SQL queries. Select SQL mode from the dropdown and enter the SQL query in the editor. Click on the `run` button to run the query.\nNOTE: Query should be saved before running.\nGUI mode\nGUI mode can be used to query Oracle database without writing queries. Select GUI mode from the dropdown and then choose the operation Bulk update using primary key. Enter the Table name and Primary key column name. Now, in the editor enter the records in the form of an array of objects. \nExample: `{{ [ {id: 1, channel: 33}, {id:2, channel:24} ] }}`\nClick on the run button to run the query. NOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "Redis",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/redis.md",
    "content": "\nid: redis\ntitle: Redis\n\nRedis\nToolJet can run Redis commands on your Redis instances.\nConnection\nToolJet requires the following to connect to your Redis instances. \n\n\nHost\nPort - The default port for Redis server is 6379\nUsername\nPassword\n\nClick on \"Test\" button to test the connection and click \"Save\" to save the data source.\nRedis Queries\nList of supported commands: Redis Official Documentation\nExamples\n`PING` command to test the Redis connection. If the connection is ready, the Redis server will respond with `PONG`.\n`shell\nPING`\n`SET` command can be used to set the value for a key \n`shell\nSET key value`\n`GET` command can be used to retrieve the value of a key\n```shell\nGET key",
    "tag": "tooljet"
  },
  {
    "title": "InfluxDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/influxdb.md",
    "content": "\nid: influxdb\ntitle: InfluxDB\n\nInfluxDB\nToolJet can connect to InfluxDB databases to read and write data. Use the Token authentication scheme to authenticate to the InfluxDB API. For more info visit InfluxDB docs.\nConnection\nToolJet connects to InfluxDB using :\n\nAPI Token\nHost\nPort\nProtocol (HTTP/HTTPS)\n\n:::info\nFor generating API Token visit InfluxDB docs.\n:::\n\n\n![ToolJet - Data source - influxDB](/img/datasource-reference/influxdb/influxauth.png)\n\n\nSupported queries:\n\n\nWrite data\n\n\nQuery data\n\n\nGenerate an Abstract Syntax Tree (AST) from a query\n\n\nRetrieve query suggestions\n\n\nRetrieve query suggestions for a branching suggestion\n\n\nAnalyze a Flux query\n\n\nList buckets\n\n\nCreate a bucket\n\n\nRetrieve a bucket\n\n\nUpdate a bucket\n\n\nDelete a bucket\n\n\n\nWrite data\nThis operation writes data to a bucket.\nRequired parameters:\n\nBucket\nOrganization name or ID\n\nOptional parameters:\n\nPrecision\n\nQuery data\nRetrieves data from InfluxDB buckets.\nRequired parameters:\n\nOrganization name or ID\n\nGenerate an Abstract Syntax Tree (AST) from a query\nThis operation analyzes flux query and generates a query specification.\nRequired parameters:\n\nQuery\n\nRetrieve query suggestions\nThis query retrieve query suggestions.\nRetrieve query suggestions for a branching suggestion\nThis operation retrieve query suggestions for a branching suggestion.\nRequired parameters:\n\nName\n\nAnalyze a Flux query\nThis Analyzes a Flux query.\nRequired parameters:\n\nQuery\n\nList buckets\nThis operation lists all the buckets in a database.\nCreate a bucket\nRequired parameters:\n\nQuery\n\nRetrieve a bucket\nThis operation retrieve a bucket in a database.\nRequired parameters:\n\nBucket ID\n\nUpdate a bucket\nRequired parameters:\n\nBucket ID\nQuery\n\nDelete a bucket\nRequired parameters:",
    "tag": "tooljet"
  },
  {
    "title": "Appwrite Database",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/appwrite.md",
    "content": "\nid: appwrite\ntitle: Appwrite Database\n\nAppwrite Database\nNow build applications on top of your Appwrite database.\nConnection\nToolJet connects to your Appwrite app using :\n- Host (API endpoint)\n- Project ID\n- Secret key\nYou'll find the Secret key and other credentials on your Appwrite's project settings page. You may need to create a new key if you don't have one already.\n:::info\nYou should also set the scope for access to a particular resource. Learn more about the API keys and scopes here.\n:::\nTo connect Appwrite datasource to your ToolJet application, go to the data source manager on the left-sidebar and click on the `+` button. Select Appwrite from the list of available datasources, provide the credentials and click Save. It is recommended to check the connection by clicking on 'Test connection' button to verify if the service account can access Appwrite from the ToolJet server.\n\n\n\nQuerying Appwrite\nAfter setting up the Appwrite datasource, you can click on the `+` button of the query manager at the bottom panel of the editor and select the Appwrite data source that you added in the previous step.\n\n\n\nAfter selecting Appwrite datasource, select the operation that you want to perform on the Appwrite database and click Save to save the query. \n:::tip\nQuery results can be transformed using Transformations. Read our Transformation documentation here\n:::\nSupported operations\n\nList documents\nGet document\nCreate document\nUpdate document \nDelete document\nBulk update using document id\n\nList documents\nThis operation can be used to get a list of all the user documents.\nRequired parameters:\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The value for collection ID field should be of `String` type. \n\nOptional parameters:\n\nLimit: Maximum number of documents to return in the response. By default, it will return a maximum of 25 results. A maximum of 100 results is allowed per request. The Limit value should be of `integer` type.\nOrder fields: Array of attributes used to sort results. The order field value should be an `array`.\nOrder types: Array of order directions for sorting attributes. Possible values are DESC for descending order or ASC for ascending order. The order field value should be an `array`.\nField, Operator, and Value: For filtering the results, you can enter a field(attribute) name, use the appropriate operator from the dropdown, and set a value.\n\n\n\n\nGet document\nUse this operation to get a document from a collection by its unique ID. \nRequired parameters:\n\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The value for collection ID should be of `String` type. \n\n\nDocument ID: Enter the document ID of the document that you want to get. The document ID should be of `String` type. \n\n\n\n\n\nAdd Document to Collection\nUse this operation to create a new document in a collection.\nRequired parameters:\n\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The collection ID should be of `String` type. \n\n\nBody: Enter the document data as a JSON object.\n\n\n\n\n\nUpdate document\nUse this operation to update a document.\nRequired parameters:\n\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The value for collection ID should be of `String` type. \n\n\nDocument ID: Enter the document ID of the document that you want to get. The document ID should be of `String` type. \n\n\nBody: Enter the document data as a JSON object.\n\n\n\n\n\nDelete document\nUse this operation for deleting a document in the collection.\nRequired parameters:\n\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The value for collection ID should be of `String` type. \n\n\nDocument ID: Enter the document ID of the document that you want to get. The document ID should be of `String` type. \n\n\n\n\n\nBulk update using document id\nUse this operation for bulk updating a document in a collection.\nRequired parameters:\n\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The value for collection ID should be of `String` type. \n\n\nKey for document ID:  Enter the key or attribute name that can be used to identify each record.\n\n\nRecords: The array of objects that will contain the data for updating each record in the database\nand these objects must contain a key-value pair to point unique record in the database (key for document)\n\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Slack",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/slack.md",
    "content": "\nid: slack\ntitle: Slack\n\nSlack\nToolJet can connect to your Slack workspace to send messages. \n\n\n\nConnection\n\n\nTo add the Slack datasource, click the Datasource manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select Slack from the modal that pops up.\n\n\nIn the next dialog, you'll be asked to choose the permission scope. Choose the permission scope and then click on Connect to Slack button.\n\n\nA new tab will open up asking for authorization confirmation. Once done, you can close the tab.\n\n\n\n\n\n\nClick on the 'Save data source button to save the data source.\n\n:::note\nThe App (which credentials are provided) needs to be installed in the workspace to use the Slack data source, and it needs to be added to the channel where you want to post the message.\n:::\nSupported operations\n\nList members\nSend message\nList messages from a channel\n\nList members\nThis operation will return the data of all the members in your slack workspace.\n\n\n\nSend message\nThis operation will send/post the message to a specified channel or posting to direct messages (also known as DMs or IMs) in your slack workspace.\n| Property | Description |\n| :--- | :--- |\n| Channel | The channel ID or user ID to post the message to. |\n| Message | The message to post. |\n\n\n\nList messages\nThis operation will get the messages from a specified channel.\n| Property | Description                             |\n| :--- |:----------------------------------------|\n| Channel | The channel ID to get the messages from |\n| Limit | The maximum number of messages to return. |\n| Next Cursor | A cursor value returned by a previous call to list messages. |\n\n",
    "tag": "tooljet"
  },
  {
    "title": "SAP HANA",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/saphana.md",
    "content": "\nid: saphana\ntitle: SAP HANA\n\nSAP HANA\nToolJet can connect to SAP HANA databases to read and write data. \n\nConnection\nQuerying SAP HANA\n\nConnection\nTo add a new SAP HANA database, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select SAP HANA from the modal that pops up.\nToolJet requires the following to connect to your SAP HANA database:\n\nHost\nPort\nUsername\nPassword\n\n:::info\nPlease make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\n:::\n\n\n![ToolJet - Data source - SAP HANA](/img/datasource-reference/saphana/connect.png)\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying SAP HANA\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. Enter the query in the editor. Click on the `run` button to run the query.\nNOTE: Query should be saved before running.\n\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "Twilio",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/twilio.md",
    "content": "\nid: twilio\ntitle: Twilio\n\nTwilio\nToolJet can connect to your Twilio account to send sms.\n\n\n![ToolJet - Data source - Twilio](/img/datasource-reference/twilio/connect.png)\n\n\nConnection\n\n\nTo add the Twilio datasource, click the Datasource manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select Twilio from the modal that pops up.\n\n\nIn the next dialog, you'll be asked to enter the Auth Token, Account SID, and Messaging Service SID.\n\n\nYou can get the Auth Token and Account SID on the dashboard of your Twilio account.\n\n\n\n\n![ToolJet - Data source - Twilio](/img/datasource-reference/twilio/auth.png)\n\n\n\nFor Messaging Service SID, you'll need to create a messaging service first from the Services under Messaging in the left-sidebar.\n\n\n\n![ToolJet - Data source - Twilio](/img/datasource-reference/twilio/sid.png)\n\n\n\nAfter entering the three credentials, you can Save the datasource.\n\nSupported operations\n\nSend message\n\nSend message\nThis operation will send the specified message to specified mobile number.\n\n\n![ToolJet - Data source - Twilio](/img/datasource-reference/twilio/sms.png)\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Amazon SES",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/amazonses.md",
    "content": "\nid: amazonses\ntitle: Amazon SES\n\nAmazon SES\nToolJet can connect to your Amazon SES account to send emails.\nConnection\nTo add a new Amazon SES API datasource, click the Datasource manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select Amazon SES from the modal that pops up.\nToolJet requires the following to connect to Amazon SES:\n\nRegion\nAccess key\nSecret key\n\nIt is recommended to create a new IAM user for the database so that you can control the access levels of ToolJet.\nClick on the 'Save' button to save the data source.\n\n\n\nSupported operations\n\nEmail service\n\nEmail service\nRequired parameters:\n- Send email to\n- Send email from\n- Subject\n- Body as text\nOptional parameters:\n- Body as HTML\n- CC Addresses\n- BCC Addresses\n:::info\nSend mail to - accepts an array/list of emails separated by comma.\nFor example:\n`{{[\"dev@tooljet.io\", \"admin@tooljet.io\"]}}`.\nSend mail from - accepts a string.\nFor example: `admin@tooljet.io`\n:::\n:::tip\nSend a single email to multiple recipients - The `Send mail to` field can contain an array of recipients, which will send a single email with all of the recipients in the field.\n:::\n:::info Note\nQuery should be saved before running.",
    "tag": "tooljet"
  },
  {
    "title": "MySQL",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/mysql.md",
    "content": "\nid: mysql\ntitle: MySQL\n\nMySQL\nToolJet can connect to MySQL databases to read and write data. \nConnection\nToolJet requires the following to connect to your MySQL database. Please make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nTo add a new MySQL database, click on the `+` button on data sources panel at left sidebar in the app editor. Select MySQL from the modal that pops up.\nToolJet requires the following to connect to your MySQL database.\n\nHost\nPort\nUsername\nPassword\n\nIt is recommended to create a new MySQL database user so that you can control the access levels of ToolJet. \n\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying MySQL\nOnce you have added a MySQL data source, click on `+` button of the query manager to create a new query. There are two modes by which you can query SQL:\n\nSQL mode\nGUI mode\n\nSQL mode\nSQL mode can be used to write raw SQL queries. Select SQL mode from the dropdown and enter the SQL query in the editor. Click on the `run` button to run the query.\nNOTE: Query should be saved before running.\n\nGUI mode\nGUI mode can be used to query MySQL database without writing queries. Select GUI mode from the dropdown and then choose the operation Bulk update using primary key. Enter the Table name and Primary key column name. Now, in the editor enter the records in the form of an array of objects. \nExample: `{{ [ {id: 1, channel: 33}, {id:2, channel:24} ] }}`\n\nClick on the run button to run the query. NOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "Cloud Firestore",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/firestore.md",
    "content": "\nid: firestore\ntitle: Cloud Firestore\n\nCloud Firestore\nConnection\nToolJet connects to your Cloud Firestore using JSON key of your GCP service account.\nTo generate a new key, check out Firestore's official documentation.\nOnce the key is downloaded, click on `+` button of data sources panel at the left-bottom corner of the app editor. Select Firestore from the modal that pops up. Paste the key in the field for GCP key. Click on Test connection button to verify if the service account can access Firestore from ToolJet server. Click on Save button to save the datasource.\n\nQuerying Firestore\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source.\n\nSelect the operation that you want to perform on Firestore and click Save to save the query. \n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\n\nGet document\nQuery collection\nAdd Document to Collection \nUpdate document \nSet document\nBulk update using document id\nDelete document\n\nGet document\nUse this operation to get the data in a document.\nRequired parameters:\n\nPath: Enter the path of the document. Path format: `collection name/document id`. ex: `books/23e2wsds32`\n\n\nQuery collection\nUse this operation to query all the documents in a collection. Check firestore doc here.\nRequired parameters:\n\nPath: Enter the name of the collection to be queried. Example: `books`\n\nOptional parameters:\n\n\nOrder type: Select ascending or descending from the dropdown.\n\n\nLimit: Maximum number of documents to return in response. By default will return maximum 25 results. Maximum of 100 results allowed per request. The Limit value should be of integer type.\n\n\nField, Operator, and Value: For filtering the results, you can enter a document field name, use appropriate operator from the dropdown and set a value.\n\n\n\nAdd Document to Collection\nUse this operation for creating a new document in a collection.\nRequired parameters:\n\nCollection: Enter the path of the document in a collection. Path format: `collection name/document id`. ex: `books/33243dwe2332`\nBody: Enter the Field names and their values in json form. example body:\n`json\n{\n\"Author\": \"Shubh\",\n\"id\": 5\n}`\n\n\nUpdate document\nUse this operation for updating the existing document in a collection. Also, it only updates fields if they exist, but doesn't replace an entire object like set operation.\nRequired parameters:\n\nPath: Enter the path of the document in a collection. Path format: `collection name/document id`. ex: `books/33243dwe2332`\nBody: Enter the Field names and their values in json form. example body:\n`json\n{\n\"Author\": \"Shubhendra\",\n\"id\": 3\n}`\n\n\nSet document\nThis operation replaces your chosen object with the value that you provide. So if your object has 5 fields, and you use Set operation and pass object with 3 fields, it will now have 3 fields.\nRequired parameters:\n\nPath: Enter the path of the document in a collection. Path format: `collection name/document id`. ex: `books/33243dwe2332`\nBody: Enter the Field names and their values in json form. example body:\n`json\n{\n\"Author\": \"Shefewfbh\",\n\"id\": 9\n}`\n\n\nBulk update using document id\nUse this operation for bulk updating documents.\nRequired parameters:\n\nCollection: \nKey for document ID: \nRecords:\n\n\nDelete document\nUse this operation for deleting a document in a collection.\nRequired parameters:\n\nPath: Enter the path of the document to be deleted in a collection. Path format: `collection name/document id`. ex: `books/33243dwe2332`\n\n\nTransforming firestore query result for Table widget\nThe Firestore query result is in the form of object so we\u2019ll need to transform it into array.\n```js\nreturn data = Array(data)",
    "tag": "tooljet"
  },
  {
    "title": "MinIO",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/minio.md",
    "content": "\nid: minio\ntitle: MinIO\n\nMinIO\nToolJet can connect to minio and perform various operation on them.\nSupported operations\n\nRead object\nPut object\nRemove object\nList buckets\nList objects in a bucket\nPresigned url for download\nPresigned url for upload\n\nConnection\nTo add a new minio source, click on the Add or edit datasource icon on the left sidebar of the app editor and click on `Add datasource` button. Select Minio from the modal that pops up.\nToolJet requires the following to connect to your DynamoDB:\n\nHost\nPort\nAccess key\nSecret key\n\n\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying Minio\nClick on `+` button of the query manager at the bottom panel of the editor and select the data source added in the previous step as the data source. Select the operation that you want to perform and click Save to save the query.\n\nClick on the run button to run the query. \nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "TypeSense",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/typesense.md",
    "content": "\nid: typesense\ntitle: TypeSense\n\nTypeSense\nToolJet can connect to your TypeSense deployment to read and write data.\nConnection\nPlease make sure the host/IP of the TypeSense deployment is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nToolJet requires the following to connect to your TypeSense deployment: \n- Host\n- Port\n- API Key\n- Protocol\n\n\n\nQuerying TypeSense\nClick on `+` button of the query manager at the bottom panel of the editor and select the TypeSense added in the previous step as the data source.\nSelect the operation that you want to perform on your TypeSense cluster and click `Create` to save the query. \n\n\n\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\n1. Create a Collection\nWith this operation you can easily create `Collections` in your TypeSense cluster. In the schema field, you'll need to define the schema for creating a new collection. Check out TypeSense docs to know more about collections here\n\n2. Index a document\nUse this operation to index a document to your collection. You'll need to specify the Collection Name where you want your document to be indexed and also provide the document data according the schema defined in the collection. Read more about Indexing a document in TypeSense here.\n\n3. Search\nUse this operation to perform a search within the specified collection. Know more about the search parameters in the TypeSense doc here.\n\n4. Get a document\nUse this operation to fetch an individual document in a collection by providing the `id` of the document. Read more about it here.\n\n5. Update a document\nUse this operation to update an individual document by providing the Collection Name and Id of the document. You'll need to provide the updated document data in the form of specified schema. Check out the TypeSense's doc on updating a document here.\n\n6. Delete a document\nDelete a document from collection by providing the `Id` of the document. Check out the TypeSense's doc on deleting documents here.\n\n:::tip\nMake sure that you supply JSON strings instead of JavaScript objects for any document or schema that is being passed to the server, in any of the above operations.",
    "tag": "tooljet"
  },
  {
    "title": "Notion",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/notion.md",
    "content": "\nid: notion\ntitle: Notion\n\nNotion\nToolJet can connect to a Notion workspace to do operations on notion pages, databases and blocks.\nConnection\nFor integrating Notion with ToolJet we will need the API token. The API token can be generated from your Notion workspace settings. Read the official Notion docs for Creating an internal integration with notion API.\n\n\n\nQuerying Notion\nNotion API provides support for:\n- Database\n- Page\n- Block\n- User\n\n:::tip\nBefore querying Notion, you must share the database with your integration. Click the share button in your database view, find your integration name select it.\n\n:::\nDatabase\nOn database resource you can perform the following operations:\n- Retrieve a database\n- Query a database\n- Create a database\n- Update a database\n\n1. Retrieve a database\nThis operations retrieves a Database object using the ID specified.\nRequired parameters:\n\nDatabase ID: You'll find the Database ID in the url. Suppose this is the example url: `https://www.notion.so/workspace/XXX?v=YYY&p=ZZZ` then `XXX` is the database ID, `YYY` is the view ID and `ZZZ` is the page ID.\n\n\n2. Query a database\nThis operation gets a list of Pages contained in the database, filtered and ordered according to the filter conditions and sort criteria provided in the query.\nRequired parameters:\n\nDatabase ID : You'll find the Database ID in the url. Suppose this is the example url: `https://www.notion.so/workspace/XXX?v=YYY&p=ZZZ` then `XXX` is the database ID, `YYY` is the view ID and `ZZZ` is the page ID.\n\nOptional parameters:\n\nFilter : This must be an object of filters\nSort : Array of sort objects\nLimit : limit for pagination\nStart Cursor : Next object id to continue pagination\n\n3. Create a database\nThis operation creates a database as a subpage in the specified parent page, with the specified properties.\nRequired parameters:\n\nDatabase ID : You'll find the Database ID in the url. Suppose this is the example url: `https://www.notion.so/workspace/XXX?v=YYY&p=ZZZ` then `XXX` is the database ID, `YYY` is the view ID and `ZZZ` is the page ID.\nPage ID : Page ID of the parent\nProperties : Properties defines the columns in a database\n\nOptional parameters:\n\nTitle : Title should be an array of rich_text properties\nIcon type : Currently notion api accepts two icon options, emoji, external URL\nIcon value : Value of selected icon type\nIcon type : Currently notion api accepts only external URL\nCover value : Value of selected cover type\n\n4. Update a database\nThis operation updates an existing database as specified by the parameters.\nRequired parameters:\n\nDatabase ID\n\nOptional parameters:\n\nTitle : Title should be an array of rich_text properties\nProperties : Properties defines the columns in a database\nIcon type : Currently notion api accepts two icon options, emoji, external URL\nIcon value : Value of selected icon type\nIcon type : Currently notion api accepts only external URL\nCover value : Value of selected cover type\n\nPage\nOn page resource you can perform the following operations:\n- Retrieve a page\n- Create a page\n- Update a page\n- Retrieve a page property\n- Archive a page\n\n1. Retrieve a page\nThis operation retrieves a Page object using the ID specified.\nRequired parameters:\n\nPage ID\n\n2. Create a page\nThis operation creates a new page in the specified database or as a child of an existing page. If the parent is a database, the property values of the new page in the properties parameter must conform to the parent database's property schema. If the parent is a page, the only valid property is title.\nParameters:\n\nPage ID\nProperties : Property values of this page\nIcon type : Currently notion api accepts two icon options, emoji, external URL\nIcon value: Value of selected icon type\nIcon type : Currently notion api accepts only external URL\nCover value : Value of selected cover type\n\n3. Update a page\nThis operation updates page property values for the specified page. Properties that are not set via the properties parameter will remain unchanged.\nParameters:\n\nPage ID\nParent type: A database parent or page parent\nProperties : Property values of this page\nChildren : Page content for the new page as an array of block objects\nIcon type : Currently notion api accepts two icon options, emoji, external URL\nIcon value: Value of selected icon type\nIcon type : Currently notion api accepts only external URL\nCover value : Value of selected cover type\n\n4. Retrieve a page property item\nThis operation retrieves a property_item object for a given page ID and property ID. Depending on the property type, the object returned will either be a value or a paginated list of property item values. See Property item objects for specifics.\nParameters:\n\nPage ID\nProperty ID\nLimit\nStart cursor\n\n5. Archive (delete) a page\nRequired parameters:\n\nPage ID\nArchive: Dropdown for archive and un archive the page\n\nBlocks\nThe following operations can be performed on the block resource:\n- Retrieve a block\n- Append block children\n- Retrieve block children\n- Update a block\n- Delete a block\n\n:::info\nTo get the id for blocks, simply click on the menu icon for the block and click \"Copy link\". Afterwards, paste the link in the browser and it should look like this: `https://www.notion.so/Creating-Page-Sample-ee18b8779ae54f358b09221d6665ee15#7fcb3940a1264aadb2ad4ee9ffe11b0e` the string after # is the block id i.e. `7fcb3940a1264aadb2ad4ee9ffe11b0e`.\n:::\n1. Retrieve a block\nThis operation retrieves a Block object using the ID specified.\nRequired parameters:\n\nBlock ID\n\n2. Append new block children\nThis operation creates and appends new children blocks to the parent block_id specified.\nRequired parameters:\n\nBlock ID\nChildren: Array of block objects\n\n3. Retrieve block children\nThis operation retrieves a paginated array of child block objects contained in the block using the ID specified.\nRequired parameters:\n\nBlock ID\nLimit\nStart cursor\n\n4. Update a block\nThis operation updates the content for the specified block_id based on the block type.\nRequired parameters:\n\nBlock ID\nProperties: The block object type value with the properties to be updated\nArchive\n\n5. Delete a block\nRequired parameters:\n\nBlock ID\n\nUser\nThe following operations can be performed on the user notion resource:\n1. Retrieve a user from current workspace\nThis operation retrieves a User using the ID specified.\n\nRequired parameters:\n\nUser ID\n\n2. Retrieve list of users of a workspace\nThis operation returns a paginated list of Users for the workspace.\nRequired parameters:\n\nLimit\nStart cursor\n",
    "tag": "tooljet"
  },
  {
    "title": "Stripe",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/stripe.md",
    "content": "\nid: stripe\ntitle: Stripe\n\nStripe\nToolJet can connect to your Stripe account to read or write customers' and payments' data.\n:::info\nCheck out the Stripe Refund App tutorial\n:::\nConnection\nTo add a new Stripe data source, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select Stripe from the modal that pops up.\nToolJet requires the Stripe API key to connect to your database.\n\n\n![ToolJet - Data source - Stripe](/img/datasource-reference/stripe/connect.png)\n\n\nYou can get the Stripe API key from the dashboard of your Stripe account. Go to the Stripe account dashboard, click on the Developers on the top right, then on the left-sidebar go to the API Keys, you can simple reveal the Secret Key and copy-paste on ToolJet.\n\n\n![ToolJet - Data source - Stripe](/img/datasource-reference/stripe/apikey.png)\n\n\nQuerying Stripe\nClick on + button of the query manager at the bottom panel of the editor and select the Stripe datasource added in the previous step. Enter the query in the editor. Click on the `Save and Run` button to save and then run the query.\nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\nYou can check out the some of the operations mentioned below. All the operations for Stripe are available and can be performed from ToolJet. Check out the Stripe API documentation for the detailed information about each operation.\n\ndelete,/v1/account\nget,/v1/account\npost,/v1/account\npost,/v1/account/bank_accounts\ndelete,/v1/account/bank_accounts/{id}\nget,/v1/account/bank_accounts/{id}\npost,/v1/account/bank_accounts/{id}\nget,/v1/account/capabilities\nget,/v1/account/capabilities/{capability}\npost,/v1/account/capabilities/{capability}\nget,/v1/account/external_accounts\npost,/v1/account/external_accounts\ndelete,/v1/account/external_accounts/{id}\nget,/v1/account/external_accounts/{id}\npost,/v1/account/external_accounts/{id}\npost,/v1/account/login_links\nget,/v1/account/people\npost,/v1/account/people\ndelete,/v1/account/people/{person}\nget,/v1/account/people/{person}\npost,/v1/account/persons\ndelete,/v1/account/persons/{person}\nget,/v1/account/persons/{person}\npost,/v1/account/persons/{person}\npost,/v1/account_links\nget,/v1/accounts\npost,/v1/accounts\ndelete,/v1/accounts/{account}\nget,/v1/accounts/{account}\npost,/v1/accounts/{account}\npost,/v1/accounts/{account}/bank_accounts\ndelete,/v1/accounts/{account}/bank_accounts/{id}\nget,/v1/accounts/{account}/bank_accounts/{id}\nget,/v1/accounts/{account}/bank_accounts/{id}\nget,/v1/accounts/{account}/capabilities\nget,/v1/accounts/{account}/capabilities/{capability}\npost,/v1/accounts/{account}/capabilities/{capability}\nget,/v1/accounts/{account}/external_accounts\npost,/v1/accounts/{account}/external_accounts\ndelete,/v1/accounts/{account}/external_accounts/{id}\nget,/v1/accounts/{account}/external_accounts/{id}\nget,/v1/accounts/{account}/external_accounts/{id}\npost,/v1/accounts/{account}/login_links\nget,/v1/accounts/{account}/people\npost,/v1/accounts/{account}/people\ndelete,/v1/accounts/{account}/people/{person}\nget,/v1/accounts/{account}/people/{person}\npost,/v1/accounts/{account}/people/{person}\nget,/v1/accounts/{account}/persons\npost,/v1/accounts/{account}/persons\ndelete,/v1/accounts/{account}/persons/{person}\nget,/v1/accounts/{account}/persons/{person}\npost,/v1/accounts/{account}/persons/{person}\npost,/v1/accounts/{account}/reject\nget,/v1/apple_pay/domains\npost,/v1/apple_pay/domains\ndelete,/v1/apple_pay/domains/{domain}\nget,/v1/apple_pay/domains/{domain}\nget,/v1/application_fees\nget,/v1/application_fees/{fee}/refunds/{id}\npost,/v1/application_fees/{fee}/refunds/{id}\nget,/v1/application_fees/{id}\npost,/v1/application_fees/{id}/refund\nget,/v1/application_fees/{id}/refunds\npost,/v1/application_fees/{id}/refunds\nget,/v1/apps/secrets\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Amazon S3",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/s3.md",
    "content": "\nid: s3\ntitle: Amazon S3\n\nAmazon S3\nToolJet can connect to Amazon S3 buckets and perform various operation on them.\nConnection\nTo add a new S3 source, go to the Datasources manager on the left sidebar of the app editor and click on `Add datasource` button. Select AWS S3 from the modal that pops up.\nToolJet requires the following to connect to your AWS S3:\n\nRegion\nAccess key\nSecret key\n\nIt is recommended to create a new IAM user for the database so that you can control the access levels of ToolJet.\n\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\n:::tip\nYou can now connect to different S3 Hosts using custom endpoints.\n:::\nQuerying AWS S3\nClick on `+` button of the query manager at the bottom panel of the editor and select the data source added in the previous step as the data source. Select the operation that you want to perform and click Save to save the query.\n\n\n\nClick on the run button to run the query. \nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nQuery operations\nYou can create query for AWS S3 data source to perform several actions such as:\n  1. Read object\n  2. Upload object\n  3. List buckets\n  4. List objects in a bucket\n  5. Signed url for download\n  6. Signed url for upload\nRead object\nYou can read an object in a bucket by using this operation. It requires two parameters - Bucket name and Key.\n\nUpload object\nYou can use this operation to upload objects(files) to your S3 bucket. It requires four parameters:\n  1. Bucket: Specify the bucket name\n  2. Key: Key of the object/file\n  3. Content type: Specify file type such as text, image etc. \n  4. Upload data: File/object that is to be uploaded. \n\nList buckets\nThis operation will list all the buckets in your S3. This does not require any parameter.\n\nList objects in a bucket\nThis operation will fetch the list of all the files in your bucket. It requires two parameters:\n  1. Bucket: Bucket name (mandatory)\n  2. Prefix: To limit the response to keys that begin with the specified prefix (optional)\n  3. Max keys: The maximum number of keys returned in the response body (optional). Default value is 1000.\n  4. Offset: The key to start with when listing objects in a bucket (optional). \n  5. \"Next Continuation Token\": `Next Continuation Token` indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key (optional).\n:::info\nNext Continuation Token\nFor listing a bucket for objects that begin with a specific character or a prefix, then use the `Offset` parameter. For example, if you want to list all the objects that begin with `a`, then set the `Offset` parameter to `a`. Similarly, if you want to list all the objects that begin with `ab`, then set the `Offset` parameter to `ab`.\nThe `Next Continuation Token` is used to list the next set of objects in a bucket. It is returned by the API when the response is truncated. The results will contain `Next Continuation Token` if there are more keys in the bucket that satisfy the list query. To get the next set of objects, set the `Next Continuation Token` parameter and run the query again.\nThe results will continue from where the last listing finished.\n:::\n\nSigned url for download\nThe object owner can optionally share objects with others by creating a presigned URL, using their own security credentials, to grant time-limited permission to download the objects. For creating a presigned URL, the required parameters are:\n  1. Bucket: name of the bucket for uploading the file\n  2. Key: an object key\n  3. Expires in: an expiration time of URL\n\nSigned url for upload\nThe presigned URLs are useful if you want your user/customer to be able to upload a specific object to your bucket, but you don't require them to have AWS security credentials or permissions. For creating a presigned URL, the required parameters are:\n  1. Bucket: name of the bucket for uploading the file\n  2. Key: an object key\n  3. Expires in: an expiration time of URL\n  4. Content type: the content type such as text, image etc.\n\n:::info\nWe built an app to view and upload files to AWS S3 buckets. Check out the complete tutorial here.",
    "tag": "tooljet"
  },
  {
    "title": "Athena",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/athena.md",
    "content": "Athena\nToolJet can connect to Amazon Athena which is an interactive query service that makes it easy to analyze data in Amazon S3 using standard SQL.\n\nConnection\nQuerying-athena\nBasic Operation\n\nConnection\nToolJet requires the following to connect to your Athena.\n\nDatabase\nS3 output location\nAccess key\nSecret key\nRegion\n\n:::info\nYou can also configure for additional optional parameters.\n:::\n\nQuerying Amazon Athena\n\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the datasource. Query manager then can be used to write SQL queries.\n\n\n\nClick on the `run` button to run the query. \n\nNOTE: Query should be saved before running.\n:::tip\nRefer amazon athena docs here for more info: link\n:::\nBasic queries\nCreating table\n`sql\nCREATE EXTERNAL TABLE student (\n    name STRING,\n    age INT\n)  LOCATION 's3://athena-express-akiatfa53s-2022/';`\nInserting to table\n`sql\nINSERT INTO student\nVALUES ('Lansing',1)`\nSelect operation\n```sql\nSELECT * from student WHERE AGE=1",
    "tag": "tooljet"
  },
  {
    "title": "Zendesk",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/zendesk.md",
    "content": "\nid: zendesk\ntitle: Zendesk\n\nZendesk\nToolJet can connect to Zendesk APIs to read and write data using OAuth 2.0, which helps us to limit an application's access to a user's account.\n\nConnection\nQuerying Zendesk\n\nConnection\nToolJet connects to your Zendesk app using :\n- Zendesk Sub-domain\n- Client ID\n- Client Secret\nAuthorization Scopes\nYou can create a Zendesk data source with one of either of the two permission scopes :\n  1. Read Only\n  2. Read and Write\n:::info\nYou must first be a verified user to make Zendesk API requests. This is configured in the Admin Center interface in Apps and integrations > APIs > Zendesk APIs. For more information, see Security and Authentication in the Zendesk Support API reference or check out Zendesk's docs.\n:::\nTo connect Zendesk datasource to your ToolJet application, go to the data source manager on the left-sidebar and click on the `+` button. Select Zendesk from the list of available datasources, provide the credentials and click Connect to Zendesk and authenticate via OAuth. And click Save to save the datasource.\n\n\n![ToolJet - Data source - Zendesk](/img/datasource-reference/zendesk/zendesk.gif)\n\n\nOperations\n\nList Tickets\nList requested Tickets\nShow a Ticket\nUpdate a Ticket\nList Users\nGet Profile\nSearch query\n\nList Tickets\nLists all the tickets in your Zendesk account.\nList requested Tickets\nLists all the tickets requested by the user. \n| Fields      | description |\n| ----------- | ----------- |\n| User ID    | The id of the user  |\nShow Tickets\nGets a ticket's properties with the given ID, though not the ticket comments.\n| Fields      | description |\n| ----------- | ----------- |\n| Ticket ID    | The id of the ticket  |\nUpdate Tickets\nUpdates a ticket's properties with the given ID.\n| Fields      | description |\n| ----------- | ----------- |\n| Ticket ID    | The id of the ticket  |\n| Body    | The properties and values to update. Example: `{{({ \"ticket\": {\"status\": \"solved\"} })}}` |\nList Users\nLists all the users in your Zendesk account.\nGet Profile\nGets a user's profile with the given ID.\n| Fields      | description |\n| ----------- | ----------- |\n| User ID    | The id of the user  |\nSearch Query\nThe Search Query uses Zendesk's Search API to return tickets, users, and organizations with defined filters.\nCommon filters include:\n- `type:ticket`\n- `type:user`\n- `type:organization`\n- `type:ticket organization:12345 status:open`\n| Fields      | description |\n| ----------- | ----------- |",
    "tag": "tooljet"
  },
  {
    "title": "DynamoDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/dynamodb.md",
    "content": "\nid: dynamodb\ntitle: DynamoDB\n\nDynamoDB\nToolJet can connect to DynamoDB to read and write data.\nConnection\nTo add a new DynamoDB, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select DynamoDB from the modal that pops up.\nToolJet requires the following to connect to your DynamoDB.\n\nRegion\nAccess key\nSecret key\n\nIt is recommended to create a new IAM user for the database so that you can control the access levels of ToolJet.\n\nClick on 'Test connection' button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on 'Save' button to save the data source.\nQuerying DynamoDB\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. Select the operation that you want to perform and click 'Save' to save the query.\n\nClick on the 'run' button to run the query. NOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "MS SQL Server / Azure SQL databases",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/mssql.md",
    "content": "\nid: mssql\ntitle: MS SQL Server / Azure SQL databases\n\nMS SQL Server / Azure SQL databases\nToolJet can connect to MS SQL Server & Azure SQL databases to read and write data. \nConnection\nPlease make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nTo add new MS SQL Server / Azure SQL database, click on the '+' button on data sources panel at the left-bottom corner of the app editor. Select `SQL Server` from the modal that pops up.\nToolJet requires the following to connect to your PostgreSQL database.\n\nHost\nPort\nUsername\nPassword\nAzure - Select this option if you are using Azure SQL databases.\n\nIt is recommended to create a new database user so that you can control the access levels of ToolJet. \nClick on 'Test connection' button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on 'Save' button to save the data source.\n\nQuerying SQL Server / Azure SQL databases\nClick on '+' button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. \nClick on the 'run' button to run the query. NOTE: Query should be saved before running.\n\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "ClickHouse",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/clickhouse.md",
    "content": "\nid: clickhouse\ntitle: ClickHouse\n\nClickHouse\nToolJet can connect to the ClickHouse to read and write data.\n:::info\nToolJet uses this NodeJS client for ClickHouse.\n:::\nConnection\nTo add a new ClickHouse datasource, Go to the Datasource Manager on the left sidebar of the app editor and click on `Add datasource` button. Select ClickHouse from the modal that pops up.\nToolJet requires the following to connect to your ClickHouse Database:\n\nUsername\nPassword\nHost\nPort\nDatabase Name\nProtocol\nUse Post\nTrim Query\nUse Gzip\nDebug\nRaw\n\n\nQuerying ClickHouse\nAfter setting up the ClickHouse datasource, you can click on the `+` button of the query manager and select the ClickHouse datasource that you added in the previous step to create a new query.\n:::info\nFor more details on clickhouse visit Clickhouse docs.\n:::\nSupported Operations:\n\nSQL Query\nInsert array of objects\n\nSQL Query\nUse this to operation to enter ClickHouse SQL Statements. These statements represent various kinds of action you can perform using SQL queries.\nExample SQL queries\n\n\nSELECT:\n`sql\nSELECT * from test array;`\n\n\n\n\n\nCREATE: \n`sql\nCREATE TABLE test array3 (\n    date Date,\n    str String,\n    arr Array(String),\n    arr2 Array (Date)\n    arr3 Array(UInt32) ,\n    id1 UUID\n)ENGINE=MergeTree () ORDER BY(str)`\n\n\n\n\n\nALTER TABLE(add column)\n`sql\nALTER TABLE test array1 ADD COLUMN Added2 UInt32;`\n\n\n\n\n\nSELECT WITH WHERE CLAUSE\n`sql\n    SELECT * FROM test array1 WHERE str='Somethingl...'`\n\n\n\n\n\nUPDATE\n`sql\n    ALTER TABLE test_array1 UPDATE arr = (12] WHERE str='Somethingl...'`\n\n\n\n\n\nDELETE\n`sql\n    ALTER TABLE test_array1 DELETE WHERE str= 'Somethingl...'`\n\n\n\n\n\nNORMAL INSERT\n1) Step 1 - Creating Table\n`sql\nCREATE TABLE test array4 (\nname String,\ndate Date\n   )ENGINE=MergeTree () ORDER BY (name)`\n\n\n\n2) Step 2 - Insert\n`sql\nINSERT INTO test_array4 (*) VALUES ('juvane', '1996-01-13')`\n\n\n\n:::info\nGiving Primary Key\n```\nCREATE TABLE db.table_name\n(\n    name1 type1, name2 type2, ...,\n    PRIMARY KEY(expr1[, expr2,...])]\n)\nENGINE = engine;\nOR \nCREATE TABLE db.table_name\n(\n    name1 type1, name2 type2, ...\n)\nENGINE = engine\nPRIMARY KEY(expr1[, expr2,...]);\n```\n:::\n\n\nInsert array of objects\nUse this operation for inserting array of objects.\nRequired Parameters:\n\nBody\nFields\nTable name\n\nExample Body value:\n`javascript\n[\n            {\n                date: '2018-01-01',\n                str: 'Something1...',\n                arr: [],\n                arr2: ['1985-01-02', '1985-01-03'],\n                arr3: [1,2,3,4,5],\n                id1: '102a05cb-8aaf-4f11-a442-20c3558e4384'\n            },      \n            {\n                date: '2018-02-01',\n                str: 'Something2...',\n                arr: ['5670000000', 'Something3...'],\n                arr2: ['1985-02-02'],\n                arr3: [],\n                id1: 'c2103985-9a1e-4f4a-b288-b292b5209de1'\n            }\n        ];`",
    "tag": "tooljet"
  },
  {
    "title": "Google Cloud Storage",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/gcs.md",
    "content": "\nid: gcs\ntitle: Google Cloud Storage\n\nGoogle Cloud Storage\nToolJet can connect to GCS buckets and perform various operation on them.\nSupported operations\n-Read file\n-Upload file\n-List buckets\n-List files in a bucket\n-Signed url for download\n-Signed url for upload\nConnection\nTo add a new GCS source, click on the Add or edit datasource icon on the left sidebar of the app editor and click on `Add datasource` button. Select GCS from the modal that pops up.\nToolJet requires the json private key of a service account to be able to connect to GCS.\nYou can follow the google documentation to get started.\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying GCS\nClick on `+` button of the query manager at the bottom panel of the editor and select the data source added in the previous step as the data source. Select the operation that you want to perform and click Save to save the query.\n\nClick on the run button to run the query. \nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "PostgreSQL",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/postgresql.md",
    "content": "\nid: postgresql\ntitle: PostgreSQL\n\nPostgreSQL\nToolJet can connect to PostgreSQL databases to read and write data. \nConnection\nPlease make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nTo add a new PostgreSQL database, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select PostgreSQL from the modal that pops up.\nToolJet requires the following to connect to your PostgreSQL database.\n\nHost\nPort\nUsername\nPassword\n\nIt is recommended to create a new PostgreSQL database user so that you can control the access levels of ToolJet.\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying PostgreSQL\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. PostgreSQL query editor has two modes, SQL & GUI. SQL mode can be used to write raw SQL queries and GUI mode can be used to query your PostgreSQL database without writing queries.\nSQL mode\nSelect SQL mode from the dropdown and enter the query in the editor. Click on the `run` button to run the query.\nNOTE: Query should be saved before running.\n\nGUI mode\nSelect GUI mode from the dropdown and then choose the operation Bulk update using primary key. Enter the Table name and Primary key column name. Now, in the editor enter the records in the form of an array of objects. \nClick on the `run` button to run the query. NOTE: Query should be saved before running.\n\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "GraphQL",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/graphql.md",
    "content": "\nid: graphql\ntitle: GraphQL\n\nGraphQL\nToolJet can connect to GraphQL endpoints to execute queries and mutations.\nConnection\nTo add a new GraphQL datasource, click the `+` button on  data sources panel at the bottom-left corner of the app builder and then select GraphQL from the modal that pops up.\nToolJet requires the following to connect to a GraphQL datasource:\n\nURL of the GraphQL endpoint\n\nThe following optional parameters are also supported:\n| Type         | Description |\n   | -----------  | ----------- |\n   | URL params   | Additional query string parameters|\n   | headers      | Any headers the GraphQL source requires|\n\n\n\nClick on the Save button to save the data source.\nQuerying GraphQL\nClick on `+` button of the query manager at the bottom panel of the editor and select the GraphQL endpoint added in the previous step as the  data source.\nRequired Parameters:\n\nQuery\n\nOptional Parameters\n\nVariable\nHeaders\n\n\n\n\nClick on the 'Create' button to create the query or Click on the `Run` button to create and trigger the query.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "Elasticsearch",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/elasticsearch.md",
    "content": "\nid: elasticsearch\ntitle: Elasticsearch\n\nElasticsearch\nToolJet can connect to your Elasticsearch cluster to read and write data.\nConnection\nPlease make sure the host/IP of the Elasticsearch cluster is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nTo add a new Elasticsearch database, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select Elasticsearch from the modal that pops up.\nToolJet requires the following to connect to your Elasticsearch cluster: \n- Host\n- Port\n- Username\n- Password\n\n\n\nElastic search datasource is also providing an option for connecting services with ssl certificates. \n- You can either use CA / Client certificates option. \n\nQuerying Elasticsearch\nClick on `+` button of the query manager at the bottom panel of the editor and select the Elasticsearch added in the previous step as the data source. \nSelect the operation that you want to perform on your Elasticsearch cluster and click `Create` to save the query. \n\n\n\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\nSearch\nThis operation allows you to execute a search query and get back search hits that match the query. Read the Elasticsearch's `Search` guide here.\n\nIndex a document\nThis operation allows you to add a JSON document to the specified data stream or index. Read the Elasticsearch's `Index` guide here.\n\nGet a document\nThis operation allows you to retrieve the specified JSON document from the index. Read the Elasticsearch's `Get` guide here.\n\nUpdate a document\nThis operation allows to update a document using the specified script. Read the Elasticsearch's `Update` guide here.",
    "tag": "tooljet"
  },
  {
    "title": "Baserow",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/baserow.md",
    "content": "\nid: baserow\ntitle: Baserow\n\nBaserow\nConnection\nToolJet can connect to your Baserow account to read and write data. \nSelect the hosted version of Baserow or the self-host option.\nFor self-hosted option, base URL is required to connect.\nBaserow API token is required to create an Baserow data source on ToolJet. You can follow the steps to create API token from this link.\n\n:::tip\nThis guide assumes that you have already gone through Adding a data source tutorial.\n:::\nSupported queries\n\nList fields\nList rows\nGet row\nCreate row\nUpdate row\nMove row\nDelete row\n\nList fields\nThis query lists all the fields in a table.\nRequired parameters:\n\nTable ID\n\n\nExample response from Baserow:\n`json\n[\n  {\n    \"id\": 331156,\n    \"table_id\": 57209,\n    \"name\": \"Name\",\n    \"order\": 0,\n    \"type\": \"text\",\n    \"primary\": true,\n    \"text_default\": \"\"\n  },\n  {\n    \"id\": 331157,\n    \"table_id\": 57209,\n    \"name\": \"Last name\",\n    \"order\": 1,\n    \"type\": \"text\",\n    \"primary\": false,\n    \"text_default\": \"\"\n  },\n  {\n    \"id\": 331158,\n    \"table_id\": 57209,\n    \"name\": \"Notes\",\n    \"order\": 2,\n    \"type\": \"long_text\",\n    \"primary\": false\n  },\n  {\n    \"id\": 331159,\n    \"table_id\": 57209,\n    \"name\": \"Active\",\n    \"order\": 3,\n    \"type\": \"boolean\",\n    \"primary\": false\n  }\n]`\nList rows\nThis query lists all the rows in a table.\nRequired parameters:\n\nTable ID\n\n\nExample response from Baserow:\n`json\n{\n  \"count\": 3,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"id\": 2,\n      \"order\": \"0.99999999999999999991\",\n      \"Name\": \"Bill\",\n      \"Last name\": \"Gates\",\n      \"Notes\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce dignissim, urna eget rutrum sollicitudin, sapien diam interdum nisi, quis malesuada nibh eros a est.\",\n      \"Active\": false\n    },\n    {\n      \"id\": 3,\n      \"order\": \"0.99999999999999999992\",\n      \"Name\": \"Mark\",\n      \"Last name\": \"Zuckerburg\",\n      \"Notes\": null,\n      \"Active\": true\n    },\n    {\n      \"id\": 1,\n      \"order\": \"0.99999999999999999997\",\n      \"Name\": \"Elon\",\n      \"Last name\": \"Musk\",\n      \"Notes\": null,\n      \"Active\": true\n    }\n  ]\n}`\nGet row\nRequired parameters:\n\nTable ID\nRow ID\n\n\nExample response from Baserow:\n`json\n{\n  \"id\": 1,\n  \"order\": \"0.99999999999999999997\",\n  \"Name\": \"Elon\",\n  \"Last name\": \"Musk\",\n  \"Notes\": null,\n  \"Active\": true\n}`\nCreate row\nRequired parameters:\n\nTable ID\nRecords\n\n\nExample Records:\n`json\n{\n  \"Name\": \"Test\",\n  \"Last name\": \"Test Name\",\n  \"Notes\": \"Test Note\",\n  \"Active\": true\n}`\nExample response from Baserow:\n`json\n{\n  \"id\": 19,\n  \"order\": \"0.99999999999999999996\",\n  \"Name\": \"Test\",\n  \"Last name\": \"Test Name\",\n  \"Notes\": \"Test Note\",\n  \"Active\": true\n}`\nUpdate row\nRequired parameters:\n\nTable ID\nRow ID\nRecords\n\n\nExample Records:\n`json\n{\n  \"Name\": \"Test\",\n  \"Last name\": \"Test Name\",\n  \"Notes\": \"Test Note\",\n  \"Active\": true\n}`\nExample response from Baserow:\n`json\n{\n  \"id\": 19,\n  \"order\": \"0.99999999999999999996\",\n  \"Name\": \"Test\",\n  \"Last name\": \"Test Name\",\n  \"Notes\": \"Test Note\",\n  \"Active\": true\n}`\nMove row\nRequired parameters:\n\nTable ID\nRow ID\n\nOptional parameters:\n\nBefore ID (The row will be moved before the entered ID. If not provided, then the row will be moved to the end )\n\n\nExample response from Baserow:\n`json\n{\n  \"id\": 3,\n  \"order\": \"2.00000000000000000000\",\n  \"Name\": \"Mark\",\n  \"Last name\": \"Zuckerburg\",\n  \"Notes\": null,\n  \"Active\": true\n}`\nDelete row\nRequired parameters:\n\nTable ID\nRow ID\n\n",
    "tag": "tooljet"
  },
  {
    "title": "CouchDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/couchdb.md",
    "content": "\nid: couchdb\ntitle: CouchDB\n\nCouchDB\nToolJet can connect to CouchDB databases to read and write data. CocuhDB uses basic auth for authentication , username and password for the database is required to create an CouchDB data source on ToolJet. For more info visit CouchDB docs.\n\nSupported queries:\n\nListing records\nRetrieving a record\nCreating a record\nUpdating a record\nDeleting a record\nFind\nRetrieving a view\n\n:::info\nNOTE: Record ID is same as document ID(\"_id\") .\n:::\nListing records\nThis query lists all the records in a database.\nOptional parameters:\n\nInclude docs\nDescending order\nLimit\nSkip\n\n:::info\ndescending (boolean) \u2013 Return the documents in descending order by key. Default is false.\nlimit (number) \u2013 Limit the number of the returned documents to the specified number.\nskip (number) \u2013 Skip this number of records before starting to return the results. Default is 0.\ninclude_docs (boolean) \u2013 include_docs key is set to false by default , if true it returns the document data along with the default fields.\n:::\n\nExample response from CouchDb: \n`json\n{\n    \"total_rows\": 3,\n    \"offset\": 0,\n    \"rows\": [\n        {\n            \"id\": \"23212104e60a71edb42ebc509f000dc2\",\n            \"key\": \"23212104e60a71edb42ebc509f000dc2\",\n            \"value\": {\n                \"rev\": \"1-0cc7f48876f15883394e5c139c628123\"\n            }\n        },\n        {\n            \"id\": \"23212104e60a71edb42ebc509f00216e\",\n            \"key\": \"23212104e60a71edb42ebc509f00216e\",\n            \"value\": {\n                \"rev\": \"1-b3c45696b10cb08221a335ff7cbd8b7a\"\n            }\n        },\n        {\n            \"id\": \"23212104e60a71edb42ebc509f00282a\",\n            \"key\": \"23212104e60a71edb42ebc509f00282a\",\n            \"value\": {\n                \"rev\": \"1-da5732beb913ecbded309321cac892d2\"\n            }\n        },\n    ]\n}`\nRetrieving a record\nRequired parameters:\n\nRecord ID\n\n\nExample response from CouchDb: \n`json\n{\n    \"_id\": \"e33dc4e209689cb0400d095fc401a1e0\",\n    \"_rev\": \"1-a62af8e14451af88c150e7e718b7a0e8\",\n    \"0\": {\n        \"name\": \"test data\"\n    }\n}`\nThe returned JSON is the JSON of the document, including the document ID and revision number:\nCreating a record\n\nExample Records:\n`json\n  [{\"name\":\"tooljet\"}]`\nClick on the `run` button to run the query.\n:::info\nNOTE: Query must be saved before running.\n:::\nExample response from CouchDb:\n```json\n{\n    \"ok\": true,\n    \"id\": \"23212104e60a71edb42ebc509f0049a2\",\n    \"rev\": \"1-b0a625abc4e21ee554737920156e911f\"\n}\n```\nUpdating a record\nYou can get the revision id  value, by sending a GET request to get the document details.\nYou get the document as JSON in the response. For each update to the document, the revision field \"_rev\" gets changed.\nRequired parameters:\n\nRevision ID\nRecord ID\n\n\nExample body:\n`json\n  [{\"name\":\"tooljet\"}]`\nClick on the `run` button to run the query.\n:::info\nNOTE: Query must be saved before running.\n:::\nExample response from CouchDb:\n`json\n{\n    \"ok\": true,\n    \"id\": \"23212104e60a71edb42ebc509f0049a2\",\n    \"rev\": \"2-b0a625abc4e21ee554737920156e911f\"\n}`\nDeleting a record\nRequired parameters:\n\nRevision ID\nRecord ID\n\n\nClick on the `run` button to run the query.\nExample response from CouchDb:\n`json\n{\n    \"ok\": true,\n    \"id\": \"rev_id=2-3d01e0e87139c57e9bd083e48ecde13d&record_id=e33dc4e209689cb0400d095fc401a1e0\",\n    \"rev\": \"1-2b99ef28c03e68ea70bb668ee55ffb7b\"\n}`\nFind\nFind documents using a declarative JSON querying syntax.\nRequired parameters:\n\nSelector\n\n:::info\nNOTE:\nselector syntax: https://pouchdb.com/guides/mango-queries.html\n:::\n\nExample body:\n`json\n{\n    \"selector\": {\n        \"year\":  {\"$gte\": 2015}\n    },\n    \"fields\": [\"year\"]\n}`\nClick on the `run` button to run the query.\n:::info\nNOTE:\nselector (json) \u2013 JSON object describing criteria used to select documents. \nMore information : https://docs.couchdb.org/en/stable/api/database/find.html\n:::\nExample response from CouchDb:\n\nRetrieving a view\nViews are the primary tool used for querying and reporting on CouchDB documents.\nRequired parameters:\n\nView url\n\nReference for view :https://docs.couchdb.org/en/3.2.0/ddocs/views/intro.html#what-is-a-view\n\nOptional parameters:\n\nStart key\nEnd key\nLimit\nSkip\n\nClick on the `run` button to run the query.\n:::info\nstartkey (json) \u2013 Return records starting with the specified key.\nendkey (json) \u2013 Stop returning records when the specified key is reached.\nlimit (number) \u2013 Limit the number of the returned documents to the specified number.\nskip (number) \u2013 Skip this number of records before starting to return the results. Default is 0.\n:::\nExample response from CouchDb:\n```json\n{\n    \"total_rows\": 4,\n    \"offset\": 0,\n    \"rows\": [\n        {\n            \"id\": \"23212104e60a71edb42ebc509f000dc2\",\n            \"key\": \"23212104e60a71edb42ebc509f000dc2\",\n            \"value\": {\n                \"rev\": \"1-0cc7f48876f15883394e5c139c628123\"\n            }\n        },\n        {\n            \"id\": \"23212104e60a71edb42ebc509f00216e\",\n            \"key\": \"23212104e60a71edb42ebc509f00216e\",\n            \"value\": {\n                \"rev\": \"1-b3c45696b10cb08221a335ff7cbd8b7a\"\n            }\n        },\n        {\n            \"id\": \"23212104e60a71edb42ebc509f00282a\",\n            \"key\": \"23212104e60a71edb42ebc509f00282a\",\n            \"value\": {\n                \"rev\": \"1-da5732beb913ecbded309321cac892d2\"\n            }\n        },\n        {\n            \"id\": \"23212104e60a71edb42ebc509f002cbd\",\n            \"key\": \"23212104e60a71edb42ebc509f002cbd\",\n            \"value\": {\n                \"rev\": \"1-ca5bb3c0767eb42ea6c33eee3d395b59\"\n            }\n\n\n```    }\n]\n```\n\n\n}",
    "tag": "tooljet"
  },
  {
    "title": "Google Sheets",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/google.sheets.md",
    "content": "\nid: google.sheets\ntitle: Google Sheets\n\nGoogle Sheets\nToolJet can connect to Google Sheet using OAuth 2.0, which helps us to limit an application's access to a user's account.\nHow to integrate Google Sheets\n\nSelf-Hosted Configuration\nIf you are self-hosting the application, you will need to perform some additional steps.\n\nFollow the Google OAuth 2.0 setup steps outlined here\nSet the following environment variables with the values from the previous step:\n`GOOGLE_CLIENT_ID`\n`GOOGLE_CLIENT_SECRET`\n`TOOLJET_HOST`\n\n\nEnable the Google Sheets API in the GCP console\n\nAuthorization Scopes\nYou can create a Google Sheets data source with one of either of the two permission scopes :\n  1. Read Only\n  2. Read and Write\n\nOperations\nUsing Google sheets data source you can perform several operations from your applications like:\n\nRead data from a sheet\nAppend data to a sheet\nUpdate single row of a sheet\nDelete row from a sheet\nGet spreadsheet info\n\nRead data from a sheet\nThis operation returns the table data from the spreadsheet in the form of json object. \n| Fields      | description |\n| ----------- | ----------- |\n| Spreadsheet ID | It is mandatory to enter the spreadsheet-id. The spreadsheet-id can be found in the URL of the spreadsheet. Example URL: https://docs.google.com/spreadsheets/d/1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM/edit#gid=0 - in this URL, the `1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM` is the spreadsheet-id. |\n| Range | This is optional. You can specify the range of cells in this field. If left empty, it will select the range `A1:Z500`. |\n| Sheet | This is optional. You can specify `sheet name` if it has more than 1 sheets, else it will automatically choose the first sheet. |\n\nAppend data to a sheet\nYou can add more rows to the table using the append operation.\n| Fields      | description |\n| ----------- | ----------- |\n| Spreadsheet ID | It is mandatory to enter the spreadsheet-id. The spreadsheet-id can be found in the URL of the spreadsheet. Example URL: https://docs.google.com/spreadsheets/d/1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM/edit#gid=0 - in this URL, the `1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM` is the spreadsheet-id. |\n| Sheet | This is optional. You can specify `sheet name` if it has more than 1 sheets, else it will automatically choose the first sheet. |\n| Rows  | Enter the row data in the json array form. Each object in an array will represent a single row. Example: `[ {\"name\":\"John\", \"email\":\"John@tooljet.com\"},{...},{...} ]` In each object, the `key` represents the column name and the `value` represents the cell data.   |\n\nUpdate single row of a sheet\nYou can update the existing data in sheet using this operation.\n| Fields      | description |\n| ----------- | ----------- |\n| Spreadsheet ID | It is mandatory to enter the spreadsheet-id. The spreadsheet-id can be found in the URL of the spreadsheet. Example URL: https://docs.google.com/spreadsheets/d/1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM/edit#gid=0 - in this URL, the `1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM` is the spreadsheet-id. |\n| Where | Enter the column name such as `id` for choosing a row. |\n| Operator | Choose the `===` operator to check the equality. |\n| Value | Enter the any `id` number/name that you want to update. |\n| Rows  | Enter the row data. Example: `{{({id: components.textinput4.value, company: components.textinput1.value, position: components.textinput2.value, url: components.textinput3.value, 'date-applied': components.datepicker1.value, status: components.dropdown1.value})}}`  |\n\nDelete row from a sheet\nUse this operation delete a specific row from the sheet.\n| Fields      | description |\n| ----------- | ----------- |\n| Spreadsheet ID | It is mandatory to enter the spreadsheet-id. The spreadsheet-id can be found in the URL of the spreadsheet. Example URL: https://docs.google.com/spreadsheets/d/1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM/edit#gid=0 - in this URL, the `1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM` is the spreadsheet-id. |\n| GID | You'll find the GID in the end of the URL of spreadsheet. In the example mentioned above, the GID is 0 |\n| Delete row number |  Just enter the row number that you want to delete.  |\n\nGet spreadsheet info\nThis operation can be used to get some basic information of the spreadsheet such as the number of sheets, theme, time-zone, format, and url etc.\nHere is the `Preview` of the query that used the get spreadsheet info operation.",
    "tag": "tooljet"
  },
  {
    "title": "BigQuery",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/bigquery.md",
    "content": "\nid: bigquery\ntitle: BigQuery\n\nBigQuery\nToolJet can connect to BigQuery databases to run BigQuery queries.\nConnection\nPlease refer this link to enable BigQuery API in Google Cloud Console. \nCreate Service Account and key, then get your configs downloaded as JSON\nTo add a new BigQuery, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select BigQuery from the modal that pops up.\nToolJet requires the config json downloaded from your account to connect to BigQuery. Paste the json into the `Private key` field.\nThe json looks like:\n`json\n {\n  \"type\": \"service_account\",\n  \"project_id\": \"tooljet-279812\",\n  \"private_key_id\": \"ea6e234sdfsdf3242b91525626edeef74a14e58761\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADAAhdh67sidfnIUWWWBAQC8V+z0vaM/rFiA\\nrq8fzVjSpEu7Cietjn82SVtguAlAUP9YpRepzi4rDmRgVQiXe4KES7VGQhmg3hUj\\nbBASbdI5WRCvAC2ujzrxv3rbfjYRWfm+OqzpUBWaEKbwSGc6rNkhmirvhjiFdl5k\\nn7aK7w3bmQfBlnNM6+WiQdT09g2qx3lmRDoUUpuCngkhbWOs3gN/U6wlm0cHKtbF\\nWUOwKdyeZrm3UORUDkFvq6rVSF8vob+FQxf24FuvpBmXi2o2dqqglle8rlm8Lz83\\ns4kAVbqVjtGrVXm6QUcnLISqJCJUnFkSuFpo60GCcgAVrwyAq/6aQH3IM78QKzFL\\n8q5b65rXAgMBAAECggEAClIF8tRk0VuG3NZH5lg3q8fDOyaLBFdVKcHKtzCec3Ez\\no6C4RcxP6Hk5IbPrtgggjVIi/Z7exKRv2mAwFvuSuJJSQSSjXC7Fm87AQPdYFWYt\\noFYIeLGPlFMO++H3Nh+Xt3I5NBLR58UmH48iBdgR3pygXi1C5eBvQ2rdNVTL/uxw\\n3iULu8WcVBw8glzkdLNLDq94uqbW7/qyji7QWNkU+804sA0LEj4PWmO7B9k1LCLK\\nFV0Ppv+SJYMS2MhWmXPHnYVfeNaKJKPQpHsS2ep/hyjEO/3Fvm3o3cp6SrEkNGIH\\nGKeozlfV7MQj7tMHLqWddDBXtFwYVEmN0UJVafvGsQKBgQDsEVzb7DG/xlMpuDQv\\nqpLGWXR5DdAhzxVJzeh11Ongb+XxBOVSyTDKJLvOX4rI7tDqqN7b2pabUA3ZjvXv\\nhMPXr7AjL6yoJEzVCyo1+pi26OL99OcO+7gUDa0axHFt6LZuPw00r+2Nl0FqrXNR\\n+qUiPuZpp2MuKjMwLCwhr5YuqwKBgQDMPv6TPMl+oocoQ4uc84uY58Ywb7XZjmhY\\n8jXdA38I454EbQGeLja+2knDpDkF6g14cTzVJe/Ec4A6QmeIieTFSJKBV4VCZ3QN\\npLR4PrET7o9GL3mtwnNqcHPw2dLNHtn1OgsOUfJMWPIrFK2abVNAmYIBtOGA4eyH\\nrOl+NcAUhQKBgC4EKGy6OuxeFYHxZULRZjEB6QFb3vFoM4cieyjU6w4T4ee8g5NC\\nop8U0AMnfp8yZkkHyAFlN6xoy3pYMrqQz7gwiA4j0e0ovk1dEspY4gHtnanRXmT+\\nTmCiVdb86ft5vG37HnDhxlWuYVMRIoSdbikhx7papauvEDFYuvWKC6VnAoGBAJQr\\nvxOhrauozNRw6//YzxUGT8kjwZEqtpiQXnMP7kDMn/4l9l6CuESMp6a+pH+d5FfU\\nDoWzF9Y01HlvYxyyrLxSgbZDf/FEi/S54BK7qEsFbftExclAn+o/2lyIKV2VXBmD\\nGjIxUM4CWOzX+3lkhlj/BEmop0+Qlr92uY1OASLhAoGAfTb/Le0Nf5bGLjK3hI9D\\no/oDI5Ryj5rTMxmG/wRjE+1Jm6BjFzEyH2CvnFonccyHQ+wGn61AgbRFLn+Tg5fz\\nZXpzD2Xq3Y/AXtrdaayK0wnpMvVE1bZt+ikeVAWX+gR79igTqSXRgCuyp+edsgcE\\nZ+2Eser4Z5BpqfFjqFW8MhY=\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"tooljettest@tooljet-279812.iam.gserviceaccount.com\",\n  \"client_id\": \"106795637455432158803\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/tooljettest%40tooljet-279812.iam.gserviceaccount.com\"\n}`\n\n\n\nClick on Test connection button to verify if the credentials are correct and that the API is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying BigQuery\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. Select the operation that you want to perform and click Save to create the query.\n\nClick on the run button to run the query. NOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\n\n\nList Datasets\n\n\nList Tables\n\n\nQuery\n\n\nInsert Record \n\n\nDelete Record \n\n\nUpdate Record\n\n\nCreate View\n\n\nCreate Table\n\n\nDelete Table\n\n\nList Datasets\nReturns list of datasets.\nOptional parameters:\n\nOptions: This can be used to filter the list.\n\n\nList Tables\nReturn list of tables within a dataset\nRequired parameters:\n\nDataset: Enter the dataset name.\n\n\nQuery\nReturn data based on the `Query`. `Query options` (Reference), and `Query result options` (Reference).\n\nInsert Record\n\nTo insert a record.\n\n\nDelete Record\n\nTo delete a record.\n\n\n:::info\nNOTE: Be careful when deleting records in a table. If you omit the WHERE clause, all records in the table will be deleted!\n:::\nUpdate Record\n\nTo update a record.\n\n\n:::info\nNOTE: Be careful when deleting records in a table. If you omit the WHERE clause, all records in the table will be updated!\n:::\nCreate View\n\nTo create a view.\n\n\nCreate Table\n\nTo create a table.\n\n:::info\nNOTE: visit -https://github.com/googleapis/nodejs-bigquery/blob/main/samples/createTable.js for more info on schema.\n:::\nDelete Table",
    "tag": "tooljet"
  },
  {
    "title": "Run JavaScript code",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/custom-js.md",
    "content": "\nid: run-js\ntitle: Run JavaScript code\n\nRun JavaScript code\nYou can write custom JavaScript code to interact with components and queries. To do that, you just need to create a new query and select Run JavaScript Code from the data sources dropdown.\n\n\n\nExample: Displaying random number\n\nLet's drag a button and a text widget inside a container widget.\nClick on the `+` on the query panel to create a query and select Run JavaScript code from the available datasources\nWrite the code in JavaScript editor and save the query:\n`jsx\nconst a = Math.floor(Math.random() * (10 - 1)) + 1;\nreturn a;`\n:::tip\nThe `return` statement is used to end the code and the value specified to the `return` statement will be stored in the `data` property of the query. \nex: `{{queries.runjs1.data}}`\n\nYou cannot use `console.log` in Run JavaScript code\n:::\n\n\nLet's edit the properties of widgets:\n\nAdd an event handler to the button - Select On Click event, Run Query action, and select the `runjs1` query that we created. This will run the JavaScript code every time the button is clicked.\nEdit the property of text widget - In the text field enter Random number: `{{queries.runjs1.data}}`. It will display the output as Random number: result from JS code\n\n\n\n\n\n\nYou can also write custom JavaScript code to get the data from External APIs and manipulate the response for graphical representation. Here's the tutorial on how we used custom JavaScript code to build an app using GitHub API.\nLibraries\nToolJet allows you to internally utilize these libraries:\n| Name        | Documentation |\n| ----------- | ----------- |\n| Moment      | https://momentjs.com/docs/ |\n| Lodash      | https://lodash.com/docs/ |\n| Axios       | https://axios-http.com/docs/intro |\n:::info\nIssues with writing custom JavaScript code? Ask in our Slack community.",
    "tag": "tooljet"
  },
  {
    "title": "WooCommerce",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/woocommerce.md",
    "content": "\nid: woocommerce\ntitle: WooCommerce\n\nWooCommerce\nToolJet can connect to WooCommerce databases to read and write data.\n\nConnection\nGetting Started\n\nConnection\nAuth\nYou may use [HTTP Basic Auth] by providing the REST API Consumer Key as the username and the REST API Consumer Secret as the password.\n- Host\n- Consumer key\n- Consumer secret\n\n:::info\nNOTE: For generating keys visit admin dashboard of woocommerce , more info: https://woocommerce.github.io/woocommerce-rest-api-docs/?javascript#authentication\n:::\nQuerying Woocommerce\nOperations\nCustomer\n\nlist customer\nupdate customer\ndelete customer\nbatch update customer\ncreate customer\nretrieve customer\n\nPRODUCT\n\nlist product\nupdate product\ndelete product\nbatch update product\ncreate product\nretrieve product\n\nORDER\n\nlist order\nupdate order\ndelete order\nbatch update order\ncreate order\nretrieve order\n\nCoupon\n\nlist coupon\ncreate coupon\n\n:::info\nNOTE: For more info visit https://woocommerce.github.io/woocommerce-rest-api-docs/?javascript.",
    "tag": "tooljet"
  },
  {
    "title": "RethinkDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/rethinkdb.md",
    "content": "\nid: rethinkdb\ntitle: RethinkDB\n\nRethinkDB\nToolJet can connect to RethinkDB databases to read and write data. For more info visit this doc.\n\nConnection\nToolJet connects to InfluxDB using :\n\nDatabase\nHost\nPort\nUsername \nPassword \n\nSupported queries:\n\n\nDelete database\n\n\nDelete Table\n\n\nCreate database\n\n\nCreate Table\n\n\nList table\n\n\nList database\n\n\nGet all documents\n\n\nInsert table data\n\n\nUpdate all table data\n\n\nUpdate by id\n\n\nDelete table data by id\n\n\nDelete all table data\n\n\nGet document from primary key\n\n\n:::info\nNOTE: Name field in all operation is database name if not given will take the default database used for connection.",
    "tag": "tooljet"
  },
  {
    "title": "OpenAPI",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/openapi.md",
    "content": "\nid: openapi\ntitle: OpenAPI\n\nOpenAPI\nToolJet has a data source for generating REST API operations from OpenAPI Specs.\nConnection\n\n\nConnections are generated from OpenAPI specifications. Currently supports Basic Auth, API Key, Bearer Token, OAuth 2.0\n\n\nAlso supports specifications with multiple authentications\n\n\nRead more \nQuerying OpenAPI\n\nOperations will be generated from specifications and each one will be different from other  \n\nCommon fields\n\nHost (Base URL)\n\nSome specs can have one or more base URLs/servers and specific operations may have separate Base URLs. So you can select the URL from the host select",
    "tag": "tooljet"
  },
  {
    "title": "MongoDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/mongodb.md",
    "content": "\nid: mongodb\ntitle: MongoDB\n\nMongoDB\nToolJet can connect to MongoDB to read and write data.\nConnection\nPlease make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nTo add a new MongoDB, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select MongoDB from the modal that pops up.\nToolJet requires the following to connect to your MongoDB.\n\nHost\nPort\nUsername\nPassword\n\nIt is recommended to create a new MongoDB user so that you can control the access levels of ToolJet.\n\nClick on 'Test connection' button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on 'Save' button to save the data source.\nQuerying MongoDB\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. Select the operation that you want to perform and click 'Save' to save the query.\n\nClick on the 'run' button to run the query. NOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\n\nList Collections\nFind One\nFind Many\nTotal Count\nCount\nDistinct\nInsert One\nInsert Many\nUpdate One\nUpdate Many\nReplace One\nFind One and Update\nFind One and Replace\nFind One and Delete\nAggregate\nDelete One\nDelete Many\nBulk Operations\n\nList Collections\nReturns list of collections\nFine One\nReturn a document which satisfy the given filter and options. Reference\nFine Many\nReturn list of documents which satisfy the given filter and options. Reference\nTotal Count\nReturns an estimation of the number of documents in the collection based on collection metadata. Reference\nCount\nReturns the number of documents based on the filter. Reference\nDistinct\nRetrieve a list of distinct values for a field based on the filter. Reference\nInsert One\nInsert a document. Reference\nInsert Many\nInsert list of documents. Reference\nUpdate One\nUpdate a document based on the filter. Reference\nUpdate Many\nUpdate many documents based on the filter. Reference\nReplace One\nReplace a document based on filter. Reference\nFind One and Update\nIf your application requires the document after updating, use this instead of `Update One`. Reference\nFind One and Replace\nIf your application requires the document after updating, use this instead of `Replace One`. Reference\nFind One and Delete\nIf your application requires the document after deleting, use this instead of `Delete One`. Reference\nAggregate\nAggregation operations are expressions you can use to produce reduced and summarized results. Reference\nDelete One\nDelete a record based on the filter. Reference\nDelete Many\nDelete many records based on the filter. Reference\nBulk Operations\nPerform bulk operations. Reference\nDynamic Quries\n```javascript\n{ amount: { $lt: '{{ components.textinput1.value }}' }}\n// Dates \n// supported: Extended JSON syntax\n{ createdAt: { $date: '{{ new Date('01/10/2020') }}'} }\n// not supported: MongoDB classic syntax\n{ createdAt: new Date('01/10/2020') }\n```",
    "tag": "tooljet"
  },
  {
    "title": "n8n",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/n8n.md",
    "content": "\nid: n8n\ntitle: n8n\n\nn8n\nToolJet can trigger n8n workflows using webhook URLs. Please refer this to know more about n8n.\nConnection\nGo to the data source manager on the left sidebar and click on `+` button to add new data source. Select n8n from the list of available data sources in the modal that pops-up.\nn8n webhooks can be called with or without an Authentication. You can keep the `Authentication type` as `none` if your webhook didn't have one or if it has one then you can choose the one from the dropdown and provide credentials:\nAuthentication Types\n\nBasic Auth: To connect your n8n webhooks using basic auth you'll need to provide the following credentials:\nUsername\nPassword\n\n\n\n\n\n\n\nHeader Auth: To connect your n8n webhooks using header auth the following fields are required:\nName / Key\nValue\n\n\n\n\n\n\n:::tip\nWebhook credentials and instance credentials are different. Please use the credentials that you use with the webhook trigger. Know more: Webhook Authentication.\n:::\nTrigger Workflow\nClick on `+` button of the query manager at the bottom panel of the editor and the select n8n as the datasource.\nYou can trigger a workflow with `GET/POST` URL. Choose the request type from the `Methods` dropdown and then provide the required fields:\n  - URL parameters (Support for GET & POST) `Optional`\n  - Body (Only for POST URL) `Required`\n",
    "tag": "tooljet"
  },
  {
    "title": "Airtable",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/airtable.md",
    "content": "\nid: airtable\ntitle: Airtable\n\nAirtable\nToolJet can connect to your Airtable account to read and write data. Airtable API key is required to create an Airtable data source on ToolJet. You can generate API key by visiting Airtable account page. \n\n:::info\nAirtable API has a rate limit, and at the time of writing this documentation, the limit is five(5) requests per second per base. You can read more about rate limits here Airtable API.\n:::\n:::tip\nThis guide assumes that you have already gone through Adding a data source tutorial.\n:::\nSupported queries\n\nListing records\nRetrieving a record\nCreating a record\nUpdating a record\nDeleting a record\n\nListing records\nThis query lists all the records in a table. The results are paginated and each page can have up to 100 records. \nRequired parameters:\n\nBase ID: To find the Base ID, first visit airtable.com/api. Select from the list of bases the base whose ID you'd like to find out. Example Base ID: `appDT3UCPffPiSmFd`\nTable name: Enter the table name whose data you want to fetch.\n\nOptional parameters:\n\nPage size: The number of records returned in each request. Must be less than or equal to 100. Default is 100.\noffset: If there are more records, the response will contain an offset. To fetch the next page of records, include offset in the next request's parameters.\n\n\nExample response from Airtable: \n`json\n{\n    \"records\": [\n        {\n            \"id\": \"recu9xMnUdr2n2cw8\",\n            \"fields\": {\n                \"Notes\": \"sdfdsf\",\n                \"Name\": \"dsfdsf\"\n            },\n            \"createdTime\": \"2021-05-12T14:30:33.000Z\"\n        },\n        {\n            \"id\": \"recyIdR7bVdQvmKXa\",\n            \"fields\": {\n                \"Notes\": \"sdfdsf\",\n                \"Name\": \"dfds\"\n            },\n            \"createdTime\": \"2021-05-12T14:30:33.000Z\"\n        },\n        {\n            \"id\": \"recAOzdIHaRpvRaGE\",\n            \"fields\": {\n                \"Notes\": \"sdfsdfsd\",\n                \"Name\": \"sdfdsf\"\n            },\n            \"createdTime\": \"2021-05-12T14:30:33.000Z\"\n        }\n    ],\n    \"offset\": \"recAOzdIHaRpvRaGE\"\n}`\nRetrieving a record\nRequired parameters:\n\nBase ID\nTable name \nRecord ID\n\n\nExample response from Airtable: \n`json\n{\n    \"id\": \"recu9xMnUdr2n2cw8\",\n    \"fields\": {\n        \"Notes\": \"sdfdsf\",\n        \"Name\": \"dsfdsf\"\n    },\n    \"createdTime\": \"2021-05-12T14:30:33.000Z\"\n}`\nCreating a record\nRequired parameters:\n\nBase ID\nTable name\nRecords\n\n\nExample Records:\n```json\n[\n    {\n        \"fields\": {\n            \"Notes\": \"sdfdsf\",\n            \"Name\": \"dsfdsf\"\n        }\n    },\n    {\n        \"fields\": {\n            \"Notes\": \"note1\",\n            \"Name\": \"dsfdsf\"\n        }\n    }\n]\n```\nClick on the `run` button to run the query.\n:::info\nNOTE: Query must be saved before running.\n:::\nExample response from Airtable:\n`json\n{\n    \"records\": [\n        {\n            \"id\": \"rec5RuZ1COoZGtGDY\",\n            \"fields\": {\n                \"Notes\": \"sdfdsf\",\n                \"Name\": \"dsfdsf\"\n            },\n            \"createdTime\": \"2022-02-07T20:25:27.000Z\"\n        },\n        {\n            \"id\": \"recaYbFPonNNu6Cwj\",\n            \"fields\": {\n                \"Notes\": \"note1\",\n                \"Name\": \"dsfdsf\"\n            },\n            \"createdTime\": \"2022-02-07T20:25:27.000Z\"\n        }\n    ]\n}`\nUpdating a record\nRequired parameters:\n\nBase ID\nTable name\nRecord ID\n\n\nExample body:\n\n\n\nClick on the `run` button to run the query.\n:::info\nNOTE: Query must be saved before running.\n:::\nExample response from Airtable:\n`json\n{\n    \"id\": \"recu9xMnUdr2n2cw8\",\n    \"fields\": {\n        \"Notes\": \"Example Notes\",\n        \"Name\": \"change\"\n    },\n    \"createdTime\": \"2021-08-08T17:27:17.000Z\"\n}`\nDeleting a record\nRequired parameters:\n\nBase ID\nTable name\nRecord ID\n\n\nClick on the `run` button to run the query.\n:::info\nNOTE: Query must be saved before running.\n:::\nExample response from Airtable:\n```json\n{\n    deleted: true\n    id: \"recIKsyZgqI4zoqS7\"\n}",
    "tag": "tooljet"
  },
  {
    "title": "Cosmosdb",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/cosmosdb.md",
    "content": "\nid: cosmosdb\ntitle: CosmosDB\n\nCosmosdb\nToolJet can connect to CosmosDB databases to read and write data. \nConnection\nTo add a new Azure Cosmos DB, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select CosmosDB from the modal that pops up.\nToolJet requires the following to connect to your Cosmos DB.\n\nCosmos DB Account End point\nCosmos DB Account Key\n\n:::info\nAzure Cosmos DB End point is the URL of the Cosmos DB service.\nAzure Cosmos DB Key is the key that is used to access the Cosmos DB service.\nYou can find the endpoint and key in the Azure Portal.\n:::\n\n\n![ToolJet - Data source - CosmosDB](/img/datasource-reference/cosmosdb/cosmosdb-connect.png)\n\n\nSupported queries:\n\nListing databases\nListing containers\nInserting item(s)\nRetrieving an item\nDeleting an item\nQuerying documents\n\nListing databases\nThis query lists all the databases in a Cosmos DB.\nListing containers\nThis query lists all the containers of a database in a Cosmos DB.\n| Fields      | description |\n| ----------- | ----------- |\n| database    | id of the database |\nInserting item(s)\nThis query inserts one or more items in a container of a database in a Cosmos DB.\n| Fields      | description |\n| ----------- | ----------- |\n| database    | id of the database |\n| container   | id of the container |\n| items       | items to be inserted. Example: `{{[{name: \"one\", val: 1}, {name:\"two\", val: 2}]}}` |\nRetrieving an item\nTo read a single item from a container of a database in a Cosmos DB, use the following query.\n| Fields      | description |\n| ----------- | ----------- |\n| database    | id of the database |\n| container   | id of the container |\n| item        | id of the item |\nDeleting an item\nTo delete an item from a container of a database in a Cosmos DB, use the following query.\n| Fields      | description |\n| ----------- | ----------- |\n| database    | id of the database |\n| container   | id of the container |\n| item        | id of the item |\nQuerying documents\nTo query documents from a container of a database in a Cosmos DB using SQL-like syntax, use the following query.\n| Fields      | description |\n| ----------- | ----------- |\n| database    | id of the database |\n| container   | id of the container |",
    "tag": "tooljet"
  },
  {
    "title": "run-py.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/data-sources/run-py.md",
    "content": "\nid: run-py\ntitle: Run Python code\n\nYou can write custom Python code to interact with components and queries. To do that, you just need to create a new query and select Run Python Code from the available datasources.\n\n\n\nExample: Using Python code to trigger component specific actions\n\nLet's drag a button and a text widget onto the canvas. We will set a text on the text component and trigger button click event from the Python query.\nClick on the `+` on the query panel to create a query and select Run Python code from the available datasources\n\nLet's write the code in Python Editor and save the query:\n```python\nclass Person:\n  def init(self, name, age):\n    self.name = name\n    self.age = age\ndef myfunc(self):\n    return \"Hello my name is \" + self.name\np1 = Person(tj_globals.currentUser.firstName, 36)\ncomponents.text1.setText(p1.myfunc())\ncomponents.button1.click()\n```\n- The code above has a function`myfunc`which returns a string and we using the component specific action to set the **text component**'s value from the Python query. We are also triggering the button click using`components.button1.click()`\n\n\n:::tip\n- ToolJet's global variables can be accessed using tj_globals. ex: `tj_globals.currentUser.firstName`\n- As of now, Run Python code only supports the Python standard library only.\n:::\n\nLet's edit the properties of widgets:\nAdd an event handler to the button - Select On Click event, Show alert action, and set a success message `Triggered using RunPy`. This will show a success alert popup whenever the button click event is triggered from the Python code.\nFor the text component, we don't have to edit any property since we are changing the value directly from the Python code.\n\n\n\n\n\n\nYou can also write custom Python code to get the data from External APIs and manipulate the response for graphical representation. \n:::info\nIssues with writing custom Python code? Ask in our Slack community.",
    "tag": "tooljet"
  },
  {
    "title": "Role-Based Access Control (RBAC) Glossary",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/org-management/permissions.md",
    "content": "\nid: permissions\ntitle: Permissions\n\nPermissions allow you to create and share resources to easily ensure what level of access each User has to ToolJet Apps and other resources.\nAdmins can invite Users to their workspaces and assign them to the Groups that have Permissions to access Apps, folders, or workspace variables. \n:::info\nSee Manage Users and Groups to learn how to invite users to ToolJet.\n:::\nRole-Based Access Control (RBAC) Glossary\n\nUsers - Users can be added to more than one or more Groups. Each User is associated with an email.\nGroups - By default, there are two groups: All Users and Admin. Additionally, you can create custom groups like Support, Engineering, etc.\nAll Users - Contains all the users in your workspace. When New Users are invited they are added to this group by default. \nAdmins - Contains all Admins in your workspace. Everyone added to this group will Permission to access all the ToolJet resources.\n\n\nApps, Folder, Workspace Variables - Resources that Admins can set permissions on.\n",
    "tag": "tooljet"
  },
  {
    "title": "Color Picker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/color-picker.md",
    "content": "\nid: color-picker\ntitle: Color Picker\n\nColor Picker\nColor Picker widget is used to select the desired color from the color picker\n\n\n\nProperties\nDefault Color\nThe data needs to be an valid hex color\n\nOne can change default color either from color picker or using fx (need to provide only respective hex value)\n\nExample:\n`json\nValid color : #000000 or #000\nInvalid Color : #0000, \"black\" , rgb(0,0,0) ,`\n\n\n\nEvents\nTo add an event to a color-picker component, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on + Add handler.\n\n\n\nOn change\nOn change event is triggered when the color is changed on the color-picker.\nLayout\n| Layout          | description                               | Expected value                                                                                                |\n| --------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display mobile view.  | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n| Style      | Description                                                                                                                                                                                                                                              |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |\n| setColor | Set the  color. | `color` eg - `#ffffff` |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nExample: Selecting/changing color from the color picker and getting respective hex, rgb and rgba value of selected color\n\nLet's start by creating a new app and then dragging the Color Picker  widget onto the canvas.\nClick on the Color Picker widget, a picker pop-up will appear, one can select desired color from the picker.\nIn order to close the appeared picker pop-up, one need's to move away mouse from the picker pop-up and picker pop-up will fade away.\nIn the Inspector, inside component, look for colorpicker, where one can get respective hex, rgb and rgba color\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Text",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/text.md",
    "content": "\nid: text\ntitle: Text\n\nText\nText widget can be used to display text.\n:::info\nUsers cannot enter and edit text.\n::: \nHow To Use Text Widget\n\nProperties\nText\nThis property sets the content/text inside the Text widget. Refer your query data with dynamic variables `{{queries.datasource.data.text}}` or populate it with sample values `Text goes here !`.\nShow loading state\nToggle `on` or `off` to show or hide the loading state. You can also click on the `Fx` next to it to set the value `{{true}}` and `{{false}}` dynamically. Shows a loading status if the value is `true`. This property is often used with the `isLoading` property of queries so that the table shows a spinner while the query is being run. Default value is `false`.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n| Style      | Description |\n| ----------- | ----------- | \n| Font Weight | You can change the font weight of the text in following ways: normal (default), bold, lighter, bolder |\n| Text Decoration | You can change the text decoration in following ways : none(default), overline, line-through, underline, overline underline |\n| Text Transformation | You can transform the text in following ways: none (default), uppercase, lowercase, capitalize |\n| Font Style | You can change the font style in following ways: normal(default), italic, oblique |\n| Line Height | You can change the line height by providing number as input (example - 1.5) |\n| Text Indent | You can change the text indent by providing the number as input (example - 10) |\n| Letter Spacing | You can change the letter spacing by providing the number as input  (example - 2) |\n| Word Spacing  | You can change the letter spacing by providing the number as input  (example - 2) |\n| Font Variant | You can change the font variant of the text in the following ways: normal (default), small-caps, initial, inherit |\n| Text Size | By default, the text size is set to 14. You can enter any value from 1-100 to set custom text size. |\n| Background Color | You can change the background color of the text component by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Text Color |  You can change the color of the text by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Align Text | You can align the text inside the widget in following ways: left, right, center, justified |\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Code Editor",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/code-editor.md",
    "content": "\nid: code-editor\ntitle: Code Editor\n\nCode Editor\nCode Editor widget is a versatile text editor for editing code and supports several languages. \n\n\n\nProperties\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\n\n\n\n| properties      | description | Expected value |\n| ----------- | ----------- | ----------------- |\n| Placeholder |  It specifies a hint that describes the expected value.| This field requires a `String` value |\n| Mode |  It is used to specify the language to be used for the code-editor.| See `info` below for the list of all supported languages |\n| Show Line Number |  This property is used to show or hide line numbers to the left of the editor.| This fields expects a boolean value `{{true}}` or `{{false}}` |\n:::info\n\nSupporting all commonly used languages.\n\nAPL\nASN.1\nAsterisk dialplan\nBrainfuck\nC, C++, C#\nCeylon\nClojure\nClosure Stylesheets (GSS)\nCMake\nCOBOL\nCoffeeScript\nCommon Lisp\nCrystal\nCSS\nCypher\nCython\nD\nDart\nDjango (templating language)\nDockerfile\ndiff\nDTD\nDylan\nEBNF\nECL\nEiffel\nElixir\nElm\nErlang\nFactor\nFCL\nForth\nFortran\nF#\nGas (AT&T-style assembly)\nGherkin\nGo\nGroovy\nHAML\nHandlebars\nHaskell\nHaxe\nHTML embedded (JSP, ASP.NET)\nHTML mixed-mode\nHTTP\nIDL\nJava\nJavaScript (JSX)\nJinja2\nJulia\nKotlin\nLESS\nLiveScript\nLua\nMarkdown (GitHub-flavour)\nMathematica\nmbox\nmIRC\nModelica\nMscGen\nMUMPS\nNginx\nNSIS\nN-Triples/N-Quads\nObjective C\nOCaml\nOctave (MATLAB)\nOz\nPascal\nPEG.js\nPerl\nPGP (ASCII armor)\nPHP\nPig Latin\nPowerShell\nProperties files\nProtoBuf\nPug\nPuppet\nPython\nQ\nR\nRPM\nreStructuredText\nRuby\nRust\nSAS\nSass\nSpreadsheet\nScala\nScheme\nSCSS\nShell\nSieve\nSlim\nSmalltalk\nSmarty\nSolr\nSoy\nStylus\nSQL (several dialects)\nSPARQL\nSquirrel\nSwift\nsTeX, LaTeX\nTcl\nTextile\nTiddlywiki\nTiki wiki\nTOML\nTornado (templating language)\ntroff (for manpages)\nTTCN\nTTCN Configuration\nTurtle\nTwig\nVB.NET\nVBScript\nVelocity\nVerilog/SystemVerilog\nVHDL\nVue.js app\nWeb IDL\nWebAssembly Text Format\nXML/HTML\nXQuery\nYacas\nYAML\nYAML frontmatter\nZ80\n\n\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout  | description |\n| ----------- | ----------- |\n| Show on desktop | Toggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on Fx to set the value `{{true}}` or `{{false}}`. |\n| Show on mobile | Toggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on Fx to set the value `{{true}}` or `{{false}}`. |\nStyles\n\n\n\n| Styles  | description | \n| ----------- | ----------- |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`. |\n| Disable | This is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |",
    "tag": "tooljet"
  },
  {
    "title": "Datepicker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/datepicker.md",
    "content": "\nid: datepicker\ntitle: Datepicker\n\nDatepicker\nThe Datepicker widget allows users to select a single value for date and time from a pre-determined set.\n\n\n\nHow To Use Datepicker Widget\n\nEvents\nTo add an event to a date-picker component, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on + Add handler.\nOn select\nOn select event is triggered when an date is selected.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\nDefault value\nThis value acts as placeholder for the date picker widget, if any value is not provided then the default value will be used from the picker. The default value needs to be a `String` with respect to the `format` field. Ex: If format is set to `MM/YYYY` then provide default value as `04/2022`.\nFormat\nThe format of the date selected by the date picker. Default date format is DD/MM/YYYY. Date format should be followed as ISO 8601 as mentioned in the moment documentation. This field requires a `String` input. Ex: `DD/MM`, `MM/YYYY`, `YY/MM`, `DD/MM/YYYY` etc.\nEnable time selection?\nToggle on or off to enable the time selection. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nEnable date selection?\nToggle on or off to enable the date selection. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nDisabled dates\nWe can give disabled dates property which will make specific dates disabled and cannot be selected. The default value needs to be an array of`Strings`.\nExample for disabling the 9th of January:\n`js\n{{['09-01']}}`\nNow user won't be able to select the mentioned date since it will be disabled. \nValidation\nCustom Validation\nAdd a validation for the date input in the widget using the ternary operator.\nExample of validation for selecting dates that are after the current date:\n`js\n{{moment(components.datepicker1.value, 'DD/MM/YYYY').isAfter(moment()) ? true : 'Date should be after today'}}`\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nBorder Radius\nUse this property to modify the border radius of the date-picker. The field expects only numerical value from `1` to `100`, default is `0`. \n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Modal",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/modal.md",
    "content": "\nid: modal\ntitle: Modal\n\nModal\nModal widget renders in front of a backdrop, and it blocks interaction with the rest of the application until the modal is closed. It can be used to add dialog boxes to your app for lightboxes, user notifications, forms, etc.\n\n\n\nHow To Use Modal Widget\n\nAdd widgets to Modal\nTo add widgets to the Modals please refer to Tutorial - Adding widgets to a modal\nProperties\nTitle\nTitle that should be shown on the header of the modal. \nLoading State\nLoading state can be used to show a spinner on the modal content. Loading state is commonly used with isLoading property of the queries to show a loading status while a query is being run. Enable the toggle On or click on `fx` to programmatically set the value `{{true}}` or `{{false}}` .\nHide title bar\nEnabling this option hides the title bar in the modal. The value `{{true}}` or `{{false}}` can be set programmatically by clicking on the `Fx` button next to it.\nHide close button\nEnabling this option hides the close button in the modal. The value `{{true}}` or `{{false}}` can be set programmatically by clicking on the `Fx` button next to it.\nHide on escape\nEnabling this option closes the modal(opened) whenever the escape key is pressed. The value `{{true}}` or `{{false}}` can be set programmatically by clicking on the `Fx` button next to it. This property is enabled by default.\n:::info\nNow hide the modal by simply clicking anywhere outside the modal (for preview or released apps).\n:::\nModal size\nSize of the modal. Options are `medium`, `small` and `large`. The default is `small`. You can also programmatically configure the value by clicking on the `Fx` and set the value to `sm`, `md` or `lg`.\nOptions\nUse default trigger button\nThe default trigger button is enabled by default, this button can be used to show the modal. The value `{{true}}` or `{{false}}` can be set programmatically by clicking on the `Fx` button next to it.\n:::info\nA modal can be triggered using the default trigger button, action or via JavaScript.\n:::\nTrigger button label\nIt can be used to set the label of the trigger button.\nEvents\nModal supports the following two events:\n- On open\n- On close\n:::info\nJust like any other event on ToolJet, you can set multiple handlers for the events supported by Modal. Check all the actions here.\n:::\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n| Style      | Description | value |\n| ----------- | ----------- | ------ |\n| Header background color | Change the background color of the header in modal | Enter the Hex color code or choose a color of your choice from the color picker |\n| Header title color | Change the color of the Title in modal | Enter the Hex color code or choose a color of your choice from the color picker |\n| Body background color | Change the background color of the body in modal | Enter the Hex color code or choose a color of your choice from the color picker |\n| Visibility | Toggle on or off to control the visibility of the default trigger button that comes with modal | You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the button will not visible after the app is released. By default, it's set to `{{true}}`. |\n| Disable | Toggle on to disable the default trigger button that comes with modal | You can programmatically change its value by clicking on the `Fx` button next to it, if set to `{{true}}`, the button will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Trigger button background color | Change the background color of the default trigger button of modal | Enter the Hex color code or choose a color of your choice from the color picker |\n| Trigger button text color | Change the color of the label in default trigger button of modal | Enter the Hex color code or choose a color of your choice from the color picker |\n:::info\nTrigger Button styles are only visible when Use default trigger button under Options is toggled on.",
    "tag": "tooljet"
  },
  {
    "title": "Components : Overview",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/overview.md",
    "content": "\nid: overview\ntitle: Overview\n\nComponents : Overview\nComponents are used to build the UI of the applications. They can be dragged onto the canvas from the Component Library and can be modified from the Properties Panel without needing to write any code. Event Handlers in Components allow end users to trigger queries and other application events to perform the Actions.\nAdding components\nComponents can be dragged and dropped from the Component Library(from the right side on app builder) on to the canvas. Components can be moved by simply click and hold, and can be resized from edges or borders.\n\n\n\nSelect multiple components\nFor moving the multiple components at once, simply shift+click, to select multiple components. Once grouped, the components can be moved on the canvas while maintaining their relative positions.\n\n\n\nYou can also create a selection triangle and move multiple components together by `click and drag`\n\n\n\n:::tip\nYou can also use many other Keyboard Shortcuts in ToolJet to copy, cut, paste components to the canvas.\n:::\nComponent properties\nEach Component can be modified and styled from the Properties Panel such as the data field, a toggle for disabling the component, or stylings like a background color. Properties can be modified directly or programmatically by using Bindings, which enables you to write JavaScript code.\n\n\n\nComponent Event Handlers\nEvent Handlers can be found in the Component's Property Panel or in the Advanced section of the Query. Event handlers can be used to trigger the queries, perform Component Specific Actions - CSA or for setting a variable.\n:::info Actions\nCheck all the available Actions here.\n:::\n\n\n\nBindings\nBindings allow you to get dynamic data into the components. Anything inside of `{{}}` is evaluated as a JavaScript expression in ToolJet.\nAny arbitrary JavaScript code can be written inside `{{}}`:\n`js\n{{(function () {\n        <your_javascript_code_here>\n    })()\n}}`\nor\n`js\n{{components.xyz.data.key === Sun ?? true : false}}`\n:::tip\nCheck out the How-to guides like changing color of text in table column, Enable/Disable a component using JavaScript, and more.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Calendar",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/calendar.md",
    "content": "\nid: calendar\ntitle: Calendar\n\nCalendar\nCalendar widget comes with the following features:\n- Day, month and week level views\n- Events\n- Resource scheduling\n\n\n\nProperties\nDate format\nDetermines the format in which any date passed to the calendar via any of the properties will be parsed. It also determines the format in which any date made available by the calendar via exposed variables will be displayed. It uses the date format conventions of moment.js. The default Date format is set to `MM-DD-YYYY HH:mm:ss A Z`.\nDefault date\nDetermines the date on which the calendar's view will be centered on. By default, the default date is set to the current date using moment.js i.e. `{{moment().format(\"MM-DD-YYYY HH:mm:ss A Z\")}}`. If the calendar is on `month` view, it will show the month on which this date exists. If the calendar is on `week` view, it will show the week on which this date exists. This property needs to be formatted using the `Date format` property which is configurable on the inspector.\nEvents\n`Events` property should contain an array of objects, each of which describes the events that the calendar needs to display.\nAssuming that you set the date format to `MM-DD-YYYY HH:mm:ss A Z`, setting the `Events` property to the following code snippet will display an event titled `Sample Event` at the first hour of this day, as displayed in the image of calendar at the beginning of this page.\n`javascript\n{{[\n  {\n      title: 'Sample event',\n      start: `${moment().startOf('day').format('MM-DD-YYYY HH:mm:ss A Z')}`,\n      end: `${moment().endOf('day').format('MM-DD-YYYY HH:mm:ss A Z')}`,\n      allDay: false,\n      tooltip: 'Sample event',\n      color: 'lightgreen',\n  }\n]}}`\nEvent object properties\n| Name | Description |\n|------|-------------|\n| title | Title of the event |\n| start | The date(and time) on which this event begins. Needs to be formatted in the `Date format` you've supplied |\n| end | The date(and time) on which this event ends. Needs to be formatted in the `Date format` you've supplied |\n| allDay | Optional. Qualifies the event as an 'All day event', which will pin it to date headers on `day` and `week` level views |\n| tooltip | Tooltip which will be display when the user hovers over the event |\n| color | Background color of the event, any css supported color name or hex code can be used |\n| textColor | Color of the event title, any css supported color name or hex code can be used |\n| textOrientation | Optional. If it is set to `vertical`, the title of the event will be oriented vertically. |\n| resourceId | Applicable only if you're using resource scheduling. This is the id of the resource to which this event correspond to. |\nYou may supply any other additional property to the event(s). These additional properties will available to you when the calendar widget\nexposes any of the events via its exposed variables.\nResources\nSpecifying resources will make the calendar categorize `week` view and `day` view for each of the resources specified.  \nFor example, to categorize week/day view into for three rooms, we specify `resources` this way:\n`javascript\n{{[\n    {resourceId: 1, title: 'Room A'},\n    {resourceId: 2, title: 'Room B'},\n    {resourceId: 3, title: 'Room C'},\n  ]}}`\nIf we specify the `resourceId` of any of the events as `1`, then that event will be assigned to `Room A`, generating the following calendar, assuming that we've set the view to `day` and are viewing the day on which this event exists.\n\n\n\nDefault view\nDetermines whether the calendar would display a `day`, a `week` or a `month`. Setting this property to anything other than these values will make the calendar default to `month` view.\nThe view that is currently selected will be exposed as the variable `currentView`.\nStart time on week and day view\nThis determines the time at which week view and day view cells begins. Keep in mind that this field accepts a date, but still only the time and timezone(if provided) are taken from this date. The date should be provided in the date format chosen by you in the first property field.\nEnd time on week and day view\nThis determines the time at which week view and day view cells ends. Keep in mind that this field accepts a date, but still only the time and timezone(if provided) are taken from this date. The date should be provided in the date format chosen by you in the first property field.\nShow toolbar\nDetermines whether the calendar toolbar should be displayed or not. Click on `Fx` button to programmatically determine the field value to `{{true}}` or `{{false}}`.\nShow view switcher\nDetermines whether the calendar's buttons that allow user to switch between `month`, `week` and `day` level views will be displayed. Click on `Fx` button to programmatically determine the field value to `{{true}}` or `{{false}}`.\nHighlight today\nDetermines whether the today's card on the calendar should be highlighted or not. Click on `Fx` button to programmatically determine the field value to `{{true}}` or `{{false}}`.\nShow popover when the event is clicked\nDetermines whether to display a popover whenever an event is clicked. Click on `Fx` button to programmatically determine the field value to `{{true}}` or `{{false}}`.\nEvents\n\n\n\nOn Event selected\nThis event is fired when the user clicks on a calendar event. \nLast selected event is exposed as `selectedEvent`.\non Slot selected\nThis event is fired when the user either clicks on an calendar slot(empty cell or empty space of a cell with event) or when they click and drag to select multiple slots.  \nLast selected slot(s) are exposed as `selectedSlots`.\nOn Date Navigate\nThis event is fired when the user clicks on `Today`, `Next` or `Back` buttons on the calendar. \nThe corresponding date to which the user navigated, will be exposed as `currentDate`.\nOn View Change\nThis event is fired when a different view is selected by the user. \nThe current view is exposed as `currentView`.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget. Under the General accordion,you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nCell size in views classified by resource\nWhen `resources` are specified, the calendar could take up quite a lot of horizontal space, making the horizontal scroll bar of calendar having to be relied upon all the time.  \nIf we set this property to `compact`, the cell sizes will be smaller in `week` and `day` views.\nHeader date format on week view\nThis format determines how the column header for each day in week view will be displayed. As with every other date format field in ToolJet, this follows the momentjs standard of date formatting. By default, its set to `DD MMM`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Text Input",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/text-input.md",
    "content": "\nid: text-input\ntitle: Text Input\n\nText Input\nText Input widget lets users enter and edit text.\n:::tip\nThe Text Input should be preferred when user input is a single line of text.\n:::\nHow To Use Text Input Widget\n\nProperties\nDefault value\nThe default value that the widget will hold when the app is loaded.\nPlaceholder\nIt specifies a hint that describes the expected value.\nEvents\n\n\n\nOn change\nThis event fires whenever the user types something on the text input.\nOn Enter Pressed\nThis event fires whenever the user presses the enter button on keyboard after entering some text on text input component.\nOn focus\nThis event fires whenever the user clicks inside the text input component.\nOn blur\nThis event fires whenever the user clicks outside the text input component.\n:::info\nCheck Action Reference docs to get detailed information about all the Actions.\n:::\nValidation\nRegex\nUse this field to enter a Regular Expression that will validate the password constraints.\nMin length\nEnter the number for a minimum length of password allowed.\nMax length\nEnter the number for the maximum length of password allowed.\nCustom validation\nIf the condition is true, the validation passes, otherwise returns a string that should be displayed as the error message. For example: `{{components.passwordInput1.value === 'something' ? true: 'value should be something'}}`.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nText Color\nUse this property to set the color of the text inside the text input component. You can select the color from the color picker or set the value using Hex color code.\nBorder color\nAdd a color to the border of the text-input component using this property. You can select the color from the color picker or set the value using Hex color code.\nBorder Radius\nUse this property to modify the border radius of the widget. The field expects only numerical values from `1` to `100`, and default is `0`. \nVisibility\nIt is to control the visibility of the widget. If `{{false}}` the widget will not be visible after the app gets deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will lock and become non-functional. By default, its value is set to `{{false}}`.\n:::info\nCheck the component specific actions available for this component here.",
    "tag": "tooljet"
  },
  {
    "title": "Map",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/map.md",
    "content": "\nid: map\ntitle: Map\n\nMap\nThe map widget can be used to pick or select locations on the Google map with the location's coordinates.\n\n\n\nExposed variables\nExposed variables can be used to get data from the widget.\n| variable      | description |\n| ----------- | ----------- |\n| bounds      | Viewport area of the map |\n| center      | It contains the locations' coordinates at the center of the bounding area |\n| markers     | A marker identifies a location on the map. `markers` contains the list of markers on the map |\n| selectedMarker | Object with the marker selected by the user |\nEvents\n| events      | description |\n| ----------- | ----------- |\n| On bounds change | Triggered when the bounding area is changed. This event is triggered after `bounds` variable is updated |\n| On create marker | This event is triggered when a new marker is created on the map |\n| On marker click | This event is triggered when any of the markers in the map is clicked |\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\n| properties      | description | Expected value |\n| ----------- | ----------- | ------------------ |\n| Initial location | It is the default location's coordinates that the map should focus on. | An object containing the latitude and langitude as key value pairs. ex: `{{ {\"lat\": 40.7128, \"lng\": -73.935242} }}` |\n| Default Markers | List of markers that should be shown on the map | An array of objects containing the coordinates. ex: `{{ [{\"lat\": 40.7128, \"lng\": -73.935242}] }}` | \n| Add new markers | This property should be enabled to add new markers to the map on click. | `On` by default, toggle `off` to disable adding new markers on the map. Can be programmatically configured by clicking on `Fx`, accepts values `{{true}}` or `{{false}}` |\n| Search for places | It can be used to show or hide auto-complete search box. | `On` by default, toggle `off` to disable search on the map. Can be programmatically configured by clicking on `Fx`, accepts values `{{true}}` or `{{false}}` |\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |",
    "tag": "tooljet"
  },
  {
    "title": "Container",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/container.md",
    "content": "\nid: container\ntitle: Container\n\nContainer\nContainers are used to group widgets together. You can move the desired number of widgets inside a container to organize your app better.\n\n\n\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers themouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout      | description |\n| ----------- | ----------- |\n| Show on desktop | This property have toggle switch. If enabled, the Container widget will display in the desktop view else it will not appear. This is enabled by default.|\n| Show on mobile | This property have toggle switch. If enabled, the Container wisget will display in the mobile view else it will not appear.|\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- |\n| Background Color |  You can change the background color of the Container by entering the `Hex color code` or choosing a color of your choice from the color picker. |\n| Border radius | Use this property to modify the border radius of the container. The field expects only numerical value from `1` to `100`, default is `0`. |\n| Border Color |  You can change the border color of the Container by entering the `Hex color code` or choosing a color of your choice from the color picker. |\n| Visibility | This is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`. |\n| Disable |  This property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Star rating",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/star-rating.md",
    "content": "\nid: star-rating\ntitle: Star rating\n\nStar rating\nStar rating widget can be used to display as well as input ratings. The widget supports half stars, and the number of stars can be set too.\n\n\n\nEvents\nOn Change\nThis event is triggered when a star is clicked.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\nLabel\nThe text to be used as the label for the star rating. This field expects a `String` value.\nNumber of stars\nInitial number of stars in the list on initial load. `default: 5`. This field expects an integer value.\nDefault no of selected stars\nThis property specifies the default count of stars that are selected on the initial load. `default: 5` (integer). This field expects an integer value.\nEnable half star\nToggle `on` to allow selection of half stars. `default: false` (bool). Click on `Fx` to programmatically define the value `{{true}}` or `{{false}}`.\nTooltips\nThis is used for displaying informative tooltips on each star, and it is mapped to the index of the star. `default: []` (array of strings ). Ex: `{{[\"bad\", \"okay\", \"good\", \"best\"]}}`\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nStar Color\nDisplay color of the star. `default: #ffb400` (color hex). Change color by providing `Hex color code` or choosing one from the picker.\nLabel color\nChange the color of label in widget by providing `Hex color code` or choosing one from the picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable",
    "tag": "tooljet"
  },
  {
    "title": "Form",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/form.md",
    "content": "\nid: form\ntitle: Form\n\nForm\nForm component can be used to get input from the user and store it in the connected datasource. Form component serves as a parent widget that can store different widgets like texts, input box, dropdown to allow selection, and a button for triggering the event.\n\n\n\nProperties\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| Button To Submit Form | The dropdown can be used to select the button that will be used as the submit button for the form | Any button that will be added as a child component inside the form component can be selected from the dropdown |\n| Loading state | Loading state can be used to show a spinner as the form content. Loading state is commonly used with isLoading property of the queries to show a loading status while a query is being run. | Switch the toggle On or click on `fx` to programmatically set the value `{{true}}` or `{{false}}`  |\n\n\n\nEvents\nTo add an event to a button group, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\nOn submit\nOn submit event is triggered when the button on the form component is clicked. Just like any other event on ToolJet, you can set multiple handlers for on submit event.\nOn invalid\nOn invalid event is triggered when the input on the form is invalid.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget. Under the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\nLayout\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to display mobile view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- | \n| Background color |  You can change the background color of the form by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Border radius | Use this property to modify the border radius of the form component. |\n| Border color |  You can change the color of the border of the form by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Visibility | Toggle on or off to control the visibility of the form. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n| Disable | Toggle on to lock the widget. You can programmatically change its value by clicking on the `Fx` button next to it, if set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Box shadow | This property adds a shadow to the widget. | You can use different values for box shadow property like offsets, blur, spread, and the color code. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Button",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/button.md",
    "content": "\nid: button\ntitle: Button\n\nButton\nButton widget can be used to take actions.\n\nProperties\nTo add an event to a button, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\nEvents\n\n\n\nOn click\nOn Click event is triggered when the button is clicked. \nOn hover\nOn hover event is triggered when the mouse cursor is moved over the button. Just like any other event on ToolJet, you can set multiple handlers for on click event.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\n\n\n\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| Button Text | It can be used to set the label of the button. | Any String value: `Send Message`, `Delete`, or `{{queries.xyz.data.action}}` |\n| Loading state | Loading state can be used to show a spinner as the button content. Loading state is commonly used with isLoading property of the queries to show a loading status while a query is being run. | Switch the toggle On or click on `fx` to programmatically set the value `{{true}}` or `{{false}}`  |\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to display mobile view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- | \n| Background color |  You can change the background color of the widget by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Text color |  You can change the color of the Text in button by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Loader color |  You can change the color of the loader in button by entering the Hex color code or choosing a color of your choice from the color picker. This will only be affective if the loading state property of the button is enabled. |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n| Disable | Toggle on to lock the widget. You can programmatically change its value by clicking on the `Fx` button next to it, if set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Border radius | Use this property to modify the border radius of the button. |\n| Border color | Add a color to the border of the button using this property. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Image",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/image.md",
    "content": "\nid: image\ntitle: Image\n\nImage\nImage widget is used to display images in your app.\n\n\n\nEvents\n\n\n\nOn click\nOn click event is triggered when an image is clicked.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\n\n\n\nURL\nEnter the URL of the image to display it on the widget.\nLoading state\nLoading state can be used to show a spinner as the image content. Loading state is commonly used with `isLoading` property of the queries to show a loading status while a query is being run. Switch the toggle On or click on `fx` to programmatically set the value `{{true}}` or `{{false}}`.\nAlternative text\nUsed for alt text of images.\nZoom buttons\nToggle this to enable zoom options inside image.\nRotate buttons\nToggle this on to enable rotate button in the image.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nBorder type\nChoose a border type for the image from available options:\n- None\n- Rounded\n- Circle\n- Thumbnail\nImage fit\nChoose a image fit - similar to object fit for the image from available options:\n- fill\n- cover\n- contain\n- scale-down\nBackground color\nAdd a background color to widget by providing the `HEX color code` or choosing the color of your choice from the color-picker.\nPadding\nAdds padding between the image and widget border. It accepts any numerical value from `0` to `100`.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Toggle Switch",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/toggle-switch.md",
    "content": "\nid: toggle-switch\ntitle: Toggle Switch\n\nToggle Switch\nThe toggle switch widget allows the user to change a setting between two states.\nThe Toggle switch widget should be used if we want to make a binary choice, such as turning something on or off or enable or disable.\nHow To Use Toggle Switch Widget\n\nProperties\nLabel\nThis property can be used to set a label for the switch. Default Label: Toggle label\nDefault status\nThe property is used to set the default status (enabled or disabled) of the toggle switch component when the app is loaded. By default, the checkbox component is set to `{{false}}`/disabled.\nEvent\nOn change\nThis event is triggered whenever the toggle switch is clicked.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nText color\nChange the color of the text in the widget by providig the `Hex color code` or choosing a color from the picker.\nToggle switch color\nChange the color of the toggle switch in the widget by providig the `Hex color code` or choosing a color from the picker.\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Date-range picker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/date-range-picker.md",
    "content": "\nid: date-range-picker\ntitle: Date-range picker\n\nDate-range picker\nThe date-range picker widget allows users to select a range of dates.\nHow To Use Date Range Picker Widget\n\nProperties\nDefault start date\nSet the start date to be selected by default in the widget\nDefault end date\nSet the start date to be selected by default in the widget\nFormat\nThe format of the date selected by the date picker. Default date format is DD/MM/YYYY. Date format should be followed as ISO 8601 as mentioned in the moment documentation.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nEvents\nDate range picker supports the following events:\nOn select\nThe On select event is triggered when the a start date and end date is selected on the picker. Just like any other event on ToolJet, you can set multiple handlers for on select event.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nBorder Radius\nUse this property to modify the border radius of the date range picker. The field expects only numerical value from `1` to `100`, default is `0`. \nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Filepicker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/file-picker.md",
    "content": "\nid: file-picker\ntitle: Filepicker\n\nFilepicker\nFilepicker widget allows the user to drag and drop files or upload files by browsing the filesystem and selecting one or more files in a directory.\n\n\n\n:::info\n File types must be a valid MIME type according to input element specification or a valid file extension.\nTo accept any/all file type(s), set `Accept file types` to an empty value.\n:::\n\n\n\n:::tip\nMIME type determination is not reliable across platforms. CSV files, for example, are reported as text/plain under macOS but as application/vnd.ms-excel under Windows.\n:::\nEvents\n\n\n\nOn file selected\nOn file selected event is triggered when one or more files are selected by the selector dialogue box.\nOn file loaded\nOn file loaded event is triggered when a file is loaded in the browser.\nOn file deselected\nOn file selected event can be triggered when one or more files are removed from the picker.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\nInstruction Text\nInstruction text can be set to give information on the file picker.\nUse Drop zone\nCreates a drag & drop zone. Files can be dragged and dropped to the \"drag & drop\" zone.\nUse File Picker\nOn clicking it invokes the default OS file prompt.\nPick multiple files\nAllows drag and drop (or selection from the file dialog) of multiple files. `Pick multiple files` is disabled by default.\nMax file count\nThe maximum accepted number of files The default value is `2`.\nAccept file types\nBy providing types, you can make the dropzone accept specific file types and reject the others.\nMax size limit\nMaximum file size (in bytes).\nMin size limit\nMinimum file size (in bytes).\n:::tip\nFiles can be accepted or rejected based on the file types, maximum file count, maximum file size (in bytes) and minimum file size (in bytes).\nIf `Pick multiple files` is set to false and additional files are dropped, all files besides the first will be rejected. \nAny file that does not have a size in the range of `Max size limit` and `Min size limit` will be rejected.\n:::\nOptions\n\n\n\nParse content\nParse the selected files, supports CSV, xls, and xlsx files.\nFile type\nIf Parse content is enabled, options to auto-detect files and parse content or parse selected file types.\n:::info\n- If Parse content option is toggled off, File Type option will not be available.\n- If the Parse content option is toggled on, it only parses the next file that is selected, not the already selected one.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nBorder Radius\nUse this property to modify the border radius of the filepicker widget. The field expects only numerical value from `1` to `100`, default is `0`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nActions\n| Action  | Description | Properties |\n| ----------- | ----------- | ------------ |",
    "tag": "tooljet"
  },
  {
    "title": "Range Slider",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/range-slider.md",
    "content": "\nid: range-slider\ntitle: Range Slider\n\nRange Slider\nRange sliders are widely used across different UIs. One of the main purposes is to filter, explore all the related content and available in the control and settings options.\n:::tip\nRange Sliders have \"Two handles\" option which allows user to select within a range.\n:::\n\n\n\nProperties\nMinimum value\nSet the minimum value for the slider. This field accepts any numerical value.\nMaximum value\nSet the maximum value for the slider. This field accepts any numerical value.\nValue\nSet the default value when the widget loads. This can be used to pre-fill the value based on your data and requirements.\nTwo handles\nThe slider will now have 2 dragging handles. It is used to define a range of values versus a single given value.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nLine color\nEnter the hexcode to set the default color for slider's track. \nHandle color\nEnter the hexcode to set the color for slider's handler. \nTrack color\nEnter the hexcode to set the color for slider's active portion on the track. \nVisibility\nSet the visivlity of the slider programmatically. The default value is `{{true}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Rich Text Editor",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/rich-text-editor.md",
    "content": "\nid: rich-text-editor\ntitle: Rich Text Editor\n\nRich Text Editor\nRich Text Editor can be used to enter and edit the text in HTML format.\nIt should be preferred for blog posts, forum posts or notes sections. The text is to be used as the label for the radio button.\n\n\n\nProperties\nPlaceholder\nIt specifies a hint that describes the expected value.\nDefault Value\nThe default value that the widget will hold when the app is loaded.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable",
    "tag": "tooljet"
  },
  {
    "title": "Checkbox",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/checkbox.md",
    "content": "\nid: checkbox\ntitle: Checkbox\n\nCheckbox\nCheckbox widget can be used for allowing the users to make a binary choice, e.g,. unselected or selected.\n:::info\nThe checkbox widget consists of a single checkbox input.\n:::\nHow To Use Checkbox Widget\n\nProperties\nLabel\nThe text is to be used as the label for the checkbox. This field expects a `String` input.\nDefault Status\nThe property is used to set the default status (enabled or disabled) of the checkbox widget when the app is loaded. By default, the checkbox component is set to `{{false}}`/disabled.\nEvents\nTo add an event to a checkbox component, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on + Add handler.\n\n\n\nOn check\nOn check event is triggered when checkbox input is checked.\nOn uncheck\nOn uncheck event is triggered when checkbox input is unchecked.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nText color\nChange the color of the Text in checkbox by entering the `Hex color code` or choosing a color of your choice from the color-picker. \nCheckbox color\nYou can change the color of the checkbox by entering the `Hex color code` or choosing a color of your choice from the color-picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |",
    "tag": "tooljet"
  },
  {
    "title": "Pagination",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/pagination.md",
    "content": "\nid: pagination\ntitle: Pagination\n\nPagination\nPagination enables the user to select a specific page from a range of pages. It is used to separate the content into discrete pages.\n:::tip\nYou can club pagination widget with the List View widget.\n:::\n\n\n\nProperties\nNumber of pages\nYou can use this to predefined the total number of pages. It is calculated by dividing the length of the data array that will be passed, by the data limit which is the number of posts we will show on each page. \nDefault page index\nIt is used to set and display the default page index when the app initially loads. You can also put a conditional logic to set its value as per your use case.\nEvent\nOn Page Change\nThis event is triggered whenever the user switches to another page index. You can explore various actions associated with this event as per app logic.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Circular Progress Bar",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/circular-progressbar.md",
    "content": "\nid: circular-progress-bar\ntitle: Circular Progress Bar\n\nCircular Progress Bar\nCircular progress bar widget can be used to show progress in a progress circle.\n\n\n\nProperties\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\n\n\n\n| properties  | description | Expected Value |\n| ----------- | ----------- | --------------- |\n| Text | We can set a text inside the progress circle.| It expects a `String`, you can also use js to dynamically update the text as the progress changes. |\n| Progress | It can be used to set the progress of the widget. | Progress should be an integer between 0 and 100.|\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout  | description |\n| ----------- | ----------- |\n| Show on desktop | Toggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on Fx to set the value `{{true}}` or `{{false}}`. |\n| Show on mobile | Toggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on Fx to set the value `{{true}}` or `{{false}}`. |\nStyles\n\n\n\n| properties      | description | Expected Value |\n| ----------- | ----------- | ------------------- |\n| Color | To define stroke color.| `HEX color code` or choose color from color-picker. |\n| Text color | To define color of the text inside circular progress bar.| `HEX color code` or choose color from color-picker. |\n| Text size | To define the size of the text | Value must between 0-100. |\n| Stroke width | To define the width of stroke | Value must between 0-100.|\n| Counter Clockwise | Whether to rotate progress bar in counterclockwise direction. | It accepts `{{true}}` and `{{false}}`, Default value is `false`.|\n| Circle ratio | To define ratio of the full circle diameter the progressbar should use. | It accepts numerical value and the default is `1`. |\n| Visibility | Toggle on or off to control the visibility of the widget. | You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nCircular progress bar widget uses react-circular-progress package. Check the repo for further more details about properties and styles.",
    "tag": "tooljet"
  },
  {
    "title": "Statistics",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/statistics.md",
    "content": "\nid: statistics\ntitle: Statistics\n\nStatistics\nStatistics can be used to display different statistical information.\n\n\n\nProperties\nPrimary value label\nThis property lets you add and remove primary value label.\nPrimary value\nThis property lets you add and remove primary value,the actual amount can be represented here.\nHide secondary value\nThis property lets you show/hide the secondary value from the statistics component. By default, this property is disabled. Toggle it on to hide the secondary value, you can also click on the `Fx` button next to it to dynamically set the value to `{{true}}` or `{{false}}`.\nSecondary value label\nThis property lets you add and remove secondary value label.\nSecondary value\nThis property lets you add and remove secondary value,the change in value can be represented here.\nSecondary sign display\nThis property lets you add and secondary sign either positive or negative,can be used to represent positive(increase) or negative(decrease) movement.Default value is positive.\nLoading state\nLoading state can be used to show a spinner on the statistics. Loading state is commonly used with `isLoading` property of the queries to show a loading status while a query is being run. Switch the toggle On or click on `fx` to programmatically set the value `{{true}}` or `{{false}}`.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nPrimary Label Colour\nYou can change the primary label color by entering the Hex color code or choosing a color of your choice from the color picker.\nPrimary Text Colour\nYou can change the primary text color of the primary label by entering the Hex color code or choosing a color of your choice from the color picker.\nSecondary Label Colour\nYou can change the secondary label color of the primary label by entering the Hex color code or choosing a color of your choice from the color picker.\nSecondary Text Colour\nYou can change the secondary text color of the primary label by entering the Hex color code or choosing a color of your choice from the color picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Table",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/table.md",
    "content": "\nid: table\ntitle: Table\n\nTable\nTables can be used for both displaying and editing data.\n\nTable data\n\n\n\nArray of objects to be displayed on the table. It is commonly used to display data from query (`{{queries.restapi1.data}}`). Table data expects an array of objects, example: \n`{{[{ id: 1, name: 'Sarah', email: 'sarah@example.com'}]}}`\nThe table component will auto-generate all the columns as soon as the expected table data(array of objects) is provided.\nColumns\n\n\n\nCell data types\nYou can define the cell types as per your table's data source using the following:\n\nString | Default: It is used to render the data for cell types: text or textarea,\nNumber: This cell type will only expect the numerical values and can be sorted in ascending or descending order\nBadge: It is a labeling component used to display data with badges for e.g status of a shipment\nMultiple badges: Similar to badge, used to display multiple data badges in the form of array of objects,\nTags: Used to display an array of objects in the form of tags, e.g status, levels, steps\nDropdown: When data is in the form of an array of options to be selected, e.g select priority\nRadio: Used to make a selection from a group of options, e.g select your salary-range\nMultiselect: Similar to dropdown but to collect multiple user inputs from a list of options,\nToggle switch: Allows a user to change a setting between two states, e.g select between Yes/No,\nDate picker: Allowing users to display and select dates, e.g delivery date\nImage: This cell type expects the URL of image and will display the image in the cell. It also has the option to style the image.\n\n:::info\nCheck this how-to guide on dynamically change the color of text in a row and column in the table.\n:::\nDisplaying Data\nThe data object should be an array of objects. Table columns can be added, removed, rearranged from the inspector. `key` property is the accessor key used to get data from a single element of a table data object. For example:\nIf the table data is:\n`js\n[\n    {\n        \"review\": {\n            \"title\": \"An app review\"\n        },\n    \"user\": {\n            \"name\": \"sam\",\n            \"email\": \"sam@example.com\"\n        },\n    }\n]`\nTo display email column, the key for the column should be `user.email`.\nSaving data\nEnable `editable` property of a column to make the cells editable. If a data type is not selected, `string` is selected as the data type.\nIf the data in a cell is changed, `changeSet` property of the table object will have the index of the row and the field that changed.\nFor example, if the name field of second row of example in the 'Displaying Data' section is changed, `changeSet` will look like this:\n`js\n{\n    2: {\n        \"name\": \"new name\"\n    }\n}`\nAlong with `changeSet`, `dataUpdates` property will also be changed when the value of a cell changes. `dataUpdates` will have the whole data of the changed index from the table data. `dataUpdates` will look like this for our example:\n`js\n[{\n    \"review\": {\n        \"title\": \"An app review\"\n    },\n    \"user\": {\n        \"name\": \"new name\",\n        \"email\": \"sam@example.com\"\n    },\n}]`\nIf the data of a cell is changed, \"save changes\" button will be shown at the bottom of the table. This button when clicked will trigger the `Bulk update query` event. This event can be used to run a query to update the data on your data source.\nValidation\nUnder column properties, expand the detailed view of a column type to access a toggle button called `make editable`. You can toggle it `ON` to apply the validations for each column respectively using the following.\nRegex\nUse this field to enter a Regular Expression that will validate the password constraints.\nMin length\nEnter the number for a minimum length of password allowed.\nMax length\nEnter the number for the maximum length of password allowed.\nCustom validation\nIf the condition is true, the validation passes, otherwise return a string that should be displayed as the error message. For example: `{{components.passwordInput1.value === 'something' ? true: 'value should be something'}}`\nAction buttons\n\n\n\nAction buttons will be displayed as the last column of the table. The styles of these buttons can be customised and `on click` actions can be configured. when clicked, `selectedRow` property of the table will have the table data of the row.\n| Property | Description |\n| -------- | ------------ |\n| Background color (Action Button) | Background color of the action button. |\n| Text color (Action Button) | Color of button-text of the action button. |\nOptions\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nServer-side pagination\nServer-side pagination can be used to run a query whenever the page is changed. Go to events section of the inspector and change the action for `on page changed` event. Number of records per page needs to be handled in your query. If server-side pagination is enabled, `pageIndex` property will be exposed on the table object, this property will have the current page index. `pageIndex` can be used to query the next set of results when page is changed.\nWhen Server-side pagination is enabled, you'll be able to set three other table properties:\n- Enable previous page button: When server-side pagination is enabled, this button is enabled by default. Toggle this off to disable the previous page button from the table.\n- Enable next page button: When server-side pagination is enabled, this button is enabled by default. Toggle this off to disable the next page button from the table.\n- Total records server side: Set a numerical value to display particular number of records.\nClient-side pagination\nClient-side pagination is enabled by default. When the client-side pagination is enabled(`{{true}}`), another property Number of rows per page will be shown that can be used to set the number of records per page. By default, the value is set to 10 and if it is disabled(`{{false}}`) then it will show all the records in the single page.\nServer-side search\nIf server-side search is enabled, `on search` event is fired after the content of `searchText` property is changed. `searchText` can be used to run a specific query to search for the records in your data source.\nShow download button\nShow or hide download button at the Table footer.\nHide/Show columns\nTable header has an option(Eye icon) to show/hide one or many columns on the table. \nShow filter button\nShow or hide filter button at the Table header. The following filters are available:\n- contains\n- does not contain\n- matches\n- does not match\n- equals\n- does not equal to\n- is empty\n- is not empty\n- greater than\n- greater than or equal to\n- less than\n- less than or equal to\nShow update buttons\nIt's enabled by default. Table footer will show two update buttons Save changes & Discard changes whenever a cell is edited. Toggle `off` to hide update buttons.\nBulk selection\nTo let the user select one or more rows from the current page of a table, enable 'Bulk selection' from the inspector. The values of selected rows will be exposed as `selectedRows`.\nHighlight selected row\nEnable this option to have the last selected(clicked on) row to be highlighted.\nDisable sorting\nEnable this option to lock the sorting of columns when clicked on column name.\nServer-side sort\nWhen Server-side sort is enabled, clicking on the column headers will not automatically sort the table, instead, the `Sort applied` event will be fired and the applied sorting will be exposed as `sortApplied`. You can use this data to run any query that feeds data to the table in a manner that reflects the sorting applied.\nServer-side filter\nWhen Server-side filter is enabled, applying filters will not automatically filter the table, instead, the `Filter changed` event will be fired and the applied filters will be exposed as `filters`. You can use this data to run any query that feeds data to the table in a manner that reflects the filters applied.\nShow search box\nIt can be used to show or hide Table Search box. Client-side search is enabled by default and server-side search can be enabled from the events section of the inspector. Whenever the search text is changed, the `searchText` property of the table component is updated. If server-side search is enabled, `on search` event is fired after the content of `searchText` property is changed. `searchText` can be used to run a specific query to search for the records in your data source.\nIf you don't wish to use the search feature altogether, you can disable it from the inspector.\nLoading state (Boolean)\nLoading state shows a loading skeleton for the table. This property can be used to show a loading status on the table while data is being loaded. `isLoading` property of a query can be used to get the status of a query.\nEvents\n\nRow hovered\nRow clicked\nSave changes\nCancel changes\nPage changed\nSearch\nSort applied\nCell value changed\nFilter changed\n\nRow hovered\nThis event is triggered when the mouse pointer is moved over a row in the table. The `hoveredRowId` exposed variable of the table will include the id of the latest hovered row and `hoveredRow` property of the table will have the data of the hovered row in the object format.\nRow clicked\nThis event is triggered when a table row is clicked. The `selectedRowId` exposed variable of the table will include the id of the selected row and the `selectedRow` property of the table object will have the table data of the selected row.\nSave changes\nIf any cell of the table is edited, the `save changes` button appears at the footer of the table. Save changes event is triggered when this button is clicked.\nCancel changes\nIf any cell of the table is edited, the `Discard changes` button appears at the footer of the table. Cancel changes event is triggered when this button is clicked.\nPage changed\nIf server-side pagination is enabled, this event is fired when the current page is changed. This event is triggered after updating the `pageIndex` variable.\nSearch\nThis event is triggered when a text is entered to the search input box of the table. `searchText` variable is updated before triggering this event.\nSort applied\nThis event is triggered when the column name header is clicked to apply sorting in `asc` or `desc`. The `sortApplied` variable is updated with an object having `column` and `direction` values.\nCell value changed\nIf any cell of the table is edited, the `cell value changed` event is triggered.\nFilter changed\nThis event is triggered when filter is added, removed, or updated from the filter section of the table. `filters` property of the table is updated to reflect the status of filters applied. The objects will have properties: `condition`, `value`, and `column`. \nExposed variables\n| variable      | description |\n| ----------- | ----------- |\n| currentData      | Data that is currently being displayed by the table ( including edits if any ) |\n| currentPageData  | Data that is displayed on the current page if pagination is enabled ( including edits if any )      |\n| pageIndex | Index of the current page, starting from 1\n| changeSet | Object with row number as the key and object of edited fields and their values as the value |\n| dataUpdates | Just like changeSet but includes the data of the entire row |\n| selectedRow | The data of the row that was last clicked. `selectedRow` also changes when an action button is clicked |\n| searchText | The value of the search field if server-side pagination is enabled |\nStyles\n| Style      | Description |\n| ----------- | ----------- |\n| Text color | Change the color of the text in table by providing `hex color code` or choosing one from the picker |\n| Action button radius | This field can be used to give a radius to all action buttons. The default value is `0` |\n| Table type | Select a type of table from the dropdown. |\n| Cell size |  This decides the size of table cells. You can choose between a `Compact` size for table cells or a `Spacious` size |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n| Disable | Toggle on to lock the widget. You can programmatically change its value by clicking on the `Fx` button next to it, if set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Border radius | Use this property to modify the border radius of the button. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Dropdown",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/dropdown.md",
    "content": "\nid: dropdown\ntitle: Dropdown\n\nDropdown\nThe Dropdown widget can be used to collect user input from a list of options.\nHow To Use Dropdown Widget\n\n:::tip\nDropdown options can be referred to your query data with dynamic variables.\n:::\n\n\n\nEvents\n\n\n\nEvent: On select\nOn select event is triggered when an option is selected.\nEvent: On search text changed\nThis event is triggered whenever the user searches through the options by typing on the dropdown's input box. The corresponding search text will be exposed as `searchText`.\nProperties\n\n\n\nLabel\nThe text is to be used as the label of the dropdown.\nDefault value\nValue of the default option\nOption value\nOption values are values for different options in the list of the dropdown. Refer your query data with dynamic variables `{{queries.datasource.data.map(item => item.value)}}` or populate it with sample values `{{[1,2,3]}}`\nOption labels\nOption labels are labels for different options in the list of the dropdown. Refer your query data with dynamic variables `{{queries.datasource.data.map(item => item.label)}}` or populate it with sample values `{{[\"one\", \"two\", \"three\"]}}`\nOptions loading state\nShow a loading state in the widget using this property. It is off by default, toggle on to enable it. You can also programmatically set the values `{{true}}` or `{{false}}` by clicking on the `Fx` button.\nValidation\nCustom validation\nAdd a validation for the options in dropdown widget using the ternary operator.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nBorder Radius\nUse this property to modify the border radius of the dropdown. The field expects only numerical value from `1` to `100`, default is `0`.\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nSelected text color\nChange the text color of the selected option in the widget by providing the `HEX color code` or choosing the color from color picker.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nAlign text\nYou can align the text inside the widget in following ways: left, right, center, justified \n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Vertical Divider",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/vertical-divider.md",
    "content": "\nid: vertical-divider\ntitle: Vertical Divider\n\nVertical Divider\nVertical Divider widget is used to add vertical separator between components.\n\n\n\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| properties      | description |\n| ----------- | ----------- |\n| Show on Desktop |  This property have toggle switch. If enabled, the divider will display in the desktop view else it will not appear. |\n| Show on Mobile |  This property have toggle switch. If enabled, the divider will display in the mobile view else it will not appear. |\nStyles\n\n\n\n| properties      | description |\n| ----------- | ----------- |\n| Divider Color |  It is used to set the color of the divider. Use hex code to set the background color. |\n| Visibility |  This property is used to set the visibility of the divider. The property accepts Boolean value. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Spinner",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/spinner.md",
    "content": "\nid: spinner\ntitle: Spinner\n\nSpinner\nSpinner widget can be used to provide a visual indication that an action is in progress by awaiting a change.\n\n\n\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nColor\nChange the color of the Spinner by entering the `Hex color code` or choosing a color of your choice from the color-picker. \nSize",
    "tag": "tooljet"
  },
  {
    "title": "Kanban",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/kanban-board.md",
    "content": "\nid: kanban\ntitle: Kanban\n\nKanban\nKanban widget allows you to visually organize and prioritize your tasks with a transparent workflow. You can set the number of columns to display, enable/disable the add cards button, and bind data to the cards.\n\n\n\nEvents\nTo add an event, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\n\nCard added\nCard removed\nCard moved\nCard selected\nCard updated\n\nJust like any other event on ToolJet, you can set multiple handlers for any of the above mentioned events.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\n\n\n\nProperties\n\n\n\n:::caution\nPlease keep in mind that you need to provide an `id` for each card in the `Card data` field \nand this `id` must be of type string.\n:::\n| Properties | description | Expected value |\n| ----------- | ----------- | ----------- |\n| Columns | Enter the columns data - `id` and `title` in the form of array of objects or from a query that returns an array of objects. | `{{[{ \"id\": \"1\", \"title\": \"to do\" },{ \"id\": \"2\", \"title\": \"in progress\" },{ \"id\": \"2\", \"title\": \"Completed\" }]}}` or `{{queries.xyz.data}}` |\n| Card data | Enter the cards data - `id`, `title` and `columnId` in the form of array of objects or from a query that returns an array of objects. | `{{[{ id: \"01\", title: \"one\", columnId: \"1\" },{ id: \"02\", title: \"two\", columnId: \"1\" },{ id: \"03\", title: \"three\", columnId: \"2\" }]}}` or `{{queries.abc.data}}` |\n| Enable Add Card | This property allows you to show or hide the `Add Cards` button at the bottom of every column. | By default its enabled, you can programmatically set `{{true}}` or `{{false}}` enable/disable button by clicking on the `Fx` next to it |\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout          | description                                             | Expected value                                                                                        |\n| --------------- | ------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- |\n| Show on desktop | Toggle on or off to display the widget in desktop view. | You can programmatically set the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display the widget in mobile view.  | You can programmatically set the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n\n\n\n| Style        | Description                                                                                                                                                                   |\n| ------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Disable      | If disabled or set to `{{false}}` the widget will be locked and becomes non-functional. By default, its disabled i.e. its value is set to `{{true}}` .                        |\n| Visibility   | This is to control the visibility of the widget. If `{{false}}`/disabled the widget will not visible after the app is deployed. By default, it's enabled (set to `{{true}}`). |\n| Width        | This property sets the width of the column.                                                                                                                                   |\n| Min width    | This property sets the min width of the column.                                                                                                                               |\n| Accent color | You can change the accent color of the column title by entering the Hex color code or choosing a color of your choice from the color picker.                                  |\nExposed variables\n\n\n\n| Variable | Description |\n| -------- | ----------- |\n| columns | The `columns` variable is an array of objects that includes the columns data in the respective objects. Since the columns variable is an array you'll need to specify the index of the object in the array to get the data within that object. Each object within a column has two keys - `id` and `title` and an array `cards` which is again an array of objects. Example: If you want to get the title of second card then you'll use `{{components.kanbanboard1.columns[1].title}}` - here we have specified the array index as `[1]` and then key which is the `title`. Similarly you can get the card details using `{{components.kanbanboard1.columns[0].cards[1].title}}` |\n| lastAddedCard | The variable `lastAddedCard` holds the properties of the card that has been added lastly. It holds the following data - `id`, `title`, and `columnId` of the last added card. You can get the values using `{{components.kanbanboard1.lastAddedCard.title}}` |\n| lastRemovedCard | The variable `lastRemovedCard` holds the properties of the card that has been recently deleted from the kanban. It holds the following data - `id`, `title`, and `columnId` of the recently deleted card. You can get the values using `{{components.kanbanboard1.lastRemovedCard.title}}` |\n| lastCardMovement | The variable `lastCardMovement` holds the properties of the card that has been recently moved from its original position. It holds the following data - `originColumnId`, `destinationColumnId`, `originCardIndex`, `destinationCardIndex` and an object `cardDetails` which includes `title`. You can get the values using `{{components.kanbanboard1.lastCardMovement.cardDetails.title}}` or `{{components.kanbanboard1.lastCardMovement.destinationCardIndex}}` |\n| lastUpdatedCard | The variable `lastUpdatedCard` holds `id`, `title`, and `columnId` of the latest modified card. You can get the values using `{{components.kanbanboard1.lastUpdatedCard.columnId}}` |",
    "tag": "tooljet"
  },
  {
    "title": "Timeline",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/timeline.md",
    "content": "\nid: timeline\ntitle: Timeline\n\nTimeline\nTimeline widget can be used to do a visual representation of a sequence of events\n\n\n\nProperties\nTimeline data\nData requirements: The data needs to be an array of objects and each object should have `title`, `subTitle`, `iconBackgroundColor` and `date` keys.\nExample:\n`json\n[ \n    { \"title\": \"Product Launched\", \"subTitle\": \"First version of our product released to public\", \"date\": \"20/10/2021\", \"iconBackgroundColor\": \"#4d72fa\"},\n    { \"title\": \"First Signup\", \"subTitle\": \"Congratulations! We got our first signup\", \"date\": \"22/10/2021\", \"iconBackgroundColor\": \"#4d72fa\"}, \n    { \"title\": \"First Payment\", \"subTitle\": \"Hurray! We got our first payment\", \"date\": \"01/11/2021\", \"iconBackgroundColor\": \"#4d72fa\"} \n]`\nHide date\nHide date can be used to hide the date time or Left Hand Side of the timeline widget\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n| Layout| description| Expected value|\n| ----- | ---------  | ------------- |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display mobile view.  | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n| Style      | Description |\n| ----------- | ----------- | \n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Tabs",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/tabs.md",
    "content": "\nid: tabs\ntitle: Tabs\n\nTabs\nA Tabs widget contains a number of defined containers that can be navigated through the tabs. Each tab acts as a container that can have different widgets placed inside it.\n\n\n\nHow To Use Tabs Widget\n\nProperties\nTabs\nThis property lets you add and remove containers from the tabs widget. Each container in the tab has its unique `id` , `title` and `disabled` for disabling individual tabs . This field expects an array of objects.\n`js\n{{[\n    { title: 'Home', id: '0' },\n    { title: 'Profile', id: '1',disabled:'true' },\n    { title: 'Settings', id: '2' }\n]}}`\nAdding background color to Tabs\nYou can specify the different color for each tab using the `backgroundColor` property and use hex color code or color name as the value.\n`js\n{{[ \n        { title: 'Home', id: '0', backgroundColor: '#81D4FA' }, \n        { title: 'Profile', id: '1', backgroundColor: 'blue' }, \n        { title: 'Settings', id: '2', backgroundColor: '#ecf0f1'} \n ]}}`\n\n\n\nDefault tab\nThis property selects the container in the tab which matches the corresponding `id`. By default, the value is set to `0`.\nHide tab\nIt allows you to hide all the tab titles defined in the Tabs property above. It accepts boolean values which can also be set using the toggle option or programmatically by clicking on the FX button.\nRender only active tab\nThis property is enabled by default. When enabled, only the active tab will be rendered and when disabled, all the tabs in the component will be rendered.\nEvents\n\n\n\nOn tab switch\nThis event is triggered when the tab is switched.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |\n| setTab | Set current tab. | `id` |\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nHighlight Color\nYou can change the highlight color of the selected tab by entering the Hex color code or choosing a color of your choice from the color picker.\nTab width\nTab width can be set as auto or equally split.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Password Input",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/password-input.md",
    "content": "\nid: password-input\ntitle: Password Input\n\nPassword Input\nA Password Input widget provides a way for the users to securely enter a password. The Password Input is a one-line plain text editor in which the text is obscured so that it cannot be read, by replacing each character with an asterisk (\"*\") symbol.\nHow To Use Password Input Widget\n\nProperties\nPlaceholder\nIt specifies a hint that describes the expected value. \nValidation\nRegex\nUse this field to enter a Regular Expression that will validate the password constraints.\nMin length\nEnter the number for a minimum length of password allowed.\nMax length\nEnter the number for the maximum length of password allowed.\nCustom validation\nIf the condition is true, the validation passes, otherwise return a string that should be displayed as the error message. For example: `{{components.passwordInput1.value === 'something' ? true: 'value should be something'}}`\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nBorder radius\nAdd a border radius to the number input widget using this property. It accepts any numerical value from `0` to `100`.\nBorder color\nAdd color to the border of the number input component using this property. Enter the hex color code or choose a color from the color picker.\nBackground color\nYou can change the background color of the widget by entering the Hex color code or choosing a color of your choice from the color picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Steps",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/steps.md",
    "content": "\nid: steps\ntitle: Steps\n\nSteps\nSteps are used to guide users through complex processes, making them easier and more intuitive.\n\n\n\nProperties\n\n\n\nSteps\nThis property lets you add and the steps. Every object represents a step.\n`json\n{{\n    [\n        { name: 'step 1', tooltip: 'some tooltip', id: 1},\n        { name: 'step 2', tooltip: 'some tooltip', id: 2},\n        { name: 'step 3', tooltip: 'some tooltip', id: 3},\n        { name: 'step 4', tooltip: 'some tooltip', id: 4},\n        { name: 'step 5', tooltip: 'some tooltip', id: 5}\n    ]\n}}`\nCurrent step\nThis property lets you select the current step you want to be highlighted.\nSteps selectable\nThis property when disabled will disable selection of steps.\nEvents\nOn select\nThis event is fired whenever the user selects any step.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nTheme\nYou can change the theme of widget by selecting available themes from dropdown.\nColour\nYou can change the  color of the widget by entering the Hex color code or choosing a color of your choice from the color picker.\nText Colour\nYou can change the  text color of the widget by entering the Hex color code or choosing a color of your choice from the color picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Tags",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/tags.md",
    "content": "\nid: tags\ntitle: Tags\n\nTags\nTags widget can be used to show array of data as tags.\n\n\n\nProperties\nTags\nIt can be used to set array of tags. It must be an array of objects like this:\n`js\n{{ \n    [ \n        { title: 'success', color: '#2fb344', textColor: '#fff' }, \n        { title: 'info', color: '#206bc4', textColor: '#fff'  }, \n        { title: 'warning', color: '#f59f00', textColor: '#fff'  }, \n        { title: 'danger', color: '#d63939', textColor: '#fff' } \n    ] \n}}`\nEach object should contain a title, color code of a particular tag, and also a text color.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility",
    "tag": "tooljet"
  },
  {
    "title": "Properties",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/icon.md",
    "content": "\nid: icon\ntitle: Icon \n\nAn Icon widget can be used to add icons(sourced from icon library). It supports events like on hover and on click.\n\n\n\nProperties\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| Icon | Use this to choose an icon form the list of available icons | You can also use the search bar in it to look for the icons | \nEvents\n\n\n\nTo add an event, click on the icon widget's configuration handle to open the widget properties on the components drawer on the right. Go to the Events section and click on + Add handler.\nThe Icon widget supports the following events:\n| Event  | Description |\n| ----------- | ----------- |\n| On hover      | This event is triggered when the cursor is hovered over the icon|\n| On click      | This event is triggered when the icon is clicked |\nJust like any other event on ToolJet, you can set multiple handlers for any of the above-mentioned events.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip: Set a tooltip text to specify the information when the user moves the mouse pointer over the widget.\nLayout\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to show/hide the widget on desktop screens. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to show/hide the widget on mobile screens. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`   |\nStyles\n| Style      | Description | Expected value |\n| ----------- | ----------- | ------------- |\n| Icon color |  You can change the color of the icon widget by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Visibility | This is to control the visibility of the widget. | If `{{false}}` the widget will not visible after the app is deployed. | It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`. |\n| Box shadow | This property adds a shadow to the widget. | You can use different values for box shadow property like offsets, blur, spread, and the color code. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Link",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/link.md",
    "content": "\nid: link\ntitle: Link\n\nLink\nLink widget allows you to add a hyperlink and navigate to the external URL.\n\n\n\nProperties\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| Link Target | This property sets the URL where the user needs to be taken on clicking the link | example: `https://dev.to/tooljet` or `{{queries.xyz.data.url}}` | \n| Link Text | This property sets the text for the link widget  | example: `Click here` or `Open webpage` | \n| Target Type | This property specifies the link to be opened in the same tab or new tab on clickinh the link | Options: `New Tab` & `Same Tab` |\nEvents\nTo add an event to a link, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\nOn Click\nOn Click event is triggered when the link is clicked. Just like any other event on ToolJet, you can set multiple handlers for on click event.\nOn hover\nOn Hover event is triggered when the link is hovered. Just like any other event on ToolJet, you can set multiple handlers for on click event.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\nLayout\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to show/hide the widget on desktop view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to show/hide the widget on mobile view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`   |\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- | \n| Text Color |  You can change the background color of the text by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Text Size | By default, the text size is set to 14. You can enter any value from 1-100 to set custom text size. |\n| Underline | You can change the underline of the text in the following ways: on-hover (default), never, always |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Radio Button",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/radio-button.md",
    "content": "\nid: radio-button\ntitle: Radio Button\n\nRadio Button\nRadio button widget can be used to select one option from a group of options.\nHow To Use Radio button Widget\n\n:::tip\nRadio buttons are preferred when the list of options is less than six, and all the options can be displayed at once.\n:::\n:::info\nFor more than six options, consider using Dropdown widget.\n:::\nEvent\nOn select\nThis event is triggered when an option is clicked.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\nLabel\nThe text is to be used as the label for the radio button. This field expects a `String` value.\nDefault value\nThe value of the default option.\nOption values\nList of values for different items/options. Refer your query data with dynamic variables `{{queries.datasource.data.map(item => item.value)}}` or populate it with sample values `{{[true, false]}}`\nOption labels\nList of labels for different items/options. Refer your query data with dynamic variables `{{queries.datasource.data.map(item => item.label)}}` or populate it with sample values `{{[\"yes\", \"no\"]}}`\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nText color\nChange the color of the text in the widget by providing the `Hex color code` or by choosing the color of your choice from the color picker.\nActive color\nChange the color of active radio button by providing the `Hex color code` or by choosing the color of your choice from the color picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nExample\n\n\n\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |",
    "tag": "tooljet"
  },
  {
    "title": "Textarea",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/textarea.md",
    "content": "\nid: textarea\ntitle: Textarea\n\nTextarea\nTextarea widgets let users enter and edit just text like Text Input widget.\n:::tip\nTextarea should be preferred over Text Input when user input is more than one sentence.\n:::\nHow To Use Textarea Widget\n\nProperties\nDefault value\nThis property is used for setting the initial value in the textarea on the initial load. This field expects a `String` value.\nPlaceholder\nIt specifies a hint that describes the expected value. This field expects a `String` value.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nBorder Radius\nUse this property to modify the border radius of the text area widget. The field expects only numerical value from `1` to `100`, default is `0`. \nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |\n| setText | Set the text. | `text` |\n| clear | Clear the text. |  |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Chart",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/chart.md",
    "content": "\nid: chart\ntitle: Chart\n\nChart\nChart widget takes the chart type, data and styles to draw charts using Plotly.js.\nHow To Use Chart Widget\n\nChart types\nLine charts\nData requirements: The data needs to be an array of objects and each object should have `x` and `y` keys.\nExample:\n`json\n[\n  { \"x\": \"Jan\", \"y\": 100},\n  { \"x\": \"Feb\", \"y\": 80},\n  { \"x\": \"Mar\", \"y\": 40},\n  { \"x\": \"Apr\", \"y\": 100},\n  { \"x\": \"May\", \"y\": 80},\n  { \"x\": \"Jun\", \"y\": 40}\n]`\nThe chart will look like this:\n\n\n\nBar charts\nData requirements: The data needs to be an array of objects and each object should have `x` and `y` keys.\nExample:\n`json\n[\n  { \"x\": \"Jan\", \"y\": 100},\n  { \"x\": \"Feb\", \"y\": 80},\n  { \"x\": \"Mar\", \"y\": 40},\n  { \"x\": \"Apr\", \"y\": 100},\n  { \"x\": \"May\", \"y\": 80},\n  { \"x\": \"Jun\", \"y\": 40},\n  { \"x\": \"Jul\", \"y\": 100},\n  { \"x\": \"Aug\", \"y\": 80},\n  { \"x\": \"Sep\", \"y\": 40}\n]`\nThe chart will look like this:\n\n\n\nPie charts\nData requirements: The data needs to be an array of objects and each object should have `label` and `value` keys.\nExample:\n`json\n[\n  { \"x\": \"Jan\", \"y\": 100},\n  { \"x\": \"Feb\", \"y\": 80},\n  { \"x\": \"Mar\", \"y\": 40},\n  { \"x\": \"Apr\", \"y\": 100},\n  { \"x\": \"May\", \"y\": 80},\n  { \"x\": \"Jun\", \"y\": 40}\n]`\nThe chart will look like this:\n\n\n\nProperties\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nTitle\nThis field is used to add a title to your selected chart.\nPlotly JSON chart schema\nIn the chart widget, you can also plot a chart with JSON data. So the JSON will contain the information about the chart type, chart data, etc. You can learn more about the JSON properties from here. \nAnyway, to work with the JSON you need to enable the `Use Plotly JSON schema` toggle from the properties section.\n\n\n\nIt will show the JSON description field to put the JSON data.\nThe result will be like this:\n\n\n\nMarker color\nModify the color of marker using the color picker or by providing a `HEX color code`.\nOptions\nLoading state\nToggle `on` the switch to display a loader on the widget. You can also programmatically define it's value by clicking on `Fx`, acceptable values are - `{{true}}` and `{{false}}`.\nShow Axes\nEnable or disable the `x` and `y` axes on the chart through this property. You can also programmatically define it's value by clicking on `Fx`, acceptable values are - `{{true}}` and `{{false}}`.\nShow grid lines\nToggle `on` or `off` to show or hide the grid lines on the chart. You can also programmatically define it's value by clicking on `Fx`, acceptable values are - `{{true}}` and `{{false}}`.\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nPadding\nDefine a space between the widget element and the widget border using `Padding` property. Use any numerical value between `1` to `100`.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable",
    "tag": "tooljet"
  },
  {
    "title": "PDF",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/pdf.md",
    "content": "\nid: pdf\ntitle: PDF\n\nPDF\nPDF widget can be used to embed the PDF file either by URL or as a Base64 encoded.\nProperties\nFile URL\nThe URL of the PDF file on the web. `data:application/pdf;base64,` format is supported and the input needs to be prefixed with `data:application/pdf;base64,`\nScale page to width\nIt can be toggled to adjust the PDF content to fit the width or height of the component\nShow page controls\nBy default, page number, previous & next button is displayed while hovering the PDF file. It can be toggled on or off.\nShow the download\nThe `Download` button on the PDF component allows you to download the pdf file. By default, Show the download button is enabled. Toggle it off to remove the `Download` button from PDF component, you can also click on the `Fx` button to set the values `{{true}}` or `{{false}}` dynamically.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n| Layout          | description                               | Expected value                                                                                                |\n| --------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display mobile view.  | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n| Style      | Description                                                                                                                                                                                                                                              |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Number Input",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/number-input.md",
    "content": "\nid: number-input\ntitle: Number Input\n\nNumber Input\nNumber Input widget lets users enter and change numbers.\nHow To Use Number Input Widget\n\n:::tip\nNumbers can be changed by using the arrow keys.\n:::\nProperties\nDefault value\nA predefined value that can be fetched from the number input widget if no changes are made in widget.\nMinimum value\nIt specifies the minimum value the number input can go to. This field accepts any numerical value.\nMaximum value\nIt specifies the maximum value the number input can go to. This field accepts any numerical value.\nPlaceholder\nIt specifies a hint that describes the expected value. This field accepts any numerical value.\nEvents\n\n\n\nOn change\nThis event fires whenever the value of the number input widget is changed.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget. Under the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nBorder radius\nAdd a border radius to the number input widget using this property. It accepts any numerical value from `0` to `100`.\nBorder color\nChange the border color number-input component by entering the Hex color code or choosing a color of your choice from the color picker.\nBackground color\nChange the background color of the number-input component by entering the Hex color code or choosing a color of your choice from the color picker.\nText color\nChange the color of the number in number-input component by entering the Hex color code or choosing a color of your choice from the color picker. \n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Iframe",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/iframe.md",
    "content": "\nid: iframe\ntitle: Iframe\n\nIframe\nIframe widget is used to embed another HTML page into the current one and display iframes in your app.\n\n\n\nProperties\nURL\nSet the URL of the page to embed.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the  mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Custom Component",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/custom-component.md",
    "content": "\nid: custom-component\ntitle: Custom Component\n\nCustom Component\nCustom Component can be used to do create your own React component when the needed functionality isn't available in other components.\n\n\n\nProperties\nData\nThe data needs to be an objects which needs to be passed as `data` props to the custom component\nExample:\n`json\n{{{\n    title: \"Hi! There\",\n    buttonText: \"Updated Text\",\n    queryName: \"runjs1\"\n}}}`\nCode\nThis field is used to add a React code for your custom component. The packages for the custom component can be imported from Skypack. For example, to import `React` package into the custom component it can be imported as `import React from 'https://cdn.skypack.dev/react'`.\nTooljet provides 3 props to interact with the app: `data`, `updateData` and `runQuery`.\n\n`data` is a shared object between custom component and Tooljet app.\n`updateData` is a function which accepts a single object used to update the data passed to the custom component.\n`runQuery` is a function which accepts a query name as a string used to run the query from the custom component.\n\nExample:\n```js\nimport React from \"https://cdn.skypack.dev/react\";\nimport ReactDOM from \"https://cdn.skypack.dev/react-dom\";\nimport { Button, Container, Link } from \"https://cdn.skypack.dev/@material-ui/core\";\nconst MyCustomComponent = ({data, updateData, runQuery}) => (\n    \n{data.title}\n {updateData({...data, title: 'Hello World!!'})}}>\n            {data.buttonText}\n        \n {runQuery(data.queryName)}}\n        >\n            Run Query\n        \n\n);\nconst ConnectedComponent = Tooljet.connectComponent(MyCustomComponent);\nReactDOM.render(, document.body);\n```\n:::info\n`Tooljet.connectComponent` acts as a HOC and it is required to get access to the data passed into the custom component and run the query\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n| Layout          | description                               | Expected value                                                                                                |\n| --------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display mobile view.  | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n| Style      | Description                                                                                                                                                                                                                                              |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "QR Scanner",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/qr-scanner.md",
    "content": "\nid: qr-scanner\ntitle: QR Scanner\n\nQR Scanner\nScan QR codes using device camera and hold the data they carry.\n\n\n\n:::note Known Issue\nYou might have to stick to the Safari browser in IOS as camera access is restricted for third-party browsers.\n:::\nExposed variables\nlastDetectedValue\nThis variable holds the data contained in the last QR code scanned by the widget. To fetch the data use `{{components.qrscanner1.lastDetectedValue}}`.\nEvents\nonDetect\nThis event is fired whenever the widget successfully scans a QR code.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\n:::caution Debugging tip\nBrowser camera APIs restrict this widget to only work in either `localhost` or `https`.\nSo if you're testing it out, be sure to either use `localhost` or `https`.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the \nmouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. \nNow hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable",
    "tag": "tooljet"
  },
  {
    "title": "List view",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/listview.md",
    "content": "\nid: listview\ntitle: List view\n\nList view\nList view widget allows to create a list of repeatable rows of data. Just like a container widget, you can nest other widgets inside of it and control how many times they repeat.\n\n\n\nHow To Use List view Widget\n\nEvents\nRow clicked\n\n\n\nTo add an event to a button, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\nRow clicked event is triggered when the button is clicked. Just like any other event on ToolJet, you can set multiple actions for a row clicked event.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\n\n\n\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| List data | Enter the data that you want to display into the widget. Data in the form of an array of objects or data from a query that returns an array of objects.| `{{ [ {id: 0, name: ABC, email: abc@bla.com}, {id: 1, name: XYZ, email: xyz@bla.com} ] }}` or `{{queries.xyz.data}}` |\n| Row height | Enter a numerical value to set the row height accordingly. | Any number between `1` to `100` |\n| Show bottom border | This property allows you to show or hide the row bottom border. | By default its `{{true}}`, set `{{false}}` to hide the border  |\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to display the desktop view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to display the mobile view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`   |\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- |\n| Background Color |  You can change the background color of the widget by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Border Color |  You can change the border color of the listview by entering the `Hex color code` or choosing a color of your choice from the color picker. |\n| Visibility | This is to control the visibility of the widget. If `{{false}}` the widget will not be visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`. |\n| Disable |  This property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Border radius | Use this property to modify the border radius of the list view. The field expects only numerical value from `1` to `100`, default is `0`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nExample: Displaying data in the list view\n\nLet's start by creating a new app and then dragging the List view widget onto the canvas.\n\n\n\n\n\nNow lets create a query and select the REST API from the datasource dropdown. Choose the `GET` method and enter the API endpoint - `https://reqres.in/api/users?page=1`. Save this query and fire it. Inspect the query results from the left sidebar, you'll see that it resulted in the `data` object having an array of objects.\n\n\n\n\n\nNow lets edit the `List data` property of the list view widget for displaying the query data. We will use JS to get the data from the query - `{{queries.restapi1.data.data}}`. Here the last `data` is a data object that includes an array of objects, the first `data` is the data resulted from the `restapi1` query. This will automatically create the rows in the widget using the data.\n\n\n\n\n\nFinally, we will need to nest widgets into the first row of list view widget and the widget will automatically create the subsequent instances. The subsequent rows will appear the same way you'll display the data in the first row.\n\n\n\n\n:::tip\nUse `{{listItem.key}}` to display data on the nested widgets. Example: For displaying the images we used `{{listItem.avatar}}` where avatar is one of the key in the objects from the query result.",
    "tag": "tooljet"
  },
  {
    "title": "Timer",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/timer.md",
    "content": "\nid: timer\ntitle: Timer\n\nTimer\nTimer widget lets users to count timer both upward and downward\n\n\n\nProperties\nDefault value\nIt specifies the initial value of timer. Format is: `HH.mm.ss.SS`.\nTimer type\nIt specifies If its a upward or downward counter. Select `Count Up` or `Count Down` from the dropdown or you can click on `Fx` to programmatically define the values `countUp` or `countDown`.\nEvents\nOn start\nThis event is fired when user clicks on start button.\nOn resume\nThis event is fired when user clicks on resume button.\nOn pause\nThis event is fired when user clicks on pause button.\nOn count down finish\nThis event is fired when the count down timer reaches zero.\nOn reset\nThis event is fired when user clicks on reset button.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Tree Select",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/tree-select.md",
    "content": "\nid: tree-select\ntitle: Tree Select\n\nTree Select\nTree Select widget is a group checkboxes in a TreeView which can be expanded or collapsed.\n\n\n\nProperties\nTitle\nThe text is to be used as the title for the tree select. This field expects a `String` input.\nStructure\nData requirements: The structure needs to be an array of objects and each object should have `label` and `value` keys. If you wish to have `children` under any of the checkbox, then `children` array needs to be passed with `label` and `value` keys.\nExample:\n`json\n[\n  {\n    \"label\": \"Asia\",\n    \"value\": \"asia\",\n    \"children\": [\n      {\n        \"label\": \"China\",\n        \"value\": \"china\",\n        \"children\": [\n          { \"label\": \"Beijing\", \"value\": \"beijing\" },\n          { \"label\": \"Shanghai\", \"value\": \"shanghai\" }\n        ]\n      },\n      { \"label\": \"Japan\", \"value\": \"japan\" },\n      {\n        \"label\": \"India\",\n        \"value\": \"india\",\n        \"children\": [\n          { \"label\": \"Delhi\", \"value\": \"delhi\" },\n          { \"label\": \"Mumbai\", \"value\": \"mumbai\" },\n          { \"label\": \"Bengaluru\", \"value\": \"bengaluru\" }\n        ]\n      }\n    ]\n  },\n  {\n    \"label\": \"Europe\",\n    \"value\": \"europe\",\n    \"children\": [\n      { \"label\": \"France\", \"value\": \"france\" },\n      { \"label\": \"Spain\", \"value\": \"spain\" },\n      { \"label\": \"England\", \"value\": \"england\" }\n    ]\n  },\n  { \"label\": \"Africa\", \"value\": \"africa\" }\n]`\n:::info\nNote: The `value` should be unique throughout the structure array.\n:::\nChecked Values\nChecked values is an array of values passed to select the checkboxes by default.\nExample:\n`json\n[\"asia\", \"spain\"]`\nExpanded Values\nSimilar to checked values, expanded values is an array of values passed to expand the node by default.\nExample:\n`json\n[\"asia\"]`\nEvents\n\n\n\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nOn change\nOn check event is triggered whenever the checkbox value is changed (checked or unchecked).\nOn check\nOn check event is triggered whenever the checkbox value is checked.\nOn uncheck\nOn uncheck event is triggered whenever the checkbox value is unchecked.\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nText color\nChange the color of the Label by entering the `Hex color code` or choosing a color of your choice from the color-picker.\nCheckbox color\nYou can change the color of the checkbox by entering the `Hex color code` or choosing a color of your choice from the color-picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Button group",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/button-group.md",
    "content": "\nid: button-group\ntitle: Button Group\n\nButton group\nButton group widget can be used to take actions.\n\n\n\nProperties\nEvents\nTo add an event to a button group, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\n\n\n\nOn click\nOn click event is triggered when the button group is clicked. Just like any other event on ToolJet, you can set multiple handlers for on click event.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\n\n\n\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| label | label is used to set the heading of the button group. | Any String value |\n| values |Values for button group items. | Array of strings  |\n| labels | It can be used to set the labels of the button group items. |  Array of strings|\n| Default  selected | Initial selected values can be set using this. | Array of strings  |\n| Enable multiple selection | Toggle this to allow multiple button selection. | Toggle to true/false |\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to display mobile view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- | \n| Background color |  You can change the background color of the widget by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Text color |  You can change the color of the Text in button by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n| Disable | Toggle on to lock the widget. You can programmatically change its value by clicking on the `Fx` button next to it, if set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Border radius | Use this property to modify the border radius of the button. |\n| Selected text color | Use this property to modify the background colour of text in selected button |\n| Selected background color | Use this property to modify the background colour of selected button |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "HTML",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/html.md",
    "content": "\nid: html\ntitle: HTML \n\nHTML\nHTML widget can be used to create your own HTML-CSS layout.\n\n\n\nProperties\nRaw HTML\nThe Raw HTML needs to be an HTML. In order to provide styles, one can add inline css to the respective HTML tags\nExample:\n```json\n\n\n\n\n\n          You can build your custom HTML-CSS template here\n        \n\n\n\n```\n\n\n\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n| Layout          | description                               | Expected value                                                                                                |\n| --------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display mobile view.  | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n| Style      | Description                                                                                                                                                                                                                                              |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Multiselect",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/multiselect.md",
    "content": "\nid: multiselect\ntitle: Multiselect\n\nMultiselect\nMultiselect widget can be used to collect multiple user inputs from a list of options.\n\n\n\nEvents\nOn select\nOn select event is triggered when an option is selected.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\nLabel\nThe text is to be used as the label for the multiselect widget.\nDefault value\nThe value of the default option. This should always be an array.\nOption values\nValues for different items/options in the list of the multiselect.\nOption labels\nLabels for different items/options in the list of the multiselect.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nBorder radius\nAdd a border radius to the multiselect using this property. It accepts any numerical value from `0` to `100`.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |\n| `selectOption` | Select options. | pass options as parameter. ex: `components.multiselect1.selectOption(1)` |\n| `deselectOption` | Deselect options.| pass options as parameter. ex: `components.multiselect1.deselectOption(1)` |\n| `clearSelections` | Clear all selection. |  ex: `components.multiselect1.clearSelections()` |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Divider",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/divider.md",
    "content": "\nid: divider\ntitle: Divider\n\nDivider\nDivider widget is used to add separator between components. \n\n\n\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| properties      | description |\n| ----------- | ----------- |\n| Show on Desktop |  This property have toggle switch. If enabled, the divider will display in the desktop view else it will not appear. |\n| Show on Mobile |  This property have toggle switch. If enabled, the divider will display in the mobile view else it will not appear. |\nStyles\n\n\n\n| properties      | description |\n| ----------- | ----------- |\n| Divider Color |  It is used to set the color of the divider. Use hex code to set the background color. |\n| Visibility |  This property is used to set the visibility of the divider. The property accepts Boolean value. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "SVG Image",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/widgets/svg-image.md",
    "content": "\nid: svg-image\ntitle: Svg Image\n\nSVG Image\nIt is used to render vector images. We can display images, icons, texts using this widget. SVGs are vector images and therefore are usually much smaller in file-size than bitmap-based images.\nDevelopers prefer having SVG (Scalable Vector Graphics) files as they are scalable and will render pixel-perfect at any resolution whereas JPEGs, PNGs and GIFs will not. \n\n\n\nProperties\nSVG Data\nEnter the SVG data of the image to display it on the widget. \n:::tip\nRefer to the resources where SVG files are downloaded for free. You copy-paste the below data in this field to see a new icon being rendered.\n:::\n`<svg fill=\"#000000\" xmlns=\"http://www.w3.org/2000/svg\"  viewBox=\"0 0 16 16\" width=\"32px\" height=\"32px\"><path d=\"M 7.5 1 C 3.910156 1 1 3.90625 1 7.488281 C 1 10.355469 2.863281 12.789063 5.445313 13.648438 C 5.769531 13.707031 6 13.375 6 13.125 C 6 12.972656 6.003906 12.789063 6 12.25 C 4.191406 12.640625 3.625 11.375 3.625 11.375 C 3.328125 10.625 2.96875 10.410156 2.96875 10.410156 C 2.378906 10.007813 3.011719 10.019531 3.011719 10.019531 C 3.664063 10.0625 4 10.625 4 10.625 C 4.5 11.5 5.628906 11.414063 6 11.25 C 6 10.851563 6.042969 10.5625 6.152344 10.378906 C 4.109375 10.019531 2.996094 8.839844 3 7.207031 C 3.003906 6.242188 3.335938 5.492188 3.875 4.9375 C 3.640625 4.640625 3.480469 3.625 3.960938 3 C 5.167969 3 5.886719 3.871094 5.886719 3.871094 C 5.886719 3.871094 6.453125 3.625 7.496094 3.625 C 8.542969 3.625 9.105469 3.859375 9.105469 3.859375 C 9.105469 3.859375 9.828125 3 11.035156 3 C 11.515625 3.625 11.355469 4.640625 11.167969 4.917969 C 11.683594 5.460938 12 6.210938 12 7.207031 C 12 8.839844 10.890625 10.019531 8.851563 10.375 C 8.980469 10.570313 9 10.84375 9 11.25 C 9 12.117188 9 12.910156 9 13.125 C 9 13.375 9.226563 13.710938 9.558594 13.648438 C 12.140625 12.785156 14 10.355469 14 7.488281 C 14 3.90625 11.089844 1 7.5 1 Z\"/></svg>`\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility",
    "tag": "tooljet"
  },
  {
    "title": "App-Builder: Overview",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/app-builder/overview.md",
    "content": "\nid: overview\ntitle: Overview\n\nApp-Builder: Overview\nToolJet's App Builder allows you to build applications. ToolJet's app builder has the following major components:\n\nToolbar: configure app settings\nCanvas: Arrange the components to build the interface of app\nLeft-sidebar: Add pages, datasources, inspect the components, queries or variables, and debug the errors.\nComponents library(right sidebar): Drag any component or modify the property or styling\nQuery Panel: Create, edit or manage the queries\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "toolbar.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/app-builder/toolbar.md",
    "content": "\nid: toolbar\ntitle: Toolbar\n\nToolbar is present at the top of the app-builder, and is used to configure the app settings.\n\n\n\nApp name\nApp name can be edited from the left side of the toolbar next to the ToolJet logo.\nWhen a new app is created, by default its name is set to Untitled app\n\n\n\nGlobal Settings\nTo configure the app's global settings, click on the kebab menu(three vertical dots) on the left of the app name. Global settings include:\n\nHide heaeder for launched apps: Toggle this on to the hide the tooljet's header when the applications are launched\nMaintenance mode: Toggle this on to put the application in maintenance mode. When in maintenance mode, on launching the app, the user will get an error message that the app is under maintenance.\nMax width of canvas: Modify the width of the canvas in px or %. The default width is 1292 px.\nMax height of canvas: Modify the width of the canvas in px or %. The default height is 2400 px and currently it is the maximum height limit.\nBackground color of canvas: Enter the hex color code or choose a color from the picker to change the background color of the canvas. You can also click on the Fx to programmatically set the value.\n\n\n\n\nDesktop or Mobile layout\nSwitch the canvas mode in Mobile or Desktop layout from the toolbar.\nAdding existing component to mobile layout\nClick on the component handle to open component config inspector on the right side. Scroll down to the Layout section and enable Mobile Layout. The width of the widget will be adjusted to fit the Mobile Layout.\nAdding a new component to mobile layout\nSwitch the layout to mobile by clicking the button on the toolbar. Drag and drop a component to the canvas. This widget will not be shown on desktop layout unless Show on desktop is enabled from the component config inspector.\n:::info\nWidth of the component will be automatically adjusted to fit the screen while viewing the application in app viewer.\n:::\n\n\n\nUndo or Redo\nUse the undo or redo buttons from the toolbar to undo or redo any change on the canvas.\nYou can also Keyboard Shortcuts to perform such actions.\n\n\n\nVersion Manager\nCreate or Remove Versions of the applications from the Version Manager. You can also edit the version name from the edit button.\nWhen many developers are working on an app, Versioning allows them to save their own version of the app. This also prevents developers from overwriting the other developer's work.\n\n\n\nComments\nComment anywhere on the canvas and collaborate with other users in the workspace. Click on the comments button to enable it and then drop comment anywhere on the canvas.\n\n\n\nShare\nShare your applications with a unique URL generated automatically or edit the URL slug to personalize it.\n\nWhen Make the application public is off and URL is shared then the users will have to login to ToolJet to use the application. Toggle on the option then anyone on the internet will be able to access the application without logging in to ToolJet.\nToolJet generates the Embedded link which can be used to embed application on the webpages.\n\n\n\n\nPreview\nClicking on Preview button will open up the currently opened version of the app in the new tab. This is really handy when the app developer wants to immediately check the app preview in production.\n\n\n\nRelease\nRelease the app to publish the current version of the app and push the changes into the production.\n:::caution\nToolJet will block editing of the Released version of an app and will display a prompt to create a new version to make the changes. This is to prevent accidentally pushing an unfinished app to the live version.\n:::\n\n",
    "tag": "tooljet"
  },
  {
    "title": "canvas.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/app-builder/canvas.md",
    "content": "\nid: canvas\ntitle: Canvas\n\nCanvas is the center area of the ToolJet app builder where the application is built. You arrange the components by dragging them from the Components library(right-sidebar).\n\n\n\nArrange Components\nAll the components are fully interactive in editor mode - to prevent interaction you can click and hold the Component Handle to change component's position.\n\n\n\nResize Components\nComponents on the canvas can be resized from the edges.\nYou can precisely set the position of selected components using keyboard arrow keys after clicking the component handle.\n\n\n\nGroup Components\nToolJet comes with flexible components to group other components together, such as Container and Form. When you drag and drop components in containers/forms they create a group of nested components. All components can be nested in this way.\nHide or Disable Components\nHide or Disable a component by setting its Visibility or Disabled property to `true`. Click on the component handle to open config inspector on right side. These values can also evaluate to true based on a truthy value. For example, you can use the property of one component to toggle the Visibility property of another component dynamically, you just need to write a conditional statement. \nFor example: We want to disable a button when a checkbox is checked so we can simple use `{{components.checkbox1.value}}` in Disable property of the button. `{{components.checkbox1.value}}` evaluates to `true` when the checkbox is checked, and false when unchecked.\n\n\n\nClone Components\nYou can clone existing components on the canvas by cmd/ctrl + d. Check other Keyboard Shortcuts",
    "tag": "tooljet"
  },
  {
    "title": "Query Manager",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/app-builder/query-panel.md",
    "content": "\nid: query-panel\ntitle: Query Panel\n\nThe Query Panel is present at the bottom of the app-builder, this is where you create queries to interact with connected datasources. You can perform API requests, query databases, or transform or manipulate data with JavaScript & Python.\nThe Query Panel has two sections:\n- Query Manager on the right that includes a list of all the created queries\n- Query Editor is used to configure the selected query\n\n\n\nQuery Manager\nQuery Manager will list all the queries that has been created in the application. Query Manager is used to:\nSearch\nOn the top of the query manager is search box that can be used to search for a specific query.\n\n\n\nAdd\nAdd button is used to add more queries in the application. When Add button is clicked, the Query Editor will show you a list of options for creating a query from: Rest API, connected datasources, ToolJet Database, JavaScript Code, Python Code or Add a new datasource.\n\n\n\nDelete\nDelete button will delete the selected query, the button will only show up when you hover over the query name.\n\n\n\nEdit\nEdit button is used edit the name of the selected query, the button will only show up when you hover over the query name.\n\n\n\nQuery Editor\nQuery editor used to configure the query parameters, preview or transform the data return by the query.\n\n\n\nTopbar\nOn the top of the query panel there are a few options:\nQuery Name editor\nEdit the name of the query by clicking on the edit button next to the default query name.\n\n\n\nPreview\nPreview gives you a quick look at the data returned by the query without triggering the query in the app.\nThe Preview of data is returned in two different formats:\nRaw\n\n\n\nJSON\n\n\n\nSave\nSave is used to save the changes whenever a change is made in query.\n\n\n\nRun\nRun is used to trigger the query, running the query will interact with the application unlike `Preview`.\n\n\n\nQuery Parameters\nQuery Parameters are the values required for the query to return a response from the server. Parameters include endpoints, methods, or operations. Query Parameters are different for each datasource.\n\n\n\nTransformation\nTransformations can be enabled on queries to transform the query results. ToolJet allows you to transform the query results using two programming languages JavaScript & Python. Check the detailed documentation on Transformations.\n\n\n\nAdvanced options\nRun this query on application load?\nEnabling this option will fire the query every time the app is loaded.\nRequest confirmation before running the query?\nEnabling this option show a confirmation modal to confirm `Yes` or `No` if you want to fire that query.\nRun this query on application load?\nEnabling this option show a success toast notification when the query is successfully triggered.\nEvent Handlers\nEvent Handler are used to add some action when a particular event happens. You can add event handlers to the query for the following events:\n\nQuery Success\nQuery Failure\n\n:::info\nLearn more about Event Handlers and Actions.\n:::\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Pages",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/app-builder/left-sidebar.md",
    "content": "\nid: left-sidebar\ntitle: Left-sidebar\n\nLeft-sidebar has the following options:\n\nPages\nInspector\nDatasources Manager\nDebugger\nTheme switch\n\n\n\n\nPages\nPages allows you to have multiple pages in a single application, making your ToolJet applications more robust and user-friendly.\nCheck the detailed documentation for Pages.\n\n\n\nInspector\nThe Inspector can be used to inspect the data of the queries, properties and values of the components that are there on the canvas, ToolJet's global variables and the variables that have been set by the user.\nCheck the detailed guide on using Inspector.\n\n\n\nDatasources Manager\nDatasources Manager is used to connect or remove the datasources. \nCheck the detailed Datasources documentation.\n\n\n\nDebugger\nThe debugger captures errors that happens while running the queries. For example, when a database query fails due to the unavailability of a database or when a REST API query fails due to an incorrect URL, the errors will be displayed on the debugger. The debugger also displays relevant data related to the error along with the error message.\n\n\n\nTheme switch",
    "tag": "tooljet"
  },
  {
    "title": "Component Config Inspector",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-2.1.0/app-builder/right-sidebar.md",
    "content": "\nid: components-library\ntitle: Components Library\n\nThe Components Library on the right sidebar contains all of the available components. Use this to drag-and-drop a component from the library to the canvas. It organizes components into sections and you can enter a search term to quickly find a component you need.\n\n\n\n:::tip\nCheck the Components Catalog here to know more about specific component.\n:::\nComponent Config Inspector\nThe Component Config Inspector is also called as component inspector. It contains all the available settings for the selected component and is where you set values, update component names, and create event handlers. The Compoenent Inspector organizes settings into different sections, such as Property and Styles. \nTo open the Component Config Inspector, click on the component handle that is present on the top of the component including \u2699\ufe0f + Component Name and the component inspector will open up on the right side:\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "ToolJet Marketplace",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/marketplace.md",
    "content": "\nid: marketplace\ntitle: Marketplace\n\nToolJet Marketplace\nToolJet marketplace for plugins will allow users to install the custom plugins (datasources) for their ToolJet instances. This will allow ToolJet users to build their own custom plugins according to their requirements and then easily connect them to ToolJet.\nEnabling the marketplace for your instance\nUsers must add the following environment variable to the .env file to enable the marketplace feature:\n`bash\nENABLE_MARKETPLACE_FEATURE=true`\nOnce the marketplace feature is enabled, users can open the Marketplace page from the dropdown on the navbar of the dashboard. Users can also directly access the marketplace using the URL: `https://tooljet.yourcompany.com/integrations`\n:::info\nThe user logged-in should be the Administrator to access the marketplace page.\n:::\nInstalling a plugin\nWhen you create a plugin using the tooljet cli, an object is created in the plugins.json (`ToolJet/server/src/assets/marketplace/plugins.json`) file for that particular plugin.\nHere's an example of an entry created for AWS S3 plugin:\n`json\n[\n  {\n    \"name\": \"AWS S3 plugin\",\n    \"description\": \"Datasource plugin for AWS S3\",\n    \"version\": \"1.0.0\",\n    \"id\": \"s3\",\n    \"repo\": \"\",\n    \"author\": \"Tooljet\",\n    \"timestamp\": \"Mon, 31 Oct 2022 11:02:10 GMT\"\n  }\n]`\nNow to install the plugin to the marketplace, you'll have to install npm package to a plugin:\n`bash\nnpm i <npm-package-name> --workspace=<plugin-name-in-package-json>`\nFinally, run the build commands:\n`bash\nnpm install\nnpm run build --workspaces`\nOnce done, you'll find the plugin on the marketplace page.\nRemoving a plugin\nTo remove a plugin from the marketplace, you can simply remove the object entry of the plugin from the plugins.json(`ToolJet/server/src/assets/marketplace/plugins.json`) and then re-run the build commands.\nUsing a plugin as datasource\nThe flow for installing and using a plugin as a datasource is really simple. The steps are:\n- Go to the Marketplace\n- Click the Marketplace link in the left sidebar to view all available plugins.\n    \n\n\n```<img className=\"screenshot-full\" src=\"/img/marketplace/marketplacemain.png\" alt=\"Marketplace\" />\n\n</div>\n```\n\n\n\nClick on the Install button of the plugin that you want to install\n\nOnce installed, you can check the installed plugins from Installed on the left sidebar. You can also remove the plugins from the Installed section of the marketplace.\n    \n\n\n- Now, let's use the installed plugin as the datasource for an application. User will have to open the application, go to the Add Datasource button on the left sidebar of the app builder, and then select Plugins on the modal that pops-up. The Plugins section will include all the plugins installed via Marketplace. The next steps are same as connecting a datasource to the application.\n\n\n\n\n\nCreating a marketplace plugin\nThe steps for creating a Marketplace plugin are similar to those for creating plugins for ToolJet except that for a Marketplace plugin, the user will have to type `yes` when prompted `Is it a marketplace integration?` in the `tooljet command line`.\nThe steps to create a marketplace plugin are:\n\nInstall tooljet-cli:\n  `bash\n  npm i -g @tooljet/cli`\nBootstrap a new plugin using cli\n  `bash\n  tooljet plugin create bigquery`\nOn the CLI, you'll be prompted to enter a display name:\n  `bash\n  Enter plugin display name:`\nIn the next step, you'll be asked to choose a plugin type database, api, or cloud-storage\nNow choose if `Is it a marketplace integration?` by entering `y/N`\nEnter the repository URL if the plugin is hosted on GitHub or else just press enter to skip to the next step\nOnce done, all the plugin files will be generated inside the marketplace directory\n  `bash\n  creating plugin... done\n  Plugin: bigquery created successfully\n  \u2514\u2500 marketplace\n    \u2514\u2500 plugin\n        \u2514\u2500 bigquery`\n\n:::info\nFor more information on creating plugin for ToolJet, please see the documentation on creating plugins.",
    "tag": "tooljet"
  },
  {
    "title": "Introduction",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/intro.md",
    "content": "\nid: introduction\ntitle: Introduction\ndescription: ToolJet is an open-source low-code framework to build and deploy custom internal tools. ToolJet can connect to your data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ). Once the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc.\nslug: /\n\nIntroduction\nToolJet is an open-source low-code framework to build and deploy custom internal tools. ToolJet can connect to your data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ). Once the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc.\n\nHow ToolJet works\n\n\n![ToolJet - List view widget](/img/introduction/how-it-works.png)\n\n\nToolJet has just 3 fundamental principles for building apps:\n\nConnect to data sources: Connect to your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\nBuild queries: ToolJet comes with query builders for all supported data sources. ToolJet also supports the use of custom JavaScript code to transform the query results.\nCustomise widgets: Widgets are the UI components that can be edited using ToolJet's visual app builder ( Eg: tables, charts, forms, etc ). Widgets have events such as `on click`, `on row selected`, `on page changed`, etc. Every UI widget has a dark version. \n\nToolJet binds together the data sources, queries and widgets to convert business logic into custom applications.\nGetting Started\nThese resources will help you quickly build and deploy apps using ToolJet:\n\nBasic Tutorial - Learn how to build simple UI and connect to data sources.\nDeploy - Learn how to deploy ToolJet on Heroku, Kubernetes, etc \n\nThe references for data sources and widgets:\n\nDatasource Reference\nWidget Reference\n\nComplete tutorials\n\nBuild a GitHub star history tracker\nBuild an AWS S3 file explorer app\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\nBuild a coupon code manager app\n\nHelp and Support\n\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\n",
    "tag": "tooljet"
  },
  {
    "title": "Tracking    ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/tracking.md",
    "content": "\nid: tracking\ntitle: Tracking\nslug: /tracking\n\nTracking\n:::tip\nToolJet does not store any data fetched from the data sources. ToolJet acts as a proxy and the data from data sources is sent to the client application without storing.\n:::\nServer\n:::tip\nSelf-hosted version of ToolJet pings our server to fetch the latest product updates every 24 hours. You can disable this by setting the value of `CHECK_FOR_UPDATES` environment variable to `0`. This feature is enabled by default.\n:::\nClient\nToolJet tracks anonymous usage data such as page loads and clicks. ToolJet tracks only the events and doesn't capture data from data sources.",
    "tag": "tooljet"
  },
  {
    "title": "Security",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/security.md",
    "content": "\nid: security\ntitle: Security\nslug: /security\n\nSecurity\nData storage\nToolJet does not store data returned from your data sources. ToolJet server acts as a proxy and passes the data as it is to the ToolJet client. The credentials for the data sources are handled by the server and never exposed to the client. For example, if you are making an API request, the query is run from the server and not from the frontend.\nDatasource credentials\nAll the datasource credentials are securely encrypted using `aes-256-gcm`. The credentials are never exposed to the frontend ( ToolJet client ).\nOther security features\n\nTLS: If you are using ToolJet cloud, all connections are encrypted using TLS. We also have documentation for setting up TLS for self-hosted installations of ToolJet.\nAudit logs: Audit logs are available on the enterprise edition of ToolJet. Every user action is logged along with the IP addresses and user information.\nRequest logging: All the requests to server are logged. If self-hosted, you can easily extend ToolJet to use your preferred logging service. ToolJet comes with built-in Sentry integration.\nWhitelisted IPs: If you are using ToolJet cloud, you can whitelist our IP address (3.129.198.40) so that your datasources are not exposed to the public.\nBackups: ToolJet cloud is hosted on AWS using EKS with autoscaling and regular backups.\n",
    "tag": "tooljet"
  },
  {
    "title": "Single Sign-On General Settings",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/user-authentication/general-settings.md",
    "content": "\nid: general-settings\ntitle: General Settings\n\nSingle Sign-On General Settings\n\nSelect `Manage SSO` from workspace options\n\n\n\n  ![ToolJet - SSO configs](/img/password-login/organization-menu.png)\n\n  \n\nSelect `General Settings`\n\n\n\n  ![ToolJet - SSO configs](/img/sso/general/general-settings.png)\n\n  \nEnable Signup\nYou can enable/disable `Enable signup`. If it is enabled, new account will be created for user's first time SSO sign in else only existing users will be allowed to sign in via SSO.\nAllowed domains\nYou can set allowed domains for SSO login, can add multiple domains comma separated. Allowed all domains by default.\nLogin URL",
    "tag": "tooljet"
  },
  {
    "title": "User Lifecycle",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/user-authentication/user-lifecycle.md",
    "content": "\nid: user-lifecycle\ntitle: User Lifecycle\n\nUser Lifecycle\nSingle-Workspace\nUser onboarding\n\nIf no user is present in the system, there will be `Sign-up` option in the login page. User can sign up by entering their email address. Tooljet will be sending a welcome email with activation URL to the email address. User can follow the activation URL and onboard to ToolJet.\n\n\n\n  ![ToolJet - Single-Workspace sign up](/img/user-lifecycle/single-ws-signup.png)\n\n  \n\nUser with admin privileges can invite members\n\n\n\n  ![ToolJet - Single-Workspace invite user](/img/user-lifecycle/user-invite-sw.png)\n\n  \n\nInvited user will receive welcome email with activation URL, unregistered user can follow the link and setup Tooljet account\n\n\n\n  ![ToolJet - Single-Workspace accept invite](/img/user-lifecycle/accept-invite-sw.png)\n\n  \n\nInvited user can onboard through SSO login, without using an invitation link\n\n\n\n  ![ToolJet - Single-Workspace accept invite](/img/user-lifecycle/sso-onboard-sw.png)\n\n  \n\nIf `enable signup` option in enabled in SSO general settings, user can setup account through SSO login without an invite\n\n\n\n  ![ToolJet - Single-Workspace sign up using SSO](/img/user-lifecycle/sso-enable-signup-sw.png)\n\n  \nArchive user\n\n\nUser can be archived by workspace admin from using `Manage User` page\n\n\n\n\n\nUnarchive user\n\n\nUser can be unArchived by workspace admin from using `Manage User` page\n\n\n\n\n\n:::info\n  Archive or unarchive will affect user login, user won't be able to login using email id and password unless user is in active state\n  :::\nMulti-Workspace\n:::info\nCheck Multi-workspace docs here.\n:::\nUser onboarding\n\n\nUser can sign up using the sign up link provided on the login page, user will receive a welcome email with activation link. New workspace will be created for the user.\n\n\n\n\n\nUsers can be added to multiple workspaces. Users can create their own workspaces and manage them.\n\n\n\n\n\nExisting user in active state for a workspace can be invited and on boarded to other workspaces, User will receive an invitation email with join link. If a user does not exist in the system, then they will receive a welcome email to setup the account, user can follow the link and on setup the account, once its done the user will be assigned to the new workspace created for the user.\n\n\n\n\n\nInvited user can onboard through SSO login,  without using an invitation link from the workspace login page\n\n\n\n\n\nIf `enable sign up` option in enabled in SSO general settings for the workspace, user can setup account through SSO login without an invite from the workspace login page\n\n\n\n\n\nArchive user\n\n\nUser can be archived by workspace admin from using `Manage User` page\n\n\n\n\n\nUnarchive user\n\n\nUser can be unarchive by workspace admin from using `Manage User` page\n\n\n\n\n\n:::info\n  Archive or unarchive will not affect user login, user can login and use other workspaces where user is in active state.\n  :::\nSwitch between workspaces\n\n\n  ![ToolJet - Single-Workspace sign up using SSO](/img/user-lifecycle/switch.png)\n\n  \nUser status\n| Status   | Able to log in   | How to activate                      |\n| -------- | ---------------- | ------------------------------------ |\n| active   | Yes              |                                      |\n| invited  | No (Yes with SSO)| Login through SSO or invitation link |\n| archived | No               | Not able to activate. Invite from `Manage Users` page, status will be changed to invited |\nMulti-Workspace SSO flow\n\nDiagram shows how SSO configurations are chosen in common login page and workspace login page. Instance level SSO is configured in environment variables and Workspace level SSO is configured in respective `Manage SSO` page.\n\n\n\n    ![ToolJet - SSO Flow](/img/user-lifecycle/sso-flow.png)",
    "tag": "tooljet"
  },
  {
    "title": "GitHub Single Sign-on",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/user-authentication/sso/github.md",
    "content": "\nid: github\ntitle: GitHub\n\nGitHub Single Sign-on\nSelect `Manage SSO` from workspace options\n\n\n![ToolJet - SSO configs](/img/password-login/organization-menu.png)\n\n\nSelect `GitHub`, GitHub login will be disabled by default\n\n\n![ToolJet - SSO configs](/img/sso/git/manage-sso-1.png)\n\n\nEnable GitHub. You can see `Redirect URL` generated\n\n\n![ToolJet - SSO configs](/img/sso/git/manage-sso-2.png)\n\n\nGo to GitHub Developer settings and navigate to `OAuth Apps` and create a project. `Authorization callback URL` should be the generated `Redirect URL` in Git manage SSO page.\n\n\n![ToolJet - GitHub create project](/img/sso/git/create-project.png)\n\n\n\nOpen the application details, and you can see the `Client ID`\n\n\n\n![ToolJet - GitHub view client id](/img/sso/git/client-id.png)\n\n\n\nThen create `Client secrets` by clicking `Generate new client secret`\n\n\n\n![ToolJet - GitHub create client secret](/img/sso/git/client-secret.png)\n\n\nLastly, enter `Client Id` and `Client Secret` in GitHub manage SSO page and save.\nThe GitHub sign-in button will now be available in your ToolJet login screen if you have not enabled Multi-Workspace.\n:::info\nShould configure `Host Name` if you are using GitHub Enterprise self hosted. Host name should be a URL and should not ends with `/`, example: `https://github.tooljet.com`\n:::\nMulti-Workspace\nIf you have enabled Multi-Workspace you can configure GitHub SSO as mentioned above, for setting default SSO for the instance use environment variable.\n| variable                              | description                                                   |\n| ------------------------------------- | -----------------------------------------------------------   |\n| SSO_GIT_OAUTH2_CLIENT_ID              | GitHub OAuth client id |\n| SSO_GIT_OAUTH2_CLIENT_SECRET          | GitHub OAuth client secret |\n| SSO_GIT_OAUTH2_HOST                   | GitHub OAuth host name if GitHub is self hosted |",
    "tag": "tooljet"
  },
  {
    "title": "Google Single Sign-on",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/user-authentication/sso/google.md",
    "content": "\nid: google\ntitle: Google\n\nGoogle Single Sign-on\nSelect `Manage SSO` from workspace options\n\n\n![ToolJet - SSO configs](/img/password-login/organization-menu.png)\n\n\nSelect `Google`, Google login will be disabled by default\n\n\n![ToolJet - SSO configs](/img/sso/google/manage-sso-1.png)\n\n\nEnable Google. You can see `Redirect URL` generated\n\n\n![ToolJet - SSO configs](/img/sso/google/manage-sso-2.png)\n\n\nGo to Google cloud console and create a project.\n\n\n![ToolJet - Google create project](/img/sso/google/create-project.png)\n\n\n\nGo to the Google cloud console credentials page, and create an OAuth client ID\n\n\n\n![ToolJet - Google create client id](/img/sso/google/create-oauth.png)\n\n\n\nYou'll be asked to select user type in consent screen. To allow only users within your workspace, select 'Internal', otherwise,\nselect 'External'.\n\n\n\n![ToolJet - OAuth user type](/img/sso/google/oauth-type.png)\n\n\n\nYou'll be led to an app registration page where you can set OAuth scopes. Select 'Add or remove scopes' and add the scopes\nuserinfo.email and userinfo.profile as shown in the image. This will allow ToolJet to store the email and name of the\nuser who is signing in\n\n\n\n![ToolJet - OAuth scope](/img/sso/google/scope.png)\n\n\n\nSet the domain on which ToolJet is hosted as an authorized domain\n\n\n\n![ToolJet - authorized domain](/img/sso/google/authorized-urls.png)\n\n\nSet the `Redirect URL` generated at manage SSO `Google` page under Authorised redirect URIs\n\n\n![ToolJet - authorized redirect urls](/img/sso/google/authorized-redirect-urls.png)\n\n\nLastly, set the `client id` in google manage SSO page. This value will be available from your Google cloud console credentials page\nThe Google sign-in button will now be available in your ToolJet login screen, if you are not enabled Multi-Workspace.\nMulti-Workspace\nIf you have enabled Multi-Workspace you can configure Google SSO as mentioned above, for setting default SSO for the instance use environment variable.\n| variable                              | description                                                   |\n| ------------------------------------- | -----------------------------------------------------------   |\n| SSO_GOOGLE_OAUTH2_CLIENT_ID           | Google OAuth client id |",
    "tag": "tooljet"
  },
  {
    "title": "AzureAD Single Sign-on",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/user-authentication/sso/openid/azuread.md",
    "content": "\nid: azuread\ntitle: AzureAD\n\nAzureAD Single Sign-on\n:::info\nTo construct a Well Known URL refer this link :: https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-protocols-oidc\n:::\n\n\nOpen your organisation page and select `app registration`\n\n\n\n\n\nSelect `new registration`\n\n\n\n\n\nOpen your organisation page and select app registration.\n\n\nEnter name, select supported account type and enter the redirect URL which can be copied from `Manage SSO -> Open Id -> Redirect URL, click on register`.\n    \n\n\n\n\nApplication will be registered and will be able to view the details\n\n\nConfigure Application (Client) ID as `client id` in Open Id configuration page.\n    \n\n\n\n\nClick on `Add certificate or secret` next to the Client credentials.\n\n\nClick on `+New Client Secret`\n\n\n\n\n\nGive a description, set the expiry, and then click on the `Add` button.\n    \n\n\n\n\nSecret will be created, copy value and add it to the `client secret` section of Open Id SSO config.\n\n\nYou can brand the redirect page using the branding and properties option.\n    \n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Okta Single Sign-on",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/user-authentication/sso/openid/okta.md",
    "content": "\nid: okta\ntitle: Okta\n\nOkta Single Sign-on\n\n\nSign in to Okta developer console\n\n\nGo to the `Applications` section and click on the `Create App Integration`\n\n\n\n\n\nSelect `Sign-in method` as `OIDC - OpenID Connect` and `Application type` as `Web Application`. Go to the next step\n    \n\n\n\n\nEnter `App integration name` and then enter `Sign-in redirect URIs` as `<YOUR-DOMAIN>/sso/okta`.\n    \n\n\n\n\nCreate application and configure `Client Credentials` in the UI. \n    \n\n\n\n\nIf you wish to show your application on Okta, edit the application and select `Login initiated by` section as `Either Okta or App`, set visibility according to your preference and `Login flow` should `Redirect to app to initiate login (OIDC Compliant)`.\n\n\n\n\n![ToolJet - Okta create application](/img/sso/okta/create-app-s5.png)\n\n\n:::info Change Grant type\nTo change the Login flow to `Redirect to app to initiate login (OIDC Compliant)`, its mandatory to change the `Grant type` - `Client acting on behalf of a user` section to `Implicit (hybrid)` and tick `Allow Access Token with implicit grant type`.\n:::\n\nThe Okta sign-in button will now be available in your ToolJet login screen.\n\n:::info\nTo find Well Known URL refer this Link: https://developer.okta.com/docs/concepts/auth-servers/#org-authorization-server",
    "tag": "tooljet"
  },
  {
    "title": "google-openid.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/user-authentication/sso/openid/google-openid.md",
    "content": "\nid: google-openid\ntitle: Google (Open ID)\n\n\nSelect `Manage SSO` from workspace options\n\n\n\n![ToolJet - SSO configs](/img/password-login/organization-menu.png)\n\n\n\nSelect `Open ID Connect` from the left sidebar\n\n\n\n![ToolJet - SSO configs](/img/sso/google-openid/openid.png)\n\n\n\n\nSet Name as `Google` and get the Client ID and Client Secret from your Google Clound Console.\n\n\nSet the Well Known URL to `https://accounts.google.com/.well-known/openid-configuration`\n\n\nGenerating Cliend ID and Cliend Secret on GCS\n\nGo to Google cloud console and create a project.\n\n\n\n![ToolJet - Google create project](/img/sso/google/create-project.png)\n\n\n\nGo to the Google cloud console credentials page, and create an OAuth client ID\n\n\n\n![ToolJet - Google create client id](/img/sso/google/create-oauth.png)\n\n\n\nYou'll be asked to select user type in consent screen. To allow only users within your workspace, select 'Internal', otherwise,\nselect 'External'.\n\n\n\n![ToolJet - OAuth user type](/img/sso/google/oauth-type.png)\n\n\n\nYou'll be led to an app registration page where you can set OAuth scopes. Select 'Add or remove scopes' and add the scopes\nuserinfo.email and userinfo.profile as shown in the image. This will allow ToolJet to store the email and name of the\nuser who is signing in\n\n\n\n![ToolJet - OAuth scope](/img/sso/google/scope.png)\n\n\n\nSet the domain on which ToolJet is hosted as an authorized domain\n\n\n\n![ToolJet - authorized domain](/img/sso/google/authorized-urls.png)\n\n\n\nSet the `Redirect URL` generated at manage SSO `Open ID` page under Authorised redirect URIs\n\n\n\n![ToolJet - authorized redirect urls](/img/sso/google/authorized-redirect-urls.png)\n\n\n\nNow, you can view your client ID and client secret from the Credentials page in API Console:\nGo to the Credentials page.\nClick the name of your credential or the pencil icon. Your client ID and secret are at the top of the page.\n",
    "tag": "tooljet"
  },
  {
    "title": "Preview and Sharing Apps",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/tutorial/sharing-and-deploying.md",
    "content": "\nid: sharing-and-deploying\ntitle: Preview and Sharing Apps\n\nPreview and Sharing Apps\nPreview\nClicking on `Preview` will open up the currently opened version of the app in the new tab. This is useful if you want to immediately check the app in production.\n\nSharing an app\nOnce you have released a version of your app, you can share the app with others using a customised url. To share an app:\n\nClick on the Share button on the top-right corner\n\n\n\n\n\nIn the dialog box, turn on the toggle switch to `Make the application public` and shareable\n\n\n\n\n\nCreate your own `customised URL` for the app and click on `copy` to copy the URL\n\n\n\n\n\nYou can also `Embedd` your application using the embeddable link\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Adding a data source",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/tutorial/adding-a-datasource.md",
    "content": "\nid: adding-a-datasource\ntitle: Adding a data source\n\nAdding a data source\n:::tip\nThe data sources are created on app level and not on workspace level.\n:::\nDatasource manager is on the left-sidebar of the app builder. To add a new data source, click on the  `Add datasource` button.\n\nYou will be prompted to select the data source that you wish to add. Let's select PostgreSQL for this tutorial. You will then need to provide the credentials of your PostgreSQL database. The fields that are marked as `encrypted` will be encrypted before saving to ToolJet's database. \n\n\n![ToolJet - Tutorial - Adding a data source](/img/tutorial/adding-datasource/datasources.png)\n\n\nThe name of the data source must be unique (within the app) and can be changed by clicking on the data source name at the top of the prompt. Click on `Test Connection` button to verify the connection, this might take a couple of minutes. Once verified, save the data source. \n:::tip\nIf you are using ToolJet cloud and if your data source is not publicly accessible, please white-list our IP address ( shown while creating a new data source ).\n:::\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Multi-Workspace",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/tutorial/multiworkspace.md",
    "content": "\nid: multiworkspace\ntitle: Multi-Workspace\n\nMulti-Workspace\nUser can create their own workspaces, user who created workspace will be having admin privileges for the workspace.\n\nHierarchy\n\n\n\nPermissions\n\nThe administrator can manage users and groups of each workspace\nApplications and settings can not be shared between workspaces\nA user authorised to login to Tooljet will not have access to all workspaces, Usesr should be invited or signed up to a workspace to log-in to it.\n\nEnabling Multi-Workspace\nSet environment variable DISABLE_MULTI_WORKSPACE value to false  to enable the feature, and true  to disable it.\nWhen enabled\n\nWhen Multi-Workspace feature is enabled, user should login with username and password to log in to Tooljet.\nAdministrator can configure authentication methods for their workspaces.\nIf password login is enabled, switching to the workspace will happen without any other authorization since the user is already authorized with password login.\nUser logged in to Toojet and trying to switch to a workspace where SSO is enabled and password login is disabled, will be redirected to workspace login page and enabled SSO options will be shown\nUser can directly login to a workspace using workspace login URL, Administrator can view the URL Manage SSO -> General Settings -> Login URL.\n\nWhen disabled\n\nIf Multi-Workspace is disabled, Create workspace feature won\u2019t be available.\n",
    "tag": "tooljet"
  },
  {
    "title": "Debugger    ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/tutorial/debugger.md",
    "content": "\nid: debugger\ntitle: Debugger\n\nDebugger\nThe debugger captures errors that happens while running the queries. For example, when a database query fails due to the unavailability of a database or when a REST API query fails due to an incorrect URL, the errors will be displayed on the debugger. The debugger also displays relevant data related to the error along with the error message. Debugger is located on the left-sidebar.\n\nPin Debugger\nYou can click on the `pin` icon at the top-right corner of the debugger if you do not want the debugger to close. The debugger will remain open until it is unpinned.",
    "tag": "tooljet"
  },
  {
    "title": "Keyboard Shortcuts",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/tutorial/keyboard-shortcuts.md",
    "content": "\nid: keyboard-shortcuts\ntitle: Keyboard Shortcuts\n\nKeyboard Shortcuts\nYou can perform operations like undo, redo, clone, or removing the widget directly using the keyboard shortcuts.\nCopy\nYou can copy the component  on the visual app editor using the following shortcut keys:\nOn Mac: `cmd + c`\nOn Linux/Windows: `ctrl + c`\n\n\n\nPaste\nYou can paste the selected component  using the following shortcut keys:\nOn Mac: `cmd + v`\nOn Linux/Windows: `ctrl + v`\n\n\n\n:::caution\nThere are few edge cases when copy-paste commands might not work:\n- The URL should be `https` and it won't work on http on many browsers\n- Recent Firefox versions has some issue with copy functionality\n:::\nUndo\nYou can undo any operation performed on the visual app editor using the following shortcut keys:\nOn Mac: `cmd + z`\nOn Linux/Windows: `ctrl + z`\n\n\n\nRedo\nIf you have `undo` an operation and want to redo that again than you can use the following shortcut keys:\nOn Mac: `cmd + shift + z`\nOn Linux/Windows: `ctrl + shift + z`\n\n\n\nClone\nNow you can create multiple clones of any widget without having to drag and drop the widget again from the sidebar. Just select any widget that you want to create a clone and use the following shortcut keys:\nOn Mac: `cmd + d`\nOn Linux/Windows: `ctrl + d`\n\n\n\nRemove widget\nNow you can delete a selected widget by using the following shortcut keys:\nOn Mac: `delete`\nOn Linux/Windows: `backspace`\n\n\n\nUnselect the selected widget\nYou can quickly deselect a widget using the `esc` key.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Building Queries",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/tutorial/building-queries.md",
    "content": "\nid: building-queries\ntitle: Building Queries\n\nBuilding Queries\nQuery Editor lives at the bottom of the page. We will now build a query for the PostgreSQL datasource that we connected in the previous step.\n:::tip \nYou can click on the 'enlarge' icon to enlarge query editor pane. \n:::\n\nClick on the `+` icon of the query editor to create a new query.\nSelect the PostgreSQL datasource created in previous step.\nCopy the query given below and paste on the query area.\nSelect SQL mode\n\n`sql\nSELECT * FROM customers;`\n\nQuery results can be previewed by clicking the `preview` button. Previewing queries will not alter the state of the app.\n\nAdvanced options\n\nRun query on page load\nIf this option is enabled, the query will be run when the app is loaded for the first time. The queries can have more than one trigger, ie the same query can later be triggered again using a button's click event or table's row selected event or any other events.\nRequest confirmation before running query\nEnable this option to show a prompt to confirm the action before a query is run. The confirmation prompt will look like this:\n\n\n\nShow notification on success",
    "tag": "tooljet"
  },
  {
    "title": "Versioning and Release",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/tutorial/versioning-and-release.md",
    "content": "\nid: versioning-and-release\ntitle: Versioning and Release\n\nVersioning and Release\nVersioning and Release lets you version control your apps and release app changes to the users. \nVersioning\nVersioning is really useful if multiple developers are working on an app, it allows them to save their own version of the app. This also prevents developers from overwriting the other developer's work. \nCreating a Version\nYou can create new versions from App Version Manager on the top-right corner. It displays the version of the app that you're currently working and can be used to switch between the different version of the app. To create a new version:\n\nGo to the App Version Manager and click on the dropdown. It will display all the versions of the app that have been created.\n\n\n\n\n\nClick on Create Version and a modal will pop-up. Enter a Version Name and click on Create version from dropdown that will include all the versions of the app, choose a version that you want to use for your new version and then click on `Create Version`.\n\n\n\n\nRelease\nMaking a release let's you publish the app and push the changes to production.\nReleasing a version\nTo release a version:\n\nGo to the App Version Manager and select the `version` from the dropdown that you want to release.\n\n\n\n\n\nClick on the `Release` button on the top-right corner.\n\n\n\n\n:::tip \nToolJet will block editing of the `Released version` of an app and will display a prompt to create a new version to make the changes. This is to prevent accidentally pushing an unfinished app to the live version.\n\n\n![ToolJet - Managing Users and Groups](/img/tutorial/versioning-and-release/prompt.png)\n\n\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Transformations",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/tutorial/transformations.md",
    "content": "\nid: transformations\ntitle: Transformations\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nTransformations\nTransformations can be enabled on queries to transform the query results. ToolJet allows you to transform the query results using two programming languages: \n\nJavaScript \nPython \n\n:::caution\n- Every transformation is scoped to the query it's written for. \n- Actions and CSA(Component Specific Actions) cannot be called within the transformation, they can only be called within `RunJS`.\n:::\nTransform using JavaScript\nLet's write a simple transformation to compute `first_name` and `last_name` for all the customers that we fetch in the previous step.\n`javascript\n// write your code here\n// return value will be set as data and the original data will be available as rawData\nreturn data.map((row) => {\n  return {\n    ...row,\n    first_name: row.name.split(' ')[0],\n    last_name: row.name.split(' ')[1],\n  };\n});`\nThe query will now look like this:\n\nTransform using Python\nLet's use Python transformation to compute `first_name` and `last_name` for all the customers that we fetch in the previous step.\n`python\nreturn list(map(lambda row: {\n  **row,\n  'first_name': row['name'].split(' ')[0],\n  'last_name': row['name'].split(' ')[1],\n}, data))`\nExample\n\n\nLet's take a look at the data returned by a RESTAPI (using mock data here):\n\n\n\n\n\n\n\nNow we will transform the returned data using Python that will append a new key in the returned data called `user` and that user will have the value from the exposed global variables of ToolJet which is `globals.currentUser.email`\n`python\n  return list(map(lambda item: {**item, \"user\": f\"{globals['currentUser']['email']}\"}, data))`\n\n\nNow, you can click on the preview button to check the transformed data.\n\n\n\n\n\n\n\n\nClick the `create` button to create the query. Saved queries can be run using the `run` icon near the query name. Queries run using the run button will behave just as if it was triggered by an app event like button click and thus will alter the state of the app. You can view the query results using the state inspector on the left side-bar of the app builder.\n\nWe can see that `first_name` and `last_name` are added to all the rows in the `data` object of the query. If you need the original data of the query, it will be available in the `rawData` object of the query.\n\n\n\nIn the next section, we will see how we can display this data using ToolJet's built-in widgets.",
    "tag": "tooljet"
  },
  {
    "title": "Adding a widget",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/tutorial/adding-widget.md",
    "content": "\nid: adding-widget\ntitle: Adding a widget\n\nAdding a widget\nTo add a widget, navigate to the `Widget manager` on the right sidebar. It will display the list of built-in widgets that can be added to the app. Use the search functionality to quickly find the widget that you want.\n\nDrag and drop a widget\nLet's add a `table` widget to the app to show the customer data from the query that we created in the previous steps.\nTo add a widget, drag and drop the widget to the canvas.\nResize a widget\nThe widgets can be resized and repositioned within the canvas.\n\nAdding widgets to Modal\nTo add a widget to Modal, we need to trigger Show modal action\n:::info\nBefore triggering `Show modal action` we need to add a modal widget to the canvas.\n:::\n\nAdd a `modal widget` to the app\nTrigger the Show modal action\nClick on the canvas area for the `Widget manager` sidebar\nNavigate to the Widget manager on the right sidebar and Drag and drop a widget into the Modal\n\n\nResize table columns\nWe can resize the column width using the resize handle of the column.\n\nChange widget properties\nClick on the widget to open the inspect panel on right sidebar. Here you can change the properties of the widgets. Let's configure the table columns to display the customer data. The display order of columns can be changed by dragging icon near the column name.\n\nConnecting data with widget\nNow we will connect the `data` object of the `fetch customers` query with the table. Click on the table widget to open the inspector on the right sidebar. We can see that the data property of the table has an empty array as the value. The data field, like almost every other field on the editor supports single-line javascript code within double brackets. Variable suggestions will be shown as a dropdown while you type the code in the field.\nLet's select the `data` object of the 'postgresql' query.\n`{{queries.postgresql1.data}}`\nSince we have already run the query in the previous step, the data will be immediately displayed in the table.\n\nSo far in this tutorial, we have connected to a PostgreSQL database and displayed the data on a table.\n:::tip\nRead the widget reference of table here for more customizations such as server-side pagination, actions, editing data.",
    "tag": "tooljet"
  },
  {
    "title": "Adding actions",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/tutorial/actions.md",
    "content": "\nid: actions\ntitle: Adding actions\n\nAdding actions\nToolJet supports several actions that can be invoked as the handler for any `event` that is triggered in an application.\nTo add actions\nTo attach an action for component events, click on the component's handle, and then click on the `Add handler` button on the\ninspector panel available on the right side.  \nTo attach an action for query events, select the query, go to the `advanced` tab and then click on the `Add handler` button.\nAvailable actions\nSome of the actions that ToolJet Support are\nAction| Description|\n   ----| -----------  |\n   Show alert | Show an alert message as a bootstrap toast           |\n   Run query | Run any of the data queries that you have created           |\n   Open webpage | Go to another webpage in a new tab          |\n   Goto app | Go to another ToolJet application          |\n   Show modal | Open any modal that you've added          |\n   Close modal | Close any modal that you've added if its already open          |\n   Copy to clipboard | Copy any available text that you see on the application to clipboard          |\n   Set localStorage | Set a key and corresponding value to localStorage          |",
    "tag": "tooljet"
  },
  {
    "title": "How can we add these variables to an Workspace?",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/tutorial/workspace-environment-variables.md",
    "content": "\nid: workspace-environment-variables\ntitle: Workspace Variables\n\nWorkspace Variables are the variables with some value(usually tokens/secret keys/API keys) that can be used in different apps across the same Workspace.\nHow can we add these variables to an Workspace?\nSuppose there is an `API key` or a value that you want to use in the queries or widgets in the multiple apps of the same Workspace then the Workspace admin or the user with permissions can add an environment variable.\nAdding the environment variable\n\nGo to the ToolJet Dashboard, and click on the dropdown on the navigation bar to show `Workspace` options\nSelect `Manage Environment Variables`\nClick on `Add New Variable` button\nGive a `Name` to the variable, set the value, choose `Type`, toggle `Encryption`, and click Add Variable button\nNow this variable can be used inside any application of this Workspace\n\n\nTypes of variables\n\n\nClient: The client variable can be used in widgets and queries.\n\n\nServer: The server variables can be used with all the queries except the `RunJS`. The reason why we don't allow the server variables to be used with the widgets is that these variables are only resolved during the runtime so they're highly secured.\n\n\n:::info\nVariable Type cannot be changed once it has been created.\n:::\n\nEncryption\nThis feature enables us to add a client variable with and without `encryption`. The server variables are always encrypted by default.\nUsing variable in an app\nLet's use the variable that we created here. If you have used ToolJet before, then you know that for getting the values from any variable we use JS notation i.e. `{{}}` but for using the Workspace variables we have different opening and closing notation `%% %%`. The environment variables will not work inside js code `{{}}`.\nSo, the syntax for using the variable that we created before will be `%%client.pi%%`\nExample for client variable usage:\n\nExample for server variable usage:",
    "tag": "tooljet"
  },
  {
    "title": "App menu options",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/tutorial/app-menu-options.md",
    "content": "\nid: app-menu-options\ntitle: App menu options\n\nApp menu options\nOptions that are available in the overflow menu of the app card are:\n\nChange Icon\nAdd to folder\nClone app\nExport app\nDelete app\n\n\n\n\nChange Icon\nThe icon on the app cards can be customised by selecting the `Change Icon` option.\n\n\n\nAdd to folder\nToolJet allows you to create folders (`+ Create new folder` from the left sidebar) on the dashboard, and any application can be added to these folders.\n\n\n\nClone app\nAny application created on ToolJet can be cloned using the `Clone app` option. The cloned application is the exact copy of the original app except that the user will have to re-enter the datasource credentials in cloned app.\nExport app\nExport app option will allow the users to download `JSON` file with all the information about your application(excluding credentials). This JSON file can be used to import this application to the same or other workspace.\nUsers get the option to export:\n- the currently released version\n- a particular version from list latest version to oldest version\n- all versions\n\n\n\nDelete app\nUse this option to complete remove the app from the workspace.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Creating new app",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/tutorial/creating-app.md",
    "content": "\nid: creating-app\ntitle: Creating new app\n\nCreating new app\n:::info\nApps in ToolJet binds the widgets, data sources and queries together.\n:::\nThis tutorial will walk you through building a simple app to fetch customer information from a PostgreSQL database and display the data using the table widget.\nTo create a new ToolJet app, click on the 'Create new application' button on the ToolJet dashboard. \n\nYou will be redirected to the visual app editor once the app has been created. Create the first version of your app to start building. The name of the app can be changed by clicking on the app name at top-left of the app builder.\n\n\n![ToolJet - Creating an app](/img/tutorial/creating-new-app/visual-app-editor.png)\n\n\nThe main components of an app: \n\nWidgets - UI components such as tables, buttons, and dropdowns etc.\nData sources - ToolJet can connect to databases, APIs and external services to fetch and modify data.\n",
    "tag": "tooljet"
  },
  {
    "title": "Mobile layout",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/tutorial/mobile-layout.md",
    "content": "\nid: mobile-layout\ntitle: Mobile layout\n\nMobile layout\nMobile layout is activated when the width of the window is less than 600px.\n:::tip\nWidgets can be shown on desktop, mobile, or both.\n:::\n\nAdding existing widget to mobile layout\nClick on the widget to open inspector. Scroll down to the `layout` section and enable mobile layout. The width of the widget will be adjusted to fit the mobile layout.\nAdding a new widget to mobile layout\nSwitch the layout to mobile by clicking the button on the top navigation bar. Drag and drop a widget to the canvas. This widget will not be shown on desktop layout unless enabled from the widget inspector via the \"Show on desktop\" button manually.\n:::tip\nWidth of the widgets will be automatically adjusted to fit the screen while viewing the application in app viewer.",
    "tag": "tooljet"
  },
  {
    "title": "Managing Users and Groups",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/tutorial/manage-users-groups.md",
    "content": "\nid: manage-users-groups\ntitle: Managing Users and Groups\n\nManaging Users and Groups\nManaging Users\nAdmin of a workspace can add users to the workspace. To manage the users in your workspace, just go to the Workspace menu on top right corner and click on the Manage Users.\n\nInviting users\nAdmins can invite anyone to a workspace using the email address. To invite a user:\n\nOn the Manage Users page click on the `Invite new user` button.\n\n\n\nNow enter the details of new user such as first name, last name, email, and then click on the Create User.\n\n\n\nAn email including the Invite Link to join your workspace will be send to the created user. The status will turn from invited to active after the user successfully joins your workspace using the invite link.\n\n:::tip\nYou can also copy the invitation url by clicking on the copy icon next to `invited` status of the created user.\n:::\n\nDisabling a user's access\nYou can disable any active user's access to your workspace by clicking on the Archive and then the status of the user will change from active to archived.\n\nEnabling a user's access\nSimilar to archiving a user's access, you can enable it again by clicking on Unarchive. The status of user will change from archived to invited and the user will have to join again using the invite link received via the e-mail.\n\nManaging Groups\nOn ToolJet, Admins can create groups for users added in a workspace and grant them access to particular app(s) with specific permissions. To manage groups, just go to the Account menu on top right corner and click on the Manage Groups.\n\nGroup properties\nEvery group on ToolJet has three components:\nApps:\nAdmins can add or remove any number of apps for a group of users. To add an app to a group, select an app from the dropdown and click on `Add` button next to it. You can also set app permissions such as `View` or `Edit` for the group. You can set different permissions for different apps in a group.\n\nUsers:\nAdmins can add or remove any numbers of users in a group. Just select a user from the dropdown and click on `Add` button to add it to a group. To delete a user from a group, click on `Delete` button next to it.\n\nPermissions:\nAdmins can set granular permission like creating/deleting apps or creating folder for a group of users.\n\n:::tip\nAll the activities performed by any Admin or any user in a workspace is logged in `Audit logs` - including any activity related with managing users and groups.\n:::\nPredefined Groups\nBy default, every workspace will have two User Groups:\n1. All Users\nThis group contains all the users and admins.\n| Apps | Users | Permissions |\n| ----------- | ----------- | ----------- |\n| You can add or remove apps. | Modification is disabled. This group will have all the users and admins added in a workspace. | You can edit permissions for all the users globally. |\n\n2. Admin\nThis group contains admins by default. Admins can add more admins or remove the users in this group.\n| Apps | Users | Permissions |\n| ----------- | ----------- | ----------- |\n| Modification is disabled. By default, this group has `Edit` permission for all the apps in a workspace  | Admins can add or remove users in this group. | Modification is disabled. By default, all the admins can create and delete apps or create folders. |\n\nCreating new group\n\nClick on `Create new group` button in the User Groups page.\n\n\n\nEnter a name for the group and click `Create Group` button.\n\n\n\nOnce the group is created, you can add Apps, Users and set their Properties for that group.\n\nDeleting a group\nTo delete a group, click on `Delete` next to it. It will confirm whether you want to delete it or not, Click on `Yes` to delete the group.",
    "tag": "tooljet"
  },
  {
    "title": "White Label",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/Enterprise/white-label.md",
    "content": "\nid: white-label\ntitle: White Label\n\nWhite Label\nWhite Label feature will allow you to remove the ToolJet branding from the ToolJet platform and add your own custom logo and text.\nThis feature allows you to rebrand the following:\n- App logo (Logo on login screen, dashboard, and app-editor)\n\n\n\n\nFavicon\n\n\nPage Title (next to Favicon)\n\n\n\nConfiguration\nTo enable white labelling, you'll need to set the below mentioned environment variables in the .env file:\n\n`WHITE_LABEL_LOGO`: URL of the logo. Preferred dimensions of the logo are: width 130px and height 26px\n`WHITE_LABEL_TEXT`: The text that you want to display as Page Title\n",
    "tag": "tooljet"
  },
  {
    "title": "Audit logs",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/Enterprise/audit_logs.md",
    "content": "\nid: audit_logs\ntitle: Audit logs\n\nAudit logs\nThe audit log is the report of all the activities done in your ToolJet account. It will capture and display events automatically by recording who performed an activity, what when, and where the activity was performed, along with other information such as IP address.\n\nFilter audit logs\nAudited events can be filtered using the below characteristics:\nSelect Users\nSelect a specific user from this dropdown to check all their activities. \nSelect Apps\nThe dropdown will list all the apps present in your account. Choose an app to filter the logs associated with that app.\nSelect Resources\n| Resources  | description |\n| ----------- | ----------- |\n| User | Filter all the User events like `USER_LOGIN`, `USER_SIGNUP`, `USER_INVITE`, AND `USER_INVITE_REDEEM`. |\n| App | Filter all the App events like `APP_CREATE`, `APP_UPDATE`,`APP_VIEW`,`APP_DELETE`,`APP_IMPORT`,`APP_EXPORT`,`APP_CLONE`. |\n| Data Query | Filters the events associated with Data Query like `DATA_QUERY_RUN`. |\n| Group Permission | All the events associated with Group Permissions will be filtered. Group Permissions include `GROUP_CREATE`, `GROUP_UPDATE`, `GROUP_DELETE`. |\n| App Group Permission | Within each group, you can set apps for read or edit privileges. These events get recorded as App Group Permissions. |\nSelect Actions\n| Actions  | description |\n| ----------- | ----------- |\n| USER_LOGIN | This event is recorded everytime a user logins. |\n| USER_SIGNUP | This event is recorded everytime a new signup is made. |\n| USER_INVITE | You can invite users to your account from `Manage Users` section and an event is audited everytime an invite is sent. |\n| USER_INVITE_REDEEM | This event is recorded whenever an invite is redeemed. |\n| APP_CREATE | This event is recorded when a user creates a new app. |\n| APP_UPDATE | This event is recorded whenever actions like renaming the app, making the app public, editing shareable link, or deploying the app are made. |\n| APP_VIEW | This event is logged when someone views the launched app. (public apps aren't accounted for) |\n| APP_DELETE | This event is recorded whenever a user deletes an app from the dashboard. |\n| APP_IMPORT | This event is recorded whenever a user imports an app. |\n| APP_EXPORT | This event is recorded whenever an app is exported. |\n| APP_CLONE | This event is recorded whenever a clone of the existing app is created. |\n| DATA_QUERY_RUN | This event is logged whenever a data source is added, a query is created, or whenever a query is run either from the query editor or from the launched app. |\n| GROUP_PERMISSION_CREATE | This event is recorded whenever a group is created. |\n| GROUP_PERMISSION_UPDATE | This event is recorded whenever an app or user is added to or removed from a group, or the permissions for a group are updated. |\n| GROUP_PERMISSION_DELETE | This event is recorded whenever a user group is deleted from an account. |\n| APP_GROUP_PERMISSION_UPDATE | For every app added in to user group, you can set privileges like `View` or `Edit` and whenever these privileges are updated this event is recorded. By default, the permission of an app for a user group is set to `View`. |\n:::info\nIt is mandatory to set a Data Range in `From` and `To` to filter audit logs.\n:::\nUnderstanding information from logs\n\n| Property  | description |\n| ----------- | ----------- |\n| action_type | It is the type of action that was logged in this event. Refer this to know about actions. |\n| created_at | Displays the date and time of a logged event.  |\n| id | Every event logged has a specific event id associated with it. |\n| ip_address | Displays the IP address from where the event was logged. |\n| metadata | Metadata includes two sub-properties - `tooljet_version` and `user_agent`. `tooljet_version` displays the version of ToolJet used for the logged event and `user_agent` contains information about the device and browser used for that event. |\n| organization_id | Every organization in ToolJet has an id associated with it and is recorded when an event occurs. |\n| resource_id | There are several resources and for each resource that is created, an id gets associated with it.|\n| resource_name | Displays the name of the resources that were logged in the event. For example, if an app was created or deleted then it will display the name of the app. |\n| resource_type | Displays the type of the resources that were logged in the event. |",
    "tag": "tooljet"
  },
  {
    "title": "AWS EC2",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/setup/ec2.md",
    "content": "\nid: ec2\ntitle: AWS EC2\n\nAWS EC2\n:::info\nYou should setup a PostgreSQL database manually to be used by the ToolJet server.\n:::\nFollow the steps below to deploy ToolJet on AWS EC2 instances.\n\n\nSetup a PostgreSQL database and make sure that the database is accessible from the EC2 instance.\n\n\nLogin to your AWS management console and go to the EC2 management page.\n\n\nUnder the `Images` section, click on the `AMIs` button.\n\n\nFind the ToolJet version you want to deploy. Now, from the AMI search page, select the search type as \"Public Images\" and input the version you'd want `AMI Name : tooljet_vX.X.X.ubuntu_bionic` in the search bar.\n\n\nSelect ToolJet's AMI and bootup an EC2 instance.\n\n\nCreating a new security group is recommended. For example, if the installation should receive traffic from the internet, the inbound rules of the security group should look like this:\nprotocol| port     | allowed_cidr|\n   ----| -----------  | ----------- |\n   tcp | 22           | your IP |\n   tcp | 80           | 0.0.0.0/0 |\n   tcp | 443          | 0.0.0.0/0   |\n\n\nOnce the instance boots up, SSH into the instance by running `ssh -i <path_to_pem_file> ubuntu@<public_ip_of_the_instance>`\n\n\nSwitch to the app directory by running `cd ~/app`. Modify the contents of the `.env` file. ( Eg: `vim .env` )\n\n\nThe default `.env` file looks like this:\n   `bash\n   TOOLJET_HOST=http://<example>\n   LOCKBOX_MASTER_KEY=<example>\n   SECRET_KEY_BASE=<example>\n   PG_DB=tooljet_prod\n   PG_USER=<pg user name>\n   PG_HOST=<pg host>\n   PG_PASS=<pg user password>`\n   Read environment variables reference\n:::info\n   If there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates.\n   :::\n\n`TOOLJET_HOST` environment variable determines where you can access the ToolJet client. It can either be the public ipv4 address of your instance or a custom domain that you want to use.\n\nExamples:\n   `TOOLJET_HOST=http://12.34.56.78` or\n   `TOOLJET_HOST=https://yourdomain.com` or\n   `TOOLJET_HOST=https://tooljet.yourdomain.com`\n:::info\n   We use a lets encrypt plugin on top of nginx to create TLS certificates on the fly.\n   :::\n:::info\n   Please make sure that `TOOLJET_HOST` starts with either `http://` or `https://`\n   :::\n\n\nOnce you've configured the `.env` file, run `./setup_app`. This script will install all the dependencies of ToolJet and then will start the required services.\n\n\nIf you've set a custom domain for `TOOLJET_HOST`, add a `A record` entry in your DNS settings to point to the IP address of the EC2 instance.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Kubernetes",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/setup/kubernetes.md",
    "content": "\nid: kubernetes\ntitle: Kubernetes\n\nDeploying ToolJet on Kubernetes\n:::info\nYou should setup a PostgreSQL database manually to be used by ToolJet.\n:::\nFollow the steps below to deploy ToolJet on a Kubernetes cluster.\n\n\nSetup a PostgreSQL database\n   ToolJet uses a postgres database as the persistent storage for storing data related to users and apps. We do not have plans to support other databases such as MySQL.\n\n\nCreate a Kubernetes secret with name `server`. For the minimal setup, ToolJet requires `pg_host`, `pg_db`, `pg_user`, `pg_password`, `secret_key_base` & `lockbox_key` keys in the secret.\n\n\nRead environment variables reference\n\nCreate a Kubernetes deployment\n\n`bash\n    kubectl apply -f https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/deployment.yaml`\n:::info\nThe file given above is just a template and might not suit production environments. You should download the file and configure parameters such as the replica count and environment variables according to your needs.\n:::\n:::info\nIf there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates. You can make use of kubernetes secrets to mount the certificate file onto the containers.\n:::\n\nVerify if ToolJet is running\n\n`bash\n    kubectl get pods`\n\nCreate a Kubernetes services to publish the Kubernetes deployment that you've created. This step varies with cloud providers. We have a template for exposing the ToolJet server as a service using an AWS loadbalancer.\n\nExamples:\n   - Application load balancing on Amazon EKS\n   - GKE Ingress for HTTP(S) Load Balancing\n:::tip\nIf you want to serve ToolJet client from services such as Firebase or Netlify, please read the client Setup documentation here.",
    "tag": "tooljet"
  },
  {
    "title": "Try ToolJet",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/setup/try-tooljet.md",
    "content": "\nid: try-tooljet\ntitle: Try ToolJet\n\nTry ToolJet\nOn local with Docker\nYou can run the command below to have ToolJet up and running right away.\n`bash\ndocker run \\\n  --name tooljet \\\n  --restart unless-stopped \\\n  -p 3000:3000 \\\n  -v tooljet_data:/var/lib/postgresql/13/main \\\n  tooljet/try:latest`\nSetup information\n\nRuns the ToolJet server on the port 3000 on your machine.\nContainer has postgres already configured within. All the data will be available in the docker volume `tooljet_data`.\nDefault user credentials to login (email: `dev@tooljet.io`, password: `password`).\nYou can make use of `--env` or `--env-file` flag to test against various env configurables mentioned here.\nUse `docker stop tooljet` to stop the container and `docker start tooljet` to start the container thereafter.\n\nOn Play with docker\nYou can deploy ToolJet on PWD for free with the one-click-deployment button below.\n\n\n\nSetup information\n\nDefault user credentials to login (email: `dev@tooljet.io`, password: `password`).\nOpen port 3000 after the docker containers are up and running\n",
    "tag": "tooljet"
  },
  {
    "title": "tooljet-subpath.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/setup/tooljet-subpath.md",
    "content": "\nid: tooljet-subpath\ntitle: Deploying ToolJet on a subpath\n\nToolJet can now be deployed at a subpath rather than the root (`/`) of a public domain. Example subpath installation URL: `http://www.yourcompany.com/apps/tooljet`\nYou'll need to setup the following environment variables if ToolJet installation is on a domain subpath:\n| variable | value |\n| -------- | ---------------------- |\n| TOOLJET_HOST | the public URL ( eg: https://www.yourcompany.com )  |\n| SERVE_CLIENT | By default, this variable will be unset and the server will serve the client at its `/` end-point. You can set `SERVE_CLIENT` to `false` to disable this behaviour. |\n| SUB_PATH | Set a subpath to this variable. The subpath is to be set with trailing `/` and is applicable only when the server is serving the frontend client. ( eg: `/apps/tooljet/` )  |\n:::info\nSee all Environment Variables here.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Heroku",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/setup/heroku.md",
    "content": "\nid: heroku\ntitle: Heroku\n\nDeploying ToolJet on Heroku\n\nFollow the steps below to deploy ToolJet on Heroku:\n\n\nClick the button below to start one click deployment.\n\n\n\n   [![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/tooljet/tooljet/tree/main)\n\n   \n\n\n\nOn Heroku tab, you'll be asked to provide an `App name` and `Choose a region`. Enter the name for your deployment and select the region according to your choice.\n\n\n\n\n\n\nNow let's enter the `Config vars` to configure additional environment variables that are required for the installation.\nLOCKBOX_MASTER_KEY: ToolJet server uses lockbox to encrypt datasource credentials. You should set the environment variable LOCKBOX_MASTER_KEY with a 32 byte hexadecimal string. If you have OpenSSL installed, you can run the command `openssl rand -hex 32` to generate the key.\nNODE_ENV: By default NODE_ENV is set to production. \nNODE_OPTIONS: Node options are configured to increase node memory to support app build.\nSECRET_KEY_BASE: ToolJet server uses a secure 64 byte hexadecimal string to encrypt session cookies. You should set the environment variable SECRET_KEY_BASE. If you have OpenSSL installed, you can run the command `openssl rand -hex 64` to generate the key.\nTOOLJET_HOST: Public URL of ToolJet installation. This is usually `https://<app-name-in-first-step\\>.herokuapp.com`.\n\nTOOLJET_SERVER_URL: URL of ToolJet server installation. (This is same as the TOOLJET_HOST for Heroku deployments)\n\n\nClick on `Deploy app` button at the bottom to initiate the build.\n\n\nAfter the successful build, you'll see two buttons at the bottom: `Manage App` and `View`. Click on the `View` to open the app or click on `Manage App` to configure any settings.\n\n\n\n\n\n\nThe default username of the admin is `dev@tooljet.io` and the password is `password`.\n\n\n\n\n:::tip\nThe one click deployment will create a free dyno and a free postgresql database.\n:::\n:::tip\nToolJet server and client can be deployed as standalone applications. If you do not want to deploy the client on Heroku, modify `package.json` accordingly. We have a guide on deploying ToolJet client using services such as Firebase.",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Google Cloud Run",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/setup/google-cloud-run.md",
    "content": "\nid: google-cloud-run\ntitle: Google Cloud Run\n\nDeploying ToolJet on Google Cloud Run\n:::info\nYou should setup a PostgreSQL database manually to be used by ToolJet.\n:::\nFollow the steps below to deploy ToolJet on Cloud run with `gcloud` CLI.\nDeploying ToolJet application\n\nCloud Run requires prebuilt image to be present within cloud registry. You can pull specific tooljet image from docker hub and then tag with your project to push it to cloud registry.\n\n`bash\n   gcloud auth configure-docker\n   docker pull tooljet/tooljet-ce:latest\n   docker tag tooljet/tooljet-ce:latest gcr.io/<replace-your-project-id>/tooljet/tooljet-ce:latest\n   docker push gcr.io/<replace-your-project-id>/tooljet/tooljet-ce:latest`\n\nDeploy new cloud run service\n\n:::info\nThis command takes the assumption that certain required environment has already been created in secrets. If you haven't created already then use the secret manager.\n:::\n`bash\n   gcloud run deploy tooljet-ce --image gcr.io/<replace-your-project-id>/tooljet/tooljet-ce:latest  \\\n   --allow-unauthenticated \\\n   --cpu 1 \\\n   --memory 1Gi \\\n   --min-instances 1 \\\n   --set-env-vars \"TOOLJET_HOST=https://<replace-your-public-host>.com\" \\\n   --set-secrets \"PG_HOST=PG_HOST:latest\" \\\n   --set-secrets \"PG_DB=PG_DB:latest\" \\\n   --set-secrets \"PG_USER=PG_USER:latest\" \\\n   --set-secrets \"PG_PASS=PG_PASS:latest\" \\\n   --set-secrets \"LOCKBOX_MASTER_KEY=LOCKBOX_MASTER_KEY:latest\" \\\n   --set-secrets \"SECRET_KEY_BASE=SECRET_KEY_BASE:latest\" \\\n   --args \"npm,run,start:prod\"`\nUpdate `TOOLJET_HOST` environment variable if you want to use the default url assigned with Cloud run after the initial deploy.\n:::tip\nIf you are using Public IP for Cloud SQL, then database host connection (value for `PG_HOST`) needs to be set using unix socket format, `/cloudsql/<CLOUD_SQL_CONNECTION_NAME>`. Additionally you will also have to set this flag with the above command:\n`--set-cloudsql-instances <CLOUD_SQL_CONNECTION_NAME>`\nwhere `<CLOUD_SQL_CONNECTION_NAME>` is the name of the connection to your Cloud SQL instance, which you can find on its settings page. \n:::\n\nCreate default user (Optional)\n\nSigning up requires SMTP configuration to be done, but if you want to start off with default user you can run the command by modifying the `args` flag for a one time usage.\n`bash\n   gcloud run deploy <replace-service-name> \\\n   --image gcr.io/<replace-your-project-id>/tooljet/tooljet-ce:latest \\\n   --args \"npm,run,--prefix,server,db:seed\"`\nThe deployment will fail as it runs a seed script. Check logs to see that default user was created. Now run the following command to have the app deployed.\n`bash\n   gcloud run deploy <replace-service-name> \\\n   --image gcr.io/<replace-your-project-id>/tooljet/tooljet-ce:latest \\\n   --args \"npm,run,start:prod\"`\nThe default username of the admin is `dev@tooljet.io` and the password is `password`.\nDeploying only ToolJet server\n\nCloud Run requires prebuilt image to be present within cloud registry. You can pull specific tooljet image from docker hub and then tag with you project to push it to cloud registry.\n\n`bash\n   gcloud auth configure-docker\n   docker pull tooljet/tooljet-server-ce:latest\n   docker tag tooljet/tooljet-server-ce:latest gcr.io/<replace-your-project-id>/tooljet/tooljet-server-ce:latest\n   docker push gcr.io/<replace-your-project-id>/tooljet/tooljet-server-ce:latest`\n\nDeploy new cloud run service\n\n:::info\nThis command takes the assumption that certain required environment has already been created in secrets. If you haven't created already then use the secret manager.\n:::\n`bash\n   gcloud run deploy tooljet-server-ce --image gcr.io/<replace-your-project-id>/tooljet/tooljet-server-ce:latest  \\\n   --allow-unauthenticated \\\n   --cpu 1 \\\n   --memory 1Gi \\\n   --min-instances 1 \\\n   --set-env-vars \"SERVE_CLIENT=false\" \\\n   --set-env-vars \"TOOLJET_HOST=https://<replace-your-public-host>.com\" \\\n   --set-secrets \"PG_HOST=PG_HOST:latest\" \\\n   --set-secrets \"PG_DB=PG_DB:latest\" \\\n   --set-secrets \"PG_USER=PG_USER:latest\" \\\n   --set-secrets \"PG_PASS=PG_PASS:latest\" \\\n   --set-secrets \"LOCKBOX_MASTER_KEY=LOCKBOX_MASTER_KEY:latest\" \\\n   --set-secrets \"SECRET_KEY_BASE=SECRET_KEY_BASE:latest\" \\\n   --args \"npm,run,start:prod\"`\n:::tip\nIf you are using Public IP for Cloud SQL, then database host connection (value for `PG_HOST`) needs to be set using unix socket format, `/cloudsql/<CLOUD_SQL_CONNECTION_NAME>`. Additionally you will also have to set this flag with the above command:\n`--set-cloudsql-instances <CLOUD_SQL_CONNECTION_NAME>`\nwhere `<CLOUD_SQL_CONNECTION_NAME>` is the name of the connection to your Cloud SQL instance, which you can find on its settings page. \n:::\n:::info\n  If there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates. The certificate can be mount as a volume onto the container using secrets.\n:::\n\nCreate default user (Optional)\n\nSigning up requires SMTP configuration to be done, but if you want to start off with default user you can run the command by modifying the `args` flag for a one time usage.\n`bash\n   gcloud run deploy <replace-service-name> \\\n   --image gcr.io/<replace-your-project-id>/tooljet/tooljet-server-ce:latest \\\n   --args \"npm,run,db:seed:prod\"`\nThe deployment will fail as it only runs a seed script. Check logs to see that default user was created. Now run the following command to have the app deployed.\n`bash\n   gcloud run deploy <replace-service-name> \\\n   --image gcr.io/<replace-your-project-id>/tooljet/tooljet-server-ce:latest \\\n   --args \"npm,run,start:prod\"`",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Amazon ECS",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/setup/ecs.md",
    "content": "\nid: ecs\ntitle: AWS ECS\n\nDeploying ToolJet on Amazon ECS\n:::info\nYou should setup a PostgreSQL database manually to be used by ToolJet.\n:::\nFollow the steps below to deploy ToolJet on a ECS cluster.\n\n\nSetup a PostgreSQL database\n    ToolJet uses a postgres database as the persistent storage for storing data related to users and apps.\n\n\nCreate a target group and an application load balancer to route traffic onto ToolJet containers.\n    You can reference AWS docs to set it up. Please note that ToolJet server exposes `/api/health`, which you can configure for health checks.\n:::note\nThis setup follows the old AWS UI for ECS as some options are missing on the latest experience.\n:::\n\n\nCreate task definition for deploying ToolJet app as a service on your preconfigured cluster.\n\n\nSelect Fargate as launch type compatibility.\n    \n\n\nConfigure IAM roles and set operating system family as Linux\n    \n\n\nSelect task size to have 3GB of memory and 1vCpu\n    \n\n\nClick on add container to update container definitions\n    \nWithin the add container form that is shown:\n\nSpecify your container name ex: `tooljet-ce`\nSet the image you intend to deploy. ex: `tooljet/tooljet-ce:v1.26.0`\n\nUpdate port mappings at container port `3000` for tcp protocol.\n  \n\n\nUpdate container command field to be `npm,run,start:prod`.\n  \n\n\nSpecify environmental values for the container. You'd want to make use of secrets to store sensitive information or credentials, kindly refer the AWS docs to set it up.\n\n\n\n:::note\n  For the minimal setup, ToolJet requires:\n  `TOOLJET_HOST`, `PG_HOST`, `PG_DB`, `PG_USER`, `PG_PASSWORD`, `SECRET_KEY_BASE` & `LOCKBOX_MASTER_KEY` keys in the secret.\nRead environment variables reference\n:::\n\n\n\n\nCreate a service to run your task definition within your cluster.\n\nSelect launch type as Fargate.\nSet operating system family as Linux\nSelect task definition family as the one created earlier. ex: `tooljet-ce`\nSelect the cluster and set the service name\nYou can set the number of tasks to start with as two\nRest of the values can be kept as default\n  \nClick on next step to configure networking options\nSelect your designated VPC, Subnets and Security groups. Kindly ensure that the security group allows for inbound traffic to http port 3000 for the task.\n  \nSince migrations are run as a part of container boot, please specify health check grace period for 900 seconds.\nSelect the application loadbalancer option and set the target group name to the one we had created earlier. This will auto populate the health check endpoints.\n\n\n\n:::info\nThe setup above is just a template. Feel free to update the task definition and configure parameters for resources and environment variables according to your needs.\n:::\n\nVerify if ToolJet is running by checking by checking the status of the tasks in the created service.\n\nCreating default admin workspace and account\nYou can create a new revision of your existing task definition to have a one time task to seed with default admin.\n\nCreate a new revision from your existing task definition.\n      You can change task definition name to `tooljet-seed-task`\nClick on your existing container name to edit container.\nChange container command from `npm,run,start:prod` to `npm,run,db:seed:prod`\nGo back to your cluster dashboard and click on Run new task.\n      \nConfigure your run task with the `tooljet-seed-task` for your cluster. It should look like:\n      \nClick on run task to have this task seed the database with user having following credentials:\nemail: `dev@tooljet.io`\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Kubernetes (GKE)",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/setup/kubernetes-gke.md",
    "content": "\nid: kubernetes-gke\ntitle: Kubernetes (GKE)\n\nDeploying ToolJet on Kubernetes (GKE)\n:::info\nYou should setup a PostgreSQL database manually to be used by ToolJet. We recommend using Cloud SQL since this guide is for deploying using GKE.\n:::\nFollow the steps below to deploy ToolJet on a GKE Kubernetes cluster.\n\nCreate an SSL certificate.\n\n`bash\ncurl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/GKE/certificate.yaml`\nChange the domain name to the domain/subdomain that you wish to use for ToolJet installation.\n\nReserve a static IP address using `gcloud` cli\n\n`bash\ngcloud compute addresses create tj-static-ip --global`\n\nCreate k8s deployment\n\n`bash\ncurl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/GKE/deployment.yaml`\nMake sure to edit the environment variables in the `deployment.yaml`. You can check out the available options here.\n:::info\nIf there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates. You can make use of kubernetes secrets to mount the certificate file onto the containers.\n:::\n\nCreate k8s service\n\n`bash\ncurl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/GKE/service.yaml`\n\nCreate k8s ingress\n\n`bash\ncurl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/GKE/ingress.yaml`\nChange the domain name to the domain/subdomain that you wish to use for ToolJet installation.\n\nApply YAML configs\n\n`bash\nkubectl apply -f certificate.yaml, deployment.yaml, service.yaml, ingress.yaml`\n:::info\nIt might take a few minutes to provision the managed certificates. Managed certificates documentation.\n:::\nYou will be able to access your ToolJet installation once the pods, service and the ingress is running.\nIf you want to seed the database with a sample user, please SSH into a pod and run:\n`npm run db:seed:prod --prefix server`\nThis seeds the database with a default user with the following credentials:\nemai: `dev@tooljet.io`",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on Kubernetes (AKS)",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/setup/kubernetes-aks.md",
    "content": "\nid: kubernetes-aks\ntitle: Kubernetes (AKS)\n\nDeploying ToolJet on Kubernetes (AKS)\n:::info\nYou should setup a PostgreSQL database manually to be used by ToolJet. We recommend using Azure Database for PostgreSQL since this guide is for deploying using AKS.\n:::\nFollow the steps below to deploy ToolJet on a AKS Kubernetes cluster.\n\n\nCreate an AKS cluster and connect to it to start with the deployment. You can follow the steps as mentioned on the Azure's documentation.\n\n\nCreate k8s deployment\n\n\n`bash\n    curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/AKS/deployment.yaml`\nMake sure to edit the environment variables in the `deployment.yaml`. We advise to use secrets to setup sensitive information. You can check out the available options here.\n:::info\nIf there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates. You can make use of kubernetes secrets to mount the certificate file onto the containers.\n:::\n\n\nCreate k8s service and reserve a static IP and inorder expose it via a service load balancer as mentioned in the doc. You can refer `service.yaml`.\n   `bash\n    curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/kubernetes/AKS/service.yaml`\n\n\nApply YAML configs\n\n\n`bash\n    kubectl apply -f deployment.yaml, service.yaml`\nYou will be able to access your ToolJet installation once the pods and services running.\nIf you want to seed the database with a sample user, please SSH into a pod and run:\n`npm run db:seed:prod --prefix server`\nThis seeds the database with a default user with the following credentials:\nemail: `dev@tooljet.io`",
    "tag": "tooljet"
  },
  {
    "title": "Environment variables",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/setup/env-vars.md",
    "content": "\nid: env-vars\ntitle: Environment variables\n\nEnvironment variables\nBoth the ToolJet server and client requires some environment variables to start running.\nToolJet server\nToolJet host ( required )\n| variable     | description                                                     |\n| ------------ | --------------------------------------------------------------- |\n| TOOLJET_HOST | the public URL of ToolJet client ( eg: https://app.tooljet.com )  |\nLockbox configuration ( required )\nToolJet server uses lockbox to encrypt datasource credentials. You should set the environment variable `LOCKBOX_MASTER_KEY` with a 32 byte hexadecimal string.\nApplication Secret ( required )\nToolJet server uses a secure 64 byte hexadecimal string to encrypt session cookies. You should set the environment variable `SECRET_KEY_BASE`.\n:::tip\nIf you have `openssl` installed, you can run the following commands to generate the value for `LOCKBOX_MASTER_KEY` and `SECRET_KEY_BASE`.\nFor `LOCKBOX_MASTER_KEY` use `openssl rand -hex 32`\nFor `SECRET_KEY_BASE` use `openssl rand -hex 64`\n:::\nDatabase configuration ( required )\nToolJet server uses PostgreSQL as the database.\n| variable | description            |\n| -------- | ---------------------- |\n| PG_HOST  | postgres database host |\n| PG_DB    | name of the database   |\n| PG_USER  | username               |\n| PG_PASS  | password               |\n:::tip\nIf you are using docker-compose setup, you can set PG_HOST as `postgres` which will be DNS resolved by docker\n:::\nDisable database and extension creation (optional)\nToolJet by default tries to create database based on `PG_DB` variable set and additionally my try to create postgres extensions. This requires the postgres user to have CREATEDB permission. If this cannot be granted you can disable this behaviour by setting `PG_DB_OWNER` as `false` and will have to manually run them.\nCheck for updates ( optional )\nSelf-hosted version of ToolJet pings our server to fetch the latest product updates every 24 hours. You can disable this by setting the value of `CHECK_FOR_UPDATES` environment variable to `0`. This feature is enabled by default.\nComment feature enable ( optional )\nUse this environment variable to enable/disable the feature that allows you to add comments on the canvas.\n| variable | value            |\n| -------- | ---------------------- |\n| COMMENT_FEATURE_ENABLE  | `true` or `false` |\nMultiplayer feature enable ( optional )\nUse this environment variable to enable/disable the feature that allows users to collaboratively work on the canvas.\n| variable | value            |\n| -------- | ---------------------- |\n| ENABLE_MULTIPLAYER_EDITING  | `true` or `false` |\nMarketplace feature enable ( optional )\nUse this environment variable to enable/disable the feature that allows users to use the marketplace.\n| variable | value            |\n| -------- | ---------------------- |\n| ENABLE_MARKETPLACE_FEATURE  | `true` or `false` |\nServer Host ( optional )\nYou can specify a different server for backend if it is hosted on another server.\n| variable | value            |\n| -------- | ---------------------- |\n| SERVER_HOST  | Configure a hostname for the server as a proxy pass. If no value is set, it defaults to `server`. |\nDisable Multi-Workspace ( optional )\nIf you want to disable Multi-Workspace feature, set the environment variable `DISABLE_MULTI_WORKSPACE` to `true`.\nHide account setup link\nIf you want to hide account setup link from admin in manage user page, set the environment variable `HIDE_ACCOUNT_SETUP_LINK` to `true`, please make sure you have configured SMTP to receive welcome mail for users. Valid only if `DISABLE_MULTI_WORKSPACE` is not `true`.\nDisabling signups ( optional )\nSign up is enabled only if Multi-Workspace is enabled. If you want to restrict the signups and allow new users only by invitations, set the environment variable `DISABLE_SIGNUPS` to `true`.\n:::tip\nYou will still be able to see the signup page but won't be able to successfully submit the form.\n:::\nServe client as a server end-point ( optional )\nBy default, the `SERVE_CLIENT` variable will be unset and the server will serve the client at its `/` end-point.\nYou can set `SERVE_CLIENT` to `false` to disable this behaviour.\nServe client at subpath\nIf ToolJet is hosted on a domain subpath, you can set the environment variable `SUB_PATH` to support it.\nPlease note the subpath is to be set with trailing `/` and is applicable only when the server is serving the frontend client.\nSMTP configuration ( optional )\nToolJet uses SMTP services to send emails ( Eg: invitation email when you add new users to your workspace ).\n| variable           | description                               |\n| ------------------ | ----------------------------------------- |\n| DEFAULT_FROM_EMAIL | from email for the email fired by ToolJet |\n| SMTP_USERNAME      | username                                  |\n| SMTP_PASSWORD      | password                                  |\n| SMTP_DOMAIN        | domain or host                            |\n| SMTP_PORT          | port                                      |\nSlack configuration ( optional )\nIf your ToolJet installation requires Slack as a data source, you need to create a Slack app and set the following environment variables:\n| variable            | description                    |\n| ------------------- | ------------------------------ |\n| SLACK_CLIENT_ID     | client id of the slack app     |\n| SLACK_CLIENT_SECRET | client secret of the slack app |\nGoogle OAuth ( optional )\nIf your ToolJet installation needs access to data sources such as Google sheets, you need to create OAuth credentials from Google Cloud Console.\n| variable             | description   |\n| -------------------- | ------------- |\n| GOOGLE_CLIENT_ID     | client id     |\n| GOOGLE_CLIENT_SECRET | client secret |\nGoogle maps configuration ( optional )\nIf your ToolJet installation requires `Maps` widget, you need to create an API key for Google Maps API.\n| variable            | description         |\n| ------------------- | ------------------- |\n| GOOGLE_MAPS_API_KEY | Google maps API key |\nAPM VENDOR ( optional )\nSpecify application monitoring vendor. Currently supported values - `sentry`.\n| variable   | description                               |\n| ---------- | ----------------------------------------- |\n| APM_VENDOR | Application performance monitoring vendor |\nSENTRY DNS ( optional )\n| variable   | description                               |\n| ---------- | ----------------------------------------- |\n| SENTRY_DNS |  DSN tells a Sentry SDK where to send events so the events are associated with the correct project  |\nSENTRY DEBUG ( optional )\nPrints logs for sentry.\n| variable   | description                               |\n| ---------- | ----------------------------------------- |\n| SENTRY_DEBUG | `true` or `false`. Default value is `false` |\nServer URL ( optional)\nThis is used to set up for CSP headers and put trace info to be used with APM vendors.\n| variable           | description                                                 |\n| ------------------ | ----------------------------------------------------------- |\n| TOOLJET_SERVER_URL | the URL of ToolJet server ( eg: https://server.tooljet.com ) |\nRELEASE VERSION ( optional)\nOnce set any APM provider that supports segregation with releases will track it.\nNODE_EXTRA_CA_CERTS (optional)\nTooljet needs to be configured for custom CA certificate to be able to trust and establish connection over https. This requires you to configure an additional env var `NODE_EXTRA_CA_CERTS` to have absolute path to your CA certificates. This file named `cert.pem` needs to be in PEM format and can have more than one certificates.\n| variable            | description                                                       |\n| ------------------  | ----------------------------------------------------------------- |\n| NODE_EXTRA_CA_CERTS | absolute path to certificate PEM file ( eg: /ToolJet/ca/cert.pem ) |\nDisable telemetry ( optional )\nPings our server to update the total user count every 24 hours. You can disable this by setting the value of `DISABLE_TOOLJET_TELEMETRY` environment variable to `true`. This feature is enabled by default.\nPassword Retry Limit (Optional)\nThe maximum retry limit of login password for a user is by default set to 5, account will be locked after 5 unsuccessful login attempts. Use the variables mentioned below to control this behavior:\n| variable                              | description                                                   |\n| ------------------------------------- | -----------------------------------------------------------   |\n| DISABLE_PASSWORD_RETRY_LIMIT          | (true/false) To disable the password retry check, if value is `true` then no limits for password retry |\n| PASSWORD_RETRY_LIMIT                  | To change the default password retry limit (5) |\nSSO Configurations (Optional)\nConfigurations for instance level SSO. Valid only if `DISABLE_MULTI_WORKSPACE` is not `true`.\n| variable                              | description                                                   |\n| ------------------------------------- | -----------------------------------------------------------   |\n| SSO_GOOGLE_OAUTH2_CLIENT_ID           | Google OAuth client id |\n| SSO_GIT_OAUTH2_CLIENT_ID              | GitHub OAuth client id |\n| SSO_GIT_OAUTH2_CLIENT_SECRET          | GitHub OAuth client secret |\n| SSO_GIT_OAUTH2_HOST                   | GitHub OAuth host name if GitHub is self hosted |\n| SSO_ACCEPTED_DOMAINS                  | comma separated email domains that supports SSO authentication |\n| SSO_DISABLE_SIGNUPS                   | Disable user sign up if authenticated user does not exist |\nToolJet client\nServer URL ( optionally required )\nThis is required when client is built separately.\n| variable           | description                                                 |\n| ------------------ | ----------------------------------------------------------- |\n| TOOLJET_SERVER_URL | the URL of ToolJet server ( eg: https://server.tooljet.com ) |\nServer Port ( optional)\nThis could be used to for local development, it will set the server url like so: `http://localhost:<TOOLJET_SERVER_PORT>`\n| variable            | description                             |\n|---------------------|-----------------------------------------|\n| TOOLJET_SERVER_PORT | the port of ToolJet server ( eg: 3000 ) |\nAsset path ( optionally required )\nThis is required when the assets for the client are to be loaded from elsewhere (eg: CDN).\nThis can be an absolute path, or relative to main HTML file.\n| variable           | description                                                   |\n| ------------------ | -----------------------------------------------------------   |\n| ASSET_PATH         | the asset path for the website ( eg: https://app.tooljet.com/) |\nServe client as a server end-point ( optional )\nBy default the client build will be done to be served with ToolJet server.",
    "tag": "tooljet"
  },
  {
    "title": "Try ToolJet with Docker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/setup/docker-local.md",
    "content": "\nid: docker-local\ntitle: Try ToolJet locally\n\nTry ToolJet with Docker\n:::info\nThis doc is not for setting up the development environment, it is only for trying out ToolJet locally using Docker. Check out Contributing Guide.\n:::\nYou can run the command below to have ToolJet up and running right away.\n`bash\ndocker run \\\n  --name tooljet \\\n  --restart unless-stopped \\\n  -p 3000:3000 \\\n  -v tooljet_data:/var/lib/postgresql/13/main \\\n  tooljet/try:latest`\nSetup information\n\nRuns the ToolJet server on the port 3000 on your machine.\nContainer has postgres already configured within. All the data will be available in the docker volume `tooljet_data`.\nDefault user credentials to login (email: `dev@tooljet.io`, password: `password`).\nYou can make use of `--env` or `--env-file` flag to test against various env configurables mentioned here.\n",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet on DigitalOcean",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/setup/digitalocean.md",
    "content": "\nid: digitalocean\ntitle: DigitalOcean\n\nDeploying ToolJet on DigitalOcean\nNow you can quickly deploy ToolJet using the Deploy to DigitalOcean button.\nDeploying\nFollow the steps below to deploy ToolJet on DigitalOcean:\n\nClick on the button below to start one click deployment\n\n\n\n  [![Deploy to DigitalOcean](https://www.deploytodo.com/do-btn-blue.svg)](https://cloud.digitalocean.com/apps/new?repo=https://github.com/ToolJet/ToolJet/tree/main)\n\n  \n\nA new tab will open up, sign-in to your DigitalOCean account. Once signed-in, the Create App page will open up and Resources will be already selected. Click on Next button.\n\n\n\nNow, on Environment Variables page you can add new variables or edit the existing ones. Check the environment variables here.\n\n\n\nOn the next page, you can change the App name, Project, and the Region.\n\n\n\nOn the last page, you'll be asked to Review all the app details such that we entered before such as Resources, Environment Variables, Region, and there will also be Billing section at the end. Review all the details and click the Create Resource button.\n\n\n\nOnce you click the Create Resource button, the build will begin. Once the build is complete, you'll see the resource and a URL next to it. Click on the URL to open the deployed ToolJet.\n\n:::tip\nToolJet server and client can be deployed as standalone applications. If you do not want to deploy the client on DigitalOcean, modify `package.json` accordingly. We have a guide on deploying ToolJet client using services such as Firebase.",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet using Docker Compose",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/setup/docker.md",
    "content": "\nid: docker\ntitle: Docker\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nDeploying ToolJet using Docker Compose\nFollow the steps below to deploy ToolJet on a server using Docker Compose. ToolJet requires a PostgreSQL database to store applications definitions, (encrypted) credentials for datasources and user authentication data.\n:::info\nIf you rather want to try out ToolJet on your local machine with Docker, you can follow the steps here.\n:::\nInstalling Docker and Docker Compose\nInstall docker and docker-compose on the server.\n   - Docs for Docker Installation\n   - Docs for Docker Compose Installation\nDeployment options\nThere are four options to deploy ToolJet using Docker Compose:\n1.   Using an external PostgreSQL database. This setup is recommended if you want to use a managed PostgreSQL service such as AWS RDS or Google Cloud SQL.\n2.   Using in-built PostgreSQL database. This setup uses the official Docker image of PostgreSQL.\n3.   Using an external PostgreSQL database and auto SSL. Recommended only if you want the Docker container itself to do SSL termination.\n4.   Using in-built PostgreSQL database and auto SSL. Recommended only if you want the Docker container itself to do SSL termination.\nConfused about which setup to select? Feel free to ask the community via Slack: https://tooljet.com/slack.\n:::info\nWe recommend using the managed PostgreSQL service on production for ease of administration, security, and management (backups, monitoring, etc).\nIf you'd want to run postgres with persistent volume rather, curl for the alternate docker compose file shared in the next step.\n:::\n\n\n\n\nSetup a PostgreSQL database and make sure that the database is accessible.\n\n\nDownload our production docker-compose file into the server.\n  `bash\n  curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/docker/docker-compose.yaml`\n\n\nCreate `.env` file in the current directory (where the docker-compose.yaml file is downloaded):\n\n\n`bash\n  curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/docker/.env.example\n  mv .env.example .env`\nSet up environment variables in `.env` file as explained in environment variables reference\n`TOOLJET_HOST` environment variable can either be the public ipv4 address of your server or a custom domain that you want to use.\nExamples:\n  `TOOLJET_HOST=http://12.34.56.78` or\n  `TOOLJET_HOST=https://yourdomain.com` or\n  `TOOLJET_HOST=https://tooljet.yourdomain.com`\n:::info\n  Please make sure that `TOOLJET_HOST` starts with either `http://` or `https://`\n  :::\n:::info\n  If there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates.\n  :::\n\nOnce you've populated the `.env` file, run\n\n`bash\n  docker-compose up -d`\nto start all the required services.\n:::info\n  If you're running a linux server, `docker` might need sudo permissions. In that case you can either run:\n  `sudo docker-compose up -d`\n  or\n  setup docker to run without root privileges by following the instructions written here https://docs.docker.com/engine/install/linux-postinstall/\n  :::\n\nIf you've set a custom domain for `TOOLJET_HOST`, add a `A record` entry in your DNS settings to point to the IP address of the server.\n\n\n\n\n\nDownload our production docker-compose file into the server.\n  `bash\n  curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/docker/docker-compose-db.yaml\n  mv docker-compose-db.yaml docker-compose.yaml\n  mkdir postgres_data`\n\n\nCreate `.env` file in the current directory (where the docker-compose.yaml file is downloaded):\n\n\n`bash\n  curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/docker/.env.example\n  mv .env.example .env`\nSet up environment variables in `.env` file as explained in environment variables reference\n`TOOLJET_HOST` environment variable can either be the public ipv4 address of your server or a custom domain that you want to use.\nExamples:\n  `TOOLJET_HOST=http://12.34.56.78` or\n  `TOOLJET_HOST=https://yourdomain.com` or\n  `TOOLJET_HOST=https://tooljet.yourdomain.com`\n:::info\n  Please make sure that `TOOLJET_HOST` starts with either `http://` or `https://`\n  :::\n:::info\n  If there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates.\n  :::\n\nOnce you've populated the `.env` file, run\n\n`bash\n  docker-compose up -d`\nto start all the required services.\n:::info\n  If you're running on a linux server, `docker` might need sudo permissions. In that case you can either run:\n  `sudo docker-compose up -d`\n  OR\n  Setup docker to run without root privileges by following the instructions written here https://docs.docker.com/engine/install/linux-postinstall/\n  :::\n\nIf you've set a custom domain for `TOOLJET_HOST`, add a `A record` entry in your DNS settings to point to the IP address of the server.\n\n\n\n\n\nSetup a PostgreSQL database and make sure that the database is accessible.\n\n\nDownload our production docker-compose file into the server.\n  `bash\n  curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/docker/docker-compose-ssl.yaml\n  mv docker-compose-ssl.yaml docker-compose.yaml`\n\n\nCreate `.env` file in the current directory (where the docker-compose.yaml file is downloaded):\n\n\n`bash\n  curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/docker/.env.example\n  mv .env.example .env`\nSet up environment variables in `.env` file as explained in environment variables reference\n`TOOLJET_HOST` environment variable can either be the public ipv4 address of your server or a custom domain that you want to use.\n:::info\n  We use the lets encrypt plugin on top of nginx to create TLS certificates on the fly.\n  And in case you want to modify the nginx config, you can use this template and then mount the volume at `/etc/openresty/nginx.conf.template` on the client container.\n  :::\nExamples:\n  `TOOLJET_HOST=http://12.34.56.78` or\n  `TOOLJET_HOST=https://yourdomain.com` or\n  `TOOLJET_HOST=https://tooljet.yourdomain.com`\n:::info\n  Please make sure that `TOOLJET_HOST` starts with either `http://` or `https://`\n  :::\n:::info\n  If there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates.\n  :::\n\nOnce you've populated the `.env` file, run\n\n`bash\n  docker-compose up -d`\nto start all the required services.\n:::info\n  If you're running on a linux server, `docker` might need sudo permissions. In that case you can either run:\n  `sudo docker-compose up -d`\n  OR\n  Setup docker to run without root privileges by following the instructions written here https://docs.docker.com/engine/install/linux-postinstall/\n  :::\n\nIf you've set a custom domain for `TOOLJET_HOST`, add a `A record` entry in your DNS settings to point to the IP address of the server.\n\n\n\n\n\nDownload our production docker-compose file into the server.\n  `bash\n  curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/docker/docker-compose-ssl-db.yaml\n  mv docker-compose-ssl-db.yaml docker-compose.yaml\n  mkdir postgres_data`\n\n\nCreate `.env` file in the current directory (where the docker-compose.yaml file is downloaded):\n\n\n`bash\n  curl -LO https://raw.githubusercontent.com/ToolJet/ToolJet/main/deploy/docker/.env.example\n  mv .env.example .env`\nSet up environment variables in `.env` file as explained in environment variables reference\n`TOOLJET_HOST` environment variable can either be the public ipv4 address of your server or a custom domain that you want to use.\n:::info\n  We use the lets encrypt plugin on top of nginx to create TLS certificates on the fly.\n  And in case you want to modify the nginx config, you can use this template and then mount the volume at `/etc/openresty/nginx.conf.template` on the client container.\n  :::\nExamples:\n  `TOOLJET_HOST=http://12.34.56.78` or\n  `TOOLJET_HOST=https://yourdomain.com` or\n  `TOOLJET_HOST=https://tooljet.yourdomain.com`\n:::info\n  Please make sure that `TOOLJET_HOST` starts with either `http://` or `https://`\n  :::\n:::info\n  If there are self signed HTTPS endpoints that Tooljet needs to connect to, please make sure that `NODE_EXTRA_CA_CERTS` environment variable is set to the absolute path containing the certificates.\n  :::\n\nOnce you've populated the `.env` file, run\n\n`bash\n  docker-compose up -d`\nto start all the required services.\n:::info\n  If you're running on a linux server, `docker` might need sudo permissions. In that case you can either run:\n  `sudo docker-compose up -d`\n  OR\n  Setup docker to run without root privileges by following the instructions written here https://docs.docker.com/engine/install/linux-postinstall/\n  :::\n\nIf you've set a custom domain for `TOOLJET_HOST`, add a `A record` entry in your DNS settings to point to the IP address of the server.\n\n\n\nCreating admin workspace and account\n`bash\n  docker-compose exec server npm run db:seed:prod`\nThis seeds the database with a default user with the following credentials:\n    - email: `dev@tooljet.io`\n    - password: `password`\n:::caution\nMake sure that the server can receive traffic on port 80 & 443.\n    For example, if the server is an AWS EC2 instance and the installation should receive traffic from the internet, the inbound rules of the security group should look like this:\n| protocol | port | allowed_cidr |\n  | -------- | ---- | ------------ |\n  | TCP      | 80   | 0.0.0.0/0    |\n  | TCP      | 443  | 0.0.0.0/0    |\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Deploying ToolJet client",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/setup/client.md",
    "content": "\nid: client\ntitle: Deploying ToolJet client\n\nDeploying ToolJet client\nToolJet client is a standalone application and can be deployed on static website hosting services such as Netlify, Firebase, S3/Cloudfront, etc.\nYou can build standalone client with the below command:\n`bash\nSERVE_CLIENT=false npm run build`\nDeploying ToolJet client on Firebase\n:::tip\nYou should set the environment variable `TOOLJET_SERVER_URL` ( URL of the server ) while building the frontend and also set `SERVE_CLIENT` to `false`` for standalone client build.\nFor example: `SERVE_CLIENT=false TOOLJET_SERVER_URL=https://server.tooljet.com npm run build && firebase deploy`\n:::\n\nInitialize firebase project\n   `bash\n    firebase init`\n   Select Firebase Hosting and set build as the static file directory\nDeploy client to Firebase\n   `bash\n    firebase deploy`\n\nDeploying ToolJet client with Google Cloud Storage\n:::tip\nYou should set the environment variable `TOOLJET_SERVER_URL` ( URL of the server ) while building the frontend.\nFor example: `SERVE_CLIENT=false TOOLJET_SERVER_URL=https://server.tooljet.io npm run build`\n:::\nUsing Load balancer\nTooljet client can be hosted from Cloud Storage bucket just like hosting any other static website.\nFollow the instructions from google documentation here.\nSummarising the steps below:\n1. Create a bucket and upload files within the build folder such that the `index.html` is at the bucket root.\n\n\nEdit permissions for the bucket to assign New principal as `allUsers` with role as `Storage Object Viewer` and permit for public access for the bucket.\n\n\nClick on Edit website configuration from the buckets browser and specify the main page as `index.html`\n\n\nFollow the instructions on creating a load balancer for hosting a static website.\n\n\nOptionally, create Cloud CDN to use with the backend bucket assigned to the load balancer.\n\n\nAfter the load balancer is created there will be an IP assigned to it. Try hitting it to check the website is being loaded.\n\n\nUse the load balancer IP as the static IP for the A record of your domain.\n\n\nUsing Google App Engine\n\n\nUpload the build folder onto a bucket\n\n\nUpload `app.yaml` file onto bucket with the following config\n\n\n```yaml\n   runtime: python27\n   api_version: 1\n   threadsafe: true\nhandlers:\n   - url: /\n     static_files: build/index.html\n     upload: build/index.html\n\n\nurl: /(.)\n     static_files: build/\\1\n     upload: build/(.)\n   ```\n\n\nActivate cloud shell on your browser and create build folder\n   `bash\n   mkdir tooljet-assets`\n\n\nCopy the uploaded files onto an assets folder which is to be served\n   `bash\n   gsutil rsync -r gs://your-bucket-name/path-to-assets ./tooljet-assets`\n\n\nDeploy static assets to be served\n   ```bash\n   cd tooljet-assets && gcloud app deploy\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Upload and download files on AWS S3 bucket",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/how-to/upload-files-aws.md",
    "content": "\nid: upload-files-aws\ntitle: Upload files on AWS S3 bucket\n\nUpload and download files on AWS S3 bucket\nThis guide will help you in quickly building a basic UI for uploading or downloading files from AWS S3 buckets.\nBefore building the UI, check out the docs for AWS S3 data source to learn about setting up AWS S3 and adding the data source. \nOnce you have successfully added the AWS data source, build a basic UI using the following widgets:\n- Dropdown: For selecting a bucket in S3 storage.\n- Table: For listing all the objects inside the selected bucket in dropdown.\n- Text Input: For getting a path for the file that is to be uploaded.\n- File picker: For uploading the file.\n- Button: This will be used to fire the upload query.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/ui.png)\n\n\nQueries\nWe'll create the following queries:\n\ngetBuckets\nlistObjects\nuploadToS3\ndownload\n\ngetBuckets\nThis query will fetch the list of all the buckets in your S3. Just create a new query, select AWS S3 data source, and choose List buckets operation. Name the query getBuckets and click Save.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/getBuckets.png)\n\n\nNow, let's edit the properties of dropdown widget.\n\nLabel: Set the label as Bucket.\nOption values: Set option values as `{{queries.getBuckets.data.Buckets.map(bucket => bucket['Name'])}}`. We're mapping the data returned by the query as the returned data is array of abjects.\nOption label: Set option values as `{{queries.getBuckets.data.Buckets.map(bucket => bucket['Name'])}}`. This will display the same option label as option values.\n\nYou can later add an event handler for running the listObject query whenever an option is selected from the dropdown.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/dropdown.png)\n\n\nlistObjects\nThis query will list all the objects inside the selected Bucket in dropdown. Select List objects in a bucket operation, enter `{{components.dropdown1.value}}` in the Bucket field - this will dynamically get the field value from the selected option in dropdown.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/listObjects.png)\n\n\nEdit the properties of table widget:\n- Table data: `{{queries.listObjects.data['Contents']}}`\n- Add Columns:\n  - Key: Set the Column Name to `Key` and Key to `Key`\n  - Last Modified: Set the Column Name to `Last Modified` and Key to `LastModified`\n  - Size: Set the Column Name to `Size` and Key to `Size`\n- Add a Action button: Set button text to Copy signed URL, Add a handler to this button for On Click event and Action to Copy to clipboard, in the text field enter `{{queries.download.data.url}}` - this will get the download url from the download query that we will create next.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/table.png)\n\n\ndownload\nCreate a new query and select Signed URL for download operation. In the Bucket field, enter `{{components.dropdown1.value}}` and in Key enter `{{components.table1.selectedRow.Key}}`.\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/download.png)\n\n\nEdit the properties of the table, add a Event handler for running the `download` query for `Row clicked` event. This will generate a signed url for download every time a row is clicked on the table.\nuploadToS3\nCreate a new query, select the Upload object operation. Enter the following values in their respective fields:\n- Bucket: `{{components.dropdown1.value}}`\n- Key:  {{ components.textinput1.value + '/' +components.filepicker1.file[0].name}}`- **Content type**:`{{components.filepicker1.file[0].type}}`- **Upload data**:`{{components.filepicker1.file[0].base64Data}}`- **Encoding**:`base64`\n\n\n![ToolJet - How To - Upload files on AWS S3 bucket](/img/how-to/upload-files-aws/uploadToS3.png)\n\n\nConfigure the file picker:\nClick on the widget handle to edit the file picker properties: \n\nChange the Accept file types to `{{\"application/pdf\"}}` for the picker to accept only pdf files or `{{\"image/*\"}}` for the picker to accept only image files . In the screenshot below, we have set the accepted file type property to `{{\"application/pdf\"}}` so it will allow to select only pdf files:\n\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/result-filepicker.png)\n\n\n\n\nChange the Max file count to `{{1}}` as we are only going to upload 1 file at a time.\n\n\nSelect a pdf file and hold it in the file picker.\n\n\n:::info\n File types must be valid MIME type according to input element specification or a valid file extension.\nTo accept any/all file type(s), set `Accept file types` to an empty value.\n:::\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/config-filepicker.png)\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Change text color in columns by accessing `cellValue` and `rowData` in the table",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/how-to/access-cellvalue-rowdata.md",
    "content": "\nid: access-cellvalue-rowdata\ntitle: Change text color in columns of the table\n\nChange text color in columns by accessing `cellValue` and `rowData` in the table\nIn this how-to guide, we will build an app that will use a sample RestAPI to display the data in the table, and then we will change the text color of the columns according to the condition.\n\nLet's start by creating a new application and then adding a table widget into the canvas.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/newapp.gif)\n\n\n\nNow go to the Query Panel at the bottom of the app editor and click on the `+` button.\nChoose RestAPI data source\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/restapi.png)\n\n\n\nNow we will use a sample RestAPI endpoint -  I have used the API provided by coinstats.app, API-URL:\nhttps://api.coinstats.app/public/v1/coins?skip=0&limit=100&currency=USD\nChoose `GET` method, enter the request URL (API URL in previous step), name the query - I have named it `crypto`, and then Create the query\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/apiendpoint.png)\n\n\n\nNow hit the Run button next to the query name to run the query.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/runquery.png)\n\n\n\nOnce you run the query, you can check the data returned by the query in the Inspector on the left sidebar.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/inspectord.png)\n\n\n\nNow that we have got the data, we will display it on the table. To do this, click on the widget handle of the table to open its properties in the right sidebar. \nIn the Table Data field, enter `{{queries.crypto.data.coins}}` - as you can see in the screenshot of the inspector the data is inside the `coins` array. You'll see the data in the Preview(green box) below the field.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/data.png)\n\n\n\nLet's add the columns that we want to display on the table. Go to the Columns section, Add columns, set their Names, and set key for each column. I have added 5 columns: Rank, Name, Symbol, Price, and Market Cap.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/columns.png)\n\n\n\nOnce you've added the columns, you'll get the table like this:\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/table.png)\n\n\nUsing cellValue to change column text color\nNow that we have our data on the table, we will change the color of the text in the Price and Market Cap columns.\n\nEdit table properties, go to Columns, and click on the Price Column to open its properties.\nFor Price column, we want to change color of those cells who have value which is greater than 1000 to red else to green if it is less than 1000. So to do this, we will set a condition in Text Color property of this column: `{{cellValue >= 1000 ? 'red' : 'green'}}`\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/price.png)\n\n\n\nSimilarly, we will do for Market Cap column. We want to change the text color of those cells who have value which is greater than 60000000000 to red else to green if it is less than 60000000000. so the condition will be `{{cellValue >= 60000000000 ? 'red' : 'green'}}`\nNow the text color of cells in the columns will be updated.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/cellvalue.png)\n\n\n:::info\nYou can also use Hex Color Code instead of mentioning color in plane text.\n:::\nUsing rowData to change column text color\n\nTo change the color of the text using `rowData` variable it is required to mention the column name whose cell value we will be comparing in the condition. Let's take a look by changing the text color of Symbol column. \nWe will add a condition to look in the row data and if the row has column called `name` which has value `Solana` then it should change the color to red else the color should be green.\nEdit the properties of the Symbol column, set the Text Color field value to `{{rowData.name ===  'Solana' ? 'red' : 'green'}}`.\nYou'll see that in the Symbols column all the values has become green except the one that has Solana in Name column.\n\n\n\n![ToolJet - How To - Change text color in columns of the table](/img/how-to/change-text-color/rowData.png)",
    "tag": "tooljet"
  },
  {
    "title": "Upload files using GCS",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/how-to/upload-files-gcs.md",
    "content": "\nid: upload-files-gcs\ntitle: Upload files using GCS\n\nUpload files using GCS\nIn this guide, we are going to create an interface to upload PDFs to Google Cloud Storage.\nBefore adding the new data source we will need to have a private key for our GCS bucket and make sure the key has the appropriate rights.\nSetting up Google Cloud Storage data source\n\nGo to the data source manager on the left-sidebar and click on the `+` button.\nAdd a new GCS data source from the  APIs section in modal that pops up.\nEnter the JSON private key for service account and test the connection.\nClick on Save to add the data source.\n\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/adding-account.png)\n\n\nAdding a file picker\n\nDrag and drop the file picker widget on the canvas\nConfigure the file picker:\nChange the Accept file types to `{{\"application/pdf\"}}` for the picker to accept only pdf files. In the screenshot below, we have set the accepted file type property to `{{\"application/pdf\"}}` so it will allow to select only pdf files:\n\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/result-filepicker.png)\n\n\n\n\nChange the Max file count to `{{1}}` as we are only going to upload 1 file at a time.\n\n\nSelect a pdf file and hold it in the file picker.\n\n\n:::info\n File types must be valid MIME type according to input element specification or a valid file extension.\nTo accept any/all file type(s), set `Accept file types` to an empty value.\n:::\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/config-filepicker.png)\n\n\nCreating a query\n\nClick on the `+` button of the query manager at the bottom panel of the editor and select the GCS data source\nSelect Upload file operation and enter the required parameters:\nBucket: `gs://test-1`\nFile Name: `{{components.file1.file[0]['name']}}`\nContent Type: `{{components.file1.file[0]['type']}}`\nUpload data: `{{components.file1.file[0]['base64Data']}}`\nEncoding: `base64`\nClick on Save to create the query\n\nRunning the query\n\nAdd a button that will fire the query to upload the file\nEdit the properties of the button and add a event handler to Run the query on On-Click event.\nClick on Button to fire the query, this will upload the pdf file that you selected earlier through the file picker and will upload it on the GCS.\n\n\n\n![ToolJet - How To - Upload files using GCS](/img/how-to/upload-files-gcs/final-result.png)",
    "tag": "tooljet"
  },
  {
    "title": "REST API authentication using OAuth 2.0",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/how-to/oauth2-authorization.md",
    "content": "\nid: oauth2-authorization\ntitle: REST API authentication using OAuth 2.0\n\nREST API authentication using OAuth 2.0\nToolJet\u2019s REST API data source supports OAuth 2.0 as the authentication type. In this guide, we\u2019ll learn how to use Google OAuth2 API to delegate authorization and authentication for your ToolJet Application.\nBefore setting up the REST API data source in ToolJet, we need to configure the Google Cloud Platform to gather the API keys required for the authorization access.\nSetting up Google Cloud Platform\nGoogle Cloud Platform provides access to more than 350 APIs and Services that can allow us to access data from our Google account and its services. Let's create an OAuth application that can be given permission to use our Google profile data such as Name and Profile picture.\n\nSign in to your Google Cloud account, and from the console create a New Project.\nNavigate to the APIs and Services, and then open the OAuth consent screen section from the left sidebar.\nEnter the Application details and select the appropriate scopes for your application. We will select the profile and the email scopes. \nOnce you have created the OAuth consent screen, Create new credentials for the OAuth client ID from the Credentials section in the left sidebar.\nSelect the application type, enter the application name, and then add the following URIs under Authorised Redirect URIs:\n`https://app.tooljet.com/oauth2/authorize` (if you\u2019re using ToolJet cloud)\n`http://localhost:8082/oauth2/authorize` (if you\u2019re using ToolJet locally)\n\n\nNow save and then you\u2019ll get the Client ID and Client secret for your application.\n\n\nConfiguring ToolJet Application with Google's OAuth 2.0 API\nLet's follow the steps to authorize ToolJet to access your Google profile data:\n\nSelect add data source from the left sidebar, and choose REST API from the dialog window.\n\n:::info\nYou can rename the data source by clicking on its default name `REST API`\n:::\n\nIn the URL field, enter the base URL `https://www.googleapis.com/oauth2/v1/userinfo`; the base URL specifies the network address of the API service.\nSelect authentication type as `OAuth 2.0`\nKeep the default values for Grant Type, Add Access Token To, and Header Prefix i.e. `Authorization Code`, `Request Header`, and `Bearer` respectively.\nEnter Access Token URL: `https://oauth2.googleapis.com/token`; this token allows users to verify their identity, and in return, receive a unique access token.\nEnter the Client ID and Client Secret that we generated from the Google Console.\nIn the Scope field, enter `https://www.googleapis.com/auth/userinfo.profile`; Scope is a mechanism in OAuth 2.0 to limit an application's access to a user's account. Check the scopes available for Google OAuth2 API here.\nEnter Authorization URL: `https://accounts.google.com/o/oauth2/v2/auth`; the Authorization URL requests authorization from the user and redirects to retrieve an authorization code from identity server.\n\nCreate three Custom Authentication Parameters:\n| params      | description |\n| ----------- | ----------- |\n| response_type | code ( `code` refers to the Authorization Code) |\n| client_id | Client ID  |\n| redirect_uri | `http://localhost:8082/oauth2/authorize` if using ToolJet locally or enter this `https://app.tooljet.com/oauth2/authorize` if using ToolJet Cloud.  |\n\n\nKeep the default selection for Client Authentication and Save the data source.\n\n\n\nCreate the query\nLet\u2019s create a query to make a `GET` request to the URL, it will pop a new window and ask the user to authenticate against the API.\n\nAdd a new query and select the REST API datasource from the dropdown\nIn the Method dropdown select `GET` and in advance tab toggle `run query on page load?`\nSave and Run the query.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Access a user's location using RunJS query (Geolocation API)",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/how-to/access-users-location.md",
    "content": "\nid: access-users-location\ntitle: Access a user's location\n\nAccess a user's location using RunJS query (Geolocation API)\nIn this how-to guide, we will build a ToolJet application that will utilize the JavaScript Geolocation API to get the user's location. The Geolocation API provides access to geographical location data associated with a user's device. This can be determined using GPS, WIFI, IP Geolocation and so on.\n:::info\nTo protect the user's privacy, Geolocation API requests permission to locate the device. If the user grants permission, you will gain access to location data such as latitude, longitude, altitude, and speed. \n:::\n\n\nLet's start by creating a new application\n\n\n\n\n\nIn the app editor, go to the query panel at the bottom and create a RunJS query by selecting Run JavaScript Code as the datasource\n\n\n\n\n\nYou can use the following javascript code that makes use of geolocation api to get the location\n```js\nfunction getCoordinates() {\nreturn new Promise(function(resolve, reject) {\n    navigator.geolocation.getCurrentPosition(resolve, reject);\n});\n}\nasync function getAddress() {\n// notice, no then(), cause await would block and \n// wait for the resolved result\nconst position = await getCoordinates(); \nlet latitude = position.coords.latitude;\nlet longitude = position.coords.longitude;\nreturn [latitude, longitude];\n}\nreturn await getAddress()\n```\n\n\nNow, go to the Advanced tab and enable the `Run query on page load?` option. Enabling this option will run this javascript query every time the app is opened by the user and the query will return the location\n\n\nSave the query and hit the fire button\n\n\nAs soon as you hit the fire button, the browser will prompt you to allow the permission to share the location access to ToolJet app. You'll need to allow it to return the location data\n\n\n\n\n\nNow, to check the data returned by the query go to the Inspector on the left sidebar. Expand the queries -> `runjs1`(query name) -> and then expand the data. You'll find the coordinates\n\n\n\n\n\nNext, we can use these coordinates returned by the query on the map component to show the location. Drop a map component on the canvas and edit its properties. In the Initial location property, enter\n`js\n{{ {\"lat\": queries.runjs1.data[0], \"lng\": queries.runjs1.data[1]} }}`\n\n\n\n\n\nFinally, you'll see the location updated on the map component\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Enable/Disable a component using current user's property",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/how-to/access-users-groups.md",
    "content": "\nid: access-currentuser\ntitle: Enable/Disable a component using current user's property\n\nEnable/Disable a component using current user's property\nLet's take look at the exposed variables of the current user property:\n\nemail : The value can accessed using `{{globals.currentUser.email}}`\nfirstName : The value can accessed using `{{globals.currentUser.firstName}}`\nlastName : The value can accessed using `{{globals.currentUser.lastName}}`\nlastName : The value can accessed using `{{globals.currentUser.lastName}}`\ngroups : By default, the admin will be in the two groups `all_users` and `admin`, and any user who is not admin will always be in the `all_users` group by default. Since the groups is an array you\u2019ll have to provide the index ([0], [1], and so on) to return the group name. The value can be accessed using `{{globals.currentUser.groups[1]}}`.\n\n\n\n\nExample: Disable a button if a user is not admin\n\n\nClick on the Button handle to open its properties, on the Styles tab go to the Disable property. \n\n\n\n\n\nSet a condition on the Disable field so that if the the user who is using the app does not have admin value in the first index of groups array return true. The condition can be:\n`javascript\n{{globals.currentUser.groups[1] !== \"admin\" ? true : false}}`\n\n\n\n\n\nNow, when you'll release the app, if the user is not is not admin the button will be disabled. \n\n\n\n\n\n:::info\nIn this how-to we have used the Groups property of the Current User. You can use any of the exposed variables mentioned above according to your use.",
    "tag": "tooljet"
  },
  {
    "title": "run-query-at-specified-intervals.md",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/how-to/run-query-at-specified-intervals.md",
    "content": "\nid: run-query-at-specified-intervals\ntitle: Run query at specified intervals\n\nIn this how-to guide, we will learn how to make a query trigger at the specific intervals.\n\nLet's go to the ToolJet dashboard and create a new application\nOnce the app builder opens up, drag a table component to canvas\n\nNow, create a new REST API query from the query panel at the bottom of the app builder. We will be using the data from the mock REST API and then load the data on the table. Let's create a REST API, choose `GET` method from the dropdown, enter the endpoint `(https://jsonplaceholder.typicode.com/posts)`, name the query `post` and then save and run it\n    \n\n\n- Go to the Table properties and add connect the query data to table by adding value to table data property which is `{{queries.post.data}}`\n\n\n\n\n\nNow, we will create a RunJS query that will first set a variable called `interval` which will include the value returned by the `setInterval()` method that calls a function `countdown` at specified intervals. The countdown function has the code to trigger the `post` query that we created in the previous step.\n`js\nactions.setVariable('interval',setInterval(countdown, 5000));\nfunction countdown(){\n    queries.post.run()\n}`\n- Go to the Advanced tab of the query, enable `Run query on page load?` this will trigger this RunJS query when the app is loaded. Name the query as `set` and Save it. Note that you will have to save the query and not `Save and Run` because doing it will trigger the query and you won't be able to stop the query unless you reload the page or go back to dashboard.\n\n\n\n- To prevent the query from triggering indefinitely, we will create another RunJS query that will make use of `clearInterval()` method. In this method we will get the value from the variable that we created in `set` query. Save this query as `clear`.\n`js\nclearInterval(variables.interval)`\n- Finally, let's add a button on to the canvas and add the event handler to the button to run the `clear` query.\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Run `Actions` from RunJS query",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/how-to/run-action-from-runjs.md",
    "content": "\nid: run-actions-from-runjs\ntitle: Run Actions from RunJS query\n\nRun `Actions` from RunJS query\nNow you can trigger all the `actions` available in ToolJet from within the `RunJS` query. This guide includes the syntax for each action along with the example.\nRun Query\nSyntax:\n`js\nqueries.queryName.run()`\nor\n`js\nawait actions.runQuery('queryName')`\nExample: In the screenshot below, we are triggering the two different queries `customers` and `getData` using the two different syntax available for `Run Query` action.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/runquery.png)\n\n\nSet Variable\nSyntax:\n`javascript\nactions.setVariable(variableName, variableValue)`\nExample: In the screenshot below, we are setting the two variables `test` and `test2`. `test` variable includes a numerical value so we haven't wrapped it inside the quotes but the variable `test2` is a string so we have wrapped it in quotes.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/setvariable.png)\n\n\nUnset Variable\nSyntax:\n`javascript\nactions.unSetVariable(variableName)`\nExample: In the screenshot below, we are unsetting the variable `test2` that we created in the previous step.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/unsetvariable.png)\n\n\nLogout\nSyntax:\n`javascript\nactions.logout()`\nExample: Triggering `actions.logout()` will log out the current logged in user from the ToolJet and will redirect to sign in page.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/logout.png)\n\n\nShow Modal\nSyntax:\n`javascript\nactions.showModal('modalName')`\nExample: In the screenshot below, there is a modal on the canvas (renamed it to `formModal` from `modal1`) and we are using RunJS query to show the modal.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/showmodal.png)\n\n\nClose Modal\nSyntax:\n`javascript\nactions.closeModal('modalName')`\nExample: In the screenshot below, we have used RunJS query to close the modal that we showed up in previous step.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/closemodal.png)\n\n\nSet Local Storage\nSyntax:\n`javascript\nactions.setLocalStorage('key','value')`\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/setlocalstorage.png)\n\n\nCopy to Clipboard\nSyntax:\n`javascript\nactions.copyToClipboard('contentToCopy')`\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/copytoclipboard.png)\n\n\nGenerate File\nSyntax:\n`javascript\nactions.generateFile('fileName', 'fileType', 'data')`\nExample: `fileName` is the name that you want to give the file(string), `fileType` can be `csv` or `text`, and `data` is the data that you want to store in the file.\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/generatefile.png)\n\n\nGo to App\nSyntax:\n`javascript\nactions.goToApp('slug',queryparams)`\n\n`slug` can be found in URL of the released app after the `application/`, or in the `Share` modal\n`queryparams` can be provided like this `[{\"key\":\"value\"}, {\"key2\":\"value2\"}]`\n\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/gotoapp1.png)\n\n\nShow Alert\nSyntax:\n`javascript\nactions.showAlert(alert type , message ) // alert types are info, success, warning, and danger`\n\n\n![ToolJet - How To - Run Actions from RunJS query](/img/how-to/run-actions-from-runjs/showalert.png)\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Bulk update multiple rows in table",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/how-to/bulk-update-multiple-rows-in-table.md",
    "content": "\nid: bulk-update-multiple-rows\ntitle: Bulk update multiple rows in table\n\nBulk update multiple rows in table\nCurrently, the datasources in ToolJet have operation for bulk update(GUI mode) but that only works for changes made in the single row. We will soon be adding a new operation for bulk updating the multiple rows but for now we can bulk update multiple rows by creating a Custom JS query. \nIn this guide, We have assumed that you have successfully connected the data source. For this guide, we will be using the PostgreSQL data source as an example database, currently, this workaround can be used only for PostgreSQL and MySQL.\n1. Create a query to get the data from the database\nLet's create the query that will be getting the data from the database:\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/postgres1.png)\n\n\n2. Display the data on the table\n\nDrag a Table widget on the canvas and click on its handle to open the properties on the left sidebar\nEdit the Table data field value and enter `{{queries.postgresql1.data}}`\n\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/showData.png)\n\n\n3. Make the columns editable\n\nGo to the Columns, Add or edit columns section and enter the Column Name that you want to display on the table and the Key name. Key is the name of the column in your database.\nEnable the toggle for Make editable for the columns that you want to be editable.\n\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/columns.png)\n\n\n4. Enable bulk update options for table widget\n\nGo to the Options section and enable the Show update buttons. Enabling this will add two buttons - Save Changes and Discard Changes at the bottom of the table, only when any cell in the table is edited.\nYou can also enable highlight selected row.(Optional)\n\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/options.png)\n\n\n5. Create a Custom JS query\nWe will create a new Custom JS query(runjs1) that will generate SQL query for updating multiple rows.\n```js\nconst uniqueIdentifier = \"id\"\nconst cols = Object.values(components.table1.changeSet).map((col, index) => {\n  return {\n    col: Object.keys(col),\n    [uniqueIdentifier]: Object.values(components.table1.dataUpdates)[index][uniqueIdentifier],\n    values: Object.values(col),\n  };\n});\nconst sql = cols.map((column) => {\n  const { col, id, values } = column;\n  const cols = col.map((col, index) => `${col} = '${values[index]}'`);\n  return `UPDATE users SET ${cols.join(\", \")} WHERE id = '${id}';`;\n});\nreturn sql\n```\n:::info\nHere the Unique identifier is id, this is the column name that is used to identify the row in the database.\nUpdate the Unique identifier if you are using a different column name.\n:::\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/runjs1.png)\n\n\n6. Create an Update query\nLet's create a new PostgreSQL query and name it `update`. In SQL mode, enter `{{queries.runjs1.data.join(' ')}}` and Save it.\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/update.png)\n\n\n7. Creating a flow for queries\n\nClick on the handle of the Table widget to open its properties\nGo to the Events, and add a handler\nSelect Bulk Update in Events, Run Query in Actions, and then select the runjs1 query in Query. Now whenever a user will edit the table and hit the Save Changes button runjs1 will run.\n\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/event.png)\n\n\n\nNow, go to the Advanced tab of runjs1 and add a handler to run update query for Query Success Event. Now whenever the runjs1 query will be run - the update operation will be performed on the database.\n\n\n\n![ToolJet - How To - Bulk update multiple rows in table](/img/how-to/bulk-update-multiple/success.png)",
    "tag": "tooljet"
  },
  {
    "title": "Contributor Covenant Code of Conduct  ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/contributing-guide/code-of-conduct.md",
    "content": "\nid: code-of-conduct\ntitle: Contributor Code of Conduct\n\nContributor Covenant Code of Conduct\nOur Pledge\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\nOur Standards\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or\n  advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others' private information, such as a physical or electronic\n  address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a\n  professional setting\n\nOur Responsibilities\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\nScope\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\nEnforcement\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at hello@tooljet.com . All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\nAttribution\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\nFor answers to common questions about this code of conduct, see",
    "tag": "tooljet"
  },
  {
    "title": "Setting up",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/contributing-guide/testing.md",
    "content": "\nid: testing\ntitle: Testing\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\nSetting up\n\nNavigate to the `cypress-tests` directory and enter the following command:\n  `bash\n  npm install`\n\nRunning Tests\nHeaded mode\n\nTo run cypress in headed mode, run the following command:\n  `bash\n  npm run cy:open`\nIn headed mode, the user will be able to choose the test specs from the test runner:\n\n\n\n\n\n\nHeadless mode\n\n\nTo run cypress in headless mode, run the following command:\n  `bash\n npm run cy:run`\n\n\nFor running specific spec in headless mode, run for specific spec \n  `bash\n  npm run cy:run  --spec \"cypress/e2e/dashboard/multi-workspace/manageSSO.cy.js`\n\n\n\n\n\n:::caution\n  If some test specs need the environment variables, the user can pass them similar to the following command:\n  `bash\n  npm run cy:open -- --env='{\"pg_host\":\"localhost\",\"pg_user\":\"postgres\", \"pg_password\":\"postgres\"}'`\n  or the user can add env-vars in the cypress.config.js file\n  :::\n:::info\nCheck all the Cypress commands here",
    "tag": "tooljet"
  },
  {
    "title": "Slack Code of Conduct",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/contributing-guide/slackcoc.md",
    "content": "\nid: slackcoc\ntitle: Slack Code of Conduct\n\nSlack Code of Conduct\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nIntroduction\n\n\nDiversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand.\n\n\nOur goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic.\n\n\nThis code and related procedures apply to unacceptable behavior occurring in all community venues, including behavior outside the scope of community activities \u2014 online and in-person\u2014 as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members.\n\n\nExpected behavior\n\nBe welcoming.\nBe kind.\nLook out for each other.\n\nUnacceptable Behavior\n\nConduct or speech which might be considered sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory or offensive in nature.\nDo not use unwelcome, suggestive, derogatory or inappropriate nicknames or terms.\nDo not show disrespect towards others. (Jokes, innuendo, dismissive attitudes.)\nIntimidation or harassment (online or in-person).\nDisrespect towards differences of opinion.\nInappropriate attention or contact. Be aware of how your actions affect others. If it makes someone uncomfortable, stop.\nNot understanding the differences between constructive criticism and disparagement.\nSustained disruptions.\nViolence, threats of violence or violent language.\n\nWhere does the Code of Conduct apply?\nThis Code of Conduct applies to all spaces managed by ToolJet. This includes:\n\nConferences (including social events and peripheral activities)\nUnconferences and sprints\nMeetups, including their discussion boards\nWorkshops\nPresentation materials used in talks or sessions\nSlack\nGitHub\nTwitter hashtag and mentions\nAny forums created by the ToolJet which the community uses for communication.\n\nThe Code of Conduct does not exclusively apply to slack or events on an official agenda. For example, if after a scheduled social event you go to a bar with a group of fellow participants, and someone harasses you there, we would still treat that as a CoC violation. Similarly, harassment in Twitter direct messages related to ToolJet can still be covered under this Code of Conduct.\nIn addition, violations of this code outside our spaces may affect a person\u2019s ability to participate in them.\nEnforcement\n\nUnderstand that speech and actions have consequences, and unacceptable behavior will not be tolerated.\nIf you are the subject of, or witness to any violations of this Code of Conduct, please contact us via email at hello@tooljet.com or dm @navaneeth on slack.\nIf violations occur, organizers will take any action they deem appropriate for the infraction, up to and including expulsion.\n\n:::info\nPortions derived from the Django Code of Conduct, The Rust Code of Conduct and The Ada Initiative under a Creative Commons Attribution-ShareAlike license.\n:::\n\nEtiquettes to follow\n1. Be nice to everyone\n2. Check off your resolved questions\nIf you have received a useful reply to your question, please drop a \u2705 reaction or a reply for affirmation.\n3. Try not to repost question\nIf you have asked a question and have not got a response in 24hrs, please review your question for clarity and revise it. If you still feel you haven't received adequate response, feel free to ping @navaneeth.\n4. Post in public\nPlease don't direct message any individual member of ToolJet community without their explicit permission, independent of reason. Your question might be helpful for other community members.\n5. Don't spam tags\nToolJet's community of volunteer is very active and helpful, generally avoid tagging members unless it is urgent.\n6. Use threads for discussion",
    "tag": "tooljet"
  },
  {
    "title": "Adding Translations",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/contributing-guide/l10n.md",
    "content": "\nid: l10n\ntitle: Localization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and  general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\nAdding Translations\n\n\nFor adding the translations of your language in ToolJet, you'll need to create a new languagecode.json file which will include all the translations for the keywords in your language, and then list the language in the languages.json file for the language to be listed in the dashboard of the ToolJet.\n\n\nGo to the frontend directory which is at the root of ToolJet, then go to the assets and inside assets, you'll find the translations directory. You have created a new json file with the language code as the file name. The language code should follow ISO 639-1 Code.\n`\\frontend\n|--\\assets\n|--\\--\\translations\n|--\\--\\--\\languages.json\n|--\\--\\--\\en.json`\n\n\n\n\n\nLet's localize ToolJet in the French language. Create a new json file inside the translations directory and name it fr.json. `fr` is the language code for French.\n\n\nAfter creating the new file, open the en.json file and copy all the contents of the file to the newly created fr.json.\n\n\n\n\n\nOnce copied, you can now start adding the translations for the keywords in the french language.\n\n\nAfter completing the translation, all you need to do is list the language in languages.json file. You'll need to add an object with three key-value pairs. lang - the name of the language that you added, code - the language code, and the nativeLang - name of language in the native.\n`js\n{\n    \"languageList\":\n    [\n        { \"lang\": \"English\", \"code\": \"en\", \"nativeLang\": \"English\" },\n        { \"lang\": \"French\", \"code\": \"fr\", \"nativeLang\": \"Fran\u00e7ais\" }\n    ]\n}`\n\n\nOnce you list the language in the `language.json` file, you'll be able to see it in the dashboard.\n\n\n\n\n\n:::info\nToolJet will automatically detect your browser's default language and will switch to it. If your browser's default language translation is not available in ToolJet then it will set English as the default language.\n:::\n:::note\nFeel free to reach us on Slack for any help related to Localization.",
    "tag": "tooljet"
  },
  {
    "title": "Introduction",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/contributing-guide/setup/architecture.md",
    "content": "\nid: architecture\ntitle: Architecture\n\nIntroduction\nToolJet has two main components: ToolJet Server and ToolJet Client.\n1. ToolJet Server\nToolJet server is a Node.js API application. Server is responsible for authentication, authorization, persisting application definitions, running queries, storing data source credentials securely and more. \nDependencies:\n- PostgreSQL - ToolJet server persists data to a postgres database. \n- Email service (SMTP/Sendgrid/Mailgun/etc) - Required to send user invitations and password reset emails.   \n2. ToolJet Client\nToolJet client is a ReactJS application. Client is responsible for visually editing the applications, building & editing queries, rendering applications, executing events and their trigger, etc.\nRequirements",
    "tag": "tooljet"
  },
  {
    "title": "Ubuntu",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/contributing-guide/setup/ubuntu.md",
    "content": "\nid: ubuntu\ntitle: Ubuntu\n\nUbuntu\nFollow these steps to setup and run ToolJet on Ubuntu. Open terminal and run the commands below.\nSetting up\n\n\nSet up the environment\n1.1 Install Node.js\n```bash\ncurl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -\nsudo apt-get install -y nodejs\nEnsure you have the correct version of npm, or it will cause an error about fsevents.\nnpm i -g npm@7.20.0\n```\n1.2 Install Postgres\n`bash\nsudo apt install postgresql postgresql-contrib\nsudo apt-get install libpq-dev`\n\n\nSet up environment variables\nCreate a `.env` file by copying `.env.example`. More information on the variables that can be set is given in the environment variables reference\n`bash\ncp .env.example .env`\n\n\nPopulate the keys in the env file\n   :::info\n   `SECRET_KEY_BASE` requires a 64 byte key. (If you have `openssl` installed, run `openssl rand -hex 64` to create a 64 byte secure   random key)\n\n\n`LOCKBOX_MASTER_KEY` requires a 32 byte key. (Run `openssl rand -hex 32` to create a 32 byte secure random key)\n   :::\nExample:\n   `bash\n   cat .env\n   TOOLJET_HOST=http://localhost:8082\n   LOCKBOX_MASTER_KEY=1d291a926ddfd221205a23adb4cc1db66cb9fcaf28d97c8c1950e3538e3b9281\n   SECRET_KEY_BASE=4229d5774cfe7f60e75d6b3bf3a1dbb054a696b6d21b6d5de7b73291899797a222265e12c0a8e8d844f83ebacdf9a67ec42584edf1c2b23e1e7813f8a3339041`\n\n\nInstall and build dependencies\n    `bash\n    npm install\n    npm install --prefix server\n    npm install --prefix frontend\n    npm run build:plugins`\n\n\nSet up database\n    `bash\n    npm run --prefix server db:reset`\n\n\nRun plugins compilation in watch mode\n    `bash\n    cd ./plugins && npm start`\n\n\nRun the server\n    `bash\n    cd ./server && npm run start:dev`\n\n\nRun the client\n    `bash\n    cd ./frontend && npm start`\nThe client will start running on the port 8082, you can access the client by visiting:  https://localhost:8082\n\n\nCreate login credentials\nVisiting https://localhost:8082 should redirect you to the login page, click on the signup link and enter your email. The emails sent by the server in development environment are captured and are opened in your default browser. Click the invitation link in the email preview to setup the account.\n\n\nRunning tests\nTest config requires the presence of `.env.test` file at the root of the project.\nTo run the unit tests\n`bash\nnpm run --prefix server test`\nTo run e2e tests\n`bash\nnpm run --prefix server test:e2e`\nTo run a specific unit test\n```bash\nnpm run --prefix server test ",
    "tag": "tooljet"
  },
  {
    "title": "Mac OS",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/contributing-guide/setup/macos.md",
    "content": "\nid: macos \ntitle: Mac OS\n\nMac OS\nFollow these steps to setup and run ToolJet on macOS for development purposes. Open terminal and run the commands below. We recommend reading our guide on architecture of ToolJet before proceeding.\nSetting up\n\n\nSet up the environment\n1.1 Install Homebrew\n`bash\n/bin/bash -c \"(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"`\n1.2 Install Node.js ( version: v14.17.3 ) and npm (version: v7.20.0)\n`bash\nbrew install nvm\nexport NVM_DIR=~/.nvm\nsource $(brew --prefix nvm)/nvm.sh\nnvm install 14.17.3\nnvm use 14.17.3\nnpm install -g npm@7.20.0`\n1.3 Install Postgres\n:::tip\nToolJet uses a postgres database as the persistent storage for storing data related to users and apps. We do not plan to support other databases such as MySQL.\n:::\n`bash\nbrew install postgresql`\n1.4 Clone the repository\n`bash\ngit clone https://github.com/tooljet/tooljet.git`\n\n\nSet up environment variables\nCreate a `.env` file by copying `.env.example`. More information on the variables that can be set is given in the environment variables reference\n`bash\ncp .env.example .env`\n\n\nPopulate the keys in the env file\n   :::info\n   `SECRET_KEY_BASE` requires a 64 byte key. (If you have `openssl` installed, run `openssl rand -hex 64` to create a 64 byte secure   random key)\n\n\n`LOCKBOX_MASTER_KEY` requires a 32 byte key. (Run `openssl rand -hex 32` to create a 32 byte secure random key)\n   :::\nExample:\n   `bash\n   cat .env\n   TOOLJET_HOST=http://localhost:8082\n   LOCKBOX_MASTER_KEY=1d291a926ddfd221205a23adb4cc1db66cb9fcaf28d97c8c1950e3538e3b9281\n   SECRET_KEY_BASE=4229d5774cfe7f60e75d6b3bf3a1dbb054a696b6d21b6d5de7b73291899797a222265e12c0a8e8d844f83ebacdf9a67ec42584edf1c2b23e1e7813f8a3339041\n   NODE_ENV=development\n   # DATABASE CONFIG\n   PG_HOST=postgres\n   PG_PORT=5432\n   PG_USER=postgres\n   PG_PASS=postgres\n   PG_DB=tooljet_development\n   ORM_LOGGING=all`\n\n\nInstall and build dependencies\n    `bash\n    npm install\n    npm install --prefix server\n    npm install --prefix frontend\n    npm run build:plugins`\n\n\nSet up database\n    `bash\n    npm run --prefix server db:reset`\n\n\nRun plugins compilation in watch mode\n    `bash\n    cd ./plugins && npm start`\n\n\nRun the server\n    `bash\n    cd ./server && npm run start:dev`\n\n\nRun the client\n    `bash\n    cd ./frontend && npm start`\nThe client will start on the port 8082, you can access the client by visiting:  https://localhost:8082\n\n\nCreate login credentials\nVisiting https://localhost:8082 should redirect you to the login page, click on the signup link and enter your email. The emails sent by the server in development environment are captured and are opened in your default browser. Click the invitation link in the email preview to setup the account.\n\n\nRunning tests\nTest config requires the presence of `.env.test` file at the root of the project.\nTo run the unit tests\n`bash\nnpm run --prefix server test`\nTo run e2e tests\n`bash\nnpm run --prefix server test:e2e`\nTo run a specific unit test\n```bash\nnpm run --prefix server test ",
    "tag": "tooljet"
  },
  {
    "title": "Docker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/contributing-guide/setup/docker.md",
    "content": "\nid: docker\ntitle: Docker\n\nDocker\nDocker compose is the easiest way to setup ToolJet server and client locally.\n:::info\nIf you rather want to try out ToolJet locally with docker, you can follow the steps here.\n:::\nPrerequisites\nMake sure you have the latest version of `docker` and `docker-compose` installed.\nOfficial docker installation guide\nOfficial docker-compose installation guide\nWe recommend:\n```bash\ndocker --version\nDocker version 19.03.12, build 48a66213fe\ndocker-compose --version\ndocker-compose version 1.26.2, build eefe0d31\n```\nSetting up\n:::tip\nIf you are setting up on a Windows machine, we advise you to setup Docker desktop with WSL2.\nPlease find more information here.\n:::\n\n\nClone the repository\n   `bash\n   git clone https://github.com/tooljet/tooljet.git`\n\n\nCreate a `.env` file by copying `.env.example`. More information on the variables that can be set is given in the environment variables reference\n`bash\n   cp .env.example .env\n   cp .env.example .env.test`\n\n\nPopulate the keys in the `.env` and `.env.test` file\n   :::info\n   `SECRET_KEY_BASE` requires a 64 byte key. (If you have `openssl` installed, run `openssl rand -hex 64` to create a 64 byte secure random key)\n\n\n`LOCKBOX_MASTER_KEY` requires a 32 byte key. (Run `openssl rand -hex 32` to create a 32 byte secure random key)\n   :::\n   :::tip \n   If you are setting up on a Windows machine. Please make sure that .env file line endings to be LF as it will be CRLF by default unless configured for Windows machine.\n   :::\nExample:\n`bash\n    cat .env\n    TOOLJET_HOST=http://localhost:8082\n    LOCKBOX_MASTER_KEY=13c9b8364ae71f714774c82498ba328813069e48d80029bb29f49d0ada5a8e40\n    SECRET_KEY_BASE=ea85064ed42ad02cfc022e66d8bccf452e3fa1142421cbd7a13592d91a2cbb866d6001060b73a98a65be57e65524357d445efae00a218461088a706decd62dcb\n    NODE_ENV=development\n    # DATABASE CONFIG\n    PG_HOST=postgres\n    PG_PORT=5432\n    PG_USER=postgres\n    PG_PASS=postgres\n    PG_DB=tooljet_development\n    ORM_LOGGING=all`\n`bash\n    cat .env.test\n    TOOLJET_HOST=http://localhost:8082\n    LOCKBOX_MASTER_KEY=13c9b8364ae71f714774c82498ba328813069e48d80029bb29f49d0ada5a8e40\n    SECRET_KEY_BASE=ea85064ed42ad02cfc022e66d8bccf452e3fa1142421cbd7a13592d91a2cbb866d6001060b73a98a65be57e65524357d445efae00a218461088a706decd62dcb\n    NODE_ENV=test\n    # DATABASE CONFIG\n    PG_HOST=postgres\n    PG_PORT=5432\n    PG_USER=postgres\n    PG_PASS=postgres\n    PG_DB=tooljet_test\n    ORM_LOGGING=error`\n\nBuild docker images\n\n`bash\n   docker-compose build\n   docker-compose run --rm  plugins npm run build:plugins`\n\nRun ToolJet\n\n`bash\n   docker-compose up`\n\nToolJet server is built using NestJS and the data such as application definitions are persisted on a postgres database. You can run the below command to seed the database.\n\n`bash\n   docker-compose exec server npm run db:seed`\n\n\nToolJet should now be served locally at `http://localhost:8082`. You can login using the default user created.\n   `email: dev@tooljet.io\n   password: password`\n\n\nTo shut down the containers,\n   `bash\n   docker-compose stop`\n\n\nMaking changes to the codebase\nIf you make any changes to the codebase/pull the latest changes from upstream, the tooljet server container would hot reload the application without you doing anything.\nCaveat:\n\n\nIf the changes include database migrations or new npm package additions in the package.json, you would need to restart the ToolJet server container by running `docker-compose restart server`.\n\n\nIf you need to add a new binary or system library to the container itself, you would need to add those dependencies in `docker/server.Dockerfile.dev` and then rebuild the ToolJet server image. You can do that by running `docker-compose build server`. Once that completes you can start everything normally with `docker-compose up`.\n\n\nExample:\nLet's say you need to install the `imagemagick` binary in your ToolJet server's container. You'd then need to make sure that `apt` installs `imagemagick` while building the image. The Dockerfile at `docker/server.Dockerfile.dev` for the server would then look something like this:\n```\nFROM node:14.17.0-buster\nRUN apt update && apt install -y \\\n  build-essential  \\\n  postgresql \\\n  freetds-dev \\\n  imagemagick\nRUN mkdir -p /app\nWORKDIR /app\nCOPY ./server/package.json ./server/package-lock.json ./\nRUN npm install\nENV NODE_ENV=development\nCOPY ./server/ ./\nCOPY ./docker/ ./docker/\nCOPY ./.env ../.env\nRUN [\"chmod\", \"755\", \"entrypoint.sh\"]\n```\nOnce you've updated the Dockerfile, rebuild the image by running `docker-compose build server`. After building the new image, start the services by running `docker-compose up`.\nRunning tests\nTest config picks up config from `.env.test` file at the root of the project.\nRun the following command to create and migrate data for test db\n`bash\ndocker-compose run --rm -e NODE_ENV=test server npm run db:create\ndocker-compose run --rm -e NODE_ENV=test server npm run db:migrate`\nTo run the unit tests\n`bash\ndocker-compose run --rm server npm run --prefix server test`\nTo run e2e tests\n`bash\ndocker-compose run --rm server npm run --prefix server test:e2e`\nTo run a specific unit test\n`bash\ndocker-compose run --rm server npm --prefix server run test <path-to-file>`\nTroubleshooting",
    "tag": "tooljet"
  },
  {
    "title": "ESLint ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/contributing-guide/troubleshooting/eslint.md",
    "content": "\nid: eslint\ntitle: EsLint\n\nESLint\nESLint as a code quality tool is a tool that checks your code for errors and helps you to fix them and enforces a coding style. \nSetup\n\nInstall the ESLint extension for your code editor.\nSet your editor's default formatter to `ESLint`.\n\n:::tip\nFor VSCode users, you can set the formatter to `ESLint` in the settings.json.\n:::\n\nInstall the dependencies.\n    `bash\n    npm install\n    npm install --prefix server\n    npm install --prefix frontend`\nRun the linter.\n    `bash\n    npm run --prefix server lint\n    npm run --prefix frontend lint`\nFix the ESlint errors and warnings.\n    `bash\n    npm run --prefix server format\n    npm run --prefix frontend format`\n\nRequirements\n\nNode version 14.17.3\nnpm version 7.20.0\n",
    "tag": "tooljet"
  },
  {
    "title": "Creating Widgets",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/contributing-guide/tutorials/create-widget.md",
    "content": "\nid: creating-widget\ntitle: Creating Widgets\n\nCreating Widgets\nThese are some of the most useful properties and functions passed to the widget\nproperties\nThe `properties` object will contain the configurable properties of a widget, initially obtained from its definition on `widgetConfig.js`.\nThe values inside `properties` change whenever the developer makes changes to the inspector panel of ToolJet editor.\nexposedVariables\nThe `exposedVariables` object will contain the values of all exposed variables as configured in `widgetConfig.js`.\nsetExposedVariable('exposedVariableName', newValue)\nThis function allows you to update the value of an exposed variable to `newValue`.\nvalidate(value)\nThis function validates the `value` passed based on the validation settings configured on the inspector panel for the widget.\nIt returns an array `[isValid, validationError]`, which represents respectively, whether the `value` passed is valid,",
    "tag": "tooljet"
  },
  {
    "title": "Creating plugins for ToolJet ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/contributing-guide/tutorials/creating-a-plugin.md",
    "content": "\nid: creating-a-plugin\ntitle: Creating Plugins\n\nCreating plugins for ToolJet\nWhat are plugins\nToolJet is built with extensibility in mind. Plugins allows developers to extend the functionalities of ToolJet using JavaScript. Plugins can only be connectors at this moment. For example, the data source connectors such as PostgreSQL, MySQL, Twilio, Stripe, etc are built as plugins. \nIn this guide, we will walk you through building plugins for ToolJet with the help of `tooljet` cli.\n`tooljet` cli is a commandline tool built for building plugins easily. We will build a simple plugin for BigQuery in this guide. \nWhat does a plugin look like?\nAll the plugins live under the `/plugins` directory. The structure of a plugin looks like this:\n`my-awesome-plugin/\n    package.json\n    lib/\n      icon.svg\n      index.ts\n      operations.json\n      manifest.json`\n\nmanifest.json should include information such as the name of plugin, description, etc. \noperations.json should include the metadata of all the operations supported by the plugin.\nindex.ts is the main file. It defines a `QueryService` for the plugin. The `QueryService` handles running of queries, testing connections, caching connections, etc.\nicon.svg is the icon for the plugin.\npackage.json is auto generated by the cli. \n\nGetting Started\n\n\nInstall tooljet-cli:\n  `bash\n  $ npm i -g @tooljet/cli`\n\n\nBootstrap a new plugin using cli\n  `bash\n  $ tooljet plugin create bigquery`\n\n\n`bash\n  creating plugin... done\n  Plugin: bigquery created successfully\n  \u2514\u2500 plugins\n    \u2514\u2500 packages\n        \u2514\u2500 bigquery`\n\n\nAdd the npm package of BigQuery to the plugin dependencies\n  `bash\n  $ tooljet plugin install @google-cloud/bigquery --plugin bigquery`\n\n\nNow the directory for our new plugin should looks something like below: \n\n\n`bash\n  plugins/\n    package.json\n    packages/\n      bigquery/\n        __tests__\n          bigquery.test.js\n        package.json\n        lib/\n          icon.svg\n          index.ts\n          operations.json\n          manifest.json`\n\nAdd data source config paramets to manifest.json\n\nOur BigQuery plugin needs private key of a GCP service account to connect to BigQuery. Let's add `private_key` as a property for the data source. \n```json\n  {\n    \"$schema\": \"https://json-schema.org/\",\n    \"$id\": \"https://tooljet.io/BigQuery.schema.json\",\n    \"title\": \"BigQuery datasource\",\n    \"description\": \"A schema defining BigQuery datasource\",\n    \"type\": \"api\",\n    \"source\": {\n      \"name\": \"BigQuery\",\n      \"kind\": \"bigquery\",\n      \"exposedVariables\": {\n        \"isLoading\": false,\n        \"data\": {},\n        \"rawData\": {}\n      },\n      \"options\": {\n        \"private_key\": { \"encrypted\": true }\n      }\n    },\n    \"defaults\": {\n      \"private_key\": { \"value\": \"\" }\n    },\n    \"properties\": {\n      \"private_key\": {\n        \"label\": \"Private key\",\n        \"key\": \"private_key\",\n        \"type\": \"textarea\",\n        \"description\": \"Enter JSON private key for service account\"\n      }\n    },\n    \"required\": [\"private_key\"]\n  }\n```\n\n\nImport npm package BigQuery to index.ts\n  `javascript\n  const { BigQuery } = require('@google-cloud/bigquery');`\n\n\nEdit index.ts to include the logic for creating a connection.  \n  ```javascript\n  async getConnection(sourceOptions: any, _options?: object): Promise {\n    const privateKey = JSON.parse(sourceOptions['private_key']);\n    const client = new BigQuery({\n      projectId: privateKey['project_id'],\n      credentials: {\n        client_email: privateKey['client_email'],\n        private_key: privateKey['private_key'],\n      },\n    });\nreturn client;\n  }\n  ```\n\n\nEdit index.ts to include the logic for testing connection.  \n  When a new data source is being added to a ToolJet application, the connection can be tested. \n\n\n:::info\n  NOTE: Every data source might not have a way to test connection. If not applicable for your data source, you can disable the test connection feature by adding `\"customTesting\": true,` to the `manifest.json` of your plugin.\n  :::\n\n\nAdd manifest entry for operations   \nIn this example, let's add two operations for our BigQuery plugin. \n- List databases - Lists all the databases.\n- Query database   - Query a specific database.\nWe need to make the entries to `operations.json`. The `operations.json` should look like this now:\n```json\n{\n  \"$schema\": \"https://json-schema.org/\",\n  \"$id\": \"https://tooljet.io/dataqueries/Bigquery.schema.json\",\n  \"title\": \"Dynamodb datasource\",\n  \"description\": \"Operations for BigQuery plugin\",\n  \"type\": \"object\",\n  \"defaults\": {},\n  \"properties\": {\n      \"operation\": {\n          \"label\": \"Operation\",\n          \"key\": \"operation\",\n          \"type\": \"dropdown-component-flip\",\n          \"description\": \"Single select dropdown for operation\",\n          \"list\": [\n              {\n                  \"value\": \"list_datasets\",\n                  \"name\": \"List Datasets\"\n              },\n              {\n                  \"value\": \"query\",\n                  \"name\": \"Query\"\n              }\n          ]\n      },\n      \"query\": {\n          \"query\": {\n              \"label\": \"Query\",\n              \"key\": \"query\",\n              \"type\": \"codehinter\",\n              \"description\": \"\",\n              \"height\": \"150px\"\n          }\n      }\n  }\n}\n```\n\n\nHandle the logic for running queries in `index.ts` \n\n\n`QueryService` receives the metadata of the data source including the credentials and configs for connecting and parameters for the query that was run. In our example, `sourceOptions` will have the `private_key` of BigQuery datasource associated with the query. `queryOptions` will have the configs and parameters for the specific query. For example, `queryOption.operation` will give the id of current operation. \n```javascript\n    export default class BigQueryQueryService implements QueryService {\n      async run(sourceOptions: any, queryOptions: any, _dataSourceId: string): Promise {\n        const operation = queryOptions.operation;\n        const client = await this.getConnection(sourceOptions);\n        let result = {};\n\n\n```    try {\n      switch (operation) {\n        case 'list_datasets':\n            result = await client.getDatasets();\n            break;\n      }\n    } catch (error) {\n      throw new QueryError('Query could not be completed', error.message, {});\n    }\n\n    return {\n      status: 'ok',\n      data: result,\n    };\n  }\n}\n```\n\n\n```\n\n\nSince it is a smiliar step for adding the logic for handling `query` operation, skipping it. \n\n\nTest files are generated by the cli when a plugin is created. You can use `jest` for writing the tests.\n\n\nTests for a specific plugin can be run using the command `tooljet plugin test --bigquery`",
    "tag": "tooljet"
  },
  {
    "title": "Generate file",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/actions/generate-file.md",
    "content": "\nid: generate-file\ntitle: Generate file\n\nGenerate file\nThis action allows you to construct files on the fly and let users download it.\nPresently, the only file type supported is `CSV`.\nOptions\n| Option | Description |\n|--------|-------------|\n| Type   | Type of file to be generated |\n| File name | Name of the file to be generated |\n| Data | Data that will be used to construct the file. Its format will depend on the file type, as specified in the following section |\nData format for CSV\nFor `CSV` file type, the data field should be supplied with an array objects. ToolJet assumes that the keys of each of\nthese objects are the same and that they represent the column headers of the csv file.\nExample:\n`javascript\n{{\n  [\n    { name: 'John', email: 'john@tooljet.com' },\n    { name: 'Sarah', email: 'sarah@tooljet.com' },\n  ]\n}}`\nSupplying the above snippet will generate a csv file which looks like this:\n```csv\nname,email\nJohn,john@tooljet.com\nSarah,sarah@tooljet.com",
    "tag": "tooljet"
  },
  {
    "title": "Available Component Specific Actions",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/actions/control-component.md",
    "content": "\nid: control-component\ntitle: Control component\n\nControl component action invokes the component specific actions. Component specific actions are the actions that are exclusive actions for a particular widget. Component specific actions can be triggered either through the event handlers or from the Run JavaScript code query.\n:::info\nCheck out the live demo of Component specific actions demonstrated in one of our community call.\n:::\nAvailable Component Specific Actions\n| Widget | Component Specific Actions |\n|--------|---------------------------|\n| Button | Click, Set label, Disable, Visibility, Loading |\n| Text   | Set text, Set Visibility |\n| Text Input | Set text, Clear, Set Focus, Set Blur, Disable, Visibility |\n| Text Area | Set text, Clear |\n| Modal     | Show, Close |\n| Table   | Set page      |\n| Dropdown   | Select option |\n| Multiselect   | Select option, Deselect option, Clear selection |\n| Map   | Set location |\n| Checkbox   | Set checked |\n| Radio button | Select option |\n| Tabs   | Set tab |\n| Color picker   | Set color |\n| File picker    | Clear files |\n:::info\nCurrently, Component specific actions are supported only by the above listed widgets. We are working on bringing component specific actions for the remaining widgets.\n:::\nUsing Component Specific Actions\nSet a value for text input widget using button's event handler\n\n\nDrag a Text Input and a Button widget onto the canvas.\n\n\nGo to the Inspector on the left sidebar to check the exposed variables available for the `textinput1` widget under the `components`. You'll see that the variable `value` is an empty string because the field value of the text input widget is empty right now.\n\n\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/inspector.png)\n\n\n\nNow enter some value in the text input widget and you'll see that the `value` in inspector has been updated.\n\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/updated.png)\n\n\n\nNow, click on the button's widget handler to open up its properties in the right sidebar and then add a event handler for On Click event to trigger Control Component action. Select `textinput1` in component dropdown, `Set text` as Action, and in `Text` field enter the text that you want to update in the field value.\n\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/button.png)\n\n\n\nNow when you'll click on the button you'll see that the field value of the text input widget has been updated with value that you set.\n\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/set.png)\n\n\nClear value of text input widget using JavaScript query\n\nLet's clear the value that we set in the previous section, using Run JavaScript code. Create a new Run JavaScript Code query and call the component and the CSA that component provides.\n\nSyntax:\n`js\nawait components.textinput1.clear()`\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/jsoption.png)\n\n\n\n\n![ToolJet - Action reference - Control Component](/img/actions/controlcomponent/clear.png)\n\n\n\nFinally, hit the save and run query button to fire up the query, and you'll see that the field value of the text input widget has been cleared.\n",
    "tag": "tooljet"
  },
  {
    "title": "Set localStorage",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/actions/set-localstorage.md",
    "content": "\nid: set-localstorage\ntitle: Set localStorage\n\nSet localStorage\nThis action allows you to specify a `key` and its corresponding `value` to be stored in localStorage.\nExample: App that stores a name in localStorage and displays it on reload\n\nAdd an input field, button and a text as shown\n\n\n\n![ToolJet - Action reference -Set local storage sample app](/img/actions/localstorage/1.png)\n\n\n\nSelect the button and add a `Set localStorage` action with `key` set to `name` and value pointing at the value of the text field\n\n\n\n![ToolJet - Action reference -Set local storage sample app](/img/actions/localstorage/2.png)\n\n\n\nSelect the text label we've added and set its value to the name item from localStorage\n\n\n\n![ToolJet - Action reference -Set local storage sample app](/img/actions/localstorage/3.png)\n\n\n\n\nNow save the application, this is important as we're about to reload the page.\n\n\nType in anything you wish on the input box and click on the button\n\n\n\n\n![ToolJet - Action reference -Set local storage sample app](/img/actions/localstorage/5.png)\n\n\n\nReload the page, you'll see that the value stored in local storage is persisted and it is displayed on screen!\n\n\n\n![ToolJet - Action reference -Set local storage sample app](/img/actions/localstorage/6.png)\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Snowflake",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/snowflake.md",
    "content": "\nid: snowflake\ntitle: Snowflake\n\nSnowflake\nToolJet can connect to Snowflake databases to read and write data.\n\nConnection\nGetting Started\n\nConnection\nPlease make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP. You can find snowflake docs on network policies here.\nTo add a new Snowflake database, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select Snowflake from the modal that pops up.\nToolJet requires the following to connect to your Snowflake database.\n\nAccount\nUsername\nPassword\n\n:::info\nYou can also configure for additional optional parameters.\n:::\n\n\n![ToolJet - Snowflake connection](/img/datasource-reference/snowflake/snowflake-connect.png)\n\n\nQuerying Snowflake\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the datasource. Query manager then can be used to write raw SQL queries.\n\n\n![ToolJet - Snowflake query](/img/datasource-reference/snowflake/snowflake-query.png)\n\n\nClick on the `run` button to run the query. \nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "REST API ",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/restapi.md",
    "content": "\nid: restapi\ntitle: REST API \n\nREST API\nToolJet can connect to any REST endpoint available. \nConnection\nTo add a new REST API datasource, click the Datasources manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select REST API from the modal that pops up.\nClick on the 'Save' button to save the data source.\n\nToolJet requires the following to connect to a REST API  datasource.\n\nURL of the REST endpoint\n\nThe following optional parameters are also supported:\n| Type         | Description |\n   | -----------  | ----------- |\n   | URL params   | Additional query string parameters|\n   | headers      | Any headers the REST API source requires|\n   | body         | Any values or fields the REST API source requires|\n:::info\nREST HTTP methods that are supported are GET, POST, PUT, PATCH & DELETE.\n:::\n\nQuerying REST API\nClick on `+` button of the query manager at the bottom panel of the editor and select the REST API endpoint added in the previous step as the data source.\nClick on the 'run' button to run the query. \n:::note\nNOTE: Query should be saved before running.\n:::\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "SMTP",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/smtp.md",
    "content": "\nid: smtp\ntitle: SMTP\n\nSMTP\nSMTP plugin can connect ToolJet applications to SMTP servers for sending emails.\nConnection\nA SMTP server can be connected with the following credentails:\n- Host\n- Port\n- User\n- Password\n:::info\nYou can also test your connection before saving the configuration by clicking on `Test Connection` button.\n:::\n\n\n\nQuerying SMTP\nGo to the query manager at the bottom panel of the editor and click on the `+` button on the left to create a new query. Select `SMTP` from the datasource dropdown.\nTo create a query for sending email, you will need to provide the following properties:\n  - From `required` : Email address of the sender\n  - From Name : Name of the sender\n  - To `required` : Recipient's email address\n  - Subject : Subject of the email\n\n\nBody : You can enter the body text either in the form of `raw text` or `html` in their respective fields.\nAttachments : Attachments can be added to a SMTP query by referencing the file from the `File Picker` component in the attachments field. \n\nFor example, you can set the `Attachments` field value to `{{ components.filepicker1.file }}` or you can pass an array of `{{ name: 'filename.jpg', dataURL: '......' }}` object to accomplish this.",
    "tag": "tooljet"
  },
  {
    "title": "SendGrid",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/sendgrid.md",
    "content": "\nid: sendgrid\ntitle: SendGrid\n\nSendGrid\nToolJet can connect to your SendGrid account to send emails.\n\n:::info\nThe SendGrid API Datasource supports for interaction with the mail endpoint of the SendGrid v3 API.\n:::\nConnection\nTo add a new SendGrid API datasource, click the Datasource manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select SendGrid API from the modal that pops up.\nEnter your SendGrid API key in the \"API key\" field.\n:::tip\nSendGrid API key is required to create an SendGrid datasource on ToolJet. You can generate API key by visiting SendGrid account page. \n:::\nClick on the 'Save' button to save the data source.\nSupported operations\n\nEmail service\n\nEmail service\nRequired parameters: \n- Send email to\n- Send email from \n- Subject\n- Body as text\nOptional parameters:\n- Body as HTML\n\n:::info\nSend mail to - accepts an array/list of emails separated by comma.\nFor example:\n`{{[\"dev@tooljet.io\", \"admin@tooljet.io\"]}}`.\nSend mail from - accepts a string.\nFor example: `admin@tooljet.io`\n:::\n:::tip\nSend a single email to multiple recipients - The `Send mail to` field can contain an array of recipients, which will send a single email with all of the recipients in the field. \nSend multiple individual emails to multiple recipients - set Multiple recipients field to `{{true}}` and the `Send mail to` field will be split into multiple emails and send to each recipient.\n:::\n:::note\nNOTE: Query should be saved before running.",
    "tag": "tooljet"
  },
  {
    "title": "Mailgun",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/mailgun.md",
    "content": "\nid: mailgun\ntitle: Mailgun\n\nMailgun\nToolJet can connect to your Mailgun account to send emails.\n\n:::info\nThe Mailgun API Datasource supports for interaction with the mail endpoint of the Mailgun API.\n:::\nConnection\nTo add a new Mailgun API datasource, click the Datasource manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select Mailgun API from the modal that pops up.\nEnter your Mailgun API key in the \"API key\" field.\n:::tip\nMailgun API key is required to create an Mailgun datasource on ToolJet. You can generate API key by visiting Mailgun account page.\n:::\nClick on the 'Save' button to save the data source.\nSupported operations\n\nEmail service\n\nEmail service\nRequired parameters:\n\nSend email to\nSend email from\nSubject\nBody as text\n\nOptional parameters:\n\nBody as HTML\n\n\n:::info\nSend mail to - accepts a single email id. \nFor example:\n`{{\"dev@tooljet.io\"}}`.\nSend mail from - accepts a string.\nFor example: `admin@tooljet.io`\n:::\n:::tip\nSend a single email to multiple recipients - The `Send mail to` field can contain an array of recipients, which will send a single email with all of the recipients in the field.\nSend multiple individual emails to multiple recipients - set Multiple recipients field to `{{true}}` and the `Send mail to` field will be split into multiple emails and send to each recipient.\n:::\n:::note\nNOTE: Query should be saved before running.",
    "tag": "tooljet"
  },
  {
    "title": "MariaDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/mariadb.md",
    "content": "\nid: mariadb\ntitle: MariaDB\n\nMariaDB\nToolJet can connect to MariaDB to read and write data.\nConnection\nTo add a new MariaDB data source, click on the `+` button on datasources panel at the left sidebar of the app builder. Select MariaDB from the modal that pops up.\nToolJet requires the following to connect to your DynamoDB.\n\nHost\nUsername\nPassword\nConnection Limit\nPort\nDatabase\nSSL\nSSL Certificate\n\n\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying MariaDB\nClick on `+` button of the query manager at the bottom panel of the builder and select the MariaDB datasource added in the previous step. \n\n\n\nClick on the run button to run the query.\nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "Oracle DB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/oracledb.md",
    "content": "\nid: oracledb\ntitle: Oracle DB\n\nOracle DB\nToolJet can connect to Oracle databases to read and write data. \nConnection\nA Oracle DB can be connected with the following credentails:\n- Host\n- Port\n- SID / Service Name ( Database name must be a SID / Service Name )\n- Database Name\n- SSL\n- Username\n- Password\n- Client Library Path ( Only required for local setup )\n\n\n![ToolJet - Data source - OracleDB](/img/datasource-reference/oracledb/oracleauth.png)\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying Oracle DB\nOnce you have added a Oracle DB data source, click on `+` button of the query manager to create a new query. There are two modes by which you can query SQL:\n\nSQL mode\nGUI mode\n\nSQL mode\nSQL mode can be used to write raw SQL queries. Select SQL mode from the dropdown and enter the SQL query in the editor. Click on the `run` button to run the query.\nNOTE: Query should be saved before running.\nGUI mode\nGUI mode can be used to query Oracle database without writing queries. Select GUI mode from the dropdown and then choose the operation Bulk update using primary key. Enter the Table name and Primary key column name. Now, in the editor enter the records in the form of an array of objects. \nExample: `{{ [ {id: 1, channel: 33}, {id:2, channel:24} ] }}`\nClick on the run button to run the query. NOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "Redis",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/redis.md",
    "content": "\nid: redis\ntitle: Redis\n\nRedis\nToolJet can run Redis commands on your Redis instances.\nConnection\nToolJet requires the following to connect to your Redis instances. \n\n\nHost\nPort - The default port for Redis server is 6379\nUsername\nPassword\n\nClick on \"Test\" button to test the connection and click \"Save\" to save the data source.\nRedis Queries\nList of supported commands: Redis Official Documentation\nExamples\n`PING` command to test the Redis connection. If the connection is ready, the Redis server will respond with `PONG`.\n`shell\nPING`\n`SET` command can be used to set the value for a key \n`shell\nSET key value`\n`GET` command can be used to retrieve the value of a key\n```shell\nGET key",
    "tag": "tooljet"
  },
  {
    "title": "InfluxDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/influxdb.md",
    "content": "\nid: influxdb\ntitle: InfluxDB\n\nInfluxDB\nToolJet can connect to InfluxDB databases to read and write data. Use the Token authentication scheme to authenticate to the InfluxDB API. For more info visit InfluxDB docs.\nConnection\nToolJet connects to InfluxDB using :\n\nAPI Token\nHost\nPort\nProtocol (HTTP/HTTPS)\n\n:::info\nFor generating API Token visit InfluxDB docs.\n:::\n\n\n![ToolJet - Data source - influxDB](/img/datasource-reference/influxdb/influxauth.png)\n\n\nSupported queries:\n\n\nWrite data\n\n\nQuery data\n\n\nGenerate an Abstract Syntax Tree (AST) from a query\n\n\nRetrieve query suggestions\n\n\nRetrieve query suggestions for a branching suggestion\n\n\nAnalyze a Flux query\n\n\nList buckets\n\n\nCreate a bucket\n\n\nRetrieve a bucket\n\n\nUpdate a bucket\n\n\nDelete a bucket\n\n\n\nWrite data\nThis operation writes data to a bucket.\nRequired parameters:\n\nBucket\nOrganization name or ID\n\nOptional parameters:\n\nPrecision\n\nQuery data\nRetrieves data from InfluxDB buckets.\nRequired parameters:\n\nOrganization name or ID\n\nGenerate an Abstract Syntax Tree (AST) from a query\nThis operation analyzes flux query and generates a query specification.\nRequired parameters:\n\nQuery\n\nRetrieve query suggestions\nThis query retrieve query suggestions.\nRetrieve query suggestions for a branching suggestion\nThis operation retrieve query suggestions for a branching suggestion.\nRequired parameters:\n\nName\n\nAnalyze a Flux query\nThis Analyzes a Flux query.\nRequired parameters:\n\nQuery\n\nList buckets\nThis operation lists all the buckets in a database.\nCreate a bucket\nRequired parameters:\n\nQuery\n\nRetrieve a bucket\nThis operation retrieve a bucket in a database.\nRequired parameters:\n\nBucket ID\n\nUpdate a bucket\nRequired parameters:\n\nBucket ID\nQuery\n\nDelete a bucket\nRequired parameters:",
    "tag": "tooljet"
  },
  {
    "title": "Appwrite Database",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/appwrite.md",
    "content": "\nid: appwrite\ntitle: Appwrite Database\n\nAppwrite Database\nNow build applications on top of your Appwrite database.\nConnection\nToolJet connects to your Appwrite app using :\n- Host (API endpoint)\n- Project ID\n- Secret key\nYou'll find the Secret key and other credentials on your Appwrite's project settings page. You may need to create a new key if you don't have one already.\n:::info\nYou should also set the scope for access to a particular resource. Learn more about the API keys and scopes here.\n:::\nTo connect Appwrite datasource to your ToolJet application, go to the data source manager on the left-sidebar and click on the `+` button. Select Appwrite from the list of available datasources, provide the credentials and click Save. It is recommended to check the connection by clicking on 'Test connection' button to verify if the service account can access Appwrite from the ToolJet server.\n\nQuerying Appwrite\nAfter setting up the Appwrite datasource, you can click on the `+` button of the query manager at the bottom panel of the editor and select the Appwrite data source that you added in the previous step.\n\nAfter selecting Appwrite datasource, select the operation that you want to perform on the Appwrite database and click Save to save the query. \n:::tip\nQuery results can be transformed using Transformations. Read our Transformation documentation here\n:::\nSupported operations\n\nList documents\nGet document\nCreate document\nUpdate document \nDelete document\nBulk update using document id\n\nList documents\nThis operation can be used to get a list of all the user documents.\nRequired parameters:\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The value for collection ID field should be of `String` type. \n\nOptional parameters:\n\nLimit: Maximum number of documents to return in the response. By default, it will return a maximum of 25 results. A maximum of 100 results is allowed per request. The Limit value should be of `integer` type.\nOrder fields: Array of attributes used to sort results. The order field value should be an `array`.\nOrder types: Array of order directions for sorting attributes. Possible values are DESC for descending order or ASC for ascending order. The order field value should be an `array`.\nField, Operator, and Value: For filtering the results, you can enter a field(attribute) name, use the appropriate operator from the dropdown, and set a value.\n\n\nGet document\nUse this operation to get a document from a collection by its unique ID. \nRequired parameters:\n\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The value for collection ID should be of `String` type. \n\n\nDocument ID: Enter the document ID of the document that you want to get. The document ID should be of `String` type. \n\n\n\nAdd Document to Collection\nUse this operation to create a new document in a collection.\nRequired parameters:\n\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The collection ID should be of `String` type. \n\n\nBody: Enter the document data as a JSON object.\n\n\n\nUpdate document\nUse this operation to update a document.\nRequired parameters:\n\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The value for collection ID should be of `String` type. \n\n\nDocument ID: Enter the document ID of the document that you want to get. The document ID should be of `String` type. \n\n\nBody: Enter the document data as a JSON object.\n\n\n\nDelete document\nUse this operation for deleting a document in the collection.\nRequired parameters:\n\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The value for collection ID should be of `String` type. \n\n\nDocument ID: Enter the document ID of the document that you want to get. The document ID should be of `String` type. \n\n\n\nBulk update using document id\nUse this operation for bulk updating a document in a collection.\nRequired parameters:\n\n\nCollection ID: You can create a new collection using the Database service server integration or appwrite console. The value for collection ID should be of `String` type. \n\n\nKey for document ID:  Enter the key or attribute name that can be used to identify each record.\n\n\nRecords: The array of objects that will contain the data for updating each record in the database\nand these objects must contain a key-value pair to point unique record in the database (key for document)\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Slack",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/slack.md",
    "content": "\nid: slack\ntitle: Slack\n\nSlack\nToolJet can connect to your Slack workspace to send messages. \n\n\n![ToolJet - Data source - Slack](/img/datasource-reference/slack/connect.png)\n\n\nConnection\n\n\nTo add the Slack datasource, click the Datasource manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select Slack from the modal that pops up.\n\n\nIn the next dialog, you'll be asked to choose the permission scope. Choose the permission scope and then click on Connect to Slack button.\n\n\nA new tab will open up asking for authorization confirmation. Once done, you can close the tab.\n\n\n\n\n![ToolJet - Data source - Slack](/img/datasource-reference/slack/authorize.png)\n\n\n\nClick on the 'Save data source button to save the data source.\n\n:::note\nThe App (which credentials are provided) needs to be installed in the workspace to use the Slack data source, and it needs to be added to the channel where you want to post the message.\n:::\nSupported operations\n\nList members\nSend message\n\nList members\nThis operation will return the data of all the members in your slack workspace.\n\n\n![ToolJet - Data source - Slack](/img/datasource-reference/slack/listmembers.png)\n\n\nSend message\nThis operation will send/post the message to a specified channel or posting to direct messages (also known as DMs or IMs) in your slack workspace.\n| Property | Description |\n| :--- | :--- |\n| Channel | The channel ID or user ID to post the message to. |\n| Message | The message to post. |\n\n\n![ToolJet - Data source - Slack](/img/datasource-reference/slack/sendmessage.png)\n\n",
    "tag": "tooljet"
  },
  {
    "title": "SAP HANA",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/saphana.md",
    "content": "\nid: saphana\ntitle: SAP HANA\n\nSAP HANA\nToolJet can connect to SAP HANA databases to read and write data. \n\nConnection\nQuerying SAP HANA\n\nConnection\nTo add a new SAP HANA database, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select SAP HANA from the modal that pops up.\nToolJet requires the following to connect to your SAP HANA database:\n\nHost\nPort\nUsername\nPassword\n\n:::info\nPlease make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\n:::\n\n\n![ToolJet - Data source - SAP HANA](/img/datasource-reference/saphana/connect.png)\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying SAP HANA\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. Enter the query in the editor. Click on the `run` button to run the query.\nNOTE: Query should be saved before running.\n\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "Twilio",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/twilio.md",
    "content": "\nid: twilio\ntitle: Twilio\n\nTwilio\nToolJet can connect to your Twilio account to send sms.\n\n\n![ToolJet - Data source - Twilio](/img/datasource-reference/twilio/connect.png)\n\n\nConnection\n\n\nTo add the Twilio datasource, click the Datasource manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select Twilio from the modal that pops up.\n\n\nIn the next dialog, you'll be asked to enter the Auth Token, Account SID, and Messaging Service SID.\n\n\nYou can get the Auth Token and Account SID on the dashboard of your Twilio account.\n\n\n\n\n![ToolJet - Data source - Twilio](/img/datasource-reference/twilio/auth.png)\n\n\n\nFor Messaging Service SID, you'll need to create a messaging service first from the Services under Messaging in the left-sidebar.\n\n\n\n![ToolJet - Data source - Twilio](/img/datasource-reference/twilio/sid.png)\n\n\n\nAfter entering the three credentials, you can Save the datasource.\n\nSupported operations\n\nSend message\n\nSend message\nThis operation will send the specified message to specified mobile number.\n\n\n![ToolJet - Data source - Twilio](/img/datasource-reference/twilio/sms.png)\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Amazon SES",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/amazonses.md",
    "content": "\nid: amazonses\ntitle: Amazon SES\n\nAmazon SES\nToolJet can connect to your Amazon SES account to send emails.\nConnection\nTo add a new Amazon SES API datasource, click the Datasource manager icon on the left-sidebar of the app builder and click on the `Add datasource` button, then select Amazon SES from the modal that pops up.\nToolJet requires the following to connect to Amazon SES:\n\nRegion\nAccess key\nSecret key\n\nIt is recommended to create a new IAM user for the database so that you can control the access levels of ToolJet.\nClick on the 'Save' button to save the data source.\nSupported operations\n\nEmail service\n\nEmail service\nRequired parameters:\n- Send email to\n- Send email from\n- Subject\n- Body as text\nOptional parameters:\n- Body as HTML\n- CC Addresses\n- BCC Addresses\n:::info\nSend mail to - accepts an array/list of emails separated by comma.\nFor example:\n`{{[\"dev@tooljet.io\", \"admin@tooljet.io\"]}}`.\nSend mail from - accepts a string.\nFor example: `admin@tooljet.io`\n:::\n:::tip\nSend a single email to multiple recipients - The `Send mail to` field can contain an array of recipients, which will send a single email with all of the recipients in the field.\n:::note\nNOTE: Query should be saved before running.",
    "tag": "tooljet"
  },
  {
    "title": "MySQL",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/mysql.md",
    "content": "\nid: mysql\ntitle: MySQL\n\nMySQL\nToolJet can connect to MySQL databases to read and write data. \nConnection\nToolJet requires the following to connect to your MySQL database. Please make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nTo add a new MySQL database, click on the `+` button on data sources panel at left sidebar in the app editor. Select MySQL from the modal that pops up.\nToolJet requires the following to connect to your MySQL database.\n\nHost\nPort\nUsername\nPassword\n\nIt is recommended to create a new MySQL database user so that you can control the access levels of ToolJet. \n\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying MySQL\nOnce you have added a MySQL data source, click on `+` button of the query manager to create a new query. There are two modes by which you can query SQL:\n\nSQL mode\nGUI mode\n\nSQL mode\nSQL mode can be used to write raw SQL queries. Select SQL mode from the dropdown and enter the SQL query in the editor. Click on the `run` button to run the query.\nNOTE: Query should be saved before running.\n\nGUI mode\nGUI mode can be used to query MySQL database without writing queries. Select GUI mode from the dropdown and then choose the operation Bulk update using primary key. Enter the Table name and Primary key column name. Now, in the editor enter the records in the form of an array of objects. \nExample: `{{ [ {id: 1, channel: 33}, {id:2, channel:24} ] }}`\n\nClick on the run button to run the query. NOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "Cloud Firestore",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/firestore.md",
    "content": "\nid: firestore\ntitle: Cloud Firestore\n\nCloud Firestore\nConnection\nToolJet connects to your Cloud Firestore using JSON key of your GCP service account.\nTo generate a new key, check out Firestore's official documentation.\nOnce the key is downloaded, click on `+` button of data sources panel at the left-bottom corner of the app editor. Select Firestore from the modal that pops up. Paste the key in the field for GCP key. Click on Test connection button to verify if the service account can access Firestore from ToolJet server. Click on Save button to save the datasource.\n\nQuerying Firestore\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source.\n\nSelect the operation that you want to perform on Firestore and click Save to save the query. \n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\n\nGet document\nQuery collection\nAdd Document to Collection \nUpdate document \nSet document\nBulk update using document id\nDelete document\n\nGet document\nUse this operation to get the data in a document.\nRequired parameters:\n\nPath: Enter the path of the document. Path format: `collection name/document id`. ex: `books/23e2wsds32`\n\n\nQuery collection\nUse this operation to query all the documents in a collection. Check firestore doc here.\nRequired parameters:\n\nPath: Enter the name of the collection to be queried. Example: `books`\n\nOptional parameters:\n\n\nOrder type: Select ascending or descending from the dropdown.\n\n\nLimit: Maximum number of documents to return in response. By default will return maximum 25 results. Maximum of 100 results allowed per request. The Limit value should be of integer type.\n\n\nField, Operator, and Value: For filtering the results, you can enter a document field name, use appropriate operator from the dropdown and set a value.\n\n\n\nAdd Document to Collection\nUse this operation for creating a new document in a collection.\nRequired parameters:\n\nCollection: Enter the path of the document in a collection. Path format: `collection name/document id`. ex: `books/33243dwe2332`\nBody: Enter the Field names and their values in json form. example body:\n`json\n{\n\"Author\": \"Shubh\",\n\"id\": 5\n}`\n\n\nUpdate document\nUse this operation for updating the existing document in a collection. Also, it only updates fields if they exist, but doesn't replace an entire object like set operation.\nRequired parameters:\n\nPath: Enter the path of the document in a collection. Path format: `collection name/document id`. ex: `books/33243dwe2332`\nBody: Enter the Field names and their values in json form. example body:\n`json\n{\n\"Author\": \"Shubhendra\",\n\"id\": 3\n}`\n\n\nSet document\nThis operation replaces your chosen object with the value that you provide. So if your object has 5 fields, and you use Set operation and pass object with 3 fields, it will now have 3 fields.\nRequired parameters:\n\nPath: Enter the path of the document in a collection. Path format: `collection name/document id`. ex: `books/33243dwe2332`\nBody: Enter the Field names and their values in json form. example body:\n`json\n{\n\"Author\": \"Shefewfbh\",\n\"id\": 9\n}`\n\n\nBulk update using document id\nUse this operation for bulk updating documents.\nRequired parameters:\n\nCollection: \nKey for document ID: \nRecords:\n\n\nDelete document\nUse this operation for deleting a document in a collection.\nRequired parameters:\n\nPath: Enter the path of the document to be deleted in a collection. Path format: `collection name/document id`. ex: `books/33243dwe2332`\n\n\nTransforming firestore query result for Table widget\nThe Firestore query result is in the form of object so we\u2019ll need to transform it into array.\n```js\nreturn data = Array(data)",
    "tag": "tooljet"
  },
  {
    "title": "MinIO",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/minio.md",
    "content": "\nid: minio\ntitle: MinIO\n\nMinIO\nToolJet can connect to minio and perform various operation on them.\nSupported operations\n\nRead object\nPut object\nRemove object\nList buckets\nList objects in a bucket\nPresigned url for download\nPresigned url for upload\n\nConnection\nTo add a new minio source, click on the Add or edit datasource icon on the left sidebar of the app editor and click on `Add datasource` button. Select Minio from the modal that pops up.\nToolJet requires the following to connect to your DynamoDB:\n\nHost\nPort\nAccess key\nSecret key\n\n\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying Minio\nClick on `+` button of the query manager at the bottom panel of the editor and select the data source added in the previous step as the data source. Select the operation that you want to perform and click Save to save the query.\n\nClick on the run button to run the query. \nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "TypeSense",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/typesense.md",
    "content": "\nid: typesense\ntitle: TypeSense\n\nTypeSense\nToolJet can connect to your TypeSense deployment to read and write data.\nConnection\nPlease make sure the host/IP of the TypeSense deployment is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nToolJet requires the following to connect to your TypeSense deployment: \n- Host\n- Port\n- API Key\n- Protocol\n\n\n\nQuerying TypeSense\nClick on `+` button of the query manager at the bottom panel of the editor and select the TypeSense added in the previous step as the data source.\nSelect the operation that you want to perform on your TypeSense cluster and click `Create` to save the query. \n\n\n\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\n1. Create a Collection\nWith this operation you can easily create `Collections` in your TypeSense cluster. In the schema field, you'll need to define the schema for creating a new collection. Check out TypeSense docs to know more about collections here\n\n2. Index a document\nUse this operation to index a document to your collection. You'll need to specify the Collection Name where you want your document to be indexed and also provide the document data according the schema defined in the collection. Read more about Indexing a document in TypeSense here.\n\n3. Search\nUse this operation to perform a search within the specified collection. Know more about the search parameters in the TypeSense doc here.\n\n4. Get a document\nUse this operation to fetch an individual document in a collection by providing the `id` of the document. Read more about it here.\n\n5. Update a document\nUse this operation to update an individual document by providing the Collection Name and Id of the document. You'll need to provide the updated document data in the form of specified schema. Check out the TypeSense's doc on updating a document here.\n\n6. Delete a document\nDelete a document from collection by providing the `Id` of the document. Check out the TypeSense's doc on deleting documents here.\n\n:::tip\nMake sure that you supply JSON strings instead of JavaScript objects for any document or schema that is being passed to the server, in any of the above operations.",
    "tag": "tooljet"
  },
  {
    "title": "Notion",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/notion.md",
    "content": "\nid: notion\ntitle: Notion\n\nNotion\nToolJet can connect to a Notion workspace to do operations on notion pages, databases and blocks.\nConnection\nFor integrating Notion with ToolJet we will need the API token. The API token can be generated from your Notion workspace settings. Read the official Notion docs for Creating an internal integration with notion API.\n\n\n\nQuerying Notion\nNotion API provides support for:\n- Database\n- Page\n- Block\n- User\n\n:::tip\nBefore querying Notion, you must share the database with your integration. Click the share button in your database view, find your integration name select it.\n\n:::\nDatabase\nOn database resource you can perform the following operations:\n- Retrieve a database\n- Query a database\n- Create a database\n- Update a database\n\n1. Retrieve a database\nThis operations retrieves a Database object using the ID specified.\nRequired parameters:\n\nDatabase ID: You'll find the Database ID in the url. Suppose this is the example url: `https://www.notion.so/workspace/XXX?v=YYY&p=ZZZ` then `XXX` is the database ID, `YYY` is the view ID and `ZZZ` is the page ID.\n\n\n2. Query a database\nThis operation gets a list of Pages contained in the database, filtered and ordered according to the filter conditions and sort criteria provided in the query.\nRequired parameters:\n\nDatabase ID : You'll find the Database ID in the url. Suppose this is the example url: `https://www.notion.so/workspace/XXX?v=YYY&p=ZZZ` then `XXX` is the database ID, `YYY` is the view ID and `ZZZ` is the page ID.\n\nOptional parameters:\n\nFilter : This must be an object of filters\nSort : Array of sort objects\nLimit : limit for pagination\nStart Cursor : Next object id to continue pagination\n\n3. Create a database\nThis operation creates a database as a subpage in the specified parent page, with the specified properties.\nRequired parameters:\n\nDatabase ID : You'll find the Database ID in the url. Suppose this is the example url: `https://www.notion.so/workspace/XXX?v=YYY&p=ZZZ` then `XXX` is the database ID, `YYY` is the view ID and `ZZZ` is the page ID.\nPage ID : Page ID of the parent\nProperties : Properties defines the columns in a database\n\nOptional parameters:\n\nTitle : Title should be an array of rich_text properties\nIcon type : Currently notion api accepts two icon options, emoji, external URL\nIcon value : Value of selected icon type\nIcon type : Currently notion api accepts only external URL\nCover value : Value of selected cover type\n\n4. Update a database\nThis operation updates an existing database as specified by the parameters.\nRequired parameters:\n\nDatabase ID\n\nOptional parameters:\n\nTitle : Title should be an array of rich_text properties\nProperties : Properties defines the columns in a database\nIcon type : Currently notion api accepts two icon options, emoji, external URL\nIcon value : Value of selected icon type\nIcon type : Currently notion api accepts only external URL\nCover value : Value of selected cover type\n\nPage\nOn page resource you can perform the following operations:\n- Retrieve a page\n- Create a page\n- Update a page\n- Retrieve a page property\n- Archive a page\n\n1. Retrieve a page\nThis operation retrieves a Page object using the ID specified.\nRequired parameters:\n\nPage ID\n\n2. Create a page\nThis operation creates a new page in the specified database or as a child of an existing page. If the parent is a database, the property values of the new page in the properties parameter must conform to the parent database's property schema. If the parent is a page, the only valid property is title.\nParameters:\n\nPage ID\nProperties : Property values of this page\nIcon type : Currently notion api accepts two icon options, emoji, external URL\nIcon value: Value of selected icon type\nIcon type : Currently notion api accepts only external URL\nCover value : Value of selected cover type\n\n3. Update a page\nThis operation updates page property values for the specified page. Properties that are not set via the properties parameter will remain unchanged.\nParameters:\n\nPage ID\nParent type: A database parent or page parent\nProperties : Property values of this page\nChildren : Page content for the new page as an array of block objects\nIcon type : Currently notion api accepts two icon options, emoji, external URL\nIcon value: Value of selected icon type\nIcon type : Currently notion api accepts only external URL\nCover value : Value of selected cover type\n\n4. Retrieve a page property item\nThis operation retrieves a property_item object for a given page ID and property ID. Depending on the property type, the object returned will either be a value or a paginated list of property item values. See Property item objects for specifics.\nParameters:\n\nPage ID\nProperty ID\nLimit\nStart cursor\n\n5. Archive (delete) a page\nRequired parameters:\n\nPage ID\nArchive: Dropdown for archive and un archive the page\n\nBlocks\nThe following operations can be performed on the block resource:\n- Retrieve a block\n- Append block children\n- Retrieve block children\n- Update a block\n- Delete a block\n\n:::info\nTo get the id for blocks, simply click on the menu icon for the block and click \"Copy link\". Afterwards, paste the link in the browser and it should look like this: `https://www.notion.so/Creating-Page-Sample-ee18b8779ae54f358b09221d6665ee15#7fcb3940a1264aadb2ad4ee9ffe11b0e` the string after # is the block id i.e. `7fcb3940a1264aadb2ad4ee9ffe11b0e`.\n:::\n1. Retrieve a block\nThis operation retrieves a Block object using the ID specified.\nRequired parameters:\n\nBlock ID\n\n2. Append new block children\nThis operation creates and appends new children blocks to the parent block_id specified.\nRequired parameters:\n\nBlock ID\nChildren: Array of block objects\n\n3. Retrieve block children\nThis operation retrieves a paginated array of child block objects contained in the block using the ID specified.\nRequired parameters:\n\nBlock ID\nLimit\nStart cursor\n\n4. Update a block\nThis operation updates the content for the specified block_id based on the block type.\nRequired parameters:\n\nBlock ID\nProperties: The block object type value with the properties to be updated\nArchive\n\n5. Delete a block\nRequired parameters:\n\nBlock ID\n\nUser\nThe following operations can be performed on the user notion resource:\n1. Retrieve a user from current workspace\nThis operation retrieves a User using the ID specified.\n\nRequired parameters:\n\nUser ID\n\n2. Retrieve list of users of a workspace\nThis operation returns a paginated list of Users for the workspace.\nRequired parameters:\n\nLimit\nStart cursor\n",
    "tag": "tooljet"
  },
  {
    "title": "Stripe",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/stripe.md",
    "content": "\nid: stripe\ntitle: Stripe\n\nStripe\nToolJet can connect to your Stripe account to read or write customers' and payments' data.\n:::info\nCheck out the Stripe Refund App tutorial\n:::\nConnection\nTo add a new Stripe data source, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select Stripe from the modal that pops up.\nToolJet requires the Stripe API key to connect to your database.\n\n\n![ToolJet - Data source - Stripe](/img/datasource-reference/stripe/connect.png)\n\n\nYou can get the Stripe API key from the dashboard of your Stripe account. Go to the Stripe account dashboard, click on the Developers on the top right, then on the left-sidebar go to the API Keys, you can simple reveal the Secret Key and copy-paste on ToolJet.\n\n\n![ToolJet - Data source - Stripe](/img/datasource-reference/stripe/apikey.png)\n\n\nQuerying Stripe\nClick on + button of the query manager at the bottom panel of the editor and select the Stripe datasource added in the previous step. Enter the query in the editor. Click on the `Save and Run` button to save and then run the query.\nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\nYou can check out the some of the operations mentioned below. All the operations for Stripe are available and can be performed from ToolJet. Check out the Stripe API documentation for the detailed information about each operation.\n\ndelete,/v1/account\nget,/v1/account\npost,/v1/account\npost,/v1/account/bank_accounts\ndelete,/v1/account/bank_accounts/{id}\nget,/v1/account/bank_accounts/{id}\npost,/v1/account/bank_accounts/{id}\nget,/v1/account/capabilities\nget,/v1/account/capabilities/{capability}\npost,/v1/account/capabilities/{capability}\nget,/v1/account/external_accounts\npost,/v1/account/external_accounts\ndelete,/v1/account/external_accounts/{id}\nget,/v1/account/external_accounts/{id}\npost,/v1/account/external_accounts/{id}\npost,/v1/account/login_links\nget,/v1/account/people\npost,/v1/account/people\ndelete,/v1/account/people/{person}\nget,/v1/account/people/{person}\npost,/v1/account/persons\ndelete,/v1/account/persons/{person}\nget,/v1/account/persons/{person}\npost,/v1/account/persons/{person}\npost,/v1/account_links\nget,/v1/accounts\npost,/v1/accounts\ndelete,/v1/accounts/{account}\nget,/v1/accounts/{account}\npost,/v1/accounts/{account}\npost,/v1/accounts/{account}/bank_accounts\ndelete,/v1/accounts/{account}/bank_accounts/{id}\nget,/v1/accounts/{account}/bank_accounts/{id}\nget,/v1/accounts/{account}/bank_accounts/{id}\nget,/v1/accounts/{account}/capabilities\nget,/v1/accounts/{account}/capabilities/{capability}\npost,/v1/accounts/{account}/capabilities/{capability}\nget,/v1/accounts/{account}/external_accounts\npost,/v1/accounts/{account}/external_accounts\ndelete,/v1/accounts/{account}/external_accounts/{id}\nget,/v1/accounts/{account}/external_accounts/{id}\nget,/v1/accounts/{account}/external_accounts/{id}\npost,/v1/accounts/{account}/login_links\nget,/v1/accounts/{account}/people\npost,/v1/accounts/{account}/people\ndelete,/v1/accounts/{account}/people/{person}\nget,/v1/accounts/{account}/people/{person}\npost,/v1/accounts/{account}/people/{person}\nget,/v1/accounts/{account}/persons\npost,/v1/accounts/{account}/persons\ndelete,/v1/accounts/{account}/persons/{person}\nget,/v1/accounts/{account}/persons/{person}\npost,/v1/accounts/{account}/persons/{person}\npost,/v1/accounts/{account}/reject\nget,/v1/apple_pay/domains\npost,/v1/apple_pay/domains\ndelete,/v1/apple_pay/domains/{domain}\nget,/v1/apple_pay/domains/{domain}\nget,/v1/application_fees\nget,/v1/application_fees/{fee}/refunds/{id}\npost,/v1/application_fees/{fee}/refunds/{id}\nget,/v1/application_fees/{id}\npost,/v1/application_fees/{id}/refund\nget,/v1/application_fees/{id}/refunds\npost,/v1/application_fees/{id}/refunds\nget,/v1/apps/secrets\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Amazon S3",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/s3.md",
    "content": "\nid: s3\ntitle: Amazon S3\n\nAmazon S3\nToolJet can connect to Amazon S3 buckets and perform various operation on them.\nConnection\nTo add a new S3 source, go to the Datasources manager on the left sidebar of the app editor and click on `Add datasource` button. Select AWS S3 from the modal that pops up.\nToolJet requires the following to connect to your AWS S3:\n\nRegion\nAccess key\nSecret key\n\nIt is recommended to create a new IAM user for the database so that you can control the access levels of ToolJet.\n\n\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying AWS S3\nClick on `+` button of the query manager at the bottom panel of the editor and select the data source added in the previous step as the data source. Select the operation that you want to perform and click Save to save the query.\n\nClick on the run button to run the query. \nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nQuery operations\nYou can create query for AWS S3 data source to perform several actions such as:\n  1. Read object\n  2. Upload object\n  3. List buckets\n  4. List objects in a bucket\n  5. Signed url for download\n  6. Signed url for upload\nRead object\nYou can read an object in a bucket by using this operation. It requires two parameters - Bucket name and Key.\n\nUpload object\nYou can use this operation to upload objects(files) to your S3 bucket. It requires four parameters:\n  1. Bucket: Specify the bucket name\n  2. Key: Key of the object/file\n  3. Content type: Specify file type such as text, image etc. \n  4. Upload data: File/object that is to be uploaded. \n\nList buckets\nThis operation will list all the buckets in your S3. This does not require any parameter.\n\nList objects in a bucket\nThis operation will fetch the list of all the files in your bucket. It requires two parameters:\n  1. Bucket: Bucket name (mandatory)\n  2. Prefix: To limit the response to keys that begin with the specified prefix (optional)\n  3. Max keys: The maximum number of keys returned in the response body (optional). Default value is 1000.\n  4. Offset: The key to start with when listing objects in a bucket (optional). \n  5. \"Next Continuation Token\": `Next Continuation Token` indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key (optional).\n:::info\nNext Continuation Token\nFor listing a bucket for objects that begin with a specific character or a prefix, then use the `Offset` parameter. For example, if you want to list all the objects that begin with `a`, then set the `Offset` parameter to `a`. Similarly, if you want to list all the objects that begin with `ab`, then set the `Offset` parameter to `ab`.\nThe `Next Continuation Token` is used to list the next set of objects in a bucket. It is returned by the API when the response is truncated. The results will contain `Next Continuation Token` if there are more keys in the bucket that satisfy the list query. To get the next set of objects, set the `Next Continuation Token` parameter and run the query again.\nThe results will continue from where the last listing finished.\n:::\n\nSigned url for download\nThe object owner can optionally share objects with others by creating a presigned URL, using their own security credentials, to grant time-limited permission to download the objects. For creating a presigned URL, the required parameters are:\n  1. Bucket: name of the bucket for uploading the file\n  2. Key: an object key\n  3. Expires in: an expiration time of URL\n\nSigned url for upload\nThe presigned URLs are useful if you want your user/customer to be able to upload a specific object to your bucket, but you don't require them to have AWS security credentials or permissions. For creating a presigned URL, the required parameters are:\n  1. Bucket: name of the bucket for uploading the file\n  2. Key: an object key\n  3. Expires in: an expiration time of URL\n  4. Content type: the content type such as text, image etc.\n\n:::info\nWe built an app to view and upload files to AWS S3 buckets. Check out the complete tutorial here.",
    "tag": "tooljet"
  },
  {
    "title": "Athena",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/athena.md",
    "content": "Athena\nToolJet can connect to Amazon Athena which is an interactive query service that makes it easy to analyze data in Amazon S3 using standard SQL.\n\nConnection\nQuerying-athena\nBasic Operation\n\nConnection\nToolJet requires the following to connect to your Athena.\n\nDatabase\nS3 output location\nAccess key\nSecret key\nRegion\n\n:::info\nYou can also configure for additional optional parameters.\n:::\n\nQuerying Amazon Athena\n\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the datasource. Query manager then can be used to write SQL queries.\n\n\n\nClick on the `run` button to run the query. \n\nNOTE: Query should be saved before running.\n:::tip\nRefer amazon athena docs here for more info: link\n:::\nBasic queries\n:::tip\nRefer amazon athena docs here for more info: link\n:::\nCreating table\n`sql\nCREATE EXTERNAL TABLE student (\n    name STRING,\n    age INT\n)  LOCATION 's3://athena-express-akiatfa53s-2022/';`\nInserting to table\n`sql\nINSERT INTO student\nVALUES ('Lansing',1)`\nSelect operation\n```sql\nSELECT * from student WHERE AGE=1",
    "tag": "tooljet"
  },
  {
    "title": "Zendesk",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/zendesk.md",
    "content": "\nid: zendesk\ntitle: Zendesk\n\nZendesk\nToolJet can connect to Zendesk APIs to read and write data using OAuth 2.0, which helps us to limit an application's access to a user's account.\n\nConnection\nQuerying Zendesk\n\nConnection\nToolJet connects to your Zendesk app using :\n- Zendesk Sub-domain\n- Client ID\n- Client Secret\nAuthorization Scopes\nYou can create a Zendesk data source with one of either of the two permission scopes :\n  1. Read Only\n  2. Read and Write\n:::info\nYou must first be a verified user to make Zendesk API requests. This is configured in the Admin Center interface in Apps and integrations > APIs > Zendesk APIs. For more information, see Security and Authentication in the Zendesk Support API reference or check out Zendesk's docs.\n:::\nTo connect Zendesk datasource to your ToolJet application, go to the data source manager on the left-sidebar and click on the `+` button. Select Zendesk from the list of available datasources, provide the credentials and click Connect to Zendesk and authenticate via OAuth. And click Save to save the datasource.\n\n\n![ToolJet - Data source - Zendesk](/img/datasource-reference/zendesk/zendesk.gif)\n\n\nOperations\n\nList Tickets\nList requested Tickets\nShow a Ticket\nUpdate a Ticket\nList Users\nGet Profile\nSearch query\n\nList Tickets\nLists all the tickets in your Zendesk account.\nList requested Tickets\nLists all the tickets requested by the user. \n| Fields      | description |\n| ----------- | ----------- |\n| User ID    | The id of the user  |\nShow Tickets\nGets a ticket's properties with the given ID, though not the ticket comments.\n| Fields      | description |\n| ----------- | ----------- |\n| Ticket ID    | The id of the ticket  |\nUpdate Tickets\nUpdates a ticket's properties with the given ID.\n| Fields      | description |\n| ----------- | ----------- |\n| Ticket ID    | The id of the ticket  |\n| Body    | The properties and values to update. Example: `{{({ \"ticket\": {\"status\": \"solved\"} })}}` |\nList Users\nLists all the users in your Zendesk account.\nGet Profile\nGets a user's profile with the given ID.\n| Fields      | description |\n| ----------- | ----------- |\n| User ID    | The id of the user  |\nSearch Query\nThe Search Query uses Zendesk's Search API to return tickets, users, and organizations with defined filters.\nCommon filters include:\n- `type:ticket`\n- `type:user`\n- `type:organization`\n- `type:ticket organization:12345 status:open`\n| Fields      | description |\n| ----------- | ----------- |",
    "tag": "tooljet"
  },
  {
    "title": "DynamoDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/dynamodb.md",
    "content": "\nid: dynamodb\ntitle: DynamoDB\n\nDynamoDB\nToolJet can connect to DynamoDB to read and write data.\nConnection\nTo add a new DynamoDB, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select DynamoDB from the modal that pops up.\nToolJet requires the following to connect to your DynamoDB.\n\nRegion\nAccess key\nSecret key\n\nIt is recommended to create a new IAM user for the database so that you can control the access levels of ToolJet.\n\nClick on 'Test connection' button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on 'Save' button to save the data source.\nQuerying DynamoDB\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. Select the operation that you want to perform and click 'Save' to save the query.\n\nClick on the 'run' button to run the query. NOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "MS SQL Server / Azure SQL databases",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/mssql.md",
    "content": "\nid: mssql\ntitle: MS SQL Server / Azure SQL databases\n\nMS SQL Server / Azure SQL databases\nToolJet can connect to MS SQL Server & Azure SQL databases to read and write data. \nConnection\nPlease make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nTo add new MS SQL Server / Azure SQL database, click on the '+' button on data sources panel at the left-bottom corner of the app editor. Select `SQL Server` from the modal that pops up.\nToolJet requires the following to connect to your PostgreSQL database.\n\nHost\nPort\nUsername\nPassword\nAzure - Select this option if you are using Azure SQL databases.\n\nIt is recommended to create a new database user so that you can control the access levels of ToolJet. \nClick on 'Test connection' button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on 'Save' button to save the data source.\n\nQuerying SQL Server / Azure SQL databases\nClick on '+' button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. \nClick on the 'run' button to run the query. NOTE: Query should be saved before running.\n\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "ClickHouse",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/clickhouse.md",
    "content": "\nid: clickhouse\ntitle: ClickHouse\n\nClickHouse\nToolJet can connect to the ClickHouse to read and write data.\n:::info\nToolJet uses this NodeJS client for ClickHouse.\n:::\nConnection\nTo add a new ClickHouse datasource, Go to the Datasource Manager on the left sidebar of the app editor and click on `Add datasource` button. Select ClickHouse from the modal that pops up.\nToolJet requires the following to connect to your ClickHouse Database:\n\nUsername\nPassword\nHost\nPort\nDatabase Name\nProtocol\nUse Post\nTrim Query\nUse Gzip\nDebug\nRaw\n\n\nQuerying ClickHouse\nAfter setting up the ClickHouse datasource, you can click on the `+` button of the query manager and select the ClickHouse datasource that you added in the previous step to create a new query.\n:::info\nFor more details on clickhouse visit Clickhouse docs.\n:::\nSupported Operations:\n\nSQL Query\nInsert array of objects\n\nSQL Query\nUse this to operation to enter ClickHouse SQL Statements. These statements represent various kinds of action you can perform using SQL queries.\nExample SQL queries\n\n\nSELECT:\n`sql\nSELECT * from test array;`\n\n\n\n\n\nCREATE: \n`sql\nCREATE TABLE test array3 (\n    date Date,\n    str String,\n    arr Array(String),\n    arr2 Array (Date)\n    arr3 Array(UInt32) ,\n    id1 UUID\n)ENGINE=MergeTree () ORDER BY(str)`\n\n\n\n\n\nALTER TABLE(add column)\n`sql\nALTER TABLE test array1 ADD COLUMN Added2 UInt32;`\n\n\n\n\n\nSELECT WITH WHERE CLAUSE\n`sql\n    SELECT * FROM test array1 WHERE str='Somethingl...'`\n\n\n\n\n\nUPDATE\n`sql\n    ALTER TABLE test_array1 UPDATE arr = (12] WHERE str='Somethingl...'`\n\n\n\n\n\nDELETE\n`sql\n    ALTER TABLE test_array1 DELETE WHERE str= 'Somethingl...'`\n\n\n\n\n\nNORMAL INSERT\n1) Step 1 - Creating Table\n`sql\nCREATE TABLE test array4 (\nname String,\ndate Date\n   )ENGINE=MergeTree () ORDER BY (name)`\n\n\n\n2) Step 2 - Insert\n`sql\nINSERT INTO test_array4 (*) VALUES ('juvane', '1996-01-13')`\n\n\n\n:::info\nGiving Primary Key\n```\nCREATE TABLE db.table_name\n(\n    name1 type1, name2 type2, ...,\n    PRIMARY KEY(expr1[, expr2,...])]\n)\nENGINE = engine;\nOR \nCREATE TABLE db.table_name\n(\n    name1 type1, name2 type2, ...\n)\nENGINE = engine\nPRIMARY KEY(expr1[, expr2,...]);\n```\n:::\n\n\nInsert array of objects\nUse this operation for inserting array of objects.\nRequired Parameters:\n\nBody\nFields\nTable name\n\nExample Body value:\n`javascript\n[\n            {\n                date: '2018-01-01',\n                str: 'Something1...',\n                arr: [],\n                arr2: ['1985-01-02', '1985-01-03'],\n                arr3: [1,2,3,4,5],\n                id1: '102a05cb-8aaf-4f11-a442-20c3558e4384'\n            },      \n            {\n                date: '2018-02-01',\n                str: 'Something2...',\n                arr: ['5670000000', 'Something3...'],\n                arr2: ['1985-02-02'],\n                arr3: [],\n                id1: 'c2103985-9a1e-4f4a-b288-b292b5209de1'\n            }\n        ];`",
    "tag": "tooljet"
  },
  {
    "title": "Google Cloud Storage",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/gcs.md",
    "content": "\nid: gcs\ntitle: Google Cloud Storage\n\nGoogle Cloud Storage\nToolJet can connect to GCS buckets and perform various operation on them.\nSupported operations\n-Read file\n-Upload file\n-List buckets\n-List files in a bucket\n-Signed url for download\n-Signed url for upload\nConnection\nTo add a new GCS source, click on the Add or edit datasource icon on the left sidebar of the app editor and click on `Add datasource` button. Select GCS from the modal that pops up.\nToolJet requires the json private key of a service account to be able to connect to GCS.\nYou can follow the google documentation to get started.\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying GCS\nClick on `+` button of the query manager at the bottom panel of the editor and select the data source added in the previous step as the data source. Select the operation that you want to perform and click Save to save the query.\n\nClick on the run button to run the query. \nNOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "PostgreSQL",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/postgresql.md",
    "content": "\nid: postgresql\ntitle: PostgreSQL\n\nPostgreSQL\nToolJet can connect to PostgreSQL databases to read and write data. \nConnection\nPlease make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nTo add a new PostgreSQL database, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select PostgreSQL from the modal that pops up.\nToolJet requires the following to connect to your PostgreSQL database.\n\nHost\nPort\nUsername\nPassword\n\nIt is recommended to create a new PostgreSQL database user so that you can control the access levels of ToolJet.\n\nClick on Test connection button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying PostgreSQL\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. PostgreSQL query editor has two modes, SQL & GUI. SQL mode can be used to write raw SQL queries and GUI mode can be used to query your PostgreSQL database without writing queries.\nSQL mode\nSelect SQL mode from the dropdown and enter the query in the editor. Click on the `run` button to run the query.\nNOTE: Query should be saved before running.\n\nGUI mode\nSelect GUI mode from the dropdown and then choose the operation Bulk update using primary key. Enter the Table name and Primary key column name. Now, in the editor enter the records in the form of an array of objects. \nClick on the `run` button to run the query. NOTE: Query should be saved before running.\n\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link",
    "tag": "tooljet"
  },
  {
    "title": "GraphQL",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/graphql.md",
    "content": "\nid: graphql\ntitle: GraphQL\n\nGraphQL\nToolJet can connect to GraphQL endpoints to execute queries and mutations.\nConnection\nTo add a new GraphQL datasource, click the `+` button on  data sources panel at the bottom-left corner of the app builder and then select GraphQL from the modal that pops up.\nToolJet requires the following to connect to a GraphQL datasource:\n\nURL of the GraphQL endpoint\n\nThe following optional parameters are also supported:\n| Type         | Description |\n   | -----------  | ----------- |\n   | URL params   | Additional query string parameters|\n   | headers      | Any headers the GraphQL source requires|\n\n\n![ToolJet - Data source - GraphQl](/img/datasource-reference/graphql/graphql-ds.png)\n\n\nClick on the Save button to save the data source.\nQuerying GraphQL\nClick on `+` button of the query manager at the bottom panel of the editor and select the GraphQL endpoint added in the previous step as the  data source.\n\nClick on the 'run' button to run the query. NOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Elasticsearch",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/elasticsearch.md",
    "content": "\nid: elasticsearch\ntitle: Elasticsearch\n\nElasticsearch\nToolJet can connect to your Elasticsearch cluster to read and write data.\nConnection\nPlease make sure the host/IP of the Elasticsearch cluster is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nTo add a new Elasticsearch database, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select Elasticsearch from the modal that pops up.\nToolJet requires the following to connect to your Elasticsearch cluster: \n- Host\n- Port\n- Username\n- Password\n\n\n\nElastic search datasource is also providing an option for connecting services with ssl certificates. \n- You can either use CA / Client certificates option. \n\nQuerying Elasticsearch\nClick on `+` button of the query manager at the bottom panel of the editor and select the Elasticsearch added in the previous step as the data source. \nSelect the operation that you want to perform on your Elasticsearch cluster and click `Create` to save the query. \n\n\n\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\nSearch\nThis operation allows you to execute a search query and get back search hits that match the query. Read the Elasticsearch's `Search` guide here.\n\nIndex a document\nThis operation allows you to add a JSON document to the specified data stream or index. Read the Elasticsearch's `Index` guide here.\n\nGet a document\nThis operation allows you to retrieve the specified JSON document from the index. Read the Elasticsearch's `Get` guide here.\n\nUpdate a document\nThis operation allows to update a document using the specified script. Read the Elasticsearch's `Update` guide here.",
    "tag": "tooljet"
  },
  {
    "title": "Baserow",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/baserow.md",
    "content": "\nid: baserow\ntitle: Baserow\n\nBaserow\nConnection\nToolJet can connect to your Baserow account to read and write data. \nSelect the hosted version of Baserow or the self-host option.\nFor self-hosted option, base URL is required to connect.\nBaserow API token is required to create an Baserow data source on ToolJet. You can follow the steps to create API token from this link.\n\n:::tip\nThis guide assumes that you have already gone through Adding a data source tutorial.\n:::\nSupported queries\n\nList fields\nList rows\nGet row\nCreate row\nUpdate row\nMove row\nDelete row\n\nList fields\nThis query lists all the fields in a table.\nRequired parameters:\n\nTable ID\n\n\nExample response from Baserow:\n`json\n[\n  {\n    \"id\": 331156,\n    \"table_id\": 57209,\n    \"name\": \"Name\",\n    \"order\": 0,\n    \"type\": \"text\",\n    \"primary\": true,\n    \"text_default\": \"\"\n  },\n  {\n    \"id\": 331157,\n    \"table_id\": 57209,\n    \"name\": \"Last name\",\n    \"order\": 1,\n    \"type\": \"text\",\n    \"primary\": false,\n    \"text_default\": \"\"\n  },\n  {\n    \"id\": 331158,\n    \"table_id\": 57209,\n    \"name\": \"Notes\",\n    \"order\": 2,\n    \"type\": \"long_text\",\n    \"primary\": false\n  },\n  {\n    \"id\": 331159,\n    \"table_id\": 57209,\n    \"name\": \"Active\",\n    \"order\": 3,\n    \"type\": \"boolean\",\n    \"primary\": false\n  }\n]`\nList rows\nThis query lists all the rows in a table.\nRequired parameters:\n\nTable ID\n\n\nExample response from Baserow:\n`json\n{\n  \"count\": 3,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"id\": 2,\n      \"order\": \"0.99999999999999999991\",\n      \"Name\": \"Bill\",\n      \"Last name\": \"Gates\",\n      \"Notes\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce dignissim, urna eget rutrum sollicitudin, sapien diam interdum nisi, quis malesuada nibh eros a est.\",\n      \"Active\": false\n    },\n    {\n      \"id\": 3,\n      \"order\": \"0.99999999999999999992\",\n      \"Name\": \"Mark\",\n      \"Last name\": \"Zuckerburg\",\n      \"Notes\": null,\n      \"Active\": true\n    },\n    {\n      \"id\": 1,\n      \"order\": \"0.99999999999999999997\",\n      \"Name\": \"Elon\",\n      \"Last name\": \"Musk\",\n      \"Notes\": null,\n      \"Active\": true\n    }\n  ]\n}`\nGet row\nRequired parameters:\n\nTable ID\nRow ID\n\n\nExample response from Baserow:\n`json\n{\n  \"id\": 1,\n  \"order\": \"0.99999999999999999997\",\n  \"Name\": \"Elon\",\n  \"Last name\": \"Musk\",\n  \"Notes\": null,\n  \"Active\": true\n}`\nCreate row\nRequired parameters:\n\nTable ID\nRecords\n\n\nExample Records:\n`json\n{\n  \"Name\": \"Test\",\n  \"Last name\": \"Test Name\",\n  \"Notes\": \"Test Note\",\n  \"Active\": true\n}`\nExample response from Baserow:\n`json\n{\n  \"id\": 19,\n  \"order\": \"0.99999999999999999996\",\n  \"Name\": \"Test\",\n  \"Last name\": \"Test Name\",\n  \"Notes\": \"Test Note\",\n  \"Active\": true\n}`\nUpdate row\nRequired parameters:\n\nTable ID\nRow ID\nRecords\n\n\nExample Records:\n`json\n{\n  \"Name\": \"Test\",\n  \"Last name\": \"Test Name\",\n  \"Notes\": \"Test Note\",\n  \"Active\": true\n}`\nExample response from Baserow:\n`json\n{\n  \"id\": 19,\n  \"order\": \"0.99999999999999999996\",\n  \"Name\": \"Test\",\n  \"Last name\": \"Test Name\",\n  \"Notes\": \"Test Note\",\n  \"Active\": true\n}`\nMove row\nRequired parameters:\n\nTable ID\nRow ID\n\nOptional parameters:\n\nBefore ID (The row will be moved before the entered ID. If not provided, then the row will be moved to the end )\n\n\nExample response from Baserow:\n`json\n{\n  \"id\": 3,\n  \"order\": \"2.00000000000000000000\",\n  \"Name\": \"Mark\",\n  \"Last name\": \"Zuckerburg\",\n  \"Notes\": null,\n  \"Active\": true\n}`\nDelete row\nRequired parameters:\n\nTable ID\nRow ID\n\n",
    "tag": "tooljet"
  },
  {
    "title": "CouchDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/couchdb.md",
    "content": "\nid: couchdb\ntitle: CouchDB\n\nCouchDB\nToolJet can connect to CouchDB databases to read and write data. CocuhDB uses basic auth for authentication , username and password for the database is required to create an CouchDB data source on ToolJet. For more info visit CouchDB docs.\n\nSupported queries:\n\nListing records\nRetrieving a record\nCreating a record\nUpdating a record\nDeleting a record\nFind\nRetrieving a view\n\n:::info\nNOTE: Record ID is same as document ID(\"_id\") .\n:::\nListing records\nThis query lists all the records in a database.\nOptional parameters:\n\nInclude docs\nDescending order\nLimit\nSkip\n\n:::info\ndescending (boolean) \u2013 Return the documents in descending order by key. Default is false.\nlimit (number) \u2013 Limit the number of the returned documents to the specified number.\nskip (number) \u2013 Skip this number of records before starting to return the results. Default is 0.\ninclude_docs (boolean) \u2013 include_docs key is set to false by default , if true it returns the document data along with the default fields.\n:::\n\nExample response from CouchDb: \n`json\n{\n    \"total_rows\": 3,\n    \"offset\": 0,\n    \"rows\": [\n        {\n            \"id\": \"23212104e60a71edb42ebc509f000dc2\",\n            \"key\": \"23212104e60a71edb42ebc509f000dc2\",\n            \"value\": {\n                \"rev\": \"1-0cc7f48876f15883394e5c139c628123\"\n            }\n        },\n        {\n            \"id\": \"23212104e60a71edb42ebc509f00216e\",\n            \"key\": \"23212104e60a71edb42ebc509f00216e\",\n            \"value\": {\n                \"rev\": \"1-b3c45696b10cb08221a335ff7cbd8b7a\"\n            }\n        },\n        {\n            \"id\": \"23212104e60a71edb42ebc509f00282a\",\n            \"key\": \"23212104e60a71edb42ebc509f00282a\",\n            \"value\": {\n                \"rev\": \"1-da5732beb913ecbded309321cac892d2\"\n            }\n        },\n    ]\n}`\nRetrieving a record\nRequired parameters:\n\nRecord ID\n\n\nExample response from CouchDb: \n`json\n{\n    \"_id\": \"e33dc4e209689cb0400d095fc401a1e0\",\n    \"_rev\": \"1-a62af8e14451af88c150e7e718b7a0e8\",\n    \"0\": {\n        \"name\": \"test data\"\n    }\n}`\nThe returned JSON is the JSON of the document, including the document ID and revision number:\nCreating a record\n\nExample Records:\n`json\n  [{\"name\":\"tooljet\"}]`\nClick on the `run` button to run the query.\n:::info\nNOTE: Query must be saved before running.\n:::\nExample response from CouchDb:\n```json\n{\n    \"ok\": true,\n    \"id\": \"23212104e60a71edb42ebc509f0049a2\",\n    \"rev\": \"1-b0a625abc4e21ee554737920156e911f\"\n}\n```\nUpdating a record\nYou can get the revision id  value, by sending a GET request to get the document details.\nYou get the document as JSON in the response. For each update to the document, the revision field \"_rev\" gets changed.\nRequired parameters:\n\nRevision ID\nRecord ID\n\n\nExample body:\n`json\n  [{\"name\":\"tooljet\"}]`\nClick on the `run` button to run the query.\n:::info\nNOTE: Query must be saved before running.\n:::\nExample response from CouchDb:\n`json\n{\n    \"ok\": true,\n    \"id\": \"23212104e60a71edb42ebc509f0049a2\",\n    \"rev\": \"2-b0a625abc4e21ee554737920156e911f\"\n}`\nDeleting a record\nRequired parameters:\n\nRevision ID\nRecord ID\n\n\nClick on the `run` button to run the query.\nExample response from CouchDb:\n`json\n{\n    \"ok\": true,\n    \"id\": \"rev_id=2-3d01e0e87139c57e9bd083e48ecde13d&record_id=e33dc4e209689cb0400d095fc401a1e0\",\n    \"rev\": \"1-2b99ef28c03e68ea70bb668ee55ffb7b\"\n}`\nFind\nFind documents using a declarative JSON querying syntax.\nRequired parameters:\n\nSelector\n\n:::info\nNOTE:\nselector syntax: https://pouchdb.com/guides/mango-queries.html\n:::\n\nExample body:\n`json\n{\n    \"selector\": {\n        \"year\":  {\"$gte\": 2015}\n    },\n    \"fields\": [\"year\"]\n}`\nClick on the `run` button to run the query.\n:::info\nNOTE:\nselector (json) \u2013 JSON object describing criteria used to select documents. \nMore information : https://docs.couchdb.org/en/stable/api/database/find.html\n:::\nExample response from CouchDb:\n\nRetrieving a view\nViews are the primary tool used for querying and reporting on CouchDB documents.\nRequired parameters:\n\nView url\n\nReference for view :https://docs.couchdb.org/en/3.2.0/ddocs/views/intro.html#what-is-a-view\n\nOptional parameters:\n\nStart key\nEnd key\nLimit\nSkip\n\nClick on the `run` button to run the query.\n:::info\nstartkey (json) \u2013 Return records starting with the specified key.\nendkey (json) \u2013 Stop returning records when the specified key is reached.\nlimit (number) \u2013 Limit the number of the returned documents to the specified number.\nskip (number) \u2013 Skip this number of records before starting to return the results. Default is 0.\n:::\nExample response from CouchDb:\n```json\n{\n    \"total_rows\": 4,\n    \"offset\": 0,\n    \"rows\": [\n        {\n            \"id\": \"23212104e60a71edb42ebc509f000dc2\",\n            \"key\": \"23212104e60a71edb42ebc509f000dc2\",\n            \"value\": {\n                \"rev\": \"1-0cc7f48876f15883394e5c139c628123\"\n            }\n        },\n        {\n            \"id\": \"23212104e60a71edb42ebc509f00216e\",\n            \"key\": \"23212104e60a71edb42ebc509f00216e\",\n            \"value\": {\n                \"rev\": \"1-b3c45696b10cb08221a335ff7cbd8b7a\"\n            }\n        },\n        {\n            \"id\": \"23212104e60a71edb42ebc509f00282a\",\n            \"key\": \"23212104e60a71edb42ebc509f00282a\",\n            \"value\": {\n                \"rev\": \"1-da5732beb913ecbded309321cac892d2\"\n            }\n        },\n        {\n            \"id\": \"23212104e60a71edb42ebc509f002cbd\",\n            \"key\": \"23212104e60a71edb42ebc509f002cbd\",\n            \"value\": {\n                \"rev\": \"1-ca5bb3c0767eb42ea6c33eee3d395b59\"\n            }\n\n\n```    }\n]\n```\n\n\n}",
    "tag": "tooljet"
  },
  {
    "title": "Google Sheets",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/google.sheets.md",
    "content": "\nid: google.sheets\ntitle: Google Sheets\n\nGoogle Sheets\nToolJet can connect to Google Sheet using OAuth 2.0, which helps us to limit an application's access to a user's account.\nHow to integrate Google Sheets\n\nSelf-Hosted Configuration\nIf you are self-hosting the application, you will need to perform some additional steps.\n\nFollow the Google OAuth 2.0 setup steps outlined here\nSet the following environment variables with the values from the previous step:\n`GOOGLE_CLIENT_ID`\n`GOOGLE_CLIENT_SECRET`\n`TOOLJET_HOST`\n\n\nEnable the Google Sheets API in the GCP console\n\nAuthorization Scopes\nYou can create a Google Sheets data source with one of either of the two permission scopes :\n  1. Read Only\n  2. Read and Write\n\nOperations\nUsing Google sheets data source you can perform several operations from your applications like:\n\nRead data from a sheet\nAppend data to a sheet\nUpdate single row of a sheet\nDelete row from a sheet\nGet spreadsheet info\n\nRead data from a sheet\nThis operation returns the table data from the spreadsheet in the form of json object. \n| Fields      | description |\n| ----------- | ----------- |\n| Spreadsheet ID | It is mandatory to enter the spreadsheet-id. The spreadsheet-id can be found in the URL of the spreadsheet. Example URL: https://docs.google.com/spreadsheets/d/1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM/edit#gid=0 - in this URL, the `1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM` is the spreadsheet-id. |\n| Range | This is optional. You can specify the range of cells in this field. If left empty, it will select the range `A1:Z500`. |\n| Sheet | This is optional. You can specify `sheet name` if it has more than 1 sheets, else it will automatically choose the first sheet. |\n\nAppend data to a sheet\nYou can add more rows to the table using the append operation.\n| Fields      | description |\n| ----------- | ----------- |\n| Spreadsheet ID | It is mandatory to enter the spreadsheet-id. The spreadsheet-id can be found in the URL of the spreadsheet. Example URL: https://docs.google.com/spreadsheets/d/1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM/edit#gid=0 - in this URL, the `1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM` is the spreadsheet-id. |\n| Sheet | This is optional. You can specify `sheet name` if it has more than 1 sheets, else it will automatically choose the first sheet. |\n| Rows  | Enter the row data in the json array form. Each object in an array will represent a single row. Example: `[ {\"name\":\"John\", \"email\":\"John@tooljet.com\"},{...},{...} ]` In each object, the `key` represents the column name and the `value` represents the cell data.   |\n\nUpdate single row of a sheet\nYou can update the existing data in sheet using this operation.\n| Fields      | description |\n| ----------- | ----------- |\n| Spreadsheet ID | It is mandatory to enter the spreadsheet-id. The spreadsheet-id can be found in the URL of the spreadsheet. Example URL: https://docs.google.com/spreadsheets/d/1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM/edit#gid=0 - in this URL, the `1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM` is the spreadsheet-id. |\n| Where | Enter the column name such as `id` for choosing a row. |\n| Operator | Choose the `===` operator to check the equality. |\n| Value | Enter the any `id` number/name that you want to update. |\n| Rows  | Enter the row data. Example: `{{({id: components.textinput4.value, company: components.textinput1.value, position: components.textinput2.value, url: components.textinput3.value, 'date-applied': components.datepicker1.value, status: components.dropdown1.value})}}`  |\n\nDelete row from a sheet\nUse this operation delete a specific row from the sheet.\n| Fields      | description |\n| ----------- | ----------- |\n| Spreadsheet ID | It is mandatory to enter the spreadsheet-id. The spreadsheet-id can be found in the URL of the spreadsheet. Example URL: https://docs.google.com/spreadsheets/d/1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM/edit#gid=0 - in this URL, the `1W2S4re7zNaPk9vqv6_CqOpPdm_mDEqmLmzjVe7Nb9WM` is the spreadsheet-id. |\n| GID | You'll find the GID in the end of the URL of spreadsheet. In the example mentioned above, the GID is 0 |\n| Delete row number |  Just enter the row number that you want to delete.  |\n\nGet spreadsheet info\nThis operation can be used to get some basic information of the spreadsheet such as the number of sheets, theme, time-zone, format, and url etc.\nHere is the `Preview` of the query that used the get spreadsheet info operation.",
    "tag": "tooljet"
  },
  {
    "title": "BigQuery",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/bigquery.md",
    "content": "\nid: bigquery\ntitle: BigQuery\n\nBigQuery\nToolJet can connect to BigQuery databases to run BigQuery queries.\nConnection\nPlease refer this link to enable BigQuery API in Google Cloud Console. \nCreate Service Account and key, then get your configs downloaded as JSON\nTo add a new BigQuery, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select BigQuery from the modal that pops up.\nToolJet requires the config json downloaded from your account to connect to BigQuery. Paste the json into the `Private key` field.\nThe json looks like:\n`json\n {\n  \"type\": \"service_account\",\n  \"project_id\": \"tooljet-279812\",\n  \"private_key_id\": \"ea6e234sdfsdf3242b91525626edeef74a14e58761\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADAAhdh67sidfnIUWWWBAQC8V+z0vaM/rFiA\\nrq8fzVjSpEu7Cietjn82SVtguAlAUP9YpRepzi4rDmRgVQiXe4KES7VGQhmg3hUj\\nbBASbdI5WRCvAC2ujzrxv3rbfjYRWfm+OqzpUBWaEKbwSGc6rNkhmirvhjiFdl5k\\nn7aK7w3bmQfBlnNM6+WiQdT09g2qx3lmRDoUUpuCngkhbWOs3gN/U6wlm0cHKtbF\\nWUOwKdyeZrm3UORUDkFvq6rVSF8vob+FQxf24FuvpBmXi2o2dqqglle8rlm8Lz83\\ns4kAVbqVjtGrVXm6QUcnLISqJCJUnFkSuFpo60GCcgAVrwyAq/6aQH3IM78QKzFL\\n8q5b65rXAgMBAAECggEAClIF8tRk0VuG3NZH5lg3q8fDOyaLBFdVKcHKtzCec3Ez\\no6C4RcxP6Hk5IbPrtgggjVIi/Z7exKRv2mAwFvuSuJJSQSSjXC7Fm87AQPdYFWYt\\noFYIeLGPlFMO++H3Nh+Xt3I5NBLR58UmH48iBdgR3pygXi1C5eBvQ2rdNVTL/uxw\\n3iULu8WcVBw8glzkdLNLDq94uqbW7/qyji7QWNkU+804sA0LEj4PWmO7B9k1LCLK\\nFV0Ppv+SJYMS2MhWmXPHnYVfeNaKJKPQpHsS2ep/hyjEO/3Fvm3o3cp6SrEkNGIH\\nGKeozlfV7MQj7tMHLqWddDBXtFwYVEmN0UJVafvGsQKBgQDsEVzb7DG/xlMpuDQv\\nqpLGWXR5DdAhzxVJzeh11Ongb+XxBOVSyTDKJLvOX4rI7tDqqN7b2pabUA3ZjvXv\\nhMPXr7AjL6yoJEzVCyo1+pi26OL99OcO+7gUDa0axHFt6LZuPw00r+2Nl0FqrXNR\\n+qUiPuZpp2MuKjMwLCwhr5YuqwKBgQDMPv6TPMl+oocoQ4uc84uY58Ywb7XZjmhY\\n8jXdA38I454EbQGeLja+2knDpDkF6g14cTzVJe/Ec4A6QmeIieTFSJKBV4VCZ3QN\\npLR4PrET7o9GL3mtwnNqcHPw2dLNHtn1OgsOUfJMWPIrFK2abVNAmYIBtOGA4eyH\\nrOl+NcAUhQKBgC4EKGy6OuxeFYHxZULRZjEB6QFb3vFoM4cieyjU6w4T4ee8g5NC\\nop8U0AMnfp8yZkkHyAFlN6xoy3pYMrqQz7gwiA4j0e0ovk1dEspY4gHtnanRXmT+\\nTmCiVdb86ft5vG37HnDhxlWuYVMRIoSdbikhx7papauvEDFYuvWKC6VnAoGBAJQr\\nvxOhrauozNRw6//YzxUGT8kjwZEqtpiQXnMP7kDMn/4l9l6CuESMp6a+pH+d5FfU\\nDoWzF9Y01HlvYxyyrLxSgbZDf/FEi/S54BK7qEsFbftExclAn+o/2lyIKV2VXBmD\\nGjIxUM4CWOzX+3lkhlj/BEmop0+Qlr92uY1OASLhAoGAfTb/Le0Nf5bGLjK3hI9D\\no/oDI5Ryj5rTMxmG/wRjE+1Jm6BjFzEyH2CvnFonccyHQ+wGn61AgbRFLn+Tg5fz\\nZXpzD2Xq3Y/AXtrdaayK0wnpMvVE1bZt+ikeVAWX+gR79igTqSXRgCuyp+edsgcE\\nZ+2Eser4Z5BpqfFjqFW8MhY=\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"tooljettest@tooljet-279812.iam.gserviceaccount.com\",\n  \"client_id\": \"106795637455432158803\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/tooljettest%40tooljet-279812.iam.gserviceaccount.com\"\n}`\n\n\n\nClick on Test connection button to verify if the credentials are correct and that the API is accessible to ToolJet server. Click on Save button to save the data source.\nQuerying BigQuery\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. Select the operation that you want to perform and click Save to create the query.\n\nClick on the run button to run the query. NOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\n\n\nList Datasets\n\n\nList Tables\n\n\nQuery\n\n\nInsert Record \n\n\nDelete Record \n\n\nUpdate Record\n\n\nCreate View\n\n\nCreate Table\n\n\nDelete Table\n\n\nList Datasets\nReturns list of datasets.\nOptional parameters:\n\nOptions: This can be used to filter the list.\n\n\nList Tables\nReturn list of tables within a dataset\nRequired parameters:\n\nDataset: Enter the dataset name.\n\n\nQuery\nReturn data based on the `Query`. `Query options` (Reference), and `Query result options` (Reference).\n\nInsert Record\n\nTo insert a record.\n\n\nDelete Record\n\nTo delete a record.\n\n\n:::info\nNOTE: Be careful when deleting records in a table. If you omit the WHERE clause, all records in the table will be deleted!\n:::\nUpdate Record\n\nTo update a record.\n\n\n:::info\nNOTE: Be careful when deleting records in a table. If you omit the WHERE clause, all records in the table will be updated!\n:::\nCreate View\n\nTo create a view.\n\n\nCreate Table\n\nTo create a table.\n\n:::info\nNOTE: visit -https://github.com/googleapis/nodejs-bigquery/blob/main/samples/createTable.js for more info on schema.\n:::\nDelete Table",
    "tag": "tooljet"
  },
  {
    "title": "Custom JavaScript",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/custom-js.md",
    "content": "\nid: custom-js\ntitle: Custom JavaScript\n\nCustom JavaScript\nYou can write custom JavaScript code to interact with components and queries. To do that, you just need to create a new query and select Run JavaScript Code from the data sources dropdown.\n\nExample: Displaying random number\n\nLet's drag a button and a text widget inside a container widget.\nCreate a new query and select Run JavaScript code from dropdown.\nWrite the code in JavaScript editor and save the query:\n`jsx\nconst a = Math.floor(Math.random() * (10 - 1)) + 1;\nreturn a;`\n:::tip\n\nThe return value is used as the `data` of the query.\n:::\n- Let's edit the properties of widgets:\n    - Add an event handler to the button - Select On Click event, Run Query action, and select the `runjs1` query that we created. This will run the JavaScript code every time the button is clicked.\n    - Edit the property of text widget - In the text field enter Random number: `{{queries.runjs1.data}}`. It will display the output as Random number: result from JS code\n\nYou can also write custom JavaScript code to get the data from External APIs and manipulate the response for graphical representation. Here's the tutorial on how we used custom JavaScript code to build an app using GitHub API.\nLibraries\nToolJet allows you to internally utilize these libraries:\n| Name        | Documentation |\n| ----------- | ----------- |\n| Moment      | https://momentjs.com/docs/ |\n| Lodash      | https://lodash.com/docs/ |\n| Axios       | https://axios-http.com/docs/intro |\n:::danger\nIssues with writing custom JavaScript code? Ask in our Slack community.",
    "tag": "tooljet"
  },
  {
    "title": "WooCommerce",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/woocommerce.md",
    "content": "\nid: woocommerce\ntitle: WooCommerce\n\nWooCommerce\nToolJet can connect to WooCommerce databases to read and write data.\n\nConnection\nGetting Started\n\nConnection\nAuth\nYou may use [HTTP Basic Auth] by providing the REST API Consumer Key as the username and the REST API Consumer Secret as the password.\n- Host\n- Consumer key\n- Consumer secret\n\n:::info\nNOTE: For generating keys visit admin dashboard of woocommerce , more info: https://woocommerce.github.io/woocommerce-rest-api-docs/?javascript#authentication\n:::\nQuerying Woocommerce\nOperations\nCustomer\n\nlist customer\nupdate customer\ndelete customer\nbatch update customer\ncreate customer\nretrieve customer\n\nPRODUCT\n\nlist product\nupdate product\ndelete product\nbatch update product\ncreate product\nretrieve product\n\nORDER\n\nlist order\nupdate order\ndelete order\nbatch update order\ncreate order\nretrieve order\n\nCoupon\n\nlist coupon\ncreate coupon\n\n:::info\nNOTE: For more info visit https://woocommerce.github.io/woocommerce-rest-api-docs/?javascript.",
    "tag": "tooljet"
  },
  {
    "title": "RethinkDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/rethinkdb.md",
    "content": "\nid: rethinkdb\ntitle: RethinkDB\n\nRethinkDB\nToolJet can connect to RethinkDB databases to read and write data. For more info visit::https://rethinkdb.com/api/javascript/.com/\n\nConnection\nToolJet connects to InfluxDB using :\n\nDatabase\nHost\nPort\nUsername \nPassword \n\nSupported queries:\n\n\nDelete database\n\n\nDelete Table\n\n\nCreate database\n\n\nCreate Table\n\n\nList table\n\n\nList database\n\n\nGet all documents\n\n\nInsert table data\n\n\nUpdate all table data\n\n\nUpdate by id\n\n\nDelete table data by id\n\n\nDelete all table data\n\n\nGet document from primary key\n\n\n:::info\nNOTE: Name field in all operation is database name if not given will take the default database used for connection.",
    "tag": "tooljet"
  },
  {
    "title": "OpenAPI",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/openapi.md",
    "content": "\nid: openapi\ntitle: OpenAPI\n\nOpenAPI\nToolJet has a data source for generating REST API operations from OpenAPI Specs.\nConnection\n\n\nConnections are generated from OpenAPI specifications. Currently supports Basic Auth, API Key, Bearer Token, OAuth 2.0\n\n\nAlso supports specifications with multiple authentications\n\n\nRead more \nQuerying OpenAPI\n\nOperations will be generated from specifications and each one will be different from other  \n\nCommon fields\n\nHost (Base URL)\n\nSome specs can have one or more base URLs/servers and specific operations may have separate Base URLs. So you can select the URL from the host select",
    "tag": "tooljet"
  },
  {
    "title": "MongoDB",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/mongodb.md",
    "content": "\nid: mongodb\ntitle: MongoDB\n\nMongoDB\nToolJet can connect to MongoDB to read and write data.\nConnection\nPlease make sure the host/ip of the database is accessible from your VPC if you have self-hosted ToolJet. If you are using ToolJet cloud, please whitelist our IP.\nTo add a new MongoDB, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select MongoDB from the modal that pops up.\nToolJet requires the following to connect to your MongoDB.\n\nHost\nPort\nUsername\nPassword\n\nIt is recommended to create a new MongoDB user so that you can control the access levels of ToolJet.\n\nClick on 'Test connection' button to verify if the credentials are correct and that the database is accessible to ToolJet server. Click on 'Save' button to save the data source.\nQuerying MongoDB\nClick on `+` button of the query manager at the bottom panel of the editor and select the database added in the previous step as the data source. Select the operation that you want to perform and click 'Save' to save the query.\n\nClick on the 'run' button to run the query. NOTE: Query should be saved before running.\n:::tip\nQuery results can be transformed using transformations. Read our transformations documentation to see how: link\n:::\nSupported operations\n\nList Collections\nFind One\nFind Many\nTotal Count\nCount\nDistinct\nInsert One\nInsert Many\nUpdate One\nUpdate Many\nReplace One\nFind One and Update\nFind One and Replace\nFind One and Delete\nAggregate\nDelete One\nDelete Many\nBulk Operations\n\nList Collections\nReturns list of collections\nFine One\nReturn a document which satisfy the given filter and options. Reference\nFine Many\nReturn list of documents which satisfy the given filter and options. Reference\nTotal Count\nReturns an estimation of the number of documents in the collection based on collection metadata. Reference\nCount\nReturns the number of documents based on the filter. Reference\nDistinct\nRetrieve a list of distinct values for a field based on the filter. Reference\nInsert One\nInsert a document. Reference\nInsert Many\nInsert list of documents. Reference\nUpdate One\nUpdate a document based on the filter. Reference\nUpdate Many\nUpdate many documents based on the filter. Reference\nReplace One\nReplace a document based on filter. Reference\nFind One and Update\nIf your application requires the document after updating, use this instead of `Update One`. Reference\nFind One and Replace\nIf your application requires the document after updating, use this instead of `Replace One`. Reference\nFind One and Delete\nIf your application requires the document after deleting, use this instead of `Delete One`. Reference\nAggregate\nAggregation operations are expressions you can use to produce reduced and summarized results. Reference\nDelete One\nDelete a record based on the filter. Reference\nDelete Many\nDelete many records based on the filter. Reference\nBulk Operations\nPerform bulk operations. Reference\nDynamic Quries\n```javascript\n{ amount: { $lt: '{{ components.textinput1.value }}' }}\n// Dates \n// supported: Extended JSON syntax\n{ createdAt: { $date: '{{ new Date('01/10/2020') }}'} }\n// not supported: MongoDB classic syntax\n{ createdAt: new Date('01/10/2020') }\n```",
    "tag": "tooljet"
  },
  {
    "title": "n8n",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/n8n.md",
    "content": "\nid: n8n\ntitle: n8n\n\nn8n\nToolJet can trigger n8n workflows using webhook URLs. Please refer this to know more about n8n.\nConnection\nGo to the data source manager on the left sidebar and click on `+` button to add new data source. Select n8n from the list of available data sources in the modal that pops-up.\nn8n webhooks can be called with or without an Authentication. You can keep the `Authentication type` as `none` if your webhook didn't have one or if it has one then you can choose the one from the dropdown and provide credentials:\nAuthentication Types\n\nBasic Auth: To connect your n8n webhooks using basic auth you'll need to provide the following credentials:\nUsername\nPassword\n\n\n\n\n\n\n\nHeader Auth: To connect your n8n webhooks using header auth the following fields are required:\nName / Key\nValue\n\n\n\n\n\n\n:::tip\nWebhook credentials and instance credentials are different. Please use the credentials that you use with the webhook trigger. Know more: Webhook Authentication.\n:::\nTrigger Workflow\nClick on `+` button of the query manager at the bottom panel of the editor and the select n8n as the datasource.\nYou can trigger a workflow with `GET/POST` URL. Choose the request type from the `Methods` dropdown and then provide the required fields:\n  - URL parameters (Support for GET & POST) `Optional`\n  - Body (Only for POST URL) `Required`\n",
    "tag": "tooljet"
  },
  {
    "title": "Airtable",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/airtable.md",
    "content": "\nid: airtable\ntitle: Airtable\n\nAirtable\nToolJet can connect to your Airtable account to read and write data. Airtable API key is required to create an Airtable data source on ToolJet. You can generate API key by visiting Airtable account page. \n\n:::info\nAirtable API has a rate limit, and at the time of writing this documentation, the limit is five(5) requests per second per base. You can read more about rate limits here Airtable API.\n:::\n:::tip\nThis guide assumes that you have already gone through Adding a data source tutorial.\n:::\nSupported queries\n\nListing records\nRetrieving a record\nCreating a record\nUpdating a record\nDeleting a record\n\nListing records\nThis query lists all the records in a table. The results are paginated and each page can have up to 100 records. \nRequired parameters:\n\nBase ID: To find the Base ID, first visit airtable.com/api. Select from the list of bases the base whose ID you'd like to find out. Example Base ID: `appDT3UCPffPiSmFd`\nTable name: Enter the table name whose data you want to fetch.\n\nOptional parameters:\n\nPage size: The number of records returned in each request. Must be less than or equal to 100. Default is 100.\noffset: If there are more records, the response will contain an offset. To fetch the next page of records, include offset in the next request's parameters.\n\n\nExample response from Airtable: \n`json\n{\n    \"records\": [\n        {\n            \"id\": \"recu9xMnUdr2n2cw8\",\n            \"fields\": {\n                \"Notes\": \"sdfdsf\",\n                \"Name\": \"dsfdsf\"\n            },\n            \"createdTime\": \"2021-05-12T14:30:33.000Z\"\n        },\n        {\n            \"id\": \"recyIdR7bVdQvmKXa\",\n            \"fields\": {\n                \"Notes\": \"sdfdsf\",\n                \"Name\": \"dfds\"\n            },\n            \"createdTime\": \"2021-05-12T14:30:33.000Z\"\n        },\n        {\n            \"id\": \"recAOzdIHaRpvRaGE\",\n            \"fields\": {\n                \"Notes\": \"sdfsdfsd\",\n                \"Name\": \"sdfdsf\"\n            },\n            \"createdTime\": \"2021-05-12T14:30:33.000Z\"\n        }\n    ],\n    \"offset\": \"recAOzdIHaRpvRaGE\"\n}`\nRetrieving a record\nRequired parameters:\n\nBase ID\nTable name \nRecord ID\n\n\nExample response from Airtable: \n`json\n{\n    \"id\": \"recu9xMnUdr2n2cw8\",\n    \"fields\": {\n        \"Notes\": \"sdfdsf\",\n        \"Name\": \"dsfdsf\"\n    },\n    \"createdTime\": \"2021-05-12T14:30:33.000Z\"\n}`\nCreating a record\nRequired parameters:\n\nBase ID\nTable name\nRecords\n\n\nExample Records:\n```json\n[\n    {\n        \"fields\": {\n            \"Notes\": \"sdfdsf\",\n            \"Name\": \"dsfdsf\"\n        }\n    },\n    {\n        \"fields\": {\n            \"Notes\": \"note1\",\n            \"Name\": \"dsfdsf\"\n        }\n    }\n]\n```\nClick on the `run` button to run the query.\n:::info\nNOTE: Query must be saved before running.\n:::\nExample response from Airtable:\n`json\n{\n    \"records\": [\n        {\n            \"id\": \"rec5RuZ1COoZGtGDY\",\n            \"fields\": {\n                \"Notes\": \"sdfdsf\",\n                \"Name\": \"dsfdsf\"\n            },\n            \"createdTime\": \"2022-02-07T20:25:27.000Z\"\n        },\n        {\n            \"id\": \"recaYbFPonNNu6Cwj\",\n            \"fields\": {\n                \"Notes\": \"note1\",\n                \"Name\": \"dsfdsf\"\n            },\n            \"createdTime\": \"2022-02-07T20:25:27.000Z\"\n        }\n    ]\n}`\nUpdating a record\nRequired parameters:\n\nBase ID\nTable name\nRecord ID\n\n\nExample body:\n\n\n\nClick on the `run` button to run the query.\n:::info\nNOTE: Query must be saved before running.\n:::\nExample response from Airtable:\n`json\n{\n    \"id\": \"recu9xMnUdr2n2cw8\",\n    \"fields\": {\n        \"Notes\": \"Example Notes\",\n        \"Name\": \"change\"\n    },\n    \"createdTime\": \"2021-08-08T17:27:17.000Z\"\n}`\nDeleting a record\nRequired parameters:\n\nBase ID\nTable name\nRecord ID\n\n\nClick on the `run` button to run the query.\n:::info\nNOTE: Query must be saved before running.\n:::\nExample response from Airtable:\n```json\n{\n    deleted: true\n    id: \"recIKsyZgqI4zoqS7\"\n}",
    "tag": "tooljet"
  },
  {
    "title": "Cosmosdb",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/data-sources/cosmosdb.md",
    "content": "\nid: cosmosdb\ntitle: CosmosDB\n\nCosmosdb\nToolJet can connect to CosmosDB databases to read and write data. \nConnection\nTo add a new Azure Cosmos DB, click on the `+` button on data sources panel at the left-bottom corner of the app editor. Select CosmosDB from the modal that pops up.\nToolJet requires the following to connect to your Cosmos DB.\n\nCosmos DB Account End point\nCosmos DB Account Key\n\n:::info\nAzure Cosmos DB End point is the URL of the Cosmos DB service.\nAzure Cosmos DB Key is the key that is used to access the Cosmos DB service.\nYou can find the endpoint and key in the Azure Portal.\n:::\n\n\n![ToolJet - Data source - CosmosDB](/img/datasource-reference/cosmosdb/cosmosdb-connect.png)\n\n\nSupported queries:\n\nListing databases\nListing containers\nInserting item(s)\nRetrieving an item\nDeleting an item\nQuerying documents\n\nListing databases\nThis query lists all the databases in a Cosmos DB.\nListing containers\nThis query lists all the containers of a database in a Cosmos DB.\n| Fields      | description |\n| ----------- | ----------- |\n| database    | id of the database |\nInserting item(s)\nThis query inserts one or more items in a container of a database in a Cosmos DB.\n| Fields      | description |\n| ----------- | ----------- |\n| database    | id of the database |\n| container   | id of the container |\n| items       | items to be inserted. Example: `{{[{name: \"one\", val: 1}, {name:\"two\", val: 2}]}}` |\nRetrieving an item\nTo read a single item from a container of a database in a Cosmos DB, use the following query.\n| Fields      | description |\n| ----------- | ----------- |\n| database    | id of the database |\n| container   | id of the container |\n| item        | id of the item |\nDeleting an item\nTo delete an item from a container of a database in a Cosmos DB, use the following query.\n| Fields      | description |\n| ----------- | ----------- |\n| database    | id of the database |\n| container   | id of the container |\n| item        | id of the item |\nQuerying documents\nTo query documents from a container of a database in a Cosmos DB using SQL-like syntax, use the following query.\n| Fields      | description |\n| ----------- | ----------- |\n| database    | id of the database |\n| container   | id of the container |",
    "tag": "tooljet"
  },
  {
    "title": "Color Picker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/color-picker.md",
    "content": "\nid: color-picker\ntitle: Color Picker\n\nColor Picker\nColor Picker widget is used to select the desired color from the color picker\n\n\n\nProperties\nDefault Color\nThe data needs to be an valid hex color\n\nOne can change default color either from color picker or using fx (need to provide only respective hex value)\n\nExample:\n`json\nValid color : #000000 or #000\nInvalid Color : #0000, \"black\" , rgb(0,0,0) ,`\n\n\n\nEvents\nTo add an event to a color-picker component, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on + Add handler.\n\n\n\nOn change\nOn change event is triggered when the color is changed on the color-picker.\nLayout\n| Layout          | description                               | Expected value                                                                                                |\n| --------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display mobile view.  | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n| Style      | Description                                                                                                                                                                                                                                              |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |\n| setColor | Set the  color. | `color` eg - `#ffffff` |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nExample: Selecting/changing color from the color picker and getting respective hex, rgb and rgba value of selected color\n\nLet's start by creating a new app and then dragging the Color Picker  widget onto the canvas.\nClick on the Color Picker widget, a picker pop-up will appear, one can select desired color from the picker.\nIn order to close the appeared picker pop-up, one need's to move away mouse from the picker pop-up and picker pop-up will fade away.\nIn the Inspector, inside component, look for colorpicker, where one can get respective hex, rgb and rgba color\n\n\n",
    "tag": "tooljet"
  },
  {
    "title": "Text",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/text.md",
    "content": "\nid: text\ntitle: Text\n\nText\nText widget can be used to display text.\n:::info\nUsers cannot enter and edit text.\n::: \nHow To Use Text Widget\n\nProperties\nText\nThis property sets the content/text inside the Text widget. Refer your query data with dynamic variables `{{queries.datasource.data.text}}` or populate it with sample values `Text goes here !`.\nShow loading state\nToggle `on` or `off` to show or hide the loading state. You can also click on the `Fx` next to it to set the value `{{true}}` and `{{false}}` dynamically. Shows a loading status if the value is `true`. This property is often used with the `isLoading` property of queries so that the table shows a spinner while the query is being run. Default value is `false`.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n| Style      | Description |\n| ----------- | ----------- | \n| Font Weight | You can change the font weight of the text in following ways: normal (default), bold, lighter, bolder |\n| Text Decoration | You can change the text decoration in following ways : none(default), overline, line-through, underline, overline underline |\n| Text Transformation | You can transform the text in following ways: none (default), uppercase, lowercase, capitalize |\n| Font Style | You can change the font style in following ways: normal(default), italic, oblique |\n| Line Height | You can change the line height by providing number as input (example - 1.5) |\n| Text Indent | You can change the text indent by providing the number as input (example - 10) |\n| Letter Spacing | You can change the letter spacing by providing the number as input  (example - 2) |\n| Word Spacing  | You can change the letter spacing by providing the number as input  (example - 2) |\n| Font Variant | You can change the font variant of the text in the following ways: normal (default), small-caps, initial, inherit |\n| Text Size | By default, the text size is set to 14. You can enter any value from 1-100 to set custom text size. |\n| Background Color | You can change the background color of the text component by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Text Color |  You can change the color of the text by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Align Text | You can align the text inside the widget in following ways: left, right, center, justified |\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Code Editor",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/code-editor.md",
    "content": "\nid: code-editor\ntitle: Code Editor\n\nCode Editor\nCode Editor widget is a versatile text editor for editing code and supports several languages. \n\n\n\nProperties\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\n\n\n\n| properties      | description | Expected value |\n| ----------- | ----------- | ----------------- |\n| Placeholder |  It specifies a hint that describes the expected value.| This field requires a `String` value |\n| Mode |  It is used to specify the language to be used for the code-editor.| See `info` below for the list of all supported languages |\n| Show Line Number |  This property is used to show or hide line numbers to the left of the editor.| This fields expects a boolean value `{{true}}` or `{{false}}` |\n:::info\n\nSupporting all commonly used languages.\n\nAPL\nASN.1\nAsterisk dialplan\nBrainfuck\nC, C++, C#\nCeylon\nClojure\nClosure Stylesheets (GSS)\nCMake\nCOBOL\nCoffeeScript\nCommon Lisp\nCrystal\nCSS\nCypher\nCython\nD\nDart\nDjango (templating language)\nDockerfile\ndiff\nDTD\nDylan\nEBNF\nECL\nEiffel\nElixir\nElm\nErlang\nFactor\nFCL\nForth\nFortran\nF#\nGas (AT&T-style assembly)\nGherkin\nGo\nGroovy\nHAML\nHandlebars\nHaskell\nHaxe\nHTML embedded (JSP, ASP.NET)\nHTML mixed-mode\nHTTP\nIDL\nJava\nJavaScript (JSX)\nJinja2\nJulia\nKotlin\nLESS\nLiveScript\nLua\nMarkdown (GitHub-flavour)\nMathematica\nmbox\nmIRC\nModelica\nMscGen\nMUMPS\nNginx\nNSIS\nN-Triples/N-Quads\nObjective C\nOCaml\nOctave (MATLAB)\nOz\nPascal\nPEG.js\nPerl\nPGP (ASCII armor)\nPHP\nPig Latin\nPowerShell\nProperties files\nProtoBuf\nPug\nPuppet\nPython\nQ\nR\nRPM\nreStructuredText\nRuby\nRust\nSAS\nSass\nSpreadsheet\nScala\nScheme\nSCSS\nShell\nSieve\nSlim\nSmalltalk\nSmarty\nSolr\nSoy\nStylus\nSQL (several dialects)\nSPARQL\nSquirrel\nSwift\nsTeX, LaTeX\nTcl\nTextile\nTiddlywiki\nTiki wiki\nTOML\nTornado (templating language)\ntroff (for manpages)\nTTCN\nTTCN Configuration\nTurtle\nTwig\nVB.NET\nVBScript\nVelocity\nVerilog/SystemVerilog\nVHDL\nVue.js app\nWeb IDL\nWebAssembly Text Format\nXML/HTML\nXQuery\nYacas\nYAML\nYAML frontmatter\nZ80\n\n\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout  | description |\n| ----------- | ----------- |\n| Show on desktop | Toggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on Fx to set the value `{{true}}` or `{{false}}`. |\n| Show on mobile | Toggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on Fx to set the value `{{true}}` or `{{false}}`. |\nStyles\n\n\n\n| Styles  | description | \n| ----------- | ----------- |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`. |\n| Disable | This is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |",
    "tag": "tooljet"
  },
  {
    "title": "Datepicker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/datepicker.md",
    "content": "\nid: datepicker\ntitle: Datepicker\n\nDatepicker\nThe Datepicker widget allows users to select a single value for date and time from a pre-determined set.\n\n\n\nHow To Use Datepicker Widget\n\nEvents\nTo add an event to a date-picker component, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on + Add handler.\nOn select\nOn select event is triggered when an date is selected.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\nDefault value\nThis value acts as placeholder for the date picker widget, if any value is not provided then the default value will be used from the picker. The default value needs to be a `String` with respect to the `format` field. Ex: If format is set to `MM/YYYY` then provide default value as `04/2022`.\nFormat\nThe format of the date selected by the date picker. Default date format is DD/MM/YYYY. Date format should be followed as ISO 8601 as mentioned in the moment documentation. This field requires a `String` input. Ex: `DD/MM`, `MM/YYYY`, `YY/MM`, `DD/MM/YYYY` etc.\nEnable time selection?\nToggle on or off to enable the time selection. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nEnable date selection?\nToggle on or off to enable the date selection. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nDisabled dates\nWe can give disabled dates property which will make specific dates disabled and cannot be selected. The default value needs to be an array of`Strings`.\nExample for disabling the 9th of January:\n`js\n{{['09-01']}}`\nNow user won't be able to select the mentioned date since it will be disabled. \nValidation\nCustom Validation\nAdd a validation for the date input in the widget using the ternary operator.\nExample of validation for selecting dates that are after the current date:\n`js\n{{moment(components.datepicker1.value, 'DD/MM/YYYY').isAfter(moment()) ? true : 'Date should be after today'}}`\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nBorder Radius\nUse this property to modify the border radius of the date-picker. The field expects only numerical value from `1` to `100`, default is `0`. \n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Modal",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/modal.md",
    "content": "\nid: modal\ntitle: Modal\n\nModal\nModal widget renders in front of a backdrop, and it blocks interaction with the rest of the application until the modal is closed. It can be used to add dialog boxes to your app for lightboxes, user notifications, forms, etc.\n\n\n\nHow To Use Modal Widget\n\nAdd widgets to Modal\nTo add widgets to the Modals please refer to Tutorial - Adding widgets to a modal\nProperties\nTitle\nTitle that should be shown on the header of the modal. \nLoading State\nLoading state can be used to show a spinner on the modal content. Loading state is commonly used with isLoading property of the queries to show a loading status while a query is being run. Enable the toggle On or click on `fx` to programmatically set the value `{{true}}` or `{{false}}` .\nHide title bar\nEnabling this option hides the title bar in the modal. The value `{{true}}` or `{{false}}` can be set programmatically by clicking on the `Fx` button next to it.\nHide close button\nEnabling this option hides the close button in the modal. The value `{{true}}` or `{{false}}` can be set programmatically by clicking on the `Fx` button next to it.\nHide on escape\nEnabling this option closes the modal(opened) whenever the escape key is pressed. The value `{{true}}` or `{{false}}` can be set programmatically by clicking on the `Fx` button next to it. This property is enabled by default.\n:::info\nNow hide the modal by simply clicking anywhere outside the modal (for preview or released apps).\n:::\nModal size\nSize of the modal. Options are `medium`, `small` and `large`. The default is `small`. You can also programmatically configure the value by clicking on the `Fx` and set the value to `sm`, `md` or `lg`.\nOptions\nUse default trigger button\nThe default trigger button is enabled by default, this button can be used to show the modal. The value `{{true}}` or `{{false}}` can be set programmatically by clicking on the `Fx` button next to it.\n:::info\nA modal can be triggered using the default trigger button, action or via JavaScript.\n:::\nTrigger button label\nIt can be used to set the label of the trigger button.\nEvents\nModal supports the following two events:\n- On open\n- On close\n:::info\nJust like any other event on ToolJet, you can set multiple handlers for the events supported by Modal. Check all the actions here.\n:::\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n| Style      | Description | value |\n| ----------- | ----------- | ------ |\n| Header background color | Change the background color of the header in modal | Enter the Hex color code or choose a color of your choice from the color picker |\n| Header title color | Change the color of the Title in modal | Enter the Hex color code or choose a color of your choice from the color picker |\n| Body background color | Change the background color of the body in modal | Enter the Hex color code or choose a color of your choice from the color picker |\n| Visibility | Toggle on or off to control the visibility of the default trigger button that comes with modal | You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the button will not visible after the app is released. By default, it's set to `{{true}}`. |\n| Disable | Toggle on to disable the default trigger button that comes with modal | You can programmatically change its value by clicking on the `Fx` button next to it, if set to `{{true}}`, the button will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Trigger button background color | Change the background color of the default trigger button of modal | Enter the Hex color code or choose a color of your choice from the color picker |\n| Trigger button text color | Change the color of the label in default trigger button of modal | Enter the Hex color code or choose a color of your choice from the color picker |\n:::info\nTrigger Button styles are only visible when Use default trigger button under Options is toggled on.",
    "tag": "tooljet"
  },
  {
    "title": "Calendar",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/calendar.md",
    "content": "\nid: calendar\ntitle: Calendar\n\nCalendar\nCalendar widget comes with the following features:\n- Day, month and week level views\n- Events\n- Resource scheduling\n\n\n\nProperties\nDate format\nDetermines the format in which any date passed to the calendar via any of the properties will be parsed. It also determines the format in which any date made available by the calendar via exposed variables will be displayed. It uses the date format conventions of moment.js. The default Date format is set to `MM-DD-YYYY HH:mm:ss A Z`.\nDefault date\nDetermines the date on which the calendar's view will be centered on. By default, the default date is set to the current date using moment.js i.e. `{{moment().format(\"MM-DD-YYYY HH:mm:ss A Z\")}}`. If the calendar is on `month` view, it will show the month on which this date exists. If the calendar is on `week` view, it will show the week on which this date exists. This property needs to be formatted using the `Date format` property which is configurable on the inspector.\nEvents\n`Events` property should contain an array of objects, each of which describes the events that the calendar needs to display.\nAssuming that you set the date format to `MM-DD-YYYY HH:mm:ss A Z`, setting the `Events` property to the following code snippet will display an event titled `Sample Event` at the first hour of this day, as displayed in the image of calendar at the beginning of this page.\n`javascript\n{{[\n  {\n      title: 'Sample event',\n      start: `${moment().startOf('day').format('MM-DD-YYYY HH:mm:ss A Z')}`,\n      end: `${moment().endOf('day').format('MM-DD-YYYY HH:mm:ss A Z')}`,\n      allDay: false,\n      tooltip: 'Sample event',\n      color: 'lightgreen',\n  }\n]}}`\nEvent object properties\n| Name | Description |\n|------|-------------|\n| title | Title of the event |\n| start | The date(and time) on which this event begins. Needs to be formatted in the `Date format` you've supplied |\n| end | The date(and time) on which this event ends. Needs to be formatted in the `Date format` you've supplied |\n| allDay | Optional. Qualifies the event as an 'All day event', which will pin it to date headers on `day` and `week` level views |\n| tooltip | Tooltip which will be display when the user hovers over the event |\n| color | Background color of the event, any css supported color name or hex code can be used |\n| textColor | Color of the event title, any css supported color name or hex code can be used |\n| textOrientation | Optional. If it is set to `vertical`, the title of the event will be oriented vertically. |\n| resourceId | Applicable only if you're using resource scheduling. This is the id of the resource to which this event correspond to. |\nYou may supply any other additional property to the event(s). These additional properties will available to you when the calendar widget\nexposes any of the events via its exposed variables.\nResources\nSpecifying resources will make the calendar categorize `week` view and `day` view for each of the resources specified.  \nFor example, to categorize week/day view into for three rooms, we specify `resources` this way:\n`javascript\n{{[\n    {resourceId: 1, title: 'Room A'},\n    {resourceId: 2, title: 'Room B'},\n    {resourceId: 3, title: 'Room C'},\n  ]}}`\nIf we specify the `resourceId` of any of the events as `1`, then that event will be assigned to `Room A`, generating the following calendar, assuming that we've set the view to `day` and are viewing the day on which this event exists.\n\n\n\nDefault view\nDetermines whether the calendar would display a `day`, a `week` or a `month`. Setting this property to anything other than these values will make the calendar default to `month` view.\nThe view that is currently selected will be exposed as the variable `currentView`.\nStart time on week and day view\nThis determines the time at which week view and day view cells begins. Keep in mind that this field accepts a date, but still only the time and timezone(if provided) are taken from this date. The date should be provided in the date format chosen by you in the first property field.\nEnd time on week and day view\nThis determines the time at which week view and day view cells ends. Keep in mind that this field accepts a date, but still only the time and timezone(if provided) are taken from this date. The date should be provided in the date format chosen by you in the first property field.\nShow toolbar\nDetermines whether the calendar toolbar should be displayed or not. Click on `Fx` button to programmatically determine the field value to `{{true}}` or `{{false}}`.\nShow view switcher\nDetermines whether the calendar's buttons that allow user to switch between `month`, `week` and `day` level views will be displayed. Click on `Fx` button to programmatically determine the field value to `{{true}}` or `{{false}}`.\nHighlight today\nDetermines whether the today's card on the calendar should be highlighted or not. Click on `Fx` button to programmatically determine the field value to `{{true}}` or `{{false}}`.\nShow popover when the event is clicked\nDetermines whether to display a popover whenever an event is clicked. Click on `Fx` button to programmatically determine the field value to `{{true}}` or `{{false}}`.\nEvents\n\n\n\nOn Event selected\nThis event is fired when the user clicks on a calendar event. \nLast selected event is exposed as `selectedEvent`.\non Slot selected\nThis event is fired when the user either clicks on an calendar slot(empty cell or empty space of a cell with event) or when they click and drag to select multiple slots.  \nLast selected slot(s) are exposed as `selectedSlots`.\nOn Date Navigate\nThis event is fired when the user clicks on `Today`, `Next` or `Back` buttons on the calendar. \nThe corresponding date to which the user navigated, will be exposed as `currentDate`.\nOn View Change\nThis event is fired when a different view is selected by the user. \nThe current view is exposed as `currentView`.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget. Under the General accordion,you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nCell size in views classified by resource\nWhen `resources` are specified, the calendar could take up quite a lot of horizontal space, making the horizontal scroll bar of calendar having to be relied upon all the time.  \nIf we set this property to `compact`, the cell sizes will be smaller in `week` and `day` views.\nHeader date format on week view\nThis format determines how the column header for each day in week view will be displayed. As with every other date format field in ToolJet, this follows the momentjs standard of date formatting. By default, its set to `DD MMM`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Text Input",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/text-input.md",
    "content": "\nid: text-input\ntitle: Text Input\n\nText Input\nText Input widget lets users enter and edit text.\n:::tip\nThe Text Input should be preferred when user input is a single line of text.\n:::\nHow To Use Text Input Widget\n\nProperties\nDefault value\nThe default value that the widget will hold when the app is loaded.\nPlaceholder\nIt specifies a hint that describes the expected value.\nEvents\n\n\n\nOn change\nThis event fires whenever the user types something on the text input.\nOn Enter Pressed\nThis event fires whenever the user presses the enter button on keyboard after entering some text on text input component.\nOn focus\nThis event fires whenever the user clicks inside the text input component.\nOn blur\nThis event fires whenever the user clicks outside the text input component.\n:::info\nCheck Action Reference docs to get detailed information about all the Actions.\n:::\nValidation\nRegex\nUse this field to enter a Regular Expression that will validate the password constraints.\nMin length\nEnter the number for a minimum length of password allowed.\nMax length\nEnter the number for the maximum length of password allowed.\nCustom validation\nIf the condition is true, the validation passes, otherwise returns a string that should be displayed as the error message. For example: `{{components.passwordInput1.value === 'something' ? true: 'value should be something'}}`.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nText Color\nUse this property to set the color of the text inside the text input component. You can select the color from the color picker or set the value using Hex color code.\nBorder color\nAdd a color to the border of the text-input component using this property. You can select the color from the color picker or set the value using Hex color code.\nBorder Radius\nUse this property to modify the border radius of the widget. The field expects only numerical values from `1` to `100`, and default is `0`. \nVisibility\nIt is to control the visibility of the widget. If `{{false}}` the widget will not be visible after the app gets deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will lock and become non-functional. By default, its value is set to `{{false}}`.\n:::info\nCheck the component specific actions available for this component here.",
    "tag": "tooljet"
  },
  {
    "title": "Map",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/map.md",
    "content": "\nid: map\ntitle: Map\n\nMap\nThe map widget can be used to pick or select locations on the Google map with the location's coordinates.\n\n\n\nExposed variables\nExposed variables can be used to get data from the widget.\n| variable      | description |\n| ----------- | ----------- |\n| bounds      | Viewport area of the map |\n| center      | It contains the locations' coordinates at the center of the bounding area |\n| markers     | A marker identifies a location on the map. `markers` contains the list of markers on the map |\n| selectedMarker | Object with the marker selected by the user |\nEvents\n| events      | description |\n| ----------- | ----------- |\n| On bounds change | Triggered when the bounding area is changed. This event is triggered after `bounds` variable is updated |\n| On create marker | This event is triggered when a new marker is created on the map |\n| On marker click | This event is triggered when any of the markers in the map is clicked |\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\n| properties      | description | Expected value |\n| ----------- | ----------- | ------------------ |\n| Initial location | It is the default location's coordinates that the map should focus on. | An object containing the latitude and langitude as key value pairs. ex: `{{ {\"lat\": 40.7128, \"lng\": -73.935242} }}` |\n| Default Markers | List of markers that should be shown on the map | An array of objects containing the coordinates. ex: `{{ [{\"lat\": 40.7128, \"lng\": -73.935242}] }}` | \n| Add new markers | This property should be enabled to add new markers to the map on click. | `On` by default, toggle `off` to disable adding new markers on the map. Can be programmatically configured by clicking on `Fx`, accepts values `{{true}}` or `{{false}}` |\n| Search for places | It can be used to show or hide auto-complete search box. | `On` by default, toggle `off` to disable search on the map. Can be programmatically configured by clicking on `Fx`, accepts values `{{true}}` or `{{false}}` |\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |",
    "tag": "tooljet"
  },
  {
    "title": "Container",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/container.md",
    "content": "\nid: container\ntitle: Container\n\nContainer\nContainers are used to group widgets together. You can move the desired number of widgets inside a container to organize your app better.\n\n\n\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers themouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout      | description |\n| ----------- | ----------- |\n| Show on desktop | This property have toggle switch. If enabled, the Container widget will display in the desktop view else it will not appear. This is enabled by default.|\n| Show on mobile | This property have toggle switch. If enabled, the Container wisget will display in the mobile view else it will not appear.|\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- |\n| Background Color |  You can change the background color of the Container by entering the `Hex color code` or choosing a color of your choice from the color picker. |\n| Border radius | Use this property to modify the border radius of the container. The field expects only numerical value from `1` to `100`, default is `0`. |\n| Border Color |  You can change the border color of the Container by entering the `Hex color code` or choosing a color of your choice from the color picker. |\n| Visibility | This is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`. |\n| Disable |  This property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Star rating",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/star-rating.md",
    "content": "\nid: star\ntitle: Star rating\n\nStar rating\nStar rating widget can be used to display as well as input ratings. The widget supports half stars, and the number of stars can be set too.\n\n\n\nEvents\nOn Change\nThis event is triggered when a star is clicked.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\nLabel\nThe text to be used as the label for the star rating. This field expects a `String` value.\nNumber of stars\nInitial number of stars in the list on initial load. `default: 5`. This field expects an integer value.\nDefault no of selected stars\nThis property specifies the default count of stars that are selected on the initial load. `default: 5` (integer). This field expects an integer value.\nEnable half star\nToggle `on` to allow selection of half stars. `default: false` (bool). Click on `Fx` to programmatically define the value `{{true}}` or `{{false}}`.\nTooltips\nThis is used for displaying informative tooltips on each star, and it is mapped to the index of the star. `default: []` (array of strings ). Ex: `{{[\"bad\", \"okay\", \"good\", \"best\"]}}`\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nStar Color\nDisplay color of the star. `default: #ffb400` (color hex). Change color by providing `Hex color code` or choosing one from the picker.\nLabel color\nChange the color of label in widget by providing `Hex color code` or choosing one from the picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable",
    "tag": "tooljet"
  },
  {
    "title": "Form",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/form.md",
    "content": "\nid: form\ntitle: Form\n\nForm\nForm component can be used to get input from the user and store it in the connected datasource. Form component serves as a parent widget that can store different widgets like texts, input box, dropdown to allow selection, and a button for triggering the event.\n\n\n\nProperties\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| Button To Submit Form | The dropdown can be used to select the button that will be used as the submit button for the form | Any button that will be added as a child component inside the form component can be selected from the dropdown |\n| Loading state | Loading state can be used to show a spinner as the form content. Loading state is commonly used with isLoading property of the queries to show a loading status while a query is being run. | Switch the toggle On or click on `fx` to programmatically set the value `{{true}}` or `{{false}}`  |\n\n\n\nEvents\nTo add an event to a button group, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\nOn submit\nOn submit event is triggered when the button on the form component is clicked. Just like any other event on ToolJet, you can set multiple handlers for on submit event.\nOn invalid\nOn invalid event is triggered when the input on the form is invalid.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget. Under the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\nLayout\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to display mobile view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- | \n| Background color |  You can change the background color of the form by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Border radius | Use this property to modify the border radius of the form component. |\n| Border color |  You can change the color of the border of the form by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Visibility | Toggle on or off to control the visibility of the form. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n| Disable | Toggle on to lock the widget. You can programmatically change its value by clicking on the `Fx` button next to it, if set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Box shadow | This property adds a shadow to the widget. | You can use different values for box shadow property like offsets, blur, spread, and the color code. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Button",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/button.md",
    "content": "\nid: button\ntitle: Button\n\nButton\nButton widget can be used to take actions.\n\nProperties\nTo add an event to a button, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\nEvents\n\n\n\nOn click\nOn Click event is triggered when the button is clicked. \nOn hover\nOn hover event is triggered when the mouse cursor is moved over the button. Just like any other event on ToolJet, you can set multiple handlers for on click event.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\n\n\n\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| Button Text | It can be used to set the label of the button. | Any String value: `Send Message`, `Delete`, or `{{queries.xyz.data.action}}` |\n| Loading state | Loading state can be used to show a spinner as the button content. Loading state is commonly used with isLoading property of the queries to show a loading status while a query is being run. | Switch the toggle On or click on `fx` to programmatically set the value `{{true}}` or `{{false}}`  |\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to display mobile view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- | \n| Background color |  You can change the background color of the widget by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Text color |  You can change the color of the Text in button by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Loader color |  You can change the color of the loader in button by entering the Hex color code or choosing a color of your choice from the color picker. This will only be affective if the loading state property of the button is enabled. |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n| Disable | Toggle on to lock the widget. You can programmatically change its value by clicking on the `Fx` button next to it, if set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Border radius | Use this property to modify the border radius of the button. |\n| Border color | Add a color to the border of the button using this property. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Image",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/image.md",
    "content": "\nid: image\ntitle: Image\n\nImage\nImage widget is used to display images in your app.\n\n\n\nEvents\n\n\n\nOn click\nOn click event is triggered when an image is clicked.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\n\n\n\nURL\nEnter the URL of the image to display it on the widget.\nLoading state\nLoading state can be used to show a spinner as the image content. Loading state is commonly used with `isLoading` property of the queries to show a loading status while a query is being run. Switch the toggle On or click on `fx` to programmatically set the value `{{true}}` or `{{false}}`.\nAlternative text\nUsed for alt text of images.\nZoom buttons\nToggle this to enable zoom options inside image.\nRotate buttons\nToggle this on to enable rotate button in the image.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nBorder type\nChoose a border type for the image from available options:\n- None\n- Rounded\n- Circle\n- Thumbnail\nImage fit\nChoose a image fit - similar to object fit for the image from available options:\n- fill\n- cover\n- contain\n- scale-down\nBackground color\nAdd a background color to widget by providing the `HEX color code` or choosing the color of your choice from the color-picker.\nPadding\nAdds padding between the image and widget border. It accepts any numerical value from `0` to `100`.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Toggle Switch",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/toggle-switch.md",
    "content": "\nid: toggle-switch\ntitle: Toggle Switch\n\nToggle Switch\nThe toggle switch widget allows the user to change a setting between two states.\nThe Toggle switch widget should be used if we want to make a binary choice, such as turning something on or off or enable or disable.\nHow To Use Toggle Switch Widget\n\nProperties\nLabel\nThis property can be used to set a label for the switch. Default Label: Toggle label\nDefault status\nThe property is used to set the default status (enabled or disabled) of the toggle switch component when the app is loaded. By default, the checkbox component is set to `{{false}}`/disabled.\nEvent\nOn change\nThis event is triggered whenever the toggle switch is clicked.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nText color\nChange the color of the text in the widget by providig the `Hex color code` or choosing a color from the picker.\nToggle switch color\nChange the color of the toggle switch in the widget by providig the `Hex color code` or choosing a color from the picker.\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Date-range picker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/date-range-picker.md",
    "content": "\nid: date-range-picker\ntitle: Date-range picker\n\nDate-range picker\nThe date-range picker widget allows users to select a range of dates.\nHow To Use Date Range Picker Widget\n\nProperties\nDefault start date\nSet the start date to be selected by default in the widget\nDefault end date\nSet the start date to be selected by default in the widget\nFormat\nThe format of the date selected by the date picker. Default date format is DD/MM/YYYY. Date format should be followed as ISO 8601 as mentioned in the moment documentation.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nEvents\nDate range picker supports the following events:\nOn select\nThe On select event is triggered when the a start date and end date is selected on the picker. Just like any other event on ToolJet, you can set multiple handlers for on select event.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nBorder Radius\nUse this property to modify the border radius of the date range picker. The field expects only numerical value from `1` to `100`, default is `0`. \nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Filepicker",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/file-picker.md",
    "content": "\nid: file-picker\ntitle: Filepicker\n\nFilepicker\nFilepicker widget allows the user to drag and drop files or upload files by browsing the filesystem and selecting one or more files in a directory.\n\n\n\n:::info\n File types must be a valid MIME type according to input element specification or a valid file extension.\nTo accept any/all file type(s), set `Accept file types` to an empty value.\n:::\n\n\n\n:::tip\nMIME type determination is not reliable across platforms. CSV files, for example, are reported as text/plain under macOS but as application/vnd.ms-excel under Windows.\n:::\nEvents\n\n\n\nOn file selected\nOn file selected event is triggered when one or more files are selected by the selector dialogue box.\nOn file loaded\nOn file loaded event is triggered when a file is loaded in the browser.\nOn file deselected\nOn file selected event can be triggered when one or more files are removed from the picker.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\nInstruction Text\nInstruction text can be set to give information on the file picker.\nUse Drop zone\nCreates a drag & drop zone. Files can be dragged and dropped to the \"drag & drop\" zone.\nUse File Picker\nOn clicking it invokes the default OS file prompt.\nPick multiple files\nAllows drag and drop (or selection from the file dialog) of multiple files. `Pick multiple files` is disabled by default.\nMax file count\nThe maximum accepted number of files The default value is `2`.\nAccept file types\nBy providing types, you can make the dropzone accept specific file types and reject the others.\nMax size limit\nMaximum file size (in bytes).\nMin size limit\nMinimum file size (in bytes).\n:::tip\nFiles can be accepted or rejected based on the file types, maximum file count, maximum file size (in bytes) and minimum file size (in bytes).\nIf `Pick multiple files` is set to false and additional files are dropped, all files besides the first will be rejected. \nAny file that does not have a size in the range of `Max size limit` and `Min size limit` will be rejected.\n:::\nOptions\n\n\n\nParse content\nParse the selected files, supports CSV, xls, and xlsx files.\nFile type\nIf Parse content is enabled, options to auto-detect files and parse content or parse selected file types.\n:::info\n- If Parse content option is toggled off, File Type option will not be available.\n- If the Parse content option is toggled on, it only parses the next file that is selected, not the already selected one.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nBorder Radius\nUse this property to modify the border radius of the filepicker widget. The field expects only numerical value from `1` to `100`, default is `0`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nActions\n| Action  | Description | Properties |\n| ----------- | ----------- | ------------ |",
    "tag": "tooljet"
  },
  {
    "title": "Range Slider",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/range-slider.md",
    "content": "\nid: range-slider\ntitle: Range Slider\n\nRange Slider\nRange sliders are widely used across different UIs. One of the main purposes is to filter, explore all the related content and available in the control and settings options.\n:::tip\nRange Sliders have \"Two handles\" option which allows user to select within a range.\n:::\n\n\n\nProperties\nMinimum value\nSet the minimum value for the slider. This field accepts any numerical value.\nMaximum value\nSet the maximum value for the slider. This field accepts any numerical value.\nValue\nSet the default value when the widget loads. This can be used to pre-fill the value based on your data and requirements.\nTwo handles\nThe slider will now have 2 dragging handles. It is used to define a range of values versus a single given value.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nLine color\nEnter the hexcode to set the default color for slider's track. \nHandle color\nEnter the hexcode to set the color for slider's handler. \nTrack color\nEnter the hexcode to set the color for slider's active portion on the track. \nVisibility\nSet the visivlity of the slider programmatically. The default value is `{{true}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Rich Text Editor",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/rich-text-editor.md",
    "content": "\nid: rich-text-editor\ntitle: Rich Text Editor\n\nRich Text Editor\nRich Text Editor can be used to enter and edit the text in HTML format.\nIt should be preferred for blog posts, forum posts or notes sections. The text is to be used as the label for the radio button.\n\n\n\nProperties\nPlaceholder\nIt specifies a hint that describes the expected value.\nDefault Value\nThe default value that the widget will hold when the app is loaded.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable",
    "tag": "tooljet"
  },
  {
    "title": "Checkbox",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/checkbox.md",
    "content": "\nid: checkbox\ntitle: Checkbox\n\nCheckbox\nCheckbox widget can be used for allowing the users to make a binary choice, e.g,. unselected or selected.\n:::info\nThe checkbox widget consists of a single checkbox input.\n:::\nHow To Use Checkbox Widget\n\nProperties\nLabel\nThe text is to be used as the label for the checkbox. This field expects a `String` input.\nDefault Status\nThe property is used to set the default status (enabled or disabled) of the checkbox widget when the app is loaded. By default, the checkbox component is set to `{{false}}`/disabled.\nEvents\nTo add an event to a checkbox component, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on + Add handler.\n\n\n\nOn check\nOn check event is triggered when checkbox input is checked.\nOn uncheck\nOn uncheck event is triggered when checkbox input is unchecked.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nText color\nChange the color of the Text in checkbox by entering the `Hex color code` or choosing a color of your choice from the color-picker. \nCheckbox color\nYou can change the color of the checkbox by entering the `Hex color code` or choosing a color of your choice from the color-picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |",
    "tag": "tooljet"
  },
  {
    "title": "Pagination",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/pagination.md",
    "content": "\nid: pagination\ntitle: Pagination\n\nPagination\nPagination enables the user to select a specific page from a range of pages. It is used to separate the content into discrete pages.\n:::tip\nYou can club pagination widget with the List View widget.\n:::\n\n\n\nProperties\nNumber of pages\nYou can use this to predefined the total number of pages. It is calculated by dividing the length of the data array that will be passed, by the data limit which is the number of posts we will show on each page. \nDefault page index\nIt is used to set and display the default page index when the app initially loads. You can also put a conditional logic to set its value as per your use case.\nEvent\nOn Page Change\nThis event is triggered whenever the user switches to another page index. You can explore various actions associated with this event as per app logic.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::",
    "tag": "tooljet"
  },
  {
    "title": "Circular Progress Bar",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/circular-progressbar.md",
    "content": "\nid: circular-progress-bar\ntitle: Circular Progress Bar\n\nCircular Progress Bar\nCircular progress bar widget can be used to show progress in a progress circle.\n\n\n\nProperties\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\n\n\n\n| properties  | description | Expected Value |\n| ----------- | ----------- | --------------- |\n| Text | We can set a text inside the progress circle.| It expects a `String`, you can also use js to dynamically update the text as the progress changes. |\n| Progress | It can be used to set the progress of the widget. | Progress should be an integer between 0 and 100.|\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout  | description |\n| ----------- | ----------- |\n| Show on desktop | Toggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on Fx to set the value `{{true}}` or `{{false}}`. |\n| Show on mobile | Toggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on Fx to set the value `{{true}}` or `{{false}}`. |\nStyles\n\n\n\n| properties      | description | Expected Value |\n| ----------- | ----------- | ------------------- |\n| Color | To define stroke color.| `HEX color code` or choose color from color-picker. |\n| Text color | To define color of the text inside circular progress bar.| `HEX color code` or choose color from color-picker. |\n| Text size | To define the size of the text | Value must between 0-100. |\n| Stroke width | To define the width of stroke | Value must between 0-100.|\n| Counter Clockwise | Whether to rotate progress bar in counterclockwise direction. | It accepts `{{true}}` and `{{false}}`, Default value is `false`.|\n| Circle ratio | To define ratio of the full circle diameter the progressbar should use. | It accepts numerical value and the default is `1`. |\n| Visibility | Toggle on or off to control the visibility of the widget. | You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nCircular progress bar widget uses react-circular-progress package. Check the repo for further more details about properties and styles.",
    "tag": "tooljet"
  },
  {
    "title": "Statistics",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/statistics.md",
    "content": "\nid: statistics\ntitle: Statistics\n\nStatistics\nStatistics can be used to display different statistical information.\n\n\n\nProperties\nPrimary value label\nThis property lets you add and remove primary value label.\nPrimary value\nThis property lets you add and remove primary value,the actual amount can be represented here.\nHide secondary value\nThis property lets you show/hide the secondary value from the statistics component. By default, this property is disabled. Toggle it on to hide the secondary value, you can also click on the `Fx` button next to it to dynamically set the value to `{{true}}` or `{{false}}`.\nSecondary value label\nThis property lets you add and remove secondary value label.\nSecondary value\nThis property lets you add and remove secondary value,the change in value can be represented here.\nSecondary sign display\nThis property lets you add and secondary sign either positive or negative,can be used to represent positive(increase) or negative(decrease) movement.Default value is positive.\nLoading state\nLoading state can be used to show a spinner on the statistics. Loading state is commonly used with `isLoading` property of the queries to show a loading status while a query is being run. Switch the toggle On or click on `fx` to programmatically set the value `{{true}}` or `{{false}}`.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nPrimary Label Colour\nYou can change the primary label color by entering the Hex color code or choosing a color of your choice from the color picker.\nPrimary Text Colour\nYou can change the primary text color of the primary label by entering the Hex color code or choosing a color of your choice from the color picker.\nSecondary Label Colour\nYou can change the secondary label color of the primary label by entering the Hex color code or choosing a color of your choice from the color picker.\nSecondary Text Colour\nYou can change the secondary text color of the primary label by entering the Hex color code or choosing a color of your choice from the color picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Table",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/table.md",
    "content": "\nid: table\ntitle: Table\n\nTable\nTables can be used for both displaying and editing data.\n\nTable data\n\n\n\nArray of objects to be displayed on the table. It is commonly used to display data from query (`{{queries.restapi1.data}}`). Table data expects an array of objects, example: \n`{{[{ id: 1, name: 'Sarah', email: 'sarah@example.com'}]}}`\nThe table component will auto-generate all the columns as soon as the expected table data(array of objects) is provided.\nColumns\n\n\n\nCell data types\nYou can define the cell types as per your table's data source using the following:\n\nString | Default: It is used to render the data for cell types: text or textarea,\nNumber: This cell type will only expect the numerical values and can be sorted in ascending or descending order\nBadge: It is a labeling component used to display data with badges for e.g status of a shipment\nMultiple badges: Similar to badge, used to display multiple data badges in the form of array of objects,\nTags: Used to display an array of objects in the form of tags, e.g status, levels, steps\nDropdown: When data is in the form of an array of options to be selected, e.g select priority\nRadio: Used to make a selection from a group of options, e.g select your salary-range\nMultiselect: Similar to dropdown but to collect multiple user inputs from a list of options,\nToggle switch: Allows a user to change a setting between two states, e.g select between Yes/No,\nDate picker: Allowing users to display and select dates, e.g delivery date\nImage: This cell type expects the URL of image and will display the image in the cell. It also has the option to style the image.\n\n:::info\nCheck this how-to guide on dynamically change the color of text in a row and column in the table.\n:::\nDisplaying Data\nThe data object should be an array of objects. Table columns can be added, removed, rearranged from the inspector. `key` property is the accessor key used to get data from a single element of a table data object. For example:\nIf the table data is:\n`js\n[\n    {\n        \"review\": {\n            \"title\": \"An app review\"\n        },\n    \"user\": {\n            \"name\": \"sam\",\n            \"email\": \"sam@example.com\"\n        },\n    }\n]`\nTo display email column, the key for the column should be `user.email`.\nSaving data\nEnable `editable` property of a column to make the cells editable. If a data type is not selected, `string` is selected as the data type.\nIf the data in a cell is changed, `changeSet` property of the table object will have the index of the row and the field that changed.\nFor example, if the name field of second row of example in the 'Displaying Data' section is changed, `changeSet` will look like this:\n`js\n{\n    2: {\n        \"name\": \"new name\"\n    }\n}`\nAlong with `changeSet`, `dataUpdates` property will also be changed when the value of a cell changes. `dataUpdates` will have the whole data of the changed index from the table data. `dataUpdates` will look like this for our example:\n`js\n[{\n    \"review\": {\n        \"title\": \"An app review\"\n    },\n    \"user\": {\n        \"name\": \"new name\",\n        \"email\": \"sam@example.com\"\n    },\n}]`\nIf the data of a cell is changed, \"save changes\" button will be shown at the bottom of the table. This button when clicked will trigger the `Bulk update query` event. This event can be used to run a query to update the data on your data source.\nValidation\nUnder column properties, expand the detailed view of a column type to access a toggle button called `make editable`. You can toggle it `ON` to apply the validations for each column respectively using the following.\nRegex\nUse this field to enter a Regular Expression that will validate the password constraints.\nMin length\nEnter the number for a minimum length of password allowed.\nMax length\nEnter the number for the maximum length of password allowed.\nCustom validation\nIf the condition is true, the validation passes, otherwise return a string that should be displayed as the error message. For example: `{{components.passwordInput1.value === 'something' ? true: 'value should be something'}}`\nAction buttons\n\n\n\nAction buttons will be displayed as the last column of the table. The styles of these buttons can be customised and `on click` actions can be configured. when clicked, `selectedRow` property of the table will have the table data of the row.\n| Property | Description |\n| -------- | ------------ |\n| Background color (Action Button) | Background color of the action button. |\n| Text color (Action Button) | Color of button-text of the action button. |\nOptions\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nServer-side pagination\nServer-side pagination can be used to run a query whenever the page is changed. Go to events section of the inspector and change the action for `on page changed` event. Number of records per page needs to be handled in your query. If server-side pagination is enabled, `pageIndex` property will be exposed on the table object, this property will have the current page index. `pageIndex` can be used to query the next set of results when page is changed.\nWhen Server-side pagination is enabled, you'll be able to set three other table properties:\n- Enable previous page button: When server-side pagination is enabled, this button is enabled by default. Toggle this off to hide the previous page button from the table.\n- Enable next page button: When server-side pagination is enabled, this button is enabled by default. Toggle this off to hide the next page button from the table.\n- Total records server side: Set a numerical value to display particular number of records.\nClient-side pagination\nClient-side pagination is enabled by default. When the client-side pagination is enabled(`{{true}}`), another property Number of rows per page will be shown that can be used to set the number of records per page. By default, the value is set to 10 and if it is disabled(`{{false}}`) then it will show all the records in the single page.\nServer-side search\nIf server-side search is enabled, `on search` event is fired after the content of `searchText` property is changed. `searchText` can be used to run a specific query to search for the records in your data source.\nShow download button\nShow or hide download button at the Table footer.\nHide/Show columns\nTable header has an option(Eye icon) to show/hide one or many columns on the table. \nShow filter button\nShow or hide filter button at the Table header. The following filters are available:\n- contains\n- does not contain\n- matches\n- does not match\n- equals\n- does not equal to\n- is empty\n- is not empty\n- greater than\n- greater than or equal to\n- less than\n- less than or equal to\nShow update buttons\nIt's enabled by default. Table footer will show two update buttons Save changes & Discard changes whenever a cell is edited. Toggle `off` to hide update buttons.\nBulk selection\nTo let the user select one or more rows from the current page of a table, enable 'Bulk selection' from the inspector. The values of selected rows will be exposed as `selectedRows`.\nHighlight selected row\nEnable this option to have the last selected(clicked on) row to be highlighted.\nDisable sorting\nEnable this option to lock the sorting of columns when clicked on column name.\nServer-side sort\nWhen Server-side sort is enabled, clicking on the column headers will not automatically sort the table, instead, the `Sort applied` event will be fired and the applied sorting will be exposed as `sortApplied`. You can use this data to run any query that feeds data to the table in a manner that reflects the sorting applied.\nServer-side filter\nWhen Server-side filter is enabled, applying filters will not automatically filter the table, instead, the `Filter changed` event will be fired and the applied filters will be exposed as `filters`. You can use this data to run any query that feeds data to the table in a manner that reflects the filters applied.\nShow search box\nIt can be used to show or hide Table Search box. Client-side search is enabled by default and server-side search can be enabled from the events section of the inspector. Whenever the search text is changed, the `searchText` property of the table component is updated. If server-side search is enabled, `on search` event is fired after the content of `searchText` property is changed. `searchText` can be used to run a specific query to search for the records in your data source.\nIf you don't wish to use the search feature altogether, you can disable it from the inspector.\nLoading state (Boolean)\nLoading state shows a loading skeleton for the table. This property can be used to show a loading status on the table while data is being loaded. `isLoading` property of a query can be used to get the status of a query.\nEvents\n\nRow hovered\nRow clicked\nSave changes\nCancel changes\nPage changed\nSearch\nSort applied\nCell value changed\nFilter changed\n\nRow hovered\nThis event is triggered when the mouse pointer is moved over a row in the table. The `hoveredRowId` exposed variable of the table will include the id of the latest hovered row and `hoveredRow` property of the table will have the data of the hovered row in the object format.\nRow clicked\nThis event is triggered when a table row is clicked. The `selectedRowId` exposed variable of the table will include the id of the selected row and the `selectedRow` property of the table object will have the table data of the selected row.\nSave changes\nIf any cell of the table is edited, the `save changes` button appears at the footer of the table. Save changes event is triggered when this button is clicked.\nCancel changes\nIf any cell of the table is edited, the `Discard changes` button appears at the footer of the table. Cancel changes event is triggered when this button is clicked.\nPage changed\nIf server-side pagination is enabled, this event is fired when the current page is changed. This event is triggered after updating the `pageIndex` variable.\nSearch\nThis event is triggered when a text is entered to the search input box of the table. `searchText` variable is updated before triggering this event.\nSort applied\nThis event is triggered when the column name header is clicked to apply sorting in `asc` or `desc`. The `sortApplied` variable is updated with an object having `column` and `direction` values.\nCell value changed\nIf any cell of the table is edited, the `cell value changed` event is triggered.\nFilter changed\nThis event is triggered when filter is added, removed, or updated from the filter section of the table. `filters` property of the table is updated to reflect the status of filters applied. The objects will have properties: `condition`, `value`, and `column`. \nExposed variables\n| variable      | description |\n| ----------- | ----------- |\n| currentData      | Data that is currently being displayed by the table ( including edits if any ) |\n| currentPageData  | Data that is displayed on the current page if pagination is enabled ( including edits if any )      |\n| pageIndex | Index of the current page, starting from 1\n| changeSet | Object with row number as the key and object of edited fields and their values as the value |\n| dataUpdates | Just like changeSet but includes the data of the entire row |\n| selectedRow | The data of the row that was last clicked. `selectedRow` also changes when an action button is clicked |\n| searchText | The value of the search field if server-side pagination is enabled |\nStyles\n| Style      | Description |\n| ----------- | ----------- |\n| Text color | Change the color of the text in table by providing `hex color code` or choosing one from the picker |\n| Action button radius | This field can be used to give a radius to all action buttons. The default value is `0` |\n| Table type | Select a type of table from the dropdown. |\n| Cell size |  This decides the size of table cells. You can choose between a `Compact` size for table cells or a `Spacious` size |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n| Disable | Toggle on to lock the widget. You can programmatically change its value by clicking on the `Fx` button next to it, if set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Border radius | Use this property to modify the border radius of the button. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Dropdown",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/dropdown.md",
    "content": "\nid: dropdown\ntitle: Dropdown\n\nDropdown\nThe Dropdown widget can be used to collect user input from a list of options.\nHow To Use Dropdown Widget\n\n:::tip\nDropdown options can be referred to your query data with dynamic variables.\n:::\n\n\n\nEvents\n\n\n\nEvent: On select\nOn select event is triggered when an option is selected.\nEvent: On search text changed\nThis event is triggered whenever the user searches through the options by typing on the dropdown's input box. The corresponding search text will be exposed as `searchText`.\nProperties\n\n\n\nLabel\nThe text is to be used as the label of the dropdown.\nDefault value\nValue of the default option\nOption value\nOption values are values for different options in the list of the dropdown. Refer your query data with dynamic variables `{{queries.datasource.data.map(item => item.value)}}` or populate it with sample values `{{[1,2,3]}}`\nOption labels\nOption labels are labels for different options in the list of the dropdown. Refer your query data with dynamic variables `{{queries.datasource.data.map(item => item.label)}}` or populate it with sample values `{{[\"one\", \"two\", \"three\"]}}`\nOptions loading state\nShow a loading state in the widget using this property. It is off by default, toggle on to enable it. You can also programmatically set the values `{{true}}` or `{{false}}` by clicking on the `Fx` button.\nValidation\nCustom validation\nAdd a validation for the options in dropdown widget using the ternary operator.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nBorder Radius\nUse this property to modify the border radius of the dropdown. The field expects only numerical value from `1` to `100`, default is `0`.\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nSelected text color\nChange the text color of the selected option in the widget by providing the `HEX color code` or choosing the color from color picker.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nAlign text\nYou can align the text inside the widget in following ways: left, right, center, justified \n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Vertical Divider",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/vertical-divider.md",
    "content": "\nid: vertical-divider\ntitle: Vertical Divider\n\nVertical Divider\nVertical Divider widget is used to add vertical separator between components.\n\n\n\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| properties      | description |\n| ----------- | ----------- |\n| Show on Desktop |  This property have toggle switch. If enabled, the divider will display in the desktop view else it will not appear. |\n| Show on Mobile |  This property have toggle switch. If enabled, the divider will display in the mobile view else it will not appear. |\nStyles\n\n\n\n| properties      | description |\n| ----------- | ----------- |\n| Divider Color |  It is used to set the color of the divider. Use hex code to set the background color. |\n| Visibility |  This property is used to set the visibility of the divider. The property accepts Boolean value. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Spinner",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/spinner.md",
    "content": "\nid: spinner\ntitle: Spinner\n\nSpinner\nSpinner widget can be used to provide a visual indication that an action is in progress by awaiting a change.\n\n\n\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nColor\nChange the color of the Spinner by entering the `Hex color code` or choosing a color of your choice from the color-picker. \nSize",
    "tag": "tooljet"
  },
  {
    "title": "Kanban",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/kanban-board.md",
    "content": "\nid: kanban\ntitle: Kanban\n\nKanban\nKanban widget allows you to visually organize and prioritize your tasks with a transparent workflow. You can set the number of columns to display, enable/disable the add cards button, and bind data to the cards.\n\n\n\nEvents\nTo add an event, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\n\nCard added\nCard removed\nCard moved\nCard selected\nCard updated\n\nJust like any other event on ToolJet, you can set multiple handlers for any of the above mentioned events.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\n\n\n\nProperties\n\n\n\n:::caution\nPlease keep in mind that you need to provide an `id` for each card in the `Card data` field \nand this `id` must be of type string.\n:::\n| Properties | description | Expected value |\n| ----------- | ----------- | ----------- |\n| Columns | Enter the columns data - `id` and `title` in the form of array of objects or from a query that returns an array of objects. | `{{[{ \"id\": \"1\", \"title\": \"to do\" },{ \"id\": \"2\", \"title\": \"in progress\" },{ \"id\": \"2\", \"title\": \"Completed\" }]}}` or `{{queries.xyz.data}}` |\n| Card data | Enter the cards data - `id`, `title` and `columnId` in the form of array of objects or from a query that returns an array of objects. | `{{[{ id: \"01\", title: \"one\", columnId: \"1\" },{ id: \"02\", title: \"two\", columnId: \"1\" },{ id: \"03\", title: \"three\", columnId: \"2\" }]}}` or `{{queries.abc.data}}` |\n| Enable Add Card | This property allows you to show or hide the `Add Cards` button at the bottom of every column. | By default its enabled, you can programmatically set `{{true}}` or `{{false}}` enable/disable button by clicking on the `Fx` next to it |\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout          | description                                             | Expected value                                                                                        |\n| --------------- | ------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- |\n| Show on desktop | Toggle on or off to display the widget in desktop view. | You can programmatically set the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display the widget in mobile view.  | You can programmatically set the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n\n\n\n| Style        | Description                                                                                                                                                                   |\n| ------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Disable      | If disabled or set to `{{false}}` the widget will be locked and becomes non-functional. By default, its disabled i.e. its value is set to `{{true}}` .                        |\n| Visibility   | This is to control the visibility of the widget. If `{{false}}`/disabled the widget will not visible after the app is deployed. By default, it's enabled (set to `{{true}}`). |\n| Width        | This property sets the width of the column.                                                                                                                                   |\n| Min width    | This property sets the min width of the column.                                                                                                                               |\n| Accent color | You can change the accent color of the column title by entering the Hex color code or choosing a color of your choice from the color picker.                                  |\nExposed variables\n\n\n\n| Variable | Description |\n| -------- | ----------- |\n| columns | The `columns` variable is an array of objects that includes the columns data in the respective objects. Since the columns variable is an array you'll need to specify the index of the object in the array to get the data within that object. Each object within a column has two keys - `id` and `title` and an array `cards` which is again an array of objects. Example: If you want to get the title of second card then you'll use `{{components.kanbanboard1.columns[1].title}}` - here we have specified the array index as `[1]` and then key which is the `title`. Similarly you can get the card details using `{{components.kanbanboard1.columns[0].cards[1].title}}` |\n| lastAddedCard | The variable `lastAddedCard` holds the properties of the card that has been added lastly. It holds the following data - `id`, `title`, and `columnId` of the last added card. You can get the values using `{{components.kanbanboard1.lastAddedCard.title}}` |\n| lastRemovedCard | The variable `lastRemovedCard` holds the properties of the card that has been recently deleted from the kanban. It holds the following data - `id`, `title`, and `columnId` of the recently deleted card. You can get the values using `{{components.kanbanboard1.lastRemovedCard.title}}` |\n| lastCardMovement | The variable `lastCardMovement` holds the properties of the card that has been recently moved from its original position. It holds the following data - `originColumnId`, `destinationColumnId`, `originCardIndex`, `destinationCardIndex` and an object `cardDetails` which includes `title`. You can get the values using `{{components.kanbanboard1.lastCardMovement.cardDetails.title}}` or `{{components.kanbanboard1.lastCardMovement.destinationCardIndex}}` |\n| lastUpdatedCard | The variable `lastUpdatedCard` holds `id`, `title`, and `columnId` of the latest modified card. You can get the values using `{{components.kanbanboard1.lastUpdatedCard.columnId}}` |",
    "tag": "tooljet"
  },
  {
    "title": "Timeline",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/timeline.md",
    "content": "\nid: timeline\ntitle: Timeline\n\nTimeline\nTimeline widget can be used to do a visual representation of a sequence of events\n\n\n\nProperties\nTimeline data\nData requirements: The data needs to be an array of objects and each object should have `title`, `subTitle`, `iconBackgroundColor` and `date` keys.\nExample:\n`json\n[ \n    { \"title\": \"Product Launched\", \"subTitle\": \"First version of our product released to public\", \"date\": \"20/10/2021\", \"iconBackgroundColor\": \"#4d72fa\"},\n    { \"title\": \"First Signup\", \"subTitle\": \"Congratulations! We got our first signup\", \"date\": \"22/10/2021\", \"iconBackgroundColor\": \"#4d72fa\"}, \n    { \"title\": \"First Payment\", \"subTitle\": \"Hurray! We got our first payment\", \"date\": \"01/11/2021\", \"iconBackgroundColor\": \"#4d72fa\"} \n]`\nHide date\nHide date can be used to hide the date time or Left Hand Side of the timeline widget\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n| Layout| description| Expected value|\n| ----- | ---------  | ------------- |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display mobile view.  | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n| Style      | Description |\n| ----------- | ----------- | \n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Tabs",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/tabs.md",
    "content": "\nid: tabs\ntitle: Tabs\n\nTabs\nA Tabs widget contains a number of defined containers that can be navigated through the tabs. Each tab acts as a container that can have different widgets placed inside it.\n\n\n\nHow To Use Tabs Widget\n\nProperties\nTabs\nThis property lets you add and remove containers from the tabs widget. Each container in the tab has its unique `id` , `title` and `disabled` for disabling individual tabs . This field expects an array of objects.\n`js\n{{[\n    { title: 'Home', id: '0' },\n    { title: 'Profile', id: '1',disabled:'true' },\n    { title: 'Settings', id: '2' }\n]}}`\nAdding background color to Tabs\nYou can specify the different color for each tab using the `backgroundColor` property and use hex color code or color name as the value.\n`js\n{{[ \n        { title: 'Home', id: '0', backgroundColor: '#81D4FA' }, \n        { title: 'Profile', id: '1', backgroundColor: 'blue' }, \n        { title: 'Settings', id: '2', backgroundColor: '#ecf0f1'} \n ]}}`\n\n\n\nDefault tab\nThis property selects the container in the tab which matches the corresponding `id`. By default, the value is set to `0`.\nHide tab\nIt allows you to hide all the tab titles defined in the Tabs property above. It accepts boolean values which can also be set using the toggle option or programmatically by clicking on the FX button.\nRender only active tab\nThis property is enabled by default. When enabled, only the active tab will be rendered and when disabled, all the tabs in the component will be rendered.\nEvents\n\n\n\nOn tab switch\nThis event is triggered when the tab is switched.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |\n| setTab | Set current tab. | `id` |\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nHighlight Color\nYou can change the highlight color of the selected tab by entering the Hex color code or choosing a color of your choice from the color picker.\nTab width\nTab width can be set as auto or equally split.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Password Input",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/password-input.md",
    "content": "\nid: password-input\ntitle: Password Input\n\nPassword Input\nA Password Input widget provides a way for the users to securely enter a password. The Password Input is a one-line plain text editor in which the text is obscured so that it cannot be read, by replacing each character with an asterisk (\"*\") symbol.\nHow To Use Password Input Widget\n\nProperties\nPlaceholder\nIt specifies a hint that describes the expected value. \nValidation\nRegex\nUse this field to enter a Regular Expression that will validate the password constraints.\nMin length\nEnter the number for a minimum length of password allowed.\nMax length\nEnter the number for the maximum length of password allowed.\nCustom validation\nIf the condition is true, the validation passes, otherwise return a string that should be displayed as the error message. For example: `{{components.passwordInput1.value === 'something' ? true: 'value should be something'}}`\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nBorder radius\nAdd a border radius to the number input widget using this property. It accepts any numerical value from `0` to `100`.\nBorder color\nAdd color to the border of the number input component using this property. Enter the hex color code or choose a color from the color picker.\nBackground color\nYou can change the background color of the widget by entering the Hex color code or choosing a color of your choice from the color picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Steps",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/steps.md",
    "content": "\nid: steps\ntitle: Steps\n\nSteps\nSteps are used to guide users through complex processes, making them easier and more intuitive.\n\n\n\nProperties\n\n\n\nSteps\nThis property lets you add and the steps. Every object represents a step.\n`json\n{{\n    [\n        { name: 'step 1', tooltip: 'some tooltip', id: 1},\n        { name: 'step 2', tooltip: 'some tooltip', id: 2},\n        { name: 'step 3', tooltip: 'some tooltip', id: 3},\n        { name: 'step 4', tooltip: 'some tooltip', id: 4},\n        { name: 'step 5', tooltip: 'some tooltip', id: 5}\n    ]\n}}`\nCurrent step\nThis property lets you select the current step you want to be highlighted.\nSteps selectable\nThis property when disabled will disable selection of steps.\nEvents\nOn select\nThis event is fired whenever the user selects any step.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nTheme\nYou can change the theme of widget by selecting available themes from dropdown.\nColour\nYou can change the  color of the widget by entering the Hex color code or choosing a color of your choice from the color picker.\nText Colour\nYou can change the  text color of the widget by entering the Hex color code or choosing a color of your choice from the color picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Tags",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/tags.md",
    "content": "\nid: tags\ntitle: Tags\n\nTags\nTags widget can be used to show array of data as tags.\n\n\n\nProperties\nTags\nIt can be used to set array of tags. It must be an array of objects like this:\n`js\n{{ \n    [ \n        { title: 'success', color: '#2fb344', textColor: '#fff' }, \n        { title: 'info', color: '#206bc4', textColor: '#fff'  }, \n        { title: 'warning', color: '#f59f00', textColor: '#fff'  }, \n        { title: 'danger', color: '#d63939', textColor: '#fff' } \n    ] \n}}`\nEach object should contain a title, color code of a particular tag, and also a text color.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility",
    "tag": "tooljet"
  },
  {
    "title": "Properties",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/icon.md",
    "content": "\nid: icon\ntitle: Icon \n\nAn Icon widget can be used to add icons(sourced from icon library). It supports events like on hover and on click.\n\n\n\nProperties\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| Icon | Use this to choose an icon form the list of available icons | You can also use the search bar in it to look for the icons | \nEvents\n\n\n\nTo add an event, click on the icon widget's configuration handle to open the widget properties on the components drawer on the right. Go to the Events section and click on + Add handler.\nThe Icon widget supports the following events:\n| Event  | Description |\n| ----------- | ----------- |\n| On hover      | This event is triggered when the cursor is hovered over the icon|\n| On click      | This event is triggered when the icon is clicked |\nJust like any other event on ToolJet, you can set multiple handlers for any of the above-mentioned events.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip: Set a tooltip text to specify the information when the user moves the mouse pointer over the widget.\nLayout\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to show/hide the widget on desktop screens. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to show/hide the widget on mobile screens. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`   |\nStyles\n| Style      | Description | Expected value |\n| ----------- | ----------- | ------------- |\n| Icon color |  You can change the color of the icon widget by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Visibility | This is to control the visibility of the widget. | If `{{false}}` the widget will not visible after the app is deployed. | It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`. |\n| Box shadow | This property adds a shadow to the widget. | You can use different values for box shadow property like offsets, blur, spread, and the color code. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Link",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/link.md",
    "content": "\nid: link\ntitle: Link\n\nLink\nLink widget allows you to add a hyperlink and navigate to the external URL.\n\n\n\nProperties\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| Link Target | This property sets the URL where the user needs to be taken on clicking the link | example: `https://dev.to/tooljet` or `{{queries.xyz.data.url}}` | \n| Link Text | This property sets the text for the link widget  | example: `Click here` or `Open webpage` | \n| Target Type | This property specifies the link to be opened in the same tab or new tab on clickinh the link | Options: `New Tab` & `Same Tab` |\nEvents\nTo add an event to a link, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\nOn Click\nOn Click event is triggered when the link is clicked. Just like any other event on ToolJet, you can set multiple handlers for on click event.\nOn hover\nOn Hover event is triggered when the link is hovered. Just like any other event on ToolJet, you can set multiple handlers for on click event.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\nLayout\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to show/hide the widget on desktop view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to show/hide the widget on mobile view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`   |\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- | \n| Text Color |  You can change the background color of the text by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Text Size | By default, the text size is set to 14. You can enter any value from 1-100 to set custom text size. |\n| Underline | You can change the underline of the text in the following ways: on-hover (default), never, always |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Radio Button",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/radio-button.md",
    "content": "\nid: radio-button\ntitle: Radio Button\n\nRadio Button\nRadio button widget can be used to select one option from a group of options.\nHow To Use Radio button Widget\n\n:::tip\nRadio buttons are preferred when the list of options is less than six, and all the options can be displayed at once.\n:::\n:::info\nFor more than six options, consider using Dropdown widget.\n:::\nEvent\nOn select\nThis event is triggered when an option is clicked.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\nLabel\nThe text is to be used as the label for the radio button. This field expects a `String` value.\nDefault value\nThe value of the default option.\nOption values\nList of values for different items/options. Refer your query data with dynamic variables `{{queries.datasource.data.map(item => item.value)}}` or populate it with sample values `{{[true, false]}}`\nOption labels\nList of labels for different items/options. Refer your query data with dynamic variables `{{queries.datasource.data.map(item => item.label)}}` or populate it with sample values `{{[\"yes\", \"no\"]}}`\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nText color\nChange the color of the text in the widget by providing the `Hex color code` or by choosing the color of your choice from the color picker.\nActive color\nChange the color of active radio button by providing the `Hex color code` or by choosing the color of your choice from the color picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nExample\n\n\n\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |",
    "tag": "tooljet"
  },
  {
    "title": "Textarea",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/textarea.md",
    "content": "\nid: textarea\ntitle: Textarea\n\nTextarea\nTextarea widgets let users enter and edit just text like Text Input widget.\n:::tip\nTextarea should be preferred over Text Input when user input is more than one sentence.\n:::\nHow To Use Textarea Widget\n\nProperties\nDefault value\nThis property is used for setting the initial value in the textarea on the initial load. This field expects a `String` value.\nPlaceholder\nIt specifies a hint that describes the expected value. This field expects a `String` value.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nBorder Radius\nUse this property to modify the border radius of the text area widget. The field expects only numerical value from `1` to `100`, default is `0`. \nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |\n| setText | Set the text. | `text` |\n| clear | Clear the text. |  |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Chart",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/chart.md",
    "content": "\nid: chart\ntitle: Chart\n\nChart\nChart widget takes the chart type, data and styles to draw charts using Plotly.js.\nHow To Use Chart Widget\n\nChart types\nLine charts\nData requirements: The data needs to be an array of objects and each object should have `x` and `y` keys.\nExample:\n`json\n[\n  { \"x\": \"Jan\", \"y\": 100},\n  { \"x\": \"Feb\", \"y\": 80},\n  { \"x\": \"Mar\", \"y\": 40},\n  { \"x\": \"Apr\", \"y\": 100},\n  { \"x\": \"May\", \"y\": 80},\n  { \"x\": \"Jun\", \"y\": 40}\n]`\nThe chart will look like this:\n\n\n\nBar charts\nData requirements: The data needs to be an array of objects and each object should have `x` and `y` keys.\nExample:\n`json\n[\n  { \"x\": \"Jan\", \"y\": 100},\n  { \"x\": \"Feb\", \"y\": 80},\n  { \"x\": \"Mar\", \"y\": 40},\n  { \"x\": \"Apr\", \"y\": 100},\n  { \"x\": \"May\", \"y\": 80},\n  { \"x\": \"Jun\", \"y\": 40},\n  { \"x\": \"Jul\", \"y\": 100},\n  { \"x\": \"Aug\", \"y\": 80},\n  { \"x\": \"Sep\", \"y\": 40}\n]`\nThe chart will look like this:\n\n\n\nPie charts\nData requirements: The data needs to be an array of objects and each object should have `label` and `value` keys.\nExample:\n`json\n[\n  { \"x\": \"Jan\", \"y\": 100},\n  { \"x\": \"Feb\", \"y\": 80},\n  { \"x\": \"Mar\", \"y\": 40},\n  { \"x\": \"Apr\", \"y\": 100},\n  { \"x\": \"May\", \"y\": 80},\n  { \"x\": \"Jun\", \"y\": 40}\n]`\nThe chart will look like this:\n\n\n\nProperties\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nTitle\nThis field is used to add a title to your selected chart.\nPlotly JSON chart schema\nIn the chart widget, you can also plot a chart with JSON data. So the JSON will contain the information about the chart type, chart data, etc. You can learn more about the JSON properties from here. \nAnyway, to work with the JSON you need to enable the `Use Plotly JSON schema` toggle from the properties section.\n\n\n\nIt will show the JSON description field to put the JSON data.\nThe result will be like this:\n\n\n\nMarker color\nModify the color of marker using the color picker or by providing a `HEX color code`.\nOptions\nLoading state\nToggle `on` the switch to display a loader on the widget. You can also programmatically define it's value by clicking on `Fx`, acceptable values are - `{{true}}` and `{{false}}`.\nShow Axes\nEnable or disable the `x` and `y` axes on the chart through this property. You can also programmatically define it's value by clicking on `Fx`, acceptable values are - `{{true}}` and `{{false}}`.\nShow grid lines\nToggle `on` or `off` to show or hide the grid lines on the chart. You can also programmatically define it's value by clicking on `Fx`, acceptable values are - `{{true}}` and `{{false}}`.\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nPadding\nDefine a space between the widget element and the widget border using `Padding` property. Use any numerical value between `1` to `100`.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable",
    "tag": "tooljet"
  },
  {
    "title": "PDF",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/pdf.md",
    "content": "\nid: pdf\ntitle: PDF\n\nPDF\nPDF widget can be used to embed the PDF file either by URL or as a Base64 encoded.\nProperties\nFile URL\nThe URL of the PDF file on the web. `data:application/pdf;base64,` format is supported and the input needs to be prefixed with `data:application/pdf;base64,`\nScale page to width\nIt can be toggled to adjust the PDF content to fit the width or height of the component\nShow page controls\nBy default, page number, previous & next button is displayed while hovering the PDF file. It can be toggled on or off.\nShow the download\nThe `Download` button on the PDF component allows you to download the pdf file. By default, Show the download button is enabled. Toggle it off to remove the `Download` button from PDF component, you can also click on the `Fx` button to set the values `{{true}}` or `{{false}}` dynamically.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n| Layout          | description                               | Expected value                                                                                                |\n| --------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display mobile view.  | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n| Style      | Description                                                                                                                                                                                                                                              |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Number Input",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/number-input.md",
    "content": "\nid: number-input\ntitle: Number Input\n\nNumber Input\nNumber Input widget lets users enter and change numbers.\nHow To Use Number Input Widget\n\n:::tip\nNumbers can be changed by using the arrow keys.\n:::\nProperties\nDefault value\nA predefined value that can be fetched from the number input widget if no changes are made in widget.\nMinimum value\nIt specifies the minimum value the number input can go to. This field accepts any numerical value.\nMaximum value\nIt specifies the maximum value the number input can go to. This field accepts any numerical value.\nPlaceholder\nIt specifies a hint that describes the expected value. This field accepts any numerical value.\nEvents\n\n\n\nOn change\nThis event fires whenever the value of the number input widget is changed.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget. Under the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nBorder radius\nAdd a border radius to the number input widget using this property. It accepts any numerical value from `0` to `100`.\nBorder color\nChange the border color number-input component by entering the Hex color code or choosing a color of your choice from the color picker.\nBackground color\nChange the background color of the number-input component by entering the Hex color code or choosing a color of your choice from the color picker.\nText color\nChange the color of the number in number-input component by entering the Hex color code or choosing a color of your choice from the color picker. \n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Iframe",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/iframe.md",
    "content": "\nid: iframe\ntitle: Iframe\n\nIframe\nIframe widget is used to embed another HTML page into the current one and display iframes in your app.\n\n\n\nProperties\nURL\nSet the URL of the page to embed.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the  mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Custom Component",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/custom-component.md",
    "content": "\nid: custom-component\ntitle: Custom Component\n\nCustom Component\nCustom Component can be used to do create your own React component when the needed functionality isn't available in other components.\n\n\n\nProperties\nData\nThe data needs to be an objects which needs to be passed as `data` props to the custom component\nExample:\n`json\n{{{\n    title: \"Hi! There\",\n    buttonText: \"Updated Text\",\n    queryName: \"runjs1\"\n}}}`\nCode\nThis field is used to add a React code for your custom component. The packages for the custom component can be imported from Skypack. For example, to import `React` package into the custom component it can be imported as `import React from 'https://cdn.skypack.dev/react'`.\nTooljet provides 3 props to interact with the app: `data`, `updateData` and `runQuery`.\n\n`data` is a shared object between custom component and Tooljet app.\n`updateData` is a function which accepts a single object used to update the data passed to the custom component.\n`runQuery` is a function which accepts a query name as a string used to run the query from the custom component.\n\nExample:\n```js\nimport React from \"https://cdn.skypack.dev/react\";\nimport ReactDOM from \"https://cdn.skypack.dev/react-dom\";\nimport { Button, Container, Link } from \"https://cdn.skypack.dev/@material-ui/core\";\nconst MyCustomComponent = ({data, updateData, runQuery}) => (\n    \n{data.title}\n {updateData({title: 'Hello World!!'})}}>\n            {data.buttonText}\n        \n {runQuery(data.queryName)}}\n        >\n            Run Query\n        \n\n);\nconst ConnectedComponent = Tooljet.connectComponent(MyCustomComponent);\nReactDOM.render(, document.body);\n```\n:::info\n`Tooljet.connectComponent` acts as a HOC and it is required to get access to the data passed into the custom component and run the query\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n| Layout          | description                               | Expected value                                                                                                |\n| --------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display mobile view.  | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n| Style      | Description                                                                                                                                                                                                                                              |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "QR Scanner",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/qr-scanner.md",
    "content": "\nid: qr-scanner\ntitle: QR Scanner\n\nQR Scanner\nScan QR codes using device camera and hold the data they carry.\n\n\n\n:::note Known Issue\nYou might have to stick to the Safari browser in IOS as camera access is restricted for third-party browsers.\n:::\nExposed variables\nlastDetectedValue\nThis variable holds the data contained in the last QR code scanned by the widget. To fetch the data use `{{components.qrscanner1.lastDetectedValue}}`.\nEvents\nonDetect\nThis event is fired whenever the widget successfully scans a QR code.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\n:::caution Debugging tip\nBrowser camera APIs restrict this widget to only work in either `localhost` or `https`.\nSo if you're testing it out, be sure to either use `localhost` or `https`.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the \nmouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. \nNow hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable",
    "tag": "tooljet"
  },
  {
    "title": "List view",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/listview.md",
    "content": "\nid: listview\ntitle: List view\n\nList view\nList view widget allows to create a list of repeatable rows of data. Just like a container widget, you can nest other widgets inside of it and control how many times they repeat.\n\n\n\nHow To Use List view Widget\n\nEvents\nRow clicked\n\n\n\nTo add an event to a button, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\nRow clicked event is triggered when the button is clicked. Just like any other event on ToolJet, you can set multiple actions for a row clicked event.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\n\n\n\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| List data | Enter the data that you want to display into the widget. Data in the form of an array of objects or data from a query that returns an array of objects.| `{{ [ {id: 0, name: ABC, email: abc@bla.com}, {id: 1, name: XYZ, email: xyz@bla.com} ] }}` or `{{queries.xyz.data}}` |\n| Row height | Enter a numerical value to set the row height accordingly. | Any number between `1` to `100` |\n| Show bottom border | This property allows you to show or hide the row bottom border. | By default its `{{true}}`, set `{{false}}` to hide the border  |\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to display the desktop view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to display the mobile view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`   |\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- |\n| Background Color |  You can change the background color of the widget by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Border Color |  You can change the border color of the listview by entering the `Hex color code` or choosing a color of your choice from the color picker. |\n| Visibility | This is to control the visibility of the widget. If `{{false}}` the widget will not be visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`. |\n| Disable |  This property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Border radius | Use this property to modify the border radius of the list view. The field expects only numerical value from `1` to `100`, default is `0`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.\n:::\nExample: Displaying data in the list view\n\nLet's start by creating a new app and then dragging the List view widget onto the canvas.\n\n\n\n\n\nNow lets create a query and select the REST API from the datasource dropdown. Choose the `GET` method and enter the API endpoint - `https://reqres.in/api/users?page=1`. Save this query and fire it. Inspect the query results from the left sidebar, you'll see that it resulted in the `data` object having an array of objects.\n\n\n\n\n\nNow lets edit the `List data` property of the list view widget for displaying the query data. We will use JS to get the data from the query - `{{queries.restapi1.data.data}}`. Here the last `data` is a data object that includes an array of objects, the first `data` is the data resulted from the `restapi1` query. This will automatically create the rows in the widget using the data.\n\n\n\n\n\nFinally, we will need to nest widgets into the first row of list view widget and the widget will automatically create the subsequent instances. The subsequent rows will appear the same way you'll display the data in the first row.\n\n\n\n\n:::tip\nUse `{{listItem.key}}` to display data on the nested widgets. Example: For displaying the images we used `{{listItem.avatar}}` where avatar is one of the key in the objects from the query result.",
    "tag": "tooljet"
  },
  {
    "title": "Timer",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/timer.md",
    "content": "\nid: timer\ntitle: Timer\n\nTimer\nTimer widget lets users to count timer both upward and downward\n\n\n\nProperties\nDefault value\nIt specifies the initial value of timer. Format is: `HH.mm.ss.SS`.\nTimer type\nIt specifies If its a upward or downward counter. Select `Count Up` or `Count Down` from the dropdown or you can click on `Fx` to programmatically define the values `countUp` or `countDown`.\nEvents\nOn start\nThis event is fired when user clicks on start button.\nOn resume\nThis event is fired when user clicks on resume button.\nOn pause\nThis event is fired when user clicks on pause button.\nOn count down finish\nThis event is fired when the count down timer reaches zero.\nOn reset\nThis event is fired when user clicks on reset button.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility\nThis is to control the visibility of the widget. If `{{false}}` the widget will not visible after the app is deployed. It can only have boolean values i.e. either `{{true}}` or `{{false}}`. By default, it's set to `{{true}}`.\nDisable\nThis property only accepts boolean values. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Tree Select",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/tree-select.md",
    "content": "\nid: tree-select\ntitle: Tree Select\n\nTree Select\nTree Select widget is a group checkboxes in a TreeView which can be expanded or collapsed.\n\n\n\nProperties\nTitle\nThe text is to be used as the title for the tree select. This field expects a `String` input.\nStructure\nData requirements: The structure needs to be an array of objects and each object should have `label` and `value` keys. If you wish to have `children` under any of the checkbox, then `children` array needs to be passed with `label` and `value` keys.\nExample:\n`json\n[\n  {\n    \"label\": \"Asia\",\n    \"value\": \"asia\",\n    \"children\": [\n      {\n        \"label\": \"China\",\n        \"value\": \"china\",\n        \"children\": [\n          { \"label\": \"Beijing\", \"value\": \"beijing\" },\n          { \"label\": \"Shanghai\", \"value\": \"shanghai\" }\n        ]\n      },\n      { \"label\": \"Japan\", \"value\": \"japan\" },\n      {\n        \"label\": \"India\",\n        \"value\": \"india\",\n        \"children\": [\n          { \"label\": \"Delhi\", \"value\": \"delhi\" },\n          { \"label\": \"Mumbai\", \"value\": \"mumbai\" },\n          { \"label\": \"Bengaluru\", \"value\": \"bengaluru\" }\n        ]\n      }\n    ]\n  },\n  {\n    \"label\": \"Europe\",\n    \"value\": \"europe\",\n    \"children\": [\n      { \"label\": \"France\", \"value\": \"france\" },\n      { \"label\": \"Spain\", \"value\": \"spain\" },\n      { \"label\": \"England\", \"value\": \"england\" }\n    ]\n  },\n  { \"label\": \"Africa\", \"value\": \"africa\" }\n]`\n:::info\nNote: The `value` should be unique throughout the structure array.\n:::\nChecked Values\nChecked values is an array of values passed to select the checkboxes by default.\nExample:\n`json\n[\"asia\", \"spain\"]`\nExpanded Values\nSimilar to checked values, expanded values is an array of values passed to expand the node by default.\nExample:\n`json\n[\"asia\"]`\nEvents\n\n\n\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nOn change\nOn check event is triggered whenever the checkbox value is changed (checked or unchecked).\nOn check\nOn check event is triggered whenever the checkbox value is checked.\nOn uncheck\nOn uncheck event is triggered whenever the checkbox value is unchecked.\nLayout\n\n\n\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\n\n\n\nText color\nChange the color of the Label by entering the `Hex color code` or choosing a color of your choice from the color-picker.\nCheckbox color\nYou can change the color of the checkbox by entering the `Hex color code` or choosing a color of your choice from the color-picker.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Button group",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/button-group.md",
    "content": "\nid: button-group\ntitle: Button Group\n\nButton group\nButton group widget can be used to take actions.\n\n\n\nProperties\nEvents\nTo add an event to a button group, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on Add handler.\n\n\n\nOn click\nOn click event is triggered when the button group is clicked. Just like any other event on ToolJet, you can set multiple handlers for on click event.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\n\n\n\n| Properties  | description | Expected value |\n| ----------- | ----------- | -------------- |\n| label | label is used to set the heading of the button group. | Any String value |\n| values |Values for button group items. | Array of strings  |\n| labels | It can be used to set the labels of the button group items. |  Array of strings|\n| Default  selected | Initial selected values can be set using this. | Array of strings  |\n| Enable multiple selection | Toggle this to allow multiple button selection. | Toggle to true/false |\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| Layout  | description | Expected value |\n| ----------- | ----------- | ------------ |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile | Toggle on or off to display mobile view. | You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n\n\n\n| Style      | Description |\n| ----------- | ----------- | \n| Background color |  You can change the background color of the widget by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Text color |  You can change the color of the Text in button by entering the Hex color code or choosing a color of your choice from the color picker. |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n| Disable | Toggle on to lock the widget. You can programmatically change its value by clicking on the `Fx` button next to it, if set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`. |\n| Border radius | Use this property to modify the border radius of the button. |\n| Selected text color | Use this property to modify the background colour of text in selected button |\n| Selected background color | Use this property to modify the background colour of selected button |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "HTML",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/html.md",
    "content": "\nid: html\ntitle: HTML \n\nHTML\nHTML widget can be used to create your own HTML-CSS layout.\n\n\n\nProperties\nRaw HTML\nThe Raw HTML needs to be an HTML. In order to provide styles, one can add inline css to the respective HTML tags\nExample:\n```json\n\n\n\n\n\n          You can build your custom HTML-CSS template here\n        \n\n\n\n```\n\n\n\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n| Layout          | description                               | Expected value                                                                                                |\n| --------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| Show on desktop | Toggle on or off to display desktop view. | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\n| Show on mobile  | Toggle on or off to display mobile view.  | You can programmatically determining the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}` |\nStyles\n| Style      | Description                                                                                                                                                                                                                                              |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Visibility | Toggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not visible after the app is deployed. By default, it's set to `{{true}}`. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Multiselect",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/multiselect.md",
    "content": "\nid: multiselect\ntitle: Multiselect\n\nMultiselect\nMultiselect widget can be used to collect multiple user inputs from a list of options.\n\n\n\nEvents\nOn select\nOn select event is triggered when an option is selected.\n:::info\nCheck Action Reference docs to get the detailed information about all the Actions.\n:::\nProperties\nLabel\nThe text is to be used as the label for the multiselect widget.\nDefault value\nThe value of the default option. This should always be an array.\nOption values\nValues for different items/options in the list of the multiselect.\nOption labels\nLabels for different items/options in the list of the multiselect.\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nBorder radius\nAdd a border radius to the multiselect using this property. It accepts any numerical value from `0` to `100`.\nVisibility\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the `Fx` button next to it. If `{{false}}` the widget will not be visible after the app is deployed. By default, it's set to `{{true}}`.\nDisable\nThis is `off` by default, toggle `on` the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the `Fx` button next to it. If set to `{{true}}`, the widget will be locked and becomes non-functional. By default, its value is set to `{{false}}`.\nActions\n| Action      | Description | Properties |\n| ----------- | ----------- | ------------------ |\n| `selectOption` | Select options. | pass options as parameter. ex: `components.multiselect1.selectOption(1)` |\n| `deselectOption` | Deselect options.| pass options as parameter. ex: `components.multiselect1.deselectOption(1)` |\n| `clearSelections` | Clear all selection. |  ex: `components.multiselect1.clearSelections()` |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "Divider",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/divider.md",
    "content": "\nid: divider\ntitle: Divider\n\nDivider\nDivider widget is used to add separator between components. \n\n\n\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\n\n\n\n| properties      | description |\n| ----------- | ----------- |\n| Show on Desktop |  This property have toggle switch. If enabled, the divider will display in the desktop view else it will not appear. |\n| Show on Mobile |  This property have toggle switch. If enabled, the divider will display in the mobile view else it will not appear. |\nStyles\n\n\n\n| properties      | description |\n| ----------- | ----------- |\n| Divider Color |  It is used to set the color of the divider. Use hex code to set the background color. |\n| Visibility |  This property is used to set the visibility of the divider. The property accepts Boolean value. |\n:::info\nAny property having `Fx` button next to its field can be programmatically configured.",
    "tag": "tooljet"
  },
  {
    "title": "SVG Image",
    "source": "https://github.com/ToolJet/ToolJet/tree/develop/docs/versioned_docs/version-1.x.x/widgets/svg-image.md",
    "content": "\nid: svg-image\ntitle: Svg Image\n\nSVG Image\nIt is used to render vector images. We can display images, icons, texts using this widget. SVGs are vector images and therefore are usually much smaller in file-size than bitmap-based images.\nDevelopers prefer having SVG (Scalable Vector Graphics) files as they are scalable and will render pixel-perfect at any resolution whereas JPEGs, PNGs and GIFs will not. \n\n\n\nProperties\nSVG Data\nEnter the SVG data of the image to display it on the widget. \n:::tip\nRefer to the resources where SVG files are downloaded for free. You copy-paste the below data in this field to see a new icon being rendered.\n:::\n`<svg fill=\"#000000\" xmlns=\"http://www.w3.org/2000/svg\"  viewBox=\"0 0 16 16\" width=\"32px\" height=\"32px\"><path d=\"M 7.5 1 C 3.910156 1 1 3.90625 1 7.488281 C 1 10.355469 2.863281 12.789063 5.445313 13.648438 C 5.769531 13.707031 6 13.375 6 13.125 C 6 12.972656 6.003906 12.789063 6 12.25 C 4.191406 12.640625 3.625 11.375 3.625 11.375 C 3.328125 10.625 2.96875 10.410156 2.96875 10.410156 C 2.378906 10.007813 3.011719 10.019531 3.011719 10.019531 C 3.664063 10.0625 4 10.625 4 10.625 C 4.5 11.5 5.628906 11.414063 6 11.25 C 6 10.851563 6.042969 10.5625 6.152344 10.378906 C 4.109375 10.019531 2.996094 8.839844 3 7.207031 C 3.003906 6.242188 3.335938 5.492188 3.875 4.9375 C 3.640625 4.640625 3.480469 3.625 3.960938 3 C 5.167969 3 5.886719 3.871094 5.886719 3.871094 C 5.886719 3.871094 6.453125 3.625 7.496094 3.625 C 8.542969 3.625 9.105469 3.859375 9.105469 3.859375 C 9.105469 3.859375 9.828125 3 11.035156 3 C 11.515625 3.625 11.355469 4.640625 11.167969 4.917969 C 11.683594 5.460938 12 6.210938 12 7.207031 C 12 8.839844 10.890625 10.019531 8.851563 10.375 C 8.980469 10.570313 9 10.84375 9 11.25 C 9 12.117188 9 12.910156 9 13.125 C 9 13.375 9.226563 13.710938 9.558594 13.648438 C 12.140625 12.785156 14 10.355469 14 7.488281 C 14 3.90625 11.089844 1 7.5 1 Z\"/></svg>`\nGeneral\nTooltip\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\n\n\nLayout\nShow on desktop\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nShow on mobile\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on `Fx` to set the value `{{true}}` or `{{false}}`.\nStyles\nVisibility",
    "tag": "tooljet"
  }
]