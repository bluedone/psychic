[
  {
    "title": "What is Appsmith",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/intro.md",
    "content": "\nsidebar_position: 1\ntitle: Introduction\nslug: /\n\nWhat is Appsmith\nAppsmith is an open source, low code developer tool that helps the rapid creation of internal applications.\nYou can drag, and drop pre-built widgets to build UI on a grid-style canvas. Appsmith simplifies frontend and back-end integration between the UI and the datasource to optimize building applications. Appsmith supports JavaScript inside widgets, queries, and almost any other component to add logic, transform data, and define complex workflows.\n:::info\nBuild CRUD apps, Dashboards, Admin Panels, Dynamic Forms, and much more 10x faster.\n:::\nWhy Appsmith\n\nConnect Datasource: Integrate with a datasource such as a database or an API. Appsmith has plug-and-play support for many databases and the RESTful API interface to connect with most tools seamlessly.\nBuild UI: Use customizable built-in widgets to build an app layout.\nAccess Data: Connect UI to the datasource by writing queries and binding the data to widgets. Control everything with JavaScript.\nCollaborate, Deploy, Share: Appsmith also supports version control with Git to track changes, create rollbacks and collaborate using git branches. Deploy the app and share it with other users.\n\nYou can build anything from simple CRUD apps to complicated multi-step workflows with these simple steps. Appsmith makes it easy to build a UI that talks to any datasource.\nGot 2 minutes? Here's a video overview of Appsmith:\n\n\n\nGet started\nThere are two ways of using Appsmith:\n\nAppsmith Cloud: Try Appsmith in cloud environment. (For more information, see data security).\nSelf-Host Appsmith: Deploy and manage Appsmith on your local machine or private server instance.\n\nFirst steps\nNew users\nIf you are new to Appsmith, this is the place to start:\n\n\n\n\n\nQuickstart Tutorial\nBuild your first app using Appsmith \n      \n\n\n\n\n\nCore Concepts\nEverything you need to know about Appsmith fundamentals \n      \n\n\n\n\n\nSupport\nReach out for any questions \n      \n\n\nAdvanced users\nFor those with intermediate to advanced skill levels, it's recommended to review the following topics:\n\n\n\n\n\nDeploymentInstall AppsmithConfigureManage\n\n\n\n\n\nWidgetsBuild UIBind DataReference\n\n\n\n\n\nDatasourcesConnect DatasourceAccess DataReference\n\n\n\n\n\n\n\nJavaScriptCreate WorkflowsJS PromisesExternal Libraries\n\n\n\n\n\nFrameworkContext ObjectQuery ObjectActions\n\n\n\n\n\nResourcesTutorialsSample AppsTemplates\n\n\n:::info\nIf you think that more information needs to be included in this documentation, please fill out this short questionnaire! Alternatively, you can also shoot an email to docs@appsmith.com.\n:::\nOther resources\n\nHave a look at the FAQ and Troubleshooting sections, and you might find your questions answered there.\nView Guides and watch tutorials on YouTube.\nReport Bugs with Appsmith through Github issues.\n",
    "tag": "appsmith"
  },
  {
    "title": "Custom Authentication",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/advanced-concepts/how-to-implement-custom-authentication-on-appsmith.md",
    "content": "\nsidebar_position: 1\ndescription: >-\n  In this guide, you'll learn how to implement this custom Auth using JWTs by\n  chaining multiple steps.\n\nCustom Authentication\n\n\n\nA lot of applications use Authentication APIs to secure their information. You can use those API's on Appsmith to build UI or tools using a custom authentication mode. In this guide, you'll learn how to implement this custom Auth using JWTs by chaining multiple steps.\nBuilding UI for Login Form\nThe auth APIs require a login form. Hence let\u2019s build one on Appsmith. Follow the below steps:\n\nFirstly, log in to your Appsmith account; if you\u2019re new, sign-up here (it\u2019s free)!.\nNow create a new application by clicking on the `Create New` button on the dashboard.\nNext, click on the `+` icon next to widgets from the side navigation and drag and drop a form widget onto the canvas.\nNow let\u2019s add two text widgets and input widgets to create our login form. Rename the input widgets to following:\nUsername Input Widget: `userName`\nPassword Input: `password`\n\nThis is a screenshot of how the login form looks like:\n\nLet's use these values in an Auth API; usually, login API requires a username and a password. In this example, we'll be using the same, which will return a JWT token and the user details with his permission roles. Here\u2019s how the output looks like after running the API:\n`javascript\n{\n  \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjIyNzE1MTU0LCJleHAiOjE2MjUzMDcxNTR9.rqkR0bVR5g0k8awGTYDEQ0vr15H7401zxkTxpWp9Mc4\",\n  \"user\": {\n    \"id\": 2,\n    \"username\": \"Vihar\",\n    \"email\": \"vihar@appsmith.com\",\n    \"provider\": \"local\",\n    \"confirmed\": true,\n    \"blocked\": false,\n    \"role\": {\n      \"id\": 1,\n      \"name\": \"Authenticated\",\n      \"description\": \"Default role given to authenticated user.\",\n      \"type\": \"authenticated\"\n    },\n    \"created_at\": \"2021-06-03T03:10:37.945Z\",\n    \"updated_at\": \"2021-06-03T03:10:37.952Z\"\n  }\n}`\nNow, let\u2019s create an API that\u2019ll return the JWT using the login API. Follow the below steps:\n\nClick on the `+` icon next to the APIs in the side navigation.\nThis will create a new API, now add the URL for the Login API\nSet the API name as `login_api.`\n\n\nTo test this out, we\u2019ve created a test Auth API; use the following if you don\u2019t have any Auth APIs.\n\n\nIn this example, let\u2019s use `https://appsmith-tutorial-apis.herokuapp.com/auth/local`, set the request type to `POST`.\nNext, in the body, add the following JSON to send username and password to the API. IN this case, we\u2019re taking the inputs from the form using the mustache syntax.\n\n`{\n  \"identifier\":\"{{userName.text}}\",\n  \"password\":\"{{password.text}}\"\n}`\n\nNext, add a username and password based on the user\u2019s roles in your API. If you\u2019re using the example AUTH Api, use the following credentials.\n\n`Identifier: appsmith_user\nPassword: appsmith_password`\nAwesome, now we\u2019ll need to save the JWT token generated after the API is run. Appsmith has a store where you can save all the variables; for this, we\u2019ll need to use the mustache syntax after the API is successfully run. Below are the steps.\n\nFirstly, open the Submit button property pane and set the `onClick` property to `Call an API` and choose `call_an_api`\nNext, set the `onSuccess` property to `Store a value` and name the key as jwt and value as `{{login_api.data.jwt}}`\n\nThis will save the jwt token from the API response. This is how the screenshot looks like:\n\nNow we\u2019ll be passing this `jwt` variable in the header with an Authorization mode to access the secure APIs. As an example, let\u2019s create a secure page and test it out.\n\nNow, let\u2019s add a new page and access the data from the secure API.\nCreate a new API by clicking on the `+` icon next to the APIs section.\nNow add you\u2019re secure API, or you can use the following example API:\n\n`https://appsmith-tutorial-apis.herokuapp.com/logistics`\n\nThis API requires authorization, lets now add a new header with key and value as:\n\n`Authorization: Bearer {{appsmith.store.jwt}}`\n\nAs we can see, in the place of the token, we\u2019re using the mustache syntax and binding the `jwt` token that\u2019s saved from the login-api.\nNow run the API, you should see the response.\n\nIn this way, you can use a custom login on Appsmith. Additionally, you can customise the redirections based on the authentication mode and your use case.\nCustom Google Authentication\nIt is possible to use third-party OAuth services like Google, Twitter, Github, etc, to authenticate users for your app. In this case, you'll need to connect with a service that integrates with the desired Oauth provider. Here's a quick video showing how to implement a custom Google login with Xano:\n\nYou can also setup custom Google authentication using Supabase:\n",
    "tag": "appsmith"
  },
  {
    "title": "Audit logs",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/advanced-concepts/audit-logs.md",
    "content": "\nsidebar_position: 6\ndescription: Audit logs allow you to keep records of everything that happens on your instance.\n\nAudit logs\nThe audit log is a paper trail of all notable activities on an Appsmith instance. It automatically captures and displays events by recording what activity was performed, who performed it, and when it occurred. With this information, you can ensure that you're able to follow up and address any unexpected or undesirable events.\n:::info\nAudit logs are only available on self-hosted, Business Edition instances of Appsmith.\n:::\n\nYou can find audit logs by navigating to your Admin Settings page, and finding the Audit Logs tab under the Others heading. From here, you can see all the events that have been tracked under your organization's account, along with the user, date, and time that the event was logged. Click the arrow next to any event to expand it and see its complete set of details in JSON form.\nThere are several kinds of events that are logged:\n\n\nApp-specific activity\n\nChanges to pages\nDatasource configuration\nQuery configuration and execution\nDeleting apps\n\n\n\nChanges to Administrator settings\n\nInstance configuration changes\n\n\n\nUser sign-up and login activity\n\n\nFor an exhaustive list of events, see Tracked Events.\nLog contents\nEach logged item has a number of data points that describe that event, including references to related apps, datasources, queries, and workspaces. This data is served in JSON format.\n| Data | Description | Details |\n|------|-------------|---------|\n| event | Each action performed on Appsmith app (edit or view mode) is classified as event |  |\n| timestamp | Displays the date and time of a logged event. |  |\n| user | Displays the user who made performed this event | `id`, `email`, `name` |\n| resource | The type of resource on which this event was performed (Query, Datasource, etc.) | `id`, `type`, `name` |\n| app | Application on which the action is performed. | `id`, `name`, `git` {`branch`, `default`} |\n| workspace | Workspace on which the action is performed. | `id`, `name` |\n| metadata | Platform details, such as the Appsmith version. | `appsmithVersion`, `createdAt` |\nBelow is an example of a log item:\n`JSON\n{\n    \"event\": \"datasource.created\",\n    \"timestamp\": \"2022-06-29T08:36:33.507+00:00\",\n    \"user\": {\n        \"id\": \"62bc0f11545c4c00b19d5c65\",\n        \"email\": \"john@appsmith.com\",\n        \"name\": \"John Doe\"\n    },\n    \"resource\": {\n        \"id\": \"62bc0f11545c4c00b19d5c59\",\n        \"type\": \"Datasource\",\n        \"name\": \"Movies\"\n    },\n    \"app\": {\n        \"id\": \"62bc0f11545c4c00b19d5c68\",\n        \"name\": \"Standup App\",\n        \"git\": {\n            \"branch\": \"feat/new-ui\",\n            \"default\": \"master\"\n        }\n    },\n    \"workspace\": {\n        \"id\": \"62bc0f11545c4c00b19d5c64\",\n        \"name\": \"Appsmith Internal Apps\"\n    },\n    \"metadata\": {\n        \"appsmithVersion\": \"1.7.5\",\n        \"createdAt\": \"2022-06-29T08:36:33.507+00:00\"\n    }\n}`\nFiltering audit logs\nActive workspaces generate thousands of log events. To help you quickly find the log you're looking for, Appsmith offers a number of search filters:\n\n\nUse filters to find specific types of log records \n    \n\n\nUser: Users are identified by their email. To see a certain user's activity, filter the logs by their email.\nEvent: Logs are triggered by specific occurrences called Events, which each have a name. For example, to find all logs related to query execution, filter by the `query.executed` event. For a complete list of events and their names, see Tracked Events.\nResourceId: A resourceID identifies each entity on your Appsmith instance, be it a workspace, app, page, datasource, query, or JSObject.\nDate Range: Show logs from only a certain period of time.\n\nFrom the JSON area of any event (accessed by clicking the log record), you can use the \ud83d\udd0d`event`, \ud83d\udd0d`email`, or \ud83d\udd0d`resource.id` buttons to add that value to the search filters.\nTracked events\nThe following table shows the events that appear in Appsmith's audit logs. In any given log record, you can find the event's name on the record's `event` property.\n| Event Name | Description |\n|------------|-------------|\n| workspace.created | Logged when a new workspace is created. |\n| workspace.updated | Logged when the details of an existing workspace are changed. |\n| workspace.deleted | Logged when a workspace is deleted. |\n| application.created | Logged when a new application is created. |\n| application.updated | Logged when a user edits an existing application. |\n| application.deleted | Logged when an application is deleted. |\n| application.imported | Logged when a new application is created via importing with Git or JSON. |\n| application.exported | Logged when an existing application is exported via Git or JSON. |\n| application.cloned | Logged when a new application is created via cloning. |\n| application.forked | Logged when an existing application is forked. |\n| application.deployed | Logged when a new version of an application is deployed/published. |\n| page.created | Logged when a new page is created. |\n| page.viewed | Logged when a user, including any anonymous public users, views a page. |\n| page.updated | Logged when a user edits a page. |\n| page.deleted | Logged when a page is deleted. |\n| datasource.created | Logged when a new datasource is created. |\n| datasource.updated | Logged when a user edits an existing datasource's configuration. |\n| datasource.deleted | Logged when a datasource is deleted. |\n| query.created | Logged when a new query is created. |\n| query.updated | Logged when a user edits an existing query's configuration. |\n| query.deleted | Logged when a query is deleted. |\n| query.executed | Logged when an existing query runs. This applies both in Edit and View modes. The execution parameters of the query are included in the log up to a limit of 5 MB.  |\n| user.logged_in | Logged when a user signs in. |\n| user.logged_out | Logged when a user signs out. |\n| user.invited | Logged when someone invites another user to the app or workspace. |\n| user.signed_up | Logged when a new user logs in for the first time. |",
    "tag": "appsmith"
  },
  {
    "title": "Share Data Across Pages",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/advanced-concepts/sharing-data-across-pages.md",
    "content": "\nsidebar_position: 2\ndescription: >-\n  The Appsmith platform allows us to share data across pages using URL query\n  params & the browser's local storage.\n\nShare Data Across Pages\nSharing data via query params\nQuery params can be passed by adding the query params object to navigateTo function. To do this click on the JS mode for Action and update it as follows.\n`javascript\n{{navigateTo(\"PageName\", {\"param\": \"value\"})}}`\nThese can be consumed on the destination page with `appsmith.URL.queryParams.param`.\n\nSharing data via local storage\nKey-value pairs can be stored within the local storage with the help of the StoreValue action. To do so pick the StoreValue action and provide the desired key and values. These can be consumed on the destination page with `appsmith.store.key`",
    "tag": "appsmith"
  },
  {
    "title": "Branding",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/advanced-concepts/branding.md",
    "content": "\nsidebar_position: 7\ndescription: Custom branding for Appsmith is a feature that allows users to customize the appearance of their Appsmith workspace and apps with their own logo and color palette.\n\nBranding\nCustom branding for Appsmith is a feature that allows app builders to customize the appearance of their Appsmith workspace and apps with their own logo and color palette. This ensures that the end-users of the app have a more familiar and cohesive experience, with the login screen, invite emails, and error pages matching the branding of your company. \n:::info\nBranding is only available on self-hosted, Business Edition instances of Appsmith.\n:::\nConfigure branding\nIf you are using custom branding with Appsmith, setting it up is simple and straightforward. All you need to do is provide your own logo and branding assets, and Appsmith handles the rest.\n\nTo configure Appsmith to show your brand, follow these steps:\n \n\nFrom your Appsmith dashboard, navigate to the Admin Settings. You must have Administrator privileges to see access this area.\nClick on the Branding tab to open branding settings.\nTo upload your logo, click in the Logo box and browse to select the image file you'd like to upload. Appsmith supports .svg, .png, and .jpg files up to 2 MB in size.\nTo upload a favicon, click in the Favicon box and browse to select the file you'd like to upload. You may provide a file of type .ico, .png, or .jpg which shouldn't be larger than 32x32 pixels.\nTo customize the colors in the Color section, click on the bar for the color you want to change (primary, background, or font) and enter a hex code in the input box. You can also click the color preview circle to open the color-picker window.\n\n:::tip\nUpdating the Colors section makes your brand colors easily accessible while building apps. In the app's theme settings or a widget's style settings, your brand's colors are available as presets when using the color picker.\n:::\n\nOnce you are satisfied with your changes and the previews look acceptable, click the SUBMIT button to save your changes. Your branding is now available throughout Appsmith.\n\n\nWhen you use custom branding with Appsmith, not only are the login screen and email templates customized to match your organization's branding, but other screens in your app or service are also affected.\n",
    "tag": "appsmith"
  },
  {
    "title": "Embed Appsmith",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/advanced-concepts/embed-appsmith-into-existing-application.md",
    "content": "\nsidebar_position: 3\ndescription: Guide on how to embed Appsmith apps into an existing application\n\nEmbed Appsmith\n\nTools and Dashboards are great as an app and on a website, and now, you can have both by embedding apps into your website. In this guide, you'll learn how to embed Appsmith Apps into any website.\nCreating HTML page\nFirstly, lets create an HTML page and call it ``dashboard.html``. Now, add the basic HTML structure to make it an HTML page:\n```markup\n\n\n\n Customer Dashboard \n\n\n\n\n```\nYou'll also have to ensure your app is public to embed into other applications. You can do this by clicking on the Share option on the top toolbar and toggle the viewing option to Public. Here's a video example:\n\nNext, create an `iframe` tag and add the shareable link from share options to the `src` attribute with height and width set to `500` and `100%`, respectively.\nInclude the meta tag in the head to ensure that the embedded application renders responsively on different screen sizes:\n```markup\n\n\n\n\n Customer Support Dashboard \n\n\n\n\n\n```\nOpening the HTML page\n:::info\nIf you are opening the HTML page as a `file`, the browser won't allow you to do that. The HTML file needs to come from a server.\n:::\nAfter creating the HTML page, save it as `dashboard.html` and have an HTTP server serve it. There are several ways to do it as described below:\nServing an HTML file with Node.js\nOnce you have created your HTML file, create a new `app.js````` file. Paste the below-mentioned code and edit your HTML filename.\n```markup\nconst http = require('http');\nconst fs = require('fs');\nhttp.createServer(function(req, res) {\n    res.writeHead(200, { 'content-type': 'text/html' });\n    const html = fs.readFileSync('./dashboard.html');\n    res.end(html);\n}).listen(3000, () => {\n    console.log('running on 3000');\n});\n```\nNow, in the terminal, run `node app.js`\nThis would prompt a `running on 3000` message. Next, go to your browser and open http://localhost:3000/\nThis opens your HTML file.\n\nRunning npx http-server\nHere's another way to open an HTML file.\nNow, if you have Node JS installed, go to the command terminal and run:\n`npx http-server`\nNext, open http://localhost:8080/dashboard.html, and it should open the HTML File.\nModifying layout\nYou can modify the layout of your embedded code directly from within your Appsmith app and control the appearance when displayed on a website or external application. \n\n\nTo change the layout, open the `app settings`.\nClick on `Share & Embed`.\nUpdate the Embed size as desired.\nCopy the updated embed code.\n\nIf you want to get your app to use the whole page in your browser, you can change your height and width parameters, like shown below:\n```markup\n\n\n\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\n    \n\n\n\n\n\n```\nRemove Appsmith top bar\nYou can remove the Appsmith top bar with page tabs by appending `?embed=true` to the share URL. Alternatively, you can get this prepared URL from the `App Settings` on the canvas, as shown below.\n\n\nClick on `App settings` in the Canvas properties.\nClick on `Share & Embed`.\nToggle `Show navigation bar`.\nCopy the updated embed code.\n\n```markup\n\n\n\n\n Customer Support Dashboard \n\n\n\n\n\n```\n\nEmbedding private apps\n:::info\nAppsmith supports embedding private apps only on self-hosted Business Edition instances.\n:::\nYou can embed private Appsmith apps on your website or in an external application and authenticate users seamlessly through SSO. \nPrerequisites\n\nThe Appsmith app and the parent app should be under sub-domains of the same domain. For eg. `appsmith.company.com` and `internal.company.com`.\nYou must configure the same SSO identity provider(IDP) on the Appsmith and the parent applications.\n\nTo configure Appsmith to use SSO, you can append the below parameters (based on your SSO type) to the URL path of the app you're embedding.\n* `ssoTrigger=oidc` for OIDC SSO.\n* `ssoTrigger=saml` for SAML 2.0 based SSO.\n* `ssoTrigger=google` for Google OAuth 2.0 SSO\nGeneral notes\n\nThe feature may not work on `HTTP` URLs. Use `HTTPS` for both the Appsmith instance and the parent application.\nFirefox has additional third-party cookie restrictions that may cause issues with private embeds.\nUsers may see issues when strict third-party cookie sharing restrictions are enabled on the browser. \nSSO in private embeds isn't supported for GitHub OAuth 2.0.\n\nFurther reading",
    "tag": "appsmith"
  },
  {
    "title": "Migrate Applications",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/advanced-concepts/more/backup-restore.md",
    "content": "\nsidebar_position: 2\ndescription: The Migrate Applications feature gives you the flexibility to move your Appsmith applications and data from one instance to another. You may choose to migrate all or specific applications as needed.\n\nMigrate Applications\nOn Appsmith, you can migrate all Appsmith data from one instance to another or just migrate necessary applications.\nSteps to Migrate entire Appsmith Data onto instances:\nBackup the old VM\n\nDump the mongo data from the old VM via the command: `mongodump --uri \"mongodb://<rootUsername>:<rootPassword>@localhost:27017/appsmith\" --out=/tmp/appsmith-mongo-dump`\nCopy the dump file to the new VM\nOpen the file `encryption.env` and note the values in this file. The values here are important for Appsmith to be able to read sensitive information in the new installation.\n\nRestore the backup on the new VM:\n:::caution\nThe restore would end up deleting all the existing data in the mongo database of the newly installed appsmith instance\n:::\n\nInstall Appsmith via the install.sh script.\nRestore the dump on the newly created mongo container via the command: `mongorestore --drop /tmp/appsmith-mongo-dump -d appsmith --uri=mongodb://<rootUsername>:<rootPassword>@localhost/appsmith`\nOpen the file `encryption.env` and change the variables `APPSMITH_ENCRYPTION_PASSWORD` & `APPSMITH_ENCRYPTION_SALT` to the same ones as the old VM. This is important because sensitive data in Mongo is encrypted using these credentials. Without this, you risk corrupting any passwords you've saved.\nRestart the Appsmith system using the command: `sudo docker-compose down && sudo docker-compose up -d`\n\nImport/Export Applications\nYou can import or export the desired application to any workspace, either in the same or a different Appsmith instance.\n:::info\nApplications are forward compatible from Appsmith version 1.6.9.\nApplications built in an older version of an Appsmith instance will work when imported into a newer version of an Appsmith instance.\n:::\n\nExport Application\nYou can sync your application to a Git repository or export your application as a JSON file to your system.\nFollow the steps below to export your application as a JSON file:\n\nGo to your workspace homepage and navigate to the app you want to export.\nClick on the menu button at the bottom of the Application card and select \u201cExport.\u201d\n\n\nImport Application\nYou can choose one of the below ways to import an Appsmith application.-\n\nImport from a Git Repository ;\nFrom an application JSON file.\n\nImport from an application JSON file\nIf you have exported an application as a JSON file, you can import the same application to any workspace or Appsmith instance.\nFollow the steps below to import an exported (JSON file) application -\n\nGo to your workspace homepage and navigate to the menu button of the workspace.\nClick on the menu button (next to +NEW) and select the \u201cImport\u201d option.\nIn the import pop-up window, click on import from file and pick the JSON file from your system\u2019s memory.\nOnce the file is imported, you will see a datasource configuration modal (if the imported app had a datasource connection) where you can configure the datasources used by the imported application.\n\n:::info\nAs a security measure, we do not export any config values used for the connecting datasource during the import operation. So either you have to configure it in the datasource configuration modal, or you can skip this and choose to configure it later\n:::\n\n:::tip\nWhen you import the application into the destination instance/ workspace, it's a new one, meaning source and destination applications are detached, and changes will not be synced.\n:::\nImport from a Git repository",
    "tag": "appsmith"
  },
  {
    "title": "Keyboard Shortcuts",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/advanced-concepts/more/keyboard-shortcuts.md",
    "content": "\nsidebar_position: 3\nKeyboard Shortcuts\nAppsmith is a low-code internal tools platform you use to build your internal apps. When you are busy writing code, it's often helpful to have keyboard shortcuts that will speed up your work and give you the flexibility to find your way quickly with widgets, different modes, and more.\nHere's a guide to the available keyboard shortcuts in Appsmith that you can start using today.\nIn Editor\nYou can view a comprehensive list of available keyboard shortcuts right within the Appsmith Editor. Click the question mark `(?) + Shift` on your keyboard to view the keyboard shortcuts.\nYou'll see a pop-up screen below that provides the list of available shortcuts in Appsmith.\nMac OS\n\nWindows",
    "tag": "appsmith"
  },
  {
    "title": "Connect via localhost",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/advanced-concepts/more/how-to-work-with-local-apis-on-appsmith.md",
    "content": "\nsidebar_position: 1\ndescription: >-\n  This guide helps you to connect your APIs or databases running on localhost\n  with Appsmith using host.docker.internal or ngrok.\n\nConnect via localhost\nConnect to a localhost database/ API\nWith your on-premises Appsmith instance running on the same system, you may use host.docker.internal or ngrok to connect to databases, APIs, and services that are running on localhost or as other docker containers.\nUsing host.docker.internal\nYou can use host.docker.internal to connect with the databases/APIs/other docker containers running on `localhost`. The video below shows how to set things up.\n:::info\nYou can also visit docker docs to read the use cases and workarounds for the host.docker.internal usage.\n:::\n\nFor Linux systems, you would need to provide a run flag `add-host`. \n`--add-host=host.docker.internal:host-gateway`\n:::note\nOnly more recent versions of Docker support host-gateway, which is transformed to the Docker default bridge network IP (or virtual IP of the host).\n:::\nRun the below command to test and ensure the IP address from the hosts\u2019 file is displayed.\n`bash\n run \u2014-rm -\u2014add-host=host.docker.internal:host-gateway`\nFor Docker compose on Linux, you need to manually add it to the `docker-compose.yaml` file. Use `extra hosts` to add the entry as shown below: \n`yaml\n extra_hosts:\n    - \"host.docker.internal:host-gateway\"`\nUsing ngrok\nAppsmith allows you to work with APIs and databases running on `localhost` using the help of `ngrok`. You'll have to set up `ngrok` for the same.\nSetting ngrok\nTo set up 'ngrok\u2019- you would have to signup at ngrok (it\u2019s free!). Follow the instructions to connect your account.\n\nDownload the `ngrok` installation file and unzip it\nAdd the auth-token to the configuration\n\nConnect via ngrok\nWith 'ngrok,\u2019 you would be able to connect to the databases and APIs running on your localhost.\n\nConnecting to a localhost database\nYou've a MongoDB instance running on your localhost. You wish to connect the app you are building on Appsmith Cloud to MongoDB.\nFollow the below steps to connect to the MongoDB instance:\n* Expose your local MongoDB instance using `ngrok` command\n`bash\nngrok <PROTOCOL> <LOCAL_PORT>`\nMongoDB uses a `tcp` protocol for creating connections, and `27017` is the default port. If you are not using a default port, provide it in place of `27017`.\n`bash\nngrok tcp 27017`\n\nUse the host address `0.tcp.in.ngrok.io` and the port number `17392` to add a MongoDB datasource to your app.\n\nCreate query\nYou can create queries to the newly added localhost instance of MongoDB `LocalMongoDBUsingNgrok` datasource.\nBuilding a simple local API\nTo host an API locally, you could use a Python FastAPI server. You could install it using `pip`.\n`bash\n$ python3 -m pip install fastapi uvicorn`\nYou could serve the API request by using the code snippet:\n```python\nfrom fastapi import FastAPI\napp = FastAPI()\nitems = [{   \n       \"name\": \"Counter-Strike\",\n       \"appid\": 10,\n       \"average_playtime\": 17612,\n       \"genres\": \"Action\",\n       \"price\": 7.2\n     },\n     {\n       \"name\": \"Team Fortress Classic\",\n       \"appid\": 20,\n       \"average_playtime\": 277,\n       \"genres\": \"Action\",\n       \"price\": 3.99\n     }]\n@app.get(\"/\")\nasync def root():\n   return items\n```\nIn the code snippet - you have:\n* Imported a FastAPI library and initiated an app using the `FastAPI` class\n* Defined a collection of steam game objects\n* Declared a route \u201c/\u201d at which the items (game objects) could be accessed \nYou could run the server with the following command:\n`bash\n$ uvicorn main:app --reload`\n\nThe command uvicorn main:app refers to:\n\n`main`: the file main.py (the Python \"module\").\n`app`: the object created inside main.py with the line app = FastAPI().\n`--reload`: to restart the server after code changes. Only used for a development environment.\n\n\nYou would see a screen below when the app is up and API is ready to use.\n\nAwesome, you could see your API in action.\nFire up `ngrok` and expose the local port[8000] to access the local API in your app available on Appsmith Cloud.\n`bash\nngrok <PROTOCOL> <LOCAL_PORT>`\nTo access the API, you would have to use the `HTTP` protocol and port `8000`.\n`bash\nngrok http 8000`\n`ngrok` creates an HTTP tunnel, forwards the externally accessible address to the local address, and enables access to the local API over the internet.\n\nConnect to local API\nYou can create an API and add the localhost API with the address `https://a8cc-2405-201-21-4011-5564-59ac-2209-1c4c.in.ngrok.io`.\n\nNext Steps",
    "tag": "appsmith"
  },
  {
    "title": "Access Control",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/advanced-concepts/access-control",
    "content": "\nsidebar_position: 4\ndescription: >-\n  Allow external users to access applications built using Appsmith by inviting\n  them to the workspace.\n\nAccess Control\nInvite users to your workspace by clicking on the share button on the application home page or from inside the application\n\nInvite the user's email you wish to share the application with and select an appropriate role for them.\n\nRoles\nAppsmith implements RBAC by assigning a set of permissions to different user roles. These permissions determine the actions users can take on the platform. Below is the permission mapping for each role\n\nAdministrator:\nCreate/Edit App\nView App\nMake App Public\nInvite Users\nManage Users\nDeveloper\nCreate/Edit App\nView App\nInvite Users\nApp Viewer\nView App\nInvite Users as App Viewers only\n\nPermissions\n\nCreate/Edit App: This permission allows users to create and edit applications within a workspace.\nView App: This permission allows users to view & use applications internal to the workspace\nMake App Public: This permission allows users to mark applications as accessible outside the workspace.\nInvite Users: This permission allows users to invite others with a role equal to or lower than theirs.\nManage Users. This permission allows users to delete users from a workspace.\n\nPublic Apps\nApplications can be made public and shared with external users not part of your workspace as well. These applications will not require users to authenticate to use them. An app can be made public by clicking the share button from within the application and turning the public application switch on. To share the application, copy the link shown in the modal and share it with your users!\n:::tip\nOnly Administrators can make applications public.",
    "tag": "appsmith"
  },
  {
    "title": "Granular Access Control",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/advanced-concepts/access-control/granular-access-control",
    "content": "Granular Access Control\nGranular Access Control (GAC) enables you to specify which users or groups have access to different system components and what actions they can perform within that access. In Appsmith, you can use roles to define access to different parts of your Appsmith instance, such as Workspaces, Apps, Pages, and Datasources, and then assign these roles to individual users or groups of users.\n:::info\nGranular Access Control (GAC) is available only in the business edition for self-hosted instances.\n:::\nFollowing are the components of an Appsmith instance that help you implement GAC.\nUsers\nA user refers to an individual who has been granted access to the Appsmith platform and has a unique login associated with their account. Users can be assigned roles and determine what actions they're authorized to perform within the Appsmith platform. For example, a user with the \"Admin\" role may have access to all parts of the Appsmith platform and the ability to perform any action within it. In contrast, a user with the \"Developer\" role may only have access to certain parts of the platform and be limited to specific actions.\nUsers under Admin Settings > Access Control at the sidebar give you a list of all users with the roles and groups assigned to it on your Appsmith instance. You can add a new user to your instance by clicking on \"Add Users\" at the top right corner of the screen.\n\nIf you want to add a user to a group, open the user from the user's list, and In the groups tab, add the user to a new group from the \"All Groups\" list. Similarly, If you want to assign a role to a user, open the user from the user's list, and in the roles tab, pick the desired roles from the \"All Roles\" list.\n\nGroups\nA group is a collection of users. Groups let you specify roles for multiple users, making it easier to manage the permissions for those users. You can view the existing groups and the roles mapped to them or create a new group under Admin Settings.\nTo create a new group, open Admin Settings > Access Control > Groups and click the \"Add group\" button at the top right corner of the screen.\n\nTo view the existing groups and further look at the users and roles assigned to them - \n1. Click Groups under Access Control from the sidebar. You'll see a list of all the groups in your Appsmith instance \n2. Open the group you want to check. \nIn the roles tab, within the selected group, you can also assign a new role to the group from the \"All Roles\" list.\n\nRoles",
    "tag": "appsmith"
  },
  {
    "title": "Roles",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/advanced-concepts/access-control/granular-access-control/roles.md",
    "content": "Roles\nA Role is a collection of permissions that grant access to certain operations on resources and can be assigned to a user or a group. Roles enable users to manage multiple permissions rather than giving individual permissions to users/groups. In Appsmith, a role can be mapped to multiple permissions, and a permission can be mapped to various roles. However, a role can't be nested, that's, it can contain only permissions and not other roles. Roles are useful for efficiently managing permissions to access Appsmith resources.\nDefault roles\nA default role is an Appsmith generated role, they're generated during the creation of an Instance or a Workspace. They can't be deleted by the user.\nAppsmith provides three built-in roles - Administrator, Developer, and App Viewer. With Granular Access Control (GAC), you can create a custom role that provides fine-grained access control.\nDefault Role For All Users\nThe Default Role For All Users role sets the base level of access given to all users of an instance. The Instance Administrators can modify this role to provide the right level of access to their new users. Some use cases that can be solved with this role are:\n\nProvide view access to certain important apps in an instance.\nRemove the ability to create workspaces or apps for new users.\nLimit creation of apps to a single team workspace.\n\nResources\nA resource refers to specific components or aspects of an application that can be accessed or modified by users. These resources may include individual pages or views within the application, particular data sets or database tables, or specific actions or functions that can be performed within the application. In Appsmith, resources are classified into the following categories:\n\nApplication Resources: These are resources related to the applications built in Appsmith, such as individual pages or views within the application.\nDatasource and Queries: These are resources related to databases or queries created in Appsmith, such as a MongoDB setup used as a data source.\nGroups and Roles: These are resources related to the roles available for the workspaces and custom groups & roles available in an Appsmith instance. For example, if you have two workspaces - H.R. and Finance - then roles related to H.R. and finance would be available.\nOthers: These are resources related to workspaces and audit logs in Appsmith.\n\nPermissions\nPermission refers to the ability to perform a particular operation on a resource. You can club multiple permissions under a role, and a permission can be present in various roles. The table below lists all the permissions available in Appsmith -\n|  Permissions       |    Description                                                     |   Resource   |\n| ---------------    |------------------------------------------------------------------- | ------------ |\n| Create         | Enables permission to create, edit, view, and delete resources. You can also grant users access to create groups and roles. | Application Resources, Datasource and queries, Groups and roles, others. |\n| Edit           |Enables permission to edit and view resources. You can also grant users access to create groups and roles | Application Resources, Datasource and queries, Groups and roles, others. |\n| View           |Enables permission to only view resources. With the View permission, a user can only view the existing groups and roles | Application Resources, Datasource and queries, Groups and roles, others. |\n| Delete         |Enables permission to delete resources. You can also grant users access to delete groups and roles |Application Resources, Datasource and queries, Groups and roles, others. |\n| Export         |Grants users permission to export applications in a workspace. | Application Resources | \n| Invite         |Grants users permission to invite users to a user group | Groups and roles     |\n| Make public    |Grants users permission to make the applications public in a workspace |Application Resources|\n| Execute        |Grants users permission to execute queries on a datasource | Datasource and queries |\n| Remove users   |Grants users permission to remove a user from a group| Groups and roles |\nAll the permission for each resource are explained in detail below.\nApplication resources permissions\nIn Application Resources, here are the permissions that can be assigned to a user or a group -\nCreate\nWith this permission, users can create applications, pages, API queries, and JS Objects. Under Application Resources, you can control the Create permission at different hierarchical levels:\nWorkspace\nWhen you grant the Create permission to a workspace, it provides access to create applications only in that particular workspace. To enable permission to create workspaces, go to the Others tab.\nApplication\nWhen you grant the Create permission to an application, it provides access to create new pages in the respective application.\nPage\nAt a more granular level, giving Create permission to a specific page allows the user to create API, queries, and JS Objects for the respective page. \nEdit\nEdit allows the user to modify the existing applications, pages, API, queries, and JS Objects in a workspace. You can edit the app name, pages, order, color, icon, theme, etc. Edit also enables access to deploy an app and connect to a Git repository. \nYou can give Edit permission at different hierarchical levels -\nWorkspace\nWhen you grant the Edit permission to a workspace, it provides access to edit the newly created applications in that particular workspace. \nApplication\nIf you want the user to have edit access only to a specific application in a workspace, open the respective workspace tree and check the edit permission adjacent to the respective application. Edit for just an application allows you to edit the pages of that application.\nPage\nAt a more granular level, giving Edit permission to a specific page allows the user to edit the respective page's API, queries, and JS Objects. You can edit the page name, clone it, set it as the home page, and toggle its visibility.\nView\nView only grants users access to view and interact with the deployed applications in a workspace. You can't make any changes as you won't be able to access the canvas if you only have the View permission. It applies to all the hierarchical levels in a workspace.\nDelete\nDelete gives the user access to delete the existing applications, pages, or actions (APIs, queries, JSObjects) in a workspace. One can't edit or create resources with the delete permission, but the user can delete them.\nDelete permission behaves differently at various hierarchical levels -\nWorkspace\nIf you give delete permission to the workspace, It provides access to remove any application from the respective workspace. \nApplication\nIf you want the user to have delete access only to a specific application in a workspace, open the respective workspace tree and check the delete permission adjacent to the respective application. Delete for just an application allows you to delete the pages of that application.\nPage\nDelete access for a particular page allows you to delete the respective page or the resources in the page like APIs, queries, JSObjects. \nExport\nExport allows a user to export the applications in a workspace. If a user has export permission enabled, he can also view the applications in the workspace.\nThis permission can also be enabled for a particular application, allowing the user to only export and view the respective application.\nMake public\nMake Public gives the user the ability to make the application public or private in a workspace.\nDatasource and queries permissions\nFor datasource and queries, here are the permissions that can be assigned to a user or a group -\nExecute\nExecute gives a user permission to run DB/API queries created on a datasource. This permission can be given for a workspace or an individual datasource in a workspace.\nWorkspace\nGiving execute permission at a workspace level allows the user to execute any datasource in the workspace.\nDatasource\nIf you want the user to have execute access only to a specific datasource in a workspace, open the respective workspace tree and check the execute permission adjacent to the respective datasource. Execute for a particular datasource allows the user to execute only that datasource.\nPage\nGoing further down the hierarchy, you can give execute access to the queries inside a page. Execute permission at this stage allows the user to run the respective query. Execute permission for a query in the page only works if the corresponding datasource also has the execute access.\nCreate\nCreate gives the ability to create datasources in a workspace. In Datasource and queries, you can give the create permission at different hierarchical levels -\nWorkspace\nIf you give create permission to the workspace, it gives access to create datasources in the respective workspace. \nDatasource\nIf you want the user to have create access only to a specific datasource in a workspace, open the respective workspace tree and check the create permission adjacent to the respective datasource. Create on a particular datasource allows you to create queries on that datasource, but, you can't create queries for a datasource by only giving create access for the datasources in the workspace. To make new queries, check the create permission for the datasource and give the create access to queries under Application resources permissions \nEdit\nEdit allows the user to change/modify the existing datasources. You can edit the datasource name and configurations and further test and save the datasource. Edit permission can be given at different hierarchical levels -\nWorkspace\nIf you give edit permission to the workspace, it gives access to modify all the datasources in the respective workspace. \nDatasource\nIf you want the user to have edit access only to a specific datasource in a workspace, open the respective workspace tree and check the edit permission adjacent to the respective datasource. Edit for just a datasource allows you to modify the name and configurations of that datasource.\nView\nView only allows a user to have view access for the existing datasources. The user can interact with the functionality of the datasource and test the datasource but can't make any changes with View permission. View permission can be given at different hierarchical levels -\nWorkspace\nIf you give view permission to the workspace, it gives access to view and execute all the datasources in the respective workspace.\nDatasource\nIf you want the user to have view access only to a specific datasource in a workspace, open the respective workspace tree and check the view permission adjacent to the respective datasource. View for just a datasource allows you to view, test, and execute that datasource.\nDelete\nDelete allows the user to delete the existing datasources in a workspace. With the delete permission, one can't edit or create a datasource, but the user can delete it.\nDelete permission can be given at various hierarchical levels - \nWorkspace\nIf you give delete permission to the workspace, it provides access to remove any datasource from the respective workspace unless any existing queries are using it. You can\u2019t delete the datasource used in any existing queries.\nDatasource\nDelete for a particular datasource allows you to remove that datasource only.\nGroups and roles permissions\nFor Groups and roles for an Appsmith instance, here are the permissions that can be assigned to a user or a group -\nCreate\nWith this permission, users can create new groups and roles. \nGroups\nWhen the create permission is enabled for groups, a user can create a new group. \nRoles\nWith create permission enabled for roles, a user can create a new role. \nEdit\nWith this permission, users can edit the existing groups and roles. \nGroups\nWhen edit permission is enabled for groups, a user can edit an existing group. \nRoles\nWith edit permission enabled for roles, a user can modify an existing role.\n:::info\nYou can't edit the built-in roles from Appsmith. You can only edit the custom roles defined by any user in your instance.\n:::\nView\nWith this permission, users can only view the existing groups and roles.\nDelete\nThis permission allows users to delete and view existing groups and roles.\n:::info\nYou can't delete the built-in roles from Appsmith. You can only delete the custom roles defined by any user in your instance.\n:::\nInvite Users\nThis permission grants the user access to invite users to a group.\nRemove User\nThis permission grants the user access to remove users from a group.\nAssociate Role\nWith this permission, a user can assign roles to other users on the instance. Associate role permission, if provided alone, restricts a user from creating new roles or editing, viewing, and deleting the existing ones. However, they can assign the existing roles to various users on the instance.\nOthers permissions\nIn this section, users can assign permissions for workspaces and Audit logs.\nWorkspace\nWorkspace-level permissions enable a user to perform actions on the workspaces themselves. You can create a new workspace, edit, or delete existing ones.\nAudit logs",
    "tag": "appsmith"
  },
  {
    "title": "Updating Local File Path",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/advanced-concepts/version-control-with-git/updating-local-file-path.md",
    "content": "\nsidebar_position: 8\nUpdating Local File Path\nAppsmith clones the git repositories in the local filesystem, attached to the persistent volume within the docker container. To maintain the git repositories, we will need a file path that will point to the volume within the docker container. We can quickly achieve this by just updating the relevant environment variable.\n:::info\nIf the file path is not present, git repositories will be cloned, but this will not be persistent, and Appsmith will try to clone the repositories in case they got deleted by docker restart, etc.\n:::\nCustom Git Root\nTo point to a custom Git Root where the git repositories will be persisted, update the env variable called APPSMITH_GIT_ROOT to point to your custom file path.\n`APPSMITH_GIT_ROOT=./path/to/repo/directory`",
    "tag": "appsmith"
  },
  {
    "title": "Commit and Push",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/advanced-concepts/version-control-with-git/commit-and-push.md",
    "content": "\nsidebar_position: 3\nCommit and Push\nAfter developing your app further, you\u2019d want to sync it with your repository. To sync the app and the repository, commit the changes using the deploy button at the top right or `+` icon at the bottom left corner.\nIn the deploy window, enter your commit message and click on `Commit and Push` to update your repository with the latest changes.\n:::info\nOnce you commit and push changes, the changes are also published for the app viewers. Please note that the deployed version of one branch does not affect the other. For example, if you are working on a feature branch `f1` and you deploy the changes from `f1` branch, it will not affect the changes of the master branch\n:::\nLet\u2019s discuss some common errors you may face during the commit and push process.\nRemote is Ahead\nIn case the remote counterpart of your current branch has some commits that are not present on the local branch, the push command would fail, and you would need to pull the changes to proceed. After pulling the changes, once you click on the pull button, all changes would be finally pushed to the repository, including the last commit.\nMerge Conflicts",
    "tag": "appsmith"
  },
  {
    "title": "Disconnect the Git Repository",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/advanced-concepts/version-control-with-git/disconnect-the-git-repository.md",
    "content": "\nsidebar_position: 7\nDisconnect the Git Repository\nIf you want to disconnect your app from the Git repository, click Settings and hit the delete icon next to the remote URL. It will take you to the disconnection window, ensuring that you want to delete the connection.\n:::info\nOnce you disconnect with Git, all the local branches from the Appsmith server and their changes (except the default branch) will be deleted, and you cannot connect to the same remote repository again. Please note that the branches on the remote repository will remain untouched.",
    "tag": "appsmith"
  },
  {
    "title": "Pull & Sync",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/advanced-concepts/version-control-with-git/pull-and-sync.md",
    "content": "\nsidebar_position: 5\nPull & Sync\nIf your local branch is not in sync with the remote branch of the git repository, you pull the latest changes by clicking on the pull button at the bottom left corner.\nConflicts\nConsider a scenario where multiple users work on a single branch, say, the feature/f1 branch (we don\u2019t recommend this approach), and update the same resources from 2 different Appsmith instances (e.g., cloud and self-hosted). Now whoever commits later will face the issue of a merge conflict as the user who tries to commit and push will have to pull the changes from remote first.\nYou can resolve it in the following way:\n\nCreate a new branch in appsmith from the conflicted branch (feature/f1_conflicted);\nResolve the conflicts on the remote repository (Between origin/feature/f1 and origin/feature/f1_conflicted) by creating a pull request with origin/feature/f1 as a base branch;\nOnce the conflicts are resolved merge this new branch (origin/feature/f1_conflicted) into the old branch(origin/feature/f1);\n\n(origin/feature/f1 <- origin/feature/f1_conflicted)\n\nPull the branch (feature/f1) again in Appsmith\u2019s local repository;\nDelete branch origin/feature/f1_conflicted on the remote repository;\nRun sync branch flow to remove feature/f1_conflicted< from the local repository.\n\nDiscard and pull changes\nWhile developing an application in Appsmith, sometimes, you may end up in a situation where you want to discard the current changes and revert to the previous stable version. Now, with discard and pull functionality, you can remove the unwanted changes, and pull the changes present in the remote repository so that your application will always be in sync.\nDiscarding changes will result in the following scenarios: Any resources added after the last commit will be removed. Any resources deleted after the last commit will be restored. Changes made to any resource after the last commit will be removed.",
    "tag": "appsmith"
  },
  {
    "title": "Merging Branches",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/advanced-concepts/version-control-with-git/merging-branches.md",
    "content": "\nsidebar_position: 6\nMerging Branches\nWhen you want to merge your branch with the base branch -\n\nClick on the Merge button at the bottom left corner of the screen. It will open the merge tab\nSelect your base branch and check the merge status\nThe `base` and `head` branches shouldn't have any uncommitted changes.\nThe remote counterpart of the `base` branch shouldn't have any commits that are missing locally (the local and remote versions should be in sync.)\nThe `base` and the `head` branch shouldn't have any conflicting changes.\nClick on `Merge Changes` if the merge status check is successful.\n\nConflicts\nConsider a scenario where the user1 wants to develop a new feature and have a single branch  main . As a general practice user creates  feature/f1  from the main branch. At the same time, user2 updates the  main  branch with the same resources like page, query, or JSObject that user1 modifies on the  feature/f1  branch. If user1 tries to merge  feature/f1  to  main , it leads to a merge conflict.\nYou can resolve it in the following way:\n\nCreate a pull request with main  as the base branch;\nResolve the conflicts on remote branches (Between origin/f1  and  origin/main );\nOnce the conflicts are resolved, merge this new branch(origin/f1 ) into the old branch( origin/main );\n\n`( origin/main  **<-** origin/f1 )`\n\nPull the main branch again in your app. Now you should have all the changes from the  feature/f1  branch;\nDelete branch  origin/feature/f1  on remote;\n",
    "tag": "appsmith"
  },
  {
    "title": "Version Control With Git",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/advanced-concepts/version-control-with-git",
    "content": "\nsidebar_position: 5\nVersion Control With Git\nVersion Control with Git allows you to version control your apps by connecting them with a Git hosting provider (Github, GitLab, Bitbucket), making it easier to track changes, create rollbacks or collaborate using git branches.\nNote:\n:::info\nVersion Control works with any Git hosting service that supports SSH protocol.\n:::\n\nPrerequisites\nTo get started with Version control with Git in Appsmith -\n\nConnect to your Git Repository\nImport from a Git Repository\n\n:::info\nIn the community edition, You can connect up to three private repositories in a workspace. If you wish to connect more, you can upgrade to the business edition. However, you can connect unlimited public repositories.\n:::\nGit In Action\nOnce your app connects to the Git repository, you can further learn how version control works on Appsmith.\nThe flow is similar to how you work on Git -\n\nCommit and Push\nWork with Branches\nPull and Sync\nMerging Branches\nDisconnect the Git repository\n",
    "tag": "appsmith"
  },
  {
    "title": "Connecting to Git Repository",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/advanced-concepts/version-control-with-git/connecting-to-git-repository.md",
    "content": "\nsidebar_position: 1\nConnecting to Git Repository\nTo connect your app with git, follow the steps below:\nCreating a new Repository\n\nCreate a new repository on your git service and copy the `SSH` URL. The repository should be empty except `README.md`, `.gitignore`, and `LICENSE` files (These can be auto-created when you create a new repository.)\n\nGenerating a Deploy key\n\nOpen the app you want to connect to git and click on the `Connect GIT` button on the bottom bar.\nIn the Git connection window, paste your repository\u2019s `SSH` URL and click on `Generate key` to generate an `SSH` key.\n\n\nAdding the deploy key in the Repository\n\nCopy the generated deploy key and add it to your repository. Please note that you have to enable write access for pushing the changes to the remote repo from Appsmith.\n\nFor Github\n\nOpen the settings of the repository and go to deploy keys.\nClick on \u201cAdd deploy key.\u201d Add a title for the key and paste the generated key into the key section.\nCheck the \u201cAllow write access\u201d checkbox and add the key.\n\n\nFor Gitlab\n\nOpen the Settings> Repository and expand the deploy keys section.\nClick on \"Add key\", Add the title and paste the generated key in the key section.\nCheck the \"Grant write permissions\" to this key and add the key.\n\n\nFor Bitbucket\n\nOpen \"Personal settings\" from the bottom right corner and go to \"SSH keys\".\nClick on \"Add key\", add the label and paste the generated key in the key section.\n\n\n:::info\nAWS CodeCommit isn't supported as a source control repository due to their lack of support for deploy keys.\n:::\nUser Configurations\n\nIn user settings, define the user configurations. By default, the global user configurations are used. Click on the Edit button or directly open the profile section to change the global configurations. If you want to add a user configuration specific to the current app, you must uncheck the \"use default configuration\" checkbox and enter the author details below.\n\n\nFinally, click on connect, and if the connection is successful, your repository will have a `README.md` file. On the Git window, you\u2019ll move to the Deploy section, where you can make an initial commit.\n\n:::info\nIn the community edition, You can connect up to three private repositories in a workspace. If you wish to connect more, you can upgrade to the Business Edition. However, you can connect unlimited public repositories.",
    "tag": "appsmith"
  },
  {
    "title": "Import from Repository",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/advanced-concepts/version-control-with-git/import-from-repository.md",
    "content": "\nsidebar_position: 2\nImport from Repository\n\n\u200bIf you already have an Appsmith App in a Git repository, you can import it to a new workspace or a different Appsmith account. Follow the steps given below:\n\nOn the Appsmith workspace home, click on desired workspace's Menu button and select Import.\nChoose the `Import from a Git repo` option on the import application pop-up. You'll be navigated to an `Import from the Git Repository` screen.\nAdd your Repository\u2019s SSH URL and click on Generate key.\n\n\n\nAdd the Deploy key to your repository.\u200b\nGo back to the Git connection window and configure the user settings and click on Import.\nOnce the import is complete, you\u2019ll see a data source configuration modal where you can configure the data sources used by the imported Application. We do not export any configuration values used for connecting a data source. So either you have to configure it in the data source configuration modal, or you can skip this and choose to configure it later.\n\n:::info\nIf the imported workspace already has a data source with the same name but a different type, the import will fail due to name conflicts. For example, suppose a git-connected application has a MongoDB data source - \"movies.\" You are importing it to a workspace that has a Postgres data source also named \"movies\". In such a case, the import will fail.",
    "tag": "appsmith"
  },
  {
    "title": "Working with Branches",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/advanced-concepts/version-control-with-git/working-with-branches.md",
    "content": "\nsidebar_position: 4\nWorking with Branches\nThe initial commit while connecting to a repository is made to the master branch. If you want to work on a feature independently, you can create a separate branch.\nTo create a new branch -\n\nClick on the branch button at the bottom left corner. You can switch to an existing branch or create a new one from the branch pop-up.\nWhen you switch to another branch, the uncommitted changes in your current branch won\u2019t carry over to the destination branch.\n\nHowever, if you create a new branch, it will have the uncommitted changes of your parent branch.\n:::info\n* Branch names should not start with `origin/` since this prefix is used to distinguish between local and remote versions of a branch.\n* Checking out a remote branch with a local counterpart already available would result in an error.\n* If you create a new branch, it will have the uncommitted changes of your parent branch. When you switch to another branch, the uncommitted changes in your current branch won\u2019t be carried over to the destination branch. In both cases, the current branch will retain the uncommitted changes.\n:::\nSyncing Local with Remote Branch\nTo sync the local with the remote branch (fetching or pruning), click on the branch pop-up and hit the Sync branches button.\n\nSyncing the branches won\u2019t merge any change you\u2019ve made on the remote branch. You\u2019ll have to click on the pull button to get the latest changes.\nDelete a Branch\nSimilar to the Git flow, you can delete a branch in Appsmith that is no longer needed.\n:::info\nYou can delete any branch other than the default branch. Please make sure that you are not editing the branch you want to delete.\n:::\nIf you want to delete a branch from Appsmith, follow the steps given below:\n\nClick on the branch list at the bottom left corner.\nMove the cursor to the branch you want to delete, hit the options button, and click on delete branch.\n",
    "tag": "appsmith"
  },
  {
    "title": "Widget Errors",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/help-and-support/troubleshooting-guide/widget-errors.md",
    "content": "Widget Errors\nThis section helps you troubleshoot common widget errors on the Appsmith platform.\nBinding errors\nYou may see below errors when binding data to widgets from an API, Query, JS object.\nSync field error\nYou may see this error when executing an API, Query, JS Object in a widget property that expects data, and can't be used to trigger an action. \n\nError message\n\nOr \n\nCause\nAction refers to the execution of an API, Query, or JS object. You can only perform an action by binding it to an async field. When you bind an action to a sync field that only expects data, it throws an error.\nExample: if you are executing a `storeValue()` function in a `TableData` property of a table. The `TableData` property expects data and can't execute a function, and results in an error. Similarly, if you try to execute a JS Object function `<JSOBJECT_NAME.FUNCTION_NAME>` in the `TableData` property, it throws an error.\nSolution\nInvoke the data property of an API, Query or JS object.\nFor example, you have a JS Object `getLoggedInUserInfo`, which has a function `getFullNameOfLoggedInUser`. The function returns the full name of the logged-in user. You wish to add the full name and create a welcome text, `Welcome! <LOGGED_IN_USER_NAME>`. Bind the response of `getFullNameOfLoggedInUser` function to a text widget by calling the `.data` property. To bind the response, add the below code snippet in a mustache (`{{}}`) sign.\n`getLoggedInUserInfo.getFullNameOfLoggedInUser.data`\nJSON form errors\nYou may see the below errors when working with a JSON Form widget.\nSource data exceeds 50 fields\nYou may see an error message when you try to bind a large query/API response to the source data property of the JSON Form widget.\nError message\n\nCause\nThe problem can be caused when you are trying to bind:\n\nA large array of multiple JSON objects\nA huge JSON object which has a lot of fields\nThe whole query data rather than a selected row or triggered row in a table\n\n\nSolution\nTo determine if the problem is caused due to:\n\nA large array or a huge JSON object - You can re-look at the data and evaluate the need to display all the data on UI, as it would be painful for your users to navigate more than 50 fields.\nThe whole query response that you bound to the source data - You recheck the source data field you are trying to bind and select either the selected row / triggered row to bind.\n\nOnce you have figured out the new structure for the data, head to the source data field to make changes.\nIf you still need help debugging an error, please raise a request on Discord Server or email support@appsmith.com.\nDefault value is missing in options\nYou may encounter an error message \"Default value is missing in options. Please update the value.\" while using the Select widget.\nError message\n\nCause\nThis error occurs when the Default Selected Value doesn't match any of the values specified in the options property of the widget.\nSolution\nTo fix this error, either change the value in the options property to match the selected value, or change the selected value to match an option listed in the options property. This ensures that the value selected is valid and prevents the error from appearing.\nDuplicate values found\nYou may encounter an error message \"Duplicate values found for the following properties\" while using the Select widget.\nError message\n\nCause\nThis error occurs when there are duplicate values in the options property of the Select widget. For example,\n`js\n {\n    \"label\": \"Blue\",\n    \"value\": \"BLUE\"\n  },\n  {\n    \"label\": \"Green\",\n    \"value\": \"BLUE\"\n  },`\nSolution",
    "tag": "appsmith"
  },
  {
    "title": "JS Errors",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/help-and-support/troubleshooting-guide/js-errors.md",
    "content": "\ndescription: >-\n You'll learn about common JS errors and how to resolve them on Appsmith.\n\nJS Errors\nErrors may be encountered when using JS Objects or writing JS functions. They can be caused by syntax errors in the code, data type mismatch, or attempts to access properties or functions that don't exist.\nThis section helps you troubleshoot common JS errors on the Appsmith platform.\nData type evaluation errors\nThis error occurs when the value in the property of the widget doesn't match the data type required by the property.\nError message\n\nCause\nWhile working with Tables or Lists, you may encounter this error, as the data property expects an Array of objects which might not match the data type of the API response.\nSolution\nThe solution to this is to bind the array inside the response object or transform the response object using JavaScript. Take an example response of the fetch users API as below. Binding it to a table directly would lead to an error.\n`javascript\n{\n \"next\": \"https://mock-api.appsmith.com/users?page=2&pageSize=10\",\n \"previous\": null,\n \"users\": [\n   {\n     \"id\": 1,\n     \"name\": \"Barty Crouch\",\n     \"status\": \"APPROVED\",\n     \"avatar\": \"https://robohash.org/sednecessitatibuset.png?size=100x100&set=set1\",\n     \"email\": \"barty.crouch@gmail.com\",\n   },\n   {\n     \"id\": 2,\n     \"name\": \"Jenelle Kibbys\",\n     \"status\": \"APPROVED\",\n     \"avatar\": \"https://robohash.org/quiaasperiorespariatur.bmp?size=100x100&set=set1\",\n     \"email\": \"jkibby1@hp.com\",\n   }\n ]\n}`\nTo overcome this, you can bind the user's array of the response instead of the entire response object using JavaScript:\n`javascript\n{{ fetch_users.data.users }}`\nError message\n\nCause\nWhile adding options to single-select or multi-select dropdowns, you might face a data mismatch error. In such cases, make sure the `options` property is an array of objects containing a label and value as strings.\nSolution\nIn case the response doesn't contain label and value keys as below, you can map over the response to transform it using JavaScript.\n`javascript\n// invalid response of fetchColors API\n[\n 'Blue',\n 'Green',\n 'Red'\n]`\n`javascript\n// Transform Response\n{{\n   fetchColors.data.map((color) =>{\n       return {\n           label: color,\n           value: color\n       }\n   })\n}}`\nError message\n\nCause\nThe below image shows that there is an error in the `Chart Data field` of the Chart widget. The Evaluated Value here indicates the current value of the field, and in the screenshot below, you can see that the current value is an array while the error indicates that it must be an array\\.\n\nSolution\nIn cases like these, you can use JavaScript to transform the data to the correct data type or access the correct data inside the object. The below code reduces the fetch_orders.data array to aggregate orders based on the date into an array \\ where x is the date of the order and y is the order amount\n`javascript\n{{\n   _.values(fetch_orders.data.reduce((accumulator, order) => {\n       if(accumulator[order.date]) {\n           accumulator[order.date].y += order.orderAmount\n       } else {\n           accumulator[order.date] = { x:order.date, y: order.orderAmount  };\n       }\n       return acc;\n   }, {}))\n}}`\nError message\n\nCause\nThe date picker expects its default date in the standard ISO format. If the date you provided doesn't match this, you'll see this error.\nSolution\nTo resolve this, you can transform the date string using moment.js.\n`// Moment can be used to set the default date to the current date\n{{moment()}}`\n`// Moment can parse your date format\n{{ moment(\"2021-07-26\", \"YYYY-MM-DD\") }}`\nError message\n\nCause\nThis error typically occurs in the `isVisible` and `isDisabled` properties and indicates that the value in the property doesn't match a `boolean` type.\nSolution\nYou can solve this by using a comparison operator.\n`{{ Dropdown1.selectedOptionValue === \"RED\" }}`\nError message\n\nCause\nWhen working with widgets, you may come across an error where the data property is expecting a string value that doesn't match the data type of the query response.\nSolution\nThe solution to this issue is to convert the data type of the API response to a string. This can be done using JavaScript methods. Additionally, make sure that the data being passed to the widget is in the correct format. For example:\n```\nTo get text,\n{{Text1.text}}\nTo get image,\n{{Image1.image}}\n```\nIn case the preceding doesn't work, you can also check the EVALUATED VALUE section to make sure that it's returning a string value and not an object or other data type.\nError message\n\nCause\nYou may come across an error where the data property is expecting a numeric value that doesn't match the data type of the API response.\nSolution\nIt's important to ensure that the data being passed to the widget's data property matches the expected data type. One solution to this issue is to use JavaScript to convert the API response to the correct data type, or to access the correct data type from the API response. \nYou can also check the EVALUATED VALUE section to make sure that it's returning a numeric value and not an object or other data type.\nSyntax error\nThis error occurs when there is invalid JavaScript inside the handlebars `{{ }}`. The evaluated value of the field is displayed as undefined in this case. Verify the number of braces in your code and consider re-writing your JS as multi-line code.\nIn the example below, fetch isn't defined anywhere in the application\n\nCyclic dependency error\nAn app gets a cyclic dependency error when a node is directly or indirectly dependent on itself.\nReactivity and dependency map\nIn Appsmith, all user-editable fields are defined as nodes, and to provide reactivity, a dependency map is created between these nodes to find the optimal evaluation order of these nodes. For example, when you would refer to `{{Api1.data}}` in a Table1's `tableData` field, there is a dependency created between `Api1.data` and `Table1.tableData`. So every time `Api1.data` updates, `Table1.tableData` needs to be updated.\n`// Table1.tableData depends on Api1.data\nApi1.data -> Table1.tableData`\nSimilarly, all parent nodes are implicitly dependent on the child nodes to ensure updates are propagated up an entity object. A more straightforward way to understand this is that if a child node updates, the parent node, and its dependencies should also be updated.\n```\n// Implicit. Parent depends on children\nApi1.data -> Api1\nTable1.tableData -> Table1\n// Explicit. Table1.tableData depends on Api1.data\nApi1.data -> Table1.tableData\n```\nThe most common scenario where a cycle occurs is when you would try to bind a node to its parent node. Since it's impossible to evaluate an app with a cyclic dependency, you have to exit out and be in an error state till the cycle is resolved.\n`// A cycle is formed\nTable1 -> Table1.tableData\nTable1.isVisible -> Table1`\nInfinite loop error\nAn infinite loop error occurs when a function or code block repeats indefinitely, causing the app or function to become unresponsive, and can even prevent users from accessing certain features of the app.\nCause\nThe problem may be due to a page load function that's stuck in a loop. This can happen if you have added code that uses the `navigateTo` function and is executed on `onPageLoad`, which can cause the page to become inaccessible or cause the app to get stuck in a loop and constantly routing to the destination page.\nSolution\nTo fix this problem, you can use debugger statements in Appsmith to halt the execution of the code and identify the source of the infinite loop. Here are the steps to do this:\n\nOpen the app in Appsmith and go to the page where the infinite loop is occurring.\nLocate the function or code block that's causing the infinite loop.\nInsert a debugger statement at the beginning of the function or code block that pauses the execution of the code and allows you to inspect its state. For more information, see debugging statement and how to use it.\nUse the debugger console of the browser to step through the code and identify the cause of the infinite loop.\nOnce you have identified the issue, make the necessary changes to the code to fix it.\nSave the changes and test the app again to ensure the infinite loop issue has been resolved.\n\nIf you can't find what you are looking for and need help debugging an error, please raise your issue on Discord Server or email at support@appsmith.com.",
    "tag": "appsmith"
  },
  {
    "title": "Query Errors",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/help-and-support/troubleshooting-guide/query-errors.md",
    "content": "\ndescription: >-\n  You'll learn about common query errors and how to resolve them on Appsmith.\n\nQuery Errors\nThe section illustrates common query errors and how to resolve them on Appsmith.\nQuery/API response errors\nYou may see below errors when working with API or Query responses.\nExecution failed with status 5009\nYou could see the query/API execution fails and generates an error response:\n\nError message\n\nCause\nThe error response could be caused when the API/query response size exceeds the allowed maximum limit of 5 MB or the size setup.\n\n\nSolution\nYou could resolve the error response by doing one of the following:\n* To limit the data returned as part of query response by using limit in the query or enabling pagination for table. \n* To limit the data for an API, you'll have to add a server-side pagination feature to it.\n* To update the maximum allowed limit, you can modify the environment variable only for the self-hosted instance of Appsmith. For example, to modify the limit for docker-based installation, navigate to the `docker.env` file and modify the `APPSMITH_PLUGIN_MAX_RESPONSE_SIZE_MB` environment variable to the desired response size(10 MB).\n`bash\nAPPSMITH_PLUGIN_MAX_RESPONSE_SIZE_MB=10`\n:::info\nIf you can't find what you are looking for and need help debugging an error, please raise your issue on Discord Server or email at support@appsmith.com.\n:::\nMongoDB name can not be null\nYou may encounter this error when trying to run queries against a MongoDB datasource.\nError message\nThe error message might appear in a few different ways. For example:\n\n\nAs an error response in the console:\n\n\n\nAs a notification with the text:\n\n\n\nOr,\n\n\n\nCause\nThis error may be caused by the database name being omitted from the Connection String URI field.\nSolution\nFind your Connection String URI in the datasource settings and verify that the database's name is in the string following the host name. For example, if your database name is `Movies`, it should look something like this:\n```\n// Connection String URI\nmongodb+srv://mockdb-admin:****@mockdb.kce5o.mongodb.net/movies?w=majority&retrywrites=true&authsource=admin&minpoolsize=0\n```\nIn the snippet, `mockdb.kce5o.mongodb.net/` is the host, `movies` is the database name, and the items after the `?` are optional arguments.\n\n:::info\nIf you can't find what you are looking for and need help debugging an error, please raise your issue on Discord Server or email at support@appsmith.com.",
    "tag": "appsmith"
  },
  {
    "title": "Application Errors",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/help-and-support/troubleshooting-guide/application-errors.md",
    "content": "\nsidebar_position: 4\ndescription: Troubleshoot the issues with your Appsmith applications. This page includes a list of common errors, causes, and solutions to help you resolve application issues.\n\nApplication Errors\nInvalid / empty name error\n\nError message\n<Message\n    messageContainerClassName=\"error\"\n    messageContent=\"Application name can't be empty.\"\n\n\n\nCause\nThis error indicates that the application name field has been left empty.\nSolution\nThis error can be fixed by editing the application name field and providing a non-empty string as the application name.\nDuplicate name error\nError message\n<Message\n    messageContainerClassName=\"error\"\n    messageContent=\"Entity name:  is already being used.\"\n\n\n\nCause\nThis error indicates that the name being assigned to the entity has been used before.\nSolution\nJavaScript reserved keywords and the window object methods and properties can't be used as entity names. You can fix the error by assigning a new unique name to the entity.\nLogin / signup errors\n\nAccount already registered error\nError message\n<Message\n    messageContainerClassName=\"error\"\n    messageContent=\"There is already an account registered with this email. Please sign in instead.\"\n\n\n\nCause\nThis error indicates that the email used to sign up has already been used before.\nSolution\nThis error can be fixed by either using a different email to signup or doing `login` instead of `signup`\nReset password error\nError message\n<Message\n    messageContainerClassName=\"error\"\n    messageContent=\"It looks like you may have entered incorrect/invalid credentials. Please try again or reset password using the button below.\"\n\n\n\nCause\nThis error appears when the user attempts to log into the Appsmith platform with invalid email and/or password.\nSolution\nIf you are unable to log in due to forgotten credentials, it's recommended to reset your account password. This can be done with the \"Forgot Password\" button on the Appsmith sign-in page; the page prompts you for the email address associated with your account, and then Appsmith sends an email to that address with a link for creating a new password.\nAlternatively, you may be able to access your account by using an SSO method like Google or GitHub. If you use SSO with an account that has the same email address as the one you normally use to log in via email and password, you should be signed in successfully.\nIf you need to reset your password while using a self-hosted instance of Appsmith, the instance must first be configured to send email notifications.\nNo user error\nError message\n<Message\n    messageContainerClassName=\"error\"\n    messageContent=\"Unable to find user .\"\n\n\n\nCause\nThe error indicates that the email provided to reset the password isn't registered with Appsmith.\nSolution\nYou can fix the error by providing an email that has been used to register with Appsmith before. Alternatively, any new un-registered email can be used to create a new account using the sign-up option.\nPage access error\n\nError message\n<Message\n    messageContainerClassName=\"error\"\n    messageContent=\"Either this page does not exist, or you don't have access to this page.\"\n\n\n\nCause\nThis message indicates one of the following:\n\nThe page URL is invalid. \nThe User doesn't have permission to access the page. \n\nSolution\nYou can fix the error by requesting access permission for the page from the `admin/developer`.",
    "tag": "appsmith"
  },
  {
    "title": "Deployment Errors",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/help-and-support/troubleshooting-guide/deployment-errors.mdx",
    "content": "\nsidebar_position: 3\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nDeployment Errors\nPorts unavailable\nIf you encounter the error that `ports 80 & 443` aren't open, its is recommended that you stop all processes on these ports and start again. If the processes on these ports cannot be stopped, you can run appsmith on another port.\n\n\nIn the file `docker-compose.yml`, change the ports for the Nginx container to a custom port as shown in the below example.\n`ports:\n      - \"80:80\"\n      - \"443:443\"\n      - \"9001:9001\"`\nChange to\n`ports:\n      - \"8080:80\"\n      - \"8443:443\"\n      - \"9801:9001\"`\n2. Run `docker-compose up -d`\n\n\n:::tip\nTo stop a previous version of appsmith running on these ports, run the following:\n\n`sudo su`\n`docker container kill $(docker ps -q)`\n:::\n\nContainers Failed to Start\nIf you chose to initialize a new database and are seeing this error, it could be due to an error while fetching dependencies during installation. Deleting the current installation direction, killing the docker containers, and restarting the installation should work. If it doesn't, please reach out on discord\nIf you are trying to connect to an existing MongoDB and the containers failed to start it may be due to one of the following reasons:\n\nIncorrect MongoDB credentials\nEmpty Salt / Password for encryption\n\nRestart the installation process with valid values.\nUnable to access Appsmith\n\nEnsure your security groups are configured to allow traffic to ports 80 & 443 on your installation instance.\nYou can access the running application on localhost in any browser or the `public IP` of your machine.\nYou may need to wait for a few minutes before accessing the application to allow Nginx to start.\n\nOAuth sign up not working\nIf your deployment is behind an ELB / Proxy, you must update the Nginx configuration of the deployment. In the file `data/nginx/nginx.app.conf.template` modify the line:\n`proxy_set_header X-Forwarded-Proto $scheme;`\nwith\n`proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;`\nThis ensures that the redirect URLs are correct during OAuth2 logins. This works even if the ELB is configured to run on a custom port.\nServer not booting because of MongoCommandException\nIn release `v1.6.4`, Appsmith upgraded its libraries & Spring framework. This caused a compatibility issue between the libraries used within Appsmith and the version of MongoDB that was shipped earlier. This didn't show up in testing because all testing happened against MongoDB clusters with replica sets, where the problem doesn't surface.\nIf you see an error like the below, your instance is affected by the library upgrade performed in `v1.6.4`.\n`Caused by: com.mongodb.MongoCommandException: Command failed with error 17 (ProtocolError): 'Attempt to switch database target during SASL authentication.' on server mongo:27017. The full response is {\"ok\": 0.0, \"errmsg\": \"Attempt to switch database target during SASL authentication.\", \"code\": 17, \"codeName\": \"ProtocolError\"}`\nPlease follow the steps mentioned below to fix your Appsmith installation.\nStep 1: Edit MongoDB URI\nAdding `&authSource=admin` to the end of your `APPSMITH_MONGODB_URI` variable\u2019s value in your `docker.env` file. For example, in your `docker.env` file, if you have the following line:\n```bash\nOld config\nAPPSMITH_MONGODB_URI=mongodb://:@mongo/appsmith?retryWrites=true\n```\nChange it to the following (notice the only change is `&authSource=admin`. Please don't paste this whole line. Only add the `&authSource=admin` part to your current value.\n```bash\nNew config\nAPPSMITH_MONGODB_URI=mongodb://:@mongo/appsmith?retryWrites=true&authSource=admin\n```\nSave the file.\nStep 2: Restart server\nNow restart your container with the following command:\n`bash\nsudo docker-compose up -d --force-recreate appsmith-internal-server`\nIn a minute or two, the server should now come up and be ready.\nUnable to send emails\nIf you are having trouble with invitation emails not being sent, even though the Admin email setup is able to send test emails, it may be due to an issue with the configuration of the email parameters.\nIf you aren't receiving the invitation email, please check the value for `APPSMITH_REPLY_TO` in the configuration file. If this value is empty, please set it to the same email address that you are using for `APPSMITH_MAIL_FROM` and restart the application.\nThis should resolve the issue of not receiving the invitation email. Additionally, it may be helpful to verify that the email server being used is working correctly and there are no issues with the network or other components preventing the emails from being sent.\nHowever, if you encounter any issues, you can contact the support team on Discord or ask questions on the community forum.\nServer shuts down with schema mismatch error\nThe instance keeps restarting due to a server shutdown displaying a schema mismatch error.\nError message\n\nCause\nAs the error message in the server logs suggests, your Appsmith instance has missed a required checkpoint upgrade. This occurs if you are manually upgrading and have skipped a version or are on an automatic upgrade but your instance hasn't checked for updates for a particular period.\nSolution\nTo resolve this error, you must upgrade to the checkpoint version, in this case, `v1.9.2`.",
    "tag": "appsmith"
  },
  {
    "title": "Google Sheet Errors",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/help-and-support/troubleshooting-guide/action-errors/google-sheets-plugin-errors.md",
    "content": "\nsidebar_position: 4\nGoogle Sheet Errors\nWorking with Google Sheets Plugin on Appsmith is the handiest way to use Google Sheets as a datasource for building apps. But sometimes, we often run into minor errors while specific queries while editing and deleting data on Google Sheets. In this guide, we'll look at some of the frequent errors one faces while using Google Sheets.\nExpected a row object\nThis error occurs when an invalid format is passed to the insert or update sheet operations. The request body must be an object with keys matching the headers of the Google Sheet. The header row is determined by the index of the google sheet. Below is a sample row object\n`{\n    \"rowIndex\":{{Table1.selectedRow.rowIndex}},\n    \"Name Input\": \"{{editFund.text}}\",\n    \"Designation\": \"{{editDesignation.text}}\",\n    \"Location\": \"{{editLocation.text}}\"\n}`\nMissing required field row index\nEditing Data on Google Sheets: To edit data on Google Sheets we'll have to use the Edit Sheet Row query from the plugin. While doing this, we might encounter a Missing required field row index error. This occurs when we miss a `rowIndex` key in the Row Object property.\nFor example, you're editing three fields using Input Widgets from a table (`Table1`) with the following names:\n\nName Input: `nameInput`\nEmail Input: `emailInput`\nLocation Input: `locationInput`\n\nTo edit these you're `Row Object` should be set to the following:\n`{\n    \"rowIndex\":{{Table1.selectedRow.rowIndex}},\n    \"Name Input\": \"{{editFund.text}}\",\n    \"Designation\": \"{{editDesignation.text}}\",\n    \"Location\": \"{{editLocation.text}}\"\n}`\nAs we see for the `Edit Sheet Row` query we must pass a `rowIndex`, else it throws a Missing required field row index error.\nPlugin failed to parse JSON Error\nWhile creating or editing the data on Google Sheets from Appsmith, we should pass the object that needs to edit in the Row Object property. Here, we might face errors while parsing the data into the JSON object. Below is an example as a reference to edit/create new row objects on Google Sheets from Appsmith.\nHere, our goal is to create a new row on Google Sheets, for this we'll be using the Insert sheet row query. In this example, we'll be using the following row object:\n`{\n  \"Investment Fund\": \"{{addFund.text}}\",\n  \"Location\": \"{{addLocation.text}}\",\n  \"Name of Investor\": \"{{addInvestorInput.text}}\",\n  \"Designation\": \"{{addDesignation.text}}\",\n  \"Interesting Portfolio Companies\": \"{{addPortifolio.text}}\"\n}`\nHere, the keys are usually the column names in the Google Sheets, and the corresponding values are the values evaluated from the input widgets using the mustache `{{}}` operator.\n:::tip\nMake sure to remove unnecessary commas at the end of JSON",
    "tag": "appsmith"
  },
  {
    "title": "REST API Errors",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/help-and-support/troubleshooting-guide/action-errors/rest-api-errors.md",
    "content": "\nsidebar_position: 2\nREST API Errors\n\nMissing URL Error\n`DEFAULT_REST_DATASOURCE is not correctly configured. Please fix the following and then re-run: \\n[Missing URL.]`\nThis message indicates that the REST API's URL field in the API editor form has been left empty.\nThis error can be fixed by editing the REST API form and providing a URL.\nMissing Client Secret / Client ID / Access Token Error\n`DEFAULT_REST_DATASOURCE is not correctly configured. Please fix the following and then re-run: \\n[Missing Client Secret, Missing Client ID, Missing Access Token URL]`\nThis message indicates that the mentioned parameter fields - `Client Secret` / `Client ID` / `Access Token URL` have been left empty. These fields are nested in the `Authentication` sub-section which becomes visible if the `Authentication Type` field has been chosen as OAuth 2.0\nSecret Key Required Error\n`Secret key is required when sending session details is switched on, and should be at least 32 characters in length.`\nThis message indicates that `Send Appsmith signature header` field has been marked as `Yes` but the `Session Details Signature Key` field is left empty.",
    "tag": "appsmith"
  },
  {
    "title": "Action Errors",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/help-and-support/troubleshooting-guide/action-errors",
    "content": "\nsidebar_position: 1\nAction Errors\n\nTimeout Error\nIf your API / DB Query times out, it could be due to one of the following reasons\n\nYour API / Database is behind a VPC which is not accessible from the appsmith Instance. This can be fixed by whitelisting the appsmith instance in your database or VPC.\nYour API / Query is taking too long to respond. This can be fixed by fetching smaller datasets using\n\nserver-side pagination or increasing the timeout of the API / Query in the settings section.\nConfiguration Error\n`getUsers failed to execute. Please check its configuration`\nThis message indicates an error in the configuration of the action. You can navigate to the API / Query in this state and see the error it encountered. If the error occurred intermittently, it is likely due to a value in the configuration not being available at the time that the API / Query was run.\nMandatory Parameter Empty Error\n`Mandatory parameters 'Action' and 'Bucket Name' are missing`\n`Required parameter 'File Path' is missing`\n`Missing action name (like `ListTables`, `GetItem` etc.)`\n`Document/Collection path cannot be empty`\n`Missing Firestore method`\nA message of this type means that at least one of the mandatory/required fields in the query editor form is missing.\nThis error can be fixed by editing the query editor form and providing the parameter mentioned in the error message.\nMissing Query Error\n`Missing required parameter: Query`\n`needs a non-empty body to work`\n`Body is null or empty`\nAny one of these messages indicated that the body of the query has been left empty.\nThis error can be fixed by editing the query form and providing a query body.\nInvalid Query Error\n`Not a valid Redis command`\n`Query preparation failed while inserting value`\nA message of this type indicates that the syntax of the query body is invalid.\nThis error can be fixed by providing a valid syntax in the query editor form.\nEncoding Error\n`File content is not base64 encoded`\nThis message indicates that the query was expecting a base64 encoded value as content body, but the actual value passed to it was not base64 encoded.\nThis error can be fixed by passing a base64 encoded value as a file content parameter in the query.\nInvalid Number Error\n`Parameter 'Expiry Duration of Signed URL' is NOT a number`\nThis message indicates that the query parameter mentioned in the message expects a number but a non-numerical value has been provided in the query form.\nThis error can be fixed by editing the query form and providing a valid number as input for the mentioned parameter.\nJSON Parsing Error\n`Error parsing the JSON body`\n`Error converting array to ND-JSON`\n`Unable to parse condition value as a JSON list`\nThis message indicates that the JSON string passed to the query as a parameter is not a valid JSON string.",
    "tag": "appsmith"
  },
  {
    "title": "Datasource Errors",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/help-and-support/troubleshooting-guide/action-errors/datasource-errors.md",
    "content": "\nsidebar_position: 1\nDatasource Errors\n\nFollowing is the list of errors users often see while creating new datasources:\n\nMissing endpoint\nMissing endpoints\nMissing host for endpoint\nMissing endpoint and URL\nMissing hostname\nNo endpoints configured\n\nThese messages indicate that the `Host address` field in the datasource creation form has been left empty. This error can be fixed by editing the datasource creation form and typing in the host address for the datasource.\nInvalid host error\n`Invalid host provided. It should be of the form http(s)://your-es-url.com`\nThis message indicates that the provided URL format isn't correct. This error can be fixed by editing the datasource creation form and providing the host URL in the correct format.\nMissing port error\n`Missing port for endpoint`\nThis message indicates that the `Port` field in the datasource creation form has been left empty.\nThis error can be fixed by editing the datasource creation form and typing in the port address for the datasource.\nMissing username error\n`Missing username for authentication`\nThis message indicates that the `Username` field in the datasource creation form has been left empty. The `Username` field is usually nested inside the `Authentication` subsection.\nThis error can be fixed by editing the `Username` field in the datasource creation form.\nMissing password error\n`Missing password for authentication`\nThis message indicates that the `Password` field in the datasource creation form has been left empty. The `Password` field is usually nested inside the `Authentication` subsection.\nThis error can be fixed by editing the `Password` field in the datasource creation form.\nMandatory parameter / field empty error\n`The mandatory parameter 'Access Key' is empty.`\n`At least one of the mandatory fields in the plugin's datasource creation form is empty`\nThis message indicates that one of the mandatory fields, for example, `Access Key`, has been left empty in the datasource creation form.\nThis error can be fixed by filling the mentioned mandatory fields in the datasource creation form.\nCan't delete datasource error\n`Cannot delete datasource since it has 1 action(s) using it.`\nThis message indicates that the datasource attempting to be deleted has some query action configured on it.\nThis error can be fixed by deleting any queries dependent on this datasource before attempting to delete the datasource.\nError connecting to local DB or API\nIf you are trying to connect to a local database from Appsmith and see an error message like:\nError message\n\n\nCause\nWhen running Appsmith inside a Docker container, it may have its own network namespace and won't be able to access services running on the host machine using the `localhost` or `127.0.0.1` addresses. This is because these addresses points to the container's local network, which is different from that of the host machine.\nSolution\nInstead, you can use the hostname `host.docker.internal` on Windows and macOS hosts, and `172.17.0.1` on Linux hosts, to access services running on the host machine from within the container. This allows the container to access the MySQL server running on the host.\nIn particular, if you are connecting to a MySQL server (or similar SQL server), make sure that it's configured to bind to `0.0.0.0`. This allows connections from any host, including other devices on the same network. This may or may not be desirable, depending on your security requirements.\nIf you continue to experience problems with building in Appsmith, it's a good idea to check the backend logs from the `stacks/logs/backend/backend.log` file for any error messages or other information that might help troubleshoot the issue.",
    "tag": "appsmith"
  },
  {
    "title": "MongoDB Errors",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/help-and-support/troubleshooting-guide/action-errors/mongodb-errors.md",
    "content": "\ndescription: Troubleshooting guide that provides solutions to common MongoDB errors that may occur while using Appsmith. Follow these steps to resolve any issues you may be experiencing with your MongoDB setup.\nMongoDB Errors\nThis section helps you troubleshoot common MongoDB errors on the Appsmith platform.\n503 - service unavailable\nYou may see 503 - Service Unavailable error on Appsmith.\n503 - after upgrading Appsmith to v1.9.0\nYou may see this error after upgrading Appsmith to `v1.9.0`. \nError message\n\nCause\nIf you are using the Appsmith platform and encounter a 503 - Service Unavailable error, it may be due to upgrading to Appsmith v1.9.0 and using an older version of MongoDB (before v5.0). \nSolution",
    "tag": "appsmith"
  },
  {
    "title": "Telemetry",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/product/telemetry.md",
    "content": "\ndescription: >-\n  We ask you to opt-in to send us regular usage telemetry during the\n  installation process. Even if you don't, we understand and appreciate your\n  security requirements. Read on to understand more.\n\nTelemetry\n:::note\nData collected is strictly anonymous in nature and cannot be used to uniquely identify a user.\n:::\nWhat data is collected?\nAppsmith Server\nThe Appsmith server sends a keep-alive ping every 6 hours to indicate that it is still running without any errors.\n:::info\nAppsmith is a lightweight proxy and does not capture any data returned by your APIs, databases, or third-party tools.\n:::\nSample event\n`javascript\n{\n  \"context\": {\n    \"ip\": \"203.192.213.46\",\n    \"library\": {\n      \"name\": \"unknown\",\n      \"version\": \"unknown\"\n    }\n  },\n  \"event\": \"Instance Active\",\n  \"integrations\": {},\n  \"messageId\": \"api-1jokIBOkNv8nEmu2fGeNb01G1RC\",\n  \"properties\": {\n    \"instanceId\": \"<uuid>\"\n  },\n  \"receivedAt\": \"2020-11-04T08:15:49.537Z\",\n  \"timestamp\": \"2020-11-04T08:15:49.537Z\",\n  \"type\": \"track\",\n  \"userId\": \"203.192.213.46\"\n}`\nOpt-in Telemetry\nThe following data is opt-in only. You can say no during the installation process.\nAppsmith Client\nThe client captures anonymous behavioral data around navigation and clicks. No data from data sources is captured by Appsmith.\nSample data\n`javascript\n{\n  \"anonymousId\": \"0b62ab60-02ad-4f69-a181-d9c5eb2f97fa\",\n  \"context\": {\n    \"ip\": \"49.207.192.209\",\n    \"library\": {\n      \"name\": \"analytics.js\",\n      \"version\": \"4.0.4\"\n    },\n    \"locale\": \"en-US\",\n    \"page\": {\n      \"path\": \"/applications\",\n      \"referrer\": \"https://dev.appsmith.com/applications\",\n      \"search\": \"\",\n      \"title\": \"Editor | Appsmith\",\n      \"url\": \"https://dev.appsmith.com/applications\"\n    },\n    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\"\n  },\n  \"event\": \"APPLICATIONS_PAGE_LOAD\",\n  \"integrations\": {},\n  \"messageId\": \"ajs-9176c8f5ebc607524746206ea6aa7502\",\n  \"originalTimestamp\": \"2020-11-04T10:52:14.616Z\",\n  \"properties\": {},\n  \"receivedAt\": \"2020-11-04T10:52:14.750Z\",\n  \"sentAt\": \"2020-11-04T10:52:14.618Z\",\n  \"timestamp\": \"2020-11-04T10:52:14.748Z\",\n  \"type\": \"track\",\n  \"userId\": \"a3d8b23b9b0cac986af79f4826d009463f8dfc372f188934710115491b7665a1\"\n}`\nAppsmith Server\nThe server captures anonymous usage data around which plugins are being used. No data from data sources is captured by Appsmith.\n`javascript\n{\n  \"context\": {\n    \"library\": {\n      \"name\": \"analytics-java\",\n      \"version\": \"2.1.1\"\n    }\n  },\n  \"event\": \"execute_ACTION_TRIGGERED\",\n  \"integrations\": {},\n  \"messageId\": \"0f6b07ee-0717-413-808c-c25b09c0468\",\n  \"originalTimestamp\": \"2021-08-24T07:23:35.610Z\",\n  \"properties\": {\n    \"appId\": \"612465f87b2230debedfc6\",\n    \"appMode\": \"edit\",\n    \"appName\": \"APP1\",\n    \"datasource\": {\n      \"name\": \"Test App\"\n    },\n    \"instanceId\": \"612460418944011a10fa5b\",\n    \"isExampleApp\": false,\n    \"isSuccessfulExecution\": true,\n    \"name\": \"Test\",\n    \"orgId\": \"612464f7f230debedfc4\",\n    \"originService\": \"appsmith-server\",\n    \"pageId\": \"612465802230debedfc8\",\n    \"pageName\": \"Page1\",\n    \"pluginName\": \"PostgreSQL\",\n    \"statusCode\": \"\",\n    \"timeElapsed\": 8,\n    \"type\": \"DB\",\n    \"username\": \"70280e5d07e61e5e915e5d26ac8704bbd68d3f75ebad67ba439f4c354d7\"\n  },\n  \"receivedAt\": \"2021-08-24T07:23:39.996Z\",\n  \"sentAt\": \"2021-08-24T07:23:39.885Z\",\n  \"timestamp\": \"2021-08-24T07:23:35.721Z\",\n  \"type\": \"track\",\n  \"userId\": \"70280e5dd9e61e5e91526ac8704bbd68d3f75ebad67ba439f4c354d7\",\n}`\nDisable Telemetry\nIf you have accidentally opted for Telemetry, you can disable it. You can either disable the telemetry from Admin Settings or by making changes to the docker.env file.\nAdmin Settings\n\nNavigate to Profile >> Click Admin Settings >> Click on General >> Scroll to Share anonymous usage data.\n\n\n\nToggle to turn off telemetry\n\n\n\nClick Save & Restart to restart the container for the changes to take effect.\n\nDocker.env file\n\nNavigate to the directory where the `docker.env` file is located.\nOpen the file in an editor and search for `APPSMITH_DISABLE_TELEMETRY`\nChange the value of `APPSMITH_DISABLE_TELEMETRY` from `false` to `true`\nAfter changes, the property in the `docker.env` file should read as below:\n\n`APPSMITH_DISABLE_TELEMETRY=true`\n\nSave Changes\n\n\n\nOpen the terminal and navigate to the location where the `docker-compose.yml` file is located `(docker host directory)`.\nCopy and paste the below command to restart the container:\n\n`bash\nsudo docker-compose rm -fsv appsmith && sudo docker-compose up -d`\n\nOnce the container restarts, Appsmith is up and running.\n",
    "tag": "appsmith"
  },
  {
    "title": "Security",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/product/security.md",
    "content": "Security\nDoes Appsmith store my data?\nAppsmith does not store any data returned from your API endpoints or DB queries. Appsmith only acts as a proxy layer. When you query your database/API endpoint, the Appsmith server only appends sensitive credentials before forwarding the request to your backend. It doesn\u2019t expose sensitive credentials to the browser as it can lead to security breaches. The routing ensures the security of your systems and data.\nSecurity measures within Appsmith\nAppsmith applications are secure-by-default. The security measures implemented for Appsmith installations are:\n\nAll sensitive credentials, such as database credentials, are encrypted with AES-256 encryption. Each self-hosted Appsmith instance ensures data-at-rest security by configuring unique salt and password values.\nOn Appsmith Cloud, all connections are TLS encrypted. For self-hosted instances, we offer the capability to set up SSL certificates via LetsEncrypt during installation.\nAppsmith Cloud will only connect to your databases/API endpoints through whitelisted IPs: 18.223.74.85 & 3.131.104.27, ensuring that you only expose database access to specific IPs when using our cloud offering.\nAppsmith Cloud is hosted in AWS data centers on SOC 1 and SOC 2 compliant servers. We also maintain data redundancy on our cloud instances via regular backups.\nInternal access to Appsmith Cloud is controlled through a Two-Factor Authentication System and audit logs.\n\n:::note\nThe above reference to the audit logs pertains only to the cloud-hosted instance of Appsmith and does not refer to the audit logs feature.\n:::\nSecurely Executing Queries & APIs\nAppsmith's backend system doesn't store any data when responding to API calls or executing any queries. The security measures implemented for Appsmith Executing Queries & APIs are:\n\nThe Appsmith's backend system doesn't store any information about query responses or user inputs. Appsmith only acts as a proxy and never logs or stores the private/confidential data in Appsmith's data stores.\nTo protect the application so that users cannot infer the executed query - Appsmith stores the query configuration and ensures that the SQL query body or custom API URLs are never exposed to the client in `view` mode.  \nTo avoid SQL injections, all SQL queries have prepared statements enabled by default.\n\nSecurely Executing JavaScript\nThe JavaScript code written within Appsmith is executed on the client only, and a user can inspect the site and view the code in the browser. Hence, we recommend implementing the standard best practices when dealing with client-side code.\nThe code is stored in the MongoDB database that Appsmith uses to store all other application configurations. To ensure that all data is secure, please read the following carefully:\n\nWe recommend that you do not hard code the sensitive keys, credentials, or other sensitive information in the JavaScript objects in plain text.\n\n:::tip\nYou can add secrets to APIs or datasource configurations as they are not exposed in the view mode. You can update the secrets in edit mode but cannot view the existing secrets while viewing or editing the configurations.\n:::\n\nWhen you sync applications to git repositories, the JavaScript code is also synced and stored as a JavaScript file in the repository. As a result, we recommend following standard best practices when dealing with JavaScript code written on Appsmith.\nWe do not expose DOM APIs directly to the user while writing JavaScript code, but we support a few features via global actions like `setInterval()` and `clearInterval()` available on Appsmith.\nAppsmith does not allow some actions like `Fetch`. You cannot call an external API directly from the JavaScript code. However, you can add an API on Appsmith and use it to request, read data, or manipulate the response from the external API.\nYou should not store sensitive information using a `storeValue` function because the data is stored in the browser's local storage and can be read.\n\nSandboxing Iframe widgets\nThe Iframe widget on older versions of Appsmith is vulnerable to XSS attacks. This was fixed in v1.8.6 of Appsmith. For this fix to be applied on your Appsmith instance, ensure you have the following environment variable set in your `stacks/configuration/docker.env` file:\n`sh\nAPPSMITH_DISABLE_IFRAME_WIDGET_SANDBOX=false`\nThis is automatically set for any Appsmith instance created after the release of v1.8.6.\nThe fix works by setting a `sandbox` attribute on iframe widgets. This reduces what the widget is capable of, by a little bit, and shouldn't impact most real-world uses of this widget.\n:::tip\nWe maintain an open communication channel with security researchers to report security vulnerabilities responsibly. If you notice a security vulnerability, please email security@appsmith.com, and we'll resolve it ASAP.",
    "tag": "appsmith"
  },
  {
    "title": "Build Your First App",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/start-building.md",
    "content": "\nsidebar_position: 2\nid: start-building\nslug: /getting-started/start-building\n\nBuild Your First App\nIn this Quickstart guide, you will learn to:\n\nCreate a new application\nConnect to a database\nBuild UI by dragging and dropping widgets onto the canvas\nWrite queries to fetch data from the database\nBind data to widgets\nDeploy and share the application\n\nPrerequisites\nBefore you begin, you'll need to create an account on Appsmith Cloud, or you can self-host Appsmith locally or on a hosting platform of your choice.\nCreate a New Application\n\nWhen creating a new Appsmith account, an application titled 'My first application' is automatically added under the default Workspace. You can use this application to build your first app or create a new one by clicking on the + New button under the Workspace.\nFor this tutorial, we will use the default application. Hover over the 'My first application' card and click the Edit button to open the application.\n\n\n\nYou'll land on the Appsmith editor. Select the Build with drag & drop option to start from scratch and create your custom UI.\n'Page 1' is the default page on the application. To rename the page, click on the Kebab menu (three vertical dots) and select Edit Name. Label the page 'User Information'.\n\nConnect Database\nWe'll use the mock PostgreSQL database named 'users' available on Appsmith.\n\nOn the Explorer tab, click the + sign next to DATASOURCES. Under Sample Databases, select users.\nThe 'users' database will be added under the Explorer tab -> DATASOURCES.\n\n\nBuild UI\n\nNavigate to PAGES \u2192 User Information. Drag and drop a [Table] widget on the canvas. On the Property Pane to the right, rename the table to 'usersTable'.\nDrag and drop a [Container] widget to the right of the Table widget. Let's add a few widgets to display user details from the selected row on the table. Add a label titled 'User Details'.\nAdd Input widgets for Name (nameInput), Email (emailInput) and Phone (phoneInput), a Datepicker widget for DOB (dobInput), an Image widget for the Image and finally a Button widget labelled 'Update'.\n\n\nCreate Queries and Bind Data to Widgets\n\nOn the Explorer tab, navigate to the database under DATASOURCES \u2192 users\nClick on the New Query + button next to the datasource.\n\n\n\nRename the query to \u2018getUsers\u2019\nWrite the below query to pull ten records from the 'users' table in the database.\n\n`SELECT * FROM users ORDER BY id LIMIT 10;`\n\n\nClick the Run button on the right of the Query Editor to confirm that the query returns data.\nNavigate to PAGES \u2192 User Information. Hover over the table and click on the table name 'usersTable' to open the property pane. On the Table Data property write this JS snippet `{{getUsers.data}}` to display the results from the 'getUsers' query on the table.\n\n:::info\nThe `{{mustache}}` template is used to write JS inside widgets and queries.\n:::\n\n\nSimilarly, to display information from a selected row on the table, refer below to bind the corresponding data to the widgets inside the Container.\n\n| Widget | Name       | Property                                          | Value                              |\n| ------ | ---------- | ------------------------------------------------- | ---------------------------------- |\n| Image  | -          | Image                                             | `{{usersTable.selectedRow.image}}` |\n| Name   | nameInput  | Default Text                                      | `{{usersTable.selectedRow.name}}`  |\n| Email  | emailInput | Default Text                                      | `{{usersTable.selectedRow.email}}` |\n| DOB    | dobInput   | Default Date                                      | `{{usersTable.selectedRow.dob}}` |\n| Phone  | phoneInput | Default Text                                      | `{{usersTable.selectedRow.phone}}` |\n:::tip\nTurn on the JS toggle to bind data for the Default Date property\n:::\n\nCreate another query on the 'users' database and rename it to 'updateUsers'. Use the below update command to write any modified data on the widgets back to the database.\n\n`UPDATE users SET name = '{{nameInput.text}}', email = '{{emailInput.text}}', dob = '{{dobInput.selectedDate}}', phone = '{{phoneInput.text}}' WHERE id = {{usersTable.selectedRow.id}}`\n\nOn the property pane of the Update button execute this query on the onClick event. On the success of the update query, run the 'getusers' query to populate the table with updated data.\n\n\n\nTest the 'Update' button by modifying the phone number of the user.\n\n\nYou\u2019ve completed your first app that can display information from the database and update data, all in just a few minutes.\n\nDeploy and Share\n\nClick the Deploy button on the top right of the Appsmith editor to deploy the app and test it as an App Viewer.\nOnce deployed, you can share your application with users. Click the Share button on the top right of the Appsmith editor.\nInvite specific users using their email ID\nSelect an appropriate role for the user\nShare the application's URL with the user\n\n\nYou can also make the application public. In this case, anyone with the application URL can view the application without signing in. You can read more about access control here.\n\n:::info\nCongratulations, you have completed the Appsmith Quickstart tutorial.\n:::\nNow that you have created your first Appsmith application, you may be wondering what to learn next. The Quickstart covered only the basic concepts. There's so much more to explore, so head over to the next steps.",
    "tag": "appsmith"
  },
  {
    "title": "FAQ",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/faq.md",
    "content": "\ndescription: Frequently asked questions about Appsmith.\nsidebar_position: 4\n\nFAQ\nWhat kind of apps can be built on Appsmith?\nYou can use Appsmith to build custom forms, dashboards & workflows. Tools like Customer Support Dashboards, Offer Management Consoles & Product Cataloging Systems are all prime use cases for Appsmith. You can also use it as a clean UI layer over manually triggered scripts, confusing deployment pipelines & basic database CRUD operations. There's little preventing you from using Appsmith to bring any idea to life, but the product is optimized to make building internal tools a hassle-free experience.\nHow to write code in Appsmith?\nYes, absolutely. You can write JavaScript code anywhere inside the product within curly braces `{{ }}`, or using standard syntax within JS Objects. We know how complex and intricate business logic can be, and trying to build it without code can get excruciating. Appsmith bridges mundane API and UI configurations with powerful code expressions to let you build the apps the way you see them fit.\nFor more information, see writing code.\nWhat data security does Appsmith provide?\nAppsmith safely encrypts all your database credentials and stores them securely. Appsmith doesn't store any data returned from your data sources and acts only as a proxy layer to orchestrate the API / Query calls. Appsmith is an open source platform and can be fully audited and deployed on-premise to ensure none of your data leaves your VPC.\nDo you have a bounty program for reporting security vulnerabilities?\nNo, we don't currently have a bounty program for reporting security vulnerabilities. However, we appreciate any information that can help us improve the security of our systems and protect our users' data. We do reward security researchers who report serious and previously undiscovered issues.\nHow to report a security vulnerability in Appsmith?\nIf you believe you have discovered a security vulnerability, please email our security team at security@appsmith.com with a description of the issue and any relevant details. We will review your report and take appropriate action to address the issue.\nHow to request a new feature on Appsmith?\nThe best way to request a missing feature is by raising a Github Issue. Alternatively, we welcome external contributions and would be happy to help you unblock yourself with a feature on the platform. This is our Contribution Guide.\nHow to get help when building an app using Appsmith?\nWe provide support on the Appsmith Discord server and the community forum. We're also happy to get on a call and help you build your apps.\nHow's Appsmith different from other app builders?\nAppsmith is the first open source visual platform for building internal tools. Appsmith gives you building blocks (widgets, APIs, Queries) that you can configure and connect using JavaScript. This ensures that you never get blocked trying to create a custom workflow, and don't spend time building repetitive components.\nWhat are Appsmith's limitations?\nAppsmith isn't built for complicated UI interactions that are common to e-commerce or other consumer-facing websites. It works great for tools and workflows internal to your team or organization, but you wouldn't get far trying to build an attractive consumer website. For those use cases, it's recommended to try Wix, Squarespace, or Webflow.\nDoes Appsmith support multi-user editing?\nAppsmith is currently built for a single-user editor experience. If you try to update the same page/widget/action from two different places, they overwrite each other and may lead to a loss of work. It's recommended that at any given time, only one user should edit a page in a single open tab. Appsmith supports version control using Git which provides a way for multiple users to edit the apps on different branches before they can be merged to the main branch.\nWhere's the data on cloud services processed?\nFor cloud users, data is store and processed on servers in the US.\nIs Appsmith HIPAA compliant?",
    "tag": "appsmith"
  },
  {
    "title": "Self Hosting",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup",
    "content": "\ndescription: Appsmith is open source and very easy to deploy on your machine.\nslug: /getting-started/setup\nsidebar_position: 3\n\nSelf Hosting\nYou can host and manage Appsmith directly on your server, giving you complete control over your data privacy, security, and integrity.\nYou can use Appsmith in two ways:\n\nAppsmith Cloud - For users who don't have an on-premise infrastructure. Appsmith only acts as a proxy layer and doesn't store any data returned from your API endpoints or database queries. See Security\nSelf-host Appsmith - For users who want to deploy Appsmith on own their infrastructure, manage the instance, updates, etc.\n\nSelf-host Appsmith\nDeploying Appsmith on your infrastructure makes it easier to manage updates, create backups, and scale your infrastructure as per requirements.\nThe self-hosted version isn't air-gapped and needs internet access to reach Appsmith cloud services (cs.appsmith.com) for a few features to work, such as fetching release notes, more than three private repositories for git version control, templates, business license validity checks, etc. If you want a fully air-gapped deployment, please write to support@appsmith.com.\n:::info\nAppsmith collects usage data on self hosted instances, and you can disable this in your instance configuration file.\n:::\nInstalling Appsmith as a self-hosted instance has the following advantages:\n\nSecurity: You get to keep your data on-premise. It also ensures that your API keys or security credentials never leave your server and have the same security rules applied to any other app. The applications you build would be on your infrastructure, inside your virtual private networks/VPC. You can host it on internal networks behind a firewall and also configure SSL and custom domain.\n\nAppsmith provides a secure environment for cloud-hosted and self-hosted instances by encrypting sensitive information like database credentials using AES 256 Encryption. \n\n\nLocal database: A self-hosted instance allows you to connect to a database running on the same machine/intranet and use it to build apps.\n\n\nStorage: Appsmith uses MongoDB to store app data and Redis to store session information and non-critical caches. You can also connect to external MongoDB or Redis servers hosted on your infrastructure.\n\n\nUpdates: You can set up auto updates and manage your self-hosted instance.\n\n\nSystem requirements\nIt's simple and quick to deploy Appsmith. Please ensure that your system has the following recommended configuration for optimal performance before moving forward with the deployment:\n\nTwo virtual CPU [vCPU]\nA four GB of memory\n\n:::info\nOn Amazon Web Services(AWS), the t3.medium instance would be ideal for installing Appsmith.\n:::\nDeployment options\nAppsmith officially supports all Docker-based installations. You can choose from different deployment platforms. \nDigitalOcean and AWS offer a one-click deployment from their marketplaces.\nConfigure and manage instance\nYou can configure and manage the self-hosted instance if you are a Super Admin user.\n\nUser authentication - manage how users login to applications.\nEmail configuration - invite users and notify admins.\nSignup restriction - turn off signing up using the signup form or OAuth buttons, ensuring that only users you invite can signup.\nSSL configuration - make Appsmith available on a custom domain and configure SSL.\nManage updates - manually update to the latest release or schedule auto updates.\n",
    "tag": "appsmith"
  },
  {
    "title": "Maintenance Window",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-management/maintenance-window.md",
    "content": "\nsidebar_position: 3\nMaintenance Window\nAdding a configurable maintenance window for Appsmith\u2019s auto-updates\nChecking for updates can be configured to run during a pre-specific maintenance window by specifying a cron expression to the `--schedule` argument in the `auto_update` container\u2019s command.\nChanges required\nStep 1\nIn the `docker-compose.yml` file, scroll to the configurations of the container with image `containrrr/watchtower`. It'll be named either auto_update or watchtower. This is what your configuration will look like\n`auto_update:\n    image: containrrr/watchtower\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    # Checks for update every 5 mins because of --interval\n    command: --interval 300 --label-enable --cleanup\n    networks:\n      - appsmith\n    restart: always`\nStep 2\nIn the `command` configuration, please remove the `--interval` argument and the value `300` next to it, and in it\u2019s place, add a `--schedule` and a cron expression defining an update interval of your choice. Your new configuration will look like below.\n`auto_update:\n    image: containrrr/watchtower\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    # Check for updates every hour because of the cron schedule\n    command: --schedule \"0 0 * ? * *\" --label-enable --cleanup\n    networks:\n      - appsmith\n    restart: always`\n\n\u2139\ufe0f Note that a 6-value cron expression is expected here, not the traditional 5-value one. For details on how the expression works, please refer to (https://pkg.go.dev/github.com/robfig/cron@v1.2.0#hdr-CRON_Expression_Format)\n\nAfter making the changes restart the auto update container via the command below:\n```bash\nUse the container name as defined in your docker-compose.yml file. This command uses the name: auto_update\nsudo docker-compose pull && sudo docker-compose up --force-recreate auto_update\n```\nCheck the logs and see that the maintenance window is now in effect.\n`bash\ndocker-compose logs -f auto_update`\nExample configurations for some common use cases\nCheck for updates every Sunday at 12:00:\n`yaml\ncommand: --schedule \"0 0 12 ? * SUN\" --label-enable --cleanup`\nCheck for updates every hour:\n`yaml\ncommand: --schedule \"0 0 * ? * *\" --label-enable --cleanup`\nCheck for updates once at 12:00 everyday:\n`yaml\ncommand: --schedule \"0 0 12 * * ?\" --label-enable --cleanup`\nReferences:\nCron Generator tool",
    "tag": "appsmith"
  },
  {
    "title": "Appsmithctl",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-management/appsmithctl.md",
    "content": "\nsidebar_position: 2\nAppsmithctl\nAppsmith comes with an `appsmithctl` command line utility. You can use it for managing and maintaining your Appsmith instance.\n`bash\nappsmithctl <subcommand> <options>`\n\nSubcommands\nSubcommands allow you to trigger different operations like exporting or importing databases.\n| Subcommand                                        | Description                                  |\n| ------------------------------------------------- | -------------------------------------------- |\n| `--help`                                          | Show help.                                   |\n| ex, export_db | Export internal database.                    |\n| im, import_db | Import internal database.                    |\n| `mi`, `migrate`                                   | Migrate to a new server.                     |\n| `crs`, `check_replica_set`                        | Check Replica Set MongoDB.                   |\n| backup                 | Create a backup of the Appsmith instance.    |\n| restore               | Restore the Appsmith instance from a backup. |\n:::info\nWith Business Edition, you can also sync the backups to an AWS S3 bucket.\n:::\nExport Database\nUse the following command to backup Appsmith's database.\n:::info\nYou can restore the backups onto another instance using the import command to restore data.\n:::\n`ex`, `export_db`\nBefore running this, ensure you are in the directory where `docker-compose.yml` is located.\n`bash\ndocker-compose exec appsmith appsmithctl export_db`\nThe output file will be stored in the container directory `/appsmith-stacks/data/backup/appsmith-data.archive`. Thanks to the volume configuration in the `docker-compose.yml` file, it should be available on your host machine at `./stacks/data/backup/appsmith-data.archive`.\nIf your volume configuration is different or unavailable, you can use the following command to copy the archive file to your host disk:\n`bash\ndocker cp appsmith:/appsmith-stacks/data/backup/appsmith-data.archive .`\n:::info\nYou may want to save the `docker.env` file in addition to this archive file if you intend to be able to reproduce this environment elsewhere in case of a disaster,\n:::\nThe `docker.env` file can be copied from the container with the following command:\n`bash\ndocker cp appsmith:/appsmith-stacks/configuration/docker.env .`\n:::note\nPlease save the encryption environment variables `APPSMITH_ENCRYPTION_PASSWORD` and `APPSMITH_ENCRYPTION_SALT`values, from docker.env because the backup archive does not include them for security reasons.\n:::\nImport Database\nThe following command can restore the backup archive created by the export command.\n`im`, `import_db`\n\nFirst, copy the archive file into the container using the following command:\n\n`bash\ndocker cp ./appsmith-data.archive appsmith:/appsmith-stacks/data/restore/`\n\nSecond, run the following command to import data from this file:\n\n`bash\ndocker-compose exec appsmith appsmithctl import_db`\n:::info\nYou may also want to copy the `docker.env` from the original instance into this one when you restore.\n:::\n\nCopy the `docker.env` file using the below command:\n\n:::tip\nIf you are in the installation folder and `docker.env` exists in the same folder. If not, please append the path where the file resides to the below command.\n:::\n`bash\ndocker cp ./docker.env appsmith:/appsmith-stacks/configuration/`\n\nRestart the Appsmith server using the following command:\n\n`bash\ndocker-compose exec appsmith supervisorctl restart backend`\nBackup Appsmith Instance\nUse the following command to create a backup archive of the Appsmith instance. The backup includes the database, `docker.env` data, and Git data.\nbackup\nUse the command to backup the archive.\n:::info\nThe backed-up archive can then be used to restore an Appsmith instance to the previous state using the restore command.\n:::\nBefore running this, ensure you are in the docker host root directory where `docker-compose.yml` is located.\n`bash\ndocker-compose exec appsmith appsmithctl backup`\nThe archive file will be stored in the container directory `/appsmith-stacks/data/backup/`. Thanks to the volume configuration in the `docker-compose.yml` file, it should be available on your host machine at `./stacks/data/backup/`\n:::danger\nPlease save the encryption env values, `APPSMITH_ENCRYPTION_PASSWORD` and `APPSMITH_ENCRYPTION_SALT,` from docker.env because the backup archive does not include them for security reasons\n:::\nOptional arguments for backup\nSync Backup (only for Business Edition)\n`bash\nappsmithctl backup --upload-to-s3`\nYou can choose to sync backups to an AWS S3 bucket (only for Business Edition).\n\nAdd the below entries to the `docker.env` file to enable the sync:\n\n`APPSMITH_BACKUP_S3_ACCESS_KEY=<aws access key> \nAPPSMITH_BACKUP_S3_SECRET_KEY=<aws secret key>\nAPPSMITH_BACKUP_S3_BUCKET_NAME=<bucket name> \nAPPSMITH_BACKUP_S3_REGION=<aws bucket region>`\n\nUse the `--upload-to-s3` option for the backup command. The backup command reads bucket details set in the environment variables above and uploads the backup to it.\n\n:::info\nOnce configured correctly, the restore command automatically lists the backups in the bucket and the local backups in the CLI menu.\n:::\nRestore Appsmith instance\nThe following command can be used to restore an Appsmith instance from a backup archive.\n`restore`\n`bash\ndocker-compose exec appsmith appsmithctl restore`\nThe command first lists all the backup archives in the directory `/appsmith-stacks/data/backup/` in ascending/chronological order (the most recent backup archive at the bottom).\n:::note\nYou may see a warning if you restore an instance with an older Appsmith version. You can follow the instructions to update the `docker-compose.yml` file with the correct Appsmith image corresponding to the instance to be restored.\n:::\nEnter the index of the corresponding backup archive you want to use to restore.\n\nIn the restored instance, you may use the existing encryption environment variables `APPSMITH_ENCRYPTION_PASSWORD` and `APPSMITH_ENCRYPTION_SALT` of the current Appsmith instance. You can also choose to add the corresponding variables to the backed-up instance.",
    "tag": "appsmith"
  },
  {
    "title": "Instance Management",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-management/README.mdx",
    "content": "\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nInstance Management\nUpdating to the latest release\nYou can perform a manual update of your Appsmith instance by running the following commands in the Appsmith installation directory.\n```bash\n// To restart appsmith without docker compose\ndocker pull appsmith/appsmith-ce && docker restart appsmith\n// To restart appsmith with docker compose\ndocker-compose pull && docker-compose up -d --force-recreate appsmith\n```\nCheckpoint version and upgrades\nWhen you upgrade manually, you must upgrade to the checkpoint version released between your version and the latest version.\nAppsmith checkpoint versions:\n* v1.9.2\nAccess your Appsmith instance and make the following change to the docker-compose.yml file:\n\n\n\n\n```From:\n```\n\n\n`bash\nservices:\n  appsmith:\n    image: index.docker.io/appsmith/appsmith-ce\n    container_name: appsmith`\nTo:\n`bash\nservices:\n  appsmith:\n    image: index.docker.io/appsmith/appsmith-ce:v1.9.2\n    container_name: appsmith`\n\n\nFrom:\n`bash\nservices:\n  appsmith:\n    image: index.docker.io/appsmith/appsmith-ee\n    container_name: appsmith`\nTo:\n`bash\nservices:\n  appsmith:\n    image: index.docker.io/appsmith/appsmith-ee:v1.9.2\n    container_name: appsmith`\n\n\nSave this file, then run the following command on your shell to restart Appsmith.\n`docker-compose up -d`\nWith this, your server starts with the older version that makes all the necessary schema changes to your Appsmith instance. Once this process has been completed successfully (you can verify this by logging in to your Appsmith instance), you can return to the original version of your `docker-compose.yml` file and resume normal operations.\n\n\n`bash\n  services:\n  appsmith:\n    image: index.docker.io/appsmith/appsmith-ce\n    container_name: appsmith`\n\n\n`services:\n  appsmith:\n    image: index.docker.io/appsmith/appsmith-ee\n    container_name: appsmith`\n\n\nRun the restart command once again: \n`docker-compose up -d`\n:::note \nIf you haven't been using your Appsmith instance for a while, it could be possible that there might be multiple versions that show up in the error message. In such a case, perform the same steps for each version in order, starting from the oldest.\n:::\nSwitching off auto updates\nIn your `docker-compose.yml` file, the `auto_update` container is responsible for periodically checking for updates to Appsmith and applying those updates. If you wish to disable this auto updating, please run the following command:\n`docker-compose rm -s -v -f auto_update`\nThis brings down the `auto_update` container, and update checks are no-longer performed. Note that however, if you run `docker-compose up -d` later, for any reason, then this `auto_update` will be brought up again. You can use that to turn auto updates on again in the future.",
    "tag": "appsmith"
  },
  {
    "title": "Supervisor",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-management/supervisor.md",
    "content": "\nsidebar_position: 1\nSupervisor\nThe container runs multiple processes, including the Appsmith server, Nginx, MongoDB, etc., inside a single Docker container. These processes are started and managed by Supervisor.\nSupervisor comes with a web interface for managing the various processes, available at http://localhost/supervisor, as well as a command-line interface towards the same goal.\n:::info\nThe credentials for supervisor access is defined by the environment variables `APPSMITH_SUPERVISOR_USER` and `APPSMITH_SUPERVISOR_PASSWORD` in the `stacks/configuration/docker.env` file.\n:::\nHere's a screenshot of the web interface listing all the processes managed:\n\nThe command-line interface can also be used to perform operations like restarting the Appsmith server, restarting Nginx, etc. For example, the following command (run in the installation folder) can be used to get the status of all running processes:\n`bash\ndocker-compose exec appsmith supervisorctl status`\nOr to view the last few lines of stderr output of one of the processes:\n`bash\ndocker-compose exec appsmith supervisorctl tail backend stderr`",
    "tag": "appsmith"
  },
  {
    "title": "Kubernetes",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/upgrade-to-business-edition/kubernetes.md",
    "content": "\ndescription: Follow the guide to upgrade the Appsmith Community Edition installation on Kubernetes to Business Edition.\nKubernetes\nThe Business Edition (BE) Helm chart installation includes support for Horizontal Pod Auto Scaling (HPA), which allows Appsmith pods to scale automatically based on the current load. Additionally, this means that Appsmith pods are managed using a Kubernetes deployment resource instead of a stateful-set resource. Follow this guide to upgrade from the Community Edition (CE) to the Business Edition (BE) installed on Kubernetes.\nBackup data\n\nOpen a shell into one of your current Appsmith pods:\n\n`bash\n   kubectl exec -it <pod> bash`\n\nRun the backup command:\n\n`bash\n   appsmithctl backup`\n\nOnce the backup process is complete, the backup archive is available at a location like this:\n\n`/appsmith-stacks/data/backup/appsmith-backup-2022-10-24T07-09-56.930Z.tar.gz`\n\nTo download the backup archive, run the following command:\n\n`bash\n   kubectl cp <namespace>/appsmith-0:<backup_path_from_above> ./appsmith-ce-backup.tar.gz`\n\nTo retrieve the salt and password from the pod, run the following command and copy the values to `values.yaml`.\n\n`bash\n   kubectl exec <pod_name> -- grep /appsmith-stacks/configuration/docker.env APPSMITH_ENCRYPTION_`\nSet the values in the `applicationConfig` section:\n`yaml\n     APPSMITH_ENCRYPTION_PASSWORD: \"<PASSWORD>\"\n     APPSMITH_ENCRYPTION_SALT: \"<SALT>\"`\nUninstall CE Helm chart\nTo uninstall the CE helm chart, run the following command:\n`bash\nhelm uninstall appsmith`\nConfigure parameters\nTo ensure that the Business Edition Helm chart runs, you need to make some changes to the `values.yaml` file. Follow the steps below to configure parameters:\n\nAdd the following snippet to the bottom of your `values.yaml` file. This snippet enables PostgreSQL.\n\n`yaml\n   postgresql:\n     enabled: true\n     auth:\n       username: root\n       password: \"<PASSWORD>\"\n       postgresPassword: \"<POSTGRESQL_PASSWORD>\"\n       database: keycloak`\n\nIf present, remove the highlighted lines, regardless of their value.\n\n`yaml\n   image:\n     # highlight-next-line\n     registry: anything\n     # highlight-next-line\n     repository: anything\n     pullPolicy: Always\n     tag: \"latest\"`\n\n\nTo configure high availability, choose or create a shared file system. For more information, see Create a shared file system.\n\n\nAdd the license key and a few other variables related to keycloak to `applicationConfig` section:\n\n\n`yaml\n     APPSMITH_LICENSE_KEY: \"\"\n     APPSMITH_KEYCLOAK_DB_DRIVER: \"\"\n     APPSMITH_KEYCLOAK_DB_USERNAME: \"\"\n     APPSMITH_KEYCLOAK_DB_PASSWORD: \"\"\n     APPSMITH_KEYCLOAK_DB_URL: \"\"\n     APPSMITH_KEYCLOAK_DB_NAME: \"keycloak\"`\nInstall BE Helm chart\nTo add and deploy the new Helm chart, run the following command:\n`bash\n   helm repo add appsmith-ee https://helm-ee.appsmith.com\n   helm repo update\n   helm install appsmith appsmith-ee/appsmith-ee -n <namespace> -f values.yaml`\nFor more information, see installing Business Edition with Kubernetes.\nRestore backup\nTo restore the backup, follow the below steps:\n\nTo copy the Appsmith backup into the new Appsmith pod, run the following command:\n\n`bash\n   kubectl cp appsmith-backup-2022-10-24T07-09-56.930Z.tar.gz <namespace>/<pod_name>:/appsmith-stacks/data/backup/`\n\nTo copy the keycloak backup into the new Appsmith pod, run the following command:\n\n`bash\n   kubectl cp keycloak_bkp.json <namespace>/<pod_name>:/appsmith-stacks/data/`\n\nTo restore Appsmith data, run the following command:\n\n`bash\n   kubectl exec -it <namespace>/<pod_name> -- appsmithctl restore`\nOnce the data is restored, the pod restarts automatically.\n\nTo restore the keycloak data, run the following command:\n\n`bash\n   kubectl exec -it <namespace>/<pod_name> -- /bin/sh /opt/keycloak/bin/standalone.sh -b 0.0.0.0 -Djboss.socket.binding.port-offset=1 -Dkeycloak.migration.action=import -Dkeycloak.migration.provider=singleFile -Dkeycloak.migration.file=/appsmith-stacks/data/keycloak_bkp.json -Dkeycloak.migration.strategy=OVERWRITE_EXISTING`\nMonitor the output as shown below:\n`08:20:54,708 INFO  [org.keycloak.services] (ServerService Thread Pool -- 54) KC-SERVICES0030: Full model import requested. Strategy: OVERWRITE_EXISTING\n   08:20:54,708 INFO  [org.keycloak.exportimport.singlefile.SingleFileImportProvider] (ServerService Thread Pool -- 54) Full importing from file /appsmith-stacks/data/keycloak_bkp.json\n   08:20:54,715 INFO  [org.keycloak.exportimport.util.ImportUtils] (ServerService Thread Pool -- 54) Realm 'master' already exists. Removing it before import\n   08:20:59,160 INFO  [org.keycloak.exportimport.util.ImportUtils] (ServerService Thread Pool -- 54) Realm 'master' imported\n   08:21:01,704 INFO  [org.keycloak.exportimport.util.ImportUtils] (ServerService Thread Pool -- 54) Realm 'appsmith' imported\n   08:21:01,794 INFO  [org.keycloak.services] (ServerService Thread Pool -- 54) KC-SERVICES0032: Import finished successfully`\nWhen you see the output, as shown above, press ctrl+c to stop.\n\nTo apply the changes, restart using the following command:\n\n`bash\n   kubectl rollout restart deployment/appsmith -n <namespack>`\nCongratulations, you have successfully upgraded to the Appsmith Business Edition Helm chart v2 installation.\nTroubleshooting\nIf you\u2019re having issues with the deployment, please see the debugging deployment errors troubleshooting guide. If you continue to have problems reach out on Discord Server or send an email to support or ask questions on the community forum.",
    "tag": "appsmith"
  },
  {
    "title": "Docker",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/upgrade-to-business-edition/docker.mdx",
    "content": "\ndescription: Follow the steps to upgrade the Appsmith community docker installation to a Business Edition.\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nDocker\nFollow the steps listed below to upgrade your Community Edition (CE) to a Business Edition (BE) installed on docker.\nStep 1: Database backup\nThe Community and Business editions use MongoDB, so you don't have to migrate the database. It's still recommended to backup the Community Edition MongoDB.\n\nEnsure that you backup the database with the docker instance up and running.\n\nStep 2: Update image\nIf you are using `docker run`, head to Step 4: Recreate the instance.\nGo to the directory where the `docker-compose.yml` file is located. Open the `docker-compose.yml` file, and look for the `image:` key. Update the image in the `docker-compose.yml` file from Community Edition (appsmith-ce) to Business Edition (appsmith-ee). \nThe updated file should have the image attribute set as below and save the file:\n`yaml\n  services:\n    appsmith:\n    #highlight-next-line\n      image: index.docker.io/appsmith/appsmith-ee`\nStep 3: Add or replace license key\nGo to the directory `stacks/configuration` and open the `docker.env` file. Add/replace the Business Edition license key and save the file.\n`bash\nAPPSMITH_LICENSE_KEY=<ENTER_THE_LICENSE_KEY>`\nStep 4: Recreate the instance\n\n\n You can recreate the instance by running the below command:\n`bash\ndocker-compose up -d`\n:::note\nIf you have only replaced the license key then you have to run the following command to restart the instance.\n`bash\ndocker-compose restart appsmith`\n:::\nYou have successfully upgraded the docker instance to the Business Edition. Once the container is up and running, you can verify that the business image (appsmith-ee) is in use. Use the `docker ps` command to verify the image name.\n\n\n  Go to the root directory of the docker installation and run the following commands: \n```bash\ndocker rmi appsmith/appsmith-ce -f\nhighlight-next-line\ndocker pull appsmith/appsmith-ee\ndocker rm -f appsmith\nhighlight-next-line\ndocker run -d --name appsmith -p 80:80 -v \"$PWD/stacks:/appsmith-stacks\" appsmith/appsmith-ee\n```\nOnce the download is complete, the server should be up. You should see `Appsmith is Running!` in the Docker logs (`stacks/logs/backend/backend.log`).\n\n ",
    "tag": "appsmith"
  },
  {
    "title": "Upgrade to Business Edition",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/upgrade-to-business-edition",
    "content": "\ndescription: Follow the steps to upgrade the Appsmith installation to a Business Edition.\nUpgrade to Business Edition\n:::info Important\nYou need a License Key to complete the upgrade. Learn more on Business Edition & pricing options.\n:::\nUpgrade your Community Edition to a Business Edition by selecting below installation type.\n\n\n\n\n\n\n\n\nDocker\n\n\n\n\n\n\n\nKubernetes\n\n\n\n\n\nLicense renewal\nThe Appsmith server shuts down once the license key expires. Logs show 'Shutting down. License Check returned invalid.' message.\n\nSend an email to support to raise a renewal request. Once you have a renewed license key, replace it in the configuration file and start Appsmith.\nNext steps\n\nSingle Sign On\n",
    "tag": "appsmith"
  },
  {
    "title": "",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/upgrade-to-business-edition/upgrade-k8s-to-business-edition.mdx",
    "content": "\n\nFollow the steps below to upgrade the Kubernetes Community edition to the Business edition:\n\n Connect to the shell of a running container.\n\n```bash\nkubectl exec -it  bash\n```      \n\n Retrieve the salt and password and add these to values.yaml file of the appsmith-ee helm deployment\n\n```bash\ncat /appsmith-stacks/configuration/docker.env | grep APPSMITH_ENCRYPTION_\n```\n\n Run the following commands to backup the database which is available at `/appsmith-stacks/data/backup`\n\n```bash\n# Run the backup command\nappsmithctl backup\n\n# Exit the shell from the pod\nexit\n\n# Download the backup file\nkubectl cp /appsmith-0: ./\n```\n\n Uninstall the community edition Helm chart by running the following command\n\n```bash\nhelm uninstall appsmith\n```    \n\nRun the following commands to add new Helm chart\n\n```bash\nhelm repo add appsmith-ee https://helm-ee.appsmith.com\nhelm repo update\n``` \n\nPull the latest values.yaml for appsmith-ee and update encryption values\n\n```yaml\n# Pull the latest values.yaml\nhelm show values appsmith-ee/appsmith > values.yaml\n\n# Update encryption values in values.yaml\nAPPSMITH_ENCRYPTION_PASSWORD: \"\"\nAPPSMITH_ENCRYPTION_SALT: \"\"\n```\n\nRun the following commands to deploy the new Helm chart\n\n```bash\nhelm install appsmith appsmith-ee/appsmith -n  -f values.yaml\n```\n \nDownload the backup file and restore the data\n\n```bash\n# Download the backup file \nkubectl cp ./ /:/appsmith-stacks/data/backup/\n\n# Restore\nappsmithctl restore\n```     \n\n Sign in using the Appsmith administrator account and enter your license key to activate the instance.\n",
    "tag": "appsmith"
  },
  {
    "title": "",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/upgrade-to-business-edition/upgrade-docker-to-business-edition.mdx",
    "content": "\n\nFollow the steps below to upgrade the Docker Community edition to the Business edition:\n\n Create a backup of the CE data. Run the below command in the directory with `docker-compose.yml`. The output file is stored in `/appsmith-stacks/data/backup/`\n\n```bash\ndocker-compose exec appsmith appsmithctl backup\n```   \n\n Open the `docker-compose.yml` file and look for the `image:` key. Update the image from Community Edition (`appsmith-ce`) to Business Edition (`appsmith-ee`).\n\n```yaml\nservices:\n  appsmith:\n    #highlight-next-line\n    image: index.docker.io/appsmith/appsmith-ee\n```\n  \n Recreate the instance by running the following command:\n\n```bash\ndocker-compose up -d\n```        \n\nSign in using the Appsmith administrator account and enter your license key to activate the instance. ",
    "tag": "appsmith"
  },
  {
    "title": "AWS AMI",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/installation-guides/aws-ami.md",
    "content": "\ndescription: Deploy Appsmith on AWS with an AMI on the marketplace\nsidebar_position: 4\n\nAWS AMI\nTutorial Steps:\n\nRegister with Amazon Web Services (AWS)\nGenerate an SSH key pair\nCreate an AWS Security Group\nDeploy Appsmith on an AWS cloud server\nFind Application Credentials\nUpdating your Appsmith installation\n\nStep 1: Register With Amazon Web Services\nIf you already have an Amazon Web Services account, you may skip this step.\nPlease follow the steps detailed here in order to create an account on AWS.\nStep 2: Generate an SSH key pair\nIf you already have an SSH key pair for the AWS region you are operating in, you can skip this step.\nPlease follow the steps detailed here to generate a new key-pair. You need this key to SSH into your AWS EC2 instance.\nStep 3: Create an AWS Security Group\nIf you already have an existing security group with ports 80, 443 and 22 open, you can skip this step.\nAppsmith is a web application that requires ports 80 and 443 for HTTP access. It also requires port 22 to be accessible for SSH access. Please follow the steps detailed here to create a new security group.\nWhile creating the the new security group, please follow the steps detailed here to edit the \"Inbound Rules\" and make ports 80, 443 and 22 accessible from anywhere.\nStep 4: Deploy Appsmith On AWS Cloud\nThe next step is to launch a cloud server with the Appsmith Amazon Machine Image (AMI) running on it. The AWS Console lets you do this in just a couple of clicks. Follow these steps:\n\nNavigate to the \"Amazon EC2 dashboard\", select the \u201cAMIs\u201d option in the \u201cImages\u201d menu.\nSearch for the Appsmith Stack by entering the search term \"appsmith\" in the search bar at the top.\nSelect the image in the list of search results and click the \u201cLaunch\u201d button.\nOn the resulting detail page, review the available server sizes. Select the server size you wish to use and click \u201cReview and Launch\u201d to proceed.\nOn the review page, click the \u201cEdit security groups\u201d link.\nOn the \u201cConfigure Security Group\u201d page, choose the option to \u201cSelect an existing security group\u201d. Find the security group you created in Step 3 and select it. Click the \u201cReview and Launch\u201d button to proceed.\nVerify that the correct key pair (created in Step 2) will be used for the server.\nConfirm your selection by hitting the \u201cLaunch Instance\u201d button.\n\nThe AWS Console will now begin spinning up the new server.\n\nThe process usually takes a few minutes. Use the EC2 Dashboard to check the status of the server. Once the server has launched, you will be able to obtain its public IP address from the EC2 Dashboard, as shown below:\n\nAt this point, you should be able to browse to the cloud server, by entering the cloud server IP address or DNS name directly into your browser\u2019s address bar. You should now see your web app home page as shown below:\n\nApplication Credentials\nBy default, Appsmith boots up with default user credentials that allow you to login without needing to sign up. The default username is: `appsmith@example.com`. There are two options for obtaining the password.\nOption 1: Find Credentials By Checking The System Log On The AWS Cloud Console (EC2)\n:::note\nIMPORTANT: The application password is only available in the system log for the first 24 hours after you first start the instance. We strongly recommend that you note it down immediately on the first boot and save it in a safe place, as you will be unable to access the instance console without it. We also recommend that you change it as soon as possible for security reasons.\n:::\n\nGo to your EC2 instances dashboard on AWS\nSelect the instance\nFrom the \u201cActions\u201d drop-down menu, select the \u201cGet System Log\u201d menu item.\n\n\n\nReview the system log until you find the application password. You will also find the default username printed in the logs.\n\n\nOption 2: Find Credentials By Connecting To Your Application Through SSH\nThe default application credentials are stored in a standalone file. To obtain these credentials at any time, follow these instructions:\n\nSSH into your server using your private key\n\nRun the following command to see your application credentials:\n`sudo cat /home/ubuntu/appsmith/credential`\n\n\nUpdating Your Appsmith Installation\nYou can either choose to update the Appsmith installation manually or choose to enable auto-updates.\n:::caution\n   It's recommended to backup the Appsmith instance before performing an update. For more information, see How to create a backup.\n:::\nUpdate Installation Manually\nTo update Appsmith manually, `ssh` into the `ec2` instance with the username `appsmith` and run the following command:\n`cd appsmith && sudo docker-compose pull && sudo docker-compose rm -fsv appsmith && sudo docker-compose up -d`\nEnable Auto-Updates\nIf your Appsmith setup does not have `auto-update` enabled that is the `Watchtower` container is not running along with `Appsmith` in the `host machine`. Follow the steps below to enable `auto-update:`\n\nSSH into the `ec2` instance with username `appsmith`\nChange directory to `/appsmith`\nRun the below command to stop and remove the container and its resources\n\n`docker-compose down`\n\nOpen the `docker-compose.yml` file with any text editor and uncomment the lines 13 to 23\n\n\n\nSave the file\nRun the below command\n\n`docker-compose up -d`\nIf you have updated your Appsmith instance and face any issues. You can rollback the changes and restore the Appsmith instance from a backup archive. \nTroubleshooting\nIf you encounter any errors during this process, check out this guide on debugging deployment errors, if you are still facing an issue please reach out to support@appsmith.com or join Discord Server to directly speak to the Appsmith team.\nFurther Reading\n\nConfiguring Self Hosted Instances\nManaging the Appsmith instance\n",
    "tag": "appsmith"
  },
  {
    "title": "Heroku",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/installation-guides/heroku.md",
    "content": "\ndescription: Deploy appsmith on Heroku with our one click deploy option\nsidebar_position: 7\n\nHeroku\nHeroku is a platform that enables developers to build, run, and operate applications entirely in the cloud. Let's see how to self-host Appsmith on Heroku.\n \n:::info\nThe administrative privileges (Admin settings) are not available due to deployment restrictions with the Heroku container (dynos).\n:::\nDeployment Steps\n\nSign up for a free account on Heroku\nClick the button \nFill in the required `Config Variables` including:\n`APPSMITH_ENCRYPTION_PASSWORD`: Encryption password to encrypt all credentials in the database. You can use any random string (Eg. abcd). The more random, the better.\n`APPSMITH_ENCRYPTION_SALT`: Encryption salt is used to encrypt all credentials in the database. You can use any random string (Eg. abcd). The more random, the better.\n`APPSMITH_MONGODB_URI`: Your Mongo Database URI. Since Heroku doesn't support a managed MongoDB instance, you'll have to create a Mongo DB instance on another service such as https://cloud.mongodb.com. Check out this link for steps on creating a free account with MongoDB Atlas and setting up your first cluster.\n(Optional) Customize the default settings in Heroku\n`App Name`: Optionally select a name for your application (it will be used in the application URL)\n`Runtime Selection`: Select which region your app should run in (the United States or Europe)\n`Config Variables`:\nSign Up\n`APPSMITH_SIGNUP_DISABLED`: Set this value to true to disable allowing users to signup on your Appsmith instance. Users can only sign up if a workspace administrator invites them.\nEmail Configuration:\n`APPSMITH_MAIL_ENABLED`: Set this value to true to enable email sending (value should be `true/false` only).\n`APPSMITH_MAIL_FROM`: Email ID using which emails will be sent from your installation.\n`APPSMITH_REPLY_TO`: Email ID to which all email replies will be sent.\n`APPSMITH_MAIL_HOST`: The host endpoint for the SMTP server.\n`APPSMITH_MAIL_SMTP_TLS_ENABLED`: Set this value to enable TLS for your SMTP server (value should be `true/false` only.)\n`APPSMITH_MAIL_USERNAME`: SMTP username.\n`APPSMITH_MAIL_PASSWORD`: SMTP password.\nOAuth Configuration:\nGoogle OAuth:\n`APPSMITH_OAUTH2_GOOGLE_CLIENT_ID`: Client ID provided by Google for OAuth2 login.\n`APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET`: Client secret provided by Google for OAuth2 login.\n\n\nGithub OAuth2:\n`APPSMITH_OAUTH2_GITHUB_CLIENT_ID`: Client ID provided by Github for OAuth2 login.\n`APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET`: Client secret provided by Github for OAuth2 login.\n\n\n`APPSMITH_GOOGLE_MAPS_API_KEY`: Google Maps API key that is required if you wish to leverage Google Maps widget. Read more here.\n`APPSMITH_DISABLE_TELEMETRY`: We want to be transparent and request that you share anonymous usage data with us. This data is purely statistical and helps us understand your needs & provide better support to your self-hosted instance. You can read more about what information is collected in our documentation here.\n\n\n\nAfter Heroku finishes setting up the app, click \"View,\" and your Appsmith should be up and running. It will take you to the account creation page, where you can enter credentials to create an account and get started.\n:::note\n* We use the Heroku Redis add-on for caching, which requires your account to have billing information, but we use the free plan of this add-on so that it will charge you nothing. Please make sure your account has already finished providing billing information.\n* You may need to wait 2-3 minutes before accessing the application as Heroku may take a while to spin up the dyno and start the Appsmith application.\n:::\nCustom Domain\nIf you wish to link a custom domain (Eg: https://appsmith.yourcompany.com)to your Appsmith installation, please follow these steps below:\n\nGo to the `Settings` tab in your Heroku app.\n\n\n\nClick the `Add domain` button in the `Domains` section.\n\n\n\nInput your domain name & click `Next`.\n\n\n\nHeroku will provide you with a `DNS target` to which you can map your domain.\n\n\n\nNow, go to your DNS provider and make sure that your custom DNS Record (`Eg appsmith.yourcompany.com`) is updated to map to the `DNS Target.`\n\n`//For example,\nChange the CNAME records of your domain like this:\nHost: www\nPoints to: \"Paste the DNS Value\"\nTTL: 1 hour`\n\nOnce you finish, now you can access Appsmith from your custom domain.\n\n:::note\n* Once you use a custom domain, You might want to set up SSL for your dyno. Please check the official document of Heroku on how to configure SSL.\n* Your dyno will need to be upgraded to at least a `hobby` type to use this feature of Heroku.\n:::\nRe-Deploy your App using Heroku CLI\nTo re-deploy your app (re-build & re-run), make sure you have Docker & Heroku CLI setup locally. Docker is required to build the updated image locally before being pushed to the Heroku platform.\nThen follow the steps below:\n\n\nPull the Appsmith repository from Github & move to the `heroku` folder:\n`git clone --branch master https://github.com/appsmithorg/appsmith\n  cd ./appsmith/deploy/heroku`\n*   For existing repository, pull the fresh Appsmith image:\n`docker pull appsmith/appsmith-ce`\n*   Login to Heroku CLI.\n`heroku login`\n*   Login to Container Registry.\n`heroku container:login`\n*   Get your application name.\n`heroku apps`\n*   Push your Docker-based app.\n`heroku container:push web -a <Your App Name>`\n*   Deploy the changes.\n`heroku container:release web -a <Your App Name>`\n\n",
    "tag": "appsmith"
  },
  {
    "title": "Azure Container Instance",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/installation-guides/azure-aci.md",
    "content": "\ndescription: Deploy Appsmith on Azure Container Instance Service\nsidebar_position: 4\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nAzure Container Instance\nAzure Container Instances (ACI) is a simple and efficient way to run containers in the cloud. This document guides you through launching an ACI instance and running an Appsmith container. The data persists in Azure Storage Account File Share.\n:::note \nAzure only supports CIFS file shares and doesn't support NFS file shares.\n:::\nPrerequisites\u200b\nBefore launching an ACI instance, you need to have an Azure subscription and have the Azure CLI installed on your machine. \n\nAzure Subscription - If you don't have an Azure subscription, you can sign up for a free trial\nAzure CLI \n\nConfigure variables\nUpdate the following values starting with 'my' where necessary, and enter them in your shell/terminal.\n`bash\nresourceGroupName=\"myResourceGroup\"\naciName=\"myAppsmithACI\"\nstorageAccountName=\"mystorageaccount$RANDOM\"\naciLocation=\"southindia\"  \nfileShareName=\"myFileShareName\"\ndnsNameLabel=\"myDNSLabel\"`\nCreate a resource group (optional)\nYou can skip this step if you want to use an existing resource group.\n`bash\naz group create --name $resourceGroupName --location $aciLocation`\nCreate a storage account (optional)\nYou can skip this setp if you want to use an existing storage account.\n`bash\naz storage account create --resource-group $resourceGroupName --name $storageAccountName --location $aciLocation --sku Standard_LRS`\nGet the storage account key\n`bash\nstorageAccountKey=$(az storage account keys list --resource-group $resourceGroupName --account-name $storageAccountName --query \"[0].value\"  --output tsv)`\nCreate a file share\n`bash\naz storage share create --name $fileShareName --account-name $storageAccountName --account-key $storageAccountKey`\nCreate Appsmith ACI\n\n\n`bash\n az container create \\\n  --resource-group $resourceGroupName \\\n    --name $aciName \\\n    --image appsmith/appsmith-ce \\\n    --ip-address public \\\n    --dns-name-label $dnsNameLabel \\\n    --ports 80 443\\\n    --cpu 2 \\\n    --memory 4 \\\n    --azure-file-volume-account-name $storageAccountName \\\n    --azure-file-volume-account-key $storageAccountKey \\\n    --azure-file-volume-share-name $fileShareName \\\n    --azure-file-volume-mount-path \"/appsmith-stacks/\"`\n\n\n`bash\naz container create \\\n  --resource-group $resourceGroupName \\\n    --name $aciName \\\n    --image appsmith/appsmith-ee \\\n    --ip-address public \\\n    --dns-name-label $dnsNameLabel \\\n    --ports 80 443 \\\n    --cpu 2 \\\n    --memory 4 \\\n    --azure-file-volume-account-name $storageAccountName \\\n    --azure-file-volume-account-key $storageAccountKey \\\n    --azure-file-volume-share-name $fileShareName \\\n    --azure-file-volume-mount-path \"/appsmith-stacks/\" \\\n  --environment-variables 'APPSMITH_LICENSE_KEY'='<Your Appsmith License>'`\n\n\nYou now have your Appsmith application running in the cloud with Azure Container Instances. If you encounter any errors along the way, follow the troubleshooting guide for assistance. \nContainer logs\nTo troubleshoot a container or the application it runs or view its output, start by accessing the logs of the container instance using the az container logs command.\n`bash\naz container logs --resource-group myResourceGroup --name mycontainer`\nUpdate Appsmith\n:::caution\nCreate a backup of the Appsmith instance before performing an update. See How to create a backup.\n:::\n\nNavigate to the ACI on the Azure Portal\nClick the ACI running Appsmith\nClick on the Restart button\nWait until the ACI restarts with the latest Appsmith release.\n\nIf you have updated your Appsmith instance and face any issues, you can rollback the changes and restore the Appsmith instance from a backup archive.\nTroubleshooting\nIf there are any errors during this process, follow the guide on debugging deployment errors. If there are still issues, please contact support@appsmith.com or join the Appsmith Discord Server to speak to the Appsmith team directly.\nFurther reading\n\nConfiguring Self Hosted Instances\nManaging the Appsmith instance\n",
    "tag": "appsmith"
  },
  {
    "title": "AWS ECS on EC2",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/installation-guides/aws-ecs.md",
    "content": "\ndescription: Deploy Appsmith on ECS cluster using EC2 instance.\nsidebar_position: 5\n\nAWS ECS on EC2\nThis document guides you through installing Appsmith using AWS ECS on EC2\nPrerequisites\n1: Register with Amazon Web Services\nIf you already have an Amazon Web Services account, you may skip this step.\nPlease follow the steps detailed here to create an account on AWS.\n2: Generate an SSH key pair\nIf you already have an SSH key pair for the AWS region you are operating in, you can skip this step.\nPlease follow the steps detailed here to generate a new key pair. You need this key to SSH into your AWS EC2 instance.\n3: Create an AWS security group\nIf you already have an existing security group with ports 80, 443, 22, and 9001 open, you can skip this step.\nAppsmith is a web application that requires ports 80 and 443 for HTTP access, port 22 to be accessible for SSH access, it also requires port 9001 to be accessible for the supervisord UI. Please follow the steps detailed here to create a new security group.\nWhile creating the new security group, please follow the steps detailed here to edit the \"Inbound Rules\" and make ports 80, 443, 22 and 9001 accessible from anywhere.\n\nECS overview\n\nDeploy Appsmith (using EC2 launch type):\n\nCreate an ECS Cluster\nCreate Task and Container Definitions\nCreate and Run an ECS Service\n\n:::info Important\n Switch to the old AWS console UI to follow the steps in this tutorial.\n:::\nStep 1: Create an ECS Cluster\n\nNavigate to Amazon ECS and choose clusters on the side bar and select `Create Cluster`.\n\n\n\n\nChoose EC2 Linux + Networking, and select the next step.\n\n\nEnter your cluster name\n\n\nInstance configuration:\n\nSelect the provisioning model as On-Demand Instance.\nSelect the server size you wish to use, and set the Number of instances as 1.\nSelect the Amazon Linux2 AMI for the EC2 AMI ID dropdown, and enter the required EBS volume size.\nSelect a Key pair. Please refer to Prerequisite 2, if you haven't already created one.\n\n\n\n\nNetworking Section\n\nSelect the default VPC followed by selecting the first subnet from the drop-down.\nSelect the security group that you created in [Create an AWS security group] (#3-create-an-aws-security-group) section.\n\n\n\n\nEnable container insights (this gives CloudWatch monitoring and helps to debug).\n\n\nLeave the Container instance IAM role as default (ecsInstanceRole), if you don't have one AWS creates it for you.\n\n\nHit the Create button. It may take a minute for your cluster to be ready.\n\n\n\nStep 2: Create task and container definitions\nOnce the cluster is created, you need to create a task that runs on the cluster created in Step 1.\n\nOn the sidebar, choose Task Definitions and select Create new Task Definition.\nChoose EC2 as the launch type, and proceed to the next step.\nConfigure task and definition\nEnter the task definition name.\nLeave the Task role blank.\n\nSelect the default Network mode\n\n\n\nSelect the default Task execution IAM role (ecsTaskExecutionRole). AWS creates one for you if you don't have one.\n\n\nSet the required task size (memory & CPU)\n\n\nGo to the Volumes section and add a new volume. To persist data on the Appsmith installation you have two options.\n\nBind mount directory on the host ec2 instance. The data is tied to the lifecycle of the host ec2 instance/ecs cluster. Enter the Name as `appsmith_stack`, set Volume type as Bind Mount, and set the Source path to `/Appsmith/stacks`.\n  \n\nAmazon EFS volumes- The data is independent of the lifecycle of the host ec2 instance/ecs cluster.\n\n\nCreate an EFS filesystem by following the steps below:\n\nNavigate to AWS EFS on the console and hit the Create button.\nSet the parameters like VPC (should be the same as the ECS cluster) and storage class as suiting your requirement.\nClick on the EFS created and navigate to the Network tab to ensure mount-target is created in the same availability-zone as that of the ECS cluster.\nCreate a new security group to allow inbound and outbound NFS traffic.\nAttach the security group to the ECS cluster and the EFS mount-target.\n\n\n\nEnter the Name as `appsmith_stack`, set Volume type as EFS and set the File System ID to the EFS filesystem created in the prequisite step. Leave the remaining fields with the default values.\n\n\n\n\n\n\n\nConfigure Appsmith container.\n\nClick the Add container button.\nEnter the container name, and set the Image to `appsmith/appsmith-ce`\nAdd port mappings for the ports 80->80,443->443\nSet the Mount points Source volume to `appsmith_stack` and set the Container path to `/appsmith-stacks`\n\n\n\nYou can configure the Environment Values for the Appsmith in the Environment Section. For sensitive values it's recommended you create secrets and set the `env` value using the ValueFrom option by specifying the `arn` of the secret created. You can either add the Appsmith Business Edition License Key as plain text to the `APPSMITH_LICENSE_KEY` variable or create a new secret for it and add that secret into the field. For more information, see How to create a new secret on Amazon official documentation.\n\n\n\nEnable auto-configure CloudWatch Logs for log configuration.\nHit Add.\n\n\n\nFinally, hit the Create button.\n\n\n\nStep 3: Create and run an ECS service\n\nNavigate to the clusters dashboard and click the ECS cluster created in [Step 1]/(aws-ecs#step-1-create-an-ecs-cluster).\nOn the cluster details, under the Services tab hit the create button.\n\n\n\n\nConfigure Service\n\nSelect EC2 as Launch Type.\nSelect the Task Definition created in Step 2 with the latest revision.\nSelect the Cluster created in Step 1.\nEnter the service name.\nSelect the Daemon Service type.\nSet the Minimum Healthy Percent to 40.\nLeave the remaining fields and sections with the default values, and proceed to the next step.\n\n\n\n\nConfigure network - Proceed to the next step with the default configurations.\n\n\n\n\nSet Auto Scaling - Proceed to the next step with the default configuration.\n\n\n\nReview the Service configurations and hit the Create Service button.\n\n\n\nThe following screen is shown with the launch status, click the View Service button.\n\n\n\nYou are directed to the service detail page. Your task is listed under the Tasks tab on the cluster. refresh the table until the status is RUNNING.\n\n\n\nClick on the task to get the details of your running service.\n\n\n\nFinally, click the EC2 instance id to navigate to the EC2 console with your ECS instance (which is basically an EC2 instance running the container service) listed.\n\n\n\nFind the public IP address or DNS name and enter it on your browser to see Appsmith's welcome page.\n\n\n:::note\n In this guide, If you are using the embedded MongoDB, the container persistence is tied up with the EC2 instance lifecycle.\n:::\nUpdate Appsmith\n:::caution\n   It's recommended to backup the Appsmith instance before performing an update. For more information, see How to create a backup.\n:::\n\nNavigate to the ECS cluster from the ECS dashboard.\nIn the Tasks Tab, click the respective task.\nOn the Task Page, hit the stop button.\nWait until the new task is deployed automatically.\n\nIf you have updated your Appsmith instance and face any issues. You can rollback the changes and restore the Appsmith instance from a backup archive. \nTroubleshooting\nIf you encounter any errors during this process, check out the debugging deployment errors, if you are still facing an issue please reach out to support@appsmith.com or join the Discord Server to directly speak to the Appsmith team.\nFurther reading\n\nConfiguring ECS Installations\nManaging the Appsmith instance\n",
    "tag": "appsmith"
  },
  {
    "title": "AWS ECS on Fargate",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/installation-guides/aws-ecs-on-fargate.md",
    "content": "AWS ECS on Fargate\nThis document guides you through installing Appsmith using AWS ECS on Fargate.\nPrerequisites\n\n\nRegister with Amazon Web Services - You may skip this step if you already have an Amazon Web Services account.\n\n\nCreate a security group: - You can skip this step if you already have an existing security group with ports 80 and 443. Appsmith requires ports 80 and 443 for HTTP access. To edit the Inbound Rules and make ports 80 and 443 accessible from anywhere, see Add rules to a security group\n\n\nProvision of an Application Load Balancer - You can skip this step if you already have an ALB, but ensure that the listeners for ports 80 and 443 are available.\n\n\nCreate an EFS filesystem:\n\nNavigate to AWS EFS on the console and hit the Create button.\nSet the parameters like VPC (should be the same as the ECS cluster) and storage class as suiting your requirement.\n\n:::caution\nEnsure that the EFS, ECS cluster, and Fargate instances are all in the same VPC.\n:::\n\nClick on the EFS created and navigate to the Network tab to ensure mount-target is made in the same availability zone as the ECS cluster.\nCreate a new security group to allow inbound and outbound NFS traffic.\nAttach the security group to the EFS mount-target.\n\n\n\nCreate the ECS task execution role:\n\nGo to the IAM console and select Roles.\nClick Create Role.\nSelect trust entity:\nSelect the Trusted entity type as AWS Service.\nSelect Elastic Container Service Task as the use case, and hit next.\n\n\nAdd permission\nAdd AmazonECSTaskExecutionRolePolicy.\nAdd SecretsManagerReadWrite.\nClick Create Policy to open the policy editor, and choose JSON mode.\n`{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n  {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n          \"ssmmessages:CreateControlChannel\",\n          \"ssmmessages:CreateDataChannel\",\n          \"ssmmessages:OpenControlChannel\",\n          \"ssmmessages:OpenDataChannel\"\n      ],\n      \"Resource\": \"*\"\n  }\n]\n  }`\n\n\n\n\n\nProvision an external MongoDB v5.0 instance - Generate the MongoDB URI and ensure the credential used has the ClusterMonitor Role attached.\n\n\n:::danger\nPlease don't run the built-in embedded MongoDB with the EFS, as it could cause the Appsmith instance to crash.\n:::\nECS overview\n\nDeploy Appsmith\n\nCreate an ECS Cluster\nCreate Task and Container Definitions\nCreate and Run an ECS Service\n\nSwitch to the old AWS console UI to follow the steps below.\nCreate an ECS cluster\n\n\nNavigate to Amazon ECS, choose clusters on the sidebar, and select `Create Cluster`.\n\n2. Choose Networking Only, and select the next step.\n3. Enter your cluster name.\n4. Create a VPC by defining the CIDR block and subnets. You can skip this step if you already have a VPC.\n5. Enable CloudWatch Container Insights.\n6. Hit the Create button.\n\n\nCreate task and container definitions\nOnce the cluster is created, you need to create a task that runs on the cluster formed in Step 1.\n\nOn the sidebar, choose Task Definitions and Create a new Task Definition.\nChoose Fargate as the launch type, and proceed to the next step.\nEnter the task definition name.\nSet the task role to None.\nSelect the default Network mode.\nSet Linux as the Operating system family.\nSet the Task Execution Role to the one created in the prerequisite step.\nSelect the default Task execution IAM role created in the Prerequisite step.\nSet the required task size for memory & CPU (Minimum requirement: 2vCPU and 4 GB Memory).\n\nGo to the Volumes section and add a new volume. Enter the Name as `appsmith_stack`, set the Volume type as EFS, and set the File System ID to the EFS filesystem created in the prerequisite step. Leave the remaining fields with the default values.\n\n\n\nConfigure Appsmith container.\n\nClick the Add container button.\nEnter the container name, and set the Image to `appsmith/appsmith-ce`.\nAdd port mappings for the ports 80->80,443->443.\nSet the Mount points Source volume to `appsmith_stack` and set the Container path to `/appsmith-stacks`.\n\n\n\nYou can configure the Environment Values for the Appsmith in the Environment Section. For sensitive values, it's recommended you create secrets and set the `env` value using the ValueFrom option by specifying the `arn` of the secret created.\n\n:::info\nFor Business Edition, you can add the Appsmith Business Edition License Key as plain text to the `APPSMITH_LICENSE_KEY` variable or add a new secret to the field. For more information, see How to create a new secret on Amazon's official documentation.\n:::\n\n\nSet the following Environment Variables:\n\n`APPSMITH_ENCRYPTION_PASSWORD`: Encryption password to encrypt all credentials in the database. You can use any random string (Eg. test). The more random, the better.\n`APPSMITH_ENCRYPTION_SALT`: Use encryption salt to encrypt all credentials in the database. You can use any random string (Eg. test). The more random, the better.\n`APPSMITH_SUPERVISOR_PASSWORD` : Password to access supervisor console to monitor the processes in the Appsmith container.\n`APPSMITH_MONGODB_URI` : Enter the URI of the external MongoDB v5 instance by adding a new env key.\n\n\n\n\nConfigure the Healthcheck to the following settings:\n\nCommand: `CMD-SHELL, curl http://localhost/api/v1/health`\nInterval: 10 seconds\nTimeout : 5 seconds\nStart periods: 160 seconds\nRetries: 3\n\n\n\n\nEnable auto-configure CloudWatch Logs for log configuration.\n\nHit Add.\nFinally, hit the Create button.\n\n\n\nCreate and run an ECS service\n\nNavigate to the clusters dashboard and click the ECS cluster created in Step 1.\nOn the cluster details, under the Services tab hit the create button.\n\n\n\n\nConfigure the Service:\n\nSelect Fargate as Launch Type.\nSelect the Task Definition created in Step 2 with the latest revision.\nSelect the Cluster created in Step 1.\nEnter the service name.\nSelect the Replica Service type and the Number of Tasks to 1.\nLeave the remaining fields and sections with the default values, and proceed to the next step.\n\n\n\nConfigure the network:\n\nSelect the VPC and the subnets.\nUpdate the security group to add the security group created in the prerequisite step.\nLoad Balancing:\nSelect Application Load Balancer.\nSelect the ALB created in the prerequisite step.\nSet the Listener for port 80 and click Add to the load balancer.\nCreate a new Production listener port for port 80.\nSet the Production listener protocol to HTTP.\nSet a Target Group to create new.\nSet the Health Check pattern to /api/v1/health and evaluation order to 1.\nRepeat the same steps to add a Listener for port 443 but with HTTPS protocol.\n\n\n\n\nSet Auto Scaling - Proceed to the next step with the default configuration.\n\n\nReview the Service configurations and hit the Create Service button.\n\n\nThe following screen is shown with the launch status, click the View Service button.\n\n\nYou are directed to the service detail page. Your task is listed under the Tasks tab on the cluster. Refresh the table until the status is RUNNING.\n\n\nObtain the DNS of your ALB and hit it with your browser to access the Appsmith instance.\n\n\nTroubleshooting\nIf you encounter any errors during this process, check out the debugging deployment errors. If you are still facing an issue, please reach out to support@appsmith.com or join the Discord Server to speak to the Appsmith team directly.\nFurther reading\n\nConfiguring ECS Installations\nManaging the Appsmith instance\nTutorials\n",
    "tag": "appsmith"
  },
  {
    "title": "Ansible",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/installation-guides/ansible.md",
    "content": "\ndescription: Deploy Appsmith to a remote host using Ansible\nAnsible\nDeployment Steps:\n\nInstall Ansible\nAnsible inventory setup\nAnsible configuration vars setup for Appsmith\nRun the Ansible playbook\n\nStep 1: Install Ansible\n\nYou can skip this step if you already have ansible intalled.\n\nThere are two options for installing Ansible:\n\nOption 1: Using OS specific Package Managers.\n\nTo install on Ubuntu, you can run the following commands:\n`$ sudo apt update\n  $ sudo apt install software-properties-common\n  $ sudo add-apt-repository --yes --update ppa:ansible/ansible\n  $ sudo apt install ansible`\n  * Please refer to Ansible's official installation guide for other operating systems.\n*   Option 2: Using `pip`:\n`$ sudo pip install ansible`\n\nIf you do not have pip installed on your system, please refer to Ansible's official guide on installing with pip.\n\n\n\nStep 2: Ansible inventory setup\n\n\nClone the Appsmith repository to your machine & move to the ansible playbook folder.\n`$ git clone https://github.com/appsmithorg/appsmith.git\n$ cd ./appsmith/deploy/ansible/appsmith_playbook`\n2.  Create the `inventory` file.\n`$ touch inventory`\n3.  To configure the `inventory` file, open it with your editor and add the hostname or FQDN of the server(s) you want to deploy Appsmith, along with the ansible port and ansible_user.\nThe inventory file should follow the given format:\n`appsmith ansible_host={{ SERVER_HOST }} ansible_port={{ SERVER_PORT }} ansible_user={{ SERVER_USER }}`\nIf you are using SSH keypairs for authenticating your SSH connections to your server. You can specify your ssh private key file in the `inventory` file using `ansible_ssh_private_key_file`\n`appsmith ansible_host={{ SERVER_HOST }} ansible_port={{ SERVER_PORT }} ansible_user={{ SERVER_USER }} ansible_ssh_private_key_file={{ SSH_PRIVATE_KEY_FILE }}`\n\n\nStep 3: Ansible configuration vars setup for Appsmith\n\nOpen `appsmith-vars.yml` file with your editor.\n   There are some variables that will need input from you to get the application start correctly\n`install_dir`: The absolute path of your app's installation folder on the server (required). Default value: `~/appsmith`\n\nStep 4: Run the Ansible playbook\nYou can run the ansible playbook with the following command:\n`$ ansible-playbook -i inventory appsmith-playbook.yml --extra-vars \"@appsmith-vars.yml\"`\nThe command above will use the host information from the `inventory` file & feed your configuration vars from `appsmith-vars.yml` before running the playbook\nWhen it's all done, provided all went well and no parameters were changed, you should be able to visit your app on browser using your `custom_domain` or by your `SERVER_HOST` (if you didn't provide value for `custom_domain` variable )\n\nNote: You can put your `inventory` file in other folder and then specify its path with the `-i` flag, for more detail, please check Ansible Inventory documentation\n\nTroubleshooting",
    "tag": "appsmith"
  },
  {
    "title": "CloudJiffy",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/installation-guides/cloudjiffy.md",
    "content": "\nsidebar_position: 8\nCloudJiffy\nCloudJiffy is a Platform-as-a-Service (PaaS) provider. It provides auto-scalable, instant, and fully redundant deployment for your application.\nOne-Click Deployment\nYou can use one-click deployment to deploy Appsmith on the CloudJiffy platform.\nA quick and easy way to proceed is to navigate to the marketplace on CloudJiffy and search for Appsmith. Give a meaningful name to the environment where you\u2019ll want to deploy Appsmith, and then click install.\nHere\u2019s an exhaustive guide provided at CloudJiffy to deploy Appsmith on their platform.",
    "tag": "appsmith"
  },
  {
    "title": "DigitalOcean",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/installation-guides/digitalocean.md",
    "content": "\ndescription: >-\n  DigitalOcean is a cloud computing vendor that offers an Infrastructure as a\n  Service (IaaS) platform for software developers.\nsidebar_position: 6\n\nDigitalOcean\n \nYou can deploy Appsmith on DigitalOcean using the Appsmith droplet from Digital Ocean\u2019s 1-Click Apps Marketplace and host it on our custom domain.\nLogin to your DigitalOcean account to get started. If you are a new user, use this link and get a $25 credit on DigitalOcean!\nDeploying Appsmith on DigitalOcean\nOnce logged in, follow the steps listed below:\n\nFind Appsmith from the DigitalOcean marketplace here.\nClick on the Create Appsmith Droplet button; this will redirect you to a new page where you can set up all your configurations.\n\n\nFor a base configuration, use the following settings.\n`bash\nShared CPU: Basic\nCPU Options: Regular Intel with SSD (1 GB CPU / 25GB SSD / 1000GB Transfer )\nData Center Region: (Choose the nearest location to your place)\nAdditional Options: IPV6 Enabled`\n\n\nIn the authentication section, you can either choose SSH or set up a password if you want to log in to your server.\nLastly, click on the Create Droplet button.\n\n\nIt will take a few minutes (approximately 3-4 minutes) to install Appsmith on the DigitalOcean droplet. You\u2019ll find the deployed droplet on your dashboard with all the details of the selected configuration.\n\nTo use Appsmith, copy the IPv4 address from the settings and open it in a new tab. This will take you to Appsmith\u2019s login page. Since this is a new instance, click on sign up to create a new account on Appsmith.\n\nUpdating to latest Appsmith release\n:::caution\n   It's recommended to backup the Appsmith instance before performing an update. For more information, see How to create a backup.\n:::\nSSH into your droplet and run the following command:\n`cd /root/appsmith && docker-compose pull && docker-compose rm -fsv appsmith && docker-compose up -d`\nIf you have updated your Appsmith instance and face any issues. You can rollback the changes and restore the Appsmith instance from a backup archive. \nTroubleshooting\nIf you encounter any errors during this process, check out our guide on debugging deployment errors, if you are still facing an issue please reach out to support@appsmith.com or join our Discord Server to directly speak to the Appsmith team!\nFurther Reading\n\nConfiguring Self Hosted Instances\nManaging the Appsmith instance\n",
    "tag": "appsmith"
  },
  {
    "title": "Restack",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/installation-guides/restack.md",
    "content": "Restack\nRestack is platform to discover and deploy production ready open source tools in minutes.\n You only need to bring your AWS account and within minutes, your favorite open source tool would be deployed on Kubernetes, on your own cluster.\n Restack is made so that developers can concentrate on coding and don\u2019t have to worry about DevOps. \n Restack provides auto scalable, cloud-native, instant, production-ready deployment of open source tools.\n## One-click deployment\nYou can deploy Appsmith on the Restack platform with just one click.\nThe easiest way to do this is\n\nLogin to Restack with your GitHub or email.\nConnect your AWS account to create a cluster. \nSearch for Appsmith in the restack console and click to trigger the deployment. \n\nYou could also follow the detailed guide for deploying Appsmith available on Restack docs.\nTroubleshooting\nIf you encounter any errors during this process, please reach out to support@appsmith.com or raise your query on Discord Server.\nNext steps\n\nConfiguring Self Hosted Instances\nManaging the Appsmith instance\n",
    "tag": "appsmith"
  },
  {
    "title": "",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/installation-guides/docker/install-business-edition.mdx",
    "content": "\n\nFollow the steps listed below to install Appsmith on Docker:\n\nDownload and place the docker-compose.yml file in the Appsmith installation folder or run the cURL command.\n\n```bash\ncurl -L https://bit.ly/docker-compose-be -o $PWD/docker-compose.yml\n```   \n\nStart the Docker container using the command (You may need to run command with `sudo`).\n\n```bash\ndocker-compose up -d\n``` \n\nCheck the Docker logs for the message `Appsmith is Running!` using the command `docker logs -f appsmith` and confirm that the Appsmith container is ready.\n\nCreate an Appsmith account and enter your license key to activate the instance.",
    "tag": "appsmith"
  },
  {
    "title": "Migrate from Multi-Container setup",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/installation-guides/docker/migrate.md",
    "content": "\ndescription: >-\n  This guide will help you migrate your Appsmith instance running on the old\n  stack (multiple containers), to the new stack (single container).\n\nMigrate from Multi-Container setup\nLet's say your current Appsmith instance is located in the folder `~/appsmith-old`, and you'd like the new setup be at `~/appsmith-new`. (This are just example folder names, please use what you prefer.)\nThen we can see a rough folder structure like this for `~/appsmith-old`:\n`~/appsmith-old\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 certbot\n\u2502   \u2502   \u251c\u2500\u2500 conf\n\u2502   \u2502   \u2514\u2500\u2500 www\n\u2502   \u251c\u2500\u2500 mongo\n\u2502   \u2502   \u251c\u2500\u2500 db\n\u2502   \u2502   \u2514\u2500\u2500 init.js\n\u2502   \u2514\u2500\u2500 nginx\n\u2502       \u2514\u2500\u2500 app.conf.template\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 docker.env\n\u2514\u2500\u2500 encryption.env`\nAnd like this for `~/appsmith-new` (after the steps in this document are done):\n`~/appsmith-new\n\u251c\u2500\u2500 docker-compose.yml\n\u2514\u2500\u2500 stacks\n    \u251c\u2500\u2500 configuration\n    \u2502   \u251c\u2500\u2500 docker.env\n    \u2502   \u2514\u2500\u2500 mongo-init.js\n    \u251c\u2500\u2500 data\n    \u2502   \u251c\u2500\u2500 backup\n    \u2502   \u251c\u2500\u2500 certificate\n    \u2502   \u251c\u2500\u2500 mongodb\n    \u2502   \u2514\u2500\u2500 restore\n    \u2514\u2500\u2500 letsencrypt\n        \u251c\u2500\u2500 accounts\n        \u251c\u2500\u2500 archive\n        \u251c\u2500\u2500 conf\n        \u251c\u2500\u2500 csr\n        \u251c\u2500\u2500 keys\n        \u251c\u2500\u2500 live\n        \u251c\u2500\u2500 options-ssl-nginx.conf\n        \u251c\u2500\u2500 renewal\n        \u251c\u2500\u2500 renewal-hooks\n        \u251c\u2500\u2500 ssl-dhparams.pem\n        \u2514\u2500\u2500 www`\nNow let's go over the steps to be performed.\n1. Shutdown old appsmith instance\n\ud83d\udea8 Please ensure you are aware of the following facts before proceeding:\n\nThis whole migration should take under 25-30mins, usually less than that.\nAll users who are currently logged-in, will be logged out. They can just log back in, once the new instance is up and running just fine.\nDepending on your configuration, any `docker-compose` and `docker` commands below might need to be run with a `sudo` at the start.\nPlease check the output of commands to see if there's any errors, after running a command, and before proceeding to next steps.\n\nLet's first define a couple of variables that'll be useful during our migration. Please use the appropriate paths in place of `~/appsmith-old` and `~/appsmith-new`.\n`old_path=~/appsmith-old\nnew_path=~/appsmith-new`\nBefore we can start the migration, please stop the old server with the following command:\n`cd \"$old_path\"\ndocker-compose stop appsmith-internal-server`\n2. Export database\nTo export data from the running `MongoDB` database, we use the `mongodump` command, which will create a `gzip` archive with all the data. This file will then be copied to the new setup and imported.\nCreate backup folder to store dump file:\n`cd \"$old_path\"\ndocker-compose exec mongo mkdir -pv /data/db/backup`\nDumping MongoDB data and compressed into a gzip file:\n`docker-compose exec mongo sh -c 'mongodump --uri=\"$APPSMITH_MONGODB_URI\" --archive=/data/db/backup/appsmith-data.archive --gzip'`\n3. Migrate Configuration\nThe new setup uses a single `docker.env` file for all environment variable configuration.\nLet's create the folder structure needed:\n`mkdir -pv \"$new_path\"/stacks/configuration`\nMigrate configuration from old location:\n`cat \"$old_path\"/docker.env \"$old_path\"/encryption.env >> \"$new_path\"/stacks/configuration/docker.env`\nNow, in the file `\"$new_path\"/stacks/configuration/docker.env`:\n\nUnless you are using an external MongoDB database, in `APPSMITH_MONGODB_URI`, please change the `@mongo` part to `@localhost`, and remove the query params (the `?` and everything after it). For example, if the current value is `mongodb://root:rootpass@mongo/appsmith?retryWrites=true&authSource=admin`, change it to be just `mongodb://root:rootpass@localhost/appsmith`.\nUnless you are using an external Redis instance, in `APPSMITH_REDIS_URL`, please change `redis://redis:6379` to `redis://localhost:6379`. That is, change the host from `redis` to `localhost.`\n\nAt the end of this `docker.env` file, let's add the following new environment variables:\n`APPSMITH_MONGODB_USER=<Your MongoDB User>\nAPPSMITH_MONGODB_PASSWORD=<Your MongoDB Password>\nAPPSMITH_API_BASE_URL=http://localhost:8080`\nHere, in place of `<Your MongoDB User>` and `<Your MongoDB Password>`, please use the same username and password that were given to `APPSMITH_MONGODB_URI` above. In the above example values, these would be `root` for user and `rootpass` for password.\n4. Export https config & certificate (optional)\nIf you are not using a custom domain with your Appsmith instance, please skip this step.\nIf you don't have `APPSMITH_CUSTOM_DOMAIN` already configured in your `docker.env`, please add a line like below\n`echo APPSMITH_CUSTOM_DOMAIN=appsmith.mycustomdomain.com >> \"$new_path\"/stacks/configuration/docker.env`\nYou can also move your certificate to the new container by running following commands:\n`mkdir -pv \"$new_path\"/stacks/letsencrypt\nsudo cp -rfv \"$old_path\"/data/certbot/conf/* \"$new_path\"/stacks/letsencrypt`\n5. Setup new Appsmith with Fat container\nLet's bring down the old instance in-full now:\n`docker-compose --file \"$old_path\"/docker-compose.yml down`\nFollow the official guide to start with a new Appsmith deployment at Docker  Compose Configuration, also shown here in brief for reference:\n`cd \"$new_path\"\ncurl -L https://bit.ly/32jBNin -o docker-compose.yml\ndocker-compose up -d`\nPlease note that you must create a new `docker-compose.yml` in `\"$new_path\"` folder, like with the `curl` command above. Don't copy it from `\"$old_path\"`.\n6. Import database\nAfter your new deployment comes up (usually takes \\~30 seconds), we will import the data that was exported from the old instance:\nCreate the folder to copy the archive file:\n`mkdir -pv \"$new_path\"/stacks/data/restore`\nCopy the archive file:\n`cp \"$old_path\"/data/mongo/db/backup/appsmith-data.archive \"$new_path\"/stacks/data/restore/`\nImport data from this archive:\n`docker-compose exec appsmith appsmithctl import_db`\nNote that this will ask you `Importing this DB will erase this data. Are you sure you want to proceed`, where you can respond with `y`. It is safe in this situation since the new database in the new setup only contains initial data and should be safe to be overwritten.\nOnce this is successful, we are ready to bring up our new instance!\n7. Verify migration\nNavigate to your Appsmith instance, the same way you used to with your old instance, whether using IP address, or custom domain, and verify that your Appsmith instance is working well, and all your data is intact.",
    "tag": "appsmith"
  },
  {
    "title": "Docker",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/installation-guides/docker/README.mdx",
    "content": "\ndescription: Appsmith can be deployed locally or on a private instance using Docker\nsidebar_position: 1\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nDocker\nDocker is an open source containerization platform. It enables developers to package applications into standardized executable components called containers. These containers combine the application's source code with the Operating System (OS) libraries and dependencies required to run that code in any environment.\n \nPrerequisites\n\nDocker (version 20.10.7 or later)\n\nDocker-Compose (version 1.29.2 or later)\n\n\nCreate an installation folder called `appsmith` for deployment and data storage.\n\n`cd` into the installation folder.\n\nSetup with Docker Compose (recommended)\nThe Appsmith Docker image contains all the components required to run within a single Docker container. All these multiple processes are managed by a Supervisord instance, which is a lightweight process manager.\n\n\n\nClick to download the docker-compose.yml file and place it into the Appsmith installation folder.\n\nOR, run the following cURL:\n`bash\n   curl -L https://bit.ly/docker-compose-CE -o $PWD/docker-compose.yml`\n\nStart the Docker container by running the command below. This may need to be run with sudo if `docker` and `docker-compose` aren't accessible by the user. If the image doesn't exist locally, this command downloads the necessary Docker image and starts the container.\n\n`bash\n   docker-compose up -d`\nThe Appsmith server should be up and running soon and can be accessed at http://localhost. Check the Docker logs to verify that the instance is working correctly.\n\n\n:::note\nTo upgrade from Community Edition to Business Edition, follow these instructions.\n:::\n\nClick to download the docker-compose.yml file, and place it into the Appsmith installation folder.\n\nOR, run the following cURL:\n`bash\n   curl -L https://bit.ly/docker-compose-CE -o $PWD/docker-compose.yml`\n\n\nChange the image name from `appsmith-ce` to `appsmith-ee` for the `image:` key in the `docker-compose.yml` file.\n\n\nAdd the license key to the `docker-compose.yml` file as follows:\n   `yml\n   services:\n      appsmith:\n         # ...\n         environment:\n            APPSMITH_LICENSE_KEY: <YOUR_LICENSE_KEY>`\n\n\nStart the Docker container by running the command below. This may need to be run with sudo if `docker` and `docker-compose` aren't accessible by the user. If the image doesn't exist locally, this command downloads the necessary Docker image and starts the container.\n\n\n`bash\n   docker-compose up -d`\nThe Appsmith server should be up and running soon and can be accessed at http://localhost. Check the Docker logs to verify that the instance is working correctly.\n\n\nUpdating Appsmith\n:::caution\n * Create a backup of the Appsmith instance before performing a manual update.\n* If your version is less than v1.9.2, upgrade to the checkpoint version v1.9.2 before upgrading to the latest version.\n:::\nTo update Appsmith manually, go to the root directory of the installation and run the following command:\n`docker-compose pull && docker-compose rm -fsv appsmith && docker-compose up -d`\nEnabling Appsmith auto updates\nAutomatic updates are turned off by default in the `docker-compose.yml` file. To enable them, please follow these steps:\n\nGo to the root directory of the Appsmith installation and run:\n\n`docker-compose down`\n\nOpen the `docker-compose.yml` file with any text editor and un-comment lines 13-23.\nSave the file and run:\n\n`docker-compose up -d`\nIn addition to automatic updates, Appsmith also offers an auto backup feature. Before any update, Appsmith creates a backup, which can be used to rollback to a previous version of Appsmith in case the update needs to be undone. For more information, see the rollback instructions using the appsmithctl command. To ensure successful auto backup and update tasks, a minimum of 2 GB of free storage must be available; otherwise, both the backup and update tasks may fail.\n:::note \nTo ensure automatic backups before updates, enable the `WATCHTOWER_LIFECYCLE_HOOKS` environment variable in the docker-compose.yaml file on the Watchtower instance.\n:::\nIf you have updated your Appsmith instance and face any issues. You can rollback the changes and restore the Appsmith instance from a backup archive. This configuration runs an Appsmith instance and a Watchtower instance to keep Appsmith automatically up-to-date. The installation is now configured to stay up-to-date automatically.\n\nSetup with Docker run\n\n\nThis command downloads the image and starts Appsmith:\n`bash\ndocker run -d --name appsmith -p 80:80 -v \"$PWD/stacks:/appsmith-stacks\" --pull always appsmith/appsmith-ce`\n\n\nThis command downloads the image and starts Appsmith:\n`bash\ndocker run -d --name appsmith -p 80:80 -v \"$PWD/stacks:/appsmith-stacks\" -e APPSMITH_LICENSE_KEY=<YOUR_LICENSE_KEY> --pull always appsmith/appsmith-ee`\n\n\nUpdating Appsmith\n\n\nTo update Appsmith manually, go to the root directory of the installation and run the following commands:\n`bash\ndocker rmi appsmith/appsmith-ce -f\ndocker pull appsmith/appsmith-ce\ndocker rm -f appsmith\ndocker run -d --name appsmith -p 80:80 -v \"$PWD/stacks:/appsmith-stacks\" appsmith/appsmith-ce`\n\n\nTo update Appsmith manually, go to the root directory of the installation and run the following commands:\n`bash\ndocker rmi appsmith/appsmith-ee -f\ndocker pull appsmith/appsmith-ee\ndocker rm -f appsmith\ndocker run -d --name appsmith -p 80:80 -v \"$PWD/stacks:/appsmith-stacks\" -e APPSMITH_LICENSE_KEY=<YOUR_LICENSE_KEY> appsmith/appsmith-ee`\n\n\nOnce the download is complete, the server should be up soon. You can verify that it's working correctly in the Docker logs.\nDocker logs\nOnce the Appsmith container is ready, the message \"Appsmith is Running!\" is displayed in the Docker logs.\n\nYou can follow the logs with the following command:\n`bash\ndocker logs -f appsmith`\nServer logs are stored in `stacks/logs/backend/backend.log`. \nLogs can assist when debugging or analyzing a problem because they offer valuable information about what went wrong. For more information, see How to get container logs.\nRestarting containers\nIf the Docker containers are failing to restart, download, and run the restart-container.sh script linked below to bring them up:\nCopy the script (`restart-container.sh`) to the installation folder and make it executable:\n`bash\nchmod +x restart-container.sh\n./restart-container.sh`\nTroubleshooting\nIf there are any errors during this process, follow the guide on debugging deployment errors or send an email to support@appsmith.com or join the Appsmith Discord Server to speak to the Appsmith team directly.\nFurther reading\n\nConfiguring Self Hosted Instances\nManaging the Appsmith instance\nTutorials\n",
    "tag": "appsmith"
  },
  {
    "title": "Kubernetes",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/installation-guides/kubernetes/README.mdx",
    "content": "\ndescription: Deploy Appsmith on a Kubernetes cluster\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nKubernetes\nKubernetes (K8s) is an open source platform for managing, scaling, and automating the deployment of containerized applications. It's one of the most popular container orchestration tools. This guide helps you to install Appsmith on a Kubernetes cluster using the Helm package manager.\nPrerequisites\nBefore you install Appsmith, ensure the following are installed:\n\n\nHelm Package Manager - This is a package manager for Kubernetes clusters. It allows you to install and manage applications on Kubernetes clusters. To install Helm, follow the instructions for your platform from the official Helm documentation.\n\n\n`kubectl` - This is the command-line interface to manage resources on Kubernetes clusters. To install `kubectl`, follow the instructions for your platform from the official Kubernetes documentation.\n\n\nConfigure Kubernetes cluster\nFollow one of the available guidelines below to configure the Kubernetes cluster.\n\n\n\nSet up the Kubernetes cluster by creating a kubeconfig for Amazon EKS.\nEnsure that you have a default storage class running. If not, create default storage class \nThe NGINX Ingress Controller is enabled by default. If not, install NGINX Controller for AWS EKS.\n    Ensure that you enable the correct version for your cluster.\n\n\n\n\nSetup kubectl\nEnsure that you have a default storage class running. If not, enable addon default-storage class\nThe NGINX Ingress Controller is enabled by default. If not, set up Ingress on Minikube with the NGINX Ingress Controller.\n  Ensure that you enable the correct version for your cluster.\n\n\n\n\nConfigure cluster access for kubectl on Google Cloud Kubernetes.\nEnsure that you have a default storage class running. If not, set up a default storage class on Google Kubernetes Engine[GKE].\nThe NGINX Ingress Controller is enabled by default. If not, install ingress controller on Google Kubernetes Engine[GKE]. Ensure that you enable the correct version for your cluster.\n\n\n\n\nSet up Kubernetes by following working with kubectl.\nEnsure that you have a default storage class running. If not, enable storage class.\nThe NGINX Ingress Controller is enabled by default. If not, add on: Ingress. Ensure that you enable the correct version for your cluster.\n\n\n\nInstall Appsmith\nYou've installed and configured the Kubernetes cluster. Great, now go ahead and install Appsmith using Helm.\n\n \nFollow the steps below to install Appsmith on your Kubernetes cluster:\n\n\nDownload the values.yaml file, and place it into the Appsmith installation folder. Or, run the following `cURL` command:\n`bash\n    curl -L https://bit.ly/3ETEgPT -o \"$PWD/values.yml\"`\n\n\nAdd the Appsmith chart repository with:\n\n\n`bash\n   helm repo add appsmith https://helm.appsmith.com`\n\nLoad the Appsmith chart repository with:\n\n`bash\n  helm repo update`\n4. Install Appsmith on your Kubernetes cluster using the Helm chart. Replace `<your-namespace>` with the namespace you want to install Appsmith in:\n`bash\n  helm install appsmith appsmith/appsmith --namespace <your-namespace>`\nWhen installing Appsmith using Helm, it automatically creates all the necessary Kubernetes objects to run the app on your clusters, such as pods, services, and ingresses with the default configuration. For more information on customizing the configuration, checkout the Configure Appsmith section.\n\nVerify the status of the Appsmith installation by running the following command:\n\n`bash\n  kubectl -n <your-namespace> rollout status deployment <release-name>-appsmith`\nWhen the deployment is ready, a message that indicates the deployment of \"appsmith\" has been successfully rolled out is displayed.\n\nAccess Appsmith by visiting the URL that was output by the Helm installation command. Use the `kubectl` command to get the URL. The URL has a `hostname` and `port` of the Appsmith ingress to access Appsmith using a web browser.\n\n`bash \n  kubectl -n <your-namespace> get ingress <release-name>-appsmith`\nCongratulations, you have successfully installed Appsmith on your Kubernetes cluster using Helm. For more detailed instructions and options for configuring the Appsmith Helm chart, see the Configure Appsmith section below.\nConfigure Appsmith\nThe Appsmith installation works with the default configuration, but you also have the option to customize it to fit your specific needs. To configure the installation parameters, it's recommended to use the `values.yaml` file. This file allows you to specify the settings and options you want to use for your Appsmith installation, allowing you to tailor the installation to your needs. The following is a comprehensive list of available parameters.\nParameters\nCustomize Appsmith by using either Helm parameters or Appsmith-specific parameters. The table below provides details on the various Helm and Appsmith parameters that are available for configuration.\nGlobal\n| Name                       | Description                                               | Value |\n| -------------------------- | --------------------------------------------------------- | ----- |\n| `global.namespaceOverride` | Override the namespace for resource deployed by the chart | `\"\"`  |\n| `global.storageClass`      | Global StorageClass for Persistent Volume              | `\"\"`  |\nCommon\n| Name                | Description                                       | Value        |\n| ------------------- | ------------------------------------------------- | ------------ |\n| `fullnameOverride`  | String to fully override `appsmith.name` template | `\"\"`         |\n| `containerName`     | Specify container's name running in the pods      | `\"appsmith\"` |\n| `commonLabels`      | Labels to add to all deployed objects             | `{}`         |\n| `commonAnnotations` | Annotations to add to all deployed objects        | `{}`         |\nAppsmith image\n| Name               | Description                | Value                      |\n| ------------------ | -------------------------- | -------------------------- |\n| `image.registry`   | Appsmith image registry    | `index.docker.io`          |\n| `image.repository` | Appsmith image repository  | `appsmith/appsmith-editor` |\n| `image.tag`        | Appsmith image tag         | `latest`                   |\n| `image.pullPolicy` | Appsmith image pull policy | `IfNotPresent`             |\nAppsmith deployment\n| Name                 | Description                                        | Value           |\n| -------------------- | -------------------------------------------------- | --------------- |\n| `strategyType`       | Appsmith deployment strategy type                  | `RollingUpdate` |\n| `schedulerName`      | Alternate scheduler                                | `\"\"`            |\n| `podAnnotations`     | Annotations for Appsmith pods                      | `{}`            |\n| `podSecurityContext` | Appsmith pods security context                     | `{}`            |\n| `securityContext`    | Set security context                               | `{}`            |\n| `resources.limits`   | The resources limits for the Appsmith container    | `{}`            |\n| `resources.requests` | The requested resources for the Appsmith container | `{}`            |\n| `nodeSelector`       | Node labels for pod assignment                     | `{}`            |\n| `tolerations`        | Tolerations for pod assignment                     | `[]`            |\n| `affinity`           | Affinity fod pod assignment                        | `{}`            |\nAppsmith namespace\n| Name               | Description                    | Value  |\n| ------------------ | ------------------------------ | ------ |\n| `namespace.create` | Enable creation of `Namespace` | `true` |\nAppsmith service account\n| Name                         | Description                                                                                                 | Value  |\n| ---------------------------- | ----------------------------------------------------------------------------------------------------------- | ------ |\n| `serviceAccount.create`      | Enable creation of `ServiceAccount` for Appsmith pods                                                       | `true` |\n| `serviceAccount.name`        | Name of the created `ServiceAccount` . If not set, a name is generated using the appsmith.fullname template | `\"\"`   |\n| `serviceAccount.annotations` | Additional service account annotations                                                                      | `{}`   |\nTraffic exposure\n| Name                               | Description                                                                 | Value       |\n| ---------------------------------- | --------------------------------------------------------------------------- | ----------- |\n| `service.type`                     | Appsmith service type                                                       | `ClusterIP` |\n| `service.port`                     | Appsmith service port                                                       | `80`        |\n| `service.portName`                 | Appsmith service port name                                                  | `appsmith`  |\n| `service.nodePort`                 | Appsmith service node port to expose to expose                              | `8000`      |\n| `service.clusterIP`                | Appsmith service Cluster                                                    | `\"\"`        |\n| `service.loadBalancerIP`           | Appsmith service Load Balancer IP                                           | `\"\"`        |\n| `service.loadBalancerSourceRanges` | Appsmith service Load Balancer sources                                      | `[]`        |\n| `service.annotations`              | Additional custom annotations for Appsmith service                          | `{}`        |\n| `ingress.enabled`                  | Enable ingress record generation for Appsmith                               | `false`     |\n| `ingress.hosts`                    | An array of hosts to be covered with the ingress record                     | `[]`        |\n| `ingress.tls`                      | Enable TLS configuration for the hosts defined at `ingress.hosts` parameter | `false`     |\n| `ingress.secrets`                  | Custom TLS certificates as secrets                                          | `[]`        |\n| `ingress.certManager`              | Enable ingress to use TLS certificates provided by Cert Manager             | `false`     |\n| `ingress.certManagerTls`           | Specify TLS secret resources created by Cert Manager                        | `[]`        |\n| `ingress.className`                | Configure Ingress class that being used in ingress resource                 | `\"\"`        |\nPersistence\n| Name                                | Description                                                          | Value              |\n| ----------------------------------- | -------------------------------------------------------------------- | ------------------ |\n| `persistence.enabled`               | Enable persistence using Persistent Volume Claims                    | `true`             |\n| `persistence.storageClass`          | Persistent Volume storage class                                      | `\"\"`               |\n| `persistence.annotations`           | Additional custom annotations for the PVC                            | `{}`               |\n| `persistence.localStorage`          | Enable persistent volume using local storage                         | `false`            |\n| `persistence.storagePath`           | Local storage Path                                                   | `/tmp/hostpath_pv` |\n| `persistence.localCluster`          | Local running cluster to provide storage space                       | `[minikube]`       |\n| `persistence.accessModes`           | Persistent Volume access modes                                       | `[ReadWriteOnce]`  |\n| `persistence.size`                  | Persistent Volume size                                               | `10Gi`             |\n| `storageClass.enabled`              | Enable Storage Class configuration                                   | `false`            |\n| `storageClass.defaultClass`         | Create default Storage Class                                         | `false`            |\n| `storageClass.bindingMode`          | Binding mode for Persistent Volume Claims using Storage Class        | `Immediate`        |\n| `storageClass.allowVolumeExpansion` | Allow expansion of Persistent Volume Claims using Storage Class      | `true`             |\n| `storageClass.reclaimPolicy`        | Configure the retention of the dynamically created Persistent Volume | `Delete`           |\n| `storageClass.provisioner`          | Storage Class provisioner                                            | `\"\"`               |\n| `storageClass.annotations`          | Additional storage class annotations                                 | `{}`               |\n| `storageClass.mountOptions`         | Mount options used by Persistent Volumes                             | `{}`               |\n| `storageClass.parameters`           | Storage Class parameters                                             | `{}`               |\nAuto update image\n| Name                   | Description                                   | Value         |\n| ---------------------- | --------------------------------------------- | ------------- |\n| `autoupdate.enabled`   | Enable auto update Helm chart's image         | `true`        |\n| `autoupdate.scheduler` | Schedule time to run cron job to update image | `\"0 * * * *\"` |\nSet parameters\nWhen using command, specify each parameter using `--set key=value[,key=value]` argument to helm install. For example, the below command deploys Appsmith and configures it to use the storage class name `appsmith-pv`. \n`bash\nhelm install \\\n--set persistence.storageClass=appsmith-pv \\\n  appsmith appsmith/appsmith`\nSimilarly, run the below command if you wish to change the encryption salt configuration.\n`bash \nhelm install \\\n--set applicationConfig.APPSMITH_ENCRYPTION_SALT=123 \\\n  appsmith appsmith/appsmith`\nAlternatively, use a `values.yaml` file. You can specify the parameter values needed for installing the chart. To change configurations specific to Appsmith update the `values.yaml` file. Listed below are available configurations for Appsmith.\n| Name                                                     | Value |\n| -------------------------------------------------------- | ----- |\n| applicationConfig.APPSMITH_OAUTH2_GOOGLE_CLIENT_ID    | `\"\"`  |\n| applicationConfig.APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET | `\"\"`  |\n| applicationConfig.APPSMITH_OAUTH2_GITHUB_CLIENT_ID     | `\"\"`  |\n| applicationConfig.APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET | `\"\"`  |\n| `applicationConfig.APPSMITH_CLIENT_LOG_LEVEL`            | `\"\"`  |\n| applicationConfig.APPSMITH_GOOGLE_MAPS_API_KEY         | `\"\"`  |\n| applicationConfig.APPSMITH_MAIL_ENABLED                | `\"\"`  |\n| applicationConfig.APPSMITH_MAIL_HOST                   | `\"\"`  |\n| applicationConfig.APPSMITH_MAIL_PORT                   | `\"\"`  |\n| applicationConfig.APPSMITH_MAIL_USERNAME               | `\"\"`  |\n| applicationConfig.APPSMITH_MAIL_PASSWORD               | `\"\"`  |\n| applicationConfig.APPSMITH_MAIL_FROM                   | `\"\"`  |\n| applicationConfig.APPSMITH_REPLY_TO                    | `\"\"`  |\n| applicationConfig.APPSMITH_MAIL_SMTP_AUTH              | `\"\"`  |\n| `applicationConfig.APPSMITH_MAIL_SMTP_TLS_ENABLED`       | `\"\"`  |\n| applicationConfig.APPSMITH_DISABLE_TELEMETRY           | `\"\"`  |\n| `applicationConfig.APPSMITH_RECAPTCHA_SITE_KEY`          | `\"\"`  |\n| `applicationConfig.APPSMITH_RECAPTCHA_SECRET_KEY`        | `\"\"`  |\n| `applicationConfig.APPSMITH_RECAPTCHA_ENABLED`           | `\"\"`  |\n| applicationConfig.APPSMITH_MONGODB_URI                | `\"\"`  |\n| applicationConfig.APPSMITH_REDIS_URL                   | `\"\"`  |\n| `applicationConfig.APPSMITH_ENCRYPTION_PASSWORD`         | `\"\"`  |\n| `applicationConfig.APPSMITH_ENCRYPTION_SALT`             | `\"\"`  |\n| applicationConfig.APPSMITH_CUSTOM_DOMAIN               | `\"\"`  |\nOnce you have made changes to the values file, run the below command.\n`bash\nhelm install appsmith appsmith/appsmith -f values.yaml`\nUpdate Appsmith\nAppsmith installation can be updated manually or by enabling auto update.\nAuto update\nThe default Appsmith helm installation disables auto update (recommended). You have an option to enable auto update by either setting it in values file or using a command.\n\nValues file: Ensure that the parameters are configured to enable auto update. For more information, see Auto update image. Once the set up is in place, run the below command.\n\n`helm upgrade --values values.yaml appsmith appsmith/appsmith`\n\n\nCommand: Pass an argument using the `--set` keyword (`--set autoupdate.enabled=true`) to the command.\n`helm install appsmith/appsmith appsmith \\\n    --set autoupdate.enabled=true`\n\n\nManual update\nTo manually update the Appsmith container image to the latest release, run the command: \n`bash\nkubectl rollout restart statefulset appsmith`\n\n \n:::note\nTo upgrade from Community Edition to Business Edition, follow the instructions available at Upgrade to Business Edition for Kubernetes.\n:::\nFollow the steps below to install Appsmith on your Kubernetes cluster:\n\n\nAdd the Appsmith `appsmith-ee` chart repository with:\n`bash\nhelm repo add appsmith-ee https://helm-ee.appsmith.com`\n2. Load the Appsmith chart repository with:\n`bash\nhelm repo update`\n3. Generate the `values.yaml` config file\n`bash\nhelm show values appsmith-ee/appsmith --version 2.0.0 > values.yaml`\n4. Edit the `values.yaml` file and set the following parameters. You may choose to add a random generated password.\n\n\n`yaml\n    applicationConfig:\n      APPSMITH_ENCRYPTION_PASSWORD: \"<PASSWORD>\"\n      APPSMITH_ENCRYPTION_SALT: \"<SALT_PASSWORD>\"\n      APPSMITH_LICENSE_KEY: \"<LICENSE_KEY>\"`\n\n To configure High Availability (HA), be sure to configure the following \n\n:::note Important\n\n  Both PostgreSQL and MongoDB must be enabled or configured to point to an external instance when `autoscaling` is enabled.\n:::\n\n  1. Install `metrics-server`, which provides vital metrics to the Horizontal Pod Autoscaler (HPA) to scale the pods.\n\n    ```bash\n    kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n    ```\n\n  2. Enable `autoscaling` in the `values.yaml`. The below shows the `autoscaling` configuration for the Appsmith Deployment:\n\n   ```yaml\n        autoscaling:\n          # highlight-next-line\n          enabled: true\n          minReplicas: 2\n          maxReplicas: 2\n   ```\n\n  3. PostgreSQL has to be enabled Or configure an external PostgreSQL in the `applicationConfig` section in `values.yaml`.\n\n      1. Configure the parameters to enable PostgreSQL as shown below:\n\n      ```yaml\n            # enable PostgreSQL\n            postgresql:\n            # highlight-next-line\n                enabled: true\n                auth:\n                  username: root\n      ```\n\n      2. Configure the parameters to point to an external PostgreSQL as shown below:\n\n      ```yaml\n        # configure an external PostgreSQL\n        applicationConfig::\n          APPSMITH_KEYCLOAK_DB_DRIVER: \"postgresql\"\n          APPSMITH_KEYCLOAK_DB_USERNAME: \"\"\n          APPSMITH_KEYCLOAK_DB_PASSWORD: \"\"\n          APPSMITH_KEYCLOAK_DB_URL: \"\"\n      ```\n\n  4.  Enable MongoDB in the `values.yaml` or configure an external MongoDB in the `applicationConfig` in `values.yaml`.\n\n      1. Configure the parameters to enable MongoDB as shown below:\n\n        ```yaml\n          # enable MongoDB\n          mongodb:\n            # highlight-next-line\n            enabled: true\n            service:\n              nameOverride: appsmith-mongodb\n        ```\n\n      2. Configure the parameters to point to an external MongoDB as shown below:\n\n        ```yaml\n        # configure an external MongoDB\n          applicationConfig::\n            APPSMITH_MONGODB_URI: \"\"\n        ```\n\n6. Create a shared file system. This is required for some Appsmith features that make use of the filesystem, like `git`-connected applications. Read more about this in the [Create a shared file system](#create-a-shared-file-system) section.\n\n#### Create a shared file system\n\nA shared file system on Kubernetes is a distributed file system that can be accessed and modified by multiple users from different pods within the Kubernetes cluster. it's used to store and share files across multiple pods, allowing users to access and collaborate on shared data.\n\n\n\n\nThe [Amazon EFS Container Storage Interface (CSI)](https://docs.aws.amazon.com/eks/latest/userguide/efs-csi.html) driver is a plugin for the Kubernetes container orchestration system that enables you to mount [Amazon Elastic File System (EFS)](https://aws.amazon.com/efs/) on Kubernetes pods. Using the EFS CSI driver, you can create a shared file system on Kubernetes by mounting an EFS file system on the pods in your cluster. Follow the steps available at the official [EFS CSI driver documentation](https://docs.aws.amazon.com/eks/latest/userguide/efs-csi.html) to mount EFS on the Kubernetes pods.\n\n\n\n\n##### Configure persistence\n\nPersistence refers to the ability to store data in a way that it's retained even after the associated pod or deployment is deleted. This is important for maintaining the continuity of your applications and ensuring that important data isn't lost. \n\nTo configure persistence, you can use persistent volumes, persistent volume claims, or storage classes, depending on your platform. \n\n\n\n\nYou have the option to either configure EFS using a new [Persistent Volume Claim (PVC)](https://kubernetes.io/docs/concepts/storage/persistent-volumes/) or using an existing PVC.\n\n###### Using new PVC\nThis is useful when you don't have any existing PVC available or if you want to dedicate a specific PVC solely for EFS. Once the PVC is created, ensure that the following configuration is updated in `values.yaml` file under `persistence` attribute as shown below:\n\n```yaml\n  existingClaim:\n    enabled: false\n    name: \n    claimName: \n  efs:\n    # highlight-next-line\n    enabled: true\n    driver: efs.csi.aws.com\n    # highlight-next-line\n    volumeHandle: \n```\n\n###### Using existing PVC\n\nThis is useful if you already have a PVC that you want to reuse for EFS or if you have multiple deployments or pods that need access to the same EFS volume. Ensure that the following configuration is updated in `values.yaml` file under `persistence` attribute as shown below:\n\n```yaml\nexistingClaim:\n    # highlight-next-line\n    enabled: true\n    name: efsappsmith\n    claimName: efsappsmith\n  efs:\n    enabled: true\n    driver: efs.csi.aws.com\n    volumeHandle: \n```\n\n\n\n  To configure persistence in Minikube, ensure that you have set the properties in `values.yaml` file under `persistence` attribute as shown below.\n\n```yaml\n  localCluster:\n    - minikube\n  ## @param persistence.accessModes PV Access Mode\n  ##\n  accessModes:\n    - ReadWriteMany\n  ## @param persistence.size PVC Storage Request\n  ##\n  size: 10Gi\n  ## Fine tuning for volumeClaimTemplates\n  ##\n  existingClaim:\n    # highlight-next-line\n    enabled: false\n    name:\n    claimName:\n  ReclaimPolicy: Retain\n  efs:\n    # highlight-next-line\n    enabled: false\n    driver: \n    volumeHandle:\n```\n\n\n\n\n\nRun the below command to deploy Appsmith:\n\n`bash\n  helm install appsmith appsmith-ee/appsmith -f values.yaml`\n  When you run the install command, you may see output as shown below:\n`NAME: appsmith\n  LAST DEPLOYED: Mon Oct 24 13:24:07 2022\n  NAMESPACE: <namespace>\n  STATUS: deployed\n  REVISION: 1\n  TEST SUITE: None`\nOnce deployed run the below commands to verify the installation.\n\n\n```1. To get the application URL run the below commands:\n\n  ```\n  export POD_NAME=$(kubectl get pods --namespace default -l \"app.kubernetes.io/name=appsmith,app.kubernetes.io/instance=appsmith-2-1670479627\" -o jsonpath=\"{.items[0].metadata.name}\")\n  export CONTAINER_PORT=$(kubectl get pod --namespace default $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl --namespace default port-forward $POD_NAME 8080:$CONTAINER_PORT\n  ```\n\n2. Run the command `kubectl get pods` to verify the list of pods. You may see output as shown below:\n\n  ```bash\n  NAME                            READY   STATUS    RESTARTS   AGE\n  appsmith-875b6cddc-4mmj6        1/1     Running   0          90s\n  appsmith-875b6cddc-7b2hw        1/1     Running   0          3m30s\n  appsmith-875b6cddc-smzwz        1/1     Running   0          3m15s\n  appsmith-mongodb-0              1/1     Running   0          3m30s\n  appsmith-mongodb-1              1/1     Running   0          3m10s\n  appsmith-mongodb-arbiter-0      1/1     Running   0          3m30s\n  appsmith-postgresql-0           1/1     Running   0          3m30s\n  appsmith-redis-master-0         1/1     Running   0          3m30s\n  appsmith-redis-replicas-0       1/1     Running   0          3m30s\n  ```\n```\n\n\nCongratulations, you have successfully installed Appsmith Business Edition Helm chart v2 installation.\nUpdate Appsmith\nAppsmith installation can be updated manually or by enabling auto update.\nAuto update\nThe default Appsmith helm installation disables auto update (recommended). You have an option to enable auto update by either:\n  - Running the command below.\n    `helm upgrade --set autoupdate.enabled=true \\\n    appsmith [appsmith-ee|appsmith]/appsmith`\n  - Or edit `values.yaml` and specify the following parameters\n    `yaml\n    autoupdate.enabled: true\n    autoupdate.scheduler: 0`\n    Followed by running the command below.\n    `bash\n    helm upgrade --values values.yaml appsmith [appsmith-ee|appsmith]/appsmith`\nManual update\nTo manually update the Appsmith container image to the latest release, run the command: \n`bash\nkubectl rollout restart deployment appsmith`\n\n \nPublish Appsmith\nTo make your Appsmith installation accessible on the internet, you need an Ingress controller set up. For more information on Ingress controllers, see the Configure Kubernetes Cluster section. If you haven't yet installed the Helm chart, you can run the following command to install the chart, enable the ingress controller, and publish Appsmith.\nTo install the Nginx ingress controller on AWS-EKS, GCE-GKE, or Azure, run the following command if it hasn't already been installed:\n`bash \n  helm install ingress-nginx ingress-nginx/ingress-nginx`\n\n \n  Enable the ingress controller through command or by modifying the `values.yaml` file.\n\n\nFollow the steps below to configure using command\n  Run the below command to enable ingress controller:\n\n  ```bash\n  helm upgrade appsmith/appsmith \\\n      --set ingress.enabled=true \\\n      --set ingress.className=nginx \\\n      --set service.type=ClusterIP \\\n  ```\n\n  \n\n\nFollow the steps below to configure using `values.yaml`\n\n  Open the `values.yaml` file and update the parameter values as below:\n\n  ```yaml \n  ingress:\n    ## @param ingress.enabled Enable ingress record generation for Ghost\n    ##\n    enabled: true\n    ## @param ingress.annotations Additional custom annotations for the ingress record\n    ## NOTE: If `ingress.certManager=true`, annotation `kubernetes.io/tls-acme: \"true\"` will automatically be added\n    ##\n    className: nginx\n    hosts: []\n      # - host: appsmith-domain.me\n  service:\n    ## @param service.type Kubernetes Service type\n    ##\n    type: ClusterIP\n  ```\n\n  Once the parameter values are modified, run the below command:\n\n  ```bash \n  helm upgrade --values values.yaml appsmith appsmith/appsmith\n  ```\n\n  \n\n\nEnable the ingress controller through command or by modifying the `values.yaml` file.\n\nFollow the steps below to configure using command\n  Run the below command to enable ingress controller:\n\n  ```bash\n  helm upgrade appsmith-ee/appsmith \\\n      --set ingress.enabled=true \\\n      --set ingress.className=nginx \\\n      --set service.type=ClusterIP \\\n  ```\n\n   \n\nFollow the steps below to configure using `values.yaml`\n\n  Open the `values.yaml` file and update the parameter values as below:\n\n  ```yaml \n  ingress:\n    ## @param ingress.enabled Enable ingress record generation for Ghost\n    ##\n    enabled: true\n    ## @param ingress.annotations Additional custom annotations for the ingress record\n    ## NOTE: If `ingress.certManager=true`, annotation `kubernetes.io/tls-acme: \"true\"` will automatically be added\n    ##\n    className: nginx\n    hosts: []\n      # - host: appsmith-domain.me\n  service:\n    ## @param service.type Kubernetes Service type\n    ##\n    type: ClusterIP\n  ```\n\nOnce the parameter values are modified, run the below command:\n\n  ```bash \n  helm upgrade --values values.yaml appsmith appsmith-ee/appsmith\n  ```\n\n  \n\n\n\nIt takes a few minutes for the ingress to get a public IP assigned. Once it has been assigned, you should see an IPv4 address or a domain name in the `ADDRESS` column. Run the below command to get this address:\n\n`bash\n  kubectl get ingress`\n  The command generates the output as shown below:\n`bash\n  NAME       CLASS   HOSTS   ADDRESS                                                                    PORTS   AGE\n  appsmith   nginx   *       a918d94876c27453ea78d2883539bb36-1165345706.ap-south-1.elb.amazonaws.com   80      25h`\nConfigure TLS\nTo ensure the security of your Appsmith application, it's recommended to use TLS certificates. One way to do this is by using Cert Manager. Cert Manager secures HTTP traffic with TLS and SSL certificates. The Appsmith Helm chart comes with built-in support for Ingress routes and certificate management through cert-manager. This makes it easy to configure TLS support using certificates from a variety of certificate providers, including Let's Encrypt.\nThe steps below explain how to use Ingress routes and cert-manager to configure TLS for your Appsmith deployment using a free `Let's Encrypt` certificate:\n:::tip\nWhen executing these commands on Google Kubernetes Engine (GKE), you may encounter permission errors. Refer to the official cert-manager documentation for notes on how to elevate your permissions.*\n:::\n\n\nObtain the LoadBalancer host name using the command below. Note this host name as you need it to configure DNS in a later step.\n  `kubectl get svc --namespace ingress-nginx ingress-nginx-controller  -o jsonpath=\"{.status.loadBalancer.ingress[0].hostname}\"`\n\n\nBrowse to the host name and confirm that you can access your Appsmith instance. This indicates that the NGINX Ingress controller is working.\n\n\nConfigure the DNS for your domain name by adding a `CNAME` record pointing to the public host name obtained in the previous steps.\n\n\nTo use cert-manager, add the repository, create a namespace, and create CRDs.\n  i. Add the repository by running below command:\n  `bash\n  helm repo add jetstack https://charts.jetstack.io`\n  ii. Create a namespace by running below command:\n  `bash\n  kubectl create namespace cert-manager`\n  iii. Create CRDs by running below command:\n  `bash\n  kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.5.3/cert-manager.crds.yaml`\n\n\nTo create a ClusterIssuer resource for `Let's Encrypt` certificates, create a file named letsencrypt-appsmith.yaml with the following content, replacing the  placeholder with a valid email address: \n\n\n`yaml\n  apiVersion: cert-manager.io/v1\n  kind: ClusterIssuer\n  metadata:\n    name: letsencrypt-appsmith\n  spec:\n    acme:\n      email: <EMAIL_ADDRESS>\n      server: https://acme-v02.api.letsencrypt.org/directory\n      privateKeySecretRef:\n        name: letsencrypt-appsmith\n      solvers:\n      - http01:\n          ingress:\n            class: nginx`\n\nApply the changes to the cluster:\n\n`kubectl apply -f letsencrypt-appsmith.yaml`\n\nUse Helm to install cert-manager and set up `Let's Encrypt` as the default Certificate Authority (CA).\n\n`helm install cert-manager --namespace cert-manager jetstack/cert-manager --version v1.5.3`\n\nInstall Appsmith with integration to Ingress and cert-manager.\n\n\n \n  You can either use a command or add additional parameters to the `values.yaml` file.\n\nFollow the below steps to configure using a command\n      You can use the Helm chart with the following additional parameters. Replace the DOMAIN placeholder with your specific domain name in the below command and run it:\n\n      ```bash\n        helm upgrade appsmith appsmith/appsmith \\\n          --set service.type=ClusterIP \\\n          --set ingress.enabled=true \\\n          --set ingress.tls=true \\\n          --set ingress.certManager=true \\\n          --set ingress.annotations.\"cert-manager\\.io/cluster-issuer\"=letsencrypt-appsmith \\\n          --set ingress.hosts[0].host= \\\n          --set ingress.certManagerTls[0].hosts[0]= \\\n          --set ingress.certManagerTls[0].secretName=letsencrypt-appsmith\n          --set ingress.className=nginx\n      ```     \n\n  \n\n\n``` <details id=\"usingValues\">\n <summary>Follow the below steps to configure using a `values.yaml` file</summary>\n  Open the `values.yaml` file, and update the parameters as shown below:\n  Run the below command once the parameter values are updated:\n\n  ```bash\n  ingress:\n      enabled: true\n      annotations:\n        cert-manager.io/cluster-issuer: \"letsencrypt-appsmith\"\n      hosts:\n        - host: example.appsmith.com\n      tls: true\n      secrets: []\n      certManager: true\n      certManagerTls:\n        - hosts:\n            - example.appsmith.com\n          secretName: letsencrypt-appsmith\n      className: \"nginx\"\n  ```\n  Run the below command once the parameter values are updated:\n\n  ```bash\n  helm upgrade --values values.yaml appsmith appsmith/appsmith\n  ```\n```\n\n\n\n\n \n   You can either use a command or add additional parameters to the `values.yaml` file.\n\n\n``` <details id=\"usingCommand\">\n <summary>Follow the below steps to configure using a command</summary>\n  You can use the Helm chart with the following additional parameters. Replace the DOMAIN placeholder with your specific domain name in the below command and run it:\n```\n\n\n`bash\n  helm upgrade appsmith appsmith-ee/appsmith \\\n    --set service.type=ClusterIP \\\n    --set ingress.enabled=true \\\n    --set ingress.tls=true \\\n    --set ingress.certManager=true \\\n    --set ingress.annotations.\"cert-manager\\.io/cluster-issuer\"=letsencrypt-appsmith \\\n    --set ingress.hosts[0].host=<DOMAIN> \\\n    --set ingress.certManagerTls[0].hosts[0]=<DOMAIN> \\\n    --set ingress.certManagerTls[0].secretName=letsencrypt-appsmith\n    --set ingress.className=nginx` \n\n\nFollow the below steps to configure using a `values.yaml` file\n      Open the `values.yaml` file, and update the parameters as shown below:\n      Run the below command once the parameter values are updated:    \n`bash\ningress:\n    enabled: true\n    annotations:\n      cert-manager.io/cluster-issuer: \"letsencrypt-appsmith\"\n    hosts:\n      - host: example.appsmith.com\n    tls: true\n    secrets: []\n    certManager: true\n    certManagerTls:\n      - hosts:\n          - example.appsmith.com\n        secretName: letsencrypt-appsmith\n    className: \"nginx\"`\nRun the below command once the parameter values are updated:\n`bash\nhelm upgrade --values values.yaml appsmith appsmith-ee/appsmith`\n\n\n \nOnce the deployment is finished, check the domain in a browser to verify that the Appsmith site is accessible over a secure TLS connection with a valid `Let's Encrypt` certificate.\nEnable data compression for Ingress controller\nThe default installation doesn't have data compression configured for Nginx ingress controller. Follow the below steps to enable it.\n\nEdit the `configMap` for `ingress-nginx-controller` by using the below command.\n\n`bash\n  kubectl edit configmap -n ingress-nginx ingress-nginx-controller`\n\nAdd the following to the data section.\n\n`yaml\n  # Add the data section if not already present\n  data: \n    use-gzip: \"true\" # ENABLE GZIP COMPRESSION\n    gzip-types: \"*\" # SPECIFY MIME TYPES TO COMPRESS (\"*\" FOR ALL)`\nThe Nginx controller automatically updates once you save (`:wq!`) the changes.\nUninstall Appsmith\nThe following command uninstalls Appsmith and removes all Kubernetes resources associated with the chart:\n\nList the releases by running below command:\n\n`bash\nhelm list`\nThe command generates the output as shown below:\n```\nNAME                       NAMESPACE       REVISION        UPDATED                                 STATUS          CHART           APP VERSION\nhighlight-next-line\nappsmith-1631069261        default         1               2021-09-09 11:24:40.152766 +0700 +07    deployed        appsmith-1.3.0  1.16.0\n```\n2. Pick the release name`appsmith-1631069261` and run the below command to uninstall Appsmith:\n`bash\nhelm uninstall appsmith-1631069261`\n3. Run the command to verify the release status for `appsmith-1631069261`\n`bash\nhelm status <RELEASE_NAME>`\nTroubleshooting\nIf you\u2019re having issues with the deployment, please see the debugging deployment errors troubleshooting guide. If you continue to have problems reach out on Discord Server or send an email to support or ask questions on the community forum.\nFurther reading\n\nConfiguring Self Hosted Instances\nManaging the Appsmith instance\nMigrate to Helm Chart v2 (BE)\n",
    "tag": "appsmith"
  },
  {
    "title": "Migrate From Multi-Container Setup (k8s)",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/installation-guides/kubernetes/migrate-k8s.md",
    "content": "\ndescription: Follow the steps in the guide to migrate the multi-container Kubernetes Appsmith installation to Single Container Helm chart installation.\n\nMigrate From Multi-Container Setup (k8s)\nMigrating from a multi-container Kubernetes installation to a single-container Helm deployment can provide several benefits, including easier management and increased efficiency. You can make the transition and migrate your Appsmith deployment from the old stack (multiple pods/containers) Kubernetes to Helm chart(single container). The guide below covers the steps to help you successfully migrate to the Helm chart and works well with the default Kubernetes installation.\nThe migration works on the default Kubernetes installation with the resources as shown in the image below. Use the `kubectl get all` command to review the default Kubernetes installation resources.\n```\n\u279c kubectl get all\nNAME                                           READY   STATUS      RESTARTS   AGE\npod/appsmith-editor-995c974df-njtdh            1/1     Running     0          3d12h\npod/appsmith-internal-server-dfd68b55b-8p5w8   1/1     Running     1          3d12h\npod/imago-27473940-kwslt                       0/1     Completed   0          12m\npod/mongo-statefulset-0                        1/1     Running     0          3d12h\npod/redis-statefulset-0                        1/1     Running     0          3d12h\nNAME                               TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)           AGE\nservice/appsmith-backend-service   NodePort    10.100.247.245           8080:32694/TCP    3d12h\nservice/appsmith-editor            ClusterIP   10.100.236.17            80/TCP            3d12h\nservice/kubernetes                 ClusterIP   10.100.0.1               443/TCP           3d12h\nservice/mongo-service              NodePort    10.100.2.162             27017:31766/TCP   3d12h\nservice/redis-service              NodePort    10.100.7.184             6379:30834/TCP    3d12h\nNAME                                       READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/appsmith-editor            1/1     1            1           3d12h\ndeployment.apps/appsmith-internal-server   1/1     1            1           3d12h\nNAME                                                  DESIRED   CURRENT   READY   AGE\nreplicaset.apps/appsmith-editor-995c974df             1         1         1       3d12h\nreplicaset.apps/appsmith-internal-server-dfd68b55b    1         1         1       3d12h\nNAME                                 READY   AGE\nstatefulset.apps/mongo-statefulset   1/1     3d12h\nstatefulset.apps/redis-statefulset   1/1     3d12h\nNAME                  SCHEDULE    SUSPEND   ACTIVE   LAST SCHEDULE   AGE\ncronjob.batch/imago   0 *  *    False     0        12m             3d12h\nNAME                       COMPLETIONS   DURATION   AGE\njob.batch/imago-27473940   1/1           16s        12m\n```\nPrerequisites\nBefore you start the migration process, ensure that the below prerequisites are met.\n\nInstall `kubectl` - `kubectl` is the command-line interface for Kubernetes. It allows you to run commands against Kubernetes clusters to manage applications and other resources. To install kubectl, follow the instructions for your platform from the official Kubernetes documentation.\nOnce `kubectl` is installed, configure it to connect to your cluster. Follow one of the available guides below for your platform:\nMinikube: Setup Kubectl\nGoogle Cloud Kubernetes: Configuring cluster access for kubectl\nAWS EKS: Create a kubeconfig for Amazon EKS\nMicrok8s: Set up Kubernetes by following working with kubectl.\n\n\nInstall `yq` package: yq package is needed to format data from the `ConfigMap` resources into a `.yaml` file referenced in migration configurations.\n\nMigrate to single container\nMigrating from a multi-container Kubernetes installation to a new cluster involves exporting your data and configuration, setting up the new cluster, and migrating your applications and services to the new environment. Here are the steps to do this:\nExport database\nExport data from the existing `MongoDB` pod and download the archive file to your local. Follow the steps below to backup database:\n\nCreate `backup` directory in `MongoDB` pod.\n\n`bash\n      kubectl exec mongo-statefulset-0 -- mkdir -pv /data/db/backup`\n\nExecute `mongodump` command to export data from running MongoDB pod.\n\n`bash\n      kubectl exec mongo-statefulset-0 o-statefulset-0 -- sh -c 'mongodump --uri=\"mongodb://$MONGO_INITDB_ROOT_USERNAME:$MONGO_INITDB_ROOT_PASSWORD@localhost/$MONGO_INITDB_DATABASE\" --authenticationDatabase admin --archive=/data/db/backup/appsmith-data.archive --gzip'`\n\n\nCopy archive file from MongoDB pod to your local.\n`bash\n  kubectl cp mongo-statefulset-0:data/db/backup/appsmith-data.archive appsmith-data.archive`\n\n\nVerify that a local `archive` file is created that stores the data of the existing `MongoDB` service in Kubernetes.\n```bash\n  ls | grep appsmith-data.archive\nappsmith-data.archive\n  ```\n\n\nConfigure parameters\nIn the old Kubernetes stack, MongoDB and Redis were deployed as separate resources in the cluster. However, in the new Helm chart, you can configure MongoDB and Redis as an internal service or deploy MongoDB and Redis as separate services in the cluster. To ensure that the Helm chart runs with external Redis and MongoDB services, you need to make some changes to the `values.yaml` file. Follow the steps below to configure external Redis and MongoDB services.\n\n\nAdd Helm repository\n`bash\n  helm repo add appsmith https://helm.appsmith.com`\n\n\nUpdate repository\n```bash\n  helm repo update\n\n\nPull the latest values from appsmith helm chart\n`bash new\n    helm show values appsmith/appsmith > values.yml`\n\n\nModify values.yaml and enable MongoDB and Redis.\n```bash new\n    redis:\n      enabled: true\n      auth:\n        enabled: false\n      replica:\n        replicaCount: 1\n\n\n```mongodb:\n  enabled: true\n  service:\n    nameOverride: appsmith-mongodb\n  auth:\n    rootUser: root\n    rootPassword: password\n  replicaCount: 2\n  architecture: \"replicaset\"\n  replicaSetName: rs0\n```\n\n\n```\n\n\nInstall Helm chart\nFollow the below steps to install helm chart with old configuration:\n\n\nInstall Appsmith\n`bash\n  helm install appsmith appsmith/appsmith --values values.yaml`\n\n\nAfter installation, verify that the pods are running. Use the below command to verify the new pod which created by the Helm chart:\n`bash\n      kubectl get pods -n appsmith\n      NAME                         READY   STATUS     RESTARTS   AGE\n      appsmith-0                   1/1     Running    0           90s\n      appsmith-mongodb-0           1/1     Running    0          90s\n      appsmith-mongodb-1           1/1     Pending    0          90s\n      appsmith-mongodb-arbiter-0   1/1     Running    0          90s\n      appsmith-redis-master-0      1/1     Running    0          90s\n      appsmith-redis-replicas-0    1/1     Running    0          90s`\n\n\nImport database\nFollow the below steps to import data from archive file into new Helm chart:\n\n\nCreate `restore` directory in new pod\n`bash\n  kubectl exec appsmith-0 -- mkdir -p /appsmith-stacks/data/restore`\n\n\nCopy archive file from local to new pod:\n`bash\n  kubectl cp appsmith-data.archive appsmith-0:/appsmith-stacks/data/restore`\n\n\nRun `import_db` command:\n`bash\n  kubectl exec -it appsmith-0 -- appsmithctl import_db`\n\n\nYou see a message - `Importing this DB will erase this data. Are you sure you want to proceed`, where you can respond with `y`. It's safe in this situation since the new database in the new setup only contains initial data and should be safe to be overwritten.\n\nVerify that Helm chart still works after importing and the data from old Kubernetes stack also shows up in the Helm chart\n\nMigrate SSL certificate\nYou may want to migrate existing SSL certificate to the new Helm chart. With the old Kubernetes stack & new Helm chart, Kubernetes cluster uses cert-manager to provision the SSL certificate. `cert-manager` is an `Automate certificate manager` that provisions and manages the certificates itself => Backward incompatible if migrating certificate from one `cert-manager` to another one.\nIt's recommended that after migrating to the Helm chart, you can follow the document Setup Https to setup a new `cert-manager` and provision a new certificate for Helm installation.\nTest migration\nAfter the chart has been deployed to the Kubernetes cluster, it's important to test that the migration is successful and the Appsmith application is functioning as expected in the new Helm-based deployment. This may involve running a series of integration tests, or simply verifying that the application is accessible and responding to requests as expected.\nTroubleshooting",
    "tag": "appsmith"
  },
  {
    "title": "Migrate to Helm Chart v2 (BE)",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/installation-guides/kubernetes/migrate-to-be-chart.md",
    "content": "\ndescription: Follow the guide to migrate to the Appsmith Business Edition running on Helm chart v2.\nMigrate to Helm Chart v2 (BE)\nFollow the below guide to migrate to the Business Edition running on Helm chart v2 (`helm-ee.appsmith.com`). This version includes Horizontal Pod Auto Scaling (HPA) capability, which enables Appsmith pods to scale automatically based on the current workload.\nBackup data\n\nOpen a shell into one of your current Appsmith pods:\n\n`bash\n   kubectl exec -it <pod> bash`\n\nRun the backup command:\n\n`bash\n   appsmithctl backup`\n\nOnce the backup process is complete, the backup archive is available at a location like this:\n\n`/appsmith-stacks/data/backup/appsmith-backup-2022-10-24T07-09-56.930Z.tar.gz`\n\nRun the below command to exit the shell:\n\n`bash\n   exit`\n\nRun the below command to download the backup archive:\n\n`bash\n   kubectl cp <namespace>/appsmith-0:<appsmith_backup_archive_path> ./appsmith-ee-backup.tar.gz`\n\nRun the below command to retrieve the salt and password from the pod, and copy the values to `values.yaml`.\n\n`bash\n   kubectl exec <pod_name> -- grep /appsmith-stacks/configuration/docker.env APPSMITH_ENCRYPTION_`\nSet these values in the `applicationConfig` section:\n`yaml\n     APPSMITH_ENCRYPTION_PASSWORD: \"<PASSWORD>\"\n     APPSMITH_ENCRYPTION_SALT: \"<SALT>\"`\nBackup Keycloak\n\nOpen a shell into one of your current Appsmith pods:\n\n`bash\n   kubectl exec -it <pod> bash`\n\nRun the below command to stop Keycloak:\n\n`bash\n   supervisorctl stop keycloak`\n\nRun the below command to exit the remaining process:\n\n`bash\n   kill -9 `pgrep -f keycloak``\n\nRun the below command to start Keycloak backup:\n\n`bash\n   /bin/sh /opt/keycloak/bin/standalone.sh -c standalone.xml -b 0.0.0.0 -Djboss.socket.binding.port-offset=1 -Dkeycloak.migration.action=export -Dkeycloak.migration.provider=singleFile -Dkeycloak.migration.file=/tmp/keycloak_backup.json`\n\nMonitor the output as shown below:\n\n`bash\n   07:25:11,805 INFO  [org.hibernate.validator.internal.util.Version] (ServerService Thread Pool -- 57) HV000001: Hibernate Validator 6.0.22.Final\n   07:25:12,930 INFO  [org.hibernate.hql.internal.QueryTranslatorFactoryInitiator] (ServerService Thread Pool -- 57) HHH000397: Using ASTQueryTranslatorFactory\n   07:25:13,691 INFO  [org.keycloak.services] (ServerService Thread Pool -- 57) KC-SERVICES0033: Full model export requested\n   07:25:13,691 INFO  [org.keycloak.exportimport.singlefile.SingleFileExportProvider] (ServerService Thread Pool -- 57) Exporting model into file /appsmith-stacks/data/keycloak_bkp/keycloak_backup.json\n   07:25:14,488 INFO  [org.keycloak.services] (ServerService Thread Pool -- 57) KC-SERVICES0035: Export finished successfully`\nWhen you see lines similar to this, press ctrl+c to stop the process.\n\nRun the below command to exit out of the shell:\n\n`bash\n   exit`\n\nRun the below command to download the backup file available at `/tmp/keycloak_backup.json`:\n\n`bash\n   kubectl cp <namespace>/appsmith-0:/tmp/keycloak_backup.json ./keycloak_bkp.json`\nUninstall old Helm chart\nRun the below command to uninstall the existing helm chart:\n`bash\nhelm uninstall appsmith -n <namespace>`\nConfigure parameters\nTo ensure that the Business Edition Helm chart runs, you need to make some changes to the `values.yaml` file. Follow the steps below to configure parameters:\n\nAdd the following snippet to the bottom of your `values.yaml` file. This snippet enables PostgreSQL.\n\n`yaml\n   postgresql:\n     enabled: true\n     auth:\n       username: root\n       password: \"<PASSWORD>\"\n       postgresPassword: \"<POSTGRESQL_PASSWORD>\"\n       database: keycloak`\n\n\nTo configure high availability, choose or create a shared file system. Follow the instructions available at Create a shared file system.\n\n\nAdd the license key and a few other variables related to Keycloak to `applicationConfig` section:\n\n\n`yaml\n     APPSMITH_LICENSE_KEY: \"\"\n     APPSMITH_KEYCLOAK_DB_DRIVER: \"\"\n     APPSMITH_KEYCLOAK_DB_USERNAME: \"\"\n     APPSMITH_KEYCLOAK_DB_PASSWORD: \"\"\n     APPSMITH_KEYCLOAK_DB_URL: \"\"\n     APPSMITH_KEYCLOAK_DB_NAME: \"keycloak\"`\nInstall v2 Helm chart\nRun the below command to add and deploy the new Helm chart:\n`bash\n   helm repo add appsmith-ee https://helm-ee.appsmith.com\n   helm repo update\n   helm install appsmith appsmith-ee/appsmith-ee -n <namespace> -f values.yaml`\nFor more information, see installing Business Edition with Kubernetes.\nRestore backup\nTo restore the backup, follow the below steps:\n\nRun the below command to copy the Appsmith backup into the new Appsmith pod:\n\n`bash\n   kubectl cp appsmith-backup-2022-10-24T07-09-56.930Z.tar.gz <namespace>/<pod_name>:/appsmith-stacks/data/backup/`\n\nRun the below command to copy the keycloak backup into the new Appsmith pod:\n\n`bash\n   kubectl cp keycloak_bkp.json <namespace>/<pod_name>:/appsmith-stacks/data/`\n\nRun the below command to restore Appsmith data:\n\n`bash\n   kubectl exec -it <namespace>/<pod_name> -- appsmithctl restore`\nOnce the data is restored, the pod restarts automatically.\n\nRun the below command to restore the keycloak data:\n\n`bash\n   kubectl exec -it <namespace>/<pod_name> -- /bin/sh /opt/keycloak/bin/standalone.sh -b 0.0.0.0 -Djboss.socket.binding.port-offset=1 -Dkeycloak.migration.action=import -Dkeycloak.migration.provider=singleFile -Dkeycloak.migration.file=/appsmith-stacks/data/keycloak_bkp.json -Dkeycloak.migration.strategy=OVERWRITE_EXISTING`\n\n\n```Monitor the output as shown below:\n```\n\n\n`08:20:54,708 INFO  [org.keycloak.services] (ServerService Thread Pool -- 54) KC-SERVICES0030: Full model import requested. Strategy: OVERWRITE_EXISTING\n   08:20:54,708 INFO  [org.keycloak.exportimport.singlefile.SingleFileImportProvider] (ServerService Thread Pool -- 54) Full importing from file /appsmith-stacks/data/keycloak_bkp.json\n   08:20:54,715 INFO  [org.keycloak.exportimport.util.ImportUtils] (ServerService Thread Pool -- 54) Realm 'master' already exists. Removing it before import\n   08:20:59,160 INFO  [org.keycloak.exportimport.util.ImportUtils] (ServerService Thread Pool -- 54) Realm 'master' imported\n   08:21:01,704 INFO  [org.keycloak.exportimport.util.ImportUtils] (ServerService Thread Pool -- 54) Realm 'appsmith' imported\n   08:21:01,794 INFO  [org.keycloak.services] (ServerService Thread Pool -- 54) KC-SERVICES0032: Import finished successfully`\nWhen you see lines similar to this, press ctrl+c to stop.\n\nTo apply the changes, restart using the following command:\n\n`bash\n   kubectl rollout restart deployment/appsmith -n <namespace>`\nCongratulations, you have successfully migrated to the Appsmith Business Edition Helm chart v2 installation.\nTroubleshooting",
    "tag": "appsmith"
  },
  {
    "title": "",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/installation-guides/kubernetes/install-k8s-business-edition.mdx",
    "content": "\n\nFollow the steps below to install Appsmith on your Kubernetes cluster:\n\n Add the Appsmith appsmith-ee chart repository. \n\n```bash\nhelm repo add appsmith-ee https://helm-ee.appsmith.com\n```    \n\nEnter the following command to load the Appsmith chart repository.\n\n```bash\nhelm repo update\n```    \n\nGenerate the `values.yaml` file.\n\n```bash\nhelm show values appsmith-ee/appsmith --version 2.0.0 > values.yaml\n```    \n\n Run the below command to deploy Appsmith:\n\n```bash\nhelm install appsmith appsmith-ee/appsmith -n  -f values.yaml\n```\n\n Create an Appsmith account and enter your license key to activate the instance.\n",
    "tag": "appsmith"
  },
  {
    "title": "Migrate to Helm Chart v2 (CE)",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/installation-guides/kubernetes/migrate-to-helm-chart-v2-ce.md",
    "content": "\ndescription: Migrate to the Appsmith Community Edition using Helm chart v2.\nMigrate to Helm Chart v2 (CE)\nTo migrate to the Community Edition running on Helm chart v2 (helm.appsmith.com), follow the instructions in the guide below. Helm chart v2 includes the Horizontal Pod Auto Scaling (HPA) feature, which allows the Appsmith pods to scale automatically based on the current workload.\nBackup data\nTake a backup using the appsmithctl backup command, follow the steps below:\n\nRun the following command in the old pods to create a data backup:\n\n`bash\n   kubectl exec -it appsmith-0 -n <NAMESPACE> appsmithctl backup`\n\nCopy the backup to local disk. The actual backup file's name should be available in the output of the previous step.\n\n`bash\n   kubectl cp <NAMESPACE>/<POD_NAME>:/appsmith-stacks/data/backup/<APPSMITH_BACKUP_GENERATED_NAME>.tar.gz <APPSMITH_BACKUP_GENERATED_NAME>.tar.gz`\nUninstall old Helm chart\nRun the below command to uninstall the existing helm chart:\n`bash\nhelm uninstall appsmith -n <namespace>`\nInstall v2 Helm chart\nIt's recommended to install the new Appsmith helm chart in the same namespace. However, you may choose to create a new namespace also. \n\nRun the below command to install Appsmith in a new namespace:\n\n`bash\n   helm install appsmith/appsmith --generate-name --version 2.0.0 -n <NAMESPACE_NAME> --create-namespace`\nThe command generates the output as shown below:\n`text\n   NAME: appsmith-1669367715\n   LAST DEPLOYED: Fri Nov 25 14:45:17 2022\n   NAMESPACE: <NAMESPACE_NAME>\n   STATUS: deployed\n   REVISION: 1\n   TEST SUITE: None`\n\n\nIn the earlier version of Appsmith, MongoDB and Redis instances were all running within the same container. However, with the v2 Helm chart, you now have the option to run these in separate containers. If you wish to do so, you can modify the values for Redis and MongoDB parameters in the `values.yaml` file as shown below:\n\n\nRun the below command to see the parameter configuration in `values.yaml` file.\n`bash\n  helm show values appsmith/appsmith --version 2.0.0 > values.yaml`\n\n\nLocate the below parameters for MongoDB and Redis in `values.yaml` file and modify them as shown below:\n```yaml\n  ## Redis parameters\n  redis:\n    # highlight-next-line\n    enabled: true\n    auth:\n      enabled: false\n    replica:\n      # highlight-next-line\n      replicaCount: 1\nmongodb:\n    # highlight-next-line\n    enabled: true\n    service:\n      nameOverride: appsmith-mongodb\n    auth:\n      rootUser: root\n      rootPassword : \n    # highlight-next-line\n    replicaCount: 2\n    architecture: \"replicaset\"\n    # highlight-next-line\n    replicaSetName: \n  ```\n\n\nRun the below command to install Appsmith:\n\n\n`bash\n   helm install appsmith/appsmith --generate-name --version 2.0.0`\nOnce Appsmith pods are up and running, proceed with copying and restoring the backup.\nCopy backup\nRun the below command to move the Appsmith backup from a local drive or s3 into the pod `/appsmith-stacks/data/backup/`.\n`bash\nkubectl cp <PATH_TO_BACKUP_TAR> <NAMESPACE>/appsmith-<POD_NAME>:/appsmith-stacks/data/backup/`\nRestore backup\nNow, that you have copied the backup into the pod, proceed to restore the backup by running the below command:\n`bash\nkubectl exec -it appsmith-0 -n <namespace> appsmithctl restore`\nCongratulations, you have successfully migrated to the Appsmith Community Edition Helm chart v2 installation.\nPublish Appsmith\nYou may choose to publish Appsmith service over internet. For more information, see How to publish Appsmith?\nTroubleshooting",
    "tag": "appsmith"
  },
  {
    "title": "Custom MongoDB & Redis",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/custom-mongodb-redis.md",
    "content": "\nsidebar_position: 3\nCustom MongoDB & Redis\nAppsmith runs it's own instances of MongoDB database for storing all application data, and Redis for storing session information. It's easy to switch to externally running instances of these services, by just changing the relevant environment variables.\n:::info Important\nIf you are currently using an older version of MongoDB, it's important to upgrade to version 5.0 before connecting Appsmith to an external MongoDB instance. For more information, follow the steps detailed on MongoDB official documentation to Upgrade a Replica Set to 5.0.\n:::\nCustom MongoDB\nTo point to a custom MongoDB, update the `env` variable called `APPSMITH_MONGODB_URI` to point to your custom MongoDB server. For example, if you are using MongoDB Cloud, you can change this to something like the following:\n`bash\nAPPSMITH_MONGODB_URI=mongodb+srv://<username>:<password>@mongo.host.name/databasename`\nThe exact URI to be set here can be obtained from MongoDB Cloud's web interface.\n:::note Important\n* Use a MongoDB database with Appsmith, `replicaSet` needs to be configured on the database. This can be done by connecting to the database as `admin`, and running rs.initiate(). If you are using MongoDB Cloud, this is always done for you.\n\nEnsure that the credentials used to connect to MongoDB should have the `readWrite` and `clusterMonitor` roles assigned.\n:::\n\nCustom Redis\nTo use a custom Redis with Appsmith, please change the `env` variable `APPSMITH_REDIS_URL`. For example,\n`bash\nAPPSMITH_REDIS_URL=redis://hostname:6379`\nApplying changes",
    "tag": "appsmith"
  },
  {
    "title": "Signup Restriction",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/disable-user-signup.md",
    "content": "\nsidebar_position: 6\nSignup Restriction\nThis document describes ways to restrict users from signing up on your self-hosted Appsmith instance. This configuration is done by editing the Instance configuration.\nDisable Sign-up\nThe environment variable `APPSMITH_SIGNUP_DISABLED` should be set to `true` to disable signing up of new users. When set, the following facts hold:\n\nNew, uninvited users cannot signup using the signup form or the OAuth buttons. Both modes of signing up are disallowed.\nNew, invited users can still signup using either the form or the OAuth buttons.\n\n:::tip\nThe signup page will continue to show up but will throw an error when a user tries to sign up. This environment variable's value does not affect the login behavior of existing users.\n:::\n:::caution\nThe user email IDs entered on the form login or signup is not verified by email or otherwise. This can lead to a breach while giving or receiving access to applications, resetting your password, using the email ID in any of your applications, etc. Make sure the user email IDs used exist to avoid issues like these.\n:::\nEmail domains white-list\nThe environment variable `APPSMITH_SIGNUP_ALLOWED_DOMAINS` can be used to restrict signups to emails belonging to only a specific set of domains. This field takes a comma-separated set of values.\nSetting `APPSMITH_SIGNUP_ALLOWED_DOMAINS=appsmith.com` will allow `homer@appsmith.com` to sign up, but not `bart@gmail.com`.\nSetting `APPSMITH_SIGNUP_ALLOWED_DOMAINS=appsmith.com,gmail.com` will allow both `homer@appsmith.com` and `bart@gmail.com` to sign up, but not `lisa@outlook.com`.\nWhen this environment variable is set to one or more domains, the following facts hold:\n\nNew, uninvited users cannot signup using the signup form or the OAuth buttons unless the email they use has a domain that's present in this environment variable.\nNew, but invited users can still signup using the signup form or the OAuth buttons, even if their email **does not** have a domain in the environment variable.\n\n:::tip\nThis environment variable's value does not affect the login behavior of existing users\n:::\n:::danger\nAccounts created via form signup are not validated via an email\n:::\nAdministrator emails\nThe environment variable `APPSMITH_ADMIN_EMAILS` can be set to a comma-separated list of email addresses, that will always be allowed to sign up, irrespective of the above two environment variables.\n```bash\nExample docker configuration\nAPPSMITH_ADMIN_EMAILS=homer@appsmith.com,marge@yahoo.com\n```",
    "tag": "appsmith"
  },
  {
    "title": "Super Admin",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/admin-settings.md",
    "content": "\nsidebar_position: 8\nSuper Admin\nAdmin Settings page provides a comfortable UI to configure your Appsmith instance. It's available only to superusers on all self-hosted instances. See below on how to configure superusers for your instance.\nUsing the Admin Settings UI\nOnce you log in as a superuser, you can find the Admin Settings option in the left sidebar.\n\nYou can update all the instance configurations listed here in the Admin Settings, including email, custom authentication, google maps.\n\nThe Admin Settings are segregated based on the area they affect. Pick the desired category from the left panel. You can update any setting and click `save & restart` (the UI shows a restart modal while the instance restarts). Once it restarts, your instance has the new settings.\nConfiguring a Super Admin\nIf you don\u2019t see the \u201cAdmin Settings\u201d option in the left sidebar, you\u2019re likely not the super admin of this instance. You can give super admin privileges to any user signed up in your instance by configuring the environment variable `APPSMITH_ADMIN_EMAILS` with comma-separated email ids of the users.\n```bash\nExample Docker Configuration\nAPPSMITH_ADMIN_EMAILS=user1@mydomain.com,user2@mydomain.com",
    "tag": "appsmith"
  },
  {
    "title": "Instance Configuration",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/README.mdx",
    "content": "\ndescription: >-\n  Appsmith ships with third-party services & configurations that improve the app\n  building experience. All services & configurations are entirely optional.\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nInstance Configuration\nConfiguration of your Appsmith instance allows you to tailor it to your specific needs. This process includes setting up elements like environment variables, authentication, emails, SSL, and custom domain. Proper configuration ensures that your instance is running efficiently. \nConfigure Docker installations\nTo configure a docker installation, go to your installation folder and edit the `stacks/configuration/docker.env` file with the environment variables for the service. For example, you wish to add Google Maps API key. Add/update the environment variable `APPSMITH_GOOGLE_MAPS_API_KEY` and add the Google API key to it as shown below:\n`bash\nAPPSMITH_GOOGLE_MAPS_API_KEY=YOUR_API_KEY`\nAfter making changes, be sure to restart the docker containers for the changes to take effect. Run the below command to restart the Appsmith container.\n\nDocker run\n  `bash\n   docker restart appsmith`\nDocker Compose\n  `bash\n   docker-compose restart appsmith`\n\nConfigure Helm installations\nTo configure environment variables using helm, follow these steps:\n\n \nYou may choose to configure environment variables: through commands or by using a `values.yaml` file.\n\nWhen using command, specify each parameter using `--set key=value[,key=value]` argument to helm upgrade.\n\n`bash\n    helm upgrade --set applicationConfig.<ENV_KEY>=<ENV_VALUE> [ RELEASE ] [ CHART ]`\n  For example, the below command sets the `APPSMITH_SIGNUP_DISABLED` variable to `true` and configures it to disable signup button on Appsmith login screen. \n\nAlternatively, use a `values.yaml` file. You can specify the parameter values in the `applicationConfig` section. \n\n`yaml\n    APPSMITH_OAUTH2_GOOGLE_CLIENT_ID: \"\"\n    APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET: \"\"\n    APPSMITH_OAUTH2_GITHUB_CLIENT_ID: \"\"\n    APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET: \"\"\n    APPSMITH_FORM_LOGIN_DISABLED: \"\"\n    APPSMITH_SIGNUP_DISABLED: \"true\"` \nOnce you have made changes to the values file, run the below command.\n`bash\n  helm upgrade --values values.yaml appsmith appsmith/appsmith`\n\n \nYou may choose to configure environment variables: through commands or by using a `values.yaml` file.\n\nWhen using command, specify each parameter using `--set key=value[,key=value]` argument to helm upgrade.\n\n`bash\n    helm upgrade --set applicationConfig.<ENV_KEY>=<ENV_VALUE> [ RELEASE ] [ CHART ]`\n  For example, the below command sets the `APPSMITH_SIGNUP_DISABLED` variable to `true` and configures it to disable signup button on Appsmith login screen. \n\nAlternatively, use a `values.yaml` file. You can specify the parameter values in the `applicationConfig` section. \n\n`yaml\n    APPSMITH_OAUTH2_GOOGLE_CLIENT_ID: \"\"\n    APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET: \"\"\n    APPSMITH_OAUTH2_GITHUB_CLIENT_ID: \"\"\n    APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET: \"\"\n    APPSMITH_FORM_LOGIN_DISABLED: \"\"\n    APPSMITH_SIGNUP_DISABLED: \"true\"`\nOnce you have made changes to the values file, run the below command.\n`bash\n  helm upgrade --values values.yaml appsmith appsmith-ee/appsmith`\n\n \nConfigure ECS installations\nTo configure an ECS installation, follow these steps:\n\nNavigate to the ECS console and select Task Definitions on the sidebar.\nClick on the Task Definition used by your ECS instance, and hit Create new revision.\nOn the `Task Definition config` page, click the Appsmith container definition to edit it. In the Environment Section, enter the environment configuration as key-value pairs as shown below.\n\n\nIt's recommended to use AWS Secrets for sensitive information, please follow the steps to create a secret. Use the ARN of the secret as the Environment value and set the option to ValueFrom.\n\nHit the Update button, and hit Create to make a new task definition.\nNavigate back to the ECS console and select your cluster. Click on your service to open the service details.\nClick on Update, and select the latest revision of the Task Definition.\nHit Skip to review and then Update Service. A screen as below shows the status.\n\n\nIt may take a minute for the new ECS Task to start running.\nFurther reading\n\nEmail\nCustom Domain\nSignup Restrictions\nGoogle Maps\nDisable Intercom\nSingle Sign-On (SSO)\n",
    "tag": "appsmith"
  },
  {
    "title": "Google Maps",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/google-maps.md",
    "content": "\ndescription: Configure your google maps API key to enable the maps widget on Appsmith\nsidebar_position: 5\n\nGoogle Maps\n\nTo enable the maps widget, login to your google cloud console\n1. Navigate to the credentials section under APIs & Services\n\n2. Create a new API Key Credential\n\n3. Restrict the API Key\n\n4. Enable the following APIs\n\nMaps Embed API\nMaps JavaScript API\nPlaces API\nGeolocation API\n\n\n5. Update the instance configuration with the below fields\n```bash\nExample Docker Configuration\n* Google Maps ****\nAPPSMITH_GOOGLE_MAPS_API_KEY=YOUR_API_KEY\n********\n```\n6. Restart the Appsmith Instance\n:::tip\nThe maps widget should now be enabled on your installation. Read more about Obtaining a google API key",
    "tag": "appsmith"
  },
  {
    "title": "Frame Ancestors",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/frame-ancestors.md",
    "content": "\nsidebar_position: 9\nFrame Ancestors\nStarting with Appsmith v1.7.10, you can control where your apps can be loaded in a frame.\nWhy should I control this?\nAllowing your Appsmith apps to be embedded on any website makes them susceptible to clickjacking attacks. Controlling this is one of the simplest ways to avoid these attacks.\nBy default, starting Appsmith v1.7.10, apps cannot be loaded in a frame/iframe on domains other than the app's domain. That is, if your Appsmith is available at `http://mydomain.com`, then only pages on `http://mydomain.com` will be able to embed apps.\nTo change/customize this, we've introduced the `APPSMITH_ALLOWED_FRAME_ANCESTORS` environment variable. To allow another domain like `http://trusted-other.com` to also embed apps from your Appsmith, use:\n`APPSMITH_ALLOWED_FRAME_ANCESTORS=\"'self' http://trusted-other.com\"`\nOr, to allow all subdomains on `mycompany.com`, use:\n`APPSMITH_ALLOWED_FRAME_ANCESTORS=\"'self' http://*.mycompany.com\"`\nYou can add multiple entries by separating them with spaces. For example:\n`APPSMITH_ALLOWED_FRAME_ANCESTORS=\"'self' http://trusted-other.com http://*.mycompany.com\"`",
    "tag": "appsmith"
  },
  {
    "title": "Custom CA Root Certificate",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/custom-domain/custom-ca-root-certificate.md",
    "content": "Custom CA Root Certificate\nYou can install custom CA root certificates in your Appsmith container. It is useful when:\n\nYou interact with internal endpoints that use private SSL certificates via Appsmith without disabling SSL verification.\nIf you have your Appsmith instance behind a firewall or a proxy, that requires SSL decryption.\n\nSetup Custom CA Root Folder\nYou can easily do this:\n\nBy creating a `ca-certs` folder in your `stacks` folder\nSaving all the CA root certificates in the `ca-certs` folder\nRestart Appsmith\n\n:::info\nIf your cert file has a `.pem` extension, rename it to `.crt.` You should add it in the `stacks/ca-certs` folder so that it will be picked up.\n:::\nAppsmith will check the `ca-certs` folder for CA root certificates and apply them on startup.\n:::info\nIf you remove a certificate from the `ca-certs` folder, it'll also be removed from the trust store and won't be trusted anymore.",
    "tag": "appsmith"
  },
  {
    "title": "SSL & Custom Domain",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/custom-domain",
    "content": "\nsidebar_position: 7\nSSL & Custom Domain\nYou can make Appsmith available on a custom domain by updating your domain's DNS records to point to the instance running Appsmith. Most domain registrars / DNS providers have documentation on how you can do this yourself.\n\nGoDaddy\nAmazon Route 53\nDigital Ocean\nNameCheap\nDomain.com\n\n\nSetting up SSL\nSSL automatically set up for your instance once you configure a custom domain for your instance. All SSL certificates Appsmith creates are generated and kept up to date through Let's Encrypt.\nCustom SSL certificate\nThe container supports generating a free SSL certificate. If you have your own certificate, please follow these steps to use it inside the container.\n\nFirstly, please rename your certificate file as `fullchain.pem` and key file as `privkey.pem`\nCopy these files into the sub-directory `<mounting-directory>/ssl/` (Note: Please change `<mounting-directory>` by the mounting volume directory in the `docker-compose.yml`. Default is `./stacks`)\nRestart the container using `docker restart appsmith`\n\nThe container checks the certificate files in the folder `<mounting-directory>/ssl` and use them if they exist.\n:::note\nIn case the certificate files have a different name from `fullchain.pem` and `privkey.pem`, it will fail to find the  custom certificate and auto-provisions the certificate by `Let's Encrypt`\n:::\nDocker\nAfter configuring your custom domain, getting HTTPS support is super easy. Just tell Appsmith about the custom domain and you are on.\nConfigure the `APPSMITH_CUSTOM_DOMAIN field` in your instance configuration with your custom domain\n```bash\nExample Docker Configuration\nAPPSMITH_CUSTOM_DOMAIN=appsmith.mydomain.com\n```\nRestart the appsmith container.\n:::info\nPlease ensure port 80 on your server is open and accessible from the Internet for the HTTPS certificate to be provisioned.\n:::\nKubernetes\nThe `APPSMITH_CUSTOM_DOMAIN` environment variable is not used for configuring TLS for a Kubernetes installation of Appsmith. For more information, see how to configure TLS for Appsmith Kubernetes installation.\nAWS AMI\n\nOnce your instance is ready, connect to that instance (via SSH) using your key pair (Create in step 2) and the public IP of your instance (Created in step 4) via the terminal or any SSH Client that you have\nMove to `/home/ubuntu/appsmith/stacks/configuration` folder\n\nEdit the `docker.env` file here and change the value of `APPSMITH_CUSTOM_DOMAIN` variable to your custom domain. For example:\n`APPSMITH_CUSTOM_DOMAIN=appsmith.mydomain.com`\n* Now restart your instance using `docker-compose restart appsmith`. This provisions the SSL certificate automatically before starting the server.\n\n\nAt this point, you should be able to browse to cloud server by entering your custom domain directly into your browser's address bar with HTTPS.\n:::info\nPlease ensure port 80 on your server is open and accessible from the Internet for the HTTPS certificate to be provisioned.\n:::\nHeroku\n\nGo to the Settings tab in your Heroku app\nClick the `Add domain` button in the `Domains` section\nInput your domain name & click `Next`. Heroku provides you with a DNS target that you can map your domain with.\nGo to your DNS provider and make sure that your custom DNS Record (Ex. appsmith.yourcompany.com) is updated to map to the `DNS Target`\n\n:::note\n* Once you use a custom domain, You might want to set up SSL for your dyno. Please check the official document of Heroku how to configure SSL\n* The dyno needs to be upgraded to at least \"Hobby\" type to use this feature of Heroku\n:::\nDigitalOcean\nTo host the Appsmith DigitalOcean droplet on a custom domain, you'll need to select the Add a domain option from the dashboard.\n\nIt redirects you to a new page. Add your domain name there. Once that's done, it'll give you records of the name servers. Copy the details of the NS (name servers). Use the custom name server's configuration on your domain provider. Sometimes, it might take up to 24 or 48 hours for this to go live.\n:::tip\nYour Appsmith instance should be available at https://appsmith.mydomain.com with automatic certificate provisioning and renewals.\n:::",
    "tag": "appsmith"
  },
  {
    "title": "GitHub OAuth",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/authentication/github-login.md",
    "content": "\ndescription: >-\n  Configure GitHub OAuth to enable Login via GitHub for the Appsmith\n  installation\nsidebar_position: 2\n\nGitHub OAuth\nGitHub allows the integration of third-party applications using your GitHub Identity. Follow the below guide to configure GitHub OAuth.\n\nTo enable GitHub Sign in, login to your GitHub Account\n1. Navigate to the Organizations section of your profile and the settings of the organization under which you want to create an OAuth App\n\n2. Navigate to the OAuth Apps section of the organization settings page\n\n3. Create a new OAuth App\n\n4. Configure the OAuth Credentials for a web application\nHomepage URL: the domain on which you are hosting Appsmith with HTTPS `(ex: https://app.appsmith.com)`\nAuthorization Callback URL: append /login/oauth2/code/github to the Homepage URL `(ex: https://app.appsmith.com/login/oauth2/code/github)`\n\n5. Update the instance configuration with the below fields\n\nConfigure via UI (recommended):\n\nOn your self-hosted instance, navigate to the Admin Settings page. Under the Authentication tab, you can find fields for providing your Client ID and Client Secret generated in the previous steps.\n\nOnce you've entered your provided the Client ID and Client Secret, click the Save & Restart button at the bottom of the page. This prompts your Appsmith instance with the new configuration in effect.\n\nConfigure via docker.env file:\n\nOn the machine hosting the Appsmith instance, find your `docker.env` file located in `<project-root>/stacks/configuration/`. Update the values for the following keys:\n\n\n``````bash\n# Example configuration in docker.env file\n# ********* Github OAUth **********\nAPPSMITH_OAUTH2_GITHUB_CLIENT_ID=YOUR_GITHUB_CLIENT_ID\nAPPSMITH_OAUTH2_GITHUB_CLIENT_SECRET=YOUR_GITHUB_CLIENT_SECRET\n# ******************************\n```\n\n* Configure the `APPSMITH_OAUTH2_GITHUB_CLIENT_ID` and `APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET` fields with the client ID and client secret generated in the step above\n* Configure `APPSMITH_SIGNUP_ALLOWED_DOMAINS` with a second-level domain name **`(ex: abc.com)`**, to only allow users with an email address from that domain name to log in **`(ex: john@abc.com)`**\n  * **Note**: you can provide several domain names using a comma-separated list\n* [Restart the Appsmith instance](../)\n```\n\n\n\n:::caution\nThe Client ID and Client Secret entered aren't verified by any means. Please test it out manually before disabling the Form login authentication method. If Form login is disabled before testing the GitHub authentication configuration setup, it may lead to the user getting stuck on the login screen if the GitHub configuration is invalid. You\u2019ll have to update the environment variables manually to fix this, as you can't update it via the Admin settings page since you won\u2019t be logged in anymore\n:::",
    "tag": "appsmith"
  },
  {
    "title": "JSON Web Tokens (JWT)",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/authentication/json-web-tokens-jwt.md",
    "content": "\nsidebar_position: 5\nJSON Web Tokens (JWT)\nJSON Web Token(JWT) is an open standard (RFC 7519) for securely transmitting information between parties in the form of a JSON object.\n:::info\nJSON Web Tokens (JWT) can be accessed as part of OpenID Connect (OIDC), available only in the business edition for self-hosted instances.\n:::\nHow to use JSON web tokens in Appsmith\nSuppose you have integrated your Single Sign On(SSO) provider with Appsmith using OpenID Connect, and you are using Appsmith to log in and your SSO provider to authenticate the request.\nRefer to the image below to see how this interaction takes place.\n\nIn the above image, you can see that:\n\nA user requests to login using Appsmith.\nBehind the scenes, Appsmith is integrated with the SSO provider.\nSSO Provider authorizes the request.\nThe SSO provider generates a token for authenticated users and shares them with Appsmith.\nAppsmith has the token accessible on the platform. You can pass it on in your APIs to provide access to the resources or perform desired operations.\n\nTypes of tokens\nAppsmith provides two types of JSON Web Tokens that your application can integrate with ID Token and Access Token.\nID token\nAn ID token is a signed assurance of a user\u2019s identity and contains basic information like the name, picture, email address, etc. When a user logs in successfully, an ID token is shared as per the Open ID Connect (OIDC) specification.\nHow to read ID token on Appsmith?\nOnce the SSO provider successfully authenticates a user, the ID token is available on the Appsmith platform.\n:::info\nAppsmith exposes the `idToken` parameter on the client side. It thus can be embedded in any operation that you would like to perform in JavaScript functions, APIs, or queries.\n:::\nYou can read the value of an id token in your APIs/Queries by using the mustache syntax `{{}}`.\n`{{appsmith.user.idToken}}`\nAccess token\nAn access token is an object that stores information about an entity in the form of claims. An access token comes in handy when you want to use token-based authentication. Access tokens are self-contained. You don\u2019t have to call a server to validate a token.\nHow to read Access token on Appsmith?\nAfter successful user authentication through an SSO Provider, you can use the access tokens on Appsmith. The access token is available as an environment variable.\n:::info\nThe environment variable isn't accessible on the client side as per security norms.\n:::\nThe environment variable `APPSMITH_USER_OAUTH2_ACCESS_TOKEN` stores access token. You can read the value of the access token by using it between the angular braces`<<>>.`\n`<<APPSMITH_USER_OAUTH2_ACCESS_TOKEN>>`\nWith the JSON Web Tokens available on Appsmith, you can securely exchange data or information between Appsmith and your apps or APIs.\nWhen to Use JSON Web Tokens?\nFollowing are some common scenarios where JSON Web Tokens are used:\nAuthentication\nFor an authenticated user, whenever a user requests to access resources, services, or routes, the application passes the information as an access token that follows a JWT format. Single Sign-On (SSO) commonly uses JWTs to communicate with different systems residing on similar or other domains.\nInformation Exchange\nJSON Web Tokens are a secure way of transmitting information between different applications. JWTs can also be signed. Tokens can have a timestamp associated with them, and once the timestamp is expired, you can block the information exchange for the expired token. You can also verify that the content of the token has not been tampered with. For example, using public/private keypairs, you can ensure that the sender is authorized. This provides an additional layer of security for data or information exchange.\nHow Does JSON Web Token Work?\nFor instance, you are authenticating a user. Your SSO Provider shares a JSON Web Token(JWT) on the successful authentication.\n:::info\nAs a best practice, you should only store the token for the time it is needed.\n:::\nWhenever a user requests access to a resource, the user agent should send the JWT, usually in the Authorization header using Bearer.\n`Authorization: Bearer <followed by the token value>`\nThe server\u2019s validation mechanism will verify the token in the `Authorization` header and grant access to the resources or allow the user to perform an action.\n:::info\nSending a token as a part of the Authorization header eliminates the Cross-Origin Resource Sharing(CORS) usually faced while sharing through cookies.\n:::\nJSON Web Token Structure\nA JSON Web Token has three main parts separated with a dot(.) - Header, Payload, and Signature.\nFor example, your header is HEADER1, Payload is PAYLOAD1, and Signature is SIGNATURE1, then the JWT structure will be:\n`HEADER1``.``PAYLOAD1``.``SIGNATURE1`\nHeader\nA JWT header stores information about the type of token that is JWT and the algorithm used for signing, like SHA256 or RSA, etc.\nSo, the header is represented as:\n```\n{\n\u201calg\u201d:\u201dHS256\u201d,\n\u201ctyp\u201d:\u201dJWT\u201d\n}\n```\nHere alg stands for the algorithm used for signing, and typ stands for the token type. The JSON is then encoded as a Base64Url to form the first part of the JSON Web Token, the header.\nPayload\nThe second part of the token, a payload, comprises claims. Claims are information about the entity usually associated with the user and the metadata. There are three types of claims - public, private, and reserved.\nPublic\nIf you create public claims, you must define them in IANA JSON Web Token Registry or define them as a URI with a collision-resistant namespace.\n:::info\nThe public claims should be validated and agreed upon by Issuer and Consumer.\n:::\nPrivate\nThe parties communicating with each other might want to have some custom claims identified. You can define these custom claims under private claims. These claims are neither registered nor public.\n:::info\nThe public/private claims should not have similar names as reserved claims as it will break the interoperability between the systems exchanging information.\n:::\nRegistered\nA set of pre-defined claims that are not mandatory but are deemed recommended are defined as registered claims. Such claims provide useful information like expiration time, issuer details, the intended audience, etc.\n:::info\nThe claim names are only three characters long to ensure compact JWT.\n:::\nA sample payload could be:\n```\n{\n\u201csub\u201d: \u201cSSOProvider\u201d,\n\u201cemail_verified\u201d: true,\n\u201cupdated_at\u201d: 1646310160264\n}\n```\nThe payload is then encoded to form a Base64Url and forms the second part of the token.\nSignature\nTo create a signature, you have to encode the header, payload, a secret, use the algorithm defined in the header and sign it.\nFor example, you are using HMAC SHA-256(HS256) algorithm. Then the generated signature is as follows:\n```\n \u200b\u200bHMACSHA256(\nbase64UrlEncode(header) + \".\" +\nbase64UrlEncode(payload),\nsecret)\n```\nYou can use the signature to validate the sender's authenticity, check if the message is tampered with, and sign with a private key.\nThe signature is encoded as Base64Url and appended to form a complete JSON Web Token.\nFor example, an encoded JWT with header, payload, and signature could be as follows:\n`eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9**.**eyJzdWIiOiJTU09Qcm92aWRlciIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJ1cGRhdGVkX2F0IjoxNjQ2MzEwMTYwMjY0fQ**.**qUwYZqYbtfCjhODEEF9M6B3JFN4WtUSg37MixYVN1h0`\nYou can see that the three parts of the JWT are separated by a dot(.).\n:::info\nYou can use the JWT Debugger to encode, decode, or verify the generated JWTs.\n:::\nWhy use JSON Web Tokens?\nThe key benefits of using a JWT are that it is more compact and thus smaller in size. It is secured and can use a shared secret between an issuer and a consumer. It uses JSON format; almost every programming language has a JSON parser, so you don\u2019t have to reinvent the wheel.",
    "tag": "appsmith"
  },
  {
    "title": "Authentication",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/authentication",
    "content": "\nsidebar_position: 1\ndescription: Learn how to configure Single Sign-On (SSO) in Appsmith using custom authentication methods. Improve security and user experience by integrating with the authentication system your users already trust. See the list of available SSO integrations to choose from.\"\n\nAuthentication\nThis section covers different authentication methods available on Appsmith. The default form login allows users to sign in using their email address and password. Besides, you can authorize users into Appsmith apps using Google OAuth, GitHub OAuth and popular SSO authentication protocols like SAML(enterprise version) and OpenID Connect(enterprise version).\nSingle Sign-On (SSO) is a convenient and secure way for users to access multiple applications with just one set of login credentials. This eliminates the need for users to remember multiple usernames and passwords, and also increases security by reducing the risk of password reuse. In Appsmith, SSO can be configured to use custom authentication methods, allowing users to securely access your apps using an authentication system they're already familiar with. For example, if a user logs into their email account using their SSO credentials, they can also be able to access other related systems such as the company's internal HR system, or a project management tool, without having to enter their login information again. This can save time and increase security by reducing the risk of forgotten passwords and phishing attacks.\nIn Appsmith, you have the option to configure Single Sign-On (SSO) using custom authentication methods. This allows you to integrate with the authentication system your users are already familiar with, providing a more seamless and secure login experience. Below is a list of available SSO integrations that can be configured in Appsmith:\n\nGoogle Login\nGitHub Login\nSecurity Assertion Markup Language (SAML)\n",
    "tag": "appsmith"
  },
  {
    "title": "Google OAuth",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/authentication/google-login.md",
    "content": "\ndescription: >-\n  Configure Google OAuth to enable login via Google for the Appsmith\n  installation\nsidebar_position: 1\n\nGoogle OAuth\nGoogle OAuth is one of the most widely used custom authentication integrations. Appsmith allows you to integrate with Google for authenticating users to your apps.\n\nTo enable Google Sign in, login to your google cloud console\n1. Navigate to the OAuth consent section under APIs & Services\n\n2. Configure the consent screen with the domain on which you want to host Appsmith\n\n3. Navigate to the credentials section and create new OAuth Credentials\n\n4. Configure the OAuth Credentials for a web application\nJavascript Origins: the domain on which you are hosting Appsmith with HTTPS `(ex: https://app.appsmith.com)`\nRedirect URIs: append /login/oauth2/code/google to your Javascript origins `(ex: https://app.appsmith.com/login/oauth2/code/google)`\n\n5. Update the instance configuration with the following fields:\n\nConfigure via UI (recommended):\n\nOn your self-hosted instance, navigate to the Admin Settings page. Under the Authentication tab, you can find fields for providing your Client ID and Client Secret generated in the previous steps.\n\nOnce you've entered your provided the Client ID and Client Secret, click the Save & Restart button at the bottom of the page. This prompts your Appsmith instance with the new configuration in effect.\n\n\nConfigure via docker.env file:\nOn the machine hosting the Appsmith instance, find your `docker.env` file located in `<project-root>/stacks/configuration/`. Update the values for the following keys:\n```bash\nExample configuration in docker.env file\n* Google OAuth *\nAPPSMITH_OAUTH2_GOOGLE_CLIENT_ID=YOUR_CLIENT_ID\nAPPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET=YOUR_CLIENT_SECRET\nAPPSMITH_SIGNUP_ALLOWED_DOMAINS=exampledomain.com\n******\n```\n\nConfigure the `APPSMITH_OAUTH2_GOOGLE_CLIENT_ID` and `APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET` fields with the client ID and client secret generated in the step above\nConfigure `APPSMITH_SIGNUP_ALLOWED_DOMAINS` with a second-level domain name `(ex: abc.com)`, to only allow users with an email address from that domain name to log in `(ex: john@abc.com)`\nNote: you can provide several domain names using a comma-separated list\nRestart the Appsmith instance\n\n\n\n\n:::caution\nThe Client ID and Client Secret entered aren't verified by any means. Please test it out manually before disabling the Form login authentication method. If Form login is disabled before testing the Google authentication configuration setup, it may lead to the user getting stuck on the login screen if the Google configuration is invalid. You\u2019ll have to update the environment variables manually to fix this, as you can't update it via the Admin settings page since you won\u2019t be logged in anymore\n:::",
    "tag": "appsmith"
  },
  {
    "title": "Auth0",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/auth0.md",
    "content": "\nsidebar_position: 5.1\nAuth0\nAuth0 is an authentication & authorization provider. It provides Security Assertion Markup Language (SAML) integration that you can use to integrate with Appsmith. Follow these steps to configure SAML integration:\n:::info\nSecurity Assertion Markup Language (SAML) is available only in the business edition for self-hosted instances, and only the Superuser of your Appsmith Instance can set up SAML.\n:::\nCreate Application\n\nLog in to your Auth0 account and go to Applications --> select the subhead Applications --> Click Create Application. (Please create an account if you don\u2019t have one on Auth0).\n\n\nFrom the available options, select Regular Web Applications.\n:::info\nThe default name of the application is My App. You can change it to give a suitable name to the application.\n:::\n\n\nYour application will be created, and you\u2019ll be navigated to the Application details page. Go to the Settings tab.\n\n\n\nScroll down to the Application URIs section. Add the Redirect URL (Copied from Appsmith SAML Configuration Redirect URL Field) to the Allowed Callback URLs field.\n\n\nClick Save Changes\nConfigure Auth0 SAML Fields in Appsmith\nTo complete the SAML configuration, you\u2019ll have to register the identity provider on Appsmith.\nRegister Identity Provider\nAppsmith provides the below options using which you can register the identity provider on Appsmith and complete the SAML Configuration. Follow the one that best suits you:\nMetadata URL\nSAML metadata is an XML document that provides information required for interaction with a SAML-enabled identity or service provider. The Metadata URL is the URL metadata for SAML configuration hosted on a remote server.\n:::info\nMetadata URL is the quickest and most recommended way to set up SAML.\n:::\n\nTo obtain the Metadata URL, navigate to the Settings tab, scroll down and expand the Advanced Settings.\n\n\n\nClick on the Endpoints, scroll down to the SAML config fields, and copy the SAML Metadata URL.\n\n\n\nNavigate to Appsmith, add the Metadata URL and click `SAVE & RESTART` button to save the configuration.\n\n\nXML\nIf you don\u2019t have a Metadata URL but have a raw SAML metadata XML document, you can choose XML to configure SAML.\n\nNavigate to Appsmith, click XML, add the raw XML in the `Metadata XML` field and click the `SAVE & RESTART` button to save the configuration.\n\n\nIdP Data\nYou can also configure SAML by providing the identity provider(IdP) data.\nIf you have Identity provider\u2019s data like `X509 Public Certificate`, `Email`, and more, you can choose this option to configure SAML.\n\nNavigate to Appsmith, and click IdP Data. You can get the information from `Metadata XML` and add the content of the tags as per the below mapping table:\n\n| Appsmith Field Name | Metadata XML Tag                                                                          |\n| ----------------------- | --------------------------------------------------------------------------------------------- |\n| Entity ID               | `<EntityDescriptor`` ````entityID``=\"urn:dev-ux0tussx.us.auth0.com\" /`>                 |\n| Single Sign-On URL      | `<SingleSignOnService/>`                                                                      |\n| X509 Public Certificate | `<X509Certificate/>`                                                                          |\n| Email                   | `<NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:``emailAddress``</NameIDFormat>` |\n\nOnce you have supplied the details, click the `SAVE & RESTART` button to save the configuration.\nComplete the SAML Configuration\nOnce the server restarts with new configurations, you will see a screen showing the message \u2018Authentication Successful!\u2019.\n\nYou\u2019ll see a login screen with the button `SIGN IN WITH SAML SSO`.",
    "tag": "appsmith"
  },
  {
    "title": "SAML SSO",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/authentication/security-assertion-markup-language-saml",
    "content": "\nsidebar_position: 3\nSAML SSO\nSecurity Assertion Markup Language (SAML) is an XML-based open standard for exchanging identity data between parties: an Identity provider(IdP) and a service provider.\nThe identity provider(IdP) is responsible for authentication and shares the user\u2019s identity and authorization level with a service provider on successful authentication.\nUpon successful authentication by the identity provider, the service provider authorizes the user to access resources.\n:::info\nSecurity Assertion Markup Language (SAML) is available only in the business edition for self-hosted instances, and only the Superuser of your Appsmith Instance can set up SAML.\n:::\nCapture Redirect & Entity URL\nFollow the below steps to configure your SAML Provider\u2019s settings. These steps are irrespective of the SAML provider that you choose.\n\nOn Appsmith, navigate to Profile \u2013->Admin Settings.\n\n\n\nNavigate to Authentication and open the available options for authentication on Appsmith.\n\n\n\nYou\u2019ll see several options available, select SAML and click Enable.\n\n\nRedirect URL\n\nCopy the Redirect URL, and keep it safe as you\u2019ll need this to add to your IdP\u2019s settings.\n\n\n:::info\nSave the Redirect URL as you\u2019ll need it to configure these in the\nSAML provider\u2019s settings.\n:::\nEntity URL\n\nCopy the Entity URL, and keep it safe as you\u2019ll need this to add to your IdP\u2019s settings.\n\n\n:::info\nSave the Entity URL as you\u2019ll need it to configure these in the SAML provider\u2019s settings.\n:::\nSAML Providers\nAppsmith integrates with popular SAML providers that you can choose from. Click the below available providers and follow the instructions to configure them for SAML integration:\n\nAuth0\nPing Identity\nOkta\nActive Directory\n\nGeneric SAML Configuration\nYou can also use configurations available on Appsmith to configure your SAML providers, which are not listed here. You can follow the steps listed below to configure the details:\nConfigurations at the Identity Provider\nYou\u2019ll need a Redirect URL and an Entity URL to configure SAML integration for an identity provider. Follow the below steps to capture the redirect and the entity URL available on Appsmith.\n\nOn Appsmith, navigate to Profile >> Admin Settings.\n\n\n\nNavigate to Authentication, and open the available options for authentication on Appsmith.\n\n\n\nYou\u2019ll see several options available, select SAML and click Enable.\n\n\nRedirect URL\n\nCopy the Redirect URL, and keep it safe as you\u2019ll need this to add to your IdP\u2019s settings.\n\n\n:::info\nAdd the Redirect URL to the SAML Configuration to fields like the Callback URL.\n:::\nEntity URL\n\nCopy the Entity URL, and keep it safe as you\u2019ll need this to add to your IdP\u2019s settings.\n\n\n:::info\nAdd the Entity URL to the Entity URL available for the SAML settings.\n:::\nConfigurations at Appsmith\nYou can register your identity provider with Appsmith in one of the following available ways and complete SAML integration.\nMetadata URL\nThe metadata XML document is usually hosted and available remotely to integrate with. You can use the URL to configure SAML on Appsmith. Copy the URL where the metadata XML is available and paste it into the Metadata URL field as shown in the screenshot below .\n\nXML\nIn case the Metadata URL is unavailable, but you have a raw SAML metadata XML locally available, you can click on the XML tab and add the raw Metadata XML into the Metadata XML field as shown in the below screenshot.\n\nIdP Data\nYou can also configure SAML by manually adding the IdP details. If you choose to do so, you\u2019ll need the below details:\n\nEntity URL - The entity URL available for the Identity Provider\nSingle Sign-on URL - The SSO URL for the identity provider\nX509 Public Certificate - A certificate that defines the public-key formats.\nEmail - The name format used for an email address.\n\n\nComplete the Configuration\nOnce you have added the required details click on Save & Restart. On server restart, you\u2019ll see an Authentication Successful! message as shown in the screenshot below.\n\nYou can now see a SIGN IN WITH SAML SSO available on the Login screen and can use it to log into Appsmith using SAML.",
    "tag": "appsmith"
  },
  {
    "title": "Okta",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/okta.md",
    "content": "\nsidebar_position: 5.3\nOkta\nOkta, an Identity-as-a-Service (IDaaS) provider, supports authentication using Secure Assertion Markup Language (SAML). You can use SAML as an authentication type on Appsmith and configure the setup to use Okta as an identity provider.\n:::info\nSecurity Assertion Markup Language (SAML) is available only in the business edition for self-hosted instances, and only the Superuser of your Appsmith Instance can set up SAML.\n:::\nCreate App Integration\nLog in to your Okta Developer Account and navigate to Applications >> Applications >> Click Create App Integration.\n\n\nChoose SAML as the Sign-in method and click Next.\n\n\n\nUse this screen to configure a meaningful name and logo for your application, and click Next.\n\n\n\nOn the next screen, provide details as per the below mapping table, and then click Next.\n\n\n\nOn the next screen, select details as per the below mapping table, and click Finish.\n\n| Field Appsmith SAML Configuration | Field Okta SAML Configuration |\n| ------------------------------------- | --------------------------------- |\n| Redirect URL                      | Single sign-on URL                |\n| Entity URL                        | Audience URI (SP Entity ID)       |\n| Name ID Format                    | Select Email Address              |\n| Application Username              | Email                             |\nYou\u2019ll see that the app integration is created on Okta. Navigate to Appsmith to configure the SAML fields and complete the configuration.\nConfigure Okta SAML fields in Appsmith\nTo complete the SAML setup, you\u2019ll have to register Okta as a provider on the Appsmith platform. Follow the instructions listed below to complete this step:\nRegister Identity Provider\nThere are several ways to register the identity provider on Appsmith and complete the SAML Configuration. Follow the one that best suits you:\nMetadata URL\nSAML metadata is an XML document that provides information required for interaction with a SAML-enabled identity or service provider. The Metadata URL is the URL metadata for SAML configuration hosted on a remote server.\n:::info\nMetadata URL is the quickest and most recommended way to set up SAML.\n:::\n\nNavigate to Applications >> Applications >> Application Name (SAMLAppsmithIntegration) >> Click on tab Sign On >> Scroll down to SAML configuration instructions >> Click Identity Provider Metadata link to open the metadata in a browser tab >> Copy the URL from address bar.\n\n\n\nNavigate to Appsmith, add the Metadata URL and click `SAVE & RESTART` button to save the configuration.\n\n\nXML\nIf you don\u2019t have a Metadata URL but have a raw SAML metadata XML document, you can choose XML to configure SAML.\n\nNavigate to Appsmith, click XML, add the raw XML in the `Metadata XML` field and click the `SAVE & RESTART` button to save the configuration.\n\n\nIdP Data\nYou can also configure SAML by providing the identity provider(IdP) data. If you have Identity provider\u2019s data like X509 Public Certificate, Email, and more, you can choose this option to configure SAML.\n\nNavigate to Applications >> Applications >> Application Name (SAMLAppsmithIntegration) >> Click on tab Sign On >> Scroll down to SAML 2.0 >> Click View Setup Instructions\n\n\n\nThe Setup Instructions screen opens up in a new browser tab. Add the content of the tags as per the below mapping table on the Appsmith platform:\n\n| Appsmith Field Name     | Metadata XML Tag                                                                            |\n| --------------------------- | ----------------------------------------------------------------------------------------------- |\n| Entity ID               | Identity Provider Issuer                                                                        |\n| Single Sign On URL      | Identity Provider Single Sign-On URL                                                            |\n| X509 Public Certificate | X.509 Certificate                                                                               |\n| Email                   | \\urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\\ |\n\nOnce you have supplied the details, click the `SAVE & RESTART` button to save the configuration.\nComplete the SAML Configuration\nOnce the server restarts with new configurations, you will see a screen showing the message \u2018Authentication Successful!\u2019.\n\nYou\u2019ll see a login screen with a button `SIGN IN WITH SAML SSO`.",
    "tag": "appsmith"
  },
  {
    "title": "Ping Identity",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/ping-identity.md",
    "content": "\nsidebar_position: 5.2\nPing Identity\nPing Identity (PingID) is the identity as a security platform provider. It's a cloud-based authentication service provider and supports Security Assertion Markup Language (SAML). You can use Appsmith to integrate with Ping Identity using SAML configuration for authentication.\n:::info\nSecurity Assertion Markup Language (SAML) is available only in the business edition for self-hosted instances, and only the Superuser of your Appsmith Instance can set up SAML.\n:::\nCreate Environment\nLog into your PingOne account. (Please create an account if you don\u2019t have one). On the dashboard, you can see the Home menu, click on home and see the environment listing.\n\nClick on the Add Environment button.\n\n\n\nClick on the Build your own Solution, select `PingOne SSO`, and click Next.\n\nCreate Application\n\nClick on the Connections available on the left sidebar and click Applications. Create a new application by clicking on `(+)`.\nFill in the details:\nName - Provide a meaningful name\nDescription - Provide a description\nSelect Application Type as SAML Application.\n\n\n\nClick Save, and you\u2019ll see a configuration overlay and Configure button. Click on Configure button to complete the SAML configuration.\n\n\n\nYou can choose one of the available options to configure SAML.\n\n\nConfigure SAML\nPing Identity provides several ways to set up SAML integration. For configuring integration with Appsmith, select Manually Enter for Provide Metadata. Add the details as per the below mapping:\n\nAdd Redirect URL (available on Appsmith) to ACS URLs field.\nAdd Entity URL (available on Appsmith) to the Entity ID field.\nClick Save to create an application with SAML Configuration.\n\n\n\nYou\u2019ll see the application is created with SAML configuration as below\n\n\nConfigure Ping Identity Fields in Appsmith\nTo complete the SAML setup, you\u2019ll have to register PingID as a provider on the Appsmith platform. Follow the instructions listed below to complete this step:\nRegister Identity Provider\nThere are many ways to register the identity provider on Appsmith and complete the SAML Configuration.\nNavigate to Admin Settings >> Authentication >> Click Enable. Choose the one that best suits you:\nMetadata URL\nSAML metadata is an XML document that provides information required for interaction with a SAML-enabled identity or service provider. The Metadata URL is the URL metadata for SAML configuration hosted on a remote server.\n:::info\nMetadata URL is the quickest and most recommended way to set up SAML.\n:::\n\nNavigate to Environment >> Select Environment_Name >> Click Connections >> Select Application_Name >> Click Configuration Tab >> copy IDP Metadata URL.\n\n\n\nAdd the copied IDP Metadata URL to the Metadata URL field on Appsmith and click `SAVE & RESTART` button to save the configuration.\n\n\nXML\nIf you don\u2019t have a Metadata URL but have a raw SAML Metadata XML document, you can choose XML to configure SAML.\n\nClick XML, add the raw XML in the `Metadata XML` field, and click the `SAVE & RESTART` button to save the configuration.\n\n\nIdP Data\nYou can also configure SAML by providing the identity provider(IdP) data. If you have Identity provider\u2019s data like X509 Public Certificate, Email, and more, you can choose this option to configure SAML.\n\nNavigate to Environment >> Select Environment_Name >> Click Connections >> Select Application_Name >> Click Configuration Tab >> Click Download Metadata.\nAdd the content of the tags as per the below mapping table on the Appsmith platform:\n\n| Appsmith Field Name     | Metadata XML Tag                                                                                                                                       |\n| --------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Entity ID               | \\ entityID attribute                                                                                                                |\n| Single Sign-On URL      | \\ Location attribute                                                                                                             |\n| X509 Public Certificate | \\                                                                                                                                        |\n| Email                   | \\ |\n\nComplete the SAML Configuration\nOnce the server restarts with new configurations, you will see a screen showing the message \u2018Authentication Successful!\u2019.\n\nYou\u2019ll see a login screen with the button `SIGN IN WITH SAML SSO`.",
    "tag": "appsmith"
  },
  {
    "title": "Active Directory",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/authentication/security-assertion-markup-language-saml/active-directory.md",
    "content": "\nsidebar_position: 5.4\nActive Directory\nAzure Active Directory (Azure AD) is a cloud-based identity and access management service. This service helps your employees access external resources, such as Microsoft 365, the Azure portal, and thousands of other SaaS applications.\n:::info\nSAML is available only in the business edition for self-hosted instances, and only the Superuser of your Appsmith Instance can set up SAML.\n:::\nTo configure SAML within Appsmith using Active Directory as a SAML provider, follow these steps:\nCreate Application\n \n\nLog in to your Azure account and click on More services.\nClick on Azure Active Directory and hit \u201c+Add\u201d, and select \u201cEnterprise Application.\u201d\nUnder Browse AD Azure Gallery window, click on create your application, and:\nGive your application a meaningful name.\nSelect \u201cIntegrate any other application you don't find in the gallery (Non-gallery)\u201d from the \u201cWhat are you looking to do with your application?\u201d options.\nHit the Create button.\n\nConfigure Appsmith URLs in Active Directory\nAs mentioned in Capture Redirect & Entity URL, you need to add these URLs to your SAML application. Go to your SAML application homepage and follow the steps below:\n\n\nClick on Single Sign-on from the sidebar and select SAML.\nGo to section 1, \u201cBasic SAML Configuration,\u201d and click on edit on the Single Sign-on window.\nAdd the Entity URL (copied from the SAML configurations in Appsmith) under Identifier (Entity ID).\nAdd the Redirect URL (copied from the SAML configurations in Appsmith) under Replay URL(Assertion Consumer Service URL).\n\nConfigure Active Directory SAML Fields in Appsmith\nTo complete the SAML configuration, you\u2019ll have to register the identity provider on Appsmith.\nRegister Identity Provider\nAppsmith provides the below options using which you can register the identity provider on Appsmith and complete the SAML Configuration. Follow the one that best suits you:\nMetadata URL\nSAML metadata is an XML document that provides information required for interaction with a SAML-enabled identity or service provider. The Metadata URL is the URL metadata for SAML configuration hosted on a remote server.\n:::info\nMetadata URL is the quickest and most recommended way to set up SAML.\n:::\n\n\nTo get the metadata URL, click on Single Sign-on from the sidebar and go to section 3, \u201cSAML Signing Certificate.\u201d\nCopy the \u201cApp Federation Metadata Url\u201d and add it to the \u201cmetadata URL\u201d field in Appsmith.\nClick on SAVE AND RESTART to save the configuration.\n\n\nXML\nIf you don\u2019t have a Metadata URL but have a raw SAML metadata XML document, you can choose XML to configure SAML.\n\n\nTo get the metadata XML, click on Single Sign-on from the sidebar and go to section 3 \u201cSAML Signing Certificate\u201d.\nDownload the \u201cFederation metadata XML\u201d.\nAdd the content of the metadata XML file to the \u201cmetadata XML\u201d field in Appsmith.\n\n\nIdP Settings\nYou can also configure SAML by providing the identity provider(IdP) data.\nIf you have Identity provider\u2019s data like X509 Public Certificate, Email, and more, you can choose this option to configure SAML.\n\nTo get IdP data, click on Single Sign-on from the sidebar, go to section 3 \u201cSAML Signing Certificate\u201d and download the Federation metadata XML file.\nNavigate to Appsmith, click IdP Data and add the content of the tags (from metadata XML) as per the below mapping table:\n\n| Appsmith Field Name                                                   | Metadata XML Tag                                                                                                                                                                  |\n| ------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Entity ID                                                             | `<EntityDescriptor xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\" ID=\"_07355b4e-806d-4cd5-9f0a-949d831ba67e\" entityID=\"https://sts.windows.net/3e889401-476e-489a-9d84-07f623ee08a4/\">` |\n| Single Sign-On URL                                                    | `<SingleSignOnService/>`                                                                                                                                                              |\n| X509 Public Certificate                                               | `<X509Certificate/>`                                                                                                                                                                  |\n| Email (It is a static input,please add this value to the Email field) | `urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress`                                                                                                                              |\n\nOnce you have supplied the details, click the `SAVE & RESTART` button to save the configuration.\nComplete the SAML Configuration\nOnce the server restarts with new configurations, you will see a screen showing the message \u2018Authentication Successful!\u2019.\n\nYou\u2019ll see a login screen with the button `SIGN IN WITH SAML SSO`.",
    "tag": "appsmith"
  },
  {
    "title": "Auth0",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/authentication/openid-connect-oidc/auth0.md",
    "content": "\nsidebar_position: 4.1\nAuth0\nAuth0 is an authentication and authorization as a service provider. To configure OpenID Connect(OIDC) within Appsmith using Auth0 as an OIDC provider, follow these steps:\n:::info\nOpenID Connect is available only in the business edition for self-hosted instances, and only the Superuser of your Appsmith Instance can set up OIDC.\n:::\nCreate Application\n\nLog in to your Auth0 account and go to Applications. (Please create an account if you don\u2019t have one on Auth0).\n\n\n\nClick on +Create Application and pick Regular Web Applications from the given options. The default name of the application is My App. You can change it as per your requirements.\n\n\n\nOpen the newly created Auth0 App, go to the settings tab and -\nAdd the Redirect URL (Copied from OIDC window in Appsmith\u2019s Admin Settings) in the following fields -\n\n\n\nApplication Login URL\nAllowed Callback URLs\n\n\nConfigure Auth0 fields in Appsmith\nTo continue with the OIDC setup on Appsmith, navigate to Auth0 configurations and perform the following actions:\n\nCopy the Client ID, and Client Secret paste them into the OIDC configurations in Appsmith.\n\n\n\nGo to Advance Settings and open the endpoints tab. Copy the required OAuth URLs and add them to your OIDC configurations. Add all the URLs copied from Auth0 to Appsmith.\nConfigurations at Auth0\n\n\n\nConfiguration at Appsmith\n\n\n\n`RS256` is the default Token Signing Algorithm used by Appsmith and most identity providers. If you have a custom setup, you can choose from one of the supported algorithms under the Advanced section of the Appsmith OIDC setup page. Please note, verifying tokens signed with the `HS256` algorithm isn't supported.\n\nConfiguring Scopes for Auth0\nThe scope defines the OpenID Connect (OIDC) scopes that allow you to authorize the access of user details (after a user is successfully authenticated) like name, email, profile picture, and more. Each scope maps to a set of user attributes and returns its value. Just below the JSON Web Key Set, you\u2019ll see the Scope field:\n\nWhat does Appsmith need as part of Scopes?\nAppsmith needs openid and email as mandatory scopes. It's also highly recommended to use the offline_access scope to avoid errors related to expired access tokens and excessive re-login requests.\n:::info\nEnabling the `offline_access` scope enables your app to receive refresh tokens that extend the duration that your users have access to their resources. To read more, see the Auth0 documentation.\n:::\nYou can add more scopes if you wish, provided that they're available via Auth0.\nAuth0 Scope\nAuth0 provides standard claims: openId, profile, and email as part of the authorization action. If you want to access additional user attributes, you\u2019ll have to configure them on the Auth0 and add them to Appsmith as part of the Scope field.\nConfiguring Username Attributes for Auth0\nThe username attributes define the attributes used as usernames for authentication. You can add the attribute to this field that you consider for logging.\n\nWhat does Appsmith need as a Username Attribute?\nAppsmith considers email address as username. Please ensure that you have added it as an attribute in the Username Attribute field. Please provide email as the attribute name for configuring the username attribute for Auth0.\nComplete OIDC Setup\n\nSave the changes and restart your application by clicking `SAVE & RESTART` button.\n\n\n\nYou\u2019ll see the SIGN IN WITH OIDC SSO on the Appsmith\u2019s login screen.\n",
    "tag": "appsmith"
  },
  {
    "title": "OpenID Connect SSO",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/authentication/openid-connect-oidc",
    "content": "\nsidebar_position: 4\nOpenID Connect SSO\nOpenID Connect (OIDC) is an authentication protocol built on OAuth2.0 paradigm. You can use OIDC to securely sign-in users to your application.\n:::info\nOpenID Connect is available only in the business edition for self-hosted instances, and only the Superuser of your Appsmith Instance can set up OIDC.\n:::\nCapture Redirect URL for OIDC Configuration\n:::info\nYou will have to add the redirect URL to your preferred OIDC Provider\u2019s settings.\n:::\nFor OIDC configuration in Appsmith, follow the steps below (the below steps are irrespective of the SSO provider you choose):\n\nOn your Appsmith Application, go to Profile > Admin Settings.\n\n\n\nNavigate to Authentication and open the types of authentication available on Appsmith.\n\n\n\nSelect OIDC, click on Enable\n\n\n\nCopy the Redirect URL\n\n\n:::info\nSave the `Redirect URL` as you\u2019ll need it to configure in OIDC Provider\u2019s settings.\n:::\n:::info\nYou can choose to integrate with any one of the following OIDC providers by clicking on any of them below.\n:::\nOIDC Providers\nAppsmith provides some popular OIDC integrations that you can choose from. Click on the available providers to follow the exhaustive guide for integrating with them:\n\nAuth0\nPing Identity\nOkta\nActive Directory\n",
    "tag": "appsmith"
  },
  {
    "title": "Okta",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/authentication/openid-connect-oidc/okta.md",
    "content": "\nsidebar_position: 4.3\nOkta\nOkta is an Identity-as-a-Service (IDaaS) provider. To configure OpenID Connect (OIDC) within Appsmith using Okta, follow these steps:\n:::info\nOpenID Connect is available only in the business edition for self-hosted instances, and only the Superuser of your Appsmith Instance can set up OIDC.\n:::\nCreate Application\n\nLog in to your Okta Developer Account and go to Applications. (Please create an account if you don\u2019t have one).\n\n\n\nClick on Create App integration. In Create App integration window, choose OIDC as the Sign-in method and Web application as the Application type. Click on Next.\n\n\n\nIn the General settings of the newly created App Integration:\nGive your App integration a meaningful name (Optional.)\n\n\n\nAdd the redirect URL (Copied from the OIDC window in Appsmith\u2019s Admin Settings) in the Sign-in redirect URL field.\n\n\nYou can add multiple redirect URLs.\n\n\nUnder Assignment, configure the Accessibility of this App as required.\n\n\n\nClick on Save. This action creates the app integration and opens the settings page to configure additional options.\n\nConfigure Okta fields in Appsmith\nTo continue with the OIDC setup on Appsmith, navigate to the fields on the Okta configurations, and perform the actions as mentioned below:\n\n\nOn the Okta Application homepage, go to the General tab:\n\nCopy the Client ID and Client Secret and paste them into the OIDC configurations in Appsmith.\n\n\n\n\n\nConfiguration at Okta\nCopy your Okta domain URL, attach `/.well-known/openid-configuration` to it, and open this modified URL in your browser.\n\n`<your_okta_domain>/.well-known/openid-configuration`\n\n\nConfiguration at Appsmith - Add all the configurations from the above URL in OIDC Configurations on Appsmith. Refer to the below table that shows field mapping:\n\n| Fields (Okta)       | Fields (Appsmith) |\n| ----------------------- | --------------------- |\n| authorization_endpoint | Authorization URL     |\n| token_endpoint         | Token URL             |\n| Userinfo_endpoint      | User Info URL         |\n| Jwks_uri               | JWK Set URL           |\n\n\n`RS256` is the default Token Signing Algorithm used by Appsmith and most identity providers. If you have a custom setup, you can choose from one of the supported algorithms under the Advanced section of the Appsmith OIDC setup page. Please note, verifying tokens signed with the `HS256` algorithm isn't supported.\n\nConfigure Scopes for Okta\nThe scope defines the OpenID Connect (OIDC) scopes that allow you to authorize the access of user details ( after a user is successfully authenticated) like name, email, profile picture, and more. Each scope maps to a set of user attributes and returns its value. Just below the JSON Web Key Set, you\u2019ll see the Scope field:\n\nWhat does Appsmith need as part of Scopes?\nAppsmith needs openid as a mandatory scope. It's also highly recommended to use the offline_access scope to avoid errors related to expired access tokens and excessive re-login requests.\n:::info\nEnabling the `offline_access` scope enables your app to receive refresh tokens that extend the duration that your users have access to their resources. To read more, see the Okta documentation.\n:::\nYou can add more scopes if you wish, provided that they're available via Okta.\nOkta Scope\nOkta provides a number of configurable scopes that can be granted based on your business requirements. Navigate to Okta API Scopes, where you\u2019ll be able to grant all or selected scopes.\n\nConfigure Username Attributes for Okta\nThe username attributes define the attributes used as usernames for authentication. You can add the attribute to this field that you consider for logging.\n\nWhat does Appsmith need as a Username Attribute?\nAppsmith considers email address as username. Please ensure that you have added it as an attribute in the Username Attribute field. Please provide email as the attribute name for configuring the username attribute for Okta.\nComplete OIDC Setup\n\nSave the changes and restart your application by clicking `SAVE & RESTART` button.\n\n\n\nYou\u2019ll see the SIGN IN WITH OIDC SSO on the Appsmith\u2019s login screen.\n",
    "tag": "appsmith"
  },
  {
    "title": "Ping Identity",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/authentication/openid-connect-oidc/ping-identity.md",
    "content": "\nsidebar_position: 4.2\nPing Identity\nPing Identity (PingID) is a cloud-based authentication provider. To configure OpenID Connect(OIDC) within Appsmith using PingID as an OIDC provider, follow these steps:\n:::info\nOpenID Connect is available only in the business edition for self-hosted instances, and only the Superuser of your Appsmith Instance can set up OIDC.\n:::\nCreate Environment\n\nLog into your Ping one account (Please create a new account if you don\u2019t have one). and:\nOn the top left, click the Ping Identity logo.\nSelect Home. You\u2019ll see the list of environments available. Click `Add Environment` available on the top right.\n\n\n\nClick on Build your own solution in the Create Environment window and choose `PingOne SSO` from the given options.\n\n\n\nFill in the details about the environment and click on Next.\n\n\n\nGo to Connections from the sidebar and click on Applications. Create a new Application by clicking on the `+` button.\nOn the New application window, select `Web App` and choose OIDC as the connection type. Enter the application name and description (optional) on the next page.\nOn the Configure window, add the Redirect URL of your Appsmith application (Copied from the OIDC window in Appsmith\u2019s Admin Settings) and click on Save and Continue.\n\n\n\nUse the Grant Access Resources to filter the scopes by openid resource type. Move the desired scopes to Scope Grants to give access to the resources. Click on Save and Continue.\nIn the Attribute Mapping, add the OIDC attributes. Please note that only the values added in the `Scope Grant` will be valid here. Hit Save and Close, and your application is ready.\n\n\n\nIn your app's settings pane, navigate to the Configuration tab. Click the pencil icon to begin editing the app's settings, and tick the Refresh Token box to enable Ping Identity to issue refresh tokens to Appsmith. Your app is now configured for use with Appsmith.\n\n\n\nUnder the general section, you can see the basic information about your application. You can add multiple Redirect URLs by simply editing the general configurations. (Allows you to use this PingID application for multiple Appsmith applications.\n\n\n\nEnable user access to the application from the toggle switch at the top right corner.\n\n\nConfigure PingID fields in Appsmith\nTo continue with the OIDC setup on Appsmith, navigate to the fields on the Ping Identity configurations, and perform the actions mentioned below:\n\nGo to the configuration tab. Here, you\u2019ll get all the configurations that are required to be added to your Appsmith application (Admin Settings \u2192Authentication \u2192OIDC)\nConfigurations on PingID\n\n\n\nConfigurations at Appsmith\n\n\n\n`RS256` is the default Token Signing Algorithm used by Appsmith and most identity providers. If you have a custom setup, you can choose from one of the supported algorithms under the Advanced section of the Appsmith OIDC setup page. Please note, verifying tokens signed with the `HS256` algorithm isn't supported.\n\nConfigure Scopes for Ping Identity\nThe scope defines the OpenID Connect (OIDC) scopes that allow you to authorize the access of user details ( after a user is successfully authenticated) like name, email, profile picture, and more. Each scope maps to a set of user attributes and returns its value. Just below the JSON Web Key Set, you\u2019ll see the Scope field:\n\nWhat does Appsmith need as part of Scopes?\nAppsmith needs openId as a mandatory scope. You can add more scopes if the need be. You will have to ensure that the same is available at Ping Identity.\nPing Identity Scope\nPing Identity supports static and dynamic scopes. A static scope is defined using a text value that could be an attribute name. Dynamic scope is defined using a variable name that will hold the attribute value at runtime. Ping Identity provides an exhaustive guide to configure scopes available on their portal.\nConfigure Username Attributes for Ping Identity\nThe username attributes define the attributes used as usernames for authentication. You can add the attribute to this field that your SSO provider considers for logging.\n\nWhat does Appsmith need as a Username Attribute?\nAppsmith considers email address as username. Please ensure that you have added it as an attribute in the Username Attribute field. Please provide email as the attribute name for configuring the username attribute for PingIdentity.\nComplete OIDC Setup\n\nSave the changes and restart your application by clicking `SAVE & RESTART` button.\n\n\n\nYou\u2019ll see the SIGN IN WITH OIDC SSO on the Appsmith\u2019s login screen.\n",
    "tag": "appsmith"
  },
  {
    "title": "Active Directory",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/authentication/openid-connect-oidc/active-directory.md",
    "content": "\nsidebar_position: 4.4\nActive Directory\nAzure Active Directory (Azure AD) is a cloud-based identity and access management service. This service helps your employees access external resources, such as Microsoft 365, the Azure portal, and thousands of other SaaS applications.\n:::info\nOpenID Connect is available only in the business edition for self-hosted instances, and only the Superuser of your Appsmith Instance can set up OIDC.\n:::\nTo configure OpenID Connect(OIDC) within Appsmith using Active Directory as an OIDC provider, follow these steps:\nCreate an Application\n\n\nLog in to your Azure account and click on More services.\nClick on Azure Active Directory and hit \u201c+Add.\u201d From the \"+Add\" dropdown, select \u201cApp Registration.\u201d\nUnder App Registration:\nName: Give your App a meaningful name.\nSupported account types: Select \u201cAccounts in this organizational directory only (Default Directory only - Single tenant).\"\nRedirect URL: select the application type as Web for Platform and add the redirect URL (Copied from the OIDC window in Appsmith\u2019s Admin Settings).\nClick on Register to create the application.\n\nConfigure Active directory with Appsmith\nOn the application homepage, go to the overview tab and perform the following actions under the essentials dropdown:\n\nCopy the Application (client) ID and paste it under the Client ID in the OIDC configurations in Appsmith.\nFor Client secret, click on \u201cClient credentials: Add a certificate or secret.\u201d\nIn the \u201cCertificates and Secrets window,\u201d go to the Client secret tab and click on \u201cNew client secret.\u201d\nAdd the key's description and expiration time in the \u201cAdd a client secret\u201d pop-up. Click on Save.\nCopy the value of the new Client secret and add it under Client secret in the OIDC configurations in Appsmith.\n\n\n\nClick the Endpoints tab under App overview and copy the OpenID Connect metadata document URL.\n\n \n\nOpen the metadata URL in a browser window and copy the following configurations from the above link and add them to OIDC Configurations on Appsmith:\n\n| Azure Active Directory Configuration | OIDC configuration field in Appsmith |\n| ---------------------------------------- | ---------------------------------------- |\n| authorization_endpoint                  | Authorization URL                        |\n| token_endpoint                          | Token URL                                |\n| userinfo_endpoint                       | User Info URL                            |\n| jwks_uri                                | JWK Set URL                              |\n\n\n`RS256` is the default Token Signing Algorithm used by Appsmith and most identity providers. If you have a custom setup, you can choose from one of the supported algorithms under the Advanced section of the Appsmith OIDC setup page. Please note, verifying tokens signed with the `HS256` algorithm isn't supported.\n\nConfigure Scopes\nThe scope defines the OpenID Connect (OIDC) scopes that allow you to authorize the access of user details ( after a user is successfully authenticated) like name, email, profile picture, and more. Each scope maps to a set of user attributes and returns its value. You'll see the Scope field below the JSON Web Key Set:\n\nWhat does Appsmith need as part of Scopes?\nAppsmith needs openid as a mandatory scope. It's also highly recommended to use the offline_access scope to avoid errors related to expired access tokens and excessive re-login requests.\n:::info\nEnabling the `offline_access` scope enables your app to receive refresh tokens that extend the duration that your users have access to their resources. To read more, see the Active Directory documentation.\n:::\nYou can add more scopes if you wish, provided that they're available via Active Directory.\nConfigure Scopes in Active Directory\n\nTo configure scopes/permissions on Active Directory, follow the steps below:\n\nGo to API permissions on the left panel.\nClick on Add a permission button.\nUnder Request API permissions, Select Microsoft Graph and click on Delegated permissions.\nSelect the following permissions:\nUnder OpenID permissions-\nemail\nopenid\nProfile\n\n\nUnder User permissions-\nUser.Read\n\n\nOnce complete, these scopes will get added to the Active Directory application.\nClick on Grant admin consent for Default Directory on the top of the table, next to Add a permission button.\n\nConfigure Username Attributes for Active Directory\nThe username attributes define the attributes used as usernames for authentication. You can add the attribute to this field that you consider for logging.\n\nWhat does Appsmith need as a Username Attribute?\nFor Active Directory, Appsmith considers \"sub\" address as username. Please ensure that you have added \"sub\" as an attribute in the Username Attribute field.\nComplete OIDC Setup\n\nSave the changes and restart your application by clicking `SAVE & RESTART` button.\n\n\n\nYou\u2019ll see the SIGN IN WITH OIDC SSO on the Appsmith\u2019s login screen.\n",
    "tag": "appsmith"
  },
  {
    "title": "Sendgrid",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/email/sendgrid.md",
    "content": "\ndescription: Configure Sendgrid to invite users to your Appsmith installation\nsidebar_position: 2.1\n\nSendgrid\nTo configure Sendgrid as your SMTP server, create an account & login to Sendgrid.\n1. Navigate to the Integration Section\n\n2. Select the SMTP Relay integration option\n\n3. Create a new API key and copy all the fields\n\n4. Navigate to the Sendgrid Senders Section\n\n5. Create a new sender identity from which emails will be sent\n\n:::note\nYou can also configure the email service provider using Admin settings.\n:::\n6. Update the values in your instance configuration\n```bash\nExample docker configuration\n* Email **\nAPPSMITH_MAIL_ENABLED=true\nAPPSMITH_MAIL_FROM=YOUR_SENDER_IDENTITY_EMAIL_ID\nAPPSMITH_REPLY_TO=YOUR_SENDER_IDENTITY_EMAIL_ID\nAPPSMITH_MAIL_HOST=smtp.sendgrid.net\nAPPSMITH_MAIL_PORT=587\n* Set to true if providing a TLS port ****\nAPPSMITH_MAIL_SMTP_TLS_ENABLED=true\nAPPSMITH_MAIL_USERNAME=apikey\nAPPSMITH_MAIL_PASSWORD=YOUR_SENDGRID_API_KEY\nAPPSMITH_MAIL_SMTP_AUTH=true\n******\n```\n5. Restart the appsmith instance\n:::tip\nOnce you've verified your sender identity, your email service should be configured correctly",
    "tag": "appsmith"
  },
  {
    "title": "Gmail",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/email/gmail.md",
    "content": "\ndescription: Configure Gmail to invite users to your Appsmith installation\nsidebar_position: 2.3\n\nGmail\nTo configure Gmail as your SMTP server for Appsmith, begin by logging into your Gmail account. To start, you must set up an App Password within your Gmail account settings.\n:::info\nTo use App Passwords, please enable 2-factor authentication for your Gmail account. For more information on App Passwords, see this reference.\n:::\n\nNavigate to your Google Account settings dashboard, and go to the Security tab.\n\n\n\nClick on the App passwords section.\nOn the next screen, find two dropdown boxes labeled Select app and Select device.\n\n\n\nIn the Select app box, choose Mail.\nIn the Select device box, choose Other and enter a name for your Appsmith instance.\nClick Generate to create your App password.\nThe next screen contains your App password. Copy this password to your clipboard.\n\n\n\nPaste your new Gmail App Password into your SMTP datasource's `Password` field.\n\n:::info\nYou can also configure the email service provider using Admin settings.\n:::",
    "tag": "appsmith"
  },
  {
    "title": "Email",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/email",
    "content": "\ndescription: >-\n  Configure an email provider of your choice to send and receive email\n  notifications in Appsmith\nsidebar_position: 2\n\nEmail\nEmail is a widely used service to communicate with your users. You can set up email integration on your Appsmith instance to:\n\nInvite users to your Appsmith workspace\nNotify admins of important events & approval requests\nHandle user management emails such as invites and password resets\n\n:::note\nPassword resets for user accounts are handled by emails from the Appsmith instance. If you would like users to be able to perform this action, ensure that your instance has been configured to handle email notifications. \n:::\nAppsmith allows you to configure email using environment variables or the admin settings.\n \nConfigure using environment variables\nAppsmith requires the following environment variables to be configured:\n| Variable                               | Description                                                                                                                                                                                             |\n| -------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| APPSMITH_MAIL_ENABLED            | Set it to true to enable the email service.                                                                                                                                                             |\n| APPSMITH_MAIL_FROM               | Set it to the verified email of the sender.                                                                                                                                                             |\n| APPSMITH_REPLY_TO                | Set it to the email that should receive replies by default.                                                                                                                                             |\n| APPSMITH_MAIL_HOST               | Set it to the SMTP Host of the email service provider.                                                                                                                                              |\n| APPSMITH_MAIL_PORT               | Set it to the SMTP Port available for the email service provider.                                                                                                                                   |\n| APPSMITH_MAIL_SMTP_TLS_ENABLED | Enables transport layer security if set to true.                                                                                                                                                    |\n| APPSMITH_MAIL_SMTP_AUTH         | Set it to true to share the credentials (`APPSMITH_MAIL_USERNAME` * and  `APPSMITH_MAIL_PASSWORD`) with the SMTP server. |\n| APPSMITH_MAIL_USERNAME           | Set it to the username for accessing the SMTP service provider.                                                                                                                                         |\n| APPSMITH_MAIL_PASSWORD*           | Set it to the password for the SMTP user. You can also set it to the API key generated by the email service provider for the SMTP user.                                                                 |\n:::note\nBe sure to double-check your configuration if you find that you're able to send test mail but not invites or password resets.\n:::\nRestart the Appsmith instance once the environment variables are configured.\nConfigure using admin settings\nYou can configure the email for your self-hosted instance using the Admin Settings page. Follow the below steps:\n\nNavigate to profile >> Admin Settings >> Select Email.\n\n\n\n\nAdd configuration details provided by your email service provider.\n\nSMTP Host - SMTP host of your email service provider\nSMTP Port - SMTP port of your email service provider\nFrom Address - a verified email address to be shown in the `from field` when users receive an email\nTLS Protected Connection - Bey default is enabled. Toggle back to disable\nSMTP Username - Add the username for your email service provider\nSMTP Password - Add the password for your email service provider\n\n\n\nClick the `SAVE & RESTART` button to save the configurations and restart the Appsmith instance with the updated settings.\n\n\n:::tip\nOnce your instance is restarted, you can use the `SEND TEST EMAIL` button to send a test email. You should see a message at the top of the page telling you whether the test succeeded or failed. On success, you should also receive a test email in your email inbox.\n:::\nConfiguration guides\nFollow the below guides to configure popular email service providers:\n\nSendgrid\nAmazon-SES\nGmail\n",
    "tag": "appsmith"
  },
  {
    "title": "Amazon SES",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/getting-started/setup/instance-configuration/email/amazon-ses.md",
    "content": "\ndescription: Configure Amazon SES to invite users to your Appsmith installation\nsidebar_position: 2.2\n\nAmazon SES\nTo configure Amazon SES as your SMTP server, create an account & login to the AWS console.\n1. Navigate to the SES section & SMTP setting page\n\n2. Copy the SMTP configuration & Create new SMTP Credentials\n\n3. Create an IAM user\n\n4. Copy the generated username & password\n\n5. Verify the email address via which Appsmith should send and receive emails\n:::note\nFollow the guide to configure SPF for SMTP/emails to prevent emails from being flagged as Spam.\n:::\n\n:::note\nYou can also configure the email service provider using Admin settings.\n:::\n6. Update the values in your Instance Configuration\n:::danger\nDo not use port 465 listed on the SES page because it is TLS enabled by default\n:::\n```bash\nExample docker configuration\n* Email **\nAPPSMITH_MAIL_ENABLED=true\nAPPSMITH_MAIL_FROM=YOUR_VERIFIED_EMAIL_ID\nAPPSMITH_REPLY_TO=YOUR_VERIFIED_EMAIL_ID\nAPPSMITH_MAIL_HOST=email-smtp.us-east-2.amazonaws.com\nAPPSMITH_MAIL_PORT=587\n* Set to true if providing a TLS port ****\nAPPSMITH_MAIL_SMTP_TLS_ENABLED=true\nAPPSMITH_MAIL_USERNAME=YOUR_SES_USER_NAME\nAPPSMITH_MAIL_PASSWORD=YOUR_SES_PASSWORD\nAPPSMITH_MAIL_SMTP_AUTH=true\n******\n```\n:::info\nYour email service should now be configured correctly. Read more about setting up email with SES.\n:::\n7. Restart the Appsmith Instance\n:::note\nIf you have created a new amazon SES account, your account will be sandboxed and will be unable to send emails to unverified email Ids. Read more on how to request production access.",
    "tag": "appsmith"
  },
  {
    "title": "Application Layout",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/building-ui/designing-an-application/application-layout.md",
    "content": "\ndescription: Appsmith supports a variety of screens sizes to build UI.\nApplication Layout\nThe Application layout can be selected to match the Application size to the device it is intended for. Desktop layout is set by default for an application.\nHow it works\nFor application layout that has a Min-Max width limit, The application fills the browser's width until the browser width is not Greater than the maximum width of the layout chosen. When it exceeds the maximum width of the layout, the additional width is filled by whitespaces. The application will not squeeze below the minimum width of the layout chosen and would show scrolls if the browser width is less than the minimum width of the layout chosen.\nIn case of `Fluid`, The application fills the browser's width.\nAt any point in time to change the application layout, click on the Layout control present on the top of the canvas and select a layout to use.\n\n:::info\n Changing layout for an application will change the layout of all pages of the application.\n:::\nSupported Layouts\n\nDesktop (Application width would resize in between 1280px - 1160px)\nTablet L (Application width would resize in between 1080px - 960px)\nTablet (Application width would resize in between 800px - 650px)\nMobile Device (Application width would resize in between 450px - 350px)\n",
    "tag": "appsmith"
  },
  {
    "title": "Designing an Application",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/building-ui/designing-an-application",
    "content": "Designing an Application\nAppsmith provides an intuitive drag-and-drop interface that enables you to build an app using widgets by placing them on the canvas as per your requirement. It also comes with pre-built templates that you can customize to suit your needs.\n\nAdd widgets on canvas\nWhen creating an app, you might need several UI elements for purposes like storing data, triggering an action, etc. Widgets are pre-built UI components that can be added to your application anywhere on the canvas.\nTo add a widget to the canvas, select the `widget` from the Widgets tab on the entity explorer to the left of your screen, drag it onto the canvas and drop it.\nArrange widgets\nWhile working on an app, adding, and placing multiple widgets is easy and intuitive with the drag-and-drop gestures in Appsmith. When you add a new widget, the widgets already present on the canvas move aside and provide space for the incoming widget. You can drag the widget to the desired location, and other widgets in the same area on the canvas automatically moves or resize to accommodate the incoming widget.\n\nWhen the widget hits the boundary of its container, it starts resizing itself to provide more room for the incoming widget. The aspect ratio is still maintained even when the size changes.\nResize widgets\nYou can adjust the size of a widget by selecting it and dragging the resize handle.\nAppsmith provides an auto height feature for some widgets, which allows the widget to adjust its height automatically in response to changes in its content. This capability enables widgets to grow in height without any limit, providing a more dynamic user interface. \n\nWhen a widget changes height, the layout adjusts to maintain the distance between the widget undergoing a height change and the sibling widgets below this widget occupying one or more of the same columns.\nDuplicate widgets\nTo save significant amount of time and effort when building complex layouts or forms, you can create multiple copies of the same widget. To duplicate a widget, select it and copy and paste the widget where you want it to appear. In addition to duplicating individual widgets, you can also copy multiple widgets at once by selecting them with your cursor. \nOne of the advantages of duplicating widgets is that the copied widgets have the exact same configuration as the original, including any properties or settings that were applied to it. This means that you don't need to manually recreate the widget and apply the same settings again.\nGroup widgets\nYou can group widgets to manage their layout, maintain their position on the screen, or apply visibility rules and actions to a group of widgets at once. Grouping widgets is also useful to restrict their movement and prevent them from expanding into unnecessary areas.\nTo group widgets, you can select them using your cursor, and then click the \"Group\" icon or use the keyboard shortcut to group the widgets together.\n\nMove widgets across containers\nA widget can move across containers. A container can be the canvas or a layout widget. Layout widgets are the ones that can contain other widgets, like - Container widget, List widget, Tabs Widget, etc. You can move a widget into a new container by dragging your cursor.\n\nWidget styling\nStyles allow you to customize the look and feel of your widgets. With the style properties in the property pane, you can change the color, position, font, etc. to modify the appearance of your widgets. Each widget can have unique styling options or attributes that are specific to its type and purpose.\n\nFurther reading\n\nApp Theming\n",
    "tag": "appsmith"
  },
  {
    "title": "App Theming",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/building-ui/designing-an-application/app-theming.md",
    "content": "App Theming\nApp theming allows you to style your pages and widgets using global controls, making it easy to change the visual layout with a single click.\n\nThemes are application-level styles that apply to all the widgets linked to the theme properties.\n:::info\nAll apps support theming, but for older apps, changing the theme or customizing the theme may not update the app entirely. This is to prevent overriding any changes you have already done by styling your widgets. If you still want to use themes in your existing application, please reset your widget's styles.\n:::\nApplying a Theme\nWithin apps, themes can be changed and customized using the \"Theme properties\" in the property pane when opening your app or when no widgets are selected.\nEach app has an applied theme that can be modified. There are two ways you can modify an applied theme:\n\nChanging the theme - You can change the theme from the saved list of themes or default themes.\nCustomizing the theme - The theme can be customized further based on the customization options available in theme properties.\n\nChanging the theme\nYou can browse the default themes or your saved themes by clicking the Change Theme button. Once you select the preferred theme, it is applied automatically. After the theme is applied, you can go back and customize it further.\nYou can choose to undo the applied theme if you don't like it.\nCustomizing the theme\nOnce applied, you can customize the theme further by updating the following items:\n\nApp font: It changes the font family used in the app.\nColors:\nPrimary Color - It applies to all the components/widgets in your app.\nBackground Color - It changes the app's background color (canvas).\nApp border radius: It changes the default border-radius across all widgets. Currently, we support three different border radii by default.\nApp box-shadow: It changes the default box shadow for layout widgets like containers, forms ,and lists.\n\nSaving the theme\nAll changes made to the applied theme are auto-saved. However, you can save themes for re-using them later. Think of this as checkpointing a theme; it will help keep a safe version of the theme if you want to keep customizing your current theme.\nYou can view these themes from the theme list and choose to apply them when you wish to. You can also choose to delete a saved theme, which will have no impact on your application.\n:::tip\nWhen you apply a theme from the themes section and customize it, we create a copy and apply it to the app. It ensures that default themes are never overridden.\n:::\n\u200bReset the theme of all widgets\nAll apps support theming, but apps created before the new theme options might still be using the older styles, because we do not want to break any of the style settings you have made.\nTo update your older apps to use theming, you will need to use the Reset widget styles button from the menu in the Theme Properties pane.\n\n\nClick an empty spot on the canvas so that no widgets are selected.\nFind the Theme Properties settings on the right of the page, and click the three dots (\u22ef) button.\nClick the Reset widget styles button.\n\nAll of the widgets which previously did not support theming will now be ready for new styles.\n:::note\nWidgets which are deprecated will not support theming.\n:::\nImpact of themes on a widget\nWithin each widget's style properties, there are some properties that the theme can control. When you drag a new widget to the canvas, it will automatically sync with the theme values.",
    "tag": "appsmith"
  },
  {
    "title": "Controlling Widget Visibility",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/building-ui/dynamic-ui/widget-visibility.md",
    "content": "\ndescription: The visibility of widgets can be controlled using javascript.\nControlling Widget Visibility\nThe visibility property is usually a switch in the property pane of every widget. This property can be made dynamic by clicking the JS button next to the property which converts it to a text field. Inside the text, the value of the visibility can be conditionally set using javascript.\nControl Visibility with other widgets\nIn the example below the visibility of the table is a conditional value based on the selected value of the RadioGroup\n`javascript\n{{RadioGroup1.selectedOptionValue === \"Visible\"}}`\n:::note\nThe Visible property expects the expression to evaluate to a boolean value\n:::\n\nControl Visibility with Query responses\nSimilar to the above example, we can tie the visibility of a widget to the response of a Query.\n`javascript\n{{ API1.data.value === \"trueValue\" }}`\nDynamic Forms\nThere are some cases that require form fields to dynamically change based on the user input. This can be achieved using a Tab widget inside the form and conditionally updating the selected tab value based on the inputs of the form\n\n:::tip\nHide the tabs in the tab widget to make it look like the views are changing in place.",
    "tag": "appsmith"
  },
  {
    "title": "Building dynamic UI",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/building-ui/dynamic-ui",
    "content": "\ndescription: >-\n  Widgets are the UI building blocks of Appsmith. Widgets empower you to\n  visualise, capture and organise data with simple configuration and zero\n  HTML/CSS.\n\nBuilding dynamic UI\nThis document presumes you understand the basics of Displaying Data & Capturing Data and expands on the concept of building dynamic UI that reacts to user inputs and system data\n\nDynamic Properties\nEvery property of a widget can be described dynamically using JavaScript inside handlebars `{{}}` . The properties which don't have an input to write JavaScript can be made dynamic by clicking the JS button next to them. This transforms the property into an input field that can be used to write code.\n\nUpdating widget data\nLet us take an example of a table displaying a list of products. When a user selects a product in the table, we may want to update the product information in a form so that the user can update the product.\n\nIn order to achieve this, we can populate the default values of each of the Form's widgets with the corresponding value selected in the table. We can reference the Tables selectedRows property using its name inside the `{{ }}`\nGet Product Name Input (Default Text property)\n`javascript\n{{ Table1.selectedRow.productName }}`\nGet MRP Input (Default Text property)\n`javascript\n{{ Table1.selectedRow.mrp }}`\nGet Category Dropdown (Default Option property)\n`javascript\n{{ Table1.selectedRow.category }}`\nHere Table1 is the name of the widget\n\nSetting widget height",
    "tag": "appsmith"
  },
  {
    "title": "Capture Form Data",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/data-access-and-binding/capturing-data-write/capture-form-data.md",
    "content": "\ndescription: Guide for submitting body data with API requests on Appsmith\ntoc_min_heading_level: 2\ntoc_max_heading_level: 4\n\nCapture Form Data\nThe Form widget is a special type of container used to build validated forms. Multiple widgets can be dragged inside the form widget to capture data. The form widget comes with a form button pre-configured.\nThe form button is disabled if\n\nAny of the required fields inside the form aren't filled\nThe form contains an input whose value doesn't match the regex configured\n\n\nSubmitting form data\nForm data can be submitted using a PUT / POST API or an Insert / Update Query. To submit form data,\n\nBind the onClick of the form button to call the API / Query\nConfigure onSuccess to Display a success message\nConfigure the API / Query to read the inputs from the form widgets using Javascript.\n\n\n:::note\nWidgets inside a form are automatically reset to their default values when the Form Button onClick succeeds. This can be disabled in the button properties\n:::\nDisplaying submitted data\nOnce the API / Query updates the data, the widgets on the screen need to be updated with new data as well. The best way to achieve this is to simply re-fetch the data from the API / Query rather than trying to append the data to the existing data set. This can be done in the onSuccess of the API / Query.\n\n:::info\nThe Property Pane UI supports a single onSuccess Callback but multiple callbacks and conditions can be configured by clicking the JS button next to the property. Learn more about Creating Workflows",
    "tag": "appsmith"
  },
  {
    "title": "Capturing Data (Write)",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/data-access-and-binding/capturing-data-write",
    "content": "Capturing Data (Write)\nThis document presumes you have successfully connected to a data source and have a query that can insert/update/delete data. You should also have gone through the basics of using widgets.\nThe following widgets can be used to capture user inputs in an application\n\nCheckbox\nDatepicker\nFilepicker\nForm\nInput\nMaps\nRadio Group\nRich Text Editor\nSelect\nSwitch\n\nWidgets store their user input in an internal property that can be referenced using javascript.\nExample SQL\n`sql\nINSERT INTO users (\"name\", \"createdAt\", \"gender\")\n  VALUES ({{nameInput.text}}, {{moment().format(\"YYYY-MM-DD\")}}, \n  {{genderDropdown.selectedOptionValue}});`\nExample Post Body\n`sql\n{\n  \"name\": {{nameInput.text}},\n  \"createdDate\": {{moment().format('YYYY-MM-DD')}},\n  \"gender\": {{genderDropdown.selectedOptionValue}}\n}`\nIn the examples above, `text` is the internal property of the `nameInput` widget while `selectedOptionValue` is the internal property of the `genderDropdown` widget. The `createdDate` key is populated with the value of the current date using the `moment.js` library\nTriggering Updates\nSince write operations are more expensive, the Query should be triggered once all the user data is captured. To do this, we can make use of a Button widget and configure the Query to run in the onClick of the button.\nThe property pane has an action section where all the interactions that a user can perform with a widget are listed. We can configure the action to be taken when the interaction takes place in this section.\nTo configure the Query we want to call when a button is clicked, we can select the action in the onClick dropdown.",
    "tag": "appsmith"
  },
  {
    "title": "Queries",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/data-access-and-binding/querying-a-database",
    "content": "Queries\nThe information you want to present in any application is typically spread over numerous tables in a datasource. A query can collect data from different tables/ documents and pull it together for display. Using a query, you can insert, update, or remove data from a datasource, bind the data to a widget, and more.\n:::info\nAppsmith uses Queries to collectively refer to APIs or Database queries that perform CRUD operations.\n:::\nTo write and execute queries, you should understand the basics of connecting to a Database or Connecting to an API.  You can create queries from a datasource using the Appsmith query editor.\nCreate a query\nThis section talks about creating a DB query in Appsmith. To learn about API queries, see How to Create an API query.\nFollow the below steps to create a database query in the query editor:\n\n\nGo to Datasources \u2192 + to create a new query or select an existing datasource to which you wish to add a query. If you want to add a new datasource, follow the steps detailed in Datasources.\n\n\nChoose the connected datasource and click + New Query. You can also choose to add a new query by navigating to Explorer >> Scroll down to Queries/JS >> Click plus (+) sign >> Select the name `<DATASOURCE_NAME> Query` (users query).\n\n\nThe Appsmith query editor opens up when you create a new query or select an existing query. You can write the queries in the query editor and tweak the query settings from the settings tab.\n\n\n\n\nThe query is created with a default name. We recommend you rename it for readability and access. The query name helps access the query results. A query must have a unique and meaningful name that acts as an identifier. You can access the various properties of the query and its data using the query name.\n\n:::info\nJavaScript keywords and the window object methods and properties aren't valid as query names.\n:::\n\nWrite your query in the syntax valid for your database type.\n\nQueries are automatically saved, so you never lose your work. These changes are reflected in your published application only after you deploy. You can access a query's result only from the page it's a part of. To use a query on another page, click the context menu next to the query name and clone it.\nRun a query\nClick on the `Run` button or hit `cmd + enter` to execute a query. You'll see the results in the Response tab if the query succeeds.\n \nAlternatively, you can use the run function to execute a query anywhere in Appsmith.\nAll query results are stored in the data property of the query object. It's immutable and can't be changed. You can access it using JavaScript, as shown in the code snippet below:\n`javascript\n{{ Query1.data }}`\nDB Queries fetch data in an array of objects where each object is a row, and each key in the object is a column.\nDebug errors\nWhen a query fails, Appsmith commonly shows a notification stating: `<query_name> action returned an error response`.\nTo see the error message returned by the datasource in response to your query, look for the failed query in the debugger, or access it in code with `<query_name>.data`.\nUse queries in applications\nOnce you have successfully run a Query, you can use it in your application to:\n\nDisplay Data from a query - Bind the query results to a widget to display the data.\nCapture Data - Capture the user input entered in a widget that can be referenced using JavaScript.\nRun multiple queries by separating the run statements with a `;`. Check out the sample app that shows how to run multiple queries on a button click.\nPass parameters to a query in the run() function and access these parameters in the query. Check out the sample app that shows how to pass parameters to the Query.run() function.\n\nTroubleshooting",
    "tag": "appsmith"
  },
  {
    "title": "Query Settings",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/data-access-and-binding/querying-a-database/query-settings.md",
    "content": "Query Settings\nIn the Appsmith Query Editor, you can specify the following settings in the Settings tab for an API or a DB query:\n|Setting   | Availability  | Description  |\n|----------|---------------|--------------|\n| Run on page load  | API and DB query  | It allows you to configure whether the query should load every time the page loads. By default, it's turned on for queries that display data on a widget. You can explicitly change this setting to suit your logic.   |\n| Request confirmation  | API and DB query  | It enables you to set up a confirmation pop-up before a query is run. It protects against users accidentally running destructive operations.  |\n| Query timeout  | API and DB query  | The time till which Appsmith server waits for the query to execute before closing the connection. By default, it's set to 10000 ms. If your query takes longer than this to return results, Appsmith throws a timeout error.  |\n| Prepared statements | DB query | Execute a statement with dynamic data bindings repeatedly and efficiently |\n| Encode query params  | API  | Encode query params convert the special characters in params to their UTF equivalents. You can also encode the form body when the Content-Type header is set to `FORM_URLENCODED`. |\n| Smart JSON substitution  | API   | Dynamically perform type conversions on field values in a request body  |\nPrepared statements\nA Prepared Statement is a feature provided by SQL databases to execute the same statement with dynamic data bindings securely. Appsmith supports using prepared statements by converting the user query into a parameterized query by replacing the bindings. That means the query created on the Appsmith has bindings for reading the widget values selected by users. By default, the prepared statement is enabled for all queries. To know more about Prepared statements in Appsmith, please check How to Use Prepared Statements?\nSmart JSON substitution\nThe smart JSON substitution allows Appsmith to dynamically perform type conversions on field values in a request body. The video below illustrates how to use this feature:\n\n:::info\nDo you need help? Check out the API response troubleshooting guide or reach out on Discord to get support or ask questions on the community forum.",
    "tag": "appsmith"
  },
  {
    "title": "Displaying Data (Read)",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/data-access-and-binding/displaying-data-read",
    "content": "Displaying Data (Read)\nThis document presumes you have successfully connected to a data source and have a Query that fetches data.\nDisplaying Data in a widget\nWidget properties can be edited via the property pane which is opened using the top-right icon (Edit Widget Properties). Data from a Query can be set in a widget property by referencing the name (unique identifier) of the Query.\n:::tip\nAppsmith is Reactive so the widgets are automatically updated whenever the data in the Query changes\n:::\nFor example, you can bind the results of the Query as below\n`javascript\n{{ fetch_users.data.users }}`\n\nFor more information about using Table widgets to show data from queries, see display data in tables.\n:::note\nEach widget property has a specific data type that it validates its value against. If the data type mismatches, it will throw an error. This can be fixed using javascript to transform the value of the property\n:::\nTransforming Data\nYou can use Javascript inside to transform Query data when binding it to a property. Let us take an example of a Query that returns an array of objects that need to be populated in a dropdown. Directly binding the data will lead to an error as shown below\nA select needs an Array\\ in its option field, so to connect this data to a dropdown, we need to transform the data in the dropdown options property.\nExample Query Data\n`javascript\n[\n  {\n    \"id\": 1,\n    \"name\": \"test\",\n    \"status\": \"APPROVED\",\n    \"gender\": \"\",\n    \"avatar\": \"https://robohash.org/sednecessitatibuset.png?size=100x100&set=set1\",\n    \"email\": \"barty.crouch@gmail.com\",\n    \"address\": \"St Petersberg #911 4th main\",\n    \"createdAt\": \"2020-03-16T18:00:05.000Z\",\n    \"updatedAt\": \"2020-08-12T17:29:31.980Z\"\n  },\n  {\n    \"id\": 2,\n    \"name\": \"Jenelle Kibbys\",\n    \"status\": \"APPROVED\",\n    \"gender\": \"Female\",\n    \"avatar\": \"https://robohash.org/quiaasperiorespariatur.bmp?size=100x100&set=set1\",\n    \"email\": \"jkibby1@hp.com\",\n    \"address\": \"85 Tennessee Plaza\",\n    \"createdAt\": \"2019-10-04T03:22:23.000Z\",\n    \"updatedAt\": \"2019-09-11T20:18:38.000Z\"\n  },\n  {\n    \"id\": 3,\n    \"name\": \"Demetre\",\n    \"status\": \"APPROVED\",\n    \"gender\": \"Male\",\n    \"avatar\": \"https://robohash.org/iustooptiocum.jpg?size=100x100&set=set1\",\n    \"email\": \"aaaa@bbb.com\",\n    \"address\": \"262 Saint Paul Park\",\n    \"createdAt\": \"2020-05-01T17:30:50.000Z\",\n    \"updatedAt\": \"2019-10-08T14:55:53.000Z\"\n  }\n]`\nTransformation Code\nThe following example iterates over a data set and returns data in an `Array<label, value>` format\n```javascript\n{{\n  QueryName.data.map((row) => {\n      return { label: row.name, value: row.id };\n  });\n}}",
    "tag": "appsmith"
  },
  {
    "title": "Creating Workflows",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/writing-code/workflows.md",
    "content": "\ndescription: >-\n  Learn how to build effective workflows with Appsmith using multiple queries and execute them in the serial, parallel or conditional manner and programming widgets for smooth user interaction.\ntoc_min_heading_level: 2\ntoc_max_heading_level: 5\n\nCreating Workflows\nWhen you build an app on Appsmith, you write code to add, update, delete, and retrieve data, and define actions on event triggers. You can use JavaScript functions, and database or API queries to build different workflows.\nDisplay data from async JS function\nWidgets have fields/properties where you can bind data or trigger actions.\nSync fields are properties that expect input or data. For example, for an Input widget, properties such as `Default Value`, `Max Characters`, `Regex`, and `Error Message` expect input and are sync fields.\nAsync fields are properties that can trigger an action or perform an operation. For example, the properties like `OnTextChanged` and `OnSubmit` of an input widget are async fields. You can use these properties to execute an action, Query or a function within a JS object.\nTo display the response from an asynchronous JS function in a synchronous field, you need to retrieve it using the  `.data` property as shown below\n`javascript\n{{JSObjectName.functionName.data}}`\n \nDisplay data from sync JS function\nTo display the response from a synchronous JS function in a widget field, call the function inside the JS Object as shown below:\n`javascript\n{{JSObjectName.functionName()}}`\nTrigger actions with event listeners\nActions in Appsmith are built-in functions that provide a way to perform specific operations in response to user interactions or other events in your application. \nYou can trigger actions by binding them to Events(Async fields). For example, if you want to run a query on button click, you can bind the query's run() method on the button's `onClick` event.\n\n\nTrigger actions usings event listeners\n\nHandle query success or error\nThe property pane provides a way to configure an action to be performed when a query returns with a success or an error post execution. The HTTP status code or the query response status can help determine the success or error message returned by the query.\nFor example, you can display a success message when the query has executed successfully or an error message when there are issues with the execution using the `showAlert()` action.\n\n\nHandle query success and error\n\nComplex workflows\nThe Appsmith GUI is limited to a single `onSuccess` or `onError` callback, while the underlying framework has no limitation. To write complex workflows, you can enable JavaScript by clicking the `JS` toggle next to the event listener. You can perform operations such as chaining multiple queries and executing them in a specific order or conditionally executing a query based on the result of another query. \nEvery query object has a run() method used to execute the query.\n:::tip\nOnce you have configured actions using the GUI, you can click the `JS` icon next to the event to view the JavaScript equivalent of your configuration and then modify the code per your requirement.\n:::\nConditional execution\nYou can chain queries to execute conditionally based on the value of a widget or the response from another query or a JS function. \nExample\nThis example shows how the queries execute conditionally based on the option chosen in the Select widget.\n```javascript\n{{\n  Query_Selector.selectedOptionValue === 'Movies' ? fetch_movies.run() : fetch_users.run();\n}}\n```\nThis example shows multiple conditional statements that execute queries based on the option chosen in the select widget and also display relevant messages based on the response from the `fetchPendingUsers` query.\n`javascript\n{{ \n  statusDropdown.selectedOptionValue === \"Pending\" ?\n      fetchPendingUsers.run(() => {\n          fetchPendingUsers.data.length === 0 \n         ? showAlert(\"No Users Pending Approval\", \"info\") \n          : showAlert(\"Fetched Users\", \"success\");\n      }) \n      : fetchApprovedUsers.run();\n}}`\nParallel execution\nThe run() method is asynchronous, and you can execute multiple queries in parallel. To execute multiple queries, you have to separate the run() method in the buttons onClick handler with a semicolon(;). \nExample\n`javascript\n{{ Query1.run(); Query2.run(); Query3.run(); }}`\nSerial execution\nSerial execution means that the queries are executed one after the other in a specific order. This can be useful when the results of one query depend on the results of another.\nExample\nThis example shows how to execute `query1`, then `query2` and finally `query3`.\n`javascript\n{{\n  query1.run()\n    .then(() => query2.run())\n    .then(() => query3.run());\n}}`\nThis example shows how to chain queries and actions to execute one after the other, and other actions, such as showing messages and closing modals, are executed using callbacks.\n`javascript\n{{ \n    updateUsers.run()\n      .then(() => fetchUsers.run()\n                  .then(() => { \n                      showAlert('User Updated'); \n                      closeModal('Modal1'); \n                    })\n        .catch(() => showAlert(\"Fetch Users Failed\"))\n      ).catch(() => showAlert(\"Update User Failed\", \"error\")) \n}}`\nFurther reading\n\nAppsmith Framework\nImport External Libraries \n",
    "tag": "appsmith"
  },
  {
    "title": "External Libraries",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/writing-code/ext-libraries.md",
    "content": "External Libraries\nThe Appsmith platform includes built-in JavaScript utility libraries, which can be used to work with data within `{{ }}` bindings or within JSObjects. You can also install and use other custom libraries to manipulate or transform data. These external libraries provide additional methods to help you build complex applications and business logic.\nBuilt-in JavaScript libraries\nBuilt-in JavaScript libraries provide a comprehensive array of capabilities for common tasks such as data manipulation, numeric operations, date and time handling, and more. These libraries can be accessed and used without the need for any additional installations or setup.\n \nAppsmith provides the following built-in JavaScript libraries that can be utilized in your applications.\n\n\nLodash provides functions for common programming tasks such as formatting data, iterating over collections, and manipulating arrays and objects.\n\n\nMoment simplifies working with dates and times in JavaScript by providing functions for parsing, validating, manipulating, and displaying dates and times.\n\n\nxmlParser can be used for parsing and manipulating XML data in JavaScript.\n\n\nForge can be used to work with cryptographic algorithms and protocols in JavaScript.\n\n\nCustom JavaScript libraries\nCustom Javascript libraries provide far more advanced capabilities for complex use cases like PDF generation, CSV Parsing, analytics, authentication, error logging, etc. You can browse and install a JS library of your choice by pasting a valid URL to the library\u2019s index file. \nUse a URL that points to the library's index file. Ensure that your library supports a UMD build for it to work on Appsmith. Here\u2019s the basic pattern of a UMD build. Most libraries have a `.min.js` under the `root`, `/umd` or `/browser` folders. If a library you wish to use doesn't support a UMD build, you may use browserify to generate one and host it in a CDN of your choice.\nLibrary compatibility\nAppsmith is only compatible with libraries that support\u00a0UMD\u00a0builds. If a library supports the UMD build format, the source code of a library\u2019s index file should conform to this\u00a0basic pattern. The index file for most compatible libraries can be found under the\u00a0`root`,\u00a0`/umd`\u00a0or\u00a0`/browser`\u00a0folders and have a `.min.js` file extension. If a library you wish to use doesn't support a UMD build, you may use\u00a0browserify\u00a0to generate one and host it in a CDN of your choice.\n\u2705 Valid URL:\u00a0`https://cdn.jsdelivr.net/npm/exceljs@4.3.0/dist/exceljs.min.js`\n\u274c Valid URL. Unsupported build format:\u00a0`https://cdn.jsdelivr.net/npm/uuid@9.0.0/dist/index.js`\n\u274c Invalid URL. Doesn't point to the index file:\u00a0`https://www.jsdelivr.com/package/npm/datejs`\nInstall external library\nAppsmith makes it easy to install an external JavaScript library with just a few simple steps\n \nThere is a selection of\u00a0recommended libraries\u00a0that you can install by simply clicking on the install icon. However, if you want to install a specific library with a URL, the process is just as simple. To install other libraries:\n\nFind a compatible library on popular CDN services like\u00a0jsDelivr\u00a0or\u00a0UNPKG. \nCopy the URL to its index file and paste it on Appsmith to start the installation. \nNavigate to the Explorer tab\nClick the `+` sign next to `Libraries`.\nPaste the URL into the designated field. For example: \n`js \nhttps://cdn.jsdelivr.net/npm/exceljs@4.3.0/dist/exceljs.min.js`\nClick `Install`.\n\nUsing external libraries\nExternal libraries can be used within `{{ }}` in the same way JavaScript is used elsewhere in the application. For more information about the signature of the JavaScript libraries, see their official documentation.\nExamples\nHere are some examples of how to use external JavaScript libraries:\nlodash\nFollowing is an example of the Lodash `_.map` utility, in use. `fetchFruits` is the name of the API / Query\n`javascript\n{{\n  _.map(fetchFruits.data, (fruit) => { \n    return { label: fruit.name, value: fruit.id } \n    })\n}}`\nmoment\nAn example of the moment.js `format` utility, in use in a query.\n`sql\ninsert into users (name, email, createdDate) values \n('John', 'john@appsmith.com', {{moment().format(\"YYYY-MM-DD\")}})`\nexcelJS\nYou can install excelJS library using this URL .\n```javascript\ncreateWorkbook: async() => {\nconst workbook = new ExcelJS.Workbook();\nworkbook.creator = 'Tomato';\n   workbook.lastModifiedBy = 'Tomato';\n   workbook.created = new Date();\n   workbook.modified = new Date();\n   workbook.calcProperties.fullCalcOnLoad = true;\nconst worksheet = workbook.addWorksheet('Tomato page 1', {\n      properties: {tabColor: {argb: '#FF0000'}},\n      pageSetup: {paperSize: 9, orientation: 'landscape'}\n    });\nworksheet.getCell('A1').value = 'Hello, World!';\n   worksheet.getCell('B1').value = 'What time is it?';\n   worksheet.getCell('A2').value = 7;\n   worksheet.getCell('B2').value = '12pm';\nconst buf = await workbook.xlsx.writeBuffer();\n   const blob = new Blob([buf], {type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'});\n   const url = URL.createObjectURL(blob);\nawait download(\n            url, \n            \"test.xls\",\n        );\n    }\n```\nGeneral notes\nYou may not be able to install or use methods of certain libraries due to platform limitations:\n* DOM access: Libraries that try to manipulate document objects won\u2019t work. Example: https://d3js.org/\n* XHR: Libraries that only rely on XHR won\u2019t work.\n* Other APIs: Library methods that use the following APIs under the hood won\u2019t work: setInterval, clearInterval, setImmediate, localStorage and Navigator.\nTroubleshooting\nIf you are experiencing difficulties with connecting external libraries, you can refer to the JavaScript Errors troubleshooting guide for assistance or seek help on Discord. You can also ask questions and get support on the community forum.",
    "tag": "appsmith"
  },
  {
    "title": "Writing Code",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/writing-code",
    "content": "\ndescription: >-\n  Learn how to write custom code with Appsmith. The guide covers a variety of programming languages, including JavaScript and SQL, and provides examples and best practices to help you get started.\ntoc_min_heading_level: 2\ntoc_max_heading_level: 4\n\nWriting Code\nAppsmith enables writing JavaScript code almost everywhere on the GUI inside widget properties, events listeners, queries, and other settings. With the help of the JavaScript editor and the debugging tools, you can write complex reusable code and build scalable applications.\nAppsmith also provides the ability to import external libraries, helping you expand the capabilities of your applications.\nCode in JavaScript\nYou can write JS code inside the mustache syntax `{{ }}`. You can reference entities (widgets, queries, JS objects) and their associated data and properties as JavaScript variables and perform operations on them using built-in functions.  \nAppsmith currently supports two forms of JavaScript code for dynamically evaluated properties:\nSingle-line code\nAppsmith supports writing single-line code within `{{ }}` and interprets anything written between the brackets as a JavaScript expression. The output of the JS expression is bound to the corresponding property. You can write single-line code for cases such as performing transformations on arrays or using ternary operators for conditional expressions.\nExample\n```javascript\n/Filter the data array received from a query/\n{{ QueryName.data.filter((row) => row.id > 5 ) }}\n/Ternary condition/\n{{SelectWidgetName.selectedOptionValue === \"1\" ? \"Option 1\" : \"Option 2\" }} \n```\nSometimes, you may have to chain multiple operations, such as running queries, calling functions/methods, using conditional expressions, etc., in a single line to achieve a desired outcome. \nExample:This example shows how to run multiple actions on the successful execution of the `updateData` query.\n`javascript\n{{updateData.run(() => {getData.run(), closeModal('ModalName')}, () => {})}}`\nIf your expression becomes too complex or challenging to fit in a single line, use multi-line code explained in the following section. To keep the code readable, you can also write a helper function in a JS Object.\nMulti-line code\nAs the name suggests, you can break code into multiple lines to make it readable and also use Immediately Invoked Function Expression (IIFE) to write functions or code blocks with return statements. \nExample:This example shows how to code the button's `onClick` event listener to execute a set of actions.\n`javascript \n{{\n  storeValue(\"userID\", 42);  \n  console.log(appsmith.store.userID); \n  showAlert(\"userID saved\");\n}}`\nThe example below shows how to restructure an invalid code block using IIFE.\nInvalid code\n```javascript\n/Call a query to fetch the results and filter the data/\n{{ \n   const array = QueryName.data;\n   const filterArray = array.filter((row) => row.id > 5);\n   return filterArray;\n}}\n/ Check the selected option and return the value/\n{{ \n  if (Dropdown.selectedOptionValue === \"1\") {\n      return \"Option 1\";\n  } else {\n      return \"Option 2\";\n  }\n}}\n```\nValid code\n```javascript\n/ Call a query and then manipulate its result /\n{{ \n  (function() {\n      const array = QueryName.data;\n      const filterArray = array.filter((row) => row.id > 5);\n      return filterArray;\n   })()\n}}\n/ Verify the selected option and return the value/\n{{ \n  (function() {\n      if (Dropdown.selectedOptionValue === \"1\") {\n        return \"Option 1\";\n      } else {\n        return \"Option 2\";\n      }\n   })()\n}}\n```\nJS Objects\nJS Objects stores a collection of variables and functions, and you can use it to write reusable code in Appsmith. With it, you can manipulate data, handle events, perform advanced operations, write complex logic and invoke them anywhere within the application where it's defined. You can create JS Objects in the JavaScript Editor. For more information, see JS Objects.\nUpdate widgets programmatically\nWhen working with widgets in Appsmith, you may need to update values in the widget properties dynamically.\nAppsmith follows the reactive programming paradigm. Instead of updating widget properties and states through direct variable assignment (x = 5), widgets are connected and share data with each other. When a value is updated, any widgets that depend on that changed value also update automatically.\nExamples\nSuppose you have two Input widgets named `Input1` and `Input 2`. \nThis example shows how to update `Input2` with the value entered in `Input1`. Paste the following code in the `Default Value` property of Input2.\n`javascript\n{{Input1.text}}`\nEnter a value in `Input1` and see how the value updates in `Input2`.\n\nSuppose you have two input widgets and one button widget named `Input1`, `Input2`, and `Button1`, respectively. This example shows how to update `Input2` with the value in `Input1` on the button click. Here, the storeValue() function is used.\nPaste the following code in the `onClick` event of `Button1`. \n`javascript\n{{storeValue('inputData',Input1.text)}}`\nPaste the following code in the `Default Value` property of Input2.\n`javascript\n{{appsmith.store.inputData}}`\nEnter a value in `Input1`. On button click, the value updates in `Input2`.\nFurther reading\n\nCreating Workflows\nUsing JavaScript Promises\nImporting External Libraries\n",
    "tag": "appsmith"
  },
  {
    "title": "Asynchronous JavaScript",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/writing-code/javascript-promises.md",
    "content": "Asynchronous JavaScript\nThis document explains how to write asynchronous Javascript code in Appsmith.\n\nJavaScript promises\nJavaScript Promises helps achieve asynchronous workflows that are difficult to manage when using callbacks. Appsmith provides native support for JavaScript promises to make working with asynchronous operations easier. \nAll Appsmith framework functions like showAlert(), showModal(), storeValue(), and the others returns a promise, making asynchronous workflows implementation easier and readable.\nCallbacks vs promises\nTo understand the difference between callbacks and promise implementation, consider an example of executing three API queries in sequence and showing a message when all the APIs have finished running successfully.\n```javascript\n// Using Callbacks\n{{\n    MockApi.run(() => {\n        MockApi1.run(() => {\n            MockApi2.run(() => {\n                showAlert('done') \n                })\n        }) \n    }) \n}}\n```\nUsing promise for the same example makes the implementation more manageable and readable.\n`javascript\n{{\n    MockApi.run()\n        .then(() => MockApi1.run())\n        .then(() => MockApi2.run())\n        .then(() => showAlert('done'))\n }}`\nPromise methods\nJavaScript promises have several built-in methods.\n:::tip\nWhen passing a function to `.then()` or `.catch()` always remember to pass it as a callback function, as shown below:\n```javascript\n{{\n  (function() {\n    \u274c MockApi.run().then(showAlert(`Success`))\n    //highlight-next-line\n    \u2705 return MockApi.run().then(() => showAlert(`Success`))\n})()\n}}\n```\n:::\nPromise.any()\nPromise.any() takes an iterable of promises as input and returns a single promise. When one of the promises first fulfil, it returns a single promise that resolves to the value of the fulfilled promise. If you want only one action/promise to finish for further execution, you can use `Promise.any()` method.\nExample\n```javascript\n{{\n(function(){\nreturn Promise.any([\n        MockApi.run({ name: 1 }), // if name:1 finished early\n        MockApi.run({ name: 2 })\n  ]).then((res) => {\n    showAlert(`Winner: ${res.args.name}`) // Alert Message showns as \"Winner: 1\" \n  });\n})()\n}}\n```\nIn this example:\n1. The function calls multiple API queries passes and parameters to each API call. \n2.`Promise.any()` receives the returned promise.\n3. An alert message is displayed when any of the API calls complete first and returns a fulfilled promise. The message contains the argument sent to the API, which finishes execution and returns the promise first among the API calls.\nPromise.race()\nIt waits for the first settled promise, fulfilled, or rejected, to get its result. You can use `Promise.race()` when you want only one action/promise to finish the execution. \nExample\n`javascript\n{{\n(function(){\n    return  Promise.race([\n            MockApi.run({ name: 1 }),\n            MockApi.run({ name: 2 })\n    ]).then((res) => {\n        showAlert(`Winner: ${res.args.name}`)\n    });\n})()\n}}`\nIn the example:\n\nThe function calls multiple API queries passes and parameters to each API call. \nThe returned Promise is passed to `Promise.race()`\nAn alert message is displayed when any of the API calls complete first and returns a fulfilled promise. The message contains the argument sent to the API, which completes and returns the promise first among the API calls.\n\nPromise.all()\nIt takes an array of promises (technically any iterable but is usually an array) and returns a new Promise. The array of results of the Promises becomes the result of the new Promise. If one of the promises fails (reject state), the new Promise immediately rejects and returns the same error. You can use `Promise.all()` when you want all the actions successfully finish execution.\nExample\n```javascript\n{{\n(function(){\n    let employeeNames = [\"Employee 1\",\"Employee 2\"];\n    // Start a bunch of calls running in parallel and store returned promise\n    const calls = employeeNames.map(employeeName => MockApi.run({ name: employeeName }));\n\n\n```// Wait for all to finish (or any to reject).\nreturn Promise.all(calls)\n        .then(() => showAlert('Promise.all - All successful'))\n        .catch(() => showAlert('Promise.all - Something went wrong'))\n        .finally(() => showAlert('Promise.all - finished'))\n```\n\n\n})()\n}}\n```\nIn the example:\n\nThe function runs the API with the employee names passed as parameters.\nThe `calls` array stores the returned promise for each API call.\nAn alert message appears according to the success or failure case in `Promise.all()`.\n\nPromise.allSettled()\nIt waits for all the promises to settle, regardless of the result (resolved or rejected). You can use `Promise.allSettled()` when you want all the actions to finish first.\nExample\n```javascript\n{{\n(function(){\n  let employeeNames = [\"Employee 1\",\"Employee 2\"];\n  // Start a bunch of calls running in parallel and store returned promise\n  const calls = employeeNames.map(employeeName => MockApi.run({ name: employeeName }));\n// Wait for all to resolve / reject.\n  return Promise.allSettled(calls)\n        .then(() => showAlert('Promise.allSettled - All successful'))\n        .catch(() => showAlert('Promise.allSettled - Something went wrong'))\n        .finally(() => showAlert('Promise.allSettled - finished'))\n})()\n}}\n```\nIn the example:\n\nThe function runs the API with the employee names passed as parameters.\nThe `calls` array stores the returned promise for each API call.\nAn alert message appears according to the success or failure case in `Promise.allSettled()`.\n\nUsing Promises in Appsmith\nHere are some general guidelines for using Promises in Appsmith:\n\nMost action triggers in Appsmith return promises, so you can attach a `.then()` or `await` to wait for the action before proceeding.\nAll triggers are wrapped in a promise, so any missed error results in an uncaught promise error.\nReturn promise with `.then()` attached to it, as shown below:\n\n`javascript\n{{\n  (function() {\n        // the .then only runs if a promise is returned\n        return MockApi.run()\n            .then(() => showAlert('success'))\n    })()\n}}`\n* Parameters are no longer passed in the `.then()` argument of the `action.run()`. Only the response is passed, as shown below:\n`javascript\n{{\n  (function() {\n        // define params on top so that you can use them in the later calls\n        const params = { name: \"Appsmith\" }\n        return MockApi.run(params)\n            .then((response) => {\n                showAlert(`${response.length} users found in `${params.name}`)\n            })\n    })()\n}}`\nAsync/Await\nThe `async` and `await` keywords enable the asynchronous workflow to be written in a cleaner style, avoiding the need to configure promise chains explicitly.\nAsync\nAdding the `async` keyword before a function always returns a promise. Other values are wrapped in a resolved promise automatically.\nAwait\nThe keyword `await` makes JavaScript wait until that Promise settles and returns its result. \nExample\n`javascript\n{{\n    (async function(){ \n        const response = await MockApi.run({ name: 'Appsmith' }); \n        await storeValue( \"name\", response.args.name ); \n        await showAlert(appsmith.store.name); \n    })() \n}}`\nIn the preceding example:\n1. Run `MockApi` query with the parameter `name` as 'Appsmith' and wait for the response.\n2. Store the response in the Appsmith store using `storeValue()` when you get the response.",
    "tag": "appsmith"
  },
  {
    "title": "JS Objects",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/writing-code/javascript-editor-beta",
    "content": "JS Objects\nWriting extensive code without a full-fledge editor could be challenging. The JavaScript Editor(beta) in Appsmith allows you to create a reusable set of JavaScript functions that you can call within JavaScript bindings across a Page\u2019s component to write complex code with ease. In Appsmith, it\u2019s referred to as `JS Objects`.\n\nHow to Create a JS Object?\nA JS Object is an entity comprised of multiple functions and variables. It's a reusable component you can refer to in other JS Objects, allowing you to create an organized set of hierarchies.\nYou can create new JS Objects from the Entity Explorer.\nNavigate to Entity Explorer >> Click (+) next to Queries/JS >> Select New JS Object.\n\nThe screen below shows a JS Object added to the page. The default code template that supports export default.\n\n\nGive a meaningful name to the JSObject\nCode editor where you can write JavaScript Code\nSettings are available for Async functions only.\nDefine variables\nDefine functions\nUse the editor to do several jobs, to name a few:\nWrite your code\nCall in-built or user-defined functions\nAPI calls\nDatabase query execution\nAdd multiple functions to the JS Object\nAccess JS Objects from Explorer available under JS Objects Group\n\n:::info\nThe support for the named exports isn't available for exporting functions. However, you can expose functions that are part of the JS Object using default export.\n:::\nCalling a JS Object function\nYou can call the functions defined in a JS Object by using the notation `{{ JS_OBJECT_NAME.Function_Name }}` embedded in a mustache sign as shown in the figure below:\n\n:::info\nThe JS Objects defined are available across APIs, Queries, or other JS Objects defined for a particular page, and have a page-level access and are not accessible across pages.\n:::\nTypes of JS functions\nYou can write different types of functions in a JS Object that can be Synchronous or Asynchronous.\nSynchronous\nAs the name suggests, synchronous means to be in a sequence, it means that every statement of the code gets executed one by one. So, a statement must wait for the earlier statement to complete its execution.\nFor example, the below code snippet shows a data filter:\n`Api.data.filter(() => {}); // filtering data`\nHere data filtering is the process of selecting a subset of data you want to choose for viewing or analysis. To filter the data, you must traverse the whole dataset one after the other and segregate it if it matches the filter criteria. Thus, you need synchronous execution.\nAsynchronous\nThe word asynchronous means not occurring at the same time. You may sometimes need to fetch data from the server or execute a function with a delay, something you don't anticipate occurring at the current time.\nFor example, `Promises`, `Api.run()`, `Query.Run()`, Appsmith platform functions(eg. `showModal`). It basically lets you delay the execution of code embedded in an async function and is executed when needed.\nYou can configure additional settings for the asynchronous function and enhance the user experience.\nWorking with JavaScript editor\nJavaScript Editor is an extensive editor that provides additional functionalities while writing code. You can do a lot with it, like:\n\n| What do you get?    | Description                                                                          |\n| ----------------------- | ---------------------------------------------------------------------------------------- |\n| Response Tab        | Execute each function at the time of development and view the output in the Response tab |\n| Linting Errors      | Get the linting errors caught right in the editor                                        |\n| Errors Tab          | Check for the syntax errors in the Errors tab                                            |\n| Logs Tab            | Check the function execution log in the Logs tab                                         |\n| Snippets            | Insert ready-to-use snippets                                                             |\n| Debugging | Use debugger statements to pause the execution  or `console.log()` to print debug messages.                                          |\nTo understand how JavaScript Editor works, let\u2019s create a Hello World JS Object.\n\nNavigate to Explorer >> Click (+) for Queries/JS >> Select New JS Object.\nYou\u2019ll see the default code template. Add the below code snippet:\n\n`export default {\n   hello: () => {\n      return \u201cHello World\u201d;\n   }\n}`\nResponse tab\nThe response tab displays the output generated by the functions defined in a JS Object.\nExecute function\nYou can click Run available on the top right corner to execute the JS function. If your JS object has only one function defined, the editor defaults the function name. But if your JS Object has more than one function defined, you can select the function you want to execute and then click Run.\n\n:::info\nIf your code has syntax errors, the Run button is turned off and blocks the execution. You can resolve the errors and then execute the function using Run.\n:::\nYou can verify the response generated by the `hello()` in the Response tab, as shown in the screenshot.\n:::info\nYou can execute the function by clicking the RUN button or by using a shortcut key (CMD+ENTER or CTRL + ENTER)\n:::\nLinting errors\nThe JavaScript Editor automatically checks your source code for programmatic errors. If the code isn't programmatically correct, it highlights the error using a red-colored lint below the erroneous code. For example, the syntax error where the `return` is misspelled as `retu` is also captured by linting.\n\n:::info\nYou can inspect the `error` in detail from the Errors tab.\n:::\nErrors tab \nThe errors tab displays all types of errors generated by the code execution. The errors could be comprised of Syntax Errors, Run time errors like Parsing Errors, and more.\n\nLogs tab\nThe Logs tab shows the execution of functions with a timestamp. You can also open the Logs Tab by clicking a debug icon at the right bottom of the console (as shown in the screenshot below).\n\nThe logs tab gives you the flexibility to filter logs either by writing keywords in the Filter box or selecting the type of log from the dropdown.\nSnippets\nYou\u2019ll see a Snippets button available on the right top side of the editor. Click on it to open the Appsmith Snippet Library.\n\nAppsmith snippet library\nYou can search and copy the Snippets from the Appsmith Snippet Library and use them in the JavaScript Editor. You can then build on the code snippet to add your code or use it as is.\n\n:::info\nAppsmith is actively working on expanding the Snippets Library. Please reach out on Discord or Community Forms if you wish to contribute to the library.\n:::\nDebugging\nYou can use the debugger statements or `console.log()` to debug your code and inspect it in a browser console respectively. This allows you to inspect the state of your code at that point and step through it line by line to help identify and fix any errors. \n:::note\nYou must have the browser console open to see the debugger in action.\n:::\nDebugging errors with debugger statement\nTo invoke the debugger, simply insert a `debugger` keyword in your code where you want it to pause, and then run your app. When the debugger statement is reached, the execution of your code is paused, it works like a `breakpoint`. You can then use the debugger tools to step through your code, inspect variables, and see how your code is executing.\nSyntax\n`debugger;`\nTo learn how to use debugger statements watch the video `How to use Debugger`.\n\nFor example, you are returning user information fetched from the userDetailsAPI in the JS function, and you want to see the value returned by the API during execution. To get this working, you can use a debugger statement as below:\n`export default {\n    getUserDetails: async () => {\n        const userInfo = await userDetailsAPI.run();\n        debugger; // the execution will be paused at this point \n        // and you can check the value of the userInfo variable\n        console.log(\u201cuser information: \u201c+userInfo); // the logs will be \n        // printed in the browser \n        // console.\n        return userInfo;\n    }\n}`\nDebugging errors with console.log()\nIn addition to using the debugger statement, you can also use `console.log()` to print information about your code to the browser's console. This can be helpful for inspecting the values of variables or the state of your app at different points in the execution of your code. \nSyntax\n`console.log(<VARIABLE_NAME>);`\nWhen you run your code, the value of `<VARIABLE_NAME>` is printed to the browser's console, allowing you to inspect it and see if it's what you expected. \nTo learn how to use `console.log()` watch the video `How to Debug using console.log()`.\n\nWriting complex code\nWhen you build applications, it\u2019s often more than just a CRUD operation from a single datasource. You might integrate with multiple API or want to have the dataset created by querying multiple tables, which leads to traversing data, filtering, or manipulating the response by calling different API. You can write complex logic with ease using JavaScript Editor.\nTo understand it further, let\u2019s look at a use case and build different workflows.\nUse case\nYou want to create a developer task tracker dashboard, update developer information, and add some permissions like making sure only admins can access the dashboard.\nCode workflow\nLet\u2019s create a task tracker dashboard that gives you an overview of progress on tasks. You have a query called \u201cdevelopers,\u201d which fetches the developers\u2019 information like name, email, etc. You have an API `getAllDeveloperTaskStatus` that gives you a task list with the status for each developer.\nTask Tracker\nYou want to display the developer details in a tabular format so that you can choose a table widget. You would want to show a total number of tasks like total tasks, no of completed tasks, no of to-do tasks, and no of in-progress tasks. You can achieve this by adding a JS Object and creating one function in it, \u201cgetTaskList.\u201d Let\u2019s write the code for this function using the JavaScript Editor.\n\nIn the Explorer tab, >> click (+) next to `JS Objects` >> Select `New JS Object`.\nIt\u2019ll open a JS Editor. Rename the JS Object to `Utils`\nAdd the below code snippet in the Code tab.\n\n`export default {\n    getAllDeveloperTaskStatus: () => {\n    return developers.data.map((developer) => {\n     const developerId = developer.id;\n     const taskList = developerTaskStatus.data.filter((alltask) => alltask.userId === String(developerId)); // fetch all the tasks for the given developer\n     const completedTaskList = taskList.filter((task) => task.status === \"Completed\"); // fetch tasks that are completed by the developer\n     const todoTaskList = taskList.filter((task) => task.status === \"To-Do\"); // fetch tasks that aren't yet started by the developer\n     const inProgressTaskList = taskList.filter((task) => task.completed === \"In-Progress\"); // fetch tasks that are in progress by the developer\n     return {\n       \"Id\": developer.id,\n       \"Name\": developer.name,\n       \"Email\": developer.email,\n       \"Total Tasks\": taskList.length,\n       \"To-Do Tasks\": todoTaskList.length,\n       \"In Progress Tasks\": inProgressTaskList.length,\n       \"Completed Tasks\": completedTaskList.length\n     };\n    })\n }\n}`\nThe `getAllDeveloperTaskStatus` function does the following:\n\nReads all the developers\u2019 data\nIterates for each developer record\nScans the `tasklist` to fetch the developer-related tasks\nBased on task status (TO-DO, In-Progress, and Completed)\n\n\nGenerate a response that gives a cumulative task breakup for each task status for each developer\n\nTo display the response generated by`getAllDeveloperTaskStatus` we'll bind it to a widget.\n\nNavigate to `Page` >> Select Table widget in Widgets Tab >> Drag it onto the canvas.\nSelect the `Table` Widget on the canvas\nIn the `Property Pane` on right side add the code `{{Utils.getAllDeveloperTaskStatus()}}` in `Table Data` property.\n\n \nThe table widget shows the data as shown in the below screenshot.\n\nUpdate Developer Information\nLet\u2019s add another function where you\u2019ll be able to select a developer record and update the information.\nTo achieve this, add a new column to the table widget and select the `Column Type` as an `icon button` type that opens a modal window.\n \nNow that the `Edit` column is added to the table let\u2019s add a modal to fetch the `developer` information like `Name` and `Email`.\n \nNavigate to Explorer >> Select `Utils` >> Add the code snippet for `updateUserData()` after `getAllDeveloperTaskStatus()`.\n`export default {\n    getAllDeveloperTaskStatus: () => {\n        ...// code block for getAllDeveloperTaskStatus\n    }, \n    updateUserData: () => {\n        // Construct new user's data\n        const newUserData = {\n            ...Table1.selectedRow,\n            name: devName.text,\n            email: devEmail.text,\n        }\n        // Run updateDeveloperDetails query     \n        updateDeveloperDetails.run(\n            // on successful execution of updateDeveloperDetails run developers to fetch updated data \n            async () => {\n                    await developers.run();\n                    closeModal(\"editModal\");\n                    showAlert(\"Developer Details are updated successfully!\");\n                },\n                // On Error, close the modal and show an error toast            \n                (e) => {\n                    closeModal(\"editModal\")\n                    showAlert(\"An error occurred while updating the developer details!\");\n                    if (e.statusCode === 401) {\n                        navigateTo(\"Page1\");\n                    }\n                },\n                // Params Object    \n                newUserData)\n    }\n}`\nThe `updateUserData` function does the following:\n\nCreate the dynamic data that's updated by the user in `editModal` in `newUserData` JSON\nExecutes query `updateDeveloperDetails`\nOn successful execution of the query:\nCalls `developers` query to fetch the updated developer details\nShows a success toast to the user\nCloses the `editModal`\n\n\nOn error or failed execution of the query\nShows an error toast to the user\nCloses the `editModal`\n\n\n\nRename the `Confirm` button to `Update` and bind the function `updateUserData` to its `onClick()` event. You can bind the function call by using `{{Utils.updateUserData()}}`.\n\nWhen you'll hit the `Update` button, the `updateUserData` function gets executed that updates the developer information and refreshes the developer table to fetch the updated information.\nAdd Permissions\nAs you want only the admins to access the Dashboard, let\u2019s create another function for access control. The function contains a list of users\u2019 emails who have access to update data in the table. Let\u2019s call this function `isAdmin`.\nAdd the code snippet for `isAdmin()` and `adminsList` to the `Utils` JS Object.\n`export default {\n    adminsList: [\"admin1@yourdomain.com\", \"admin2@yourdomain.com\", \"admin3@yourdomain.com\"],\n    getAllDeveloperTaskStatus() => {\n        ... // code block for getAllDeveloperTaskStatus\n    },\n    updateUsersData() => {\n        ... // code block for updateUserData\n    },\n    isAdmin: (email) => {\n        if (this.adminList.indexOf(appsmith.user.email) > -1) { // check if the logged in user is an admin\n            return true;\n        }\n        return false;\n    }\n}`\nThe final function looks like below:\n```\nexport default {\n    //the allowed list of admin's email\n    adminsList: [\"admin1@yourdomain.com\", \"admin2@yourdomain.com\", \"admin3@yourdomain.com\"],\n    getAllDeveloperTaskStatus: () => {\n        return developers.data.map((developer) => {\n            const developerId = developer.id;\n            const taskList = developerTaskStatus.data.filter((alltask) => alltask.userId === String(developerId)); // fetch all the tasks for the given developer\n            const completedTaskList = taskList.filter((task) => task.status === \"Completed\"); // fetch tasks that are completed by the developer\n            const todoTaskList = taskList.filter((task) => task.status === \"To-Do\"); // fetch tasks that aren't yet started by the developer\n            const inProgressTaskList = taskList.filter((task) => task.completed === \"In-Progress\"); // fetch tasks that are in progress by the developer\n            return {\n                \"Id\": developer.id,\n                \"Name\": developer.name,\n                \"Email\": developer.email,\n                \"Total Tasks\": taskList.length,\n                \"To-Do Tasks\": todoTaskList.length,\n                \"In Progress Tasks\": inProgressTaskList.length,\n                \"Completed Tasks\": completedTaskList.length\n            };\n        })\n    },\n    updateUserData: () => {\n        // Construct new user's data\n        const newUserData = {\n            ...Table1.selectedRow,\n            name: devName.text,\n            email: devEmail.text,\n        }\n        // Run updateDeveloperDetails query   \n        updateDeveloperDetails.run(\n            // on successful execution of updateDeveloperDetails run developers to fetch updated data\n            async () => {\n                    await developers.run();\n                    closeModal(\"editModal\");\n                    showAlert(\"Developer Details are updated successfully!\");\n                },\n                // On Error, close the modal and show an error toast      \n                (e) => {\n                    closeModal(\"editModal\")\n                    showAlert(\"An error occurred while updating the developer details!\");\n                    if (e.statusCode === 401) {\n                        navigateTo(\"Page1\");\n                    }\n                },\n                // Params Object  \n                newUserData)\n\n\n```},\nisAdmin: async () => {\n    if (this.adminsList.indexOf(appsmith.user.email) > -1) {\n        return true;\n    }\n    navigateTo(\"Page2\");\n    return false;\n}\n```\n\n\n}\n```\n \nOnly the users with email added to the `adminList` will be able to access the dashboard and do the updates.\nWith the Async function settings, you can bind the `isAdmin` function to `RUN ON PAGE LOAD`. The execution of `IsAdmin` on Page load ensures the validation of the user\u2019s email against the `adminList` for the logged-in user should happen on the page load. If the logged-in user's email is present in the `adminsList`, the user can access the Dashboard. If not, the user navigates to the access denied page that shows a message:\n:::info\nYou don't have permission to access the Dashboard.\n:::\nCurrent limitations\nAs the JavaScript Editor is in its BETA, there are a few limitations:\n\nAt the moment, you can't use `JS Objects` across pages. You can subscribe to the issue and follow the progress.\nYou can't define variables and functions outside of export default { }. In future iterations, you can write and export only selected variables/functions from a `JS Object`.\n\n",
    "tag": "appsmith"
  },
  {
    "title": "Asynchronous JavaScript Function Settings",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/writing-code/javascript-editor-beta/asynchronous-javascript-function-settings.md",
    "content": "Asynchronous JavaScript Function Settings\nThe asynchronous function allows you to choose when you want to execute code. For example, you may want to delay the query execution or fetch the data on demand.\nHow to Define an Asynchronous Function in Appsmith?\nIn the Appsmith environment, a function is termed as async if you are performing one of the below actions:\n\n\nYou have a keyword (async) that marks the asynchronous execution of the function.\n`export default{\n    functionName: async() => {\n       //use async-await or promises\n    }\n}`\n* You have any in-built Appsmith functions like `showModal(), showAlert()`, etc., added in the function block.\n*   You want to execute a query or call an API on run time. For example, you have an API `GetUsersList,` and you want to call this API on runtime, that is, whenever the JS Object function `callAPI()` is executed. Your function may look as below:\n`export default {\n   callAPI: () => {\n      GetUsersList.run();\n   }\n }`\n\n\nThe line of code `GetUsersList.run()` marks the function `callAPI()` for asynchronous execution and hence `callAPI` function is considered as async.\nA JavaScript Editor in Appsmith provides some additional settings for asynchronous functions that will help you add more configurations.\nYou can specify the settings in the Settings tab on the Appsmith JS Editor.\nSettings\nYou\u2019ll see the Settings tab next to Code whenever you have added an asynchronous function to the JS Object. Head to the Settings tab and click on it to reveal additional configurations.\nLet\u2019s quickly dive into these configurations to understand how they help you make your application behavior better.\nNavigate to JS Object \u2014> You\u2019ll see Settings next to Code\n\nClick on Settings to reveal configurations.\n\nYou get two settings to configure for asynchronous functions:\n\nRUN ON PAGE LOAD\nCONFIRM BEFORE CALLING\n\nThe settings are available at the function level. For every asynchronous function defined, you\u2019ll have a corresponding configuration available for a run on page load and confirm before calling. Refer to the screenshot below, where you can see that the functions - myFun2 and showData have configurations available that you can define for them individually.\n\nRUN ON PAGE LOAD\nAs the name suggests, you can use the configuration to mark that your function will be executed whenever a page is loaded. For example, you have a page `User Listing` and have added a JS object with the function `GetUserRole` which fetches the user\u2019s role. You want that the query should be executed at the time of page load so that the logged-in user will be able to see the user listing. To get this working, you have to set the RUN ON PAGE LOAD configuration as YES for the `GetUserRole` function. Once the configuration is in place, the function `GetUserRole` will be executed whenever the app is loaded and the response generated by it will be displayed on the page.\n \n:::info\nBy default, RUN ON PAGE LOAD is turned ON (Yes selected) for functions that display data on a widget. That is, the widget binds to the response generated by `JSObjectName.asynFunctionName.data`. In this case, the on-page load is automatically set as true. You can explicitly change this setting to suit your logic in the Settings tab.\n:::\nIf you wish to delay the call of function on demand, then select No. It marks that the function will not be called on page load, and the execution will be deferred until called on demand by calling the function.\nConfigure run on page load\nOn Appsmith, you can bind execution of JS Objects on page load in either of two ways:\nBind Response to Widget\nWhenever you bind a query or API response to a widget, Appsmith automatically sets the execution of the corresponding API or Query on page load. For example, you have a widget that refers to the data property of the JavaScript async function by adding `{{JSObject.myFun.data}}`, at that time Appsmith marks the execution of that query/API on page load. You can modify the same by navigating to JSObject \u2192 Settings \u2192 RUN ON PAGE LOAD \u2192 Select No.\n \nHere\u2019s a quick snapshot of how Appsmith triggers a query or API execution on page load:\n\nAdd a table widget (Table1), and add a function in `JSObject5` that calls an API `getUsers`. The `getUsers` API call is embedded in the `showData` function and generates a user listing.\n\n\n\nBind the response generated by `showData` to table widget `Table1` by adding the below code in the `Table Data` property available on the property pane of the Table widget.\n\n`{{JSObject5.showData.data}} // behind the scenes Appsmith \n                           // marks execution of showData on page load                      \n                          // to get the response and bind it to the table data`\n\nAsynchronous Function Setting\nEspecially for asynchronous functions, you can explicitly mark the execution of an async function on page load for the corresponding JS Object.\nNavigate to JS Object \u2014> Click on Settings \u2014> Select Yes for RUN ON PAGE LOAD next to the JS function. You are all set. Appsmith will take care of executing the async function on page load for you.\n\nAs shown in the screenshot below, you can see that the `showData` function is called on page load, and `Table1` displays the data.\n\nCONFIRM BEFORE CALLING\nWith this setting, you can generate a confirmation pop-up and take the user\u2019s input for executing the function. For example, the JS object has the function `deletePermission` which calls an API that deletes the database\u2019s permission. You would want to ensure that the user wants to delete permission, in which case, you would like to show a confirmation dialogue. The confirmation dialog ensures that the user wants to perform a delete action. A user can choose Yes to delete or can decline the same by choosing No. Thus `Confirm Before Calling` comes in handy to protect against users accidentally running destructive operations.\n\nConfigure confirm before calling\nConfirmation is like a nudge given to the user before executing a function. It ensures that the user is aware of the action that would be performed, and the same is not triggered by chance. A confirmation setting can only be defined explicitly from the Settings tab.\nNavigate to JS Object \u2014> Click on Settings \u2014> Select Yes for CONFIRM BEFORE CALLING next to the JS function. You are all set. Appsmith will take care of executing and showing the confirmation dialogue to the user whenever the action is triggered.\n\nWhen to use Asynchronous Settings?\nAsynchronous function settings enable users to create complex workflows by executing functions before the application loads, allowing the data manipulation logic to run and make the desired outcome \u2014 secure function execution with a confirmation before you want application users to execute any critical operations.\nLet\u2019s understand the settings deeper with examples.\nFor example, you would want to apply restrictions in your application based on the user\u2019s domain. That is, anonymous users (users who are not a part of your domain) cannot access certain application pages. You can quickly implement this by creating a function that uses the asynchronous function setting- Run on page load.\n \nHere\u2019s a quick snapshot of steps that you can take to create this logic:\n\nCreate an application and add two pages.\nFirst Page (UserListingForAppsmithUsers)- Add a table, and rename it to `UserListing` which displays the data generated by the `showUserListing` function of the `DataLoader` JS object. The function generates a list of users.\nSecond Page (AnonymousUser) - Displays a message to the user.\nCreate a JS object `DataLoader` and add a function `showUserListing` that checks whether the user is logged in or not._ The function will verify the below logic:\nIf the user is logged in, then the `GetUserList` API will be called, and the response will be generated\nIf the user is not logged in or is not an appsmith user, redirect the user to the `AnonymousUser` page.\nMark function `showUserListing` of JS Object - DataLoader to run on page load by selecting Yes.\n\nUserListingForAppsmithUsers - DataLoader JS object Code. You can see that a function `showUserListing` is marked for asynchronous execution by defining the `async` keyword.\n`export default {\n    showUserListing: async () => {\n        //use async-await or promises\n        if(appsmith.user.isAnonymous) {\n              navigateTo(\"AnonymousUser\");\n        }\n        //verify if the logged-in user is from appsmith\n        if(appsmith.user.email.match(\"appsmith\")){\n          return GetUserList.run();\n        }else{\n          navigateTo(\"AnonymousUser\");\n        }       \n    }\n}`\nFor logged-in appsmith users, a user listing is shown as the`GetUserList` API is executed:\n\nAnonymous users - Whenever the application renders, the `showUserListing` function is executed. The function determines whether the user is anonymous. You can use the property of a user object `isAnonymous` to check the user's logged-in status.\n`appsmith.user.isAnonymous`\n\nSuppose the user is not logged in, then `appsmith.user.isAnonymous` returns `true` and redirects the user to the `AnonymousUser` page and displays the message.\n:::info\nYou are not authorized to view user data.\n:::\nIf the user is logged in `appsmith.user.isAnonymous` returns `false` and the logic is executed to verify if the logged-in user is an Appsmith user. If the user is an Appsmith user, `GetUserList` API is called to fetch the user listing. The execution is completed, and the response is generated, displayed in the `UserListing` table.\nYou can use authentication and authorization using the Async function settings. To get started; view and fork the authentication application, view and fork the authorization application.\nYou can do authentication and authorization using the Async function settings. To get started, you can use one of the below applications:\n\nView and fork the authentication application\nView and fork the authorization application\n",
    "tag": "appsmith"
  },
  {
    "title": "Connecting to Datasources",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/connecting-to-data-sources",
    "content": "Connecting to Datasources\nAppsmith offers plug-and-play support for many databases and the RESTful API interface for seamless integration with other tools. Whether you're working with a traditional database like MySQL or a more modern tool like S3, Appsmith makes it easy to connect and start working with your data right away. Connecting to a datasource is a necessary step before data can be visualized, transformed, or otherwise utilized. \n:::info\nAppsmith encrypts all your datasource credentials and stores them securely. Appsmith also doesn't store any data returned from your datasources and acts only as a proxy layer to orchestrate the execution of Queries. As Appsmith is an open source framework, you can deploy it on-premise, and audit it to ensure none of your data leaves your VPC. For more information, see Security. \n:::\nTo connect to a datasource, \n\nNavigate to Explorer\nClick on the + icon (next to Datasources) \nSelect the datasource. \n\n\nAfter creating and configuring a datasource, you can query the datasource and bind the results in the UI to display data.\nDatasources configured within an application can be accessed by all the developers who are members of the workspace. \n\n\n\n\n\nDatabases\n\n\n\n\n\n\n\nAPIs\n\n\n\n\n\n\n\nQueries\n\n\n\n",
    "tag": "appsmith"
  },
  {
    "title": "Databases",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/connecting-to-data-sources/connecting-to-databases.md",
    "content": "\ndescription: >-\n  Connect to databases and run queries to read and write data directly on the Appsmith query editor.\n\nDatabases\nDatabases are an essential part of every application and are used to store and manage data. On Appsmith, you can directly connect to supported databases and run queries to read and write data on the Appsmith query editor. \nConnecting to a database\n:::caution important\nIf you are a self-hosted user, you may need to whitelist the IP address of the Appsmith deployment on your database instance or VPC before connecting to a database. \n18.223.74.85 and 3.131.104.27 are the IP addresses of the Appsmith cloud instances that need to be whitelisted.\n:::\n\nTo connect to a database:\n\nOn the Explorer tab, click the + icon next to Datasources. \nChoose a database from the list of datasources that Appsmith can connect to.\nClick on the edit pencil icon next to the default name to rename the datasource.\nProvide the configuration details required to connect to the database. You may need to contact your database administrator to whitelist Appsmith cloud.\nClick Test to verify that Appsmith can connect to the database using the details you provided.\nSave the datasource. The configuration details aren't saved/updated until the Save button is clicked. When the datasource has been added successfully, a success message appears at the top of the app window. \n\n:::tip\nIf you want to connect to a local database, you can use a service like ngrok to expose it. For more information, see How to connect to local database on Appsmith.\n:::\nNative databases\n\nPostgreSQL\nMongoDB\nMySQL\nElasticsearch\nDynamoDB\nRedis\nMicrosoft SQL Server\nFirestore\nRedshift\nAmazon S3\nSnowflake\nArangoDB\nSMTP\n\nAppsmith can also seamlessly connect with most other databases through the RESTful API plugin. For more information, see Integrations\nSample databases\nAppsmith provides two sample datasets to help you connect the data and test the platform. \n\nMongoDB database with a `movies` collection\nPostgreSQL database with a `users` table\n\n:::info Important\nThe sample databases are public and shared by all users, so ensure that you don't write any confidential information during testing. As data may be added or updated by different users, the databases are automatically reset every day, so any updates made to these databases are temporary.\n:::\n\n\nOn the Explorer tab, click the + icon next to Datasources.\nSelect the sample `users` PostgreSQL database.\nGo to Datasources and click the Active tab. Select the New API + button next to the `users` sample database.\nWrite the query in the query editor and click the Run button to execute it. For example:\n\n`sql\nSELECT * FROM users;`\nThe select query retrieves all the data from the users table. You can display the query results in a Table widget by binding the data in the Table Data property.\nGeneral notes\n:::info\nAppsmith encrypts all your datasource credentials and stores them securely. Appsmith also doesn't store any data returned from your datasources and acts only as a proxy layer to orchestrate the execution of Queries. As Appsmith is an open source framework, you can deploy it on-premise, and audit it to ensure none of your data leaves your VPC. For more information, see Security. \n:::\nConnection pooling\nAppsmith creates a new connection with the database server when you first connect the database to your application. All subsequent queries executed by Appsmith against your database then re-use this connection to ensure that your queries are executed at run-time. If an idle connection is closed by the database server, Appsmith creates a new connection while executing the next query.\nFor certain database plugins such as PostgreSQL, MySQL, Redis, MS SQL, and Redshift, Appsmith explicitly creates and maintains a connection pool because, usually, a single connection isn't designed to handle multiple simultaneous queries.\nThe maximum number of connections in a pool is limited to 5. Please note that max 5 connections in a pool doesn't mean that a max of 5 queries can be run concurrently using this pool. The number of concurrent queries that this pool can run is usually much higher. \nTroubleshooting\nIf you are experiencing difficulties with connecting datasources in Appsmith, you can refer to the Datasource troubleshooting guide for assistance. If you need further support, you can reach out on Discord or ask questions on the community forum.\nFurther reading\n\nWrite queries\nData access and binding\n",
    "tag": "appsmith"
  },
  {
    "title": "Self Signed Certificates",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/connecting-to-data-sources/authentication/self-signed-certificates.md",
    "content": "Self Signed Certificates\nIn case you need to use a self-signed certificate to access your REST endpoint, the Authenticated API Datasource allows you to upload your own self-signed certificate within the API's configuration page.\nTo upload your self-signed certificate:\n\nNavigate to your Authenticated API Datasource in the Explorer pane. If you haven't already created one, you can find instructions in the Authenticated API docs.\nClick Edit in the top-right of the window.\nClick to open the Advanced Settings dropdown at the bottom of the window.\nSet the Use Self-signed certificate* option to `Yes`.\nIn the new Upload Certificate field, click the Select button. Now you can browse to find and upload your self-signed certificate file.\n\n\nThis information needs to be provided in .PEM (Privacy Enhanced Mail) format, as shown below. The certificate information is stored securely in an encrypted format in the database.",
    "tag": "appsmith"
  },
  {
    "title": "REST APIs",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/connecting-to-data-sources/authentication",
    "content": "REST APIs\nWith Appsmith, you can connect to a wide range of tools and platforms. If you want connect to an API or if there isn't a native integration with a datasource on Appsmith, you can connect through the REST API interface. \nIf the API is protected by an authentication mechanism that requires a standard set of headers or parameters that need to be sent with every request, you can save these in a common datasource that can be reused with every request known as Authenticated API datasources.\n:::info\nAppsmith encrypts all your datasource credentials and stores them securely. Appsmith also doesn't store any data returned from your datasources and acts only as a proxy layer to orchestrate the execution of Queries. As Appsmith is an open source framework, you can deploy it on-premise, and audit it to ensure none of your data leaves your VPC. For more information, see Security. \n:::\nConnecting to REST API\nTo connect to a REST API, go to the Explorer tab, click the + icon next to Datasources and select REST API.\nYou can provide the URL and additional information like the Headers, Params, Body, and Pagination. After adding the request details, you can directly run the API query and bind it to widgets to display the results in the UI. To learn more about setting API request details, you can refer to the documentation on configuring APIs.\n \nSample API\nAppsmith provides a sample API `https://mock-api.appsmith.com` to help you learn to create and modify queries using the REST API pane.\n\nTo use the sample APIs:\n\nGo to the Explorer tab, click the + icon next to Datasources.\nSelect REST API\nTo fetch users data from this API choose the `GET` method and enter the following URL:\n\n`js\nhttps://mock-api.appsmith.com/users?page=1`\n4. Click the Run button to execute the API query and view the response.\nCreating an authenticated API datasource\nWhen you create an authenticated API datasource, you need to configure the headers and query parameters only once and thereafter don't need to configure these for every API request. Additionally, to ensure authorized access and secure data transfer, various authentication mechanisms can be implemented, such as OAuth 2.0, signature headers, self-signed certificates, bearer token-based authentication, and API key-based authentication.\n \nTo create an authenticated API datasource:\n\nOn the Explorer tab, click the + icon next to Datasources\nSelect Authenticated API.\nClick on the edit pencil icon next to the default name to rename the datasource.\n\nProvide the configuration details required to connect to your API.\n\n\nName:     Specify a name for the API datasource.\n\nMethod: Select the method for the API request.\nURL:       Specify the URL for the API endpoint.\nHeaders:       Set the required HTTP headers for the API request.\nQuery parameters:       Provide the query parameters for the API request, if necessary.\nAuthentication type: Define an authentication type for REST APIs by using the protocols available on Appsmith.\nSend appsmith signature header: Ensure that the incoming requests originate from Appsmith.\n\nUse self-signed certificate:  These certificates can be configured as part of the Advanced Settings. \n\n\nSave the datasource. The configuration details aren't saved/updated until the Save button is clicked. When the datasource has been added successfully, a success message appears at the top of the app window.\n\n\n:::tip\nIf you want to connect to an API that's not publicly available on the internet, you can use a service like ngrok to expose it. For more information, see How to work with local APIs on Appsmith.\n:::\nImporting cURL commands\ncURL is a command-line tool that can be used to make HTTP requests to a server. You can use cURL to send HTTP requests, such as GET, POST, PUT, and DELETE, to a server to retrieve or manipulate data. Appsmith makes it easy to import your APIs into your application using cURL commands.\nTo import cURL commands into your application:\n\nOn the Explorer tab, click the + icon next to Datasources\nSelect cURL Import.\nAdd your cURL command, for example:\n\n`js\ncurl -X GET https://example.com/resource`\n4. Click the Import button.\n\nNative API datasources\n\nGraphQL\nGoogle Sheets\nAirtable\nTwilio\nHubSpot\n\nAppsmith can also seamlessly connect with most other tools through the RESTful API plugin. For more information, see Integrations\nPassing parameters to API requests\nThere are three ways to pass parameters to API calls on Appsmith as shown in the video below:\n\nSend body data with API requests\nAppsmith supports a variety of encoding types for sending data in API queries. The encoding type can be selected via the Body dropdown on the API editor. Selecting NONE omits a body from the request.\nURL-encoded form data\nSelecting the value FORM_URLENCODED (for `application/x-www-form-urlencoded`) automatically encodes your key/value pairs to be sent in the body field.\nMultipart/Form-data\nMultipart requests can include several different types of data within them, such as a file along with some other related metadata. To set up your query to send with `multipart/form-data` encoding, navigate to its query editor screen, click the Body tab, and find the MULTIPART_FORM_DATA tab beneath it.\n\nTo submit a file as a multipart input, use a Filepicker widget to upload a file to your application. Once it has been uploaded, you can bind `{{ FilePicker1.files[0] }}` as a value in your API's multipart request body. Be sure to select \"File\" in the datatype dropdown. If you would like to submit multiple files in the same request key, you can alternatively use `{{ FilePicker1.files }}` to include the entire contents of the Filepicker widget.\nThe file data from the Filepicker widget can be in any data format (base64 or binary) according to the requirements of the endpoint that you're connecting to.\nYou can also pass plain text values in your multipart request by selecting the \"Text\" option in the datatype dropdown. If you wish to pass multiple plain text values under the same key, be sure to use the \"Array\" option instead.\n\n`javascript\n// type: Text\n{{ Text1.text }}`\n`javascript\n// type: Array\n{{[ Text1.text, Text2.text, \"hello, world\"]}}`\nRaw data\nIf your endpoint can't accept multipart-encoded data and requires raw body binary instead, choose the RAW tab under the query Body tab instead of MULTIPART_FORM_DATA. In this case, you would pass the `data` property of your file to the query instead of the file object itself, because the endpoint expects only raw binary data:\n`javascript\n// Binary data in the RAW format\n{{ Filepicker1.files[0]?.data }}`\nThe preceding example uses Optional Chaining using the `?` operator. This way, if the `files[0]` doesn't exist, attempting to access `data` returns `undefined` instead of raising an error.\n:::info\nBe sure to turn off the JSON Smart Substitution setting for this query in the query settings. This option is useful for helping to cast data into the correct JSON formats, however it can be problematic when used with RAW body binary encoding.\n:::\nTroubleshooting\nAre you having trouble? check out the API response troubleshooting guide or reach out on Discord to get support or ask questions on the community forum.\nFurther reading\n\nWrite queries\nData access and binding\nConnect to a local database or API\n",
    "tag": "appsmith"
  },
  {
    "title": "Configuring APIs",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/connecting-to-data-sources/authentication/connect-to-apis.md",
    "content": "\ndescription: You can hit any REST endpoint available on the public internet\nConfiguring APIs\nConfiguring APIs involves setting up and managing the REST API requests that allow it to function effectively. This can include adding requests details, sending parameters, setting up authentication, and choosing custom settings. \nAPI pane\nThe API pane is a user-friendly interface for creating and managing RESTful APIs. It supports all standard REST HTTP methods and provide a way to create API requests and add request details such as headers, parameters and body data.\n\nAdding API request details\nConfiguring an API query involves specifying the various components that make up the API request. Here is an overview of the main elements you need to consider when configuring an API query.\nName\nWhen you create an API query in Appsmith, a default name is provided. You can change this name by clicking on the edit pencil icon. It's important to make sure that the name is unique, as it serves as an identifier for queries on the page.\nMethod\nA method refers to the type of request being made to the REST API endpoint. Appsmith supports all the standard methods, including GET, POST, PUT, DELETE, and PATCH. When setting up an API query in Appsmith, you can select the desired method from a dropdown menu before adding the URL.\nIt's important to choose the appropriate method based on the task you want to accomplish, as each method has a specific meaning and can behave differently depending on the API you are using.\nURL\nThe URL Path provides a way to access the API and its functions. To use this field, you can enter the API URL that you want to access. For example, if you want to access the Appsmith mock API, you can enter the URL as `https://mock-api.appsmith.com`.\nHeaders\nHeaders contain meta-data about the operation and may be required to be sent along with an REST API request.\nParams\nIn a REST API, parameters are values that are passed in the URL, that can be used to filter, sort, paginate, or perform some other operation on a set of data. These parameters allow the API to return a specific set of data based on the values that are provided.\nFor example, an API might have a parameter called \"limit\" that specifies the maximum number of results to return, or a parameter called \"sort\" that determines the order in which the results should be sorted. By providing different values for these parameters, a client can control the data that's returned by the API.\nBody\nIn an API query, the body is the main content of the request. It's typically used to send data to the server, such as form data or a JSON payload. The body of an API request is usually included with POST and PUT requests, which are used to create or update resources on the server. For example, it might contain a JSON object with multiple key-value pairs, or it might contain a simple string or number.\nPagination\nPagination refers to the process of receiving portions of a huge dataset until you receive the entire dataset. This helps optimize your app's performance because trying to get all the data results in a slow load time of your app and a slow rendering of the results in the UI. Appsmith supports the following methods for paginating API queries:\nPaginate with table page number\nAllows you to paginate the results of an API query using a table page number. To use this feature, you need to configure table and request parameters.\nThis can be done by setting up request parameters to control the table's pagination. This may involve mapping a key like \"pageNo\" to the table's page number property.\nExample - Map key pageNo or similar to value\n`{{UsersTable.pageNo}}` \nHowever, in certain cases, it may be beneficial to configure limit and offset properties. For example, \n```\nlimit = {{UsersTable.pageSize}}\noffset = {{UsersTable.pageOffset}}\n```\nPaginate with response URL\nA response URL is a special type of URL that's returned in the API response and can be used to request the next or previous page of results. This can be done by adding Previous and Next URL in the Pagination section. \nFor example, when using the Appsmith mock API, a JSON response is returned that contains the `next` and `previous` keys. These keys can be used to configure pagination properties, such as `{{Api.data.next}}` and `{{Api.data.previous}}`. You can validate your configuration by clicking the \"test\" button.\nAuthentication\nAuthentication refers to the process of verifying the identity of a client or user making a request to the API. This is typically done by requiring the client or user to provide a set of credentials, such as a username and password, which can be checked against a database of authorized users or a third-party authentication service.\nTo save the URL of a REST API as a data source and access its authentication settings, you can simply click the \n`SAVE AS DATASOURCE` button and save the API query as a authenticated API datasource. \nSettings\nTo access and configure settings for a query, click the Settings tab on the Appsmith Query Editor. Some options available in the Query Settings Pane include Run on Page Load and others. For more information, see Query Settings.\nThe settings tab allows you to modify the parameters and settings for API queries. These may include various options that can be included in API requests to specify certain filters or options, or to control the behavior of the API as a whole.\nTroubleshooting\nAre you having trouble configuring APIs? check out the REST API Errors or reach out on Discord to get support or ask questions on the community forum.\nFurther reading\n\nWrite queries\nData Access and Binding\nConnect to a localhost database/ API\n",
    "tag": "appsmith"
  },
  {
    "title": "Signature Header",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/connecting-to-data-sources/authentication/signature-header-in-api-actions.md",
    "content": "\ndescription: >-\n  The signature header can be used to verify the authenticity and integrity of\n  API requested made by Appsmith.\n\nSignature Header\nThis is an option that can be enabled on REST API datasources. When enabled, appsmith require a signature secret (a string of at least 32 characters) as input from the user. The effect of this option being enabled is that every API call made to this datasource includes an additional header, `X-Appsmith-Signature`, whose value is a JSON Web Token (JWT) signed with the secret provided by the user. Following are details of how this signature is constructed, what the JWT contains, and what significance this header holds to users.\nEnabling the header\nThere are two steps to enable the signature header for a particular REST datasource:\n\nSet Send Appsmith signature header to `Yes`.\nSet the `Session Details Signature Key` to a random string that's at least 32 characters long.\n\nNow Save the datasource and any action built on top of this datasource should now have an `X-Appsmith-Signature` header with a JWT (described below) as it's value.\nContents of the JWT\nA JSON Web Token (JWT) is made up of three parts. The header, payload, and signature. The header and payload are essentially base64 encoded JSON objects.\nA typical header JSON object looks like the following:\n`javascript\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}`\nA typical payload JSON object looks like the following:\n`javascript\n{\n  \"iss\": \"Appsmith\",\n  \"exp\": 1516239022\n}`\nConstruction of token and signature\nNow, these two are taken to construct the following string (you can call this the body):\n`javascript\nbase64Encode(JSON.stringify(header)) + \".\" + base64Encode(JSON.stringify(payload))`\nThis body is then signed using the algorithm specified in the header's `alg` key. The secret used to make this signature is the one configured in the datasource by the user. This signature is then appended to the preceding body, with another `\".\"` in the middle.\nSignificance of the signature\nThe signature ensures the authenticity and integrity of this JWT.\nAuthenticity: authenticity is the property of the token that proves that the token is originating from Appsmith.\nA signature can't be recreated without access to the secret that was used to create it. The fact that the secret signature is only available to Appsmith and the user proves the signature's and so the token's authenticity.\nIntegrity: integrity is the property of the token that it can't be tampered with.",
    "tag": "appsmith"
  },
  {
    "title": "Basic",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/connecting-to-data-sources/authentication/authentication-type/basic-authentication.md",
    "content": "Basic\nBasic authentication is a simple method for verifying the identity of users making requests to an API. It involves sending an HTTP header with a base64-encoded username and password. This process is simple to set up and configure, making it convenient for developers to implement in their APIs.\nHow does basic authentication work\nThe `base64(username:password)` portion is the base64-encoded version of the string username:password. This allows the server to verify the identity of the user making the request without sending the `plaintext` password over the network.\nWhen the server receives a request with the Authorization header, it decodes the base64-encoded string and checks the `username` and `password` against its own records. If the credentials are valid, the server allows the request to proceed. If the credentials are invalid or missing, the server returns an HTTP 401 Unauthorized error to the client.\nTo share basic authentication details across multiple APIs, you can use the `Basic` authentication mechanism within datasources. To do this:\n \n\nClick on the `+` icon next to the datasources section \nAdd an Authenticated API\nEnter the Base URL of the API (example: `https://mock-api.appsmith.com`) and select the authentication type as Basic.\n\nThe base64-encoded username and password are automatically added to the header of the API request, allowing the API to verify the identity of the user making the request.\nAuthentication\n\nUsername\nThe username is a string that identifies the user making the request to the API. It's often a combination of the user's first and last name, or it could be a unique identifier like an email address or employee number.\nPassword\nPassword is a secret string that's used to verify the identity of the user making a request to an API. The password is sent as part of the Authorization header in an HTTP request, along with the username, to the server that's hosting the API.\nThe server uses the password to verify the identity of the user and determine whether the request should be allowed to proceed. The password is stored in a encrypted form, to protect it from being accessed by unauthorized users.\n:::info important\nThe Appsmith's system doesn't store any information about query responses or user inputs. Appsmith only acts as a proxy and never logs or stores the private/confidential data in Appsmith's data stores.",
    "tag": "appsmith"
  },
  {
    "title": "Authorization Code",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/authorization-code.md",
    "content": "Authorization Code\nAn authorization code is a temporary code authorized by an authorization server. You can get an access token in exchange for an authorization code. Once you get an access token, you can use it to access the resources or perform actions on behalf of the user.\nIn Appsmith, you can achieve this by setting up an `Authenticated API` and configuring it to use the `Authorization Code` as the grant type.\n \nIntegrate with Dropbox\nLet\u2019s take an example to understand the authorization code integration with Dropbox. You have a portal app built on Appsmith, and your app users use it to upload their profiles. You already have a backend application integrated with Dropbox and want to use Dropbox to store the profiles. To achieve this, you have to create an Authenticated API and configure it to connect with Dropbox.\nUser Endpoint\nYou\u2019ll have to connect to a user endpoint on the Dropbox platform to perform API calls. Navigate to the exhaustive list of user endpoints used by Dropbox for different API calls.\n:::info\nDropbox provides details on headers or the content type that you will have to add to your requests.\n:::\nConfigure Authenticated API\nFor uploading files configure `Authenticated API` as per below table:\n| Appsmith            | Dropbox                                                                                                                                                                                    | Value                                                                                                                                                          |\n| ----------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| URL                 | User Endpoint                                                                                                                                                                                  | `https://content.dropboxapi.com/`                                                                                                                                  |\n| Headers             | `Dropbox-API-Arg`                                                                                                                                                                              | {\"path\": \"/{{`<``pick the file path from widget like````FilePicker``>`}}\",\"mode\" : \"add\",\"autorename\" : true, \"mute\" : false,\"strict_conflict\" :false} |\n| Headers             | `Content-Type`                                                                                                                                                                                 | `application/octet-stream`                                                                                                                                         |\n| Authentication Type | NA                                                                                                                                                                                             | OAuth 2.0                                                                                                                                                          |\n| Grant Type          | NA                                                                                                                                                                                             | Authorization Code                                                                                                                                                 |\n| Access Token URL    | Token Endpoint                                                                                                                                                                                 | `https://api.dropboxapi.com/oauth2/token`                                                                                                                          |\n| Client ID           | Navigate to Appconsole >> Select App >> Settings tab >> App key                               | Copy the App key and add in the Client ID field.                                                                                                                   |\n| Client Secret       | Navigate to Appconsole >> Select App >> Settings tab >> App secret                            | Copy the App secret and add in the Client secret field.                                                                                                            |\n| Scopes              | Navigate to Appconsole >> Select App >> Permissions tab >> select Scope `files.content.write` | Copy the scope `files.content.write` and add it to the field.                                                                                                      |\n| Authorization URL   | Authorization Endpoint                                                                                                                                                                         | `https://www.dropbox.com/oauth2/authorize`                                                                                                                         |\n| Redirect URL        | Navigate to Appconsole >> Select App >> Settings tab >> OAuth2 >> Redirect URIs           | Add the Redirect URL from Appsmith to the field and click add button.                                                                                              |\n:::info\nTo create an application you can also follow the OAuth guide available at Dropbox.\n:::\nKeep the rest of the settings and click the `Save and Authorize` button. You\u2019ll be redirected to the datasource screen on Appsmith with the response status as success on successful authentication.\n:::info\nYou can verify if your datasource verification has been successful by checking the `response_status` in the address bar of your browser.\n:::\nUpload Files\nA user will select the files by using a `Filepicker` widget. Whenever a user chooses a file and clicks upload, the button will trigger the API call for uploading the file. Here\u2019s a blueprint of interaction between Portal App and Dropbox:\n\n\nUser selects a file and clicks on the upload button.\nThe `Upload API` residing on Appsmith will be called.\nThe `Authenticated API` talks to Dropbox APIs for authorization and generating a token. The token generated is added to the Upload API call.\nThe upload request is executed on Dropbox to upload a file.\nDropbox directory structure shows that the file is uploaded successfully.\n\nYou can send the response all up to the Portal App to display the uploaded file or bind it to show a message to intimate users for a successful upload.\nLet\u2019s configure Authentication API to integrate with Dropbox and create the workflow for uploading files.\n \nCreate Query\nNavigate to Explorer \u2192 Click (+) next to Query/API \u2192 Select `New <AuthenticatedAPIName> Query` under Create Query.\nThe action adds an API connected to the Datasource (AuthenticatedAPI) for Dropbox. You\u2019ll see that the User Endpoint you configured for the datasource is already available, along with the header details.\n\nThere are two ways to add the headers to the APIs:\nAdd Headers to Authenticated API\nYou can add headers directly to the Authenticated API when you configure it. Here you can add the headers that are common across the APIs. For example, content type.\nAdd Headers to API\nYou can add headers to individual APIs when you add them to the platform. Here you can add headers that are specific to API.\nAdd Widget\nLet\u2019s add a filepicker widget to canvas and configure it to trigger the `Upload API` call.\n\nNavigate to Widgets \u2192 search FilePicker in the search bar \u2192 Drag the widget onto the canvas.\nSelect the FilePicker Widget and navigate to the `onFilesSelected` event available on the properties pane.\nEnable JS available next to the event\nAdd the following code in the input box.\n\n`{{UploadFileToDropbox.run() }}`\nThe above code snippet will trigger the API execution whenever from a FilePicker widget user selects a file and clicks on the Upload button available on the widget.\n:::info\nAt any given point in time, you can add data to your headers by using the mustache `{{}}` sign. For example, `FilePicker1.files[0].name` for filename.\n:::\nOnce the API call is successful, you can navigate to the Dropbox interface and verify the file upload.\nIntegrate with Google Docs\nLet\u2019s look into some other integrations that you can do with Authenticated APIs. In this section, you\u2019ll be able to configure your Google Docs integrations to your Appsmith apps.\nUser Endpoint\nYou\u2019ll have to connect to a user endpoint on the Google Docs platform to perform API calls. Google Docs provide an exhaustive guide for integrating with Docs API.\nConfigure Authenticate API\nFollow these steps to configure Google docs integration for an Authenticated API.\n \n| Appsmith            | Google Docs                                                                                                                                                                                                                                                                                               | Value                                                                                                              |\n| ----------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------- |\n| URL                 | User Endpoint                                                                                                                                                                                                                                                                                                 | `https://docs.googleapis.com/`                                                                                         |\n| Authentication Type | NA                                                                                                                                                                                                                                                                                                            | `OAuth 2.0`                                                                                                            |\n| Grant Type          | NA                                                                                                                                                                                                                                                                                                            | `Authorization Code`                                                                                                   |\n| Access Token URL    | Token Endpoint                                                                                                                                                                                                                                                                                                | `https://oauth2.googleapis.com/token`                                                                                  |\n| Client ID           | Navigate to Google API Console >> Select Your Project that has Google Docs API Enabled >> Select Google API Docs on API/Service Details >> Click on Client Credentials >> Select the OAuth 2.0 Client >> Copy Client ID                                              | Copy the Client ID and add in the Client ID field.                                                                     |\n| Client Secret       | Navigate to Google API Console >> Select Your Project that has Google Docs API Enabled >> Select Google API Docs on API/Service Details >> Click on Client Credentials >> Select the OAuth 2.0 Client >>Copy Client Secret                  | Copy the Client secret and add in the Client secret field.                                                             |\n| Scopes              | Navigate to Google API doc >>Click the API you are integrating with for example (create) >> on the right Panel >> Try this method >> scroll to the show scopes link >> click on the link to reveal the scopes required for the API. | `https://www.googleapis.com/auth/documents``https://www.googleapis.com/auth/drive` |\n| Authorization URL   | Authorization Endpoint                                                                                                                                                                                                                                                                                        | `https://accounts.google.com/o/oauth2/auth`                                                                            |\n| Redirect URL        | Navigate to Google API Console >> Select Your Project that has Google Docs API Enabled >> Select Google API Docs on API/Service Details >> Click on Client Credentials >> Select the OAuth 2.0 Client >>Authorized redirect URIs                                     | Add the Redirect URL from Appsmith to the field and click the save button.                                             |\n:::tip\nYou can follow the step-by-step guide provided by Google to set up an OAuth 2.0 Client.\n:::\nKeep the other settings as is and click `Save & Authorize` button to create the Authenticated API. You\u2019ll be asked to sign in to your Google account and authorize the datasource. Once successfully authenticated, you\u2019ll navigate to the Appsmith Datasource screen with response status available in the address bar. A response status as success marks the successful configuration of the datasource.\nOnce the datasource is added, you can create queries and perform different actions with the google docs interface.\n:::info\nYou can also check out the How-To Guide- How to add OAuth2 Authorization for Integrating Google Sheets into Appsmith.\n:::\nIntegrate with Zoho Campaigns\nLet\u2019s look into another integration that you can do with Authenticated APIs. In this section, you\u2019ll be able to configure your Appsmith app to integrate with Zoho Campaigns.\nUser Endpoint\nYou\u2019ll have to connect to a user endpoint on the Zoho Campaigns platform to perform API calls. Zoho Campaigns provide an exhaustive developer guide for integrating with Campaign APIs.\nConfigure Authenticated API\nFollow these steps to configure Zoho Campaigns' integration for an Authenticated API.\n \n:::info\nThe Zoho APIs are location-specific, i.e., if your organization is located in the United States of America (US), then the API endpoints you use should be specific to the`.com` domain. For example, `https://campaigns.zoho.com/` will be used if your organization is located in the US. Whenever you configure the URL in the `Authenticated API`, verify the location of your organization.\n:::\n| Appsmith            | Zoho Campaigns                                                                                                                                                                        | Value                                                                        |\n| ----------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------- |\n| URL                 | User Endpoint                                                                                                                                                                             | `https://campaigns.zoho.in/api`                                                  |\n| Authentication Type | NA                                                                                                                                                                                        | `OAuth 2.0`                                                                      |\n| Grant Type          | NA                                                                                                                                                                                        | `Authorization Cod`e                                                             |\n| Access Token URL    | Token Endpoint                                                                                                                                                                            | `https://accounts.zoho.in/oauth/v2/token`                                        |\n| Client ID           | Navigate to Zoho API Console>> Select Your Application >> Select Client Secret Tab>> Copy Client ID                                                       | Add it to the Client ID field on Appsmith.                                       |\n| Client Secret       | Navigate to Zoho API Console>> Select Your Application >> Select Client Secret Tab>> Copy Client Secret                                                   | Add it to the Client secret field on Appsmith.                                   |\n| Scopes              | Navigate to the Zoho Campaign guide and click on the API you want to integrate with and check the scope required. | `Zohocampaigns.campaign.ALL`                                                     |\n| Authorization URL   | Authorization Endpoint                                                                                                                                                                    | `https://accounts.zoho.in/oauth/v2/auth`                                         |\n| Redirect URL        | Navigate to Zoho API Console>> Select Your Application >> Select Client Details>> Authorized Redirect URIs                                                | Add the Redirect URL from Appsmith to the field and click the Update button. |\n:::info\nYou can follow the step-by-step guide provided by Zoho to Register the Client.\n:::\nOnce you make changes to the above fields, click `Save & Authorize` button to create the Authenticated API. You\u2019ll be asked to authorize the datasource by signing into your Zoho Account. You\u2019ll be navigated to the Appsmith Datasource screen with a response status as success available in the address bar on successful authentication.\nOnce the datasource is added, you can create queries and perform different actions with the Zoho Campaign interface.\nAdditional Settings\nApart from the required settings, there are some optional settings which have default values set, and you can change the configuration if the need be:\nCustom Authentication Parameters\nIf your authorization server needs you to send some custom query parameters as part of access token request, you can add those here. You can add one or more parameters based on your needs. For example, your API needs a parameter `showPrompt` that is sent to authorization server and based on it your API logic either presents user with a prompt to take the consent or the prompt is not shown as the consent is already recorded. In such cases, you configure the `showPrompt` parameter as a custom parameter.\n\nClient Authentication\nIf your APIs need client credentials to be sent along then you can use client authentication field. You can either choose to send the client credentials as part of:\n\n\nBasic authorization header by selecting Send as Basic Auth Header.\nBody in the form of client credentials by selecting Send client credentials in body.\n\nAdvanced Settings\nThere are some advance settings that you can configure as part of your Authenticated API.\nSend Scope with Refresh Token\nWith this configuration you can choose to send the scope configured for the API along with a refresh token. By default, the setting is turned off. You can turn on the settings by selecting Yes.\n\nSend Client Credentials with (on Refresh Token)\nYou can choose to send the client credentials along with refresh tokens by configuring this field. You can either choose to send the client credentials as part of header by selecting header, or as part of body by selecting body.\n",
    "tag": "appsmith"
  },
  {
    "title": "Client Credentials",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication/client-credentials.md",
    "content": "Client Credentials\nThe client credentials grant is typically used for server-to-server communication. This means that this type of data source will not require intervention from the user once configured. Appsmith safely encrypts your credentials and reuses these credentials for all the API requests made using this data source.\n\nThe fields relevant to this grant type are as follows:\n\n`Add Access Token To`: This field configures the field in which the access token information will be sent in the API request. (Query parameter or Header).\n`Header Prefix`: In case of sending the access token as an Authorization header, you can configure the prefix to be used using this field.\n`Access Token URL`: This is the endpoint on the authentication server that Appsmith should hit to exchange the authorization code for an Access Token.\n`Client ID`: The client identifier issued to the client during the application registration process\n`Client Secret`: The client secret issued to the client during the application registration process. This field is encrypted and stored in the Appsmith database. To avoid any security threats over the network, Appsmith does not allow users to view the client secret after the data source is saved.\n`Scope(s)`: The scope of the access request. It may have multiple comma-separated values.\n\n:::note\nIn case you feel like there may have been a data breach in your infrastructure, you can simply invalidate your client credentials at the authorization server to immediately revoke Appsmith's access to your resources.",
    "tag": "appsmith"
  },
  {
    "title": "OAuth 2.0",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/core-concepts/connecting-to-data-sources/authentication/authentication-type/oauth2-authentication",
    "content": "OAuth 2.0\nOpen Authentication (OAuth 2.0) is an open-standard authorization protocol that allows you to share information between services without revealing or exchanging your password. It is a widely used standard by developers to exchange information securely and thus provides secure designated access to the applications. For example, you can tell GitHub to give access to Appsmith to merge or create pull requests on your behalf without sharing your password. Thus, giving you the flexibility to allow the interaction between applications without exposing your password.\nBy using OAuth 2.0, you minimize the security risk. It ensures that even if the associated application is breached, your password is safe as it was never exposed.\nHow does OAuth 2.0 work?\nOAuth 2.0 is about authorization, asking for the permissions that govern the access. OAuth2.0 is a simplified redesigned version of OAuth 1.0. `OAuth 2.0` is faster and easier to implement and use.\nThere are four main participants in an OAuth 2.0 workflow: Resource Owner, Client, Authorization Server, and Resource Server. Using the OAuth 2.0 workflow, a resource owner that is a user or a system would like to authorize a client to access protected resources that can be accessed using an access token. A client asks for an access token from an authorization server. A client uses the access token and requests access from the resource server. A resource server validates the access token and returns the requested resource.\nFor example, John (resource owner) wants Notion (client) to post tweets on his behalf on Twitter. Twitter (authorization and resource server) generates a key and a secret for Notion to do the job. Notion uses the key and secret to create tokens and post the tweets on John\u2019s behalf.\n:::info\nOAuth 2.0 is not backward compatible. If your app is OAuth 1.0 or 1.1, you\u2019ll not be able to use OAuth 2.0 for integration.\n:::\nAuthentication Type - OAuth 2.0\nFor OAuth 2.0 integration, select `OAuth 2.0` from the available options.\n\nAuthentication Type\nYou can connect to your OAuth 2.0 APIs using Authenticated APIs on Appsmith. You select the Authentication type as OAuth 2.0. You can see in the below screenshot that you have the following available grant types to choose from.\n\nGrant Types\nAn authorization grant type is a secured representation of the owner\u2019s authorization presented in exchange for an access token.\n \nFor OAuth 2.0 on Appsmith, you can use the below grant types to communicate with your APIs. Navigate to the below grant types for their specific configurations.\n\nAuthorization Code\nClient Credentials\n",
    "tag": "appsmith"
  },
  {
    "title": "Integrations",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/integrations.md",
    "content": "\nsidebar_position: 4\nIntegrations\nAppsmith provides native integrations with many databases. Besides, Appsmith can also seamlessly connect with most other tools through the RESTful API plugin.\n\n\n\n\n\n \nActiveCampaign offers software for customer experience automation. \n\nView Tutorial \n\n\n\n\n \nAPITemplate.io allows you to auto-generate images and PDF documents. \nView Tutorial \n\n\n\n\n\n \nAppwrite is a self-hosted BaaS platform that provides developers with all the  core APIs required to build any application.\nView Tutorial \n\n\n\n\n\n\n \nBrex offers business credit cards and cash management accounts to tech companies. \n\nView Tutorial \n\n\n\n\n \nCube.js is headless business intelligence for building data applications.  \nView Tutorial \n\n\n\n\n\n \nFauna is a distributed document-relational database delivered as a cloud API.\nView Tutorial \n\n\n\n\n\n\n \nHarperDB is a distributed database that supports key-value, document store, and traditional SQL. \n\nView Tutorial \n\n\n\n\n \nHasura gives you instant GraphQL & REST APIs on new & existing data sources.  \nView Tutorial \n\n\n\n\n\n \nMariaDB is a community-developed, commercially supported fork of the MySQL RDBMS.\nView Tutorial \n\n\n\n\n\n\n \nMixpanel is a leading product analytics software company. \n\nView Tutorial \n\n\n\n\n \nn8n is a free and source-available workflow automation tool.  \nView Tutorial \n\n\n\n\n\n \nNotion is a project management and note-taking software.\nView Tutorial \n\n\n\n\n\n\n \nReply.io is a sales engagement platform that automates multichannel outreach. \n\nView Tutorial \n\n\n\n\n \nRowy is a low-code platform for building your product backend, all in the browser.  \nView Tutorial \n\n\n\n\n\n \nShopify is an e-commerce platform for online stores and retail point-of-sale systems.\nView Tutorial \n\n\n\n\n\n\n \nSlack is a messaging program designed specifically for the workplace. \n\nView Tutorial \n\n\n\n\n \nSupabase is an open-source Firebase alternative.  \nView Tutorial \n\n\n\n\n\n \nXano is the fastest no-code backend development platform.\nView Tutorial \n\n\n\n\n\n\n \nZapier allows end users to integrate the web applications they use and automate workflows. \n\nView Tutorial \n\n\n\n\n\n",
    "tag": "appsmith"
  },
  {
    "title": "Sample Apps",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/sample-apps.md",
    "content": "\ndescription: >-\n  Sample Apps show examples of concepts and features in Appsmith that can be\n  followed to create your own apps. All sample apps can be forked into your\n  account so that they can be viewed in the Edit mode\nsidebar_position: 3\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nSample Apps\n\n\nTable\n\n\n\nShow Data in Table - Query\n \nThis app shows you how to bind data to a Table Widget from an API and a database query. Datasource - MongoDB \n\nView App \n\n\n\nShow Data in Table - JSObject\n\nThis app shows how to bind data to a Table Widget from a JSObject. Datasource - NA\nView App \n\n\n\n\n\n\nServer-side Pagination\n \nThis app shows how to implement server-side pagination on the Table widget. Datasource - MongoDB, REST API, PostgreSQL, Google Sheets \n\nView App \n\n\n\nServer-side Search\n\nThis app shows how to implement server-side search on the Table widget. Datasource - PostgreSQL\nView App \n\n\n\n\n\n\nExternal Filters for Table\n \nThis app shows how to create an external filter for your table data. Datasource - MongoDB, PostgreSQL \n\nView App 1  \u00a0 \nView App 2 \n\n\n\nRow Selection Action\n\nThis app shows how to trigger an action on the row selection of the Table widget. Datasource - PostgreSQL\nView App \n\n\n\n\n\n\nCell Background Colour\n \nThis app shows how to change a table cell background colour conditionally. Datasource - MongoDB \n\nView App \n\n\n\nEditable Table - Save Row\n\nThis app shows how to use the Table widget's inline editing feature to make changes directly in the table. Datasource - PostgreSQL\nView App \n\n\n\n\n\n\nShow Data from Multiple Queries\n \nThis app shows how to conditionally show data in the table from different queries depending on the queryParams passed to URL. Datasource - PostgreSQL, MongoDB \n\nView App \n\n\n\nPolling Data in real time\n\nThis app shows how to use the interval functions to update data in a table periodically. Datasource - PostgreSQL\nView App \n\n\n\n\n\n\nExternal Search\n \nThis app shows how to implement external search capability in a Table widget. Datasource - MongoDB \n\nView App \n\n\n\nControl Column Visibility\n\nThis app shows how to show or hide columns of a table widget programmatically by clicking a button. Datasource - PostgreSQL\nView App \n\n\n\n\n\n\nReset Table\n \nThis app shows how to reset the Table widget using the resetWidget() function of the Appsmith Framework. Datasource - PostgreSQL \n\nView App \n\n\n\n\nInput\n\n\n\nInput Data Validation\n \nThis app shows how to validate the form\u2019s data for various input widget types before submission. Datasource - NA \n\nView App \n\n\n\nAdd Input Fields Dynamically\n\nThis app shows how to insert input fields with a button click dynamically. Datasource - NA\nView App \n\n\n\nButton\n\n\n\nControl Widget Visibility\n \nThis app demonstrates how to show or hide a widget on a button click. Datasource - NA \n\nView App \n\n\n\nReset Multiple Widgets\n\nThis app shows how to reset multiple widgets with the click of a button. Datasource - NA\nView App \n\n\n\n\n\n\nChange Button Colour\n \nThis app shows how to enable users to change the colour of a button dynamically. Datasource - PostgreSQL \n\nView App \n\n\n\n\nText\n\n\n\nChange Widget Properties\n \nThis app shows how to update the value property of the Text widget dynamically. Datasource - PostgreSQL \n\nView App \n\n\n\nDownload contents of Text widget\n\nThis app shows how to download the contents of a Text widget as a .txt file at the click of a button. Datasource - NA\nView App \n\n\n\nForm\n\n\n\nDuplicate Record Check\n \nThis app demonstrates how to validate a form only if the entered record isn't present in the database. Datasource - PostgreSQL \n\nView App \n\n\n\n\nList\n\n\n\nShow Data in List\n \nThis app shows how to bind data to a list widget from a query. Datasource - MongoDB \n\nView App \n\n\n\nServer-side Pagination\n\nThis app shows how to implement server-side pagination on the List widget. Datasource - MongoDB\nView App \n\n\n\n\n\n\nList Item Click Action\n \nThis app shows how to trigger an action when a list item is selected. Datasource - MongoDB \n\nView App \n\n\n\n\nChart\n\n\n\nCreate Chart\n \nThis app shows how to build different charts and customise them using the Chart widget. Datasource - MongoDB \n\nView App \n\n\n\nPie Chart\n\nThis app shows how to work with Pie charts using the chart widget and customise them using JavaScript. Datasource - MongoDB\nView App \n\n\n\n\n\n\nCustom Chart (Fusion Chart)\n \nThis app shows how to build custom charts using the fusion charts library and customise them using JavaScript. Datasource - MongoDB \n\nView App \n\n\n\n\nSelect\n\n\n\nReset Select Widget\n \nThis app shows how to use the Select widget to filter a table and to reset the Select widget to use the default value. Datasource - PostgreSQL \n\nView App \n\n\n\nServer-side Filtering\n\nThis app shows how to implement server-side filtering on the Select widget. Datasource - PostgreSQL\nView App \n\n\n\n\n\n\nAdd List Options Dynamically\n \nThis app shows how to add options to a select widget dynamically. Datasource - PostgreSQL \n\nView App \n\n\n\n\nModal\n\n\n\nOpen Modal\n \nThis app shows how to open a modal using openModal() function of the Appsmith framework. Datasource - NA \n\nView App \n\n\n\nClose Modal\n\nThis app shows how to close a modal using closeModal() function of the Appsmith framework. Datasource - NA\nView App \n\n\n\nDatepicker\n\n\n\nFilter Data Between Dates\n \nThis app shows how to use the Datepicker widget to filter data for a specific date range. Datasource - MongoDB \n\nView App \n\n\n\nSet Min and Max Date\n\nThis app shows how to set minimum and maximum dates in the DatePicker widget. Datasource - NA\nView App \n\n\n\n\n\n\nDate Calculations\n \nThis app shows how to perform different date calculations. Datasource - NA \n\nView App \n\n\n\nDate Formatting\n\nThis app shows how to format dates using Moment.js Datasource - NA\nView App \n\n\n\n\n\n\nSet and Clear Date\n \nThis app shows how to set and clear the date on a Datepicker widget with a button click. Datasource - NA \n\nView App \n\n\n\n\nAudio\n\n\n\nPlay Audio\n \nThis app demonstrates how to programmatically play audio by selecting the audio from a list of options. Datasource - NA \n\nView App \n\n\n\n\nCamera\n\n\n\nGet Base64 string of image\n \nThis app shows how to extract the Base64 encoded string of an image captured on the Camera widget. Datasource - PostgreSQL \n\nView App \n\n\n\nGet image URL\n\nThis app shows how to extract the Image URL of an image captured on the Camera widget. Datasource - NA\nView App \n\n\n\n\n\n\nInsert Image into Database\n \nThis app shows how to get the Base64 string of an image captured on the Camera widget and insert it into a database. Datasource - MongoDB \n\nView App \n\n\n\n\nCheckbox\n\n\n\nUsing Checkbox in Queries\n \nThis app shows how to use the value of a Checkbox in a query to display data conditionally. Datasource - PostgreSQL \n\nView App \n\n\n\n\nFilepicker\n\n\n\nUpload File\n \nThis app shows how to upload a file using the Filepicker widget and get the Base64 raw encoding of the uploaded file. Datasource - NA \n\nView App \n\n\n\nUpload File to Cloudinary\n\nThis app shows how to upload a file to Cloudinary using the FilePicker widget. Datasource - REST API\nView App \n\n\n\nIFrame\n\n\n\nEmbed HTML\n \nThis app shows how to embed HTML using an IFrame widget. Datasource - NA \n\nView App \n\n\n\n\nMap\n\n\n\nDefault Map Markers\n \nThis app shows how to set the default markers in a Map widget. Datasource - REST API \n\nView App \n\n\n\n\nMultiselect\n\n\n\nInsert Multiselect Values into DB\n \nThis app shows how to insert values from a Multiselect widget into separate rows in a Google Sheet datasource. Datasource - Google Sheets \n\nView App \n\n\n\nSet Values on Multiselect\n\nThis app shows how to dynamically set values on a Multiselect widget with a button click. Datasource - NA\nView App \n\n\n\nProgress\n\n\n\nUse Progress Bar\n \nThis app shows how to use the Progress Bar widget to display the progress of work in a step format. Datasource - NA \n\nView App \n\n\n\n\nDocument Viewer\n\n\n\nDisplay Base64 content\n \nThis app shows how to convert text to base64 format and display it in the Document Viewer widget. Datasource - NA \n\nView App \n\n\n\n\nUI components\n\n\n\nCustom Header and Footer\n \nThis app shows how to display app header and footer components. Datasource - NA \n\nView App \n\n\n\nSidebar Navigation\n\nThis app shows how to display sidebar navigation on the app. Datasource - NA\nView App \n\n\n\n\n\n\nImage Carousel\n \nThis app shows how to display an image carousel on the app. Datasource - NA \n\nView App \n\n\n\nLoading Till Page is Ready\n\nThis app demonstrates how to have a loading screen while waiting for the page to show data. Datasource - NA\nView App \n\n\n\n\n\nQueries\n\n\n\nPass Parameters to Query\n \nThis app shows how to pass parameters to a query in the run() function and how to access these parameters in the query. Datasource - PostgreSQL \n\nView App \n\n\n\nPass Query Parameters to URL\n\nThis app shows how to pass query parameters into the URL path and how to access them in a query. Datasource - PostgreSQL\nView App \n\n\n\n\n\n\nRun Query in JSObject\n \nThis app shows how to execute queries inside a JSObject. Datasource - MongoDB, PostgreSQL, REST API \n\nView App \n\n\n\nRun Queries in Sequence\n\nThis app shows how to run queries in a sequence. Datasource - PostgreSQL, MongoDB\nView App \n\n\n\n\n\n\nRun Multiple Queries\n \nThis app shows how to run multiple queries in parallel. Datasource - PostgreSQL \n\nView App \n\n\n\n\nREST API\n\n\n\nDynamic API Headers\n \nThis app shows how to specify dynamic headers for a REST API datasource. Datasource - REST API \n\nView App \n\n\n\n\nPostgreSQL\n\n\n\nBulk Data Operations\n \nThis app shows how to perform bulk CRUD operations on queries. Datasource - PostgreSQL \n\nView App \n\n\n\n\nMongoDB\n\n\n\nMongoDB RAW Query\n \nThis app shows how to write a RAW MongoDB query to update the document. Datasource - MongoDB \n\nView App \n\n\n\nBulk Data Operations\n\nThis app shows how to perform bulk CRUD operations on queries. Datasource - MongoDB\nView App \n\n\n\nGraphQL\n\n\n\nFetch Data\n \nThis app shows how to create a GraphQL query to fetch data using REST API. Datasource - REST API \n\nView App \n\n\n\n\nSnowflake\n\n\n\nBulk Data Operations\n \nThis app shows how to perform bulk CRUD operations on queries. Datasource - Snowflake \n\nView App \n\n\n\n\n\n\nAppsmith Framework\n\n\n\nLocal Storage\n \nThis app shows how to use Appsmith storage to store and display values. Datasource - NA \n\nView App \n\n\n\nNavigate to Page/External Link\n\nThis app shows how to navigate to a different page or an external link using the navigateTo() function. Datasource - NA\nView App \n\n\n\n\n\n\nPersistent vs Session Storage\n \nThis app shows the difference between persistent vs session storage. Datasource - NA \n\nView App \n\n\n\nRemove Items from Storage\n\nThis app shows how to add and remove items from Appsmith Storage. Datasource - NA\nView App \n\n\n\n\n\n\nPass Arguments to Function\n \nThis app shows how to pass arguments to a JS function defined in a JSObject. Datasource - NA \n\nView App \n\n\n\nJS Async-Await\n\nFetch Data using async JS function. Datasource - MongoDB\nView App \n\n\n\n\n\n\nJS Promises (Callbacks)\n \nFetch Data from JS function & handle promise with callbacks. Datasource - MongoDB \n\nView App \n\n\n\nJS Promises (Chaining)\n\nFetch Data from JS function & handle promise with chaining. Datasource - MongoDB, PostgreSQL\nView App \n\n\n\n\n\n\nCurrent Date and Time\n \nThis app shows how to display the current date and time. Datasource - NA \n\nView App \n\n\n\nRefresh Page\n\nThis app shows how to refresh the entire page at the click of a button or when selecting a checkbox. Datasource - NA\nView App \n\n\n\n\n\n\nHide Page from Topbar\n \nThis app shows how to hide the pages of an app and how to navigate to pages only through button clicks. Datasource - NA \n\nView App \n\n\n\nReset Multiple Widgets\n\nThis app shows how to reset multiple widgets using JSObject. Datasource - NA\nView App \n\n\n\n\n\nJS & utilities\n\n\n\nMerge Data from Multiple Queries\n \nThis app shows how to combine data from two queries using a JSObject. Datasource - PostgreSQL \n\nView App \n\n\n\nMerge CSV Data\n\nThis app shows how to merge the data from two CSV files by column and display it in a Table widget. Datasource - NA\nView App \n\n\n\n\n\n\nConvert CSV to JSON\n \nThis app shows how to convert a CSV file into an array of JSON objects. Datasource - NA \n\nView App \n\n\n\nUpload CSV File\n\nThis app shows how to upload CSV data and display it in a Table widget. Datasource - NA\nView App \n\n\n\n\n\n\nParse XML Data\n \nThis app shows how to parse XML data using the xmlParser library. Datasource - REST API \n\nView App \n\n\n\nTrigger Multiple Actions\n\nShows how to trigger multiple actions inside JSObject. Datasource - PostgreSQL\nView App \n\n\n\n\n\n\nBasic HTML Editor\n \nThis app shows how to create a basic HTML editor using a Tabs widget, an Input widget, and a Text widget. Datasource - NA \n\nView App \n\n\n\nDownload PDF from URL\n\nThis app shows how to download a PDF file from a given URL. Datasource - REST API\nView App \n\n\n\n\n\n\nPDF Generator\n \nThis app shows how to generate and download a PDF using third-party tools. Datasource - REST API \n\nView App \n\n\n\nDecode HTML Entities\n\nThis app shows how to convert HTML entities to characters using JavaScript. Datasource - NA\nView App \n\n\n\n\n\n\nSimple Calculator\n \nThis app demonstrates - how to build a simple calculator using Button Groups, JSObject, and a Text widget. Datasource - NA \n\nView App \n\n\n\nSimple Counter\n\nThis app demonstrates - how to create a simple counter using buttons and the Appsmith Store. Datasource - NA\nView App \n\n\n\n\n\n\nDisplay Asset from URL\n \nThis app shows how to display an asset (image/video) using the given URL. Datasource - NA \n\nView App \n\n\n\nSequential ID Generator\n\nThis app shows how to generate custom sequence-based IDs for table data using JavaScript. Datasource - PostgreSQL\nView App \n\n\n\n\n\n\nUUID Generator\n \nThis app shows how to generate UUIDs using JavaScript. Datasource - PostgreSQL \n\nView App \n\n\n\nCustom Time Picker\n\nThis app shows how to build a custom time picker. Datasource - NA\nView App \n\n\n\n\n\nHow to do X on Appsmith\nLive streams and apps from the community calls with answers to frequently asked questions on Discord and Intercom.\nSession #1: video link, Template Link | Topics covered: combining multiple queries, dynamic queries, switching between tabs, JS promises, and dynamically adding widgets.",
    "tag": "appsmith"
  },
  {
    "title": "Tutorials",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/tutorials",
    "content": "\ndescription: This tutorial will familiarise you with building a simple app on Appsmith\nsidebar_position: 1\n\nTutorials\nTutorial 1: Review Moderator Dashboard\nLearn to build a feature-complete internal application on top of a real business dataset using Appsmith. The application is a multi-page dashboard that lets you browse through all the business information and moderate individual reviews provided by users.\n\nReview Moderator Dashboard\n\nTutorial 2: Store Catalog Manager\nLearn to build a feature-complete Grocery Catalog application for an online grocery store called Oakry with Appsmith. The application we will be building is a multi-page dashboard used by catalog managers to browse through products, create, and update them.\n\nBuilding a Store Catalog Manager\n",
    "tag": "appsmith"
  },
  {
    "title": "Creating Interactive Views",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/tutorials/building-a-store-catalog-manager/creating-interactive-views.md",
    "content": "\nsidebar_position: 3\ndescription: >-\n  In this part of the tutorial, you'll learn how to build an interactive\n  UI using widgets like buttons, lists, charts, and more.\n\nCreating Interactive Views\nBy now, you've built a multi-page tool that allows you to view all products and add new products to the catalog. The following tutorial walks you through building the functionality to edit a product. During this, you'll learn to:\n\nAccess one widget's state from another\nSet up an API to update a product\nExecute multiple actions on a single event\n\nAccessing properties between widgets\nTo begin implementing the \"Edit Product\" functionality, let's configure the table properties to add an Edit button to each row. Upon clicking the Edit button, a form modal will open to allow editing the product's details in the corresponding table row.\n\nOpen ProductsTable's properties.\nClick on ADD A NEW COLUMN under Columns.\nClick the ( \u2699\ufe0f ) icon to access column settings.\nChange the column type to Button. You may want to rename this column within the table's properties window.\nLabel the button as Edit under button properties in the column's settings.\n\nNow, the ProductsTable should look something like this:\n\nThere are now buttons in each row of the table, each corresponding to that row's product. Let's configure these buttons to open a modal for editing the items:\n\nOpen ProductsTable's properties.\nGo to the button column's settings by clicking the gear ( \u2699\ufe0f ) icon beside it.\nChoose the action Open Modal from the onClick dropdown.\nChoose New Modal.\nRename the new modal to EditProductModal using its properties.\nRename the modal's title to Edit Product.\nDelete the two default buttons at the bottom of the modal, called \"Reset\" and \"Submit\". You can do this with the trash can icon at the top of each widget's properties, or by selecting the widgets and hitting the \"Delete\" keyboard key.\nDrag and drop a new Form Widget into the modal window, and delete the form's default text widget (since the modal already has our title).\nRename the form's \"Submit\" button to EditConfirmButton.\n\nAfter those steps, your new modal should look like this:\n\n:::info\nIf the modal window gets closed at any point, you can access it again in the editor by looking in the Explorer pane to the left of the screen, finding it in the Widgets tree, and clicking its name to open it back up.\n:::\nClick on the Edit button of any row to ensure that the EditProductModal opens as intended. After that is working, let's populate the form with widgets! It should be built such that:\n\nIt looks exactly like the AddProductForm\nIts properties are configured in the same way as that of AddProductForm\n\nClick here if you'd like to refer back to the previous instructions for creating the AddProductForm.\n:::info\nNaming:\nThe names of widgets inside your EditProductModal are the same as that of the names of widgets inside AddProductForm. This is valid because they both belong to different parent pages. Names only need to be unique within the page scope; a widget and an API within the same parent page can't share the same name.\n:::\nLike AddProductForm, all the form-fields in EditProductModal are empty. However, to edit a product, you'll want them to be pre-filled with the values of the product that you want to update. This means that:\n\nProductNameInput should show the productName value of the triggered row.\nMrpInput should show mrp value of the triggered row.\nCategorySelect should show the category value of the triggered row.\n\nLet's configure those widgets!\nTo set a default value of ProductNameInput:\n\nOpen properties of ProductNameInput.\nSet Default Text to `{{ProductsTable.triggeredRow.productName}}`.\nVerify that the Evaluated Value of the property matches the corresponding value from the triggered row.\n\nAbove, you just wrote JavaScript to set the value of Default Text using data from `ProductsTable.triggeredRow`, which has all the column values of the row you wish to view/perform action on. By referencing `productName` on it, you're accessing the value of productName column. By setting Default Text to this, you're pre-filling the form with this value.\nFrom within the form, you've accessed data of the table row via its `triggeredRow` property. To see the exposed properties you can access for any given widget, select the Properties section of its entry in the Widget documentation.\nFinally, note that since the scope of a widget is limited to its parent page, a widget shares its properties only with other widgets, queries, and APIs defined within the same page. For example, in this case, `ProductsTable.triggeredRow` can be accessed only in other widgets, queries, and APIs of ProductListPage. `ProductsTable.triggeredRow` can't be accessed from any widget, query, or API of AddProductPage.\n:::info\nAccessing data across pages:\nThere are two ways to access properties of a widget or results of an API/DB Query from another page:\n\nStore the data in your browser cache using the storeValue function so that it's available for accessing even when the user moves to another page in your app.\nPass the data as a query param in the URL of the page you redirect the user to. This can be done using the navigateTo function.\n:::\n\nNow set a default value for MrpInput:\n\nOpen properties of MrpInput.\nSet Default Text to `{{ProductsTable.triggeredRow.mrp}}`.\nVerify that the Evaluated Value of the property matches the value of the current row.\n\nAnd for CategorySelect:\n\nOpen CategorySelect's properties.\nSet Default Option to `{{ProductsTable.triggeredRow.category}}`.\nVerify that the Evaluated Value of the property matches the value in the triggered row.\n\nGreat, your form should now pre-fill with the selected product's details. Try it out to make sure that everything gets filled correctly from the selected table row.\nWriting your first API\nYour edit form is ready to take user input. Next, you would have to configure its Confirm button to trigger the update of the product via an API. It involves two steps:\n\nSetting up the required API.\nWiring the form-submit button to initiate the API query.\n\nIn this section, you'll set up the API.\nYou'll use the endpoint below to update a product:\n`PUT https://mock-api.appsmith.com/products/:id`\nThis is a mock API exposed by Appsmith to help you learn API basics. It doesn't require any authentication. It accepts JSON input and responds with JSON output. To set it up on your app:\n\nNavigate to ProductListPage \u2192 Datasources.\nClick + Create New.\nChoose Create new API.\nYou'll see a Postman-like interface.\nRename the API to UpdateProductApi.\nSet the request method to PUT.\nCopy-paste the below in URL `https://mock-api.appsmith.com/products/{{ProductsTable.triggeredRow.id}}`.\nCopy-paste the query below into the Body section.\nRun the API.\n\n`{\n    \"productName\" : \"{{ProductNameInput.text}}\",\n    \"mrp\" : \"{{MrpInput.text}}\",\n    \"category\" : \"{{CategorySelect.selectedOptionValue}}\"\n}`\n\nBy using the mustache template in the URL (step 7), you're providing the ID of the product to be updated. To build the request body, you're writing JavaScript within mustaches to provide the new values for the product details.\n:::info\nA word on sharing widget properties:\nHere, you are accessing widgets' properties from within an API query. This is in line with what you learned in the previous sections - that you can access properties of a widget from other widgets, APIs, and DB Queries. Regardless of where you access properties of a widget from, you use the same naming syntax to refer to the objects. That's, you would access a value by its`{{<widgetname>.<property_name>}}` no matter where you are in the editor.\n:::\nConfiguring multiple actions on UI events\nThe API to update a product is ready! In this section, you'll bind the Confirm button of EditProductModal to run UpdateProductApi.\n\nOpen EditProductForm's properties.\nRename label to Update.\nGo to Events \u2192 onClick \u2192 Execute Query.\nChoose UpdateProductApi.\nGo to `onSuccess`.\nChoose Execute Query \u2192 ProductsQuery.\nGo to `onError`.\nChoose Show Message.\nSet the Message to Product update failed!.\nSet Type to Error.\n\nLet's see what you did there:\n\nYou configured the Confirm button to run UpdateProductApi.\nNow, you want the ProductsTable to show the updated list of products after the new product gets added successfully. For that, you set the `onSuccess` event of the button to execute ProductQuery; if the UpdateProductApi runs successfully, ProductQuery would be executed. Here you're following the reactive programming paradigm of Appsmith: You are triggering an auto update of the data displayed by the ProductsTable by calling `ProductsQuery.run()`.\nYou set the `onError` event of the button to show an alert message so that if UpdateProductApi returns an error, an alert message would be displayed.\n\nTry to edit a product, and click Confirm to verify that it works - You should now see success/error notifications in the top right of the screen.\n:::info\nDue to the internal configuration of the mock database and API, you might not see the changes from your PUT request reflected in the table. However, if your app returns a success message, then don't worry - you did it correctly!\n:::\nCurrently, the form modal always stays open after submission; let's configure it to close the form if the update is successful. On error, we'll keep the form open for making further edits.\nTriggering multiple actions on a UI event\nTo bind multiple actions to a button event, you would have to write some JavaScript:\n\nClick on the JS button of the onClick field in EditConfirmButton's properties.\nThe onClick field then converts to JavaScript. Paste in the following:\n\n`javascript\n{{\n  UpdateProductApi.run(\n  () => { \n          ProductsQuery.run(); \n          closeModal('EditProductModal')\n        },\n  () => showAlert('Product update failed!'))\n}}`\nThis is similar to what you learned in part 2 about using JavaScript to define widget behavior. In Part 2, you wrote JavaScript to trigger one action `onSuccess` of onClick - but here, you're configuring two actions. The first argument to the `run()` method is an anonymous JavaScript function that triggers two actions in the `onSuccess` case of onClick:\n\nExecute the ProductQuery.\nClose the modal.\n\nNote that since these actions happen asynchronously, they would all run in parallel. You can trigger as many actions as you want within `onSuccess` and `onError` by wrapping them within an anonymous function.\nTry to edit a product again and verify that the form-submit works as expected.\n:::info\nGUI vs JavaScript: What to use when?\nYou'll often be able to customize app behavior more finely by writing JavaScript, as compared to only using the GUI.\nFor example, configuring multiple actions to be run in `onSuccess` is supported only via JavaScript, because it's easier to write code for it than it's to configure by using the GUI.\nSimilarly, to configure conditional behavior, writing ternary conditions in JavaScript is easier and more extensible; hence the GUI doesn't provide for it.\nWe recommend that you spend some time fiddling with JavaScript on Appsmith!\n:::\nSharing your app\nNow deploy your app for the final time.\nOnce deployed, you can share your deployed application with both internal and external users:\n\nClick on the \"Share\" button on the top right.\nShare the application's URL with the user, OR\nInvite a user by adding their email, selecting an appropriate role for them, and clicking INVITE.\n\nYou can also make the application public, in which case, anyone with the URL to the application can view it without needing to sign in. (Read more about access control)\nWhat's next?\nThe basic Catalog Dashboard is now up and running. This also marks the end of the beginner tutorial. At this point, you should know enough to start a project of your own and start playing around. The following resources comes in handy as you need to learn new tricks:\n\nCore Concepts\nWidgets\n",
    "tag": "appsmith"
  },
  {
    "title": "Using Forms",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/tutorials/building-a-store-catalog-manager/using-forms.md",
    "content": "\nsidebar_position: 2\nUsing Forms\nIn the first part of this tutorial, you've created a single page app to view products for Oakry. In this part, you'll extend the app to a multi-page app, where you'll be creating a new page, and learn how to:\n\nCreate a form to accept the new product's details from a user\nAdd validations to the form fields\nAccess widgets state in queries to insert dynamic input\nBind the form's submit button to trigger the addition of a new product\n\nWe'll also add a button on the ProductListPage that takes us to our new page and opens this form. Let's get started!\nCreating your first form\nFirst, to add new products to the catalog, you'll need to create a new form widget. To keep things more organized, do this on a new page to avoid affecting the catalog page. Follow the below steps:\n\nCreate a new Page by clicking on the \"+\" icon next to the Pages directory.\nRename the page to `NewProductPage`\nFind and add a new Form widget by clicking on the \"+\" icon under the Widget directory to the page.\nRename the form to `AddProductForm`\nYour new Form will have a few widget components automatically: A text widget that acts as a title, and two buttons near the bottom.\nClick on its text widget that currently says \"Form\" and update its Text property to `Add a Product \\(Oakry\\)`.\nFind the button at the bottom that has the label \"Submit\", and rename that widget to `SubmitButton`.\n\nAdding Input Widgets to the Form\nThe created form does not have any input fields. Now, add a new input widget onto the empty form (AddProductForm) by simply selecting it and dropping it onto the canvas. Rename the input widget to `ProductNameInput`.\n:::info\nHaving trouble dragging your Input widget onto your Form widget? Try dragging it more quickly! Widgets will automatically adjust their size and position to make room for any new widgets you drag onto the canvas. But if you drag them quickly, you can place things inside of certain widgets like the Form and Container. To learn more about how it works, take a look at this demonstration!\n:::\nBelow is a screenshot of how your form should look:\n\nThe input widget begins with a Label field, but we can also use a separate text widget to have a bit more control over its placement. Let's add a text widget to the left of ProductNameInput. Then, open the new text widget's properties and update its Text property to `Product Name`: to change the display text. You can remove the input widget's label by clearing out the Label field in its properties.\nAt the same time, let's go ahead and give the `AddProductForm` a proper title: Find its text widget label at the top of the form and set its Text property to `Add A Product:`.\nConfiguring Input Widgets\nYou can also configure input fields on Appsmith. For example, you can set data types, placeholders, custom error messages, and more. Now, open the properties for `ProductNameInput` and set the following:\n\nThe Data Type property should be set to `Text`.\nMake the input required by toggling the Required switch.\n\nThe data type property sets the allowed data-type of input -- in this case, the user may only provide text. However, based on your use cases you can change it to a number, password, or an email. The Required switch makes the field mandatory.\n:::info\nThe form-submit button is automatically disabled if no input is provided for a mandatory field. To check out more properties and configurations, check out the docs here.\n:::\nAdding a Select Widget to the Form\nLet's add another field to the `AddProductForm` that enables users to choose the product category. For this, you'll have to drag and drop a Select widget and rename it to `CategorySelect`. Also, to keep the form clean, add a text widget to use as a label next to `CategorySelect`. Set the text widget's Text property to `Category:`.\nAs you look at the `CategorySelect` widget, you'll see some default options already added to it. Follow the steps below to set these options as necessary for our Oakry catalog:\n\nOpen `CategorySelect`'s properties window.\nClick on the Options field. The value in this field is used to specify the options of the Select widget.\nSee that the Expected Structure is `Array<{ label: string, value: string }>`\nNow update the options by copy-pasting the snippet below into the `Options` field.\n\n`javascript\n[\n  {\n    \"label\": \"VEGETABLES\",\n    \"value\": \"VEGETABLES\"\n  },\n  {\n    \"label\": \"BAKERY\",\n    \"value\": \"BAKERY\"\n  },\n  {\n    \"label\": \"FRUITS\",\n    \"value\": \"FRUITS\"\n  },\n  {\n    \"label\": \"BEVERAGES\",\n    \"value\": \"BEVERAGES\"\n  },\n  {\n    \"label\": \"DAIRY\",\n    \"value\": \"DAIRY\"\n  }\n]`\n\nFinally, set the Default Option to `blank` and toggle the Required field to `true`.\n\nWriting your First Transformation\nIt can get cumbersome to copy/paste and manually edit the settings in the Options field! Instead, let's use another technique to make this easier and more maintainable: JavaScript transformations!\nOpen `CategorySelect` properties and add the following snippet to the `Options` field:\n`javascript\n{{\n    _.map(\n      [\"vegetables\", \"bakery\", \"fruits\", \"beverages\", \"dairy\"],\n      function (category) {\n        return { label: category.toUpperCase(), value: category.toUpperCase() };\n      }\n    );\n}}`\n\nTo see if it's working, you can check the Evaluated Value and verify that it matches the Expected Structure.\n\nIn the above code snippet, a `_.map` method from lodash, and a `toUpperCase()` method from JavaScript to transform `Array<Strings>` into `Array<{ label: string, value: string }>`. Click here for more information about lodash, an external JavaScript library that is usable from within Appsmith.\nBy extension, you can transform any data into the desired format and type. For example, your input array can be values returned by a query that you can transform to `Array<{ label: string, value: string }>`.\nNow our Options field is easier to read, and much easier to update in the future if we need to add or remove values!\n:::info\nData Transformation:\nYou may wish to define a JavaScript function that modifies/transforms the shape or appearance of your data before it is rendered by a widget. For example, you could include methods to check whether input records match a particular condition, and include or filter out records based on the result.\nSince you can Appsmith supports JavaScript just about everywhere, you can use JavaScript, or one of the supported JS libraries to transform data in any widget, API, or DB Query.\n:::\nWrapping up the Form\nSo far, the form can accept a name and a category for the product. Now, we will add a field for the price. Drag a new input widget and rename it to `MrpInput`. This will be taking a numerical value, so change the `Data Type` to `Number.` Use the label property of `MrpInput` and set it to `MRP($)`.\n\nWriting regex validations\nYour form now has all the required widgets in place with some basic properties configured. Let's add some regex validations to reject invalid input from users.\nStart with ProductNameInput:\n\nOpen its properties modal\nWe want the Product Name to be between 3 and 50 characters that contain only letters of the English alphabet (allowing spaces). To do this, set the Regex property to `^\\s*[a-zA-Z\\s]{3,50}\\s*$`.\nThe field should provide feedback to the user if their input is bad. For this, set Error Message to Must be alphabetic having a length between 3 and 50\n\nTry filling in both valid and invalid values in ProductNameInput to see how it behaves!\n\nNow, let's configure MrpInput to accept only decimal values greater than or equal to $1.00\n\nSet Regex to `^\\s*(?=.*[1-9])\\d*(?:\\.\\d{1,2})?\\s*$`\nSet Error Message to Value must be greater than 0 and up to 2 decimal places\n\nVerify that the regex validates the input as expected, and throws the error message in case of a mismatch.\nSubmitting the form\nYour form is now both more user-friendly, and less error-prone! Let's configure it to use the form data to add a new entry to our catalog. It will involve two steps:\n\nSetting up an insert query that adds a new product to the table.\nWiring up the Submit button of the form to run the insert query.\n\nAccessing widget properties in queries\nYour form will have its values filled in by the user. Now let's see how to access our form data and plug it into our INSERT query! Keep in mind that queries are page-scoped, meaning that if you create a query on Page1, then you will not be able to access that query from Page2.\n\nNavigate to Pages \u2192 NewProductPage \u2192 Datasources \u2192 +.\nNavigate to Mock Database \u2192 New Query.\nRename the query to AddProductQuery.\n\nCopy the following into the Query tab:\n`sql\nINSERT INTO products (\"productName\", \"category\", \"mrp\") VALUES ('{{ProductNameInput.text}}', '{{CategorySelect.selectedOptionValue}}', '{{MrpInput.text}}')`\n5. Run the query.\n6. You should see a notification for a successful query run!\n\n\nLet's review briefly: The main query syntax is the same as that of PostgreSQL, following the format:\n`sql\nINSERT INTO table_name\n (col1, col2, col3, \u2026 colN)\nVALUES\n (val1, val2, val3, \u2026 valN)`\nThe only difference here is that you're using the mustache template to write JavaScript within the insert query:\n\nTo get the value provided by the user in ProductNameInput, you accessed its `text` property.\nTo get the value of the selected option of CategorySelect, you accessed its property `selectedOptionValue`.\n\nTo reiterate: Widgets, APIs, and DB Queries belonging to the same parent page can all access each other's properties and data, by referencing the desired property on that object's name.\n:::info\nFrom within our query, we've accessed the properties of our widgets! To see the various exposed properties you can access for any given widget, check the Internal Properties section in widget documentation.\n:::\nTriggering action on UI events\nYour query AddProductQuery is now set up to insert dynamic user input from the form. Let's bind the Submit button of the form to invoke AddProductQuery:\n\nOpen the properties of SubmitButton\nGo to Events \u2192 onClick\nChoose Execute Query \u2192 AddProductQuery\n\nTry creating a new product using the form. You'll notice that you don't have a way to tell whether or not the product was added after submitting the form -- We'll need to set up a success or an error message:\n\nOpen the properties of SubmitButton.\nNavigate to onClick \u2192 onSuccess.\nChoose Show Message.\nType Product creation successful!\nNavigate to onClick \u2192 onError.\nChoose Show Message.\nType Product creation failed!\n\n\nTry submitting the form again. Now you should have some useful feedback to show whether the query worked as expected!\nConfiguring actions using JavaScript\nIn the previous section, you used the properties GUI to define onSuccess and onError events for the Submit button. Let's look at how you can do the same thing using JavaScript.\nClick on the JS icon next to onClick. You'll see that the long hierarchical GUI that represents onClick \u2192 onSuccess and onClick \u2192 onError, converts to JavaScript code like below:\n`javascript\n{{\n    AddProductQuery.run(\n        () => showAlert('Product creation successful!'), \n        () => showAlert('Product creation failed!')\n    )\n}}`\nWhat you see above is the `run()` method defined by Appsmith. You can call the method on any DB Query, or an API. This method has the following signature:\n`javascript\nrun(onSuccess: function, onError: function, params: object): void`\nClicking on JS enables two things:\n\nIf the field is blank, it allows you to write JavaScript. That is, instead of using the GUI, you could have written this JavaScript yourself to configure the onSuccess and onError events.\nIf the field is already populated using the GUI, it converts the configured behavior to JavaScript code. You can modify this JavaScript to further customize the behavior.\n\nNote that you bound one action each with the success and error events. In part 3, you'll learn to bind more than one action with each of the events.\n:::info\nFor more information about writing JavaScript in Appsmith, please refer to this guide Writing JavaScript in Appsmith.\n:::\nConnecting multiple pages\nYou've created a new page NewProductPage with a form that allows users to add new products to the Oakry catalog. Now, we'd like to open this page when the user clicks on an \"Add new product\" button from the ProductListPage. Let's set this up:\n\nNavigate to Pages \u2192 ProductListPage.\nDrag-drop a button widget to the bottom-right of the table.\nRename the new button to AddProductButton.\nChange the button label to Add New Product.\nGo to Events \u2192 onClick \u2192 Navigate To.\nSet the Page Name field to `NewProductPage`.\n\nYour ProductListPage now looks like this:\n\nLet's test it out: Click on the \"Add New Product\" button on the ProductListPage. You'll see that the NewProductPage form opens up, ready for user input.\nBy selecting the Navigate To option, you set up the button to open a new page when it is clicked. You then specified the name of that page in your app, so Appsmith knows where to redirect the user.\nWhat's next?",
    "tag": "appsmith"
  },
  {
    "title": "Building a Store Catalog Manager",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/tutorials/building-a-store-catalog-manager",
    "content": "\nsidebar_position: 2\nBuilding a Store Catalog Manager\nThis tutorial shows you how to build a feature-complete Grocery Catalog application for an online grocery store called Oakry using Appsmith. The application we will be building is a multi-page dashboard used by Oakry's Catalog Managers to:\n\nBrowse the product catalog\nAdd new products to the catalog\nUpdate the details of products in the catalog\n\nThe tutorial is organized into three parts & we recommend you follow them in order.\nYou must have an account on either Appsmith Cloud (it's free) or your own private instance before getting started. Before diving in, let's talk a bit about the Appsmith environment.\nThe Appsmith Environment\nIf this is your first time using Appsmith, you'll need to get acquainted with some initial setup. When you log in, you'll be redirected to Appsmith Dashboard. This home page has an auto-generated workspace called `<Your first-name>'s apps` (referred to as your personal workspace from now on) consisting of multiple templates. In this tutorial, we'll create our Catalog app under the same workspace.\nLet's now create a new app named Catalog Dashboard under the personal workspace.\n:::info\n An app on Appsmith is a standalone software-application solving a specific use-case. It can consist of one or more web-pages.\n:::\nHere are steps to create an app from the Appsmith Dashboard:\n\nClick on the \"+New\"_ button in the area near your workspace's name on the dashboard.\nYou'll be redirected to the configuration page of the newly created app, which will be named Untitled Application 1 by default.\nRename your app to Catalog Dashboard by clicking on the existing name in the top-left of the screen, and selecting Edit Name.\nClick the Build with drag & drop button located on the center of the canvas.\n\n\nThe new app comes with auto-generated directories that establish an Appsmith app. Here is a look at the directory structure:\n\n:::info\nThe Entity Explorer pane on the left side of the screen is a place where you can create and organize UI widgets and data sources. Additionally, you can also find different integrations that you can utilize under these sections.\n:::\nLet's see what each of these directories is:\n\n`Pages`: This directory is a container for all the web-pages and their configuration of your app. Under this directory, you can create and organize different pages based on the tool or application you're building.\nThe `Page1` directory contains all entities required to render the corresponding web-page.\n`Widgets`: This directory is a container for all the widgets that will be part of the web-page `Page1`. You can think of Widgets as simple UI Components for your web-page, like a form or a table. By default, this directory doesn't have any pre-configured widgets.\n`Datasources`: The datasources directory is a container consisting of all API's and queries that Page1 connects to.\nLastly, you can also see all the JS libraries supported by Appsmith under the External libraries section. These libraries are already imported into your app's environment, ready to be used.\n\nCreating your First Page\nNow that your environment (referred to as an app) is set up, you're ready to start doing work.\n:::info\nA page in Appsmith is where the three building blocks of your app - Widgets, APIs, and DB Queries come together to create a view.\n:::\nThe first page you create will list all the products at Oakry. Let's use the default page Page1 that was created when you created this app. Now, rename the page to ProductListPage by double-clicking on Page1.",
    "tag": "appsmith"
  },
  {
    "title": "Building a Simple UI",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/tutorials/building-a-store-catalog-manager/building-a-simple-ui.md",
    "content": "\nsidebar_position: 1\nBuilding a Simple UI\nIn this section, you will walk through creating a simple web page that displays products fetched from a database in a table for the Oakry store.\nBy the end of part 1, you'll be familiar with:\n\nCreating Widgets on Appsmith.\nConnecting Databases and writing SQL queries in Appsmith.\nConfiguring widgets to render the results of your queries.\n\nAdding your First Widget\nAs discussed in the previous sections, Widgets are simple UI Components that can be added to our Apps. Now, let's add a table widget under the `ProductListPage` by following the below steps:\n\nNavigate to Widgets under `ProductListPage`\nClick on `+`\nFind the `Table` widget\nDrag and drop it to the canvas on the right\n\nThis will create a new table on `ProductListPage`.\n\nLet's discuss what has happened now:\n\nAs soon as you add a new `Table` widget, you should see some pre-populated data.\nA floating window, titled `Table1`, open's up on the right of the table. This is the widget's property-pane; here, you can configure the widget's properties.\nThe `Table Data` property in the pane defines what data will be displayed on the table. You can read more about the table widget's properties here.\nBy default, the name of the table is set to Table1. It can be renamed to anything you like by simply double-clicking it. Let's now change it to `ProductsTable`.\n\nUnderstanding the Table Widget\nLet's now take a minute to check how the array in `Table Data` maps to the table's columns and their values.\nHere are steps to play with Table Data to get a hang of how it affects the data displayed in the table:\n\nFirst, go to the Table Data property of `ProductsTable`.\nCopy-paste the below JSON data.\nThe above step will update the existing pre-populated data. You'll see the updated table.\nYou can always change the values, to test it quickly, go to the first object of the array and update the value of the key `one` from `1` to `i`.\nVerify that column one of the first row of the table now shows `i`.\n\n`javascript\n[\n  { \"one\": \"1\", \"two\": \"2\" },\n  { \"one\": \"I\", \"two\": \"II\" }\n]`\nYou should see the values of your table like the below screenshot:\n\nLet's go back to the `Table Data` field. When you place your cursor in the Table Data field, you see a floating window consisting of two properties:\n\n`Expected Structure`: This field specifies the data type expected by the property field. For the table widget, the Expected Structure is `Array<Object>`. Meaning the values can be set to anything that either is or evaluates to Table Object.\n`Evaluated Value`: This field shows in real-time what the input to the field evaluates to. This comes in handy when you write JavaScript code in the field, and you want to check whether it evaluates as expected.\n\nBy now, you have successfully displayed static data in your table. In the next section, we'll display product data from the mock database for the Oakry app.\nHowever, when you are building an app for a different use case, you can connect to your own database.\nWriting your First Query\nNow, let's utilize the mock database to display all the catalog items for the Oakry app by following the below steps:\n\nFirst, let's create a new Datasource by clicking on the \"+\" icon next to the Datasource directory.\nSelect `Create New`, choose Postgres as the Database type, and name it \"Mock Database\".\nFill in the following details, and hit the Save button.\n\n`Host: fake-api.cvuydmurdlas.us-east-1.rds.amazonaws.com\nPort: 5432\nUser: fakeapi\nPassword: LimitedAccess123#\nDatabase: fakeapi`\n\nNext, click on the New Query button, and you'll see a query created with the name Query1\nRename the query to ProductsQuery by double-clicking on the existing name.\nNext, click on the \"Create\" option and paste the query shown below into the Query tab:\n\n`sql\nSELECT \"id\", \"productName\", \"category\", \"mrp\" FROM products ORDER BY \"id\";`\n\nClick on the Run button to execute your query and print out all the results into the Response window at the bottom of the page.\n\nThe query is saved as soon as it's created, without you having to explicitly save it. This is the case with all APIs, widgets, and any changes you make to any object within your app.\nBelow is a screenshot of how Appsmith renders the outputs of your SQL Query.\n\nAccessing Query Results to a Widget\nThe next step is to display the query results in the `ProductsTable`, follow the below steps to do the same:\n\nNavigate back to Widgets under `ProductListPage` and select the `ProductsTable`\nOpen `Product_Table` properties, and copy the following property to `Table Data`\n\n`javascript\n{{ProductsQuery.data}}`\n\nWhen you use mustache syntax `{{ }}`, Appsmith will resolve the contents of the curly braces as JavaScript code. You can write JavaScript anywhere in Appsmith using `{{ }}`.\n\nAbove, we are accessing our query object by its name, `ProductsQuery`; then, we reference its `.data` property to use the data that was returned by the query.\nSetting Table Data to `{{ ProductsQuery.data }}` also ensures that whenever ProductListPage loads, ProductsQuery runs automatically. You can, although, change this default behavior by toggling the field \"Run query on page load\" on the Setting tab of ProductsQuery.\nNow, you should see that your table displays the results of `ProductsQuery`. At this point, you could deploy your app and share it to display the Oakry product catalog!\nBelow is the screenshot:\n\nVariables and Names\nIn the previous section, we used names to access our query data by referencing a property, `data`, on the query's name. In that sense, think of widgets, APIs, and DB Queries in Appsmith in the same way that you think of variables in other programming languages:\n\nThey represent an object; in our case, a widget, an API object, or a query object.\nThey have properties and support a set of methods.\nThey have a scope; they can only be accessed from within their parent page.\nAll names within a page must be unique.\n\nAs you'll see in the next section, we'll see that a widget's state can also be accessed from within a query definition. All the building blocks of an Appsmith page - Widgets, DB Queries, and APIs can access each other's data and/or state by using their names.\nWhat's next?",
    "tag": "appsmith"
  },
  {
    "title": "Setting up the App",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/tutorials/review-moderator-dashboard/setting-up-the-app.md",
    "content": "\ndescription: >-\n  This is the first part of the tutorial, in which you'll learn how to set up\n  your appsmith app.\nsidebar_position: 1\n\nSetting up the App\nIf this is your first time using Appsmith, you'll need to get acquainted with some initial setup. When you log in, you'll be redirected to Appsmith Dashboard. You'll see an auto-generated workspace called apps (your workspace). However, you can create multiple workspaces and organize your apps based on your preferences.\nIn this tutorial, you'll create a Review Moderator application under the same workspace. To do this, follow the below steps:\n\n\nClick on the Create New under your workspace.\nIt will redirect to the configuration page of the newly created app.\nYou will see two options, Build with drag & drop or Generate from the data table.\nFor this tutorial, we will select build with drag & drop.\nNote that the app will have a default name Untitled Application 1.\nRename it to Review Moderator by double-clicking on the existing one.\n\nThe new app comes with auto-generated directories that establish an Appsmith app. Below is a screenshot of the entity explorer.\n\n:::info\nEntity Explorer is where you can create and organize UI widgets, queries / JS objects, and data sources. You can also find different libraries under dependencies that you can utilize under these sections.\n:::\nNow, let's rename the page from Page1 to Business Details; you can do this by double-clicking on the existing name.\nYou have now set up the application. Next, let's jump into the next section. Here, you'll connect to a data source and write your first DB Query on Appsmith!\n\nConnecting to datasource and binding queries\n",
    "tag": "appsmith"
  },
  {
    "title": "Building UI and Accessing Widget Properties",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/tutorials/review-moderator-dashboard/building-ui-and-accessing-widget-properties.md",
    "content": "\ndescription: >-\n  In this part of the tutorial, you'll learn how to build a UI and customize\n  your widgets.\nsidebar_position: 3\n\nBuilding UI and Accessing Widget Properties\nCustomizing the Table Widget\nAs you can see, the table widget has a lot of data from the query, but say you might want to show only a few columns and hide the rest of them for better clarity.\n:::info\nYou can open the property pane, find the columns, and toggle the eye icon. It will hide the columns from the table.\n:::\nNow open the tables property pane, and only display the following columns:\n\nName\nAddress\nCity\n\nBelow is the video to build the UI and edit table properties:\n\nAdditionally, let's make the UI more beautiful by using a Container widget. Using this, we can group multiple widgets on a minimal white-spaced background. To do this, follow the below steps:\n\nDrag and drop a Container widget onto the canvas.\nMove the Table widget into the Container widget.\nAdditionally, add a Text widget on top of the Table widget to add a heading. You can name that text \"Review Moderator Dashboard\".\n\nLet's add some additional components that display the information whenever a particular business is selected on the table row. Let's first rename the Table widget from Table1 to businessTable. You can edit the widget's name from the property pane.\nAdding a Map Widget\nTo make the UI more intuitive, let's add the location of the business. To do this, we will add a Map Widget and display the location of the business by following the below steps:\n\n\nDrag and drop a Map widget onto the canvas\nOpen the Map widget property pane\nYou'll notice two default configurations: Initial Location and Default markers.\nThe initial location is the position of the marker and accepts a single JSON object with lat and long coordinates.\nThe default markers set all the default markets on the map, and it's the usual array of map objects.\nNext, update the Initial location (toggle JS) and Default markers property to the following:\n\n`Initial location:`\n`javascript\n{\n    \"lat\": {{businessTable.selectedRow.latitude}},\n    \"long\": {{businessTable.selectedRow.longitude}}\n}`\n`Default markers:`\n`javascript\n[\n  {\n    \"lat\": {{businessTable.selectedRow.latitude}},\n    \"long\": {{businessTable.selectedRow.longitude}},\n    \"title\": {{businessTable.selectedRow.name}}\n  }\n]`\nHere, you're using the mustache syntax, binding the table values and configuring the map widget.\nYou can use the `selectedRow` property for the Table widget to access the data of a particular row when selected.\nNow select any row from the table, and the map automatically updates with the business location mentioned.\n:::info\nThe zoom level can be used to pinpoint the exact location.\n:::\nAdding Text Widgets and Binding Data\nNext, let's add a few text widgets and bind all the business information under the map. You can drop text widgets onto the canvas and add their associated names and values like:\n\nDrag the text widget onto the canvas and paste the query listed below into the text field.\n```\nName: {{businessTable.selectedRow.name}}\nAddress: {{businessTable.selectedRow.address}}\nCity: {{businessTable.selectedRow.city}}\nBusiness ID: {{businessTable.selectedRow.business_id}}\nBusiness Rating: {{businessTable.selectedRow.stars}}\nCategories Rating: {{businessTable.selectedRow.categories}}\n```\nWhat's Next?",
    "tag": "appsmith"
  },
  {
    "title": "Connecting to Data Source",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/tutorials/review-moderator-dashboard/connecting-to-data-source-and-binding-queries.md",
    "content": "\ndescription: >-\n  In this part of the tutorial, you'll learn how to connect your app to a\n  datasource and write a query.\nsidebar_position: 2\n\nConnecting to Data Source\nConnecting to Postgres Mock DB\nAppsmith supports various data sources and lets you write queries on them to perform different actions from the application. In this tutorial, you'll connect to a Postgres data source that has the following tables:\n\nBusiness Table: It contains detailed information about a few businesses filtered from the Yelp Data.\nReview Table: This table has reviews associated with the businesses listed in the business table.\n\n:::info\nAppsmith supports various databases like:\n\nAmazon S3 (also Upcloud, Digital Ocean Spaces, Wasabi, DreamObjects)\nArangoDB\nDynamoDB\nElasticSearch\nFirestore\nMongoDB\nMySQL, and a lot more.\n:::\n\nLet's utilize this mock data source to fetch all the business items for the Review Moderator app by following the below steps:\n\n\nFirst, click on the `+` the icon next to the `Datasources`.\nNext, you'll see a list of data source options that you can connect to.\nChoose Postgres and rename the data source to `Postgres Mock DB`.\nNext, use the following details to connect with the data source.\n\n`Connection Mode: Read / Write\nHost Address: mockdb.internal.appsmith.com\nPort: 5432\nDatabase Name: yelp\nUser: yelp\nPassword: that-annoying-yelper`\n:::info\nTo verify if this data source is valid or not, you can click on the `Test` button on your mid-bottom right. You should see a pop-up with the connection status.\n:::\nNow, save your data source by clicking the Save button. You'll see a success pop-up on the top-right after successfully adding your DB.\nWriting your First Query\nThe data source is successfully connected; now, let's write a simple DB query to fetch all the business data from the business table. Follow the below steps to do so:\n\n\nFirst, click on the `+` the icon next to the `Datasources`.\nFind the created `Postgres Mock DB` data source under the Active tab and click `NEW QUERY`.\nIt will create a new DB Query that you can use across the Page.\nName this query as `getBusinessData` and click select.\nUse the following query in the query pane to get all the business data:\n\n`sql\nselect * from yelp_business;`\nTo run this query, click on the RUN button in the top-right corner of the DB query.\nJust like that, you should see the response from the DB Query in the Response Pane tab below.\nNext, let's bind this data onto the powerful table widget of Appsmith!\n:::info\nAll names within a page must be unique, including widget names, query names, or API names.\n:::\nBinding Queries onto Widgets\nIn the previous section, you\u2019ve created a DB query named `getBusinessData`; let's bind the query onto a table widget. You can achieve it in two ways:\nThe First and simple method is to open the query window and select the table option on the right-side property pane. It will automatically add a table widget to your canvas. The video below demonstrates adding a table widget from the query window.\n\n:::info\nNote that the above method would also automatically bind the data from the query for you.\n:::\nLet's look at another method for adding a table widget to your canvas.\n\nClick on the `Widgets` option from entity explorer.\nYou'll find a great set of UI widgets here that you can use to build the application.\nDrag and drop an `Table widget` onto the canvas.\n\n:::info\nAppsmith provides various widgets, like tables, lists, buttons, maps, audio, charts, forms, and more.\n:::\nYou'll notice a property window on the right side of the program as soon as you drag the widget into the canvas; you can call it the Widget Property Pane. All of the table's configurations and customization properties can be found here. Here's a screenshot of the table widget and its property pane:\n\n:::info\nYou can access the docked property pane of any widget, by simply clicking on the widget from the canvas.\n:::\nLet's look at the Table's Property Pane:\nTable Data: To add data to the table, we can update the property pane's `Table Data` property. By default, it has some initial configuration; you can update it based on your preferences. But also make sure that it will only accept array data types. Go through the detailed documentation here To learn more about the table widget.\nTable Columns: Beneath the Table Data property, you can configure all your column data. You can click on the cog icon and set the column data type individually.\n:::info\nThe table widget displays data in rows and columns. You can display data from an API in a table, trigger an action when a user selects a row, and even work with sizable paginated data sets.\n:::\nThese are the two fundamental properties needed for the table widget. However, many other properties allow you to add different actions and customize the UI. If you want to learn how to display data and handle pagination inside a table, read this guide.\nNow, in the `Table Data` property, let's bind the response from the DB Query. To do this, you'll have to use the Mustache Operator.\n:::info\nIn Appsmith, the mustache operator `{{ /* This is JavaScript */ }}` can be used anywhere to write JavaScript. For example, when binding data onto widgets, sending params to APIs, sharing data across pages, etc.\n:::\nNow copy the following onto the `Table Data` property:\n`javascript\n{{ getBusinessData.data  }}`\nWhen you copy this onto the Table Data, you should see the data magically populated onto the table. Then, based on your preference, you can customize the column names and style your table widget with the other properties. The video below demonstrates how to add the table widget and fetch the data.\n\nBut what just happened here?\nHere, we are accessing the entire query object using the query name `getBusinessData`, and the `.data` property allows us to attach data.\nSetting Table Data to `{{ getBusinessData.data }}` also ensures that whenever the Business Page loads, getBusinessData runs automatically. However, you can change this default behavior by toggling the field \"Run query on page load\" in the Setting tab of getBusinessData.\nWhat's Next?",
    "tag": "appsmith"
  },
  {
    "title": "Review Moderator Dashboard",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/tutorials/review-moderator-dashboard",
    "content": "\ndescription: Overview of the tutorial\nsidebar_position: 1\n\nReview Moderator Dashboard\nIn this tutorial, you'll learn to build a feature-complete internal tool on top of a real business dataset using Appsmith. The application is a multi-page dashboard that lets you browse through all the business information and moderate individual reviews provided by users.\n:::info\n\u2b50 Level: Beginner\\\n\u23f1\ufe0f Time: \\~40 minutes\n\ud83d\ude4c What you'll learn in this tutorial:\n\nConnecting to Data Sources on Appsmith (APIs/DB Queries)\nBinding Data onto different UI Widgets.\nWriting JS on Appsmith for Complex Views.\nDeploy and Manage your Applications.\nUse various widgets such as charts, lists, maps, tables, etc.\n:::\n\n\nThe tutorial has four parts & we recommend you follow them in order. Now before getting started, let's set up Appsmith. You could either use the self-hosted version using Docker or Appsmith cloud and follow along.\n:::note\nTo set up Appsmith locally using Docker, you can follow the instructions here.\n:::\nLet's get started with the tutorial, so first, let's set up the app.\n\nSetting up the app\n",
    "tag": "appsmith"
  },
  {
    "title": "Creating Interactive Views",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/tutorials/review-moderator-dashboard/creating-interactive-views-using-lists-and-charts.md",
    "content": "\ndescription: >-\n  In this final part of the tutorial, you'll learn how to build an interactive\n  UI using widgets like buttons, lists, charts, and more.\nsidebar_position: 4\n\nCreating Interactive Views\nStoring Data in Appsmith Context Object\nYou are now almost ready with your super cool dashboard. To make your app more interactive, add another page that shows reviews of that particular business.\nStart by adding a button that'll redirect to a new page. Also, on the new page, you would require the `business_id` to filter the reviews from the review table. Hence, now store the value in the Appsmith Context Object and use it as a reference. Follow the instructions below:\n\n\nDrag and drop a button widget under business details.\nOpen the buttons property pane and change the label to View Reviews.\nUnder Actions, go to the onClick event and toggle the JS button and paste the following code:\n\n`{{\n(function () {\n    storeValue(\"business_id\", businessTable.selectedRow.business_id);\n    navigateTo(\"Business Reviews\") })() \n}}`\nAwesome, you've successfully written your first JS function on Appsmith. As you can notice, these are primary Invoked functions, which means it runs as soon as it defined. Inside the function, use the `storeValue` method to store the business key from `businessTable` into the `business_id` variable. Next, you've used a `navigateTo` method to be able to redirect to a new page.\nNow create a new page and name it \"Business Reviews\". So, when you click the button, it takes you to a page called \"Business Reviews.\"\nAs you can see here, as soon as the viewer clicks the button, it now navigates to a new Page. Also, you have the `business_id` saved from the selected row.\nUsing Store Value in DB Queries\nNow, to fetch review data, write a query for the Business Reviews Page that filters the reviews from the reviews table based on the selected business_id by following the below steps:\n\n\nFind and select Postgres Mock DB data source under the Explorer tab.\nClick `NEW QUERY` on the top-right corner.\nRename the query to `filterBusinessReviews`.\nNow paste the following query on the query pane:\n\n`select * from yelp_reviews where business_id = {{appsmith.store.business_id}}`\n:::info\nMake sure you perform this query for the \"Business Reviews\" page.\n:::\nYou're selecting all the rows from the `yelp_review` table and filtering them by the `business_id` variable you've saved in the appsmith store while navigating to the new page. Hence, you've used it for the WHERE clause using the mustache syntax. Now hit RUN.\nBy running the query, you can see all the reviews based on the selected `business_id` . In the query settings tab, make sure you toggle the Run query on the page load option.\nAdditionally, you'll need to fetch the business details again on this page, making it easier on dashboards to show complete details from a DB query. Follow the below steps:\n\nFind the created Postgres Mock DB data source under the Explorer tab and click NEW QUERY.\nRename the query to `getBusinessDetails`.\nNow paste the following query on the query pane:\n\n`select * from yelp_business where business_id={{appsmith.store.business_id}}`\nIf you run this, you'll only see one row that fetches all the business details from the business table based on the `business_id` stored inside the appsmith context object.\nNow, build a dashboard that shows all the reviews fetched from the reviews table.\n\n\nFirst, drag and drop a container widget and rearrange it for the whole page.\nNext, add a text widget and paste the following in the Value property pane:\n\n`Found {{filterBusinessReviews.data.length}} Reviews for {{getBusinessDetails.data[0].name}}`\n3. Add a few text widgets to display the business name and the business ID. The below query can be used to add a name. You can use a business id or any other value in place of a name.\n```\nTo get name - {{getBusinessDetails.data[0].name}}\nTo get business_id-{{getBusinessDetails.data[0].business_id}}\n```\n:::info\nTip: You can also run queries or APIs using `CMD + return` or `CTRL + enter` shortcuts on Appsmith!\n:::\nUsing List Widget to display the Reviews\nNow display all the reviews in the list view. List widget provides you with out-of-the-box capability to iterate over a structured data collection. The datasets can be static or generated by the response from API/queries.\nNow, use a List Widget to display all the reviews from the filterBusinessReviews query. Follow the below steps:\n\nDrag and drop the list widget onto the canvas.\nBind the data from `filterBusinessReviews` on the list widget.\nOpen the list widget property pane and paste the following into the Items.\n\n`{{filterBusinessReviews.data}}`\nNow, customize the list view according to your needs and remove the items you don't need in the list view.\n\nDelete the already populated data in the list widget and add a few text widgets inside the list view.\nYou should notice that the widgets are automatically added to the other items of the list widget.\nYou can bind the Items into these widgets by using the `currentItem` property.\nIn the text, widgets use the mustache syntax and bind the data like `{{currentItem.text}}`.\nNow, in the overflow setting, change it to \"scroll contents\". So this makes the text view scrollable.\n\n\nNow you can try displaying the rest of the data onto the list widget using the `currentItem` property.\nDisplaying Date\nNow make the list view even more intuitive. Drag and drop a text widget onto the table, and add the following code snippet in the Text property from its property pane:\n`{{currentItem.date}}`\nHere, if you notice, the date isn't in a readable way. You can use ``moment.js`` to transform this, which is already configured on Appsmith's environment. Now update the value to the following:\n`{{moment(currentItem.date).format(\"LL\")}}`\nThe date automatically formats based on the type give in the `.format()` method.\nDisplaying Ratings\nDisplay the reviews in a colorful way. Add a few text widgets inside the list view.\nNext, add the reviews from the query by settings the following in the text widgets:\n```\nStars Ratings: {{`Stars: ${currentItem.stars}` }}\nFunny Ratings: {{ `Funny: ${currentItem.funny}` }}\nUseful Ratings: {{ `Useful: ${currentItem.useful}` }}\nCool Ratings: {{ `Cool: ${currentItem.cool}` }}\n```\nAfter finishing this, you can customize the text widget, find the background-color property in the text widget property pane, and add any background colors. Now, finally, this is what the app looks like:\n\nAdding chart widget\nThe chart widget on Appsmith is used to view the graphical representation of your data. It's available in multiple configurations; however, if you want to do advanced visualization, you can choose the custom configuration and use `Custom Fusion Chart Configuration.`\n:::info\nThere are almost 100+ variants of Fusion Chart Configuration; learn more from the official docs here.\n:::\nAppsmith uses the Chart Series property head to supply the data and details related to identifying the data points.\n\n`Series Title` - the name of the series.\n`Series Data` - stores the data points for the total bugs.\n`X-axis Label` - to define a title for the x-axis.\n`Y-axis Label` - to define a title for the y-axis\n\nNow, follow the below steps to create a chart for visualizing the ratings of the business based on reviews.\n\n\nDrag and drop a chart widget onto the canvas.\nOpen the chart widget property pane and set the chart type to Line chart.\nNext, set the title as Star Ratings of Business and use the following code snippet to pass coordinated chart data.\n\n`{{filterBusinessReviews.data.map((item, index)=>{return {x:moment(item.date).format(\"L\"), y:item.stars}})}}`\nAwesome! You should see all the data plotted on the chart widget. Similarly, you can plot the other ratings by clicking on the `ADD SERIES` option. The video below demonstrates how to add series to your chart.\n\nWith that, you have created an interactive and beautiful dashboard on Appsmith.\nBelow is the live link to the fully configured app.\nView App in New Tab\n\n\n\nDasbhboard on Appsmith\n\nSharing your application\nDeploy your app for the final time. Once deployed, you can share your deployed application with both internal and external users:\n\nClick on the \"Share\" button on the top right\nInvite a user using their email ID\nSelect an appropriate role for the user\nShare the application's URL with the user\n\nYou can also make the application public. In that case, anyone with the URL to the application can view the application without signing in. You can read more about access control here.\nWhat's next\nThe basic Review Moderator Dashboard is now up and running. It also marks the end of the beginner tutorial. At this point, you should know enough to start a project of your own and start fooling around. The following resources will come in handy as you need to learn new tricks:\n\nCore Concepts\nWidgets\nAppsmith Framework\n",
    "tag": "appsmith"
  },
  {
    "title": "How to Use JS Object Within Appsmith?",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/how-to-guides/how-to-use-js-object-within-appsmith.md",
    "content": "\nsidebar_position: 1\nHow to Use JS Object Within Appsmith?\nJavaScript(JS) is a programming language used on both the client and the server-side. It also supports the creation of an object known as JavaScript Object (JS Object). Javascript object is a collection of properties designated by a key-value pair. In this guide, you\u2019ll learn how to use JavaScript(JS) objects within Appsmith.\nJavaScript Object\nJavaScript Object(JS Object) is a collection of key-value pairs which defines its attributes. The object attributes are similar to the variables defined in JavaScript, except they are accessed with specific notations for the particular object associated with and store different values for different objects.\nJavaScript Object in Appsmith\nJS Object in Appsmith is an encapsulation of variables and functions associated with it. It is a template similar to a Java class that holds the variables and the underlying functions used to perform actions.\nAdd a JS Object\nYou can create a JS Object by navigating to Explorer \u2192 Click the (+) sign next to `QUERIES/JS` and select `New JS Object`.\n\nClick on the JS object to reveal the `Code` associated with it. You\u2019ll see that the JS Object code opens up to display a template that follows a particular structure.\nStructure of JS Object\nA JS Object follows the following template:\n```\n//a template that defines a JS Object in Appsmith\nexport default { \n\n\n```myVar1: [], // you can define array\n\nmyVar2: {}, // you can define object\n\n// define functions\n\nmyFun1: () => {\n\n    //write code to manipulate the data or perform actions \n    //like calling an API or executing a database query\n\n},\n\nmyFun2: async () => {\n\n    //use async-await or promises\n\n    // this helps when you would want to trigger queries \n    //or API calls at run time.\n\n    // For example, API_NAME.run() - run method executes the call \n    //and returns the response.\n\n}\n```\n\n\n}\n```\nIn Appsmith, you can use the inherent JavaScript way of accessing or creating JS objects in the functions only that are defined within a JS Object.\n:::info\nThe point to remember is that Appsmith provides access to your JS objects across the Appsmith platform, and for this, we export the JS objects. Thus, the JS Object notation should start with `export default`.\n:::\nIf you do not start the notation with `export default`, the JS object will be invalid and can\u2019t be defined as Appsmith does not recognize them and throws an error.\nJS Notations within Methods\nYou can use the properties of the JS Objects defined localized to your methods using dot or bracket notation. For example, you have defined a variable that is local to your method, as shown in the code snippet below:\n```\n export default { \n\n\n```useJSObjectProps: () => {\n\n    const userObject = new Object(); //object with method scope and \n                        // is local to this method.\n\n    userObject.id = \u201c1\u201d; // setting property using dot notation\n\n    userObject[\u201cname\u201d] = \u201cJohn\u201d; //setting property using bracket \n                    //notation\n\n    showAlert(userObject.id); // an alert function available on \n                 // Appsmith to alert the property value. \n                // You can access property using dot \n                // notation.\n\n\nshowAlert(userObject[\u201cname\u201d]); // You can access property using bracket \n                      // notation.\n\n        }\n```\n\n\n}\n```\nThe default JavaScript object creation and property setters and getters work if you define them inside the method. However, a code snippet as below will throw an error.\n\nLet\u2019s quickly understand how to use the JS Object within Appsmith.\nHow to Use JS Objects within Appsmith?\nAppsmith supports the built-in access ways provided by JavaScript. Let\u2019s take a use case to understand better how you can use JS objects within Appsmith.\nUse Case\nYou are building a user directory, and the user data is fetched either by using an API/ a database query.\nThe API/query returns a collection of user data. You have to fetch the user\u2019s KYC status that a third-party API supplies for every user in the collection. Once you receive the KYC status, you have to update it for each user in the collection and then return the updated user data.\nLet\u2019s build on this use case by following the below steps:\nCreate API\nYou can either add a database query or call an API for fetching the user data.\nAPI to Fetch User Data\nFor our use case, let\u2019s add an API that returns a collection of user data.\nNavigate to the Explorer \u2014 > Click the (+) sign next to `QUERIES/JS` and select `New Blank API`. In our case, let\u2019s name the API- `GetUserList`. The API generates a collection of users, where each user object has properties - Id, Name, and Email.\n\nA sample response generated by the API will be as follows:\n```\n{\n\"users\": [\n\n\n```{\n\n  \"id\": \"1\",\n\n  \"name\": \"John Smith\",\n\n  \"email\": \"john.smith@abc.com\"\n\n},\n\n{\n\n  \"id\": \"2\",\n\n  \"name\": \"Jack Jones\",\n\n  \"email\": \"jack.jones@abc.com\"\n\n},\n\n{\n\n  \"id\": \"3\",\n\n  \"name\": \"Emily Brains\",\n\n  \"email\": \"emily.brains@abc.com\"\n\n}\n```\n\n\n]\n}\n```\nAPI to Check KYC Status\nSimilar to `GetUserList` API, let\u2019s add another API, `GetUserKycStatus,` that will check the given user\u2019s KYC Status and returns status with pass/fail as a response:\n```\n{\n\n\n```\u201cstatus\u201d: \u201cPass\u201d\n```\n\n\n}\n```\nHow to Display the Data?\nAppsmith provides several different widgets that you can use to display data. We\u2019ll use a table widget to display the data for our use case. Drag a table widget from the left navigation bar onto the canvas. It\u2019s advisable to provide a unique name to the widget like `BeforeJSCall`. For a table widget to display data, it needs data collection. The API `GetUserList` returns a user array. To bind the API response data, you can use `{{ GetUserList.data.users }}` in the table data property. The table widget displays data as below:\n\nAs per the use case, the user\u2019s KYC status is recorded by a third-party API `GetUserKycStatus`. To trigger the API call, you\u2019ll have to iterate through the user collection and fetch the status per user. In such scenarios, you can use JS Objects on the Appsmith.\nCreate JS Object\nAppsmith provides JS Objects that can perform a particular or series of actions. Create a JS Object by navigating to the Explorer \u2192 Click the (+) sign next to `QUERIES/JS`, and select `New JS Object`.\nCopy and paste the code snippet below in the JS function\u2019s code editor.\n```\nexport default {\n\n\n```getKycStatusForUsers: () => {\n\n    const updatedUsers = []; // add an empty array of users.\n\n     //An API call to get the user collection and then iterate through the collection using forEach\n\n    GetUserList.data.users.forEach(function(userObj){\n\n        // Create a user object to add the data\n\n        const userObject = {\n\n            id: userObj.id,\n\n            name: userObj.name,\n\n            email:userObj.email,\n\n            kycStatus: GetUserKycStatus.data.status // call an API to fetch the User Status\n\n        }\n\n        updatedUsers.push(userObject);  // Adding the updated user to the collection\n\n    });\n\n    return updatedUsers; // return the array with the updated user data\n\n}\n```\n\n\n}\n```\nWith the above code:\n\nCreate an empty collection `updatesUsers`.\nCall the API `GetUserList` right inside the JS function\nUse `forEach` to iterate over the data\nCall `GetUserKycStatus` API for every user object in the array that returns the user\u2019s KYC status.\nCreate a user object. Here you can use default JavaScript to create an object and its associated properties.\nUpdate existing properties or add new properties. Here you can use default JavaScript to access or add properties to an object.\nAdd the updated user object to the `updatedUsers` collection using the `push` method.\nReturn the updated collection\n\nAdd a table widget onto the canvas, name it as `AfterJSCall` and bind the JS function to the table data. Use `{{JSFetchUsers.getKycStatusForUsers()}}` to bind the data.\nHere\u2019s a video that shows how the above code works:\n\nConclusion",
    "tag": "appsmith"
  },
  {
    "title": "How to work with Google Sheets on Appsmith",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/how-to-guides/how-to-work-with-google-sheets-on-appsmith.md",
    "content": "\nsidebar_position: 7\nHow to work with Google Sheets on Appsmith\nWith Appsmith's inbuilt Google Sheet Integration Plugin, you can use any Google Sheet as a data source or a backend to build powerful applications. In this tutorial, we'll build a CRUD app that allows us to store and update investor contact information on top of Google Sheet with Appsmith.\nSetting Up Google Sheets and Appsmith\nFollow the below steps to use Google Sheets with Appsmith:\n\nCreate a new account on Appsmith (it\u2019s free!), if you are already an existing login to your Appsmith account.\nCreate a new application by clicking on the `Create New` button under the Appsmith dashboard.\nWe\u2019ll now see a new Appsmith app with an empty canvas and a sidebar with Widgets, APIs and DB Queries.\nClick on the `+` icon next to the APIs section and choose the `Google Sheets` option. Next, click on the `New Datasource` button and set the scope to `Read and Write` and click Authorise.\nThis will ask us to log in from our Google Account, choose the account we want to access Google Sheets with and log in. After successful authorisation, this will redirect back to your Appsmith account.\nNow, you\u2019ll find your Google Sheets Datasource under your APIs, and you can create the necessary queries by choosing this data source.\n\n\nAwesome! Now that our Google Sheets Plugin is set up, let\u2019s create a new Google Sheet and add the necessary fields required for Investor CRM.\nFollowing are the fields we\u2019ll be considering:\n\nInvestment Fund\nLocation\nName of Investor\nDesignation\nInteresting Portfolio Companies\nSize of Fund\n\nTo make this more precise, we\u2019ve made a sample Google Sheet with some mock data here. We\u2019ll be using the same Sheet throughout this guide, and you can either follow with this or create your own based on our requirements.\nFetch Data from Google Sheet to Appsmith\nNow that we are connected to our Google Sheets data source, let\u2019s connect to our Google Sheet and query all the data onto a table widget in Appsmith. To do this, navigate to the created data source under the APIs section and click on the `New API` button on the top right. Next, follow the below steps:\n\nAfter clicking the `New API` button, you\u2019ll be redirected to a new query tab, name your API to `getInvestorDetails` by double-clicking on the existing one.\nNow set the method to `Fetch Sheets Row`, this method will query the data that\u2019s present in the given Google Sheet.\nIn the SpreadSheet URL property, paste the URL of your Google Sheet, in this tutorial we\u2019ll be following with the following URL:\n\n`https://docs.google.com/spreadsheets/d/19ewbxuiNwfD5etHpb__jMzFYjVdYaeLSviC951htlsI/edit#gid=333192`\n\nNext, in the Sheet name, add the name of our first sheet which is `Investor Details`\nThe Table Heading Row Index property takes in the row number that basically has our column heading, we\u2019ll set this to `1`.\nNext, we\u2019ll set the `Row Offset` to `1` and `Row limit` to `100`, this will query only the first 100 rows of our Google Sheet.\nLastly, click on the `Run` button on the top right, we should see the sheet information in JSON format in the response pane at the bottom. Below is the GIF showing the same:\n\n\nAwesome, now that we have our data from the Google Sheet, let\u2019s put this in a table; drag and drop a new table widget and paste the following in the Table Data property:\n`{{ getInvestorDetails.data }}`\n:::info\nPagination when Working with Large Data\nWhen working with large data on Google Sheets Sheets from APIs, browsers cannot load all the data present in our sheets. For such cases, you can enable server-side pagination, on API calls. To paginate the data, follow the below steps:\n\nEnable the server-side pagination property in the table\nCall the API/Query `onPageChange`\nToggle pagination in the API under Pagination Tab\n:::\n\nInsert Data/Rows to Google Sheet from Appsmith\nLet\u2019s start by adding a button and showing a modal that has a form to add all the details of the new investors. Follow the below steps:\n\nDrag and drop a button widget on to the canvas and next open the property pane of the button by clicking on the cog icon on the top right of the button when selected.\nOpen the `onClick` property and select the `Open Modal` option and click on `New Modal`, this should open a new modal.\nNow add the necessary form fields by dragging the Input widgets onto the Modal. In our case of Investor CRM, we will add the following fields:\nInvestment Fund\nLocation\nName of Investor\nDesignation\nInteresting Portfolio Companies\nSize of Fund\nName the input widgets to follow to easily use them for other operations for our CRM.\nInvestment Fund: `addFund`\nLocation: `addLocation`\nName of Investor: `addInvestorInput`\nDesignation: `addDesignation`\nInteresting Portfolio Companies: `addPortifolio`\nSize of Fund: `addFundSize`\n\nThis is how the form should look like:\n\nNow that we have our form ready, let's write the logic to push the values from the form to the Google Sheet whenever submitted. Follow the below steps:\n\nCreate a new API from the existing Google Sheets data source and set the query method to `Insert Sheet Row`. This query method helps us insert new data to the Google Sheet from Appsmith.\nName the query as `addNewInvestor`\nNext, in the SpreadSheet URL property, add the link to our Google Sheet.\nThe Sheet Name will be `Investor Details` as named in our Google Sheet.\nThe Table Heading Row Index will be the row where the names of the columns are listed; in our case, this will be `1`,\nLastly, the Row Object takes a JSON object with keys set to the column names associated with the desired values. In our case, below is how the Row Object should look like:\n\n`{\n  \"Investment Fund\": \"{{addFund.text}}\",\n  \"Location\": \"{{addLocation.text}}\",\n  \"Name of Investor\": \"{{addInvestorInput.text}}\",\n  \"Designation\": \"{{addDesignation.text}}\",\n  \"Interesting Portfolio Companies\": \"{{addPortifolio.text}}\",\n  \"Size of Fund\": \"{{addFundSize.text}}\",\n}`\nHere, the key's are the column names in the Google Sheet, and the values associated with them are the names of the input widgets. The `.text` method is used to pick the text that's written in the input widgets.\nLastly, in the form below for the submit button, set the on click property to `Call an API` and call the `addNewInvestor` API from the options. With this, we should be able to add new rows to Google Sheet from Appsmith.\nUpdating Data on Google Sheet from Appsmith\nLet's add a feature to display this data and able to update them using the input widget. Drag and drop a container and add necessary input widgets to display the Investor Details. In this case, we\u2019ll be adding the following:\n\nInvestment Fund: `editFund`\nLocation: `editLocation`\nName of Investor: `editInvestorInput`\nDesignation: `editDesignation`\nInteresting Portfolio Companies: `editPortifolio`\nSize of Fund: `editFundSize`\n\nThe left side text will be the default text in the text widget of the form, and on the right, we have the names of the input widgets corresponding to them. Below is a screenshot of how the form looks like:\n\nSet the following to the Default text of input widgets in the investor details container:\n\nInvestment Fund Input Widget: `{{Table1.selectedRow.Investment_Fund}}`\nName of Investor Widget: `{{Table1.selectedRow.Name_of_Investor}}`\nLocation Input Widget: `{{Table1.selectedRow.Location}}`\n\nSimilarly, add the default text to the other widgets. Now, when a row is selected in the table you should have all the details of the selected investor in the investor detail container.\nNow, whenever we made changes in the input widgets and hit update details, the associated investor details should be updated in the Google Sheet. For this, let\u2019s write a new update API that\u2019ll help us update the values in the selected row of the Google Sheet. Follow the below steps:\n\nCreate a new API from the existing Google Sheets data source and set the query method to `Update Sheet Row`. This query method helps us update row data in the Google Sheet from Appsmith.\nName the API to `editInvestorDetail`\nNext, in the SpreadSheet URL property, add the link to our Google Sheet.\nThe Sheet Name will be `Investor Details` as named in our Google Sheet.\nThe Table Heading Row Index will be the row where the names of the columns are listed; in our case, this will be `1`,\nLastly, the Row Object takes a JSON object with keys set to the column names associated with the desired values. In our case, below is how the Row Object should look like:\n\n`{\n    \"rowIndex\":{{Table1.selectedRow.rowIndex}},\n    \"Investment Fund\": \"{{editFund.text}}\",\n    \"Location\": \"{{editLocation.text}}\",\n    \"Name of Investor\": \"{{editInvestorInput.text}}\",\n    \"Designation\": \"{{editDesignation.text}}\",\n    \"Interesting Portfolio Companies\": \"{{editPortifolio.text}}\",\n    \"Size of Fund\": \"{{editFundSize.text}}\",\n}`\nLastly, for the Update Details button, set the `onclick` property to Call an API and call the `editInvestorDetail` API. We should now be able to update the investor details by editing the necessary input widgets and clicking on the update button.\nDelete Data on Google Sheets from Appsmith\nFor the delete option, let's add a new column in the table and set the column to a button. Update the label as `Delete` so that we see a new delete button on each row in the table. Now let's go ahead and create a new Delete API on the Google Sheets data source.\n\nCreate a new API from the existing Google Sheets data source and set the query method to `Delete Row`. This query method helps us delete row data in the Google Sheet from Appsmith.\nName the API to `deleteInvestorDetail`\nNext, in the SpreadSheet URL property, add the link to our Google Sheet.\nThe Sheet Name will be `Investor Details` as named in our Google Sheet.\nThe Table Heading Row Index will be the row where the names of the columns are listed; in our case, this will be `1`,\nLastly, in the Row Index add the following code snippet:\n\n`{{Table1.selectedRow.rowIndex}}`\nThe `Delete row` method only takes in the `rowIndex`, hence we're passing this via the Table1 widget using the `selectedRow` property.",
    "tag": "appsmith"
  },
  {
    "title": "How to use filters on Appsmith table widget",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/how-to-guides/how-to-use-filters-on-appsmith-table-widget.md",
    "content": "\ndescription: In this guide, you'll learn how to use filters on the Table widget.\nsidebar_position: 3\n\nHow to use filters on Appsmith table widget\nSetting Up Appsmith\n\nCreate a new account on Appsmith (it\u2019s free!), if you are already an existing login to your Appsmith account.\nCreate a new application by clicking on the `Create New` button under the Appsmith dashboard.\nWe\u2019ll now see a new Appsmith app with an empty canvas and a sidebar with Widgets, APIs, and DB Queries.\n\nAdding Table Widget\n\nClick on the `+` button in the sidebar to add a new widget.\nSelect the `Table` widget. Drag and drop it into the canvas.\nYou can now see the Table widget in the canvas.\n\n\nUsing Filters on Table Widget\n\nClick on the `Filters` option on the Table widget. A filters popup opens.\nSelect the various filters you want to use on the Table widget.\nSelect the `Attribute` filter from the dropdown, which is the column from the table you want to filter.\nSelect the conditions you want to add to the filter from the dropdown.\nEnter the value.\nClick on the `Apply` button to apply the filter.\nYou can now see the filtered data in the Table widget.\n\n\nRemoving Filters on Table Widget\n\nClick on the `x` button on the left side of the filter that has been added to remove the filter.\nYou can now see the unfiltered data in the Table widget.\n\n\nGrouping Filters on Table Widget\n\nWhile a filter has already been added, you can also group the filters by adding a new filter.\nClick on the `Add Filter` button to add a new filter.\nSelect the `AND`/`OR` Condition from the dropdown.\nAdd the new filter following the same steps as above.\nClick on the `Apply` button to apply the filter.\nYou can now see the filtered data in the Table widget.\n",
    "tag": "appsmith"
  },
  {
    "title": "Writing JavaScript in Appsmith",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/how-to-guides/writing-javascript-in-appsmith.md",
    "content": "\ndescription: JavaScript guide for building apps on Appsmith,\nsidebar_position: 2\n\nWriting JavaScript in Appsmith\nAppsmith is a low-code tool that lets us build tools and user interfaces. We\u2019ll be using JavaScript to interact with the UI Widgets, APIs, and Database Queries during this process of building applications. In this guide, we\u2019ll be looking at some of the basic operations with JavaScript to help us understand how easy and fun building apps on Appsmith is!\nMustache Syntax\nThe Mustache syntax helps us write JavaScript anywhere in Appsmith. For example, say if you want to render the data onto a table from API, on Appsmith, you can drag and drop the table widget, open the property pane and inside the table data, use mustache syntax to call the API.\n`javascript\n{{ myApiEndpoint.data.field1 }}`\nBinding Data\nBinding data into UI is one of the most common and frequently used operations when building User Interfaces. Now, you\u2019ll look at how you can bind data into charts/table widgets inside Appsmith. For this, we\u2019ll be using a sample query to fetch data from the mock database and then bind it to the widget.\nNow create an application under your personal workspace and create a new DB Query by clicking the `+` icon next to it. Rename the query to `get_products`.\n\nYou can rename any page name/widget name/query name by simply double-clicking on the existing one.\n\nSelect the Mock database and write a new query under it, in here, we\u2019ll be using a database of the online store. Now fetch all the products of the store by using the following SQL Query:\n`sql\nselect * from products`\nExecute the query by clicking on the Run button, you should see all the products in the Query response section.\nNext, add the response; let\u2019s bind this query to the table widget; you can now go to a page and drag and drop a table widget. You can access the table\u2019s property pane by clicking on the cog icon on the top-right of the widget. Now let\u2019s write JS in the Table Data section to access the query. For this, you should be using the Mustache syntax:\n`javascript\n{{ get_products.data }}`\nThere you go! You should see all your products inside the table. If you want to display only specific products, you can implement a map function and return the necessary items. For example, the below JS code only shows the product name and the price in the table.\n`javascript\n{{ get_products.data.map(item =>({name:item.productName, price:item.mrp})) }}`\nAccessing Widget Property / State\nWhile building UI you might often need to access the state of the different properties for different things. For example, say you want to display the details of a particular row in a table, you\u2019ll need to write some code. Now, look at how you can utilise JS in Appsmith and access the state and properties of the widget.\nFor this, let\u2019s use the same table and display all the details of the product when clicked on a row by accessing the state.\nFirst, drag and drop the required text widgets. Now inside the text widget property pane, under the Text property add the following JS snippet:\n`javascript\n{{ Table1.selectedRow.productName }}`\nNow, when you click on the random row\u2019s in the table, you can see the text automatically changes its state to the product name. In this way, you can access and manipulate the state inside the widgets. Similarly, you can also, add images and many more for your applications.\nPerforming Actions\nAppsmith loves JavaScript! Whenever you want to write custom logic for certain action calls or API calls, you can customise with simple JS. For example, say, you want to show an alert whenever you\u2019re searching through tables. You can select the row and can add logic to the `onSeachTextChanged` property.\n`javascript\n{{ showAlert(Table1.searchText) }}`\nWith this, whenever you\u2019re searching for anything on the tables, you\u2019ll see an alert with the value you\u2019ve entered in the search input.\n\nManually triggering APIs/Query\nYou might often want to invoke your API Queries on certain actions. For example, say you\u2019re APIs or DB Queries are updating from time to time and wanted to add a refresh button, you can simply do it with JS in Appsmith.\nNow, let\u2019s quickly add a button that will execute the Query when clicked. Next, open the button\u2019s property pane; you\u2019ll find the onclick property under the actions section. Now add a new action and choose to execute a DB Query option; you\u2019ll find all the already defined queries in the application. Select the `get_produts` query you\u2019ll see JS already added to the onclick action.\n`javascript\n{{get_products.run()}}`\nIn this way, you can customise all the actions on Appsmith for different widgets.\nMultiline JavaScript\nSo far, we\u2019ve seen simple JS operations, but say if you\u2019re working on some API integrations or some different data sources, you might need to write some huge JS code. With Appsmith, you can do that within the same mustache syntax. Here\u2019s a simple example of using multi-line code in Appsmith.\nIn our `Table1`, where we are binding all our products data, we\u2019ve simply used `get_products.data()` method. Instead of that, you can also write a function, try the below code snippet:\n`javascript\n{{ \nfunction(){\n    const data = get_products.data.map(item => ({\n        name: item.productName,\n        price : item.mrp\n        }));\n     return data;\n    }\n}}`\nIn this way, you can also write multi-line code within Appsmith! For more information on writing code in Appsmith, please refer to this page Writing Code.\nMaking Table Columns Dynamic in Appsmith\nIn Appsmith, suppose you want to implement dynamic columns (show only necessary columns based on selection) in a table, you could write simple JavaScript inside the `Table Data` property. With this, you could show only columns that are selected from a dropdown.\n\nFor example, say your table has the following in the Table Data:\n`[\n  {\n    \"step\": \"#1\",\n    \"task\": \"Drag a Table\",\n    \"status\": \":white_check_mark:\",\n    \"action\": \"\"\n  },\n  {\n    \"step\": \"#2\",\n    \"task\": \"Create a Query fetch_users with the Mock DB\",\n    \"status\": \"--\",\n    \"action\": \"\"\n  },\n  {\n    \"step\": \"#3\",\n    \"task\": \"Bind the query to the table\",\n    \"status\": \"--\",\n    \"action\": \"\"\n  }\n]`\nNow you wanted to show columns based on the selection in a dropdown, let's add a dropdown with values that are the same as columns in the table.\nDrag and drop a Dropdown widget onto the canvas and add the following to the `Options` List and make it a Multi-Select dropdown in the `Selection Type` property.\n`[\n  {\n    \"label\": \"task\",\n    \"value\": \"task\"\n  },\n  {\n    \"label\": \"status\",\n    \"value\": \"status\"\n  },\n  {\n    \"label\": \"action\",\n    \"value\": \"action\"\n  }\n]`\nLastly, update the code in the table widget, map the data in the `Table Data` property using a mustache syntax and only return the data that's selected from the dropdown widget:\n`javascript\n{{\n[\n  {\n    \"step\": \"#1\",\n    \"task\": \"Drag a Table\",\n    \"status\": \":white_check_mark:\",\n    \"action\": \"\"\n  },\n  {\n    \"step\": \"#2\",\n    \"task\": \"Create a Query fetch_users with the Mock DB\",\n    \"status\": \"--\",\n    \"action\": \"\"\n  },\n  {\n    \"step\": \"#3\",\n    \"task\": \"Bind the query to the table\",\n    \"status\": \"--\",\n    \"action\": \"\"\n  }\n].map((row) => {\nconst obj = {};\nDropdown1.selectedOptionValues.map((val) => { obj[val] = row[val]  });\nreturn obj;\n })\n}}`",
    "tag": "appsmith"
  },
  {
    "title": "How to use MS SQL as a data source on Appsmith",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/how-to-guides/use-mssql-as-data-source.md",
    "content": "\ndescription: Guide on how to use MsSQL as a data source on Appsmith\nsidebar_position: 11\n\nHow to use MS SQL as a data source on Appsmith\nThis guide assumes you have basic familiarity with Appsmith. If you don't have much understanding, I would suggest creating an account and trying it out. I assure you that it is straightforward to get acquainted with quickly.\nMS SQL\nMS SQL or Microsoft SQL Server is a relational database management system developed by Microsoft. It is a database server developed by Microsoft which provides all the primary functionalities of the SQL version you might have used. MsSQL databases can be queried using the standard T-SQL syntax.\nIn this guide, you will learn how you can use MsSQL as a data source for your Appsmith application.\nWhat to build\nSince everybody likes Pok\u00e9mons, let's build a simple application that will show you a few Pok\u00e9mons with their images, names, and types. It's simple enough for our tutorial and should help explore all the essential things to learn here. You can check out the complete application from this guide here.\nLet's start with setting up an MsSQL server.\nInitial setup\nLet's quickly first see how you can integrate MsSQL in Appsmith. There are not many steps or any complicated ones. Just head to Appsmith, and let's say for the scope of this guide, you're building a new application which you want to get data from your MsSQL server.\nSo, click on the `New` button to create a new application. Then click on `Generate from a Data table` option. You should be prompted with a screen that would ask you to connect the database of your choice. It should look something like this:\n\nNow you can click on `Connect new Datasource` and find `MsSQL` from all the available database options.\nNow you will be greeted with a page to fill in your credentials for your MsSQL server. You should fill in the host/port along with your database name and login credentials. The unfilled screen for this would look something like this:\n\nOnce you fill in all the details, you can click `Test` from the options below to test your connection. It will let you know if Appsmith is successfully able to connect to your database or not.\nIf you're able to test your connection successfully using the `Test` button, you're ready to hit `Save` and save your connection on Appsmith.\nQuerying the database\nSo, now that you're done with setting up a connection to your database server, you should be able to see a screen like this:\n\nFrom here, let's try writing a query for our application. For our database, I have already created a table `pokemon` which already has the data that we need to query.\nQuerying in Appsmith is very simple; click on the `New Query` button from above and select which kind of query operation you're going to have. For our use case, we're just reading from our database, so I would go ahead and use `Select`.\nNow for your convenience, Appsmith does all the input sanitization and helps you query your database without worrying about any malicious data. In our case, we're just reading from the database, so our query will also be very simple, and that will be:\n`SELECT * FROM pokemon;`\nYou can put your query in the Query box and the screen should look like this:\n\nFrom here, you can run your query, name your query something to remember and test it. If you need more information regarding querying MsSQL in Appsmith, you can refer to this great piece of article.\nOnce you write your query, it will be saved in the left-hand side menu with the identifier name of your choice and would look something like this:\n\nDisplaying the data\nNow that we have connected our query and database to our Appsmith application, it's time to display the data. Let's start with a simple way to go on to this.\nHow is the data stored in MsSQL databases? Tables. What would be the easiest way to see that in our application? Yep, using a table.\nSo let's try displaying our query data in a single table. For that, go to the page in Appsmith and drag and drop a Table widget. Now click on the settings icon and all you have to do is replace the table data value with your query data. In this case, the identifier of my query is `main_query` so I will just put `main_query.data` inside `{{}}`.\nIt looks something like this: \nAnd when you reload your page, voila, your query data will be there in a table!!!\nEasy, right?\nSo, let's now try to display the data in a more good-looking way, like in a List.\nFor that, first of all, let's drag and drop a List widget in our UI. Now that we have the UI, let's set up the data. Again, simple click on the settings icon of the List widget and replace the `Items` value with `{{your_query_identifier.Data}}`, in my case, that will be `{{main_query.Data}}`.\nBut the only thing more that you have to do this time is set up the image and text widgets inside the List widget to the values they are expected to show. Since the image should render `URL` part of each item, we set it to `{{currentItem.URL}}` in the settings of Image1 in the List. Similarly, the text widgets will be updated to `{{currentItem.Name}}` and `{{currentItem.Type}}`.\nPlease note that these are the columns in my database table that I get from the query; they might differ depending on your data. All we want is the List items to show the data that it is getting from the query data that we set up earlier.\nOnce this is done, after a bit of styling (adding colors to text), you will have something that looks like this:\n\nOh, also, since all data is fetched from your database, naturally, adding more data will automatically show more data in your application. Like this:\n\nWriting data\nNow that you know how to read data from your MsSQL database and display relevant data in your Appsmith application, let's now focus on writing to your database. First of all, if you have chosen `Read only` for your database connection in Appsmith, as you can see in one of the images below, you should choose `Read/Write`.\nFor this, let's update our application by adding two new buttons which update a new `boolean` column named `Valid` in our database.\nThis allows the user to tell if the data is correct and send this information to the database. This is a bit straightforward thing to demonstrate how you can write/update data in your database from your Appsmith application.\nSo, first let's drag and drop two buttons for sending `true` and `false` to our database. Our app now looks like this:\n\nNow, let's write queries for actually updating the stuff. Go to `Datasources` from your left-hand side menu and click on `New Query` like before. This time we would be choosing `Update` in the next step.\nNow our updating queries will be this in our case: For `true`:\n`UPDATE pokemon\n  SET Valid = 'TRUE'\n  WHERE Name = {{ List1.selectedItem.Name }};`\nFor `false`:\n`UPDATE pokemon\n  SET Valid = 'FALSE'\n  WHERE Name = {{ List1.selectedItem.Name }};`\nPlease note that I am using `Name` as a primary key in my database. The `List1` is the List widget in our application. `List1.selectedItem.Name` refers to the `Name` of `selectedItem` from the List widget.\nI named these queries `update_true` and `update_false` respectively in our case here.\nNow head back to your page and click on the settings icon of the buttons you added. Click on `onClick` and choose `Run Query` option and choose the query that you want to run when the button is clicked.\nIn our case here, I am running `update_true` from the green button, click and `update_false` from the red button click.\n\nTo display the value of `Valid` column, I also have added a switch to be `on` if `Valid` is `true` otherwise `false`. And the complete application now looks like this:\n\nNow, if you click the green confirm button, the switch will be set to on, and on clicking the red button, the switch will be set to off. You can go ahead and check out the entire application here.",
    "tag": "appsmith"
  },
  {
    "title": "How to use Redis as a Datasource on Appsmith",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/how-to-guides/how-to-use-redis-as-a-data-source-on-apppsmith.md",
    "content": "\ndescription: This guide helps you to connect your Redis database to Appsmith\nsidebar_position: 13\n\nHow to use Redis as a Datasource on Appsmith\nIntegrating the Redis datasource into Appsmith\nTo connect your Redis Database instance to Appsmith as a datasources\n\nOpen Applications Page, select the application to want to configure and click on Edit.\nOn the navigation panel to the left side, Click on + next to Datasources Tab.\n(Optional) Now click on + Create New, if you already have connected a Datasource previously.\nUnder Databases, Select Redis\nEnter a name to your Redis datasource (e.g. My Redis Database)\n\nEnter your Redis Database configurations inside the Connection section.\n\nEnter \"0\" as Database Number, if you are connecting to the database for the first time.\n\n\n\n7. Enter your username and password to your Redis Database under Authentication section.\n8. Once done, click on Save and then click on Test.\n9. If the Pop up notifies you that My Redis Database datasource is valid, that means your Redis Database's configuration is correct and is to ready to connect to your Appsmith Application. If it Pop up notifies you about any other error, please check your Redis configuration.\n\n\n\nRefer to Redis Datasource documentation for more information.\n\nUsing Redis as a Datasource\nCreate keys\nLets create some keys in your Redis Database.\n\nAfter you have added your Datasource, click on New Query +.\n\n\n\nEdit your Query name, from Query1 to CreatingKeys\n\nFrom the Query field, create some keys (Enter one by one).\n`SET DEVELOPER \"me\"`\n`SET ENV \"DEV\"`\n`SET DATE \"Thursday, 7 October, 2021\"`\n\n\n\n\nDone. We successfully created some keys.\n\nFetching Keys\nTo fetch keys from Redis Database, lets run queries.\n\nAgain create a new query, and name it as GetKeys\n\nFrom the Query field, lets fetch our existing keys.\n`GET DEVELOPER`\nResponse : me\n`GET ENV`\nResponse : dev\n`GET DATE`\nResponse : Thursday, 7 October, 2021\n3. Once you fetch all keys successfully,then you are ready to proceed further.\n\n\nBinding the data to a widget\n\nAfter running each query, select your desired Widget Type, and click to Add to canvas\n\n\n\nNow, change the widget name, and its attributes, according to your needs.\n\n\n\nDone, not that hard right?\n\nDemo Canvas\n",
    "tag": "appsmith"
  },
  {
    "title": "How to Use Prepared Statements?",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/how-to-guides/how-to-use-prepared-statements.md",
    "content": "\nsidebar_position: 16\nHow to Use Prepared Statements?\nA Prepared Statement is a feature provided by Database Management Systems (DBMS) to execute the same statement with dynamic data bindings repeatedly and efficiently. It uses a pre-compiled SQL code without data to speed up the execution.\nLet's take a closer look at the prepared statement below:\n`[Select id, name, email from users where id = ] {?};`\nThe SQL code enclosed in the square bracket `([ ])` will be pre-compiled, and the Question Mark (?) enclosed in the curly braces `({})` shows the data bindings appended at runtime based on the different values supplied by the calling application.\nIn this guide, you'll learn how to use prepared statements in Appsmith and some examples for different datasources. You'll also learn when and when not to use prepared statements.\nTo understand how prepared statements work in Appsmith, let's first understand how prepared statements work at a database level.\nHow Do Prepared Statements Work?\nA prepared statement workflow consists of three stages: Prepare, Process, and Execute.\nPrepare\nIn the prepare stage, a statement template is sent to the database server. In this template, some values are left unspecified and called parameters labeled using a question mark (?) sign.\nFor example, in the below statement, the text in the square bracket**`([])`** is the statement template, and question mark signs in curly braces **`({})`**are the parameters supplied at runtime.\n`[Insert into users(name, email) values ]{(?,?)};`\nProcess\nThe database server parses, compiles, optimizes, and stores the result without executing the statement template. The statement is optimized and ready to be executed whenever the parameters (labeled with question marks) are supplied.\nExecute\nWhenever the parameters are supplied for the given prepared statement, the database binds the values to the statement and executes it. The database can execute the statements as often as the application triggers by supplying the same or different parameters.\nWhy Should You Use Prepared Statements?\nThe benefits of using Prepared Statements are:\nEfficiency\nThe prepared statement uses a pre-compiled SQL code, so the code is not compiled for every execution run. It speeds up the execution, thus enhancing efficiency.\nSecurity\nThe prepared statement is a parameterized and reusable block of code. It forces the user to write the SQL command and send the user inputs data separately. Thus, the data bindings defined in the prepared statements are sent to the server to execute the pre-compiled code block and generate the response accordingly. Due to this, a prepared statement provides a secured environment and avoids SQL injection, that is the most common web hacking technique.\nPrepared Statement in Appsmith\nAppsmith supports using prepared statements by converting the user query into a parameterized query by replacing the bindings. That means the query created on the Appsmith will have bindings for reading the widget values selected by users. Appsmith internally replaces these widget bindings with question marks('?') and translates Appsmith queries into Prepared Statements.\nFor example, the query created on Appsmith looks as below:\n`SELECT * FROM users where id = {{Table1.selectedRow.Id}};`\nAppsmith internally replaces `{{Table1.selectedRow.Id}}` with a question mark `(?)`. The payload inserts params one by one, ensuring that the bindings get properly escaped and sanitized before the query is sent to the database for execution. Thus, translating an Appsmith query into a prepared statement.\n:::info\nAppsmith first sanitizes each input so that the apps you build on Appsmith are protected against SQL injection.\n:::\nFor example, your query has multiple bindings as below:\n`SELECT * FROM users where id = {{Table1.selectedRow.Id}} and name = {{Table1.selectedRow.name}};`\nFor the above query, the first binding for Id `{{Table1.selectedRow.Id}}` is set as the first parameter and second binding for name `{{Table1.selectedRow.name}}` as second parameter.\n:::info\nThe multiple bindings added to the Appsmith queries are translated into the number of parameters that will be supplied to a prepared statement.\n:::\nPrepared Statement Support\nYou can use prepared statements for the below datasources on Appsmith:\n\nMS SQL\nMySQL\nPostgreSQL\n\nEnable Prepared Statement\nTo use prepared statements for a datasource, you'll have to enable the prepared statement for query execution.\n\n:::info\nWhenever you create a new query, the prepared statement setting is enabled. You can turn it off manually if you wish to.\n:::\nYou can choose to enable or disable the prepared statement by using the `Use Prepared Statement` toggle available on the Query screen or navigate to the Settings tab where the same toggle `Use Prepared Statement` is available.\nUsing a toggle on the Query tab\n\nUsing a toggle on the Settings tab\n\n:::info\nBoth the toggles `Use Prepared Statement`work in sync, and you can choose any to enable or disable the prepared statements.\n:::\nThe above datasources have some syntactic changes in query creation. However, you can enable or disable the prepared statements for almost every scenario, as illustrated below.\nWhen to Use Prepared Statements in Appsmith\nYou can use prepared statements when doing dynamic data bindings in the `where` clause. Remember to keep the query before the `where` clause static and provide the column names used to filter the data. However, the data can be dynamically set based on the user's inputs.\nAs shown in the code snippet below, you can dynamically add the data binding embedded in the mustache sign**`({{}})`** based on user input.\n`SELECT * FROM USERS WHERE ID = {{Table1.selectedRow.Id}}`\n:::info\nYou can only have bindings for the data supplied to the columns in the where clause while using prepared statements.\n:::\nBelow are some of the example use cases showcasing when and how you can use prepared statements:\nSimple Prepared Statement\nYou can use prepared statements whenever you want to perform a simple Create, Read, Update or Delete (CRUD) operation, which manipulates database table data with the dynamic data bindings.\nFor example, you want to create a user record into the `users` table for user registration, and capture the details from a registration form available on Appsmith for your user registration application. You can create a simple insert query to capture the user's input and store the record in the `users` table by enabling prepared statements.\n`Insert into users (name, email) values({{userRegistrationForm.data.name}}, {{userRegistrationForm.data.email}});`\nHere, `userRegistrationForm` is the name of the form widget, and `name` and `email` are the names of the input widget embedded into the form.\n:::info\nYou can use join queries or subqueries to have dynamic data binding as long as the query is static and only data bindings are added to the where clause.\n:::\nData Type Cast\nAppsmith out-of-the-box handles the data type casting based on the type of the data supplied for a column as a data binding.\nFor example, you are updating a user's data for the location. You are updating the latitude and longitude for the same. The latitude and longitude have values like `42.9756` and `105.8589` respectively.\nThe data supplied for latitude and longitude suggests that the column could have a floating data type. If the latitude and longitude have a floating data type in your `users` table, the updates will happen seamlessly with prepared statements being turned on. However, suppose the data type of latitude and longitude is anything other than float, say text. To use prepared statements, you'll have to typecast the values manually in your queries, as shown in the below code snippet:\n`// you can see that **:: text** is used for latitude and \n// longitude to type cast the column data\nUpdate users set latitude = {{userUpdateForm.data.latitude}} :: text, \nlongitude = {{userUpdateForm.data.longitude}} :: text\nwhere id = {{userUpdateForm.data.id}}`\nIn Clause\nYou have a search functionality allowing users to select different statuses to filter the result. A user can select more than one status to view the data. You translate this into a select query and use an in clause which takes up an array of data, and would write a query as below:\n`SELECT * from users where status in ({{userStatus.selectedOptionValues}})`\nHere, `userStatus` is a MultiSelect widget. There are two scenarios for the `in clause` queries; You don't know how many options the user will select, so you will supply a dynamic length of an array, or you know the data bindings and so supply a static length of the array to the in clause.\nDynamic Array Length\nWhen you supply an array with varying lengths, you generate a dynamic `in clause` with indefinite bindings determined at runtime. The problem with using an array for generating a dynamic `in clause` is that no definite values are available as selected options are not fixed and may vary. Because of this, the binding to the number of parameters with the query will fail.\nTo use prepared statements for queries which dynamic data bindings for in clause, you can use a query as below:\n`SELECT * from users where status in = ANY ({{userStatus.selectedOptionValues}})`\nThe above query will bind the parameters and sanitize the values for your queries.\n:::info\nThe `= ANY` combination is supported on PostgreSQL, but MySQL doesn\u2019t support it. For MySQL, when you have a dynamic array binding, you'll have to use it by disabling prepared statements.\n:::\nStatic Array Length\nWhen you know that the `in clause` will have a fixed number of data bindings you capture by different widgets, it is static. Here, you are aware of the number of data bindings present for an `in clause`. The prepared statement can work for such bindings, and you can write a query as follows:\n`SELECT * from users where status in ({{userActiveStatus.text}} , {{userInActiveStatus.text}})`\nHere, the `userActiveStatus` and `userInActiveStatus` are two different text widgets that are added as data binding for in clause.\nWhen Not to Use Prepared Statements in Appsmith\nYou can choose to turn off the prepared statement use when your query falls under one of the below criteria:\nDynamic Table Name\nYou are generating a table name dynamically based on some criteria in your code logic and then supplying it as a binding to the query.\n`Select * from {{Generated_Table_Name.text}}`\nIn this query, you read the table name from a Text widget (Generated_Table_Name), and as the query does not have a static block that tells which table to refer to the prepared statements fail to execute the binding. In such cases, you can turn off the prepared statements and continue to use the query to generate responses.\nDynamic Queries\nYou generate the query on the fly based on some parameters and then execute it. For example, `{{Query_to_Execute.text}}` where the Text Widget (Query_to_Execute) has the query that will be executed, which could be generated on the fly based on some logic in the code. As the static query that will be executed is not available for pre-compilation, the prepared statements fail to execute. For such scenarios, you can disable the prepared statements and continue to use the query to generate responses.\nDynamic Where Clause\nYou want to generate a where clause based on some code logic. For example, you have a search feature where a user can select some parameters to filter the data. If the user selects particular criteria, you add that to the where clause to filter the records. The user may choose not to add the parameter, so the where clause will not have a column for filtering. It means you are dynamically generating the column name bindings and the data for the columns based on the user's input.\nFor such scenarios, the query can't be pre-compiled as there are too many unknowns, and every run could result in a different query, so the prepared statements fail to execute. You can toggle off the prepared statement and continue to use the query for result generation.\nLook at the code snippet below, where you are generating a `where` clause with a null check.\n`SELECT * FROM users WHERE {{ !!Input1.text ? \"name =\" +  Input1.text : \"name IS NULL\" }}`\nFor the above scenario, also turn off the prepared statement. The query can\u2019t be pre-compiled and will be evaluated as a new query for every run, as the where clause is dynamically generated and evaluated at runtime.\n:::info\nA prepared statement requires you to supply a static part of the query to understand the type of operation (Create, Read, Update or Delete) performed on the database table (Table name) and the columns that will be used in the where clause to filter the data from the database table.\n:::\nQuick Tips\nA few quick tips to remember so that you can quickly steer it through when using prepared statements:\n\nThe commented code blocks in your queries should not have any bindings, as when you enable the prepared statement, it translates all the bindings. As the commented block has bindings, the translation will fail, and you will not be able to run the queries. To avoid this, remove the mustache `{{}}` sign around the binding whenever you are commenting code, and the prepared statement will work.\nIf you are using a dynamic array to supply the `in clause` and using PostgreSQL, then you can use `= ANY`. However, turn off the prepared statements to run the query if you are on MySQL.\n\nConclusion",
    "tag": "appsmith"
  },
  {
    "title": "How to build auto-generated forms using List widget",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/how-to-guides/build-auto-generated-forms-using-list-widget.md",
    "content": "\ndescription: Guide on how to build auto-generated forms using the list widget\nsidebar_position: 4\n\nHow to build auto-generated forms using List widget\nThis how-to guide assumes you know how to use forms and basic knowledge around building simple applications with Appsmith.\nList widget\nThe List widget displays a paginated list of similarly structured data. It's used to repeat a template based on the large data (or a collection of objects). The template is just a container widget that repeats itself.\nWhy use the List widget when you have the Form widget\nThe List widget might come in handy when you have to build the same form multiple times. It will help you auto-generate forms for all the items in the list when you just make the form for the first item.\nWhat does that mean exactly?\nLet's say you have to build a Pok\u00e9mon guessing app, and you want to show 3 Pok\u00e9mon images at a time to a user and want them to guess the name. You can build it using three separate forms with input fields and buttons. And let's not forget that you have to connect each form to your data that I am guessing you're getting from your database or an API.\nDoesn't that sound tedious? Building the same thing thrice and then connecting everything separately. We are doing the same thing thrice. What if you wanted to show 10 Pok\u00e9mon images at a time? Are you eager enough to do this process ten times? Well, let's not, since we have the List widget.\nThe List widget, in this case, will allow you to build a form for the first time, and it will auto-generate the other two (or remaining items in the list) forms by copying what you did in the first one. Doesn't this sound much less tedious? You'd have to match the spacings and everything just once, and you will get everything ready.\nSounds cool, right? Let's see how we can do this.\nBuild the List form\nSince we already spoke about building a Guess the Pok\u00e9mon form, let's try building that with 3 Pok\u00e9mon at a time. For that, let's first drag and drop a List widget to your application. It should look something like this:\n\nNow, delete the unnecessary widgets inside the list widget and drag an input widget in the list's first item. It should do the same to all the remaining items (2 in our case) of the list. So now your app should look something like this:\n\nNow, let's add a button to make it look something like a form. And also, fix the spacing a bit. And that should be enough to generate the UI of our application and should look something like this:\n\nNow wasn't that easy?\nDo you want to make this for five items now? No problem, the List widget has again got you covered. Just click the settings icon next to your list widget and add more items to your list. It will automatically generate the forms for those as well.\nYour old value under the Items section of that settings should be:\n`[\n  {\n    \"id\": \"001\",\n    \"name\": \"Bulbasaur\",\n    \"img\": \"http://www.serebii.net/pokemongo/pokemon/001.png\"\n  },\n  {\n    \"id\": \"002\",\n    \"name\": \"Ivysaur\",\n    \"img\": \"http://www.serebii.net/pokemongo/pokemon/002.png\"\n  },\n  {\n    \"id\": \"003\",\n    \"name\": \"Venusaur\",\n    \"img\": \"http://www.serebii.net/pokemongo/pokemon/003.png\"\n  }\n]`\nI added two more items to this and made it this:\n`[\n  {\n    \"id\": \"001\",\n    \"name\": \"Bulbasaur\",\n    \"img\": \"http://www.serebii.net/pokemongo/pokemon/001.png\"\n  },\n  {\n    \"id\": \"002\",\n    \"name\": \"Ivysaur\",\n    \"img\": \"http://www.serebii.net/pokemongo/pokemon/002.png\"\n  },\n  {\n    \"id\": \"003\",\n    \"name\": \"Venusaur\",\n    \"img\": \"http://www.serebii.net/pokemongo/pokemon/003.png\"\n  },\n  {\n    \"id\": \"004\",\n    \"name\": \"Charmandar\",\n    \"img\": \"https://www.serebii.net/pokemongo/pokemon/004.png\"\n  },\n  {\n    \"id\": \"005\",\n    \"name\": \"Charmeleon\",\n    \"img\": \"https://www.serebii.net/pokemongo/pokemon/005.png\"\n  }\n]`\nAnd Here's how the application looked like:\n\nAfter this, all you need to do is add what you want to do on submitting the form. You can do that the same way you did in the Form widget, by updating the action events. I assume you know it better, and if you need a refresher, here's a good resource.\nYou can also check out the application that I built here.",
    "tag": "appsmith"
  },
  {
    "title": "How to Use Notion as a Database on Appsmith",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/how-to-guides/use-notion-as-database-on-appsmith.md",
    "content": "\ndescription: Guide on how to use Notion as a Database on Appsmith\nsidebar_position: 12\n\nHow to Use Notion as a Database on Appsmith\nThe guide presumes that you are primarily familiar with Appsmith and builds further on integrating Appsmith with other tools. In case you don't have much understanding of the core concepts of Appsmith, it is recommended to create an account and try implementing them.\nNotion\nNotion, as the official docs imply, is an application that provides components such as notes, databases, wikis, calendars and reminders. It enables users to connect these components and create their own systems for knowledge management, taking notes, managing data, project management and much more.\nIn this guide you will learn to create a Notion Database and use it as a data source in your Appsmith application.\nBuilding A Demo Application\nTo make this guide 'easy to follow', we will try to build a simple application which fetches data from Notion database.\nLet us begin with configuring the Notion API.\nSetting Up A Notion Integration\nFirst sign up for a Notion account(if you already have one, log into your account) here. Choose a Workspace to work with or create a new one specifically for this application. In the left navigation bar click on the `Settings & Members` when a new settings modal appears select `Integrations` under Workspace.\n\nThen choose `Develop your own integrations` and you will be redirected to your integrations page.\n\nClick on `New Integration` and give your integration a name and logo(if you want to). Also mention the workspace that you want to associate with the integtation. Click on `Submit` and you will be receiving a secret key, make sure to copy the secret key and store it safely. We will be using the secret key to connect the integration with third-party applications.\n\nSetting Up A Notion Page\nWe will create a Database to store the records to be displayed on our application. The table may contain the following fields:\n`Movie Name: Title Field\n Release Date: Date Field\n Cast: Text Field\n IMDb Rating: Text Field\n link: Link Field\n Poster: Image Field`\nAdd values to the table. This page will create a mock database that can ve accesses from our Appsmith application.\n\nBuilding The Application On Appsmith\nLogin to your Appsmith account or Sign up for a new account, if you don't already have one. The next step is to create a new application under a workspace by clicking on the `+ NEW` button on the top right corner.\n\nChange the default name to a name of your choice.For Instance, I am using the name, 'Movicon'. You shall now see Widgets, Datasources and Pages on the left navigation bar. we can use these compomnents in our application. We will create a Notion API.\n\nClick on the `+` icon next to Datasources option and then in the `+ Create New` section search for APIs and and click on `+ Create New API` option. Give the API a suitable name such as 'notion_api_for_movicon'. Then add url of the Notion Database.\n`https://api.notion.com/v1/databases/DB_ID/query`\nReplace the 'DB_ID' with the database id of your Notion Database. Which can be fetched from the url.\n`https://www.notion.so/myworkspace/a8aec43384f447ed84390e8e42c2e089?v=...\n                                  |--------- Database ID --------|`\nAdd the following Key-value pairs in the Headers tab:\n`Authorization: 'Your secret key'\nNotion-Version: 2021-05-13\nContent-type: application/json`\nIt should look something like this\n\nHit run to see all the data from your Notion Database in the Response Body panel.\nFormatting The Fetched Data\nNow we need to display the data that we have fetched in a presentable format. And this can be done using the UI widgets provided by Appsmith. We need to follow some easy steps to bind the Notion API contaning data into a table. First, expand the Page1 dropdown menu and then click on the `+` icon beside `Widgets` option. It lists down different UI widgets that can be used to build our aaplication's UI. Select the 'Table' widget then drag and drop that onto the canvas. Something like this is visible:\n\nTo include response from the API in this table use the mustache syntax to write JS in Appsmith.\n```\n{{\nnotion_api_for_movicon.data.results.map(\n    (item) => {\n        return (item.properties)\n    })\n}}\n```\nNow that we have received data in the table, we can add more widgets for each attribute of the data records from the UI widgets list. You can add Image widget for the Poster field and Text widget for other fields. To set the property of the widgets, next to the widget options add code snippets to fetch values of respective attributes from the array of data fetched from the API.\n`{{ currentItem.MovieName.title[0].text.content }}`\nFor Release Date set the property\n`{{currentItem.ReleaseDate.date.start}}`\nFor cast and Imbd ratings\n`{{currentItem.cast.rich_text[0].text.content}}`\nand\n`{{currentItem.imbdratings.rich_text[0].text.content}}`",
    "tag": "appsmith"
  },
  {
    "title": "How To Guides",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/how-to-guides",
    "content": "\nsidebar_position: 2\nHow To Guides\nThis document presumes you are familiar with the core concepts of Appsmith and expands upon using Appsmith in real-world scenarios.\nGuide Reference\n\nOAuth2 authorization for Google Sheets\nUploading a file to S3\nWriting JavaScript in Appsmith\nHow to work with Google Sheets on Appsmith\nHow to use MS SQL as a data source on Appsmith\nHow to use filters on Appsmith's table widget\nHow to build auto-generated forms using List widget\nHow to use Notion as a Database on Appsmith\nHow to use Redis as a data source on Appsmith\nHow to use Redshift as a Data Source on Appsmith\nHow to use ElasticSearch as a data source on Appsmith\nHow to use JS objects within Appsmith?\n",
    "tag": "appsmith"
  },
  {
    "title": "Upload / Download Files from S3",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/how-to-guides/how-to-upload-to-s3.md",
    "content": "\nsidebar_position: 5\nUpload / Download Files from S3\nFiles can be uploaded to Amazon S3 using the S3 plugin and FilePicker Widget. This document presumes you have successfully connected to your S3 instance\n \nUploading a File\nTo upload a file\n\nDrag a Filepicker widget onto the canvas.\nCreate a new S3 query named upload_file to be run onFileSelected.\n\n\n\nSelect the Create File Action option for the query.\nThe action should be configured with the bucket name and relative path of the location you want to store the file. `ex. images/`any intermediate folders not existing will be automatically created.\nThe name of the file should be configured in the file path field. This value can be picked from the Filepicker using javascript`images/{{ Filepicker1.files[0].name }}`\nThe content can be configured using the entire file object of the Filepicker. `{{Filepicker1.files[0]}}`\nSelect a file from the file picker and hit upload.\n\n\nDownloading Files\nTo download a file\n\nDrag a Table onto the canvas and name it s3_files.\nCreate a new S3 query named fetch_files to fetch all the files in your bucket.\nConfigure it with the List Files action.\nSet the bucket name from where to fetch the files and run the query\n\nBind the response of the query to the Table using javascript in the Table Data Property `{{fetch_files.data}}`.\nNow your table should list all the files present in your S3 bucket.\n\n\n\n\nCreate a new S3 query named read_file to read file data from S3 bucket.\nConfigure it with the Read File action.\nSet the bucket name from where to fetch the file\nSet `path` to the file path selected in the table using the javascript expression `{{s3_files.selectedRow.fileName}}`\n\n\n\n\nTo download the file selected in the table\n\n\nClick on the `JS` button next to `onRowSelected` Action and write the\nfollowing JavaScript query:\n\n\n`{{read_file.run(\n()=>{download(atob(read_file.data.fileData),s3_files.selectedRow.fileName.split(\"/\").pop())})}}`\n\nClick any row in table `s3_files` to download the corresponding file from your S3 bucket.\n\n\n",
    "tag": "appsmith"
  },
  {
    "title": "OAuth2 Authorization for Google Sheets",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/how-to-guides/oauth2-authorization-for-google-sheets.md",
    "content": "\ndescription: How to add OAuth2 Authorization for Integrating Google Sheets into Appsmith\nsidebar_position: 8\n\nOAuth2 Authorization for Google Sheets\nThis document describes how to integrate google sheets with Appsmith using REST APIs. By the end of this guide, you will build UI/tools that can communicate with your google sheets. You\u2019ll also need to do some additional setup on the Google Cloud Platform to gather the necessary API keys for the authorisation access. You can follow the below steps if you need help with setting up the keys.\nGoogle Cloud Platform Setup\nGoogle Cloud Platform allows us to authorise third-party applications to access files in our Google Drive. This essentially involves all your docs, sheets, photos and other files in your drive folder. Below are the steps to create an OAuth application that can be given permission to access your google drive folder.\n\nIf you\u2019re an existing user, you can sign in to Google Console or sign up for a new free account.\nYou\u2019ll then be redirected to a console, where you\u2019ll have to create a New Project.\nNow, you\u2019ll have to generate OAuth 2.0 Client IDs; you can do this by navigating to the APIs and Services - Credentials section.\nNext, create a new app under the OAuth 2.0 Client ID section and give it a name.\nYou\u2019ll now find two keys, Client ID and Client Secret; you\u2019ll need these authorize appsmith to access your drive.\nNow add the following URIs under Authorised Redirect URIs: `https://app.appsmith.com/api/v1/datasources/authorize`\nLastly, you\u2019ll have to enable API\u2019s to communicate with different services. For example, if you\u2019re integrating google sheets, you\u2019ll have to search for Google Sheets using the top search bar and enable API.\n\n\nIntegrating Google Sheets with Appsmith\nIn this guide, you\u2019ll learn how to build an Appsmith dashboard that performs read, write and delete operations on a Google Sheet. Eventually, you can scale this dashboard to create CRMs or workflows that can communicate with necessary google sheets. Below are the steps to authorise appsmith to access your Google Sheet:\n\nFirst, you\u2019ll have to create a new application on Appsmith.\nA new application opens up an application titled `Untitled Application 1`; you can rename it by double-clicking on the existing one.\nNext, you\u2019ll have to create a new data-source to interact with Google Sheets: To do this create a new API by clicking on the `+` icon on the left navigation.\nAdd a new API and save it as a data source with the following URL: https://sheets.googleapis.com.\nYou can also set the name of the data source; in this case, we\u2019ll call it Gsheets.\nNow, navigate to the Gsheets data source and set the following configuration:\nAuthentication Type: Oauth 2.0\nGrant Type: Authorization Code\nAdd Authentication Token URL: https://oauth2.googleapis.com/token; this token allows users to verify their identity, and in return, receive a unique access token.\nAdd the Client ID and Client Secret from Google Cloud Platform\nLastly, set the following config:\nScope: https://www.googleapis.com/auth/spreadsheets\nAuthorisation URL https://accounts.google.com/o/oauth2/v2/auth\nAdd Auth params\n`prompt`: `consent`\n`access_type`: `offline`\n\n\nSave and Authorize the first time around!\n\n:::info\nThe Scope in OAuth 2.0 helps us to limit an application's access to a user's account, while the Authorization URL requests authorization from the user.\n:::\nWriting APIs to Interact with Google Sheets and Building UI\nThe authorization part is now complete, now let\u2019s write some APIs to perform some operations to access and manipulate the Google sheets.\nGet Data from Google Sheet\n\nNow go to the GSheets data source and create a new API\nRename it to getSheetData\nNow add the URL of the API and set the request type as `GET`:\n\nFirst, let\u2019s write a getSheetData API to show all the data in the sheet. Follow the below steps:\n`https://sheets.googleapis.com/v4/spreadsheets/<spreadsheet-id>/values/Sheet1`\n\nMake sure the URL you\u2019re requesting is from the data source.\nYou can find the spreadsheet-id on the Google Sheet URL, for example, say your Google Sheet URL is:\n\n`https://docs.google.com/spreadsheets/d/1H0fbiVzi0r-WbgPZvc2YwYmiICnu6xW6SJY4DlDu0/edit#gid=0`\nThe ID will be : `1H0fbiVzi0r-WbgPZvc2YwYmiICnu6xW6SJY4DlDu0`\n\nNow hit Run on the top right, you\u2019ll see the response in the response body below.\n\nNext, you can use this response and render it onto a table widget on Appsmith. Drag and drop a new table widget onto canvas by navigating to Widgets Pane.\nOpen the Table Settings and paste the following JS code in the Table Data property:\n`javascript\n{{ getSheetData.data.values.map((item, index) => ({...item, id: index})) }}`\nWith this, you\u2019ll be able to see all the data from Google Sheet showing up in the table widget on the Appsmith dashboard. Also, the logic used here is a straightforward map function on the API using JavaScript.\n\nOne powerful feature of Appsmith is the ability to write JS anywhere to access and manipulate things within the mustache syntax.\n\nPosting Data to Google Sheet from Appsmith\nLet\u2019s add a new feature where you can add new rows to Google sheet. For this, let\u2019s create a new Modal widget and add some input and text widgets to create a form with the necessary fields. Here\u2019s a screenshot of the how the fields look like:\n\nFollowing are the fields and widgets we\u2019ve used to create the above form:\n\nOrderData field: Input Widget (named as orderDataInput)\nRegion Field: Dropdown Widget (named as regionInput)\nRep Field: Input Widget (named repInput)\nUnits Field: Input Widget with Number (named as unitsInput)\nTotal Field: Input Widget with Number (named as totalInput)\n\nAwesome! Next, let\u2019s write an API to post values from the above input widgets to google sheets.\nFor this, you\u2019ll have to create a new API named `postNewEntry` and set the request method to post. Inside the URL, select the GSheets data source and use the following endpoint:\n`https://sheets.googleapis.com/v4/spreadsheets/<sheet-id>/values/Sheet1:append?valueInputOption=USER_ENTERED&includeValuesInResponse=true`\nNow, you\u2019ll have to pass the values that are being sent from the modal to this API, hence update the body parameter with the following JSON:\n`javascript\n{\n  \"range\": \"Sheet1\",\n  \"majorDimension\": \"ROWS\",\n  \"values\": [\n    [\n      \"{{orderDataInput.text}}\",\n      \"{{regionInput.selectedOptionValue}}\",\n      \"{{repInput.text}}\",\n      \"{{unitsInput.text}}\",\n      \"{{totalInput.text}}\"\n    ]\n  ]\n}`\nHere, you\u2019ve used the names of your widgets to reference the input forms in the Modal widget and are posting them through this endpoint.\nNext, you\u2019ll have to set the onclick property to the Submit Entry button on the modal. To do this, open the buttons property pane, select onclick and choose the Call an API option. You should see the available APIs on your page. Now select the `postNewEntry` API. To update the table with new entries, you can set the onsuccess property to call an API and use the getSheetData API. Below is a screenshot of the buttons property pane:\n",
    "tag": "appsmith"
  },
  {
    "title": "Get Container Logs For Appsmith Instances",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/how-to-guides/how-to-get-container-logs.md",
    "content": "\ndescription: Guide on how to get container logs for different Appsmith deployments\nsidebar_position: 18\n\nGet Container Logs For Appsmith Instances\nDocker\nThis guide applies to docker-compose and docker installations.\nAppsmith logs can be found in the stacks directory on the docker host\n`stacks/logs/`\nThe logs directory contains the sub-directories below for each service:\n`appsmithctl backend cron editor mongodb redis rts`\nIf you don\u2019t remember where your stacks directory is located, run\n`docker inspect -f '{{ (index .Mounts 0).Source }}\u2019 <your-appsmith-container-id>`\nAlternatively, you can run the commands below on your shell to create a zip file containing the logs.\n`bash\nappsmithContainerID=<your appsmith container id>\ntargetZipFile=<path to target zip file>\nservice=<choose one of: appsmithctl backend cron editor mongodb redis rts | leave blank for all services>\nstacksPath=$(docker inspect -f '{{ (index .Mounts 0).Source }}' $appsmithContainerID)\nzip -r $targetZipFile \"$stacksPath/logs/$service\"`\nDocker in remote servers\n\nSSH into the remote server and note the absolute path of the stacks directory.\nIf you don\u2019t remember the path use the same command above to locate it\nExit from the remote server\nIn your local shell, run the command\n\n`bash\nscp -r -C -i <your-ssh-key>.pem <user>@<host-ip>:<abs-path-to-stacks-dir>/logs/<service> <target-local-dir>`\nAWS AMI\n`bash\nscp -r -C -i <your-ssh-key>.pem appsmith@<host-ip>:/home/appsmith/appsmith/stacks/logs/<service> <target-local-dir>`\nDigitalOcean droplet\n`bash\nscp -r -C root@<host-ip>:/root/appsmith/stacks/logs/<service> <target-local-dir>`\nKubernetes\n\n\nRun the command and note the name and namespace of the Appsmith POD.\n`kubectl get pods -A`\n\n\nRun the command\n\n\n`bash\nkubectl cp <namespace>/<appsmith-pod-name>:/appsmith-stacks/logs/<service> <target-local-dir>`\nECS\n:::info Important\nPlease switch to the old AWS console to follow the instructions here\n:::\n\nNavigate to your ECS cluster in the AWS console\n\n\n\nSelect the service running Appsmith, and switch to Tasks tab. Click on the task running the Appsmith container.\nImportant You may need to switch the task filter to see the Stopped Tasks to find the task where the issue occurred if ECS rolled out a new task after the crash.\n\n\n\nIn the Tasks page, Find appsmith in the Container Section and expand it, to find the Log Configuration and click view logs in CloudWatch\n\n\n\nIn the CloudWatch Logs page, click the Actions button and hit `download search results in CSV`, to download the logs.\n\n\nAzure Container Instance (ACI)\n\nNavigate to your Storage Accounts in the Azure portal\n\n\n\nClick the File Share mounted to the Appsmith ACI instance.\n\n\n\nClick on Browse on the sidebar menu\n\n\n\nIn the file share browser, open the `logs` directory\nOpen the directory for the service for which the logs are required.\n\n\n\nSelect the log file and hit download.\n",
    "tag": "appsmith"
  },
  {
    "title": "How to Use Elasticsearch as a Datasource on Appsmith",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/how-to-guides/how-to-use-elasticsearch-as-a-data-source-on-appsmith.md",
    "content": "\ndescription: Guide on how to use ElasticSearch as a data source on Appsmith\nsidebar_position: 15\n\nHow to Use Elasticsearch as a Datasource on Appsmith\nThis guide assumes you have basic familiarity with Appsmith. I suggest creating an account and trying it out If you don't. I assure you that it is straightforward to get acquainted with quickly.\nElasticsearch\nElasticsearch is a distributed, free and open search and analytics engine for all types of data, including textual, numerical, geospatial, structured, and unstructured. Known for its simple REST APIs, distributed nature, speed, and scalability, Elasticsearch is the central component of the Elastic Stack, a set of free and open tools for data ingestion, enrichment, storage, analysis, and visualization.\nIn this guide, you will learn how you can use Elasticseach as a data source for your Appsmith application.\nWhat to build\nWe will use accounts.json that has sample data of bank customers and their account balance. This guide will display all the defaulters (account balance less than 20000) with their account info. We will also make a button that will update the balance of the selected person.\nInitial setup\nLet's quickly first see how you can integrate Elasticsearch in Appsmith. Just head to Appsmith, and let's say for the scope of this guide, you're building a new application which you want to get data from your Elasticsearch server.\nClick on the `New` button to create a new application. Then click on `Generate from a Data table` option. You should be prompted with a screen that would ask you to connect the database of your choice. It should look something like this:\n\nClick on `Connect new Datasource` and find `ElasticSearch` from all the available database options.\nNow you will be greeted with a page to fill in the credentials of your ElasticSearch server. Please fill in the host/port login credentials. The unfilled screen for this would look something like this:\n\nIf you are hosting Elasticsearch on a local server, consider using ngrok to expose the public address. You can see how to use ngrok and other local APIs with appsmith here: https://docs.appsmith.com/how-to-guides/how-to-work-with-local-apis-on-appsmith\nOnce you fill in all the details, you can click Test from the options below to test your connection. It will let you know if Appsmith can successfully connect to your database or not.\nIf the test is successful, click on \"Save\" to save your connection on Appsmith.\nQuerying the database\nSo, now that you're done with setting up a connection to your database server, you should be able to see a screen like this:\n\nYou can change the name of Datasource by clicking on it. I will use the How To datasource here. From here, let's try writing a query for our application. For our database, I have already added the accouts.json data file.\nQuerying in Appsmith is very simple; click on the New Query button from above and select which kind of query operation you're going to have. For our use case, we're just trying to get data from our database, so I would go ahead and use the default GET method.\nMention the path in the text field. For our case, we will write `/bank/_search/?size=50` . This will take the first 50 lists which satisfy the query. You can include more data by increasing the value of size. The default value is 10\nIn the body, we will write our query.\n`{\n  \"query\": {\n    \"range\": {\n      \"balance\": {\n        \"lte\": 20000\n      }\n    }\n  }\n}`\nIt will look something like this.\n\nI will name this query Defaulter. Now for your convenience, Appsmith does all the input sanitization and helps you query your database without worrying about any malicious data. In our case, we're just reading from the database, so our query will also be straightforward.\nDisplaying the data\nNow that we have a query to fetch data from the database. It's time to display the data. Let's start with a simple way to go on to this.\nData is stored as a JSON format in Elasticsearch, and we will use a table to display it.\nClick on the `Widgets` ribbon and select the `Table` widget.\n\nDrag and drop it on the canvas. It should be like this.\n\nSo let's try displaying our query data in the table. Now click on the settings icon, and all you have to do is replace the table data value with your query data. In this case, the identifier of my query is Query1, so I will just put `Defaulters.data.hits.hits` inside {{}}. Remember Defaulters is the name of the query.\nWe will hide unwanted columns like _index, _type _score, and _soruce.\nAfter that, we will add our custom columns named `Firstname, Lastname, Balance, Email`\nNow we have to fill the data with the required key names from the JSON. For the Firstname column, use this query to add all the values from the database.\n`{{currentRow._source[\"firstname\"]}}`\nYou will see it will automatically fill the column with the data. Similarly, we will fill in the data for all the columns. i.e., change the value in `_source` with the required key you want.\nFinally, you can see your table looking like this.\n\nYou can also use the filter command in the table widget. Let's say you want to find the people who have a balance less than 10000 and are in a critical red zone. You can click the filter tag and fill the fields with the objective in mind. For this instance, we can select Where -> Balance -> is less than or equal to -> 10000\n\nIt's very self-explanatory and easy to use. Also, remember to change the type of balance column to Number by going into column settings and selecting the type in Column type.\nLet's try to make a button and update data on ElasticSearch using Appsmith\nNow that we know how to read data via ElasticSearch, let's make a function that will ask you to add a new value to the selected id's balance column. We will now execute a query to update the new balance to our accounts.json data.\nCreate a new column next to balance by clicking on the table and selecting the `ADD A NEW COLUMN` button. I am going to name the column as Balance Update. Click the settings icon on the column name to modify it. In column type, select `Button` and you will see all the rows in the Update Balance column will have a button. I am going to name the button as Update. Your configuration should look like this.\n\nOn clicking the button, we should get a prompt on the screen with a textbox to write our new balance and update it. To accomplish this, we are going to use another widget call `Modal`. Click the `+` icon next to Widgets and drag the modal widget to the canvas.\n\nLet's configure our modal widget. I am going to name it New Balance and two more widgets into it, `Text` and `Input`. Write New Balance in the text and select the size of the text you desire. I am going to take Heading3 for this guide. Now it's time for the input widget. Select data type as currency and the type of currency as USD - US Dollar as our data also has amounts in Dollar. Leave all the settings as it is and come down. Check the Required button to ensure the user has to write data into it if he wants to execute the query. Your configurations should look something like this-\n \nLet's work on the Confirm Button now. Click on it to configure it. You should see a `onClick` section under the Actions tag. What we want here is after the user presses that button, two queries should execute. The first query should update the data with the new balance entered and the second query will re-populate the table with the updated data.\nAfter clicking on the `onClick` section, choose `Execute an Query` and then `+ Create New Query`.\nClick on the `New Query` button of the datasource you want to make query in. Name your query with a proper name for better understanding and write the query. For updating the data we will use `POST` Method.\nIn path write `/bank/_update/{{Table1.selectedRow._id}}` Table1 is the table we have populated before and .selectRow_id will take the id of the row from where we pressed the button.\nIn the body use the following command to update the data\n`{ \"script\": \"ctx._source.balance = {{new_balance.text}} \" }`\n`new_balance` is the input widget where the user writes the new balance. It should look like this -\n\nNow go back to the modal widget and click on the settings of Confirm button.\nGo on `onClick => Execute a query => Cleared_Query (the new query we just made)`\nYou can see that there are two more new options, onSuccess and onError. We will use this to re-populate the table with the updated data. In the onSuccess section select `Execute a query => Defaulters (the previous query which we used to read data)`\nVoila! You have now made a function to update the data. We also need to close the modal after updating the balance. Click on the close button settings, and in its onClick method, select `close modal` and in the Modal section select the `Balance_Modal` or the name of the modal you have given.\nIn the end, your modal should look like this -\n\nOur final step is to configure our Update button to set an onClick method which will open our modal Go to table => select Balance Update column settings => onClick => Open Modal => select the modal name Balance_Update\n\nYour application is now ready and can be easily deployed by clicking the Deploy button on the top right corner. You can also share your application with others by clicking the share button. You can also invite others to this app via email and even assign roles to them.\n\nLet's update one of the values to check if our application is working.\n\nAll the queries have executed properly. Let's check the value of id 6 to see if it's appropriately updated. I'll use Kibana to check the value.\n\nWe can see the new balance is now 78000. Our update query was successful.",
    "tag": "appsmith"
  },
  {
    "title": "Use Git to Create Different Environments",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/how-to-guides/use-git-to-create-different-environments.md",
    "content": "Use Git to Create Different Environments\nIn this guide, you\u2019ll learn how to create different environments for your App using the Git connection in Appsmith.\n:::info\nThis method doesn't support APIs, Google Sheets, Twilio, or any authenticated API datasources.\n:::\nEnvironments\nEnvironments are container entities within a space that allows you to create and maintain multiple versions of your applications and make changes to them in isolation.\nYou may need to create and maintain separate environments for your production apps to rigorously test them and remove any errors before the changes are deployed and made available to the users. This also helps prevent making any accidental changes to production databases.  \nWith the Connect to Git feature in Appsmith, you can create separate environments for each version of your app, each with different databases.\nTo create different environments following the steps below:\n1. Establish a Git connection\nTo get started, connect your app to a git repository. You can follow the steps from Connecting to repository to complete the setup.\nOnce the setup is complete, commit and push the initial state of your app to your Git repository from the Appsmith.\n2. Import application\nGo to the workspace or the instance where you want to add the development environment and import the application from the Git repository using Import from Git. Since Appsmith doesn't store your database credentials, the datasource window appears and prompts you to re-enter them for your newly created app. In this window, enter the credentials for your development database which is different from the production environment. Test and save the connection.\n3. Commit and push\nOnce the development database is connected, open the app. You\u2019ll be prompted to make an initial push to the Git repository from the app.\nThe development environment for your app is now complete. To test it out, make some changes in the app. For example, add a select widget and bind it to your development data. Once you\u2019ve made the changes, commit and push it to your Git repository.\n4. Pull the changes",
    "tag": "appsmith"
  },
  {
    "title": "Whitelist Appsmith on AWS",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/how-to-guides/aws-whitelist.md",
    "content": "\ndescription: >-\n  Whitelist the IP of the appsmith instance in your AWS database to access it\n  from within your applications\nsidebar_position: 9\n\nWhitelist Appsmith on AWS\nWhitelist the appsmith IP address with the following steps:\n1. Log in to the AWS console\n2. Navigate to the RDS Console\n3. Choose the RDS database from the list of instances\n\n4. Select the security group linked to your RDS(Make sure the RDS instance is publicly accessible)\n\n5. Click on \u201cInbound\u201d at the bottom and then click \u201cEdit\u201d\n\n6. Select the port to whitelist. If you are using the default MySQL port then selecting the \u201cMYSQL/Aurora\u201d option works\n\n7. Set Source to Custom and enter the Appsmith IP address 18.223.74.85/32 and 3.131.104.27/32\n8. Click Save",
    "tag": "appsmith"
  },
  {
    "title": "How to Use the Camera/Image Widget to Upload/Download Images?",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/how-to-guides/how-to-use-the-camera-image-widget-to-upload-download-images.md",
    "content": "\nsidebar_position: 6\nHow to Use the Camera/Image Widget to Upload/Download Images?\nAmazon S3 (Simple Storage Service) provides object storage built for storing and recovering any amount of information or data from anywhere over the internet. It provides this storage through a web services interface.\nWhat you'll learn\nIn this guide, you would learn:\n\nHow to connect and configure the S3 datasource.\nHow to use the Image and Camera widget.\nHow to upload/download images using S3.\n\nCreate S3 Datasource\nTo add an S3 datasource, navigate to Explorer >> Click plus sign (+) (next to S3)>> Select S3 under Databases. Once your S3 datasource has been created, follow these instructions to connect your app to the S3 database.\n:::info\nTo upload your data to Amazon S3, you must first create an Amazon S3 bucket in one of the AWS Regions. Create a new bucket.\n:::\nUpload Image Using Camera Widget\nThe camera widget powers you to capture images and videos from your applications and share the data for further use. In this section, you will learn how you can upload images/videos to Amazon S3.\n \n\nDrag and drop the Camera widget onto the canvas.\nClick on the + icon next to the queries/js and choose your S3 datasource.\nRename the query.\nFrom the Commands drop-down, Select the method Create a new file.\n\nYou can pass the below parameters to Create a new file.\n\nBucket Name: The object key (or key name) uniquely identifies the object in an Amazon S3 bucket.\nFile Path: Path of the location you want to store the file. ex. images/any.\n\n:::info\nIntermediate folders not existing will be automatically created.\n:::\n\nFile Data Type: You can choose between Base64 and text as your file data type. You should select base64 when uploading data from the camera widget.\nExpiry Duration of Signed URL (Minutes): The timestamp at which the signed URL would expire.\n\n:::info\nThe maximum expiration time for a signed URL is one week from the time of creation.\n:::\n\nContent: You can manually add data into the Content field by writing an object with a text and data property or you can fetch data from the camera widget like below:\n\n`{\n    \"data\": \"{{Camera1.imageDataURL}}\"\n}`\nOnce you have added all the required parameters:\n\nOpen the Camera widget property pane.\nIn the OnImageSave event, choose your query from the \"execute a query\" option.\n\nWhen you capture and save the image, your upload_image query is executed. You can visit the S3 console to see the uploaded media.\nUpload Image Using Image Widget\nThe Image widget displays the images in your app. Images must have a valid base64 or a URL. You can follow similar steps to the image widget.\n\nDrag and drop the Image widget onto the canvas.\nNow set the image URL in the Image property pane.\nClick on the + icon next to the queries/js and choose your S3 datasource.\nRename the query.\nFrom the Commands drop-down, Select the method Create a new file.\n\n:::info\nYou should select base64 as File Data Type when uploading data from the image widget.\n:::\n\n\nIn the content body, add the following:\n`{\n    \"data\": \"{{Image1.image}}\"\n}`\nOnce you have added all the required parameters:\n\nNow, set the Image Widget's onClick event to execute a query, and choose your query.\n\nYour image will be stored in the S3 database once you run this query. Let's look at how to fetch an image from the S3 database.\nDownload The Image\nFetch Single File\n \n\nClick on the + icon next to the queries/js and choose your S3 datasource.\nRename the query.\nFrom the Commands drop-down, Select the method Read file.\n\nYou can pass the below parameters to Read a file.\n\nBucket Name: Name of the bucket where the image is stored.\nFile Path: Path of the image you want to fetch. ex. images/name.\nFile Data Type: You should select base64 to display the image.\n\nOnce you have added all the required parameters:\n\nDrag and drop the Image widget onto the canvas.\nIn the Image property pane, add:\n\n`{{<your_query_name>.data.fileData}}`\nFetch All Files\n \n\nClick on the + icon next to the queries/js and choose your S3 datasource.\nRename the query.\nFrom the Commands drop-down, Select the method List files in the bucket.\nAdd the bucket name.\nNow, run the query.\n\nNow, open the query window and select the table option on the right-side property pane. It would automatically add a table widget to your canvas.\n:::info\nBind the query\u2019s response to the Table using JavaScript in the Table Data Property `{{list_files.data}}`.\n:::\nNow your table should list all the files present in your S3 bucket.\nYou can use an image widget to display images listed in the table widget. You can follow this guide to learn more.\nDownload Files\n\nOpen the image property pane.\nClick on the JS button next to the onClick event and write the following JavaScript query:\n\n`{{download(atob(Fetch_image.data.fileData),'Testname','image/png')}}`\nNow, your image will be downloaded when you click on the image widget.\n:::info\nYou can check this Guide to learn more about Upload/Download Files from S3.\n:::\nWith Appsmith S3 integration, it is possible to create apps that seamlessly connect with the S3 database and provide additional flexibility for updating and analyzing data.\nUsing Queries in applications\nOnce you have successfully run a Query, you can use it in your application to:\n\nDisplay Data \nCapture Data \n",
    "tag": "appsmith"
  },
  {
    "title": "How to Use Redshift as a Datasource on Appsmith",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/learning-and-resources/how-to-guides/use-redshift-as-data-source-on-appsmith.md",
    "content": "\ndescription: Guide on how to use Redshift as a Data Source on Appsmith\nsidebar_position: 14\n\nHow to Use Redshift as a Datasource on Appsmith\nThe guide presumes that you are familiar with the basic core concepts of Appsmith and builds further on integrating Appsmith with other tools. In case you don't have much understanding of the core concepts of Appsmith, it is recommended to create an account and try implementing them.\nRedshift\nRedshift, or Amazon Redshift is based on PostgreSQL, with added functionality to manage very large datasets and support high-performance analysis and reporting of those data.\nIn this guide you will learn to create a Redshift Database and use it as a data source in your Appsmith application.\nBuilding A Demo Application\nLet us try to learn this concept by building a simple application which fetches data from Redshift database. We will be creating a simple virtual library application which will hold details of various e-books.\nLet us begin with configuring Redshift database.\nCreating A Redshift Database And Loading Data\nFirst we need to set up an IAM role to help us in quering data from the database. For that you need to login to your AWS account or Sign up for a new account here, if you don't already have one. And select `IAM` from the services panel.\n\nChoose `Roles` from the left navigation panel and click on `Create role`. In the AWS Service group, choose `Redshift`. Under Select your use case, choose `Redshift - Customizable`, then choose Next: Permissions. On the Attach permissions policies page, choose `AmazonS3FullAccess`.\n\nYou can leave the default setting for Set permissions boundary. Choose Next: Tags. When the Add tags page appears you can add tags(optional). For this review I have added two tags: 'Name': 'For_Redshift_db', 'value': 'For_Appsmith_App'. Then choose Next: Review. Give the Role a name and description, click on Create role.\n\nChoose the role name of the role that you just created. Copy the Role ARN value to your clipboard\u2014this value is the Amazon Resource Name (ARN) for that role. You will use that value when you use the COPY command to load data from Amazon S3. Now that you have created the new role, your next step is to attach it to a Redshift cluster.\nCreating A Redshift Cluster\nThe cluster that you are about to create is live (and not running in a sandbox). You incur the standard Amazon Redshift usage fees for the cluster until you delete it. If you complete the tutorial described here in one sitting and delete the cluster when you are finished, the total charges are minimal.\nVisit the services panel and select `Amazon Redshift`. Choose the AWS Region where you want to create the cluster, at upper right corner. I have chosen 'Asia Pacific (Mumbai)ap-south-1'. Click on `Create cluster`. The Create cluster page appears.\n\nIn the Cluster configuration section, specify values for Cluster identifier, Node type, Nodes, and how you plan to use the cluster. I have chosen 'appsmith-cluster-1' as Cluster identifier. Make sure to choose free trial option for \"What are you planning to use this cluster for?\".\n\nFor Database configurations select a username and password for 'Admin user' and remember them(do keep in mind the constraints mentioned in the instructions below while creating and assigning username and password).\n\nChoose `Create cluster`. It will take a while to create the cluster. When the cluster is created select the cluster and click on `Actions`, under the 'permissions' section click on `Manage IAM roles`. when the management screen appears in the 'Available IAM roles' dropbox select the IAM role that you had created earlier then click on `Associate IAM role` then click on `Save Changes`.\n\nIn the Database configurations sections you can see the database name: dev and database port: 5439.\n\nClick on the `Actions` button again and under 'Manage cluster' select `Manage publicly accessible settings`. By default public accessibility is disabled, enable it to access it from the Appsmith application. Once this is done the next step is to insert data into the database.\nInserting Data In The Database\nTo insert and query the data in the database we need to create an IAM user to grant access to the query editor then use the query editor. To create an IAM user we need to select `IAM` from the 'services' panel. Then choose `Users` from the navigation menu. Click on `Add users`.\n\nIn the Add users screen give a the User a name, for instance, 'appsmith_user-1'. Check both the AWS credential type: Access key and Password. Assign a custom password for the console. Click on `Next: Permissions`.\n\nUnder 'Set permissions' select `Attach existing policies directly`. For Policy names, choose `AmazonRedshiftQueryEditor` and `AmazonRedshiftReadOnlyAccess`. Click on `Next: Tags`. Add tags if you want to, it's optional here.\n\nClick on `Next: Review`. Review the user details and click on `Create User`.\n\nCopy the Access key ID and Secret access key or download the .csv file and store it in a safe location. Now logout of the console and login through the new IAM user's credentials.\n\nVisit the Redshift cluster page and select `Editor` from the left navigation panel. click on `Connect to database`, add the details asked for and click `Connect`.\n\nSelect Public schema and run sql commands to create table and insert values.\nTo create table enter the following code and hit run.\n`sql\ncreate table library(\n                book_name varchar (30),\n                author varchar(30),\n                publisher varchar(30));`\nYou can see the table library created in the left Resources section.\n\nTo insert values into the table write the following code and hit run.\n`sql\ninsert into library values \n   ('The Monk who Sold His Ferrari', 'Robin Sharma', 'Jaico Publishing House'),\n   ('The Immortals of Meluha', 'Amish Tripathi', 'Westland Publications'),\n   ('The Inheritance of Loss', ' Kiran Desai', ' Penguin Random House India');`\nTo display the data you can use\n`sql\n select * from library;`\n\nYou can definitely try out inserting more values and playing with more SQL queries. For now we will move ahead with using this database as a data source in our Appsmith application.\nOne last thing to do before hopping on to Appsmith for developing our application, is to configure security groups and enable connection from Appsmith by Inbound rules of security group associated to the VPC in which our Redshift database exists. Select VPC from the services panel and scroll down to 'Security Groups'. By default the VPC and default security group was attached to the Redshift database at the time of creation. Select the default security group and click on `Edit inbound rules`.\n\nAdd inbound rules for type Redshift one for custom: Anywhere IPv4 and one for custom: My IP then click on `Save rules`. Remember to delete the new inbound rules after you have completed your task, for a long term use prefer creating a new security group.\n\nBuilding The Application On Appsmith\nLogin to your Appsmith account or Sign up for a new account, if you don't already have one here. The next step is to create a new application under a workspace by clicking on the `+ NEW` button on the top right corner.\n\nChange the default name to a name of your choice. For Instance, I am using the name, 'Appsmith Library'. You shall now see Widgets, Datasources and Pages on the left navigation bar. we can use these components in our application. We will add Redshift as our data source, by clicking on the `+` sign next to Datasources and scrolling to Databases under the '+ Create New' section. Select `Redshift`.\n\nConnecting To The Redshift Database\nFirstly, give the database a name, for this tutorial I have used the name, 'appsmith_library_db'. Next under connection choose a connection mode, here we will choose `Read/Write`. We will mention the host address and port number, if you do not mention a port number by default Appsmith will try to connect to port 5439. The host address can be fetched from the Redshift cluster's 'General information' panel. Copy the `Endpoint` value and paste it in the Host address section of the Appsmith application(you have to trim the database name and port number from the Endpoint address, else you may encounter an error). Fill the database name you want to connect to, in our case it is 'dev'. For Authentication we will provide the username and password of the adminuser of your database in Redshift. you can skip the SSL by selecting `No SSL` from the 'SSL Mode' dropdown list. Click on `Save`.\n\nCapturing And Displaying The Data\nNow that you have succesfully connected to the database successfully, you can query data from it by running simple SQL queries.\n`Select * from library;`\n\nFormatting The Fetched Data\nNow we need to display the fetched data in a presentable format. This can be done using the UI widgets provided by Appsmith. We need to follow some easy steps to bind the data fetched from Redshift database into a table. First, expand the Page1 dropdown menu and then click on the `+` icon beside `Widgets` option. It lists down different UI widgets that can be used to build our application's UI. Select the 'Table' widget then drag and drop that on the canvas. Something like this is visible:\n\nTo include response in this table use the mustache syntax to write JS in Appsmith.\n`{{Query1.data}}`\n\nNow that we have received data in the table, we can add more widgets for each attribute of the data records from the UI widgets list. You can add text widgets for all the fields in this example. To set the property of the widgets, next to the widget options add code snippets to fetch values of respective attributes from the array of data fetched refer to the guides linked below\n\nDisplay Data\nCapture Data\n\nWriting Data To The DataSource\nWe can also write data to the database, let us add some features which can take inputs from users on Appsmith and send them to the database. First let us add two new columns to our table namely, `book_id` of datatype 'integer' and `read` of 'boolean' datatype. Now let us convert our table into a list. Drag and drop the list UI widget and add some text widgets for, one for each table column. Now you can include the response for the list similar to the above procedure for table. Now to fetch values for each column we can click on the book id text widget's settings and edit the text field\n`{{currentItem.book_id}}`\n\nThe list will look something like this\n\nThe same steps will be repeated for all the other columns except for the READ/UNREAD column which shall be represented by checkboxes in our case. Add two checkbuttons namely, READ and UNREAD and go to edit checkbox. In the 'Actions' section click on the dropdown under `onCheckChange` and select 'Execute a Query', click on `+ Create new Query`.\n\n\nOnce the Query Editor appears change the query name to 'update_read' and 'update_unread' for the READ and UNREAD checkbox repsectively.\nFor update_read add the following SQL query\n`UPDATE library\n  SET read = 'TRUE'\n  WHERE book_id = {{List1.selectedItem.book_id}};`\n\nFor update_unread add the following SQL query\n`UPDATE library\n  SET read = 'FALSE'\n  WHERE book_id = {{ List1.selectedItem.book_id}};`\n\nYou can also add error and success messages by clicking on 'onSuccess' and selecting 'Show Message' from the dropdown.\nAn instance of success message is\n`Added to list of books already read!!`\nAn instance of success message is\n`Added to list of unread books!!`\n\nNow if you check the 'READ' checkbox for a certain row then that will be updated on the Redshift database as such:\n\n\nSimilarly for 'UNREAD' checkbox. We have successfully written data to the database.",
    "tag": "appsmith"
  },
  {
    "title": "Redis",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/datasources/querying-redis.md",
    "content": "\nsidebar_position: 14\nRedis\n:::note\nThe following document assumes that you understand the basics of connecting to databases on Appsmith. If not, please go over them before reading further.\n:::\nConnection settings\nAppsmith needs the following information to connect to a Redis instance.\n\nAfter filling up the three fields as described preceding, click the \"Test\" button to verify the configuration and click `Save`.\nQuerying Redis\nThe Redis query pane can be used to run any of the commands supported by Redis. The response from this command is displayed in the result window. \nChecking connection\nThe connection to a Redis instance can be verified using a simple `PING` command.\n`PING`\nInserting a key\nA new key value pair can be inserted into the cache using the `SET` command as follows.\n`SET key_name new_value`\nRetrieving a key\nStored key value pairs can be retrieved using the `GET` command.\n`GET key_name`\nUsing queries in applications\nOnce you have successfully run a Query, you can use it in your application to\n\nDisplay Data\n",
    "tag": "appsmith"
  },
  {
    "title": "ArangoDB",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/datasources/querying-arango-db.md",
    "content": "\nsidebar_position: 3\nArangoDB\nArangoDB is a free and open-source native multi-model database system developed by ArangoDB GmbH. The database system supports three data models with one database core and a unified query language AQL\n:::note\nThe following document assumes that you understand the basics of connecting to databases on Appsmith. If not, please go over them before reading further.\n:::\nConnecting ArangoDB with Appsmith\nOn Appsmith, it\u2019s pretty straightforward to establish a connection with any data source, including ArangoDB; be it on the cloud, a self-hosted instance, or a local environment.\nWhat we need to make the connection are the endpoint, database name, and user credentials. With this in mind, let\u2019s get started.\n\nOn your Appsmith application, click on the `+` icon next to Datasources on the left navigation bar under Page1\nNow, navigate to the Create New tab and choose ArangoDB data source.\n\n\n\nWhen you\u2019re using ArangoDB cloud or a self-hosted instance, all these details can be found under the instance settings.\n\n\nConnection Settings\nAppsmith needs the following parameters for connecting to an Arango database:\n:::tip\nAll required fields are suffixed with an asterisk (*).\n:::\nConnection\nYou need to fill in the following parameters:\n\nHost Address* / Port: Fill in the database host\u2019s address and port. If you don\u2019t specify a port, Appsmith will try to connect to port 8529.\nDatabase Name*: Fill in the name of the database that you want to connect to. This is your database\u2019s name.\n\nAuthentication\nYou need to fill in the following parameters:\n\nUsername*: Fill in the username required for authenticating connection requests to your database.\nPassword*: Fill password required for authenticating connection requests for the given username to the database.\n\nSSL\nThe SSL Mode can be set to one of the following values:\n\n`Default`: Same as `Disabled`.\n`Enabled`: Rejects the connection if SSL is not available.\n`Disabled`: Connects without SSL using a plain unencrypted connection.\n\n:::tip\nEnsure that the SSL mode is enabled so as to establish a secure connection.\n:::\nHere\u2019s what the configuration will look like:\n\nNext, click on the `Test` button at the bottom right of the screen. This will help you with understanding whether your configuration is valid or not. If it returns a successful message, hit the \u2018Save\u2019 button to establish a secure connection between Appsmith and ArangoDB.\nUsing Queries in applications\nOnce you have successfully run a Query, you can use it in your application to\n\nDisplay Data\n",
    "tag": "appsmith"
  },
  {
    "title": "Snowflake",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/datasources/querying-snowflake-db.md",
    "content": "\nsidebar_position: 16\nSnowflake\nOn Appsmith, it\u2019s pretty straightforward to establish a connection with any data source, including SnowflakeDB, be it on the cloud, self-hosted version, or local environment.\n:::note\nThe following document assumes that you understand the basics of connecting to databases on Appsmith. If not, please go over them before reading further.\n:::\nConnection Settings\nAppsmith needs the following parameters for connecting to a Snowflake database:\n:::info\nAll required fields are suffixed with an asterisk (*).\n:::\nConnection\nYou need to fill in the following parameters:\n\nAccount name: Your account name is part of the connection string and consists of one or more components mentioned in the Snowflake documentation.\nWarehouse: Specifies the virtual warehouse to use once connected. The specified warehouse should be an existing warehouse for which the default role has privileges.\nDatabase: Specifies the default database to use once connected. The specified database should be an existing database for which the default role has privileges.\nDefault Schema: The connection does not limit queries to this schema. This information is only used to view the schema structure inside Appsmith.\n\nAuthentication\nPlease fill in the following parameters:\n\nUsername: Fill in the username required to authenticate your database connection request.\nPassword: Fill password required for authenticating connection requests for the given username to the database.\n\nConnecting Snowflake on Appsmith \nWhat we need to make the connection are the endpoint, database name, and user credentials. With this in mind, let\u2019s get started.\n\nOn your Appsmith application, click on the `+` icon next to Datasources on the left navigation bar under Page1.\nNext, navigate to the Create New tab and choose SnowflakeDB data source.\nRename the Datasource to SnowflakeDB CRUD by double-clicking on the existing one.\nNow, add your SnowflakeDB account details. All the details are available under the SnowflakeCloud settings:\n\n\n\nHere\u2019s what the database configuration would look like:\n\n\n\nNext, click on the `Test` button at the bottom right of the screen. It will help you understand whether your configuration is valid or not. If it returns a successful message, hit the \u2018Save\u2019 button to establish a secure connection between Appsmith and SnowflakeDB.\n\n:::info\nAfter the connection is established, we can see all the sample data (tables) under the connected data source.\n:::\n\nNow that we have the sample data, we will see how you query the snowflake database in the next section.\nQuerying Snowflake\nSnowflake databases can be queried using the SQL syntax provided in their command reference documentation. All Snowflake queries return an array of objects where each object is a row returned by the query and each property in the object is a column. Let's look at an example to see how to query the Snowflake database.\n\nClick on the `+` icon next to the `datasources` and choose to Create New + from the SnowflakeDB CRUD data source.\nRename the query to getCustomers.\nCopy the following SQL script to query all the Customers from the CUSTOMER table:\n\n`SELECT * FROM TPCDS_SF100TCL.CUSTOMER LIMIT 10;`\n\nThis simple query returns all the customers present in the sample data item. Hit the `RUN` button to view all the results.\n\nThe video below demonstrates how to query the Snowflake database.\n\nYou have your query; you can bind it to various widgets. You can take reference from this example and learn how to build a frontend that can connect to SnowflakeDB as a data source.\nUsing Queries in applications\nOnce you have successfully run a Query, you can use it in your application to\n\nDisplay Data\nCapture Data\n",
    "tag": "appsmith"
  },
  {
    "title": "Twilio",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/datasources/twilio.md",
    "content": "\nsidebar_position: 18\nTwilio\nTwilio is a customer engagement platform businesses use to build personalized customer experiences. Twilio provides APIs for voice, text, chat, video, and email integrations. By using these APIs, businesses build integrations that can provide updates to their customers in real-time.\n:::note\nTo integrate Twilio with Appsmith, you should understand the basics of connecting to databases on Appsmith.\n:::\nAppsmith integration with Twilio provides an easy way to manage your customer-focused messaging. With these integrations, you can design a custom UI on Appsmith to support easy integrations for users.\n\nCreate Twilio Datasource\nTo add a Twilio datasource, navigate to Explorer>> Click plus sign(+) next to Datasources >> Select Twilio under APIs.\nConnection Settings\nConfigure the Twilio datasource as illustrated below:\nAuthentication Type\nAs part of the authentication type, you can choose from the available options:\n\n\nBasic Auth - Select Basic Auth for using Basic Authentication to create a Twilio datasource.\n\nGet Twilio Account Info\nYou\u2019ll have to log into your Twilio Account to get account information to be added to the datasource configuration:\n\n\nAccount SID - Navigate to your Twilio account >> Select Develop tab >> Scroll down to Account Info >> Copy Account SID.\nAuth Token - Navigate to your Twilio account >> Select Develop tab >> Scroll down to Account Info >> Copy Auth Token.\n\nGet My Twilio Phone Number\nYou can get your Twilio Phone Number (`My Twilio phone number`) from the account info section to add it to the From field in commands.\nNavigate to the account info section and click the copy icon to copy your Twilio Phone Number.\n\nSave Configuration\nClick the Save button to save the configuration and complete the setup of the Twilio datasource. On successful configuration, you\u2019ll be navigated to the datasources screen.\n:::info\nYou\u2019ll have to ensure that your Twilio account has a Messaging Service setup.\n:::\nTrial Twilio Account\nIf you are using a Twilio trial account, you can only add the Verified Caller IDs in the destination phone number (To) field.\n:::info\nRead more on how to work with your Free Twilio Account.\n:::\nAdd Verified Caller ID\nYou can add a verified caller to your Twilio account. Navigate to Twilio Account >> Click on Develop tab >> Click #Phone Numbers section >> Click Verified Caller IDs >> Click Add a new Caller ID button to add a new `Verified Caller ID`.\n\nCreate Queries\nYou can add queries to the Twilio datasource by selecting the New API + button next to the datasource. You can also navigate to Explorer >> Click plus (+) sign next to Queries/JS >> Select the datasource name (TwilioAppsmithIntegration).\n:::info\nYou\u2019ll have to add your Twilio Account SID to every command, so keep it handy.\n:::\nQuery\nYou can use the Query tab to define the type of commands you want to execute.\nCommands\nWith the help of Commands, you can choose the type of action you want to perform with Twilio integration. Following is the list of available commands:\n| Command                                    | Description                                                                                                                                                                 |\n| ---------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Create Message     | Send a new message with Create Message command.                                               |\n| Schedule Message | Schedule a message delivery with the Schedule Message command at a specified date and time. |\n| List Message         | Read messages sent by the given number with the List Message command.                   |\n| Fetch Message       | Read a message with the Fetch Message command.                                                 |\n| Delete Message     | Delete the given message using the Delete Message command.                                    |\n| Update Message     | Update or cancel the scheduled message using the Update Message command.                      |\nCreate Message\nYou can use the create message command when you want to send a message.\nTo create a message, you can set the below parameter values:\n\nTwilio Account SID - Add your Twilio Account SID to this field.\nTo - Add the phone number to which you want to send the message.\n\n:::info\nThe destination phone number (To) and your Twilio Phone number (From) should follow the E.164 format.\n:::\n\n\nFrom - Add your Twilio phone number to this field.\n\n:::info\nYou can get your Twilio phone number from the account info section. Copy My Twilio phone number to add to the Twilio Phone Number field.\n:::\n\nBody - Add the message text you want to send to this field. \n\n\nYou can also read the widget values selected by the users for the above fields in the Create Message Command. For example, if you want to bind a text widget value that captures the message content, you can read the value as `<WIDGET_NAME.TEXT>` and add it to Create Message >> Body.\n\n:::note\nYou can change the Query settings by clicking the settings tab.\n:::\nSchedule Message\nYou can use the Schedule Message command to configure a message delivery in the future.\nTo schedule a message, you can set the below parameter values:\n\nTwilio Account SID - Add your Twilio Account SID to this field.\nMessaging Service SID - Add your Twilio registered message service SID to this field.\n\n:::info\nYou can get the Message Service SID from the Twilio Develop Console.\n:::\n\nTo get the Message Service SID, navigate to your Twilio account >> Select the Develop Tab >> Expand the Messaging head >> Click on Services. You can copy the existing service SID, or If you don\u2019t have a messaging service configured, you can click the Create Messaging Service button to create one.\n\n\n\nTo - Add the phone number to which you want to send the message.\n\n:::info\nThe destination phone number (To) should follow the E.164 format.\n:::\n\n\nBody - Add the message text that you want to send to this field\nSend At - Add the date and timestamp you want to schedule the message delivery. The data and timestamp should follow the format ISO 8601 format.\n\n:::note\n Please supply the date and timestamp for the `Send At` in the UTC.\n:::\n\nYou can also read the widget values selected by the users for the above fields in the Create Message Command. For example, if you want to bind a text widget value that captures the message content, you can read the value as `<WIDGET_NAME.TEXT>` and add it to Create Message >> Body.\n\n:::note\nThe schedule data and timestamp should follow the Time range limitations for scheduled messages as defined on Twilio Site.\n:::\nBy default, the Twilio Schedule Message uses the UTC. You can change the timezone from your Twilio account\u2019s User Settings.\n:::info\nCall an update message command with the status selected as \u201cCanceled\u201d to Cancel a scheduled message delivery.\n:::\nList Message\nYou can use the List Message command to view all the messages sent by using a specified Twilio Phone Number.\nFor listing messages, you can set parameter values as below:\n\n\nTo - Add the phone number to which you want to send the message. \n\n:::info\nThe destination phone number (To) and your Twilio Phone number (From) should follow the E.164 format.\n:::\n\nFrom - Add your Twilio phone number to this field. \n\n:::info\nYou can get your Twilio phone number from the account info section. Copy My Twilio phone number to add to the Twilio Phone Number field. \n:::\n\nDateSent - Supply the date for which you want to view sent messages. The date should follow a YYYY-MM-DD format. \nPageSize - Give the maximum number of records you wish to pull per page. \nTwilio Account SID - Add your Twilio Account SID to this field. \n\n:::info\n You can read the response of the List message command by using `<QUERY_NAME.data.messages>`\n:::\nFetch Message\nYou can use the Fetch Message command to read a sent message. **** To read a sent message, you can set the below parameter values:\n\n\nTwilio Account SID - Add your Twilio Account SID to this field. \nMessage SID - Add the Message SID for the message you want to read.\n\n:::info\nYou can get the Message SID from List Message Command or when you create a message using Create Message command.\n:::\nYou can read the Message SID in the create message response (sid) as shown below:\n```\n{\n  \"sid\": \"SM2a93468381134d92aa07342322bf3a82\",\n  \"date_created\": \"Fri, 29 Jul 2022 07:12:42 +0000\",\n  \"date_updated\": \"Fri, 29 Jul 2022 07:12:42 +0000\",\n  .\n  .\n  .\n  \"body\": \"Sent from your Twilio trial account - A Create message triggered\",\n  \"status\": \"queued\",\n .\n .\n  }\n}\n```\nDelete Message\nYou can use the Delete Message command to delete the delivered message. To delete a delivered message, you can set up the parameter values below:\n\n\nTwilio Account SID - Add your Twilio Account SID to this field. \nMessage SID - Add the Message SID for the message you want to read.\n\n:::info\nYou can get the Message SID from List Message Command or when you create a message using Create Message command.\n:::\nUpdate Message\nYou can use the Update Message command to update/cancel a scheduled message. For updating or canceling a scheduled message, supply the parameter values as below:\n\n\nTwilio Account SID - Add your Twilio Account SID to this field. \nMessage SID - Add the Message SID for the message you want to read.\n\n:::info\nYou can get the Message SID from List Message Command or when you create a message using Create Message command.\n:::\n\nBody - Add the updated message text to this field\nStatus - Only select canceled status if you wish to cancel the delivery of a scheduled message\n\n:::note\nYou can change the Query settings for all the queries by clicking the settings tab.\n:::\nWhatsApp and Text Message Integration\nYou can use the above commands to send a text or a WhatsApp message. For a WhatsApp integration, add the keyword `whatsapp:` in the To and From fields in the commands. You can read more about using Twilio phone numbers with WhatsApp.",
    "tag": "appsmith"
  },
  {
    "title": "Redshift",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/datasources/querying-redshift.md",
    "content": "\nsidebar_position: 15\nRedshift\n:::note\nThe following document assumes that you understand the basics of connecting to databases on Appsmith. If not, please go over them before reading further.\n:::\nConnection Settings\nAppsmith needs the following parameters for connecting to a Redshift database:\n:::tip\nAll required fields are suffixed with an asterisk (*).\n:::\nConnection\nYou need to fill in the following parameters:\n\nConnection Mode*: You must choose one of the following two modes:\nRead Only: Choosing this mode gives Appsmith read-only permission on the database. This allows you to only fetch data from the database.\nRead / Write: Choosing this mode gives Appsmith both read and write permissions on the database. This allows you to execute all CRUD queries.\nHost Address / Port*: Fill in the database host\u2019s address and port. If you don\u2019t specify a port, Appsmith will try to connect to port 5439.\nDatabase Name*: Fill in the name of the database that you want to connect to. This is your database\u2019s name.\n\nAuthentication\nYou need to fill in the following parameters:\n\nUsername*: Fill username required for authenticating connection requests to your database.\nPassword*: Fill password required for authenticating connection requests for the given username to the database.\n\nSSL\nYou need to fill in the following parameters:\n\nSSL Mode: Choose your SSL model from the dropdown.\nKey File: Upload your SSL key file from here.\nCertificate: Upload your SSL certificate here.\nCA Certificate: Upload your CA certificate here.\nPEM Certificate: Upload your PEM certificate here.\nPEM Passphrase: Fill in your PEM passphrase here.\n\nQuerying Redshift\nRedshift databases can be queried using the standard SQL syntax. All Redshift queries return an array of objects where each object is a row returned by the query and each property in the object is a column. Appsmith provides template queries to help with the syntax\n\nUsing Queries in applications\nOnce you have successfully run a Query, you can use it in your application to\n\nDisplay Data\n",
    "tag": "appsmith"
  },
  {
    "title": "Elasticsearch",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/datasources/querying-elasticsearch.md",
    "content": "\nsidebar_position: 5\nElasticsearch\n:::note\nThe following document assumes that you understand the basics of connecting to databases on Appsmith. If not, please go over them before reading further.\n:::\nConnection Settings\nThe Elasticsearch plugin requires two pieces of information to establish a connection.\n\n\nHost Address / Port*: Fill in the elasticsearch instance's address and port. This field supports multiple endpoints if that be the need.\nUsername / Password: The authentication detail for the elastic search instance. The password for your datasource is encrypted when it is stored within the Appsmith database.\nAuthorization Header: In case you choose to connect to your instance with another mechanism, you can use the `Authorization Header` field. This field is only considered when the `Username` and `Password` fields are empty.\n\nAfter filling up the fields as described above, click on the \"Test\" button to verify the configuration and click \"Save\".\nQuerying Elasticsearch\nElasticsearch support a rich set of REST APIs that can be accessed using the Elasticsearch plugin in Appsmith. The plugin itself supports all requests that would use the `GET`, `POST`, `PUT`, or `DELETE` HTTP methods. These APIs support single as well as bulk queries, some of which are demonstrated below. Do note the leading `/` that needs to be added for each of these requests.\n:::tip\nWhile Elasticsearch has a comprehensive reference list for its APIs, please make sure that you refer to specific documentation by your provider for requests that may or may not be applicable.\n:::\nCreating a single document\nAs part of the Document API, you can create a single new document by using the POST URI `/{index}/_doc/{id}` with a JSON body that represents the document. For instance, the following request will create a document in the `movies` index with an `id` of 1.\n`Path: /movies/_doc/1\nBody:\n{\n    \"title\": \"Castle in the Sky\",\n    \"director\": \"Hayao Miyazaki\",\n    \"producer\": \"Isao Takahata\",\n    \"release_date\": \"1986\",\n    \"rt_score\": \"95\"\n}`\nCreating multiple documents\nBulk additions can be done using the POST endpoint `/_bulk`, with a request body that specifies the index for each document separately as shown below. The following request will add 4 more documents in addition to the single indexed document we added in the previous request.\n`Path: /_bulk\nBody:\n{\"index\": {\"_index\": \"movies\", \"_id\": \"2\"}}\n{\"title\":\"Grave of the Fireflies\", \"director\":\"Isao Takahata\", \"producer\":\"Toru Hara\", \"release_date\":\"1988\", \"rt_score\":\"97\"}\n{\"index\": {\"_index\": \"movies\", \"_id\": \"3\"}}\n{\"title\": \"My Neighbor Totoro\", \"director\": \"Hayao Miyazaki\", \"producer\": \"Hayao Miyazaki\", \"release_date\": \"1988\", \"rt_score\": \"93\"}\n{\"index\": {\"_index\": \"movies\", \"_id\": \"4\"}}\n{\"title\": \"Kiki's Delivery Service\", \"director\": \"Hayao Miyazaki\", \"producer\": \"Hayao Miyazaki\", \"release_date\": \"1989\", \"rt_score\": \"96\"}\n{\"index\": {\"_index\": \"movies\", \"_id\": \"5\"}}\n{\"title\": \"Only Yesterday\", \"director\": \"Isao Takahata\", \"producer\": \"Toshio Suzuki\", \"release_date\": \"1991\", \"rt_score\": \"100\"}`\nRetrieving a single document\nA single document can be accessed using it `id` within an index using a GET request that has the following path:\n`Path: /movies/_doc/2`\nSearching through documents\nQueries run on top of indexed documents can be configured using the GET method, without a JSON body. The following search query scans through the `movies` index created previously to return documents that match the query string.\n`Path: /movies/_search?q=Hayao%20Miyazaki`\nDeleting a document\nDeleting documents only requires a reference to the relevant `id` field that is sent across in a DELETE request. The request below will return with the deleted resource if it exists.\n`Path: /movies/_doc/5`\nUsing Queries in applications\nOnce you have successfully run a Query, you can use it in your application to\n\nDisplay Data\n",
    "tag": "appsmith"
  },
  {
    "title": "Firestore",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/datasources/querying-firestore.md",
    "content": "\nsidebar_position: 6\nFirestore\nOn Appsmith, it's pretty straightforward to establish a connection with any datasource, including Firestore.\n:::note\nThe following document assumes that you understand the basics of connecting to databases on Appsmith. If not, please go over them before reading further.\n:::\nFirestore is a NoSQL document database built for automatic scaling, high performance, and ease of application development. While the Firestore interface has many features like traditional databases, as a NoSQL database, it differs from describing relationships between data objects.\nWhat we need to make the connection are the Database URL, Project Id, and Service Account Credentials. With this in mind, let's get started.\nConnecting Firestore on Appsmith\nThe Firestore plugin requires three pieces of information to connect to Firestore.\n\nOn your Appsmith application, click on the `+` icon next to Datasources on the left navigation bar under Page1.\nNow, navigate to the Create New tab and choose Firestore data source; you'll see the following screenshot:\n\n\nThe above details are available from the Firebase Console. Let's fetch each one of them:\nFetching Project ID\n\nNext to the project overview option, click the setting gear.\nIn the `Project Settings` ensure you're in the \"General\" tab.\nYou'll find an `Project ID` entry with a value.\nCopy this value into the Project ID field in the Firestore configuration.\n\nFetching Database URL\n\nThe Database URL need to be formed using the Firebase project ID you found above in the following manner `your-project-id.firebaseio.com`\n\nFetching Service Account Credentials\n\n\nGo to `Project Settings` and click on the `Service Accounts Tab.`\nOn the service accounts tab, below the code snippet, there is a Generate new private key button.\nClicking this button will generate a new private key with access to this Firestore instance.\nThis key will be in the form of a JSON file which will be downloaded when you click this button.\nCopy the contents of this file and paste them into the Service Account Credentials field in appsmith.\nNext, click on the `Test` button at the bottom right of the screen. This will help you with understanding whether your configuration is valid or not. If it returns a successful message, hit the 'Save' button to establish a secure connection between Appsmith and Firestore.\n\nThe video below explains how to connect to Firestore.\n\nUnderstanding Commands\nNow that we've successfully connected to Firestore, let's look at how to query the data. First, let's fetch our data from firestore.\n:::info\nNote: All the commands function mentioned below can be found on the query page.Fetching Single Document\n:::\nFetching Data\nFirst, let's read our data from the database and display it.\nThere are two methods for fetching data from Firestore: one for fetching a single document by a path and the second for fetching multiple documents from a collection by a path.\nFetching Single Document\n\nClick on the datasources and choose the database you created.\nRename the query.\nFrom the `Commands` drop-down, Select the method `Get Single Document`.\nNext, set the path to the full path of the document you want to load. The path should be provided without any leading or trailing/characters.\n\nFor example, setting the path to users/sherlock@gmail.com will get the document with ID sherlock@gmail.com inside the collection users.\nBelow is a video that shows how you can fetch a single document from the firestore. The below example fetches task details. Here the number represents the issue ID. As a result, task/issue_id provides information about that specific issue.\n\nFetching Multiple Documents\n\nClick on the `datasources` and choose the database you created.\nRename the query.\nSet the query command to `Get Documents` in the Collection.\nSet the `Collection/Document Path *` to the collection name.\nThis simple query returns all the task details in the sample data item. Hit the RUN button to view all the results.\n\nThe video below shows how you can fetch multiple documents from the firestore. The example below fetches all the documents from a collection.\n\nWe now have our query; let's bind this onto the table widget; for this, follow the below steps:\n\nClick on the `+` icon next to widgets on the sidebar, search for the table widget, and drag and drop it onto the canvas.\nYou can make any configurations to any widget via the property pane. Click on the table widget on the canvas; you will see the property pane docked to the sidebar on the right. Now, under the Table Data property, use the mustache syntax to bind the query:\n\n`{{getTasks.data}}`\nLet's look at how to personalize your query:\nOrder By: Set this to a JSON array of field names or field paths by which the documents should be sorted. For example, if in the given collection, you have the document `{\"name\": \"Sherlock\", \"role\": \"Detective\"}` and `{\"name\": \"Watson\", \"role\": \"Doctor\"}`, then specifying `[\"name\"]` in the Order By input will return the documents ordered by the name field in each document. Additionally, any field or path can be prefixed with a `-` to order that field in descending order. So specifying `[\"name\", \"-role\"]` would sort by the `name` field in ascending order and by the`role` field in descending order.\nLimit Documents: This field is a number that specifies the maximum number of documents fetched by the query. Setting this to a very high number may impact the performance of your application, but the impact and how high will depend on the size of the documents being fetched.\nWhere Condition: This is a set of three fields that allow you to apply a filter on the documents being fetched. The first field Field Path is the path of a nested field on which to apply the filter. Example values are `name` or `name.first` if the documents look like `{\"name\": {\"first\": \"Sherlock\", \"last\": \"Holmes\"}}`.\nThe second field is the operator and the third is the value to apply the filter with. For array operators like in, the value can be set to a valid JSON-serialized array. For example, the field path can be `name`, the operator can be `in` and the value can be `[\"Sherlock\", \"Mycroft\"]`. This will filter all documents with a `name` field set to either `\"Sherlock\"` or `\"Mycroft\"`.\nAdding New Document(s)\nThere are three methods to add documents to a collection, depending on the behaviour required.\nSet Document\nThis method will set the given document at the given document path. If a document already exists at the given path, it will be overridden. It will create a path for the document if it does not exist at the given path.\nThe set document command can create or update an existing document. It requires a `collection-name/doc-id`.\nLet\u2019s look at an example to see how a `set document` works.\n\nClick on the datasources and choose the database you created.\nRename the query.\nSet the query command to \u201c`Set Documents`\u201d in the Collection.\nNow, add the collection and document details.\nHere we will add `tasks/newdoc`. In the body section we will add something like:\n\n`{\n    \"name\":\"{{Input2Copy.text}}\",\n    \"assigned_to\": \"{{Input3Copy.text}}\"\n}`\n\nNow hit \u201cRUN\u201d.\n\nIf the defined doc-id doesn\u2019t exist, it creates a new doc with the id. So here in the firestore, it will create a new document. The image below depicts the same.\n\nCreate Document\nThis method will set the given document at the given document path. If a document already exists at the given path, this method will fail, and the given document is not saved. A new path will be created if the document doesn\u2019t exist on that path.\nLet's look at an example to see how to create a new document. Let\u2019s assume you have a table which displays data from firestore. Now let's add a modal, to update the value to the database.\n:::info\nModal is a simple UI widget you can use when you want to create Dialogs, Popovers or Alerts.\n:::\n\nDrag and drop a button widget onto the canvas. Open its property pane, set the onClick property to Open a New Modal, and choose to Create New.\nThis will open up a new modal now; let's drag and drop a few widgets to create a form that we can use to add a new task to our database.\n\nNow that the modal\u2019s UI is ready, let's connect it:\n\nClick on the + icon next to the datasources and choose to Create New + from the Firestore datasource.\nRename the query to `createTask`.\nSet the commands to `Create Document.`\nSet the `Collection/Document Path *` to `collection_name/{{Math.random().toString().substring()}}`\n\nFor Example:- `tasks/{{Math.random().toString(36).substring(7)}}`\n\nFinally, set the body property.\n\nFor example, you can set a body property like this to collect all the information from the modal widget:\n`{\n    \"name\":\"{{Input1.text}}\",\n    \"deadline\": \"{{DatePicker1.formattedDate}}\",\n    \"issue_id\": \"{{Input2.text}}\",\n    \"complete\": false\n}`\nHere, we have an insert query that collects all the data from the form widgets we've created. Note that we use the mustache syntax to bind the data from the widgets onto the query body.\nLastly, we\u2019ll need to configure the submit button; for this, go back to the modal and set the button\u2019s onClick property to execute a query and choose `createTask` under the events property:\n\nYou can check out this tutorial, to learn more about creating the document.\nAdd Document to Collection\nThis method will add the given document with an auto-generated document-id, into the given collection path. Note that the given path must point to a collection in this method. If the collection doesn't exist at the given path, it will be created.\nLet\u2019s look at an example to see how `add the document to collection` works:\n\nClick on the datasources and choose the database you created.\nRename the query.\nSet the query command to \u201cAdd Documents to Collection\u201d in the Collection.\nNow, just add your `collection-name`.\nHere we will add `tasks`.\nNow in the body, add your details:\n\n`{\n    \"name\":\"{{Input2Copy.text}}\",\n    \"assigned_to\": \"{{Input3Copy.text}}\"\n}`\n\nNow hit Run.\n\nA new unique document with the above-mentioned details will be generated in the firestore.\n:::info\nAll three methods above take a path and a body as inputs. The path is interpreted as described above and the body is expected to contain a valid JSON-serialized object which will make up the document to be used in operation (as described above).\n:::\nUpdating a Document\nThe \"Update Document\" method can be used to surgically update only certain fields in a document while leaving the rest of the document as is. It takes the document path pointing to the document that should be updated and a body of changes. For example, if the body is set to the following:\n`javascript\n{\n    \"name\": \"Eve\"\n}`\nThen the value of the `name` field in the document pointed by path will be changed to `\"Eve\"`, but no other fields in the document will be changed.\nValues of nested fields should be set in the form of field paths. For example, consider the following document that's already saved in our Firestore:\n`javascript\n{\n    \"name\": {\n        \"first\": \"Sherlock\",\n        \"last\": \"Holmes\"\n    },\n    \"role\": \"Detective\"\n}`\nSay we want to update the first name to `\"Mycroft\"`, but leave the rest of the document (including the last name) intact. Then the body in the update method should be:\n`javascript\n{\n    \"name.first\": \"Mycroft\"\n}`\n:::info\nNote that this method can only update a single document at once. Firestore doesn't provide a way to bulk-update multiple documents at once.\n:::\nLet's look at an example to learn more about updating the document.\nThe Update operation is quite similar to the create operation.\n\nLet\u2019s build UI by creating a new custom column on the table by clicking on ADD A NEW COLUMN under the columns property.\nNow, rename the column to Edit, and click on the cog icon next to it, to configure column settings.\nUnder this, we\u2019ll see column-type properties set to a Button type. A modal should open up the necessary fields to update the item when clicked.\nNow, copy-paste Modal1, rename it to Modal2 and set the onClick property of the Edit Task button to open Modal2.\nHere, in the form, we can also set the default value to show existing information, to display this, use the `selectedRow` property from the table widget.\n\n\nLet\u2019s write the Edit query:\n\nClick on the `+` icon next to the datasources and choose to Create New + from the Firestore datasource.\nRename the query to `editTask`.\nSet the `Collection/Document Path*` to `tasks/{{Table1.selectedRow._ref}}.`\nFinally, set the body property to:\n\n`{\n    \"name\":\"{{Input1Copy.text}}\",\n    \"deadline\": \"{{DatePicker1Copy.formattedDate}}\",\n    \"assigned_to\": \"{{Input2Copy.text}}\",\n    \"complete\": false\n}`\n:::info\nNote: The {{ Table1.selectedRow._ref }} snippet evaluates to the selected row\u2019s _ref which will be the row we want to edit.\n:::\nHere, we have an edited query that collects all the data from the form widgets on Modal2. Note that we use the mustache syntax to bind the data from the widgets onto the query body. We\u2019ll now need to configure the submit button; Go back to Modal2, set the button\u2019s onClick property to execute a query, and choose editTask under the events property.\n\nDeleting Document\nThe Delete Document method deletes the document at the given path.\n\nFirst, select `Delete Document` from the commands drop-down.\nNext, add your document path.\n\nFor example, \u201ctasks/issue_id\u201d and click run to delete that document.\n:::note\nDeleting a document by giving a non-existing path is NOT treated as an error.\n:::\n\nCreate a new custom column on the table by clicking on Add a New Column under the columns property.\nNow, rename this column to \u2018Delete Task,\u2019 and click on the cog icon next to it, to configure column settings. Under this, we\u2019ll see column-type properties set to a button type.\n\nNow, write the Delete query:\n\nClick on the `+` icon next to the data sources and choose the Create New + from the Firestore datasource.\nSet the commands to Delete Document.\nSet the `Collection/Document Path*` to:\n\n`tasks/{{Table1.selectedRow._ref}}`\nSet the Delete Task button\u2019s onClick property to run the `deleteTask` query.\nServer-side Pagination\nFirestore supports server-side pagination with the Table widget. There are four fields in the query configuration that influence how this pagination works.\n\nOrder By: This is required to make pagination order predictable. It should be a JSON list of fields to use for ordering. E.g., `[\"field1\"]`.\nLimit Documents: This will be the number of documents in each page, i.e., the page size. A good value for this might be 10 or 15.\nStart After: This should be set to the document that marks the end of the current page. Usually set to `{{queryName.data[queryName.data.length - 1]}}`. The order by field should be unique for this to work in pagination.\nEnd Before: This should be set to the document that marks the start of the current page. Usually set to `{{queryName.data[0]}}`.\n\nOnce you have your Firestore query configured with these details, ensure the following three steps on your Table widget and the pagination should be ready:\n\nThe Table Data should be set to `{{queryName.data}}` (or something loosely similar).\n`Server side pagination` should be turned on, in the Table widget.\nThe `onPageChange` should be set to run this Firestore query.\n\nNow try clicking the next and previous page buttons on this Table widget and the data should refresh.\nUsing Queries in applications\nOnce you have successfully run a Query, you can use it in your application to\n\nDisplay Data\n",
    "tag": "appsmith"
  },
  {
    "title": "MySQL",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/datasources/querying-mysql.md",
    "content": "\nsidebar_position: 12\nMySQL\n:::note\nThe following document assumes that you understand the basics of connecting to databases on Appsmith. If not, please go over them before reading further.\n:::\nSupported versions\nAppsmith supports MySQL versions 5.5, 5.6, 5.7, and 8.0.\nConnection settings\nAppsmith needs the following parameters for connecting to a MySQL database:\n:::tip\nAll required fields are suffixed with an asterisk (*).\n:::\nConnection\nYou need to fill in the following parameters:\n\nConnection Mode*: You must choose one of the following two modes:\nRead Only: Choosing this mode gives Appsmith read-only permission on the database. This allows you to only fetch data from the database.\nRead / Write: Choosing this mode gives Appsmith both read and write permissions on the database. This allows you to execute all CRUD queries.\nHost Address / port*: Fill in the database host\u2019s address and port. If you don\u2019t specify a port, Appsmith may to connect to port 3306.\nDatabase Name*: Fill in the name of the database that you want to connect to. This is your database\u2019s name.\n\nAuthentication\nYou need to fill in the following parameters:\n\nUsername*: Fill username required for authenticating connection requests to your database.\nPassword*: Fill password required for authenticating connection requests for the given username to the database.\n\nSSL\nThe SSL Mode can be set to one of the following values:\n\n`Default`: Same as `Preferred`.\n`Preferred`: Use SSL, if the server supports it.\n`Required`: Reject connection, if SSL isn't available.\n`Disabled`: Connect without SSL, use a plain unencrypted connection.\n\nMore information available at MySQL documentation.\nQuerying MySQL\nMySQL databases can be queried using the standard SQL syntax. All MySQL queries return an array of objects where each object is a row returned by the query and each property in the object is a column.\n\nSQL modes\n`SQL_MODE` is a system variable in MySQL that controls the behavior of the MySQL server. It can be used to configure the server to be strict or forgiving when accepting input data, enable or disable standard SQL conformance, or provide better compatibility with other databases. Strict mode can help you ensure the integrity of your data by preventing the database from automatically inserting default values for missing or invalid data. \nSetting SQL modes\nTo change the SQL mode at runtime, you can use a SET statement to set the `GLOBAL` or `SESSION` `sql_mode` system variable:\n`js\nSET GLOBAL sql_mode = 'mode1,mode2,...';\nSET SESSION sql_mode = 'mode1,mode2,...';`\nwhere mode1, mode2, etc. are the specific SQL modes that you want to enable or disable. To switch to strict mode, it's recommended to use the TRADITIONAL mode by setting `SET sql_mode = TRADITIONAL`.\n\n\nTo check whether strict mode is enabled or not run:\n`SHOW VARIABLES LIKE 'sql_mode';`\n\n\nTo disable strict mode run:\n`set global sql_mode='';`\n\n\nUsing SQL modes is recommended to ensure that your queries conform to standard SQL behavior. With SQL modes, your queries can run more consistently across different MySQL versions and configurations. You can check the SQL documentation to learn more about SQL modes.\nUsing prepared statement (beta)\nNormal query execution simply string concatenates the evaluated values of the javascript bindings to produce the final query. This opens up the possibility of SQL injection by merging suspicious user input with trusted data for execution. Using a prepared Statement is one strategy for mitigating this risk.\nAppsmith converts the user query into a parameterized one by replacing the bindings in the query with '?'. The payload is then inserted one by one ensuring that the bindings get escaped and sanitized before the query is sent to the database for execution.\nFollow the guide on how to use prepared statements for efficient and secured data transactions.\nUsing queries in applications\nOnce you have successfully run a Query, you can use it in your application to\n\nDisplay Data\n",
    "tag": "appsmith"
  },
  {
    "title": "DynamoDB",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/datasources/querying-dynamodb.md",
    "content": "\nsidebar_position: 4\nDynamoDB\nDynamoDB is a serverless, fully managed, key-value NoSQL database designed to handle high-performance applications of any size\n:::note\nThe following document assumes that you understand the basics of connecting to databases on Appsmith. If not, please go over them before reading further.\n:::\nOn Appsmith, it's pretty straightforward to establish a connection with any datasource, including DynamoDB. With this integration, you can perform different operations using a custom UI built on Appsmith, with minimal configurations.\nCreate DynamoDB Datasource\nTo add an DynamoDB datasource, navigate to Explorer >> Click plus sign (+) next to Datasources >> Select DynamoDB under Databases.\n\nConnection Settings\nAppsmith needs the following parameters for connecting to a DynamoDB instance:\n\n:::tip\nAll required fields are suffixed with an asterisk (*).\n:::\n\nRegion: Select the region where your DynamoDB instance exists\nAWS Access Key Id: AWS access key that enables a program, script, or developer to access the resources on my AWS account programmatically.\nAWS Secret Access Key: Secret Access keys are like your password. This value is accessible from your AWS security credentials page.\n\nYou can get all the above details from your AWS account:\n\nHow to get the AWS access key?\nHow to get the AWS secret key?\nAWS DynamoDB regions/endpoints\n\nKey Concepts\nWhen working with DynamoDB, you should be familiar with the following fundamental concepts:\nTables: Tables are a collection of items.\nItems: In a table, an item is a single data record. The table's defined primary key serves as a unique identifier for each item in the table.\nAttributes: Attributes are pieces of data attached to a single item.\nPartition key: A simple primary key, composed of one attribute known as the partition key. Attributes in DynamoDB are similar in many ways to fields or columns in other database systems.\nComposite primary key:  This is a combination of partition key, and sort key, this type of key is composed of two attributes. The first attribute is the partition key, and the second attribute is the sort key. DynamoDB uses the partition key value as input to an internal hash function.\n:::info\nNo matter what type of primary key you choose, the primary key must be unique for each item in the table. You can read more about it.\n:::\nCreate Queries\nYou can add queries to DynamoDB datasource by selecting the New API + button available on the datasource page or by navigating to Explorer >> Click plus sign (+) next to Queries/JS >> Select the datasource name (DynamoDB). You can query DynamoDB databases using any of the officially supported operations.\nQuery\nYou can create queries to fetch, update and delete data from a datasource using the Appsmith query editor. Here we have listed some of the most basic operations to get started with using a DynamoDB API:\n| Query Name                                                       | Description                                                                                     |   |\n| ---------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- | - |\n| ListTables       | ListTables command gets a list of all the tables that are currently accessible at the endpoint. |   |\n| DescribeTable | DescribeTable command returns metadata about the table that is queried using the JSON body.     |   |\n| GetItem              | GetItem command retrieves a single item on the basis of its primary key.                        |   |\n| PutItem              | PutItem command is used to insert or replace an entire item object.                             |   |\n| UpdateItem            | UpdateItem can be used for conditionally updating parts of an item.                             |   |\nYou can check the Query Settings Guide to learn more about queries.\nListTables\nThe ListTables command can be used to retrieve all the tables available at the current endpoint. This request can be carried out even without a body.\n\nClick on the + icon next to the queries/js and choose your DynamoDB datasource.\nFrom the Commands drop-down, Select the method `List Tables`.\nNext, add your code in the body section.\n\nA sample request looks like this:\n`{\n   \"ExclusiveStartTableName\": \"string\",\n   \"Limit\": number\n}`\n:::info\nThe output from `ListTables` is paginated, with each page returning a maximum of 100 table names.\n:::\nDescribeTable\nThe DescribeTable command returns metadata about the table that is queried using the JSON body. It returns information about the table, including the current status of the table, when it was created, the primary key schema, and any indexes on the table.\n\nClick on the + icon next to the queries/js and choose your DynamoDB datasource.\nFrom the Commands drop-down, Select the method `Describe Tables`.\nNext, add your code in the body section.\n\nA sample request will look like this:\n`javascript\n{\n    \"TableName\" : \"four\"\n}`\nGetItem\nThe GetItem operation returns a set of attributes for the item with the given primary key. If there is no matching item, `GetItem` does not return any data, and there will be no `Item` element in the response.\n\nClick on the + icon next to the queries/js and choose your DynamoDB datasource.\nFrom the Commands drop-down, Select the method `GetItem`.\nNext, add your code in the body section.\n\nThe request would use this specified type in the JSON body. In the following example, the primary key is called `pkey` and has a value of `a`.\n`javascript\n{\n    \"TableName\" : \"four\",\n    \"Key\": {\n        \"pkey\" : \"a\"\n    }\n}`\nPutItem\nThe PutItem command is used to insert or replace an entire item object. This request can be configured to return with the inserted/updated item using the `ReturnValues` parameter.\n:::info\nIf an item with the same primary key as the new item already exists in the specified table, the new item completely replaces the existing item.\n:::\n\nClick on the + icon next to the queries/js and choose your DynamoDB datasource.\nFrom the Commands drop-down, Select the method `PutItem`.\nNext, add your code in the body section.\n\nHere, we use the PutItem command for a simple insert.\n`javascript\n{\n    \"TableName\" : \"four\",\n    \"Item\" : {\n        \"pkey\" : {\n            \"S\" : \"a\"\n        },\n        \"name\": {\n            \"S\" : \"Irene\"\n        },\n        \"friends\": {\n            \"SS\" : [\"Sherlock\"]\n        }\n    }\n}`\nUpdateItem\nThe UpdateItem can be used for conditionally updating parts of an item. Edits an existing item's attributes or adds a new item to the table if it does not already exist. You can put, delete, or add attribute values. You can also return the item's attribute values in the same `UpdateItem` operation using the `ReturnValues` parameter.\n\nClick on the + icon next to the queries/js and choose your DynamoDB datasource.\nFrom the Commands drop-down, Select the method `UpdateItem`.\nNext, add your code in the body section.\n\nA sample request might have the following body:\n`javascript\n{\n    \"TableName\" : \"four\",\n    \"Key\" : {\n        \"pkey\" : {\n            \"S\" : \"a\"\n        }\n    },\n    \"UpdateExpression\" : \"set friends = :new_friends\",\n    \"ExpressionAttributeValues\" : {\n        \":new_friends\" : {\n            \"SS\" : [\"Mycroft\", \"Watson\", \"Irene\"]\n        }\n    },\n    \"ReturnValues\" : \"ALL_NEW\"\n}`\nWith DynamoDB integration, it is possible to create apps that seamlessly connect with the DynamoDB database and provide additional flexibility for updating and analyzing data.\nUsing Queries in applications\nOnce you have successfully run a Query, you can use it in your application to\n\nDisplay Data\n",
    "tag": "appsmith"
  },
  {
    "title": "Datasources",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/datasources",
    "content": "\nsidebar_position: 2\nDatasources\nAppsmith offers plug-and-play support for many databases and the RESTful API interface for seamless integration with other tools. Appsmith supports the following databases and APIs.\nDatabases\nDatabases are an essential part of many applications and are used to store and manage data. You can run queries to read and write data directly from the Appsmith editor. Following databases are supported by Appsmith:\n\n\n\n\n\n\n\nPostgreSQL\n\n\n\n\n\n\n\nMongoDB\n\n\n\n\n\n\n\nMySQL\n\n\n\n\n\n\n\nElasticsearch\n\n\n\n\n\n\n\n\n\nRedis\n\n\n\n\n\n\n\nMicrosoft SQL Server\n\n\n\n\n\n\n\nFirestore\n\n\n\n\n\n\n\nRedshift\n\n\n\n\n\n\n\n\n\nS3\n\n\n\n\n\n\n\nDynamoDB\n\n\n\n\n\n\n\nSnowflake\n\n\n\n\n\n\n\nArangoDB\n\n\n\n\n\n\n\n\n\nSMTP\n\n\nAPIs\nWith Appsmith, you can connect with a wide range of tools and platforms; if there isn't a supported datasource, you can connect using the REST API. Following APIs are supported by Appsmith:\n\n\n\n\n\n\n\nAPI\n\n\n\n\n\n\n\nGoogle Sheets\n\n\n\n\n\n\n\nGraphQL API\n\n\n\n\n\n\n\n\n\nAirtable\n\n\n\n\n\n\n\nTwilio\n\n\n\n\n\n\n\nHubSpot\n\n",
    "tag": "appsmith"
  },
  {
    "title": "Amazon / Generic S3",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/datasources/querying-amazon-s3.md",
    "content": "\nsidebar_position: 2\nAmazon / Generic S3\n:::note\nThe following document assumes that you understand the basics of connecting to databases on Appsmith. If not, please go over them before reading further.\n:::\nThe Appsmith S3 Datasource can connect to Amazon S3, Upcloud, Digital Ocean Spaces, Wasabi, DreamObjects, MinIO, and any other S3 provider! Below, you will see examples of connecting to your S3 provider and issuing List, Create, Read, and Delete actions.\n\nFor our examples below, we will connect to an Amazon S3 provider.\nConnection Settings\nThe S3 Datasource requires the following information to establish a connection:\n\nAmazon Access Key ID\nAmazon Secret Key\n\nFor Amazon S3, you can find your Access Key and Secret Key using the following guide: Generate AWS access key & secret\n\nSigned and Un-signed URLs\nA signed URL allows the user to follow that link directly and immediately view the related resource. If you only have an un-signed URL, then that resource cannot be accessed directly; instead, you will need to use the Amazon API to query the resource along with appropriate authentication.\nSigned URLs are only valid for a certain amount of time: For Amazon S3, you can specify a length of time of up to 7 days (10,080 minutes). To configure this in the Appsmith platform, enter the desired length of time (in minutes) into the `Expiry Duration of Signed URL` field.\n:::info\nIn any of the S3 actions below that return file information, you can choose to generate a signed URL for each returned file by selecting \"Yes\" in the `Generate Signed URL` dropdown field in your query's configuration.\n:::\nIf you choose to generate a signed URL, the query response will include two additional fields:\n\n`signedUrl`: The signed URL for the file.\n`urlExpiryDate`: The timestamp at which the signed URL will expire.\n\nWith the `Generate Un-signed URL` dropdown option, you may choose to request a regular URL that links to the resource. In that case, you would receive one additional field `url` which does not expire; however, as mentioned above, this URL cannot be used to access the resource directly, and instead must be used within a valid API request.\nList Files\nThis action lists/returns an array of objects which are contained within that bucket, each including at least a `fileName` property.\n`json\n[\n  {\n    fileName: \"myFile.pdf\",\n    ...\n  },\n  ...\n]`\nFill in the Bucket Name input with the name of the S3 bucket you'd like to query.\n\nYou can use the Prefix box to narrow your query to return only files that begin with your specified prefix. This is used to access S3 directories; files are stored in a flat structure instead of nested folders, but are grouped by adding common prefixes to the related items' filenames. This emulates the traditional directory tree structure. Take a look at the Amazon S3 documentation for more detail on how files are organized!\n```\n// directory tree structure\nroot\n|folderOne\n| |__itemOne.png\n|\n|__folderTwo\n  |__folderThree\n    | itemTwo.pdf\n// S3 structure\nbucket\n| folderOne/itemOne.png\n| folderTwo/folderThree/itemTwo.pdf\n```\nCreate File\nThis action creates a new file in the specified bucket, named according to the `File Path` field. Remember to include directories in the file name, e.g. `folderTwo/folderThree/itemTwo.png`.\nThe action returns the following two fields:\n\n`signedUrl`: A signed URL for the file.\n`urlExpiryDate`: A timestamp at which the signed URL will expire.\n\nYou can set an expiry duration for the generated signed URLs by editing the `Expiry Duration of Signed URL` field.\n\n:::note\nIf a file by the same name/path already exists within the bucket, the old file will be overwritten by the new file!\nEnable the \"Request confirmation before running query\" setting to help avoid accidentally overwriting files!\n:::\n\nThere are two ways to send content to the S3 bucket:\n\nA file can be selected and uploaded with the Filepicker Widget. To reference this file in your query (assuming that your Filepicker is named \"FilePicker1\"), use `{{Filepicker1.files[0]}}` in the `Content` field of your query.\nBe sure that the `File Data Type` field is set appropriately for the data you are uploading. For example, if your Filepicker's `Data Format` is set to `Base64`, your query should be set to `Base64` also.\nAlternatively, you can manually add data into the `Content` field by writing an object with a `text` and `data` property like below:\n\n`{\n  \"type\": \"text/plain\",\n  \"data\": \"This is my text content!\"\n}`\nIn this second case, you'll want to ensure that your `File Data Type` is set to `Text`.\nCreating Multiple Files\nThere are a couple of extra considerations to make when using the Create multiple new files operation:\n\nWhen using the Filepicker, be sure to set the widget's Max No. Files property to a value greater than the default \"1\"; otherwise, the user will not be able to upload multiple files for the query.\nNow when defining the query's Content, you'll pass in the entire `{{Filepicker1.files}}` array, instead of `{{FilePicker1.files[0]}}` as before.\nYou can give all the files a common path/prefix in your bucket by setting the Common File Path field in your query. This can be used to achieve a result such as:\n\n`// a single Create Multiple query with Common Path set to \"commonPath/\"\ncommonPath/fileOne.png\ncommonPath/fileTwo.png\ncommonPath/fileThree.jpeg`\nRemember: The file paths are actually just file names that follow a pattern which looks like directories; this means that, in order to achieve a result like \"commonPath/fileOne.png\", you will need to explicitly include the \"/\" character in the Common File Path field (e.g. use `commonPath/`, not just `commonPath`).\nRead File\nThis action fetches a file from the bucket (specified in the `Bucket Name` field) with a file name/path matching the contents of the `File Path` field. By default, the raw content of the file is returned on the `fileData` property of the response. File content can also be Base64 encoded by selecting `Yes` in the `Base64 Encode File - Yes/No` dropdown field.\nIf your `fileData` content is in Base64 format and needs to be decoded, use the JavaScript atob() method.\n:::tip\nWhen reading multimedia files or formatted text, please encode the file data using the Base64 Encode dropdown field. Once the data has been received, it can be decoded with `atob()` as noted above.\n:::\n\nDelete File\nThis action deletes a file with the name/path matching the contents of the `File Path` field. Files deleted from the bucket cannot be restored; please ensure you have backed up your files!\nThis action returns a message on the `status` property describing the outcome of your query.\n:::tip\nEnable the \"Request confirmation before running query\" setting in your Delete Query to help avoid accidentally deleting files!\n:::\n\nDeleting Multiple Files\nThe only difference from the single Delete operation is that you'll now be providing an array of file paths to delete in the List of Files field. For example:\n`{{\n  [\n    \"folderOne/itemOne.png\",\n    \"folderTwo/folderThree/itemTwo.pdf\"\n  ]\n}}`\nUsing Queries in applications\nOnce you have successfully run a Query, you can use it in your application to\n\nDisplay Data\nCapture Data\nUpload files\n",
    "tag": "appsmith"
  },
  {
    "title": "Google Sheets",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/datasources/querying-google-sheets.md",
    "content": "\nsidebar_position: 7\nGoogle Sheets\nGoogle Sheets is a web-based application provided by Google that enables users to create, update and share spreadsheets online in real-time.\nSpreadsheets are a common way of organizing, editing, and analyzing data and serve as a data source for many teams.\n:::info\nTo integrate Google Sheets with Appsmith, you should understand the basics of connecting to databases on Appsmith.\n:::\nAppsmith integration with Google Sheets provides an easy way to manipulate, analyze and manage Spreadsheets. With this integration, you can perform different operations using a custom UI built on Appsmith, with minimal configurations.\nCreate Google Sheets Datasource\nTo add a Google Sheets datasource, navigate to Explorer >> Click plus sign (+) next to Datasources >> Select Google Sheets under APIs.\n\nConnection Settings\nConfigure the Google Sheets Datasource as illustrated below:\nScope\nYour datasource\u2019s scope setting defines what type of access privileges your app will have when working with your Google Sheets. Use this option to allow only the necessary operations that your app requires. This will help avoid accidentally deleting or overwriting data.\n\nRead Files\nYou can use the Read Files scope if you\u2019d like to provide limited access to Sheets, which is restricted to only listing existing spreadsheets or reading data from them.\nThe Read permission is required for the following query types:\n\nFetch Details\nFetch Many\n\nRead, Edit, and Create Files\nIf you want to perform additional operations like creating new spreadsheets or updating existing ones, you can use the Read, Edit, and Create Files scope to configure your datasource.\nThe Edit and Create permissions are required for the following query types:\n\nInsert One\nInsert Many\nUpdate One \nUpdate Many\n\nRead, Edit, Create, and Delete Files\nIn order to delete spreadsheets, you will be required to authorize the Read, Edit, Create, and Delete scope for your datasource.\nThe Delete permission is required for the following query type:\n\nDelete One\n\n:::caution\nWhen configured with this scope, queries related to this datasource may be potentially destructive and should be used carefully to avoid accidentally deleting data!\nConsider enabling the Request confirmation before running query setting to help prevent unintentional loss of data.\n:::\nSave and Authorize\nClick on the Save and Authorize button once you have selected your desired scope. You'll automatically be navigated to a Google Login screen, where you should select and log-in to the account whose spreadsheets you\u2019d like to access.\nOn successful login, you will be shown a screen where you will be asked to grant Appsmith certain permissions relating to managing your Google Sheets. Be sure to click Allow in order for Google Sheets to allow Appsmith to manage your spreadsheets.\nCreate Queries\nYou can add queries to Google Sheets datasource by selecting the New API + button available on the datasource page or by navigating to Explorer >> Click plus sign (+) next to Queries/JS >> Select the datasource name (GoogleSheetsDatasource).\nQuery\nYou use the Query tab to define - the type of operation you want to perform and the entity on which the operation will be performed.\n:::info\nSome operations are not available for some entities. If an operation is not available for an entity, the entity is grayed out, and the tooltip `Action not supported` will be displayed when you hover over it.\n:::\nOperation\nOperation lets you define the type of action you want to perform on Google Sheets (Spreadsheets or individual Sheets available in a spreadsheet). Following is the list of available operations:\n| Operation                                                             | Description                                                                           | Available on below Entity |\n| ------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | ----------------------------- |\n| Fetch Details      | Use it to fetch details like the name of the spreadsheet, created date and time, and more | Spreadsheet                   |\n| Insert One            | Use it to insert a single row in a sheet or add a new spreadsheet                         | Spreadsheet/Sheet Rows        |\n| Update One            | Use it to update rows in a given sheet in a spreadsheet                                   | Sheet Rows                    |\n| Delete One            | Use it to delete a spreadsheet or a sheet or row in a sheet                               | Spreadsheet/Sheet/ Sheet Rows |\n| Fetch Many | Use it to fetch data from a sheet or all the spreadsheets available in your account.      | Spreadsheet/Sheet Rows        |\n| Insert Many          | Use it to insert multiple rows in a given sheet                                           | Sheet Rows                    |\n| Update Many        | Use it to update multiple rows in a given sheet                                           | Sheet Rows                    |\nFetch Details\nThe operation allows you to fetch the details of a given spreadsheet.\n\nYou can set the parameter values as below:\n\nOperation - Fetch details\nEntity - Spreadsheet\nSpreadsheet - Either select the name of the spreadsheet from the available options, or you can enable the JS label and add the URL of the desired spreadsheet\n\n:::info\nThe Fetch Details operation is only available to fetch the details of a spreadsheet.\n:::\nInsert One\nWith Insert One, you can choose to insert a new row in an existing spreadsheet or add a new spreadsheet.\nInsert a new Spreadsheet\nWhen you select to add a new spreadsheet, the new spreadsheet is created and available in your google account. When adding a new spreadsheet, you can also choose to add data to it.\n\nFor creating a spreadsheet and adding data to it, you can set the parameter values as below:\n\nOperation - Insert One\nEntity - Spreadsheet\nSpreadsheet - Add the name you want to give to the spreadsheet. For example, `AppsmithEmployeeDirectory`\nRow Objects - For adding data to the spreadsheet, you\u2019ll have to add the data in the form of a JSON Array. For example, you want to add the existing employee records to the sheet.\n\n:::info\nThe first insert to a blank sheet will also define the Sheet Schema - the column headers. If you wish to add more columns, you\u2019ll have to add the column names manually to the sheet. If the column names are not present in the sheet, the subsequent inserts will ignore the data for the additional columns even if supplied in the JSON.\n:::\n`[\n    \"rowIndex\" : 1,\n    \"id\": \"EMP001\",\n    \"FullName\": \"Alex D\",\n    \"Experience\": \"15.5 years\",\n    \"Designation\": \"Head of Technology\",\n    \"JoiningDateTime\": \"2022-05-12T09:07:57.000Z\"\n  },\n  {\n    \"rowIndex\" : 2,\n    \"id\": \"EMP002\",\n    \"FullName\": \"Darren L\",\n    \"Experience\": \"10.5 years\",\n    \"Designation\": \"Senior Manager - Sales\"\n    \"JoiningDateTime\": \"2012-05-12T09:07:57.000Z\"\n  }\n]`\n:::info\nYou\u2019ll have to supply `rowIndex` when creating a new spreadsheet and adding data.\n:::\nInsert new row to Sheet\nYou have a form that you use to capture the employee details. Whenever a new employee joins, you want to use that form and add the details to the existing spreadsheet `AppsmithEmployeeDirectory`.\n\nYou\u2019ll have to add a query to insert the data by setting parameters as below:\n\nOperation - Insert One\nEntity - Sheet Row(s)\nSpreadsheet - Select the name of the spreadsheet `AppsmithEmployeeDirectory`\nSheet Name - Select the name of the Sheet `Sheet1`\nTable Heading Row Index - Keep the default value that is 1\nRow Objects - For adding data to the spreadsheet, you\u2019ll have to add the data in JSON format as shown in the below code snippet:\n\n`{\n    \"id\": \"EMP005\",\n    \"FullName\" : \"Karren L\",\n    \"Experience\" : \"6 years\",\n    \"Designation\" : \"Senior Sales Manager\",\n    \"JoiningDateTime\" : \"2022-06-28T09:51:48.127Z\"\n}`\n:::info\nYou can use the above JSON to test the Query execution.\n:::\nTo capture the user input, you can create a form as shown in the screenshot below and bind the query execution on the `onClick` event of a Submit button.\n\nYou can modify the Row Objects JSON data to capture the values from the form, as shown in the code snippet below:\n:::info\nYou\u2019ll have to add quotes to the string values if the Smart JSON Substitution is turned off in the `settings` tab.\n:::\n`{\n    \"id\": {{Employee.data.EmployeeCode}},\n    \"FullName\" : {{Employee.data.NameOfEmployee}},\n    \"Experience\" : {{Employee.data.ExperienceInYears}},\n    \"Designation\" : {{Employee.data.EmployeeDesignation}},\n    \"JoiningDateTime\" : {{Employee.data.EmployeeDOJ}}\n}`\n:::info\nYou can read the child widget data embedded in the form widget using `{{<FORM_NAME.data.CHILD_WIDGET_NAME>}}` in a mustache `{{}}` sign.\n:::\nWhen the user inputs an employee\u2019s data, and clicks the `Submit` button, the query executes, and data is added to the existing sheet `Sheet1` of the `AppsmithEmployeeDirectory.`\nUpdate One\nWith Update One, you can choose to update a single record in an existing spreadsheet.\n\nYou can capture the data you want to update and send it to the update one query. For example, you want to update the designation and experience of an employee. You can pass the below parameters to the Update One Query.\n\nOperation - Update One\nEntity - Sheet Row(s)\nSpreadsheet - Select the name of the spreadsheet `AppsmithEmployeeDirectory`\nSheet Name - Select the name of the Sheet `Sheet1`\nTable Heading Row Index - Keep the default value that is 1\nRow Objects - For updating data to the spreadsheet, you\u2019ll have to add the data in JSON format as shown in the below code snippet:\n\n:::info\nYou should supply the value of rowIndex when updating the data. You get the value of rowIndex when you fetch the data from a sheet by using Fetch Many.\n:::\n`{\n    \"rowIndex\" : 4,\n    \"Experience\" : {{Employee.data.ExperienceInYears}},\n    \"Designation\" : {{Employee.data.EmployeeDesignation}}\n}`\nYou can also choose to update all the data columns if needed.\n:::info\nThe row to be updated is a calculated entity using the formula (`Row Index` + `Table Heading Row Index` + `Modifier for the 0 indexed Google Sheet`). The modifier for the 0 indexed Google Sheet is a constant set to 1.\n:::\nThe calculated to be updated row index will be `(4 + 1 + 1) = 6`.\nDelete One\nYou can perform the Delete One operation to delete a spreadsheet, a sheet within a spreadsheet, or a row from the sheet.\nDelete a Spreadsheet\nTo delete a spreadsheet, you can choose the below parameters:\n\n\nOperation - Delete One\nEntity - Spreadsheet\nSpreadsheet - Select the name of the spreadsheet `TestDeletion`. You can also supply the URL for the spreadsheet by enabling the JS label.\n\nDelete a Sheet\nYou can choose to delete a sheet from the given spreadsheet. You can choose the below parameters:\n\n\nOperation - Delete One\nEntity - Sheet\nSpreadsheet - Select the name of the spreadsheet `TestSheetDeletion`. You can also supply the URL for the spreadsheet by enabling the JS label.\nSheet Name - Select the sheet name you want to delete from the spreadsheet `Sheet1`.\n\n:::info\nThe `Delete One` operation for a Sheet only works when there is more than one sheet in the spreadsheet.\n:::\nDelete a Sheet Row\nYou can choose to delete a row from the existing sheet from the given spreadsheet. You can choose the below parameters:\n\n\nOperation - Delete One\nEntity - Sheet Row(s)\nSpreadsheet - Select the name of the spreadsheet `AppsmithEmployeeDirectory`. You can also supply the URL for the spreadsheet by enabling the JS label.\nSheet Name - Select the sheet name you want to delete from the spreadsheet `Sheet1`.\nRow Index - If you want to delete the row 5 data in the Google Sheet, you should supply the Row Index as 3.\n\n:::info\nThe row to be deleted is a calculated entity using the formula (`Row Index` + `Table Heading Row Index` + `Modifier for the 0 indexed Google Sheet`). The modifier for the 0 indexed Google Sheet is a constant set to 1.\n:::\nThe calculated to be deleted row index will be `(3 + 1 + 1) = 5.`\nFetch Many\nYou can choose to fetch multiple records from a sheet or fetch spreadsheets available in your Google account by using Fetch Many.\nFetch Many Spreadsheet\nTo fetch spreadsheets available in your account, you can choose the below parameters:\n\n\nOperation - Fetch Many\nEntity - Spreadsheet\n\nYou can display the data by binding it to a widget. For example, you want to display the spreadsheets in a select widget. For this, you\u2019ll have to add a JS Object function in which you\u2019ll traverse through the response generated by the query and create an array of objects with label and value as a key and a value pair, as shown below:\n`export default {\n    getSpreadsheetNames: () => {\n        return fetchAllSpreadsheets.data.map((spreadsheet) => {\n            return {\n                \"label\": spreadsheet.name,\n                \"value\" : spreadsheet.id\n            }\n        })\n    }\n}`\n:::info\nBind the data returned by the JS object to the select widget by using `{{<JS_OBJECT_NAME.FUNCTION_NAME()>}}` embedded in a mustache `{{}}` sign.\n:::\nFetch Many Sheet Rows\nTo fetch spreadsheets data, you can choose the below parameters:\n\n\nOperation - Fetch Many\nEntity - Sheet Row(s)\nSpreadsheet - Select the name of the spreadsheet `AppsmithEmployeeDirectory`. You can also supply the URL for the spreadsheet by enabling the JS label.\nSheet Name - Select the sheet name you want to delete from the spreadsheet `Sheet1`.\nTable Heading Row Index - Keep the default value that is 1\n\n:::info\nYou can choose to add filters using range or `where` Clause.\n:::\nYou can display the data by binding it to a widget. For example, you can display the spreadsheet data in a table widget.\n:::info\nBind the data returned by the query to a table widget - TableData property by using `{{<QUERY_NAME>.data>}}` embedded in a mustache `{{}}` sign.\n:::\nInsert Many\nYou can choose to insert multiple records in an existing sheet by using Insert Many.\n\n\nOperation - Insert Many\nEntity - Sheet Row(s)\nSpreadsheet - Select the name of the spreadsheet `AppsmithEmployeeDirectory`. You can also supply the URL for the spreadsheet by enabling the `JS label`.\nSheet Name - Select the sheet name you want to insert to the spreadsheet `Sheet1`.\nTable Heading Row Index - Keep the default value that is 1\nRow Objects - For inserting data to the spreadsheet, you\u2019ll have to add the data in JSON Array Format as shown in the below code snippet:\n\n```\n[\n   {\n    \"rowIndex\" : 1,\n    \"id\": \"EMP010\",\n    \"FullName\": \"Derrick D\",\n    \"Experience\": \"1.5 years\",\n    \"Designation\": \"Trainee Engineer\",\n    \"JoiningDateTime\": \"2022-05-12T09:07:57.000Z\"\n  },\n  {\n    \"rowIndex\" : 2,\n    \"id\": \"EMP011\",\n    \"FullName\": \"Tom L\",\n    \"Experience\": \"8 years\",\n    \"Designation\": \"Manager - Sales\",\n    \"JoiningDateTime\": \"2012-05-12T09:07:57.000Z\"\n  }\n]\n```\n:::info\nYou can choose not to provide rowIndex, and inserts will still happen.\n:::\nYou can also bind an API or a Query response returning a JSON Array to Row Objects by using `{{<QUERY/API_NAME>.data}}` embedded in a mustache `{{}}` sign.\nUpdate Many\nYou can choose to update multiple records in an existing sheet by using Update Many.\n\n\nOperation - Update Many\nEntity - Sheet Row(s)\nSpreadsheet - Select the name of the spreadsheet `AppsmithEmployeeDirectory`. You can also supply the URL for the spreadsheet by enabling the JS label.\nSheet Name - Select the sheet name you want to update from the spreadsheet `Sheet1`.\nTable Heading Row Index - Keep the default value that is 1\nRow Objects - For updating data in the spreadsheet, you\u2019ll have to add the data in JSON Array Format as shown in the below code snippet:\n\n:::info\nYou will have to provide `rowIndex`, without which the updates will fail.\n:::\n`[\n   {\n    \"rowIndex\" : 1,\n    \"Experience\": \"3 years\",\n    \"Designation\": \"Junior Engineer\"\n  },\n  {\n    \"rowIndex\" : 2,\n    \"Experience\": \"10 years\",\n    \"Designation\": \"Senior Manager - Sales\"\n  }\n]`\n:::info\nThe row to be updated is a calculated entity using the formula (`Row Index` + `Table Heading Row Index` + `Modifier for the 0 indexed Google Sheet`). The modifier for the 0 indexed Google Sheet is a constant set to 1.\n:::\nThe calculated to be updated row index will be `(1 + 1 + 1) = 3`, and `(2+1+1) = 4` respectively.\nCommon Settings\nThere are a few settings listed below that are common to many operations that you will perform on the Google Sheets:\nEntity\nYou can select the type of entity that you want to perform the operation on:\n\nSpreadsheet - When you want to perform the operation on Spreadsheet. For example, you want to create a new spreadsheet for every user\u2019s data input.\nSheet - When you want to perform the operation on a sheet already present in a spreadsheet. For example, you want to update some data in the existing sheet. Using Sheet as an entity, you can add a new sheet to an existing spreadsheet.\nSheet Rows - When you want to focus on inserting, updating, or deleting rows in an existing sheet, you can use Sheet Rows for the same.\n\n:::info\nAll operations may not be available for every entity. For all the unsupported operations for that entity, you will see an `Action not supported` tooltip when you try to select an Entity.\n:::\nDepending upon the type of operation and the entity selected, you'll have to provide the below details:\n\nSpreadsheet\nProvide the name of the spreadsheet you want to perform an operation on. You can also add the spreadsheet URL by enabling the JS label.\nSheet Name\nSelect the sheet's name from the dropdown on which you want to perform an operation. You can also choose to add the name by enabling the JS label.\nTable Heading Row Index\nEnter the row index of the header row in a Google Sheet. Usually, it starts with 1, so the default value supplied to this field is 1. You can change it to the heading row index if needed.\nColumns\nYou could provide the columns that you want to select for the query. The default setting is All Columns will be fetched. If you want to select only a few columns, you can do that by enabling the JS label and supplying the column names in a JSON array format as below:\n`[\"columnname1\", \"columnname2\"]`\nIn the above code snippet, `columnname1` and `columnname2` are the column names in the Google sheet.\n\n:::info\nThe column names are case sensitive, and you should include trailing or leading spaces when adding the column names in JS if they are present in the Google Sheet.\n:::\nFilter Format\nThe filter format allows you to filter your Google sheet data based on range or data filters.\nCell Range\nYou can filter by range for cases when you want to fetch data from designated cells in your sheet. For example, you want to check the experience level and designations of the employees to create a data table that shows how many employees are eligible for a promotion. You can choose filter by cell range and select the designated columns excluding all the other details. Filter by cell range gives you the desired data set that works best for your use case.\n\nWhere Clause\nBy defining the column and the filter criteria, you can filter by the data available in columns. For example, you want to fetch all employees designated as project leaders. You can define the designation column as part of the Where clause and supply the filter value as Project Leader.\nYou can define a where clause by defining the following values:\n\n\nFilter By - You define one or more criteria as part of the `filter by`.\nKey - Specify the column names on which you would want to add filters\nSelect the comparison operator to evaluate the condition\nValue - Specify the filter value which will be used to filter the data\nAdd Condition - You can use it to add more conditions and select the \u201cAnd/or\u201d operator for evaluation\nAdd Group Condition - You can add a group condition that uses an \u201cAnd\u201d clause to evaluate the conditions specified in the group.\nSort By - You can choose to sort the data based on the column name and provide the type of sorting: Ascending or Descending. You can choose to enable JS label and add your own code in JSON Format :`[ { \"column\": \"columnName\", \"order\": \"Ascending\" } ]` For example, you want to sort the data on the employee\u2019s full name in ascending order. You can add the code for the sort by condition:`[ { \"column\": \"FullName\", \"order\": \"Ascending\" } ]`\nAdd Parameter - you can add more parameters to sort if you want to sort on more than one column.\nPagination Limit - You can set the number of pages to be displayed per page. By default, the value is set to 20. But you can change it as per your needs.\nPagination Offset - If you wish to skip some data, you can add the number of rows in the field. The number of rows specified will be skipped and will not be a part of the dataset returned as a result of query execution.\n\nYou can also choose to write the Where Clause by enabling the JS label and adding the below code snippet in a JSON Format\n`{\n  \"condition\": \"AND\",\n  \"children\": [\n    {\n      \"condition\": \"LT\",\n      \"key\": \"k1\",\n      \"value\": \"v1\"\n    },\n    {\n      \"key\": \"k2\",\n      \"condition\": \"LT\",\n      \"value\": \"v2\"\n    },\n    {\n      \"condition\": \"AND\",\n      \"children\": [\n        {\n          \"condition\": \"LT\",\n          \"key\": \"k3\",\n          \"value\": \"v3\"\n        }\n      ]\n    }\n  ]\n}`\n:::info\nAs per your filter criteria, you can replace the key and value with the column names. You can also add, replace or remove conditions based on filtering needs.\n:::\nFor example, you want to fetch all the employees with designation as Junior Engineer. You can write a where clause as below and enable the `JS label` for the `Filter By` and add it to the text field.\n`{\n    \"condition\": \"AND\",\n    \"children\": [\n        {\n            \"condition\": \"EQ\",\n            \"key\": \"Designation\",\n            \"value\": \"Junior Engineer\"\n        }\n    ]\n}`\nIf you now want to fetch all employees with designation as Junior Engineer and have experience of 3 years, then the code for conditions will be as follows:\n`{\n    \"condition\": \"AND\",\n    \"children\": [\n        {\n            \"condition\": \"EQ\",\n            \"key\": \"Designation\",\n            \"value\": \"Junior Engineer\"\n        },\n        {\n            \"key\": \"Experience\",\n            \"condition\": \"EQ\",\n            \"value\": \"3 years\"\n        }\n    ]\n}`\nUsing Queries in applications\nOnce you have successfully run a Query, you can use it in your application to\n\nDisplay Data\n",
    "tag": "appsmith"
  },
  {
    "title": "GraphQL",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/datasources/graphql.md",
    "content": "\nsidebar_position: 8\nGraphQL\nGraphQL is a query language that allows a requesting client to ask for exactly what it's looking for, where it's looking for it, and receive just the response it needs. Making things easier for developers and clients alike. As an alternative to the popular REST services, it offers a single point for retrieving data from multiple sources in the format specified by the consumer.\nAppsmith provides an easy way to integrate with GraphQL, and enables you to perform different operations using a custom UI built with minimal configurations.\n\nCreate GraphQL API\nTo add a GraphQL API, navigate to Explorer >> Click on the + icon (next to Datasources) >> Select Authenticated GraphQL API under APIs.\n:::info\nYou can choose to create a one-off query by selecting Create New GraphQL API.\n:::\n\nConnection Settings\nConfigure the GraphQL API as illustrated below:\nCreate GraphQL Datasource\n:::info\nAll required fields are suffixed with an asterisk.\n:::\nURL\nUse this field to add the API URL you want to access. For instance, if you want to visit GitHub GraphQL API, enter https://api.github.com/graphql in the URL field.\nHeaders\nHTTP Headers are an important part of the API request and response, representing the meta-data associated with the API request and response. Headers carry the following information:\n\nRequest and Response Body;\nRequest Authorization;\nResponse Caching;\nResponse Cookies.\n\nQuery Parameters\nA parameter is a piece of information you provide to a query during its execution. In the query, parameters can be used independently or as a component of a larger expression to build a criterion. The API you integrate allows you to include one or more query parameters as part of the request.\nSend Appsmith signature header*\nYou can enable Send Appsmith Signature Header to ensure that the incoming requests originate from Appsmith.\nAuthentication Type\nGraphQL API authentication types can be defined using the protocols offered by Appsmith.\nUse Self-signed certificate\nSelf-signed certificates are sometimes used in testing or internal environments, as they provide incoming/outgoing data encryption and can be created at no cost.\nThe GraphQL Datasource allows you to upload your own self-signed certificate within the API's configuration page. You can follow this document to learn more about Self-signed certificates.\n:::info\nThis information needs to be provided in .PEM (Privacy Enhanced Mail) format, as shown here.\n:::\nCreate Queries\nYou can add queries to the newly created GraphQL datasource in one of the below ways:\nGraphQL Datasource Page\nYou can add queries to GraphQL datasource by selecting the New API + button available on the datasource page.\nGraphQL Datasource Page\nQuery/JS page\nBy navigating to Explorer >> Click plus sign (+) next to Queries/JS >> Select the GraphQL datasource.\nQuery/JS page\nDatasource Page\nSimilar to REST APIs, you can choose to create a one-off query by clicking on the \u201c+\u201d icon next to \u201cDatasources\u201d and selecting \u201cCreate New GraphQL API\u201d.\nDatasource Page\nYou can create and run queries for an existing GraphQL datasource. You can provide the URL and additional information like the Headers, Params, Body, and Pagination. Once you have added code in the body section, you can directly run the query and connect it with widgets.\nLet\u2019s take an example to understand how \u201cCreate new GraphQL API\u201d works.\n\n:::info\nTo understand GraphQL query creation, let's use the Public GraphQL API that gives information about continents and countries.\n:::\n\nClick on the + icon next to the Datasources and choose your \u201cCreate new GraphQL API\u201d.\nAdd your API request URL.\nFor this example, please use: https://countries.trevorblades.com.\nIn the Body of the request, put the GraphQL query to get details of countries.\n\n`query CountryFilterInput{\n    countries{\n        code\n        name\n        capital\n        continent{\n            code\n            name\n        }\n    }\n}`\n\nNow run the query.\n\nWith this, all of a country's information, including its code, name, capital, etc., will be displayed in the response section.\nQuery\nYou can create queries to fetch, update and delete data from a datasource using the Appsmith query editor. Let's discuss the following query methods:\n| Query Name                                                  | Description                             |\n| ----------------------------------------------------------- | --------------------------------------- |\n| \u200bList Records\u200b                   | Fetches all the data from the database. |\n| \u200bRetrieve A Record\u200b         | Retrieve a particular record.           |\n| Insert Records\u200b | Insert a new record in the database.    |\n| \u200bDelete A Record\u200b             | Delete a specific record.               |\n| \u200bUpdate Records\u200b               | Update a few fields in a record.        |\n:::info\nGraphQL Queries (Read operations like List, Retrieve, etc.) and GraphQL Mutations (Write operations like insert, update, etc.) are collectively termed Queries in Appsmith.\n:::\nList Records\nList command lets you display all the data from the database. With Appsmith, you can present data that has been filtered and sorted based on fields, records, etc.\n\nClick on the + icon next to the queries/js and choose your GraphQL datasource.\nRename the query.\nAdd your code in the body section.\n\nOnce the parameters have been specified, click Run. The response section will now display the data.\nLet's take an example to understand how the list record command works.\nIn this example, we will use Github\u2019s GraphQL API to view and manage issues, including issue assignees, comments, labels, and milestones.\n:::info\nPlease understand key terms and concepts before using the GitHub GraphQL API.\n:::\n\nAdd the following code to the query to get issues from a specified repository:\n\n```\nquery GetRepositoryWithIssues {\n  repository(owner: \"harshilp12\", name: \"Test\"){\n    id\n    nameWithOwner\n    description\n    url\n    issues(last: 50) {\n      totalCount\n      nodes{\n        title\n        id\n        number\n        url\n        state\n        createdAt\n        author {\n              login\n        }\n\n\n```  }\n}\n```\n\n\n}\n}\n```\nIn the preceding query, we obtained information on issues (totalCount), the most recent issues with their titles and creation dates (createdAt), as well as information on the issue author.\nYou can use a table widget to display your data. You can follow this document to understand how the table widget works.\nDisplay Data Using Table Widget\nWhen you make requests to the API, it returns many results. To make the responses more manageable, paginate the results. The benefit of this approach is that it doesn't require additional backend logic. Appsmith supports both Limit/Offset Based Pagination and Cursor-based Pagination.\n\u200bRetrieve A Record\u200b\nRetrieve record lets you fetch data for a particular user detail.\n\nClick on the + icon next to the queries/js and choose your GraphQL datasource.\nRename the query.\nAdd your code in the body section.\n\nLet's look at an example where we retrieve the number of GitHub issues(total, open and closed):\n`query { \n  repository(owner:\"harshilp12\", name:\"Test\") { \n    issues {\n      totalCount\n    }\n    open: issues(states:OPEN) {\n      totalCount\n    }\n    closed: issues(states:CLOSED) {\n      totalCount\n    }\n  }\n}`\n\nNow run the query.\n\nYou receive a response from the preceding query that includes the total number of issues, number of closed issues, and number of open issues. Something like this:\n`{\n  \"data\": {\n    \"repository\": {\n      \"issues\": {\n        \"totalCount\": 7\n      },\n      \"open\": {\n        \"totalCount\": 5\n      },\n      \"closed\": {\n        \"totalCount\": 2\n      }\n    }\n  }\n}`\n:::info\nThe advantage of using GraphQL over REST API is that you can cherry-pick the response. The API provides the information that you explicitly state in the query.\n:::\nIn GraphQL, you insert, update or delete data with mutations. A Mutation is a GraphQL Operation that allows you to insert new data or modify the existing data on the server side. You can think of GraphQL Mutations as the equivalent of POST, PUT, PATCH, and DELETE requests in REST.\n:::info\nQueries, and Mutations to perform CRUD operations on data are collectively termed Queries in Appsmith.\n:::\nInsert Records\u200b/Create Records\nInsert is a widely used command in the Structured Query Language (SQL). The insert command is used to insert one or more rows into a database table with specified table values.\n\n\nClick on the + icon next to the queries/js and choose your GraphQL datasource.\nRename the query to `create_user`.\nNext, add your code in the body section and run your query.\n\nTo create a GitHub issue, you first require the `id` of the target repository. Once you assign the repository ID, you can input the title and description of the issue.\n`mutation CreateIssue {\n  createIssue(input: {repositoryId: \"R_kgDOH-t87Q\", title: \"Sample Title\", body: \"Sample Body\"}) {\n    issue {\n      number\n      body\n      url\n    }\n  }\n}`\nYou can create a new issue using the button and modal widget.\nUpdate Records\u200b\nUpdate queries let you update existing objects of a particular type. With an update query, you can filter nodes and set or remove any field belonging to a type.\n\n\nClick on the + icon next to the queries/js and choose your GraphQL datasource.\nRename the query to `update_users`.\nAdd your code in the body section and run your query.\n\n`mutation updateIssueTest{\n  updateIssue(input:{id:\"<issue.id>\",title:\"<updated_title\", body:\"<updated_body\"}){\n    issue{\n      id\n    }\n  }\n}`\nThe above query updates the GitHub issue\u2019s with the ID, Title and description. You can again customize what fields you want back as a result, here we are calling `id`.\nYou can use the Modal widget or JSON form Widget to update the GitHub issues.\n\u200bDelete A Record\u200b\nThe Delete Record command deletes a particular record from the database. You can pass the below parameters to Delete Records.\n\nClick on the + icon next to the queries/js and choose your GraphQL datasource.\nRename the query.\nAdd your code in the body section and run your query.\n\n`mutation deleteIssueTest{\n  deleteIssue(input:{issueId:\"<your_ID>\"}){\n    repository{\n      id\n    }\n  }\n}`\nThe preceding code deletes the issue using your Issue ID.\nSimilarly, if you want to close an issue, you can use the below-mentioned code:\n`mutation closeIssueTest{\n  closeIssue(input:{issueId:\"<your_id>\"}){\n    issue{\n      id\n    }\n  }\n}`\n:::info\nYou can run queries on real GitHub data using the GraphQL Explorer\n:::\nCommon Settings\nThere are a few settings listed below that are common to many operations that you can perform on GraphQL:\nPagination\nPagination refers to the process of receiving portions of a huge dataset until you receive the entire dataset. This helps optimize your app's performance because trying to get all the data results in a slow load time of your app and a slow rendering of the results in the UI.\nLimit/Offset Based Pagination\nOffset-based pagination is a popular technique where the user requests parameters for limit (number of results) and offset (no of records to skip). Let's define a few terms related to Limit-based Pagination.\n\nLimit Variable: It lets you select the limit variable from the query.\nLimit Value: Set the value of the limit variable ( limit the number of rows returned from a query.)\nOffset Variable: It lets you select the offset variable from the query.\nOffset Value: Set the value of the offset variable selected (allows you to omit a specified number of rows before the beginning of the result set)\n\nUsing both limit and offset skips both rows and limits the rows returned.\nLet's take an example to understand how Limit/Offset Based Pagination works.\n\n\nAdd the following code in the body section:\n\n`query GetAllUsers($limitz:Int, $offsetz:Int){\n  users(limit:$limitz, offset:$offsetz){\n    id\n    dob\n    email\n    gender\n    name\n    phone\n  }\n}`\n\nIn the pagination section, select Paginate via Limit and Offset.\nSet limitz as 2, and _offsetz _ as 0.\nNow run the query.\n\nSo, if you set Limit Value to 2, it returns two rows. For instance, if you set limitz as 4, then the data of 4 users are returned (i.e., number of rows).\nOffset allows you to omit a specified number of rows before beginning the result set. For instance, if you set offsetz to 2, it skips the first two rows, and the results from the third row are displayed.\nCursor-Based Pagination\nCursor-based pagination (also known as keyset pagination) works by returning a pointer to a specific item in the dataset. It's a popular pagination technique that stays clear of many of the difficulties of \"offset-limit\" pagination. Perhaps the biggest advantage of cursor pagination is its ability to handle real-time data effectively. This is because cursors don't require the data to remain static.\n:::info\nCursor-based pagination works efficiently for large datasets.\n:::\nIt uses \"before\" and \"after\" cursors to traverse through the data and returns only a chunk of data which makes the processing faster. Let's define a few terms related to cursor-based Pagination.\nConfigure Previous Page\n\nLimit Variable Name: Select the variable from the query that holds the last or previous limit value.\nLimit Variable Value: Override the value for the previous number of rows to be fetched.\nStart Cursor Variable: Select the variable which holds the before cursor.\nStart Cursor Value: Binding the widget action to the previous page activity.\n\nConfigure Next Page\n\nLimit Variable Name: Select the variable from the query that holds the first or next limit value.\nLimit Variable Value: Update the value for the number of rows fetched next.\nStart Cursor Variable: Select the variable which holds the after cursor.\nStart Cursor Value: Binding the widget action to the next page activity.\n\nLet\u2019s take an example to understand better how Cursor Based Pagination works. In this example, let's display the GitHub repository\u2019s issues in a list widget using GitHub\u2019s GraphQL API.\nIn this case, we declare the pagination variables that stand for before, after, first, and last. Then we can navigate through the data using the previous and next buttons highlighted in the screenshot below.\n\nLet's run the following code before defining values for cursor-based pagination:\n`query nodesPagination{ \n  repository(owner:\"appsmithorg\", name:\"appsmith\"){\n    issues(orderBy:{field:CREATED_AT, direction:DESC},first:6){\n        id\n        number\n        title\n      }\n      pageInfo{\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n}`\n\nAdd the before, after, first, and last variables in the code as highlighted below:\n\n`query nodesPagination($afterValue:String,$beforeValue:String,$firstValue:Int,$lastValue:Int){ \n  repository(owner:\"appsmithorg\", name:\"appsmith\"){\n    issues(orderBy:{field:CREATED_AT, direction:DESC},first:$firstValue, last:$lastValue, after:$afterValue, before:$beforeValue){\n        id\n        number\n        title\n      }\n      pageInfo{\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n}`\n\nIn the pagination section, select \u201cPaginate via Cursor based\u201d, and map the values as follows:\n\n```\nConfigure Previous Page\nLimit Variable Name: lastValue \nLimit Variable Value: {{Table1.pageSize}} //your table or list's page size\nStart Cursor Variable: beforeValue\nStart Cursor Value: {{testapi.data.data.repository.issues.pageInfo.startCursor}}\nConfigure Next Page\nLimit Variable Name: firstValue\nLimit Variable Value: this is by default the same value as the \"previous page\" configuration's value. If you want to override this, please select the checkbox \"enable separate value for first limit variable\"\nEnd Cursor Variable: afterValue\nEnd Cursor Value: {{testapi.data.data.repository.issues.pageInfo.endCursor}}\n```\n\nSet list widget\u2019s Items property to:\n\n`{{yourquery.data.data.repository.issues.nodes}}`\n:::info\nYou can check this document to learn more about server-side pagination.\n:::\nWith this, you can run a query on a page change event. The below video demonstrates how you can perform cursor-based pagination:\n\nQuery Settings\nThe Query Settings Pane provides access to properties for the query. You can specify the following settings in the Settings tab on the Appsmith Query Editor:\nWith Appsmith GraphQL integration, it's possible to create apps that seamlessly connect with the database and provide additional flexibility for updating and analyzing data.\nUsing Queries in Applications\nOnce you have successfully run a Query, you can use it in your application to:\n\nDisplay Data \nCapture Data \n",
    "tag": "appsmith"
  },
  {
    "title": "MS SQL",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/datasources/querying-mssql.md",
    "content": "\nsidebar_position: 11\nMS SQL\n:::info\nThe following document assumes that you understand the basics of connecting to databases on Appsmith. If not, please go over them before reading further.\n:::\nMicrosoft SQL Server is a relational database management system developed by Microsoft that supports a wide variety of transaction processing, business intelligence, and analytics applications in corporate IT environments.\n:::note\nAppsmith's backend server supports TLS1.1 and TLS1.2 for connecting to endpoints.\n:::\nConnection Settings\n\nAppsmith needs the following parameters for connecting to an MsSQL database:\n:::tip\nAll required fields are marked with an asterisk (*).\n:::\nConnection\n\nConnection Mode:\nRead / Write: Choosing this mode gives Appsmith both read and write permissions on the database. It allows you to execute all CRUD queries.\nRead Only: Choosing this mode gives Appsmith read-only permission on the database. It only allows you to fetch data and prevents making any changes.\nHost Address / Port: Fill in the database host's address and port. If you don't specify a port, Appsmith will try to connect to port 5432 by default.\nDatabase Name: Fill in the name of the database that you want to connect to.\n\nAuthentication\n\nUsername: Fill in the username for the database user responsible for approving connection requests.\nPassword: Fill in the password required to log in with the provided username.\n\nSSL\nIn this optional section, you may handle any SSL configuration required to connect to your database.\n\nSSL Mode: Choose your SSL model from the dropdown.\nKey File: Upload your SSL key file from here.\nCertificate: Upload your SSL certificate here.\nCA Certificate: Upload your CA certificate here.\nPEM Certificate: Upload your PEM certificate here.\nPEM Passphrase: Fill in your PEM passphrase here.\n\nQuerying MsSQL\nYou can query MsSQL databases using the standard T-SQL syntax. When you create a new query, Appsmith can provide some template SQL to help understand the basic syntax:\n\nMsSQL queries will return an array of objects; each object represents a row, and each property in that object represents a column.\n`[\n  { id: \u201c1\u201d, color: \u201cblue\u201d },\n  { id: \u201c1\u201d, color: \u201cperiwinkle\u201d },\n  { id: \u201c1\u201d, color: \u201cchartreuse\u201d },\n]`\nLastly, you may wish to enable the \"Request confirmation before running query\" setting to help avoid accidentally destructive actions. You can find this option in the Settings tab of the query.\n\nFor a more detailed walkthrough of using Appsmith to run queries against an MsSQL database, you can also check out this blog post!\nUsing Prepared Statement (Beta)\nNormal query execution simply string concatenates the evaluated values of the javascript bindings to produce the final query. This opens up the possibility of SQL injection by merging untrusted user input with trusted data for execution. Using a prepared statement is one strategy for mitigating this risk.\nAppsmith converts the user query into a parameterized one by replacing the bindings in the query with '?'. The payload is then inserted one by one ensuring that the bindings get properly escaped and sanitized before the query is sent to the database for execution.\nFollow the guide on how to use prepared statements for efficient and secured data transactions.\nUsing Queries in Applications\nOnce you have successfully run a Query, you can use it in your application to\n\nDisplay Data\n",
    "tag": "appsmith"
  },
  {
    "title": "SMTP",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/datasources/using-smtp.md",
    "content": "\nsidebar_position: 17\nSMTP\n:::note\nThe following document assumes that you understand the basics of connecting to a datasource on Appsmith. If not, please go over them before reading further.\n:::\nThe SMTP plugin can connect to an SMTP server and send dynamic emails to a list of recipients.\n\nConnection settings\nThe SMTP datasource requires the following information to establish a connection. All fields are mandatory.\n\n\nHost address: This is the host address of the SMTP server.\nPort: The port for communication with the SMTP server. Typically this is 25 or 587.\nUsername: The username of the SMTP server.\nPassword: The password of the SMTP server. Please note that if you have a multi-factor authentication setup for your SMTP server, your normal password may not work. You may have to generate a separate password from your provider which won't require multi-factor authentication. For example, Gmail requires that you generate an app password to use as authentication instead of your regular password.\n\nSend email\nThis action sends an email with a dynamic subject and body to a list of recipients. You can also optionally attach files along with this email.\n| Property Name      | Description                                                                                           | Type      |\n| ------------------ | ----------------------------------------------------------------------------------------------------- | --------- |\n| From email         | This is the email address to send from.                                                               | Mandatory |\n| Set Reply To email | Toggle to set whether the reply to email ID needs to be set                                           | Optional  |\n| Reply to email     | This is the email address that should receive the replies.                                            | Optional  |\n| To emails          | This is the email address(es) of the recipients. Multiple email IDs must be comma separated.          | Mandatory |\n| CC emails          | List of email adderess(es) of the recipients to CC. Multiple email IDs must be comma separated.       | Optional  |\n| BCC emails         | List of email adderess(es) of the recipients to BCC. Multiple email IDs must be comma separated.      | Optional  |\n| Subject            | The subject of the email                                                                              | Optional  |\n| Body               | The body of the email                                                                                 | Optional  |\n| Attachments        | List of file paths of the attachments to be attached to the email.                                    | Optional  |\nResponse format\nOn successful sending, the response is a JSON object with the following structure:\n`{\n  \"success\": true,\n  \"message\": \"Email sent successfully\"\n}`\nIf Appsmith encounters an error while sending the email, an error is displayed on the screen. An example is shown below: \nUsing queries in applications\nOnce you have successfully run a Query, you can use it in your app to\n\nDisplay Data\nCapture Data\nUpload files\n",
    "tag": "appsmith"
  },
  {
    "title": "HubSpot",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/datasources/hubspot.md",
    "content": "\nsidebar_position: 10\nHubSpot\nHubSpot is a cloud-based CRM designed to help align sales and marketing teams, promote sales, increase ROI, and improve your inbound marketing strategy to produce more qualified leads. In simple words, it's a software platform created to assist your business with marketing and sales.\n:::info\nTo integrate HubSpot with Appsmith, you should understand the basics of connecting to datasource on Appsmith.\n:::\nAppsmith provides an easy way to integrate with HubSpot, and enables you to perform different operations using a custom UI built with minimal configurations.\nCreate HubSpot Datasource\nTo add a HubSpot API, navigate to Explorer >> Click on the + icon (next to Datasources) >> Select HubSpot under APIs.\n\nConnection Settings\nConfigure the HubSpot API as illustrated below:\n\nAuthentication Type\nAppsmith allows you to select from the available authentication types to integrate with an HubSpot database:\nBearer Token\nBearer Tokens are the predominant access token used with OAuth 2.0.\nYou can authenticate to the API by providing your access token in the HTTP authorization bearer token header.\nLet's see how you can fetch your Bearer Token:\n\n\nOpen HubSpot.\nYou can create a new account or select an existing one.\nClick on the settings icon on top-right corner, and select integrations.\nCreate a private app (or open an existing one).\nNavigate to Scopes.\nAllow necessary permissions for CMS, CRM, and Settings.\nNavigate to the auth page of your app settings.\nHere you'll be able to find the app's client ID and access token.\n\nAccess token looks something like this:\n`pat-na1-217ee**-****-****-****-***`\nCreate Queries\nYou can add queries to the newly created HubSpot datasource in one of the below ways:\nDatasource Page\nYou can add queries to HubSpot datasource by selecting the New API + button available on the datasource page.\n\nQuery/JS page\nBy navigating to Explorer >> Click plus sign (+) next to Queries/JS >> Select the HubSpot datasource.\n\nQuery\nYou can create queries to fetch, update and delete data from a datasource using the Appsmith query editor. HubSpot integration supports the following query methods:\n|                Query Name                |              Description              |\n|:----------------------------------------:|:-------------------------------------:|\n| HubDB - Get Published Tables             | Fetches all the published table from the database. |\n| HubDB - Create Table                     | Creates a new table in the HubDB database. |\n| HubDB - Get Details of a Published Table | Retrieve details of an existing table.  |\n| HubDB - Archive Table                    | Archive or delete an existing table.                                 |\n| HubDB - Update Existing Table            | Update a few fields in a table.                                   |\n| HubDB - Clone Table                      |     Clone an existing HubDB table.                                  |\n| HubDB - Export Published Version Table   |  Export table data.                                |\n| HubDB - Unpublish Table                  | Unpublish table or unpublish multiple pages                                |\n| HubDB - Get Table Rows                   |  Get the rows for a specific HubDB table.                                |\n| HubDB - Add New Table Row                |   Add a new row to a HubDB table.                                |\n| HubDB - Get Table Row                    | Get the rows for a specific HubDB table.                                       |\n| HubDB - Update Existing Row              | Update a specific row in a HubDB table.                                    |\n| HubDB - Replace Existing Row             | Replace a specific row in a HubDB table.                                   |\n| HubDB - Permanently Delete Row           |   Delete a specific row in a HubDB table.                                    |\n| HubDB - Clone Row                        |  Duplicate/clone  a specific row.                                   |\n| HubDB - Get Set Rows                     |   Get set of rows from the table.                                    |\n| HubDB - Permanently Delete Rows          |   Delete a set of rows from a HubDB table.                                    |\n| Domains - Get Current Domains            |  Returns all existing domains that have been created.                                     |\n| Domains - Get Single Domain              |  Returns a single domain with the id specified.                                     |\n| URL Redirects - Get Current Redirects    |  Returns all existing URL redirects.                                     |\n| URL Redirects - Create Redirect          |   Creates and configures a new URL redirect.                                    |\n| URL Redirects - Get Details Redirect     |   Returns the details for a single existing URL redirect by ID.                                    |\n| URL Redirects - Update Redirect          |  Updates the settings for an existing URL redirect.                                      |\n| URL Redirects - Delete Redirect          |  Delete one existing redirect.                                      |\n| CRM - List Objects                       |    Fetches all the object from the database. |\n| CRM - Create Object                      |   Creates a new object in the database.                                    |\n| CRM - Read Object                        | Retrieve a particular object. |\n| CRM - Update Object                      |  Update a few fields in a object.                                       |\n| CRM - Archive Object                     |  Archive or delete an existing object.                                     |\n| CRM - Search Object                      | Search any object.                                      |\n| CRM - GDPR Delete                        |  Deletes the record and any associations.                                     |\n| Files - Import File                      | Imports CRM records into your HubSpot account.    |\n| Files - Delete File                      |  Deletes the file at the specified path in the specified environment.                                     |\n| Files - Get File                         |   Gets the file at the specified path in the specified environment.                                    |\n| Files - Create Folder                    | Create a folder in the specified environment.                                     |\n| Files - Search File                      |  Search for any file in the specified environment.                                                     |\n| Files - Search Folder                    |   Search for any folder in the specified environment.                                    |\n| Files - Update Folder Properties         |  Perform a partial update of a property.                                    |\n| Files - Check Folder Update Status       |   Check the status of a batch file access update task.                                    |\n| Files - Get Folder                       |  Get the details for a specific folder.                                     |\n| Files - Delete Folder                    |   Delete a specific folder.                                    |\n| Settings - Retrieve List of Users        |  Get a list of authorized users.                                   |\n| Settings - Add User                      |  Add users to your HubSpot account.                                     |\n| Settings - Retrieve User                 |  Retrieve an existing user.                                  |\n| Settings - Modify User                   |  Update user details.                                  |\n| Settings - Remove User                   |  Remove set of user.                                    |\n| Settings - Retrieve Roles Account        |  View users in your HubSpot account.                                     |\n| Settings - See Details Account's Teams   |  Obtain information about the team's account.                                    |\nYou can check the Query Settings Guide  to learn more about queries.\nUsing Queries in Applications\nOnce you have successfully run a Query, you can use it in your app to:\n\nDisplay Data \nCapture Data \n",
    "tag": "appsmith"
  },
  {
    "title": "PostgreSQL",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/datasources/querying-postgres.md",
    "content": "\nsidebar_position: 13\nPostgreSQL\nThis document covers how to establish a connection between your PostgreSQL database and Appsmith to read and write data on your applications.\nAdd PostgreSQL datasource\nTo add a PostgreSQL datasource, navigate to Explorer >> click the (+) sign next to Datasources >> select PostgreSQL under Databases. This opens up the page where you can configure the parameters to connect to your PostgreSQL database.\nConfigure datasource\nTo connect to a PostgreSQL database, you must configure the following parameters. All required fields are suffixed with an asterisk (*).\n\n\nConnection Mode*: This refers to the permission granted to Appsmith when establishing a connection to the database. The two available modes are:\n\n\nRead Only: This mode gives Appsmith read-only permission on the database. This allows you to only fetch data from the database.\n\n\nRead / Write: This mode gives Appsmith both read and write permissions on the database. This allows you to execute all CRUD queries.\n\n\nHost Address*: Provide the hostname or IP address. If you are on a self-hosted instance and connecting to a database on `localhost`, use `host.docker.internal` on Windows and macOS hosts and `172.17.0.1` on Linux hosts to access services running on the host machine from within the container.\n\n\nPort*: If you don\u2019t specify a port, Appsmith may try to connect to port `5432`.\n\n\nDatabase Name: Provide the database name.\n\n\nAuthentication: Username and password for authenticating connection requests to your database.\n\n\nSSL: The connection uses the Default SSL mode. You can set it to one of the following modes:\n\n\nDefault: The Default SSL Mode is the same as Prefer, meaning SSL is used if the server supports it.\n\nAllow: The Allow SSL Mode uses SSL only if the server insists on it.\nPrefer: The Prefer SSL Mode uses SSL if the server supports it but connects without SSL if it's not available.\nRequire: The Require SSL Mode rejects the connection if SSL isn't available.\nDisable: Disabling SSL disallows all administrative requests over HTTPS. It uses a plain unencrypted connection.\n\nFor more information, see SSL Support.\n\n\nConfigure PostgreSQL Datasource\n\n:::tip\nIf you want to connect to a local database, you can use a service like ngrok to expose it. For more information, see How to connect to local database on Appsmith.\n:::\nWrite simple CRUD queries\nYou can write queries to fetch or write data to the PostgreSQL database by selecting the + New Query  button available on datasource page under Explorer >> Datasources or by navigating to Explorer >> click (+) next to Queries/JS >> select your PostgreSQL database. You can then add your SQL code in the query editor.\nPostgreSQL databases can be queried using the standard SQL syntax. All PostgreSQL queries return an array of objects where each object is a row returned by the query, and each property in the object is a column.\nFetch data\nIf you want to retrieve the data from a table `users`, you can write the following SELECT query `Query1`:\n`sql\nSELECT * FROM users;`\nAfter fetching your data, you can display it in a Table widget by binding it to the Table Data property as shown below. \n`js\n{{Query1.data}}`\nInsert data\nThe insert clause is used to insert one or more rows into a database table. Suppose you have a table `users` and want to insert data entered in the widgets, write an insert query as shown below.\n```sql\nINSERT INTO users\n  (name, gender, email)\nVALUES\n  (\n    {{ nameInput.text }},\n    {{ genderDropdown.selectedOptionValue }},\n    {{ emailInput.text }}\n  );\n```\nYou can then call this query on the onClick event of the Submit button to insert the data into your database table.\nUpdate data\nSuppose you want to update the data with the information entered in the widgets for a selected row in a Table widget, write an update query as shown below:\n`sql\nUPDATE users\n  SET email = '{{emailInput.text}}'\n  WHERE id = {{ Table1.selectedRow.id}};`\nRun this query on the onClick event of the Update button to modify the selected row's fields with the new value entered in the widget.\nDelete data\nTo delete the selected row in a Table widget write the following query and call it on the onClick event of the Delete button.\n`sql\nDELETE FROM users WHERE id = {{Table1.selectedRow.id}};`\nUsing prepared statements\nNormal query execution concatenates the evaluated values of the JavaScript bindings to produce the final query. This opens up the possibility of SQL injections by merging untrusted user input with trusted data during execution. Using a prepared statement is one strategy for mitigating this risk.\nAppsmith converts the user query into a parameterized one by replacing the bindings in the query with '?'. The payload is then inserted one by one, ensuring that the bindings get escaped and sanitized before the query is sent to the database for execution.\nSee how to use prepared statements for secure data transactions.\nTroubleshooting\nIf you are experiencing difficulties with connecting datasources in Appsmith, you can refer to the Datasource troubleshooting guide for assistance. If you need further support, you can reach out on Discord or ask questions on the community forum.\nFurther reading\n\nWrite queries\nData access and binding\n",
    "tag": "appsmith"
  },
  {
    "title": "Airtable",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/datasources/airtable.md",
    "content": "\nsidebar_position: 1\nAirtable\nAirtable is an easy-to-use online platform for creating and sharing relational databases. The user interface is simple, colorful, friendly, and allows anyone to spin up a database in minutes.\n:::info\nTo integrate Airtable with Appsmith, you should understand the basics of connecting to databases on Appsmith.\n:::\nOn Appsmith, it's pretty straightforward to establish a connection with any datasource, including Airtable. With this integration, you can perform different operations using a custom UI built on Appsmith, with minimal configurations.\nCreate Airtable Datasource\nTo add an Airtable datasource, navigate to Explorer >> Click plus sign (+) next to Datasources >> Select Airtable under APIs.\n\nConnection Settings\nConfigure the Airtable datasource as illustrated below:\nAuthentication Type\nAppsmith allows you to select from the available authentication types to integrate with an Airtable database:\n\n\nAPI Key: Airtable API key allows you to use public API to create, fetch, update, and delete records on the bases you have access to in Airtable.\nBearer Token: Bearer Tokens are the predominant access token used with OAuth 2.0.\n\n:::info\nThe API is limited to 5 requests per second per base. If you exceed this rate, you will receive a 429 status code and will need to wait 30 seconds before subsequent requests will succeed.\n:::\nAPI Key\nLet's see how you can fetch your API key.\n\n\nOpen your Airtable console.\nNavigate to your account page in the top-right corner.\nOn your account overview page, under the API heading, there's a button that says `Generate API key.`\nNow copy the generated API key and paste it into the API Key section.\n\nAPI Key will look something like this:\n`keyNT5AcMPxxxx`\nBearer Token\nThis is a single string that is the authentication of the API request, sent in an HTTP \u201cAuthorization\u201d header. You can authenticate to the API by providing your API key in the HTTP authorization bearer token header.\n\nIn the Airtbale Datasource Section.\nSelect Bearer Token as the authentication type.\nNow, paste your API key and click Save.\n\nCreate Queries\nYou can add queries to Airtable datasource by selecting the New API + button available on the datasource page or by navigating to Explorer >> Click plus sign (+) next to Queries/JS >> Select the datasource name (AirtableDatasource).\nQuery\nYou can create queries to fetch, update and delete data from a datasource using the Appsmith query editor. Airtable supports the following query methods:\n| Query Name                                                     | Description                                         |   |\n| -------------------------------------------------------------- | --------------------------------------------------- | - |\n| List Records           | Fetches all the records from the airtable database. |   |\n| Create Records       | Creates a new record in the airtable database.      |   |\n| Delete A Record      | Delete a specific record ID.                        |   |\n| Retrieve A Record | Retrieve an existing record.                        |   |\n| Update Records       | Update a few fields in a record.                    |   |\nYou can check the Query Settings Guide to learn more about queries.\nList Records\nList command lets you display all the data from the airtable database. With Appsmith, you can present data that has been filtered and sorted based on fields, records, time zones, etc. You can pass the below parameters to List Records.\n:::info\nAll required fields are suffixed with an asterisk (*).\n:::\n\nBase ID - An Airtable base contains all the information you need for a particular project or collection. You can get the base ID from the base\u2019s API page. Learn More. \nTable Name - Name of your Airtable table.\nFields: Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred.\nFilter by Formula: You can use a formula to filter records. The formula will be evaluated for each record.\nMax Records: The most records possible will be returned in response to your queries. You might need to load more pages to reach this total if this number is greater than pageSize, which by default is 100. Learn More. \nPage Size: The number of records each request's response included. The number must be less than or equal to 100.\nSort: Names of the columns used to sort the results. It specifies how the records will be ordered. Learn More. \nView: You can add the name or ID of a view created on the airtable table.\nCell Format: You can supply the format you want to use for the cell values.\nTime Zone: The time zone is used to format dates when using string as the cellFormat.\nUser Locale: The user locale is used to format dates when using string as the cellFormat.\nOffset: The response will contain an offset if there are more records. Pagination will stop when you\u2019ve reached the end of your table.\n\n\n\nClick on the + icon next to the queries/js and choose your airtable datasource.\nRename the query.\nFrom the Commands drop-down, Select the method `List Records`.\nNext, add your Base ID and Table Name.\n\nOnce the parameters have been specified, click Run. The response section will now display all of the airtable data.\nTo better understand how the list record command works, let's look at an example.\nLet\u2019s assume we have a task manager database, which displays - Task Name, Deadline, and Task Manager\u2019s Name, as shown below:\n`| Name                    | Deadline     | Manager |\n|-------------------------|--------------|---------|\n| Review OSW              | 25 June 2022 | Harshil |\n| Finalize budget         | 4 July 2022  | Pranay  |\n| Firestore Docs Update   | 30 June 2022 | Harshil |\n| Heroku Deployment Issue | 26 June 2022 | Nikhila |`\n\n\nAfter creating the list_records query, Click on the plus (+) icon next to the queries/js and create a New JS Object.\nRename the JS Object to GetAirtableRecordsData.\nNow, paste the below code:\n\n`export default {\n    readAirtableData: () => {\n        return list_tasks.data.records.map((airtableRecord) => {\n            return {\n                \"id\" : airtableRecord.id,\n                \"createdTimeDate\" : airtableRecord.createdTime,\n                \"Manager\" : airtableRecord.fields.Manager,\n                \"TaskName\" : airtableRecord.fields.Name,\n                \"Deadline\" : airtableRecord.fields.Deadline\n            }\n        })\n    }\n}`\n\nNext, add a table widget to your canvas, and name it `Tasks_list`.\nIn the Table data property, paste:\n\n`{{GetAirtableRecordsData.readAirtableData()}}`\nThe table widget will display all of your Airtable data.\nCreate Records\nThis method will let you create a new record for the Airtable database. You can pass the below parameters to Create Records.\n\nBase ID - An Airtable base contains all the information you need for a particular project or collection. You can get the base ID from the base\u2019s API page. Learn More.\nTable Name - Name of your Airtable table.\nRecords - A record is the base equivalent of a row in a spreadsheet.\n\n\n\nClick on the + icon next to the queries/js and choose your airtable datasource.\nRename the query.\nFrom the Commands drop-down, Select the method Create Records.\nNext, add your Base ID and Table Name.\nNow, in the records section add your data. Example format:\n\n```\n[ {    \n\"fields\": {      \n\"Name\": \"Customer research\",     \n \"Status\": \"Done\",     \n \"Flagged\": true   \n }  \n}]\n```\nLet\u2019s take an example to get a better understanding of how the create records command works.\n\n\nDrag and drop a button widget into the canvas, and change the title to \u201cCreate New Task\u201d.\nNow, set buttons onClick event to Open a New Modal, and choose to Create New.\nThis will open up a new modal now; let's drag and drop a JS Form widget into the modal.\nNext, in the source data section, connect your createTask query.\n\n`{\n  \"id\": \"recWwqHTxvjsF505l\",\n  \"createdTime\": \"2022-07-02T12:43:52.000Z\",\n  \"fields\": {\n    \"Deadline\": \"2022-06-30\",\n    \"Name\": \"Task Name\",\n    \"Manager\": \"Name\"\n  }\n}`\n\nIf you want you can hide some fields from the Field Configuration. For example, id or created time.\nNow, in the onSubmit option, Choose createTask query from the \"`execute a query`\" option.\nNow go to createTask query, and edit the records section:\n\n`[{      \"fields\": \n    {       \n    \"Name\": {{JSONForm1.formData.fields.Name}},       \n    \"Deadline\": {{JSONForm1.formData.fields.Deadline}},       \n    \"Manager\": {{JSONForm1.formData.fields.Manager}}   \n}   \n}]`\nDelete a Record\nThe Delete Record command deletes a particular record from the airtable database. You can pass the below parameters to Delete Records.\n\nBase ID - An Airtable base contains all the information you need for a particular project or collection. You can get the base ID from the base\u2019s API page. Learn More.\nTable Name - Name of your Airtable table.\nRecord ID - Within Airtable, each record has a unique identifier known as a Record ID.\n\n\n\nClick on the + icon next to the queries/js and choose your airtable datasource.\nRename the query.\nFrom the Commands drop-down, Select the method Delete A Record.\nNext, add your Base ID and Table Name.\nNow, add your record ID to delete a specific record. The Record ID will look like this:\n\n`rec7HiLAy2TkPxxxx`\n\nNow run the query.\n\nLet\u2019s take an example to understand how the delete records command works.\nIn this example, we will use the Modal widget to delete the selected records.\n\n\nLet's edit the table widget we created in the List Record Example.\nAdd a column to the table property and name it \"delete.\"\nNow, in the column control property, change the column type to the icon button and select the delete icon.\nOpen the table property pane, set the Delete button\u2019s onClick property to Open a New Modal, and choose to Create New.\nThis will open up a new modal now; let's drag and drop a few widgets to create a dialog.\nDrag and drop a text widget to modal and set its property name to:\n\n`{{Table1.selectedRow.id}}`\n\nNow, Bind deleteTasks query to the onClick event of the Confirm button.\nFinally, change the record ID in the deleteTasks query to:\n\n`{{Table1.selectedRow.id}}`\nRetrieve A Record\nRetrieve record lets you fetch data for a particular record ID. You can pass the below parameters to Retrieve A Records.\n\nBase ID - An Airtable base contains all the information you need for a particular project or collection. You can get the base ID from the base\u2019s API page. Learn More.\nTable Name - Name of your Airtable table.\nRecord ID - Within Airtable, each record has a unique identifier known as a Record ID.\n\n\n\nClick on the + icon next to the queries/js and choose your airtable datasource.\nRename the query.\nSet the commands to Retrieve A Record.\nNow, paste your baseID and table Name.\nNext, add your Record ID to Retrieve a specific record.  The Record ID will look like this:\n\n`rec7HiLAy2TkPWxxx`\n\nNow run the query.\n\nUpdate Records\nUse the Update Records method to update only specific fields in a database and keep the rest of the fields unchanged. You need to pass the below parameters to Update Records.\n\nBase ID - An Airtable base contains all the information you need for a particular project or collection. You can get the base ID from the base\u2019s API page. Learn More.\nTable Name - Name of your Airtable table.\nRecords - A record is the base equivalent of a row in a spreadsheet.\n\n\n\nClick on the + icon next to the queries/js and choose your airtable datasource.\nRename the query.\nSet the commands to Update Records.\nNow, paste your baseID and table Name.\nNext, in the records section add your data. Example Format:\n\n`[{\n  \"id\": \"ID for the record\",\n  \"fields\": {\n    \"Text\": \"Text\"\n    }\n}]`\nLet\u2019s take an example to update our records.\n\n\nEdit the table widget `Tasks_list` created in the List Record Example.\nAdd a column to the table property and name it \"Update.\"\nNow, in the column control property, change the column type to a button and rename the label to \u201cedit\u201d.\n\n:::info\nTo make it more UI friendly, you can even use the icon button instead of the button.\n:::\n\nBind the open event of a modal window to the onClick event of an update button. Either choose an existing modal or create a new one by choosing Create New.\nNow, let's drag and drop a few widgets to create a form that you can use to add a new task to the database.\nDrag and drop the input widgets and set its property name to:\n\n```\nFor Task Name - {{Table1.selectedRow.Name}}\nFor Manager Name - {{Table1.selectedRow.Manager}}\nFor Deadline  - {{Table1.selectedRow.Deadline}}\n```\n\nNow, set the confirm button\u2019s onClick event to \u201cexecute a query\u201d and select update_task query.\nFinally, change the records section in the update_task query to:\n\n`[{\n  \"id\": \"{{Table1.selectedRow.id}}\",\n  \"fields\": { \n    \"Name\": \"{{Input1.text}}\",\n    \"Manager\": \"{{Input2.text}}\",\n    \"Deadline\": \"{{Input3.text}}\"\n  }\n}]`\nCommon Settings\nThere are a few settings listed below that are common to many operations that you will perform on the Airtable:\nBaseID\nTo find a Base ID in the Airtable API, click on the help button near the top-right of your screen. This will open a menu where you will see the API documentation option.\nClick on the button to open the API documentation. The API documentation for the base you are working with will have the base name and base id details, as shown in the screenshot below.\n\nTable Name\nOpen your database to get the table name; it is in the top-left corner. For example, the table name for the image below is \"Tasks.\"\n\nRecords\nA record is the base equivalent of a row in a spreadsheet. Each record is an item in a list. For example, in a table of books, each record is a different book. Unlike a spreadsheet, a record in a mobile Airtable base appears as a tappable card.\nRecord ID\nWithin Airtable, each record has a unique identifier known as a Record ID. If you are familiar with Entity-Relationship Diagrams or ERDs, then the record id would be the primary key. For most, record IDs remain behind the scenes.\nAfter expanding a record, take notice of your web address bar. The URL will be as below:\n`airtable.com/appxxxxxxxxx/tblxxxxxxxxx/viwxxxxxxxx/recxxxxxxxx`\nThe `recxxxxxxx` portion of the URL string is the unique record id.\n```\nExample URL - https://airtable.com/appUgxxxxx/tblxZhrixxxxx/viwGM7xxxxx/recw3xxxxx?blocks=hide\nappUgxxxxx- Base ID\ntblxZhrixxxxx - Table ID\nviwGM7xxxxx - View ID\nRecw3xxxxx - Record ID\n```\n:::info\nUse the List Records command to get the record ID for each record.\n:::\nWith Appsmith Airtable integration, it is possible to create apps that seamlessly connect with the Airtable database and provide additional flexibility for updating and analyzing data.\nUsing Queries in applications\nOnce you have successfully run a Query, you can use it in your application to:\n\nDisplay Data \nCapture Data \n",
    "tag": "appsmith"
  },
  {
    "title": "MongoDB",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/datasources/querying-mongodb",
    "content": "\nsidebar_position: 9\nMongoDB\nMongoDB is a document-oriented NoSQL database used for high-volume data storage. It doesn't store the data in the form of tables and rows as in traditional relational databases. Instead, it stores the data in collections and documents in JSON format (using key-value pairs).\n:::note\nThe following document assumes that you understand the basics of connecting to databases on Appsmith. If not, please go over them before reading further.\n:::\n\nConnection Settings\nAppsmith needs the following parameters for connecting to a Mongo database:\n:::tip\nAll required fields are suffixed with an asterisk (*).\n:::\nConnection\nTo set up a connection, fill in the following parameters:\n\nConnection Mode: You must choose one of the following two modes:\nRead Only: Choosing this mode gives Appsmith read-only permission on the database. This only allows you to fetch data from the database.\nRead / Write: Choosing this mode gives Appsmith both read and write permissions on the database. This allows you to execute all CRUD queries.\nConnection Type: You must choose one of the following connection types:\nDirect Connection: Choose this connection type to connect directly to a mongo instance\nReplicate Set: Choose this connection type to connect to a set of mongo instances.\nHost Address / Port: Fill in the database host\u2019s address and port. If you don\u2019t specify a port, Appsmith will try to connect to port `27017`. You can specify multiple host addresses for a replicate set. If you have an SRV URI, please follow these steps to connect to your MongoDB instance.\nDefault Database Name: Fill in the name of the database you want to connect to. This is your database\u2019s name on your mongo server.\n\nAuthentication\nFor authentication, fill in the following parameters:\n\nDatabase Name: Fill in the name of the database against which you want to authenticate. This is typically admin for most MongoDB instances.\nAuthentication Type: Choose the authentication mechanism to connect to your database. This can be one of `SCRAM-SHA-1`, `SCRAM-SHA-256`, or `MONGO-CR`.\nUsername: Fill in the username required for authenticating connection requests to your database. Set this to empty if you won't want to specify a username to authenticate with.\nPassword: Fill password required for authenticating connection requests for the given username to the database. Set this to empty if you want to log in without a password (please ensure your database accepts such connections).\n\nSSL\nThe SSL Mode can be set to one of the following values:\n\n`Default`: Depends on Connection Type. If using the `Replica set`, this is `Enabled`. If using a `Direct connection`, this is `Disabled`.\n`Enabled`: Reject connection (if SSL is not available).\n`Disabled`: Connect without SSL, use a plain unencrypted connection.\n\nConnect using SRV URI\nA service record (SRV) defines the location of a service hosting, like a hostname, port number, and more. You can create a MongoDB datasource on Appsmith using. SRV URI Formats - Standard URI Format or a DNS Seed List Format.\nStandard Connection String Format\nA Standard Connection String Format(Standard Format) connects to a standalone replica set or a shared cluster of MongoDB. The standard format is represented as below:\n`mongodb\nmongodb://[@username:@password@]@host[:@port]/[@defaultauthdb]/[?authSource=@authDB]]`\nPrefix with mongodb:// to add a Standard Connection String URI\nMap the URI fields as below:\n\n`mongodb://` - a prefix to identify that it's a standard connection format.\n`@username` - the username of the MongoDB you wish to connect to.\n`@password` - the password of the MongoDB you want to connect to.\n\n:::tip\nIf the username or password includes (`: /? # [ ] @),` convert these characters using percent encoding.\n:::\n\n`@host` - the host address of the MongoDB you wish to connect to.\n`@port` - the port on which MongoDB is running.\n\n:::info\nYou can add multiple host and port details separated by a comma in the connection string to connect using the same user.\n:::\n\n`@defaultauthdb` - the database you wish to connect to and would also authenticate the user credentials.\n\n:::info\nThe `defaultauthdb` is a required field in Appsmith as the queries would run against it.\n:::\n\n`@authDB` - the database that stores the authorization information and authenticates the credentials. If you wish to use any other database instead of defaultauthdb, you can add the auth database name using the authSource keyword.\n\n:::note\nIf `authSource` is unspecified, Appsmith attempts to authenticate using the admin database.\n:::\nExample URIs\nSome example URIs could be as follows:\n\nThe default database is `users,` and `authSource` is set as `authusers` which is used to authenticate the user(`dbuser`).\n\n`mongodb\nmongodb://dbuser:s@cur!ty/mongodb0.standalone.com:27017/users/?authSource=authusers`\n\n`authSource` is set as `admin`, and `replicaSet` keyword point to set the name of the replica set (`mongoRepl`).\n\n```mongodb\nmongodb://dbuser:s@cur!ty@mongodb0.replicaset.com:27017,mongodb2.replicaset.com:27017/?authSource=admin&replicaSet=mongoRepl\n```\n\n`authSource` keyword points to `admin`. You can add multiple host and port combinations that points to the shared cluster.\n\n`mongodb\nmongodb://dbuser:s@cur!ty@mongos0.sharedcluster.com:27017,mongos1.sharedcluster.com:27017,mongos2.sharedcluster.com:27017/?authSource=admin`\nDomain name service seed list format\nMongoDB also supports a Domain Name Service (DNS) Seed list for connecting with the standard format. To use the DNS seed list format, you\u2019ll have to prefix the connection string with `mongodb+srv://`. The `+srv` indicates that the hostname corresponds to the DNS SRV. The DNS seed list format is represented as below:\n`mongodb\nmongodb+srv://[@username:@password@]@host[:@port]/[@defaultauthdb]/[?authSource=@authDB]]`\nPrefix with mongodb+srv:// to add a DNS seed list URI\nLike standard format, you can map the fields as below:\n\n`mongodb+srv://` - a prefix to identify that it\u2019s a DNS Seed List format.\n\n:::note\nUsing the `+srv` automatically sets the TLS or SSL option to true. If you wish to turn off the TLS or SSL option, set `tls/ssl=false` in the query string.\n:::\n\nLike Standard format, you can add `username`, `password`, `host`, `port`, `default database,` and `authSource`.\n\n:::tip\nIf the username or password includes (`: /? # [ ] @),` convert these characters using percent encoding.\n:::\nExample URIs\nAn example URI could be as follows:\n`mongodb\nmongodb+srv://dbuser:s@cur!ty/server.dnsseedlist.com/defaultauthdbSource?authSource=authusersb`\n:::info\nRead more about the standard format and DNS seed list format available on MongoDB documentation.\n:::\nQuerying Mongo (Form Input)\n`Form input` provides an easy interface to query the Mongo database.\nAs part of Form Input, Appsmith supports queries like `Find one or more documents`, `Insert a document`, `Update one`, `Count,` and more.\n:::info\nAll mongo queries return an array of objects where each object is a mongo document, and the object's properties are the document's keys.\n:::\n\n1. Find Document(s)\nThis command selects documents in a collection or view. The following fields are supported in Appsmith for this command :\n`Collection Name`: The name of the collection or view to query. The input is expected in a string format like the following :\n`restaurants`\n`Query`: The query predicate. If unspecified, then all documents in the collection will match the predicate. The input is expected in JSON/BSON format like the following :\n`{\n     rating: { $gte: 9 }, \n     cuisine: \"italian\" \n}`\n`Sort` : (Optional) The sort specification for ordering the results. The input is expected in JSON/BSON format like the following :\n`{ name: 1 }`\n`Projection` : (Optional) The projection specification determines which fields to include in the returned documents. The input is expected in JSON/BSON format like the following :\n`{ name: 1, rating: 1, address: 1 }`\n`Limit` : (Optional) The maximum number of documents to return. If unspecified, then defaults to 10 documents. The input is expected in number format :\n`10`\n`Skip` : (Optional) Number of documents to skip. Defaults to 0. The input is expected in number format :\n`0`\n2. Insert Document(s)\nThis command inserts one or more documents and returns a document containing the status of all inserts. The following fields are supported in Appsmith for this command :\n`Collection Name`: The name of the target collection. The input is expected in a string format like the following :\n`users`\n`Documents`: An array of one or more documents to insert into the named collection. The input is expected in a JSON/BSON Array format like the following :\n`[ { _id: 1, user: \"abc123\", status: \"A\" } ]`\n3. Update Document(s)\nThis command modifies multiple documents in a collection. The following fields are supported in Appsmith for this command :\n`Collection Name`: The collection against which to run the command. The input is expected in a string format like the following :\n`people`\n`Query`: The query that matches documents to update. The input is expected in JSON/BSON format like the following :\n`{ name: \"Andy\" }`\n`Update`: The modifications are to apply. The input is expected in JSON/BSON format like the following :\n`{ $inc: { score: 1 } }`\n`Limit`: the dropdown can be used to specify whether the command should apply to a single document or to all documents that match the query.\nMongoDB's multi update feature doesn't support replacement style updates. This means that you can't replace the entire document, but rather, you can only update a single field.\nTo successfully run a multi update command in MongoDB, you can use the following syntax:\n`js\n   { $set: { <field1>: <value1>, <field2>: <value2>, ... } }`\nYou can add the `$set` command in the `update` input field.\nThis updates all documents that match the `query` criteria and set the specified fields to the specified values.\nIt's important to note that the `$set` operator is required in the update document when using the multi option. If the `$set` operator is not used in an update command, no documents in the collection will be modified. For more information, see the update many commands in MongoDB available on the official documentation.\n4. Delete Document(s)\nThis command removes documents from a collection. The following fields are supported in Appsmith for this command :\n`Collection Name`: The target collection against which to run the command. The input is expected in a string format like the following :\n`orders`\n`Query`: The query that matches document(s) to delete. The input is expected in JSON/BSON format like the following :\n`{ status: \"D\" }`\n`Limit`: The dropdown is used to configure if this delete command should act upon a single document or if this command should delete all the matching documents according to the query.\n5. Count\nThis command counts the number of documents in a collection or a view. Returns a document that contains this count. The following fields are supported in Appsmith for this command :\n`Collection Name`: The name of the collection or view to count. The input is expected in a string format like the following :\n`orders`\n`Query`: A query that selects which documents to count in the collection or view. The input is expected in JSON/BSON format like the following :\n`{ ord_dt: { $gt: new Date('01/01/2021') }`\n6. Distinct\nThis command finds the distinct values for a specified field across a single collection. The following fields are supported in Appsmith for this command :\n`Collection Name`: The name of the collection to query for distinct values. The input is expected in a string format like the following :\n`inventory`\n`Query`: A query specifies documents from which to retrieve the distinct values. The input is expected in JSON/BSON format like the following :\n`{ dept: \"A\"} }`\n`Key/Field`: The field for which to return distinct values. The input is expected in a string format like the following :\n`item.sku`\n7. Aggregate\nThis command performs aggregation operations using the aggregation pipeline. The pipeline allows users to process data from a collection or other source with a sequence of stage-based manipulations. The following fields are supported in Appsmith for this command :\n`Collection Name`: The name of the collection or view that acts as the input for the aggregation pipeline. The input is expected in a string format like the following :\n`articles`\n`Array of Pipelines`: An array of aggregation pipeline stages that process and transform the document stream as part of the aggregation pipeline. The input is expected in JSON/BSON array format like the following :\n`[\n      { $project: { tags: 1 } },\n      { $unwind: \"$tags\" },\n      { $group: { _id: \"$tags\", count: { $sum : 1 } } }\n]`\nThe above example performs an aggregate operation on the articles collection to calculate the count of each distinct element in the tags array that appears in the collection.\nQuerying Mongo (Advanced)\nYou can use a `Raw` command to write your custom Mongo queries.\n:::info\nThe mongo database command syntax is slightly different from the mongo collection methods you may be familiar with. Read more.\n:::\nTo add a Raw query, set your query parameters as below:\n\nCommands - Select Command as Raw.\nQuery palette - Add the Raw query to it. \nClick Run to test your query.\n\n\n:::info\nAll mongo queries return an array of objects where each object is a mongo document, and the object's properties are the document's keys.\n:::\nThe pipeline is an array that contains the aggregation stages that process the documents. In your Raw query, you'll have to include the filter criteria in a pipeline keyword when using aggregation. For example, you wish to fetch data from movies where the revenue is 42600000. You'll use `$match` that checks for documents where the `revenue` is  `42600000`. You added the below query:\n```\n{\n   \"aggregate\":\"movies\",\n   \"$lookup\":[\n      {\n         \"$match\":{\n            \"revenue\":42600000\n         }\n      }\n   ],\n   \"cursor\":{\n      \"batchSize\":10\n   }\n}\n```\n:::info\nBy default, Mongo returns only 101 records due to its default batchSize. You can update the limit and batchSize by adding values to your query.\n:::\n\nClick the `Run` button to execute the query.\n\nThe queries will fail to execute and throw an exception `Pipeline option must be specified as an array.` \n\n\nFor Raw queries, you'll have to add the filter criteria to the `pipeline` keyword as below:\n\n`{\n   \"aggregate\":\"movies\",\n   \"pipeline\":[\n      {\n         \"$match\":{\n            \"revenue\":42600000\n         }\n      }\n   ],\n   \"cursor\":{\n      \"batchSize\":10\n   }\n}`\n\nClick the `Run` button to execute the query.\n\n\nTemplate Queries\nAppsmith provides template queries to help with the syntax.\n\nInsert Query\nFind Query\nUpdate Query\nDelete Query\n\n\nUsing Queries in applications\nOnce you have successfully run a Query, you can use it in your application to\n\nDisplay Data\n",
    "tag": "appsmith"
  },
  {
    "title": "Mongo Query Syntax",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/datasources/querying-mongodb/mongo-syntax.md",
    "content": "\ndescription: Appsmith uses the database command syntax to query MongoDB\nMongo Query Syntax\nFind Query\nSyntax\n`{\n      \"find\": <string>,\n      \"filter\": <document>,\n      \"sort\": <document>,\n      \"projection\": <document>,\n      \"skip\": <int>,\n      \"limit\": <int>\n  }`\nComplete list of fields\nExample\n`{\n     \"find\": \"restaurants\",\n     \"filter\": { \"rating\": { \"$gte\": 9 }, \"cuisine\": \"italian\" },\n     \"projection\": { \"name\": 1, \"rating\": 1, \"address\": 1 },\n     \"sort\": { \"name\": 1 },\n     \"limit\": 5\n }`\nUpdate Query\nSyntax\n`{\n      \"update\": <collection>,\n      \"updates\": [\n         {\n           \"q\": <query>,\n           \"u\": <document or pipeline>\n         }\n      ]\n}`\nComplete list of fields\nExample\n`{\n      \"update\": \"members\",\n      \"updates\": [\n         { \n         \"q\": { }, \n         \"u\": { \"$set\": { \"status\": \"A\" }, \"$inc\": { \"points\": 1 } }, \n         \"multi\": true \n         }\n      ]\n   }`\nInsert Query\nSyntax\n`{\n   \"insert\": <collection>,\n   \"documents\": [ <document>, <document>, ... ],\n   \"ordered\": <boolean>\n}`\nComplete list of fields\nExample\n`{\n      \"insert\": \"users\",\n      \"documents\": [ \n            { \"_id\": 1, \"user\": \"abc123\", status: \"A\" } \n      ]\n   }`\nDelete Query\nSyntax\n`{\n   \"delete\": <collection>,\n   \"deletes\": [\n      {\n        \"q\" : <query>,\n        \"limit\" : <integer>\n      }\n   ]\n}`\nComplete list of fields\nExample\n`{\n      \"delete\": \"orders\",\n      \"deletes\": [ { \n            \"q\": { status: \"D\" }, \n            \"limit\": 1 \n      } ]\n   }`\nQuerying a Database",
    "tag": "appsmith"
  },
  {
    "title": "Whitelist MongoDB Cloud",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/datasources/querying-mongodb/whitelist-mongodb-cloud.md",
    "content": "\ndescription: >-\n  Following is a guide to whitelist the IP of the appsmith instance in your\n  MongoDB Cloud database to access it from within your applications\n\nWhitelist MongoDB Cloud\nFollow the below steps to whitelist the IP of Appsmith in the MongoDB cloud:\n1.Sign in to the MongoDB Cloud dashboard.\n\nNavigate to the Network Access screen **:**\n\n\n\nChoose the IP Access List tab\n\n\n\nClick the Add IP Address button\n\n\n\nEnter the appropriate IP address under the `Access List Entry` property:\n\n\n\nClick the Confirm button\n\n",
    "tag": "appsmith"
  },
  {
    "title": "Console Object",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/appsmith-framework/console-object.md",
    "content": "\nsidebar_position: 2\nConsole Object\nThe console object provides an easy way to send logging messages from the browser to the development console or to display messages in the browser when an error occurs. By default, console output would appear in the browser's console tab, which you can view by invoking your browser's developer tools.\nThe console is integral to any developer's toolkit - it allows you to monitor what your program is doing by logging messages, errors, and warnings as they occur. These informative logs make it much easier to debug your code and locate the source of errors and unexpected behavior.\nAppsmith provides the global console object for logging information about your API, Queries, and Widgets properties in your JavaScript code. Invoke a console object using the mustache sign `{{}}` in widget properties or directly in your code.\n:::note\nThe console logs will not be saved and are only available for the current session.\n:::\nMethods\nA console method is a function executed on a console object that logs different types of messages. The following methods are available to you for logging messages:\n\nlog\nerror\nwarn\n\n:::info\nThe console object only supports log, error, and warn methods. You can also use the info and debug methods. However, these methods offer the same feature as the log method.\n:::\nFor example, you are building an app and integrating external API to get input. Your app code behaves differently depending on the type of response generated from the API.\nHere's a code snippet of JS Object where you're calling an external API(`getTaskList`), and depending on the generated response, you return the desired output. You either send an email to notify the user or alert the administrator that no action is needed.\n`javascript\nexport default {\n    notifyUserIfTaskIsIncomplete: async () => {\n        let isTaskIncomplete = false;\n        const taskList = getTaskList.data.record;\n        for (const task of taskList) {\n            if(task.ownerId == Table1.selectedRow.ownerId && task.endDate < Date() && task.status != \"Completed\") {\n                isTaskIncomplete = true;\n                break;\n            }\n        }\n        if (isTaskIncomplete){\n            sendEmailToNotifyUser.sendEmail();\n            return;\n        } \n        showAlert(\"No action is needed\");\n}`\nThe API generates the correct response when executed standalone, and your app code works as expected. However, the code fails during integration because the API response either is not generated or isn't as expected.\nTo troubleshoot the error, you would want to log some messages: at the start of the API call, the parameters you are building and passing to the API, the response you get from the API, and the result. Here, the console object comes in handy. You can use different methods such as log to log the start of the method, parameters, and result, error to log the error messages returned by the API, and warn to log the warnings returned by API.\nLog\nThe `console.log()` method outputs a message to the logs tab. The message could be a single string value, multiple string values, or JavaScript object(s).\n:::note\nConsole methods don\u2019t support string substitutions.\n:::\nFor outputting the entry-level messages, parameter values, and end result, you can add the console.log messages as below:\n`javascript\nexport default {\n    notifyUserIfTaskIsIncomplete: async () => {\n        console.log(\"Entered method- notifyUserIfTaskIsCompleted\");\n        let isTaskIncomplete = false;\n        console.log(\"Selected Owner Id: \" + Table1.selectedRow.ownerId);\n        const taskList = getTaskList.data.record;\n        for (const task of taskList) {\n            if(task.ownerId == Table1.selectedRow.ownerId && task.endDate < Date() && task.status != \"Completed\") {\n                isTaskIncomplete = true;\n                break;\n            }\n        }\n        if (isTaskIncomplete){\n            sendEmailToNotifyUser.sendEmail();\n            return;\n        } \n        showAlert(\"No action is needed\");\n        console.log(\"Exitted method- notifyUserIfTaskIsCompleted\");\n    }\n}`\nThe method entry, exit, and parameter supplied to the method can be logged and viewed in the logs tab.\n\nFor logging a single string, multiple strings, or JavaScript objects, use the code snippet in the for loop to print the task object as below:\n`javascript\nconsole.log(\"Current from the tasklist response: \" , task);`\nYou can examine the task object and its attributes that are part of the response to evaluate the conditions and fix the code if necessary.\nError\nThe `console.error()` method outputs an error message to the logs tab. It can log a string, written as-is - with a custom error object, - or with a function that returns either a string or prints a custom object.\n:::note\nConsole methods don't support string substitutions.\n:::\nAfter reviewing the entry, parameters, and exit messages printed in the logs tab, you aren't sure what's breaking the code. To troubleshoot further, you should enclose the API call and the method logic within a `try-catch` block. You could have a custom function that evaluates all the types of errors the API can throw, outputs the appropriate message, and can use the console.error() method to print the returned message.\n`javascript\nprintErrorMessages: (errorCode) => {\n    if (errorCode == \"403 Forbidden\") {\n        return \"Access Denied!\";\n    } else if (errorCode == \"503 Service Unavailable\") {\n        return \"The server is either not available or shut down.\";\n    }\n}`\nUse the `console.error()` method in the catch block in the `notifyUserIfTaskIsIncomplete` method to print the error messages returned by the `printErrorMessages` method.\n`javascript\nexport default {\n    notifyUserIfTaskIsIncomplete: async () => {\n        console.log(\"Entered method- notifyUserIfTaskIsCompleted\");\n        let isTaskIncomplete = false;\n        console.log(\"Selected Owner Id: \" + Table1.selectedRow.ownerId);\n        try{\n                const taskList = getTaskList.data.record;\n                for (const task of taskList) {\n                console.log(\"iterableTask from the tasklist response: \" , task);\n                if(task.ownerId == Table1.selectedRow.ownerId && task.endDate < Date() && task.status != \"Completed\") {\n                    isTaskIncomplete = true;\n                    break;\n                }\n            }\n                if (isTaskIncomplete){\n                    sendEmailToNotifyUser.sendEmail();\n                    return;\n                } \n                showAlert(\"No action is needed\");\n                console.log(\"Exitted method- notifyUserIfTaskIsCompleted\");\n        }catch (err) {\n            console.error(this.printErrorMessages(err.name));\n        }\n    },\n    printErrorMessages: (errorCode) => {\n        if (errorCode == \"401 Unauthorized\") {\n            return \"Access Denied!\";\n        }\n    }\n}`\nThe error messages can be logged and viewed in the logs tab.\n\nHaving reviewed the error messages and correcting the code, you want to be sure that the code shouldn't raise any warnings that could halt the processing. To accomplish this, use the `console.warn()` method.\nWarn\nThe `console.warn()` method logs a warning message in the logs tab. Like `console.log()` and `console.error()`, you can log string(s) and JavaScript object(s) as warning messages.\n:::note\n Console methods don\u2019t support string substitutions.\n:::\nWarnings indicate cases where something may go wrong at runtime, so they shouldn't be ignored and can be logged using the `console.warn()` method.\n`javascript\nconsole.warn(this.printWarningMessages());`\nThe `printWarningMessages` method is a custom method that returns the warning messages and logs them in the logs tab.\n\nYou can review the warning message, `API.errorCode(Number1) is deprecated.`, and fix the code as necessary.\nWhen using the console methods: `log`, `error`, and `warn`, you can debug the complex execution logic and fix the problem.\nBenefits of using console\nThe console object facilitates fast debugging and locates the root cause of the issue. It's easy to use and doesn't require developer tools.\n\nEase: The console object is useful for logging the runtime context of an app. You can log messages in a particular context by using `console.log()`, `console.error()`, or `console.warn()`.\nAvailable in the Appsmith Editor: Messages are logged in the logs tab and can be accessed in the Appsmith editor without invoking the browser's developer tools.\n\nViewing the logged messages\nThe logs tab displays the logged messages. It shows system and user-generated messages(the console object's log, error, and warn methods are used for logging user-generated messages). Users can distinguish between them using the icon prefixed to the timestamp. A system-generated message has a desktop icon, whereas the user-generated message has a user icon prefixed.\nIt also displays the message origin (JS Object/Widget), so you can navigate to the widget or JS Object.\n\n:::info\nWhen you're in the logs tab, you can filter them by console logs which are user-generated messages.\n:::\n\nDebugging with the console object is more efficient, faster, and easier than using a debugger directly in the Appsmith Editor. There is no need to worry if you have complex API logic, multiple JS Objects, or complicated queries to debug.\n:::info\nIf you're experiencing issues, please go through the JS Errors/Action Errors troubleshooting guide or raise your queries via Discord or the Community Forum.",
    "tag": "appsmith"
  },
  {
    "title": "Query Object",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/appsmith-framework/query-object.md",
    "content": "\nsidebar_position: 3\nQuery Object\nRun\nEach query object contains a run function used to execute the query. The run function is asynchronous by nature and can be chained using the callbacks in the function signature.\n\nSignature\nYou can now use JavaScript Promises (recommended).\n`run(params: Object): Promise`\nIf you want to use Callbacks(not recommended), copy the signature below:\n`javascript\nrun(onSuccess: Function, onError: Function, params: Object): void`\nwhere onSuccess and onError are functions and params is a dictionary of key-value pairs.\n:::info\nWe suggest you use the JavaScript Promise signature as it makes the code easy and readable. Callbacks are an old way and will be deprecated soon.\nWe recommend using the following Promise syntax:\n`Query.run(params)\n    .then(() => {...}) // run after the query is successful\n    .catch(() => {...}) // run if the query encounters any errors`\n:::\nArguments\n| Argument Name | Description                                                                                  |\n| ------------- | -------------------------------------------------------------------------------------------- |\n| params    | An object containing key-value pairs to pass into the query, accessed with `this.params.key` |\n| onSuccess | The function to be executed when the run method succeeds                                     |\n| onError   | The function to be executed when the run method fails                                        |\nPassing Params to Run\nMost Queries read values directly from entities as global variables. In some cases, like running a query inside a loop, parameters may need to be passed to the query with values contextual to the execution. It can be achieved using the params argument of the run signature. Please see the example below.\n`UsersApi.run({ org: \"Appsmith\" })\n    .then((response) => showAlert(response) )\n    .catch((error) => showAlert(error, 'error'))`\nParams sent to a query can be accessed using the `this` keyword\n`javascript\n{{ this.params.key }}`\nPlease see the quick demo below showing how to access your params from `Query.run(params)` within the query. We'll use the Postman Echo API, which will echo our request. We'll pass it `{ phrase: \"hello, world!\" }` , and then receive it back as a response:\n\nonSuccess\nThe onSuccess function is run when a query runs successfully. The function returns the response of the query and the params passed to it in the callback arguments.\n`javascript\nonSuccess(response, params): void`\nonError\nThe onError function is run when a query execution fails. The function returns the response of the query and the params passed to it.\n`javascript\nonError(response, params): void`\nData\nEach query stores the data from its latest run inside its data property. This property is populated only if the query successfully executes and can be accessed as\n`javascript\n{{ Query1.data }}`",
    "tag": "appsmith"
  },
  {
    "title": "Appsmith Framework",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/appsmith-framework",
    "content": "Appsmith Framework\nThe Appsmith framework is designed to make it easy for developers to create dynamic, data-driven applications that respond to user interactions in real-time. It provides a range of utility functions and objects that allow developers to access important information, such as the current application URL or the authenticated user, and more. This makes it simple to build applications that are aware of the current context and can respond to changes in real-time.\nOne of the key features of the Appsmith framework is its in-built functions such as storing values in local storage. Storing values in local storage can be used to store information such as user preferences, session data, or temporary data that needs to be passed between pages. This allows developers to save and retrieve data that's specific to the current user or session, without having to worry about managing the storage themselves. For more information, see storeValue.\nIt also provides other functions like navigating to a page, displaying messages to users, and many more. For more information, see Actions.\nAdditionally, Appsmith offers a variety of built-in global objects, such as the Query Object, Context Object, and Console Object, that empower developers to execute database queries, share data between different pages through the use of parameters, obtain information about the current status of the application, and aid in debugging code respectively. For more information, see:\n\nContext Object\nConsole Object\n",
    "tag": "appsmith"
  },
  {
    "title": "Context Object",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/appsmith-framework/context-object.md",
    "content": "\nsidebar_position: 1\ndescription: >-\n  This is a context object that provides information around the current state of\n  the application\n\nContext Object\nThe Appsmith context object provides information around the current state of the application\n\nProperties\nThe Appsmith context object contains the following properties:\n`javascript\n{\n   store: object,\n   URL: object,\n   user: object,\n   geolocation: object,\n   mode: enum\n}`\nStore\nThis object contains the key-value pairs of the local storage of the app. Values to the store can be updated using the storeValue function. Values from the store can be accessed using their key.\n`javascript\n{{ appsmith.store.key }}`\nURL\nThis object contains all the values associated with the current URL that the user is on. The queryParams object of this field can be used to read data sent from other pages to this page using the navigateTo function.  Values from the URL can be accessed using:\n`javascript\n{{ appsmith.URL }}`\n`javascript\n{\n  host: string,\n  hostName: string,\n  fullPath: string,\n  pathName: string,\n  port: string,\n  protocol: string,\n  hash: string,\n  queryParams: object\n}`\nhost\nThe host property of the URL interface is a string that includes the hostname, and then, a `:`, followed by the port of the URL(if the port is available).\nExample:\n`js\n//{{appsmith.URL.host}}\nhost:\"app.appsmith.com:111\"`\nhostName\nThe hostname property of the URL is a string that holds the domain of the URL. In simple words, hostname is the host name (without the port number).\nExample:\n`js\n//{{appsmith.URL.hostname}}\nhostName:\"app.appsmith.com\"`\nfullPath\nA full-path URL designates an EXACT location (such as a page, app, file, etc.). In addition to the Domain and Top Level Domain(TLD), a full-path URL needs to include the protocol, subdomain (such as \"app,\" \"support,\" etc.), path/destination, and possibly a file extension as well as query parameters. A full-path can include:\n\nProtocol\nSubdomain\nDomain Name\nTop Level Domain (TLD)\nPath\nParameters\n\nExample:\n`js\n//{{appsmith.URL.fullPath}}\nfullPath:\"https://app.appsmith.com/app/demo-app/page1-6324031aa\"`\n:::info\nIn the preceding example, `6324031aa` represents the id of the page named `page1`. The current page slug in the URL is created by combining `$pageName-$pageId`. Each page has a unique page id that is assigned to it.\n:::\npathName\nIt is a string made up of a collection of path segments, each of which has the `/` character prefixed to it. The empty string will be the value of the pathname property if the URL has no path segments.\nExample:\n`js\n//{{appsmith.URL.pathname}}\npathName:\"/app/demo-app/page1-6324031aa\"`\nport\nThe port property of the URL is a string that contains the port number of the URL.\nExample:\n`js\n//{{appsmith.URL.port}}\nport:\"3000\"`\nprotocol\nThe protocol property of the URL is a string that represents the protocol scheme of the URL, including the `:`.\n\nThe resource name and the protocol identification are separated from one another by a colon and two forward slashes.\n\nExample:\n`js\n//{{appsmith.URL.protocol}}\nprotocol:\"https:\"`\nhash\nThe `appsmith.URL.hash` value is the string after the hashtag (including `#`). The URL fragment identification is followed by a hash symbol (#), which is the hash property of the URL interface.\nExample:\n`js\n//{{appsmith.URL.hash}}\nhash:\"#n912xhego\"`\nqueryParams\nQuery parameters are a predefined set of parameters that define particular content or actions based on the data being delivered. A URL has all the query parameters appended at the end with a `?` as a separator.\nExample:\n`js\n//{{appsmith.URL.queryParams}}\nqueryParams:\"?name=value&variable=value\"`\nUser\nThis object contains the data of the currently authenticated user.\n`javascript\n{\n  email: string\n  username: string\n  name: string\n  isEnabled: boolean\n  accountNonExpired: boolean\n  accountNonLocked: boolean\n  credentialsNonExpired: boolean\n  isAnonymous: boolean\n}`\nGeolocation\nThis object contains functions to request the current user location and the coordinates received from this request https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API .\n`javascript\n{\n canBeRequested: boolean,\n getCurrentPosition: Function,\n watchPosition: Function,\n clearWatch: Function,\n currentPosition: {\n   coords: {\n      accuracy: number,\n      altitude: number | null,\n      altitudeAccuracy: number | null,\n      heading: number | null,\n      latitude: number,\n      longitude: number,\n      speed: number | mull,\n   },\n   timestamp: number,\n }\n}`\ngetCurrentPosition\nSignature:\n`javascript\n(\n onSuccessCallback?,\n onErrorCallback?,\n options?: { maximumAge?: number, timeout?: number, enableHighAccuracy?: boolean } \n) -> void`\nAlmost similar to the original browser API, apart from the fact that you don't need to pass the success callback. On success, the location would automatically be stored at `appsmith.geolocation.currentPosition.coords`. If onSuccessCallback is passed, it would be called with the location information received.\nwatchPosition\nSignature:\n`javascript\n(\n  onSuccessCallback?,\n  onErrorCallback?,\n  options?: { maximumAge?: number, timeout?: number, enableHighAccuracy?: boolean } \n) -> void`\nAlmost similar to the original browser API, apart from the fact that you don't need to pass the success callback. On success, the location would automatically be stored at `appsmith.geolocation.currentPosition.coords` with the `appsmith.geolocation.currentPosition.timestamp` updated whenever the position was last updated. The callbacks, if provided, gets executed automatically when the location has changed. No watchId is returned as well as the platform only allow for a single `watchPosition`\nclearWatch\nSignature: `() -> Promise`\nAlmost similar to the original browser API, apart from the fact that you don't have to pass the watchId. If a watch is active, you must clear it before starting a new one.\nMode",
    "tag": "appsmith"
  },
  {
    "title": "Navigate To",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/appsmith-framework/widget-actions/navigate-to.md",
    "content": "\nsidebar_position: 1\nNavigate To\nnavigateTo allows the user to navigate between the internal pages of the App or to an external URL. It could be triggered on any widget action like Button onClick, Dropdown onOptionChange, etc. Enter the page name or the external URL in the navigateTo function (under a triggerable action like onClick), enter the Query parameters if required, and select the destination for the new page (a new window or same window).\n\nSignature\n`javascript\nnavigateTo(pageName: string, params?: {}, target: \"SAME_WINDOW\" | \"NEW_WINDOW\") -> Promise`\nArguments\n| Argument Name     | Description                                                                        |\n| --------------------- | -------------------------------------------------------------------------------------- |\n| pageNameOrUrl     | Page name or URL to which we would like to be transported. PageName is case sensitive. |\n| params (optional) | Query parameters passed via the URL. Used to share information with destination page.  |\n| target (optional) | Option to configure where to open the url. Default: \"SAME_WINDOW\"                     |",
    "tag": "appsmith"
  },
  {
    "title": "Copy to Clipboard",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/appsmith-framework/widget-actions/copy-to-clipboard.md",
    "content": "\nsidebar_position: 7\nCopy to Clipboard\nThis function is used to copy text to the clipboard.\nSignature\n`javascript\ncopyToClipboard(data: string, options: object): Promise`\nArguments\nUses the copy-to-clipboard library\n| Argument Name  | Description                                              |\n| ------------------ | ------------------------------------------------------------ |\n| data           | Data that would be copied                                    |\n| options.debug  | Boolean. Optional. Enable output to console                  |",
    "tag": "appsmith"
  },
  {
    "title": "Reset Widget",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/appsmith-framework/widget-actions/reset-widget.md",
    "content": "\nsidebar_position: 8\nReset Widget\nUse the resetWidget function to revert a widget to its default state. Any user input changes will get reverted and the values in the default properties will be applied.\nSignature\n`javascript\nresetWidget(widgetName: string, resetChildren?: boolean = true) -> Promise`\nArguments\n| Argument Name            | Description                                        |\n| ---------------------------- | ------------------------------------------------------ |\n| widgetName               | The name of the widget that needs to be reset          |\n| resetChildren (optional) | Should all children be reset as well. Defaults to true |",
    "tag": "appsmith"
  },
  {
    "title": "Store Value",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/appsmith-framework/widget-actions/store-value.md",
    "content": "\nsidebar_position: 5\nStore Value\nThe storeValue() function saves data in the browser as key-value pairs and can be later accessed anywhere in the application. \n\nSave value\nYou can store a value in the Appsmith store using the storeValue() function by passing the parameters shown in the signature. \nSignature\nThe syntax for storeValue function is given below:\n`javascript\nstoreValue(key: string, value: any, persist? = true): Promise`\nArguments\n| Argument Name   | Description              |\n| --------------|--------------------------- |\n| key          | Name of the key.        |\n| value        | The data you want to save using storeValue(). You can save any data type in the Appsmith store.  |\n| persist      | Defaults to true. True persists the key-value pair in the browser's local storage, and you can use it between sessions. A false doesn't persist the value and removes the key once the page refreshes or is closed.            |\nExample 1: if you want to store the text of an input widget, you can use the storeValue() as shown below:\n`javascript\n{{storeValue('email',input1.text)}}`\nHere, `email` is the key where the value is stored and `input1.text` is the value in the input widget that's saved in the storage object.\nExample 2:  You can save any data type with storeValue(). The example below shows how to store employees' basic information using a function inside a JSObject. \n```javascript\nexport default {\n    writeToStore: () => {\n        storeValue(\"isActive\", true). // Boolean\n        storeValue(\"name\", \"Robert\") // String \n        storeValue(\"pin\", 9929) // Number\n\n\n```}\n```\n\n\n}\n```\nAccess value\nYou can access the values from the store by referencing the key inside the store object.\n```javascript\n{{ appsmith.store.key }}\n```\n**Example**: in the example above, you stored the value of`input1.text`. You can access this value anywhere in the application by referencing the key`email`:\n`javascript\n{{appsmith.store.email}}`\nModify value\nYou can update the saved value in the store, by overwriting the data using its key. \nExample: you can update the boolean value  from `True` to `False` using its key `isActive` as shown below:\n```javascript\nexport default {\n    updateStore: () => {\n        if(appsmith.store.isActive === true)\n            storeValue(\"isActive\", false) \n    }\n}\n```\nRemove stored values\nremoveValue() function clears the value of the specified key in the store.\nExample: refer to the code below to remove the value with key `isActive` using a JSObject:\n```javascript\nexport default {\n    deleteStore: () => {\n        // Delete value for a particular key\n        removeValue(\"isActive\")\n            }\n}\n```\nClear store\nclearStore() function clears all the stored data in the Appsmith store.\n`javascript\nclearStore()`\nStore multiple values\nIf you need to store many values, instead of making multiple calls to the `storeValue` function, it's recommended to use an object array to store the values. All values can be assigned in a single `storeValue()` function as shown below:\n```javascript\n//employee data\nstoreValue(\"user\", { \"name\": \"Bar Crouch\", \"email\": \"bar@appsmith.com\", \"pin\": \"9984\"}) \n```\nThe below example shows how to access the name of the employee stored above:\n```javascript\n//Access store using a JSobject\n    export default {\n    userName: () => {\n        let user = appsmith.store.user.name\n        return user\n    }\n}\n//Text binding\n{{appsmith.store.user.name}}\n```\nYou can update the saved employee data in the storage as shown below:\n```javascript\n//updating employee data\nexport default {\n    complexUpdate: () => {\n        let user = appsmith.store.user // { \"name\": \"Bar Crouch\", \"email\": \"bar@appsmith.com\"}\n        user.email = \"barty.crouch@appsmith.com\"\n        user.city = \"Bangalore\"\n        storeValue(\"user\", user)\n    }\n}\n```\nStorage states\nAppsmith\u2019s storeValue() function consists of two storage states:\u00a0persistent\u00a0and session state.\nPersistent state\nIf you store value in the persistent state, it remains in the store across different sessions/pages and value is saved even if the page is reloaded. By default, the `persist` argument is set to true in storeValue() and so the data is saved in persistent state. \nExample: if you don't define the value for persist argument, the value is saved in the persistent state by default.\n`{{storeValue('one',Input1.text)}}`\nThe persistent state is cleared out when the user logs out.\nSession state\nYou can use the session state to store the value you wish to hold until the page reloads or a user closes the window. To save data in this way, add `false` to the`persist` argument in the storeValue() function.\n`javascript\n{{storeValue('two',Input2.text, false)}}`\nSession state (`persist=false`) is only available till the user exits the app or refreshes a page.\n:::info\nIf the same key is available in the session and persisted states, the session value gets a preference.\n:::\nCheck the sample app to learn more about persistent and session states.\nAsynchronous behaviour of store value\nstoreValue() is asynchronous, so its execution isn't dependent on another function or task. To handle this scenario, you'll have to use async/await to control the execution.\nExample: suppose there is a JS function that calls an API that returns a unique identifier, and you want to save the value returned using `storeValue()`.\n`javascript\nexport default {\n    getUniqueValue: () => {\n        GetUniqueNameAPI.run()\n        storeValue(\"uniqueEmail\", GetUniqueNameAPI.data.uniqueName);\n        showAlert(\"Success! Store value set: \" + appsmith.store.uniqueEmail);\n    }\n}`\nWhen you run the function, you expect an alert success message with the value stored in the key `uniqueEmail` but it shows `undefined`. \nAs storeValue() is asynchronous, it may execute while the API call is in progress and the value isn't saved in the storage resulting in `undefined` value.\nTo handle such a scenario, you can use async/await to ensure that the storeValue() function waits for the API call to complete execution.\nExample: modify the code to use async/await as shown below:\n`javascript\nexport default {\n     getUniqueValue: async () => {\n         await GetUniqueNameAPI.run()\n         await storeValue(\"uniqueEmail\", GetUniqueNameAPI.data.uniqueName);\n         showAlert(\"Success, Store value set: \" + appsmith.store.uniqueEmail);\n    }\n}`\nThe  `getUniqueValue`  function calls  `GetUniqueNameAPI.run()` to fetch data from the API. The prefix  `await` to the  `GetUniqueNameAPI`  call ensures that the control waits for API execution to complete and then moves to the following line. The prefix  `await`  to the `storeValue()` ensures that the value gets added to the store for the given key before executing `showAlert` in the next line.\nFurther Reading",
    "tag": "appsmith"
  },
  {
    "title": "Intervals (Time Events)",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/appsmith-framework/widget-actions/intervals-time-events.md",
    "content": "\nsidebar_position: 9\ntoc_min_heading_level: 2\ntoc_max_heading_level: 2\n\nIntervals (Time Events)\nInterval events (timing functions in JavaScript) allow the user to periodically run API and DB queries. You can configure these by using the `setInterval` and `clearInterval` functions.\n\nsetInterval()\n`setInterval()` executes a callback function with a fixed time interval between the calls.\nSignature\n`javascript\nsetInterval(callbackFunction: Function, interval: number, id?: string, args?: any)`\nArguments\n| Argument Name | Description |\n| ------------- | ----------- |\n| callbackFunction | A function to be called repeatedly every `interval` number of milliseconds. |\n| interval | The number of milliseconds to wait between calls of the `callbackFunction`. |\n| id | A custom string name that can be used to refer to this interval timer. When making a `clearInterval()` call, use this name as the `id` argument to `clearInterval`. |\nExample\n`javascript\nsetInterval(() => { Query1.run() }, 10000, \"myTimer\");`\n\nclearInterval()\n`clearInterval()` stops a repeating callback that was started with the `setInterval` method.\nSignature\n`javascript\nclearInterval(id: string)`\nArguments\n| Argument Name | Description |\n| ------------- | ----------- |\n| id | The `id` string of the timer to be cleared. This should match the `id` argument of the `setInterval()` call that you are trying to stop. |\nExample\n`javascript\nclearInterval(\"myTimer\");`\n\nsetTimeout()\n`setTimeout()` executes a piece of code once after a specified amount of time has passed.\nSignature\n`javascript\nsetTimeout(callbackFunction: Function, delay: number)`\nArguments\n| Argument Name | Description |\n| ------------- | ----------- |\n| callbackFunction | A function to be called once after a `delay` number of milliseconds have passed. |\n| delay | The number of milliseconds to wait before calling the `callbackFunction`. |\nExample\n```javascript\nsetTimeout(() => { showAlert(\"5 seconds have passed\") }, 5000);",
    "tag": "appsmith"
  },
  {
    "title": "Cross-origin Communication",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/appsmith-framework/widget-actions/post-message.md",
    "content": "Cross-origin Communication\nAppsmith provides a way to enable safe cross-origin communication between different Window objects such as application/parent window and iframes. This is useful when:\n\nUsing Appsmith's Iframe widget to embed other applications or pages.\nEmbedding Appsmith in an iframe of a parent application.\n\nMethods\nIn Appsmith, you can use the following methods for cross-origin communication -\n* postWindowMessage()\n* windowMessageListener()\n* unlistenWindowMessage()\npostWindowMessage()\n`postWindowMessage()` method can be used to send messages between the application or parent windows and iframes.\nSignature\n`javascript\npostWindowMessage(message, targetIframe, targetOrigin)`\nArguments\n| Argument Name | Description |\n| ------------- | ----------- |\n| message | This is the message to send to the target iframe or window. Most JavaScript values are acceptable here, except `null` and `undefined`. (Default: `\"\"`) |\n| targetIframe | This is the window to which you want to send the message. If its value is `\"window\"`, you are sending a message to the parent application\u2019s window (where Appsmith is embedded). If you want to send a message to an iframe within Appsmith, enter the name of the iframe here. (Default: `\"window\"`) |\n| targetOrigin | This is the URL to which you can send messages. The default value of \"`*`\" means the message can be sent to any URL. If you want to limit sending messages to only the parent application (in which Appsmith is embedded), enter the URL of the parent application here. (Default: `\"*\"`) |\nTo see examples of the postWindowMessage function, take a look at the sample app.\nwindowMessageListener()\n`windowMessageListener()` function enables an appsmith app to react to the messages incoming from the parent website. This is a page level action that's specific to the current page and won't continue on other pages.\n:::info\nThis feature is available only in Appsmith's business edition.\n:::\nSignature\n`javascript\nwindowMessageListener(\n    \"https://your-site.github.io\", \n    (message) => { showAlert(message) }\n)`\nArguments\n| Argument | Description |\n| --- | --- |\n| domain | This is the address of the website that sends the message (`https://mywebsite.com`). The app only listens to messages from the given domain when embedded. If the app is embedded in some other website(`https://myother-website.com`)the callback  won\u2019t be triggered. If an active action is already in place, it won't be overridden and a warning appears in the console. |\n| callback | A callback comes to action whenever a message is sent from the defined domain. It accepts a parameter that  returns the response to the incoming message. |\nunlistenWindowMessage()\n`unlistenWindowMessage()` allows you to disable an appsmith app from reacting to messages from the parent website.\n:::info\nThis feature is available only in Appsmith's business edition.\n:::\nSignature\n`javascript\nunlistenWindowMessage(\u201ddomain\u201d)`\nArguments\n| Argument | Description |\n| --- | --- |\n| domain | This is the address of the website with an already active action. If no active action exists in this domain, a warning appears in the console. |\nTypes of communication\nThere are a number of directions in which your apps may need to communicate. Depending on their parent/embed relationship and the message's target recipient, the configuration is a bit different.\n\n\nIframe widget in Appsmith app\nIn this scenario, you are building an app that has an Iframe widget called `Iframe1`. There is an external page embedded within that Iframe widget, and you are setting up communication between the embedded page and the Iframe in Appsmith.\nFrom Appsmith to embedded page\n\nTo send data to a page that's embedded in an Appsmith Iframe widget:\n\nDrag and drop an Input widget and a Button widget onto the canvas.\nIn the button's onClick event property, select Post message. Set the Message to `{{ Input1.text }}` and Target iframe to `Iframe1`.\nOn the canvas, enter your piece of data into the input widget, and click the button widget. The iframe has now received the message you sent.\n\nIf you want to try this but you need a sample page to receive your message, set up your iframe with this HTML string in its srcDoc property:\n```html\n\n\n```\nWhen the iframe receives your message, it puts the message text into the `#target` div.\nFrom embedded page to Iframe widget\nTo capture and handle a message that was sent to an Appsmith Iframe widget from the page embedded in the iframe:\nUse the iframe's onMessageReceived event in the properties pane. Choose an action or write code to be executed when the message is received from the embedded page. You can use the `Iframe1.message` property to access the content of the message that was received by Appsmith.\nAppsmith app embedded in parent app\nIn this scenario, you are building an app outside of Appsmith, and you have used an HTML iframe element to embed a deployed Appsmith app in that page. Now you are setting up communication between the non-Appsmith parent app and the Appsmith app embedded within it.\nFrom Appsmith to parent app\n\nTo configure your Appsmith application to send messages to its parent page:\n\nDrag and drop a Button widget and an Input widget onto the canvas.\nIn the button's properties, configure its onClick event to execute the Post message action. Set its Message field to `{{Input1.text}}`, and make sure that the Target iframe field is set to `window`.\nOn the canvas, enter some data in the input widget's field and click the button widget. Appsmith has just emitted a message to its parent window.\n\n:::tip\nThe parent application where Appsmith is embedded should have an event listener set up to receive the message that you send from Appsmith. Read more about setting up message event handling here.\n:::\nFrom parent app to Appsmith\n:::info\nThis feature is available only in Appsmith's business edition.\n:::\n\nWhen you embed an Appsmith app as an iframe on a website, the event listeners allow you to listen to the message from that parent website. You can use this method to make Appsmith react to events from the parent website. \nOn your Appsmith app, you can enable/disable a page to react to these messages using the following functions - \n\nwindowMessageListener()\nunlistenWindowMessage()\n\nFor example, a parent website (`https://mywebsite.com`) where an appsmith app is embedded calls this function when a button is clicked - \n`javascript\nconst iFrame = document.getElementById(\u201d#appsmith-iframe\u201d);\niFrame.contentWindow.postMessage(\"Parent message\", 'https://your-appsmith-domain.com');` \nIn the Appsmith app, if you want to run an API called `Api1` in reaction to this message, you can use the `windowMessageListener()` function as follows - \n`javascript\nwindowMessageListener(\u201dhttps://mywebsite.com\u201d, () => Api1.run());`\nTo stop the Appsmith app from reacting to the incoming messages from the parent website (`https://mywebsite.com`), you can use the `unlistenWindowMessage` method as follows -\n`javascript\nunlistenWindowMessage(\u201dhttps://mywebsite.com\u201d)`\n:::tip\nYou can automatically set up an action in a page by calling the `windowMessageListener` in a JS object method and have it run when the page loads.\n:::",
    "tag": "appsmith"
  },
  {
    "title": "Download",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/appsmith-framework/widget-actions/download.md",
    "content": "\nsidebar_position: 6\nDownload\nWith Appsmith, users have the ability to download a wide range of file formats. This action serves the purpose of downloading any data as a file. The feature is made possible by using  downloadjs library.\nSignature\n`javascript\ndownload(data: any, fileName: string, fileType?: string): Promise`\nArguments\n| Argument Name | Description                            |\n| ----------------- | ------------------------------------------ |\n| data          | Data or URL that would be downloaded       |\n| fileName      | Name of the file to be downloaded          |\n| fileType      | The mime type of the file to be downloaded |\nSupported file type\nAppsmith offers wide range support for downloading files in various formats, including:\n\nPlain text\nHTML\nCSV\nJSON\nJPEG\nPNG\nSVG\n\n:::info\nThe Download action doesn't convert the file to a specific type and it's downloaded in the original format. If you need to change the file type, you would need to convert the data to a specific format using JavaScript before downloading.\n:::\nExamples\nDownloading a plain text\nTo download a plain text document, the data passed to the download action should be a `string` representation of the text content to be downloaded. Additionally, a `fileName`and an optional `fileType` should be provided as parameters to the download function. \n`javascript\ndownload(data: string, fileName: string, fileType?: string): void`\n\nThis feature can be useful for saving notes, logs, or any other type of plain text information for later reference or sharing with others.\nDownloading an image\nTo download an image, the data passed to the download action should be the image's URL or Base64 string representation of the image. Additionally, a fileName and an optional fileType should be provided as parameters to the download function. \n\nDownloading a file\nFiles of various types can be downloaded using the download action by providing the URL of the file to be downloaded. Below code snippet demonstrates how to download any file from a URL using JavaScript.\n`javascript\ndownloadPDF: async () => {\n    let data = getPdf.data\n    const blob = new Blob([data], {type: 'application/pdf'});\n    const url = URL.createObjectURL(blob);\n    await download(url, \"sample.pdf\", \"application/pdf\")\n}`\n:::tip\nFor files to be successfully downloaded, their contents must be served over HTTPS to prevent requests from being blocked. To prevent Cross-Origin Resource Sharing (CORS) errors, ensure that the server where the file is fetched from is CORS-enabled and returns the required headers in the response.\n:::\nTroubleshooting",
    "tag": "appsmith"
  },
  {
    "title": "Menu Button",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/menu-button.md",
    "content": "Menu Button\nThe Menu Button widget is a customizable dropdown menu that allows you to add a list of options for users to select from. It's a powerful tool for creating navigation menus, dropdown lists, and options for users to choose from.\n\nUsage\nTo use the menu buttons widget, simply drag & drop it onto your app canvas from the widget library and customize it using the properties and events available. The widget comes with default styles, but you can also use the styles tab to customize the look and feel of your buttons and menus. \nProperties\nThe menu buttons widget has several properties that you can use to customize its behavior and appearance. Properties also allow you to connect it with other widgets and customize the user actions. The table below gives an exhaustive list of available properties for the menu button and menu item.\nMenu Button properties\nThese properties allow you to perform formatting changes or bind the Menu Button widget to any other widget, query, or JS object. \n| Property            | Type | Description | Code Snippet |\n| ------------------- | ---------------- |------------------- | ---------------- |\n| Label        | Formatting/ Binding | This property sets the label of the menu button. It can be a static text value or dynamically bound to a source of data. For example, you might set the label to be the logged-in user\u2019s name. To dynamically bind the text, use the `{{}}` mustache sign. You can also read the value of the label in the code. | `{{<WIDGET_NAME.label}}`|\n| Menu Items Source| Formatting | This property allows you to specify the source for the menu items. You can define a static list of items or provide a dynamic data source to be displayed as menu items. |                   |\n| Visible          | Formatting/Binding | This property controls the visibility of the widget. For more information, see Visible property details| `{{<WIDGET_NAME.visible}}`|\n| Disabled         | Formatting | This property disables the input to the widget. For more information, see Disabled property details.|                  |\n| Animate Loading | Formatting | This property allows you to control a widget\u2019s animation on the page. This can be useful for adding visual feedback to the user when the widget is loading or processing data.|                  |\n| Compact         | Formatting | This property decides if the widget is in compact mode. In compact mode, the widget takes up less space on the page and can be suitable to use in tight layouts.|                 \nMenu Item properties\nThese properties allow you to perform formatting changes for menu items that are added manually using Static or dynamically added using Dynamic source.\n| Property            | Type | Description | Code Snippet |\n| ------------------- | ---------------- |------------------- | ---------------- |\n| Label           | Formatting| This property sets the label of a menu item. This can be a static text value, or it can be dynamically bound to a data source. For example, you might set the label to be the name of a page or a user. | |\n| Visible           | Formatting/Binding | This property controls the visibility of a menu item. This can be useful for showing or hiding the menu item based on certain conditions. For example, you might show the menu item only if a user has permission to access it. For more information, see Visible property details) | |\n| Disabled           | Formatting| This property allows you to turn off input to a menu item. This can be useful if you want to prevent users from interacting with the menu item in certain scenarios. For example, you might turn off a menu item when it's not relevant or applicable. For more information, see Disabled property details.| |\n| Icon | Style | This property sets the icon to be used for a menu item. This can be useful for adding visual context and branding to the menu item. The icons are used from Blueprint library. For more information, see the list of icons available on Blueprint.| |\n|Position | Style |  This property allows you to select the position where you want to place the icon on the menu item. You can choose between left or right alignment.| |\n|Icon color | Style | This property sets the color of the icon for the menu item. This can be useful for matching the icon with the overall design of the menu button.| |\n|Text color | Style |  This property sets the color of the text for the menu item. This can be useful for making the text stand out or blending in with the background.| |\n|Background color| Style | This property sets the background color of the menu item. This can be useful for adding visual interest or highlighting the selected menu item.| |\nThe properties are described as follows:\nMenu Items Source\nThe \"Menu Items Source\" property lets you define where the menu items come from. You can either define them manually (Static) or use a dynamic source by selecting the \"Dynamic\" option. Dynamic option allows you to specify a data source such as a database query or API, which can be useful when the number of items or properties in each item need to be updated dynamically.\n\nStatic\nThe \"Static\" source refers to the ability to manually define the menu items. This means that the menu items don't change unless the user manually updates them. For example, if you have a static menu with three items (Home, About, Contact), the menu always displays those items until they\u2019re manually edited using the gear icon next to it. Once you select `Static` as the source, you see the `Menu Items` property, where you can define the items for the menu.\nMenu Items\nThis property allows you to define the options you can show in the dropdown list when the menu button is clicked. You can add the items from the property pane by using the `Add a New Menu Item` button. Each menu item can be customized using the gear icon available next to it. For example, you might define a menu item with a label of \"Home\" and an action of \"Navigate to Home page\" by using the gear icon.\nMenu item settings\nThe gear icon allows you to access and configure settings for a menu item, such as its properties. This can be useful for customizing the behavior and appearance of the menu item. You can also set styles specific to the menu item like Icon, the position of the icon, background color, and more.\nTo specify an action to be performed when a menu item is clicked, you can bind a supported action to the `onClick` event of the menu item. You can define different actions to be triggered for different menu items using the gear icon next to them. For more information, see the list of supported actions\nDynamic\nWhen you select the dynamic source, you can bind the menu item's property to a data source, such as a database query or API response. This allows the widget to dynamically populate the menu items based on available data. This is useful for creating menus that can change and adapt based on user input or application state. You can configure the menu items by clicking the `Item Configuration` button.\n:::note\n Dynamic menu items only supports up to 10 menu items. You can define them in the \"Source Data\" property for a dynamic source.\n:::\nSource data\nThe \"Source Data\" property is used to specify the data source for a dynamic menu. By default, this property has an empty value but can be set to an array of values. This array can be the result of a query, an API response, or any other data source that can be represented as an array. The evaluated array generates the menu items for the dynamic menu.\nConfigure Menu Items\nWith the \"Configure Menu Items\" option, you define the styles for the menu items. You can add customizations to every item in the array by configuring them using the 'Item Configuration` button.\nItem configuration\nYou can access and configure settings for a menu item, such as its properties, events, and styles. This can be useful for customizing the behavior and appearance of the menu item. The configurations are applied to every item in the Menu. You can use `currentItem` and `currentIndex` to configure the labels, appearance, and actions.\nHow to use currentItem and currentIndex\nThe `currentItem` property references the selected item on the menu button. You can use the `currentItem` to read the attributes of the selected menu item. For example, if you want to set the dynamic value for the label, then you can use a placeholder such as `{{currentItem.Name}}`, where \"Name\" is the attribute that holds the name of the menu item. This allows you to display different text for each menu item based on its data. \n\n`currentIndex` is helpful when you want to show a numbered list of menu items or want to set alternate background colors for the menu items.\n",
    "tag": "appsmith"
  },
  {
    "title": "Radio Group",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/radio-group.md",
    "content": "Radio Group\nThe Radio group widget allows users to configure a group of radio buttons. It lets the user choose one option from a predefined set of options.\n\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the Radio Group widget. All these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property                   | Description                                                                                                          |\n| -------------------------- | -------------------------------------------------------------------------------------------------------------------- |\n| Options                | It sets a list of options for a user to select. Values must be unique.                                               |\n| Default Selected Value | Sets a default value that is selected as user input unless it is changed by the user.                                |\n| Inline                 | Whether the checkbox buttons are to be displayed inline horizontally.                                                |\n| Required               | When turned on, it makes a user input required and disables any form submission until input is made.                 |\n| Visible                | Controls widget's visibility on the page. When turned off, the widget will not be visible when the app is published. |\n| Disabled               | Disables input to this widget.                                                                                       |\n| Animate Loading        | Allows you to control a widget\u2019s animation on the page load.                                                         |\n| Alignment              | Sets alignment of the widget.                                                                                        |\n| Height        | It configures how a widget\u2019s height reacts to content changes. It has three possible configurations:Fixed: The height of the widget remains as set using drag and resize.Auto Height: The height of the widget reacts to content changes. Auto Height with limits: Same as Auto height, with a configurable option to set the minimum and maximum number of rows that can be occupied by the widget.                                      |\nBinding Properties\nThese properties help you share values between widgets and also allow you to easily access the widget property within Queries or JS functions.\n| Property                | Description                                                                       | Code Snippet                          |\n| ----------------------- | --------------------------------------------------------------------------------- | ------------------------------------- |\n| isRequired          | This property indicates whether the widget is required or not.                    | `{{widget_name.isRequired}}`          |\n| isVisible           | This property indicates whether the widget is visible or not.                     | `{{widget_name.isVisible}}`           |\n| selectedOptionValue | This property dispays value of selected option. For example- Y for Yes, N for No. | `{{widget_name.selectedOptionValue}}` |\nEvents\nThey are a set of actions that you can perform on the widget:\n| Events                | Description                                                                                                                              |\n| --------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |\n| onSelectionChange | Sets the action to be run when the selection state is changed. See a list of supported actions. |\nLabel\nThe property hosts a group of configurations that you can use to associate a display name and define a placement for the widget. These properties are usually useful when you want to design forms that follow a defined alignment for your form fields and give a professional look to your forms. Below are the properties that you can use:\n| Label         | Description                                                  |\n| ------------- | ------------------------------------------------------------ |\n| Text      | Sets the label text of the widget.                           |\n| Position  | Sets the label position of the widget.                       |\n| Alignment | Sets the label alignment of the widget.                      |\n| Width     | Sets the label width of the widget as the number of columns. |\nLet's understand these properties in detail:\nText\nIt allows you to set the display name for the Radio Group. For example, if you want the user to select a Gender Type, you can enter the text as \"Gender.\"\n:::tip\nYou can leave the text empty if you don't want any display name for your Radio Group widget.\n:::\nPosition\nIt allows you to specify the placement of the label. You can select one of the available options:\n\nTop - It allows you to align the text at the top of the Radio Group.\nLeft - It aligns the text to the left of the Radio Group. When you select Left alignment, you get additional settings that you can use to control the alignment and define the text's width.\nAlignment - With the help of alignment, you can define the placement of the text in accordance with the position of the Radio Group. You can choose:\nLeft - It aligns the text to the widget's left boundary that is away from the Radio Group.\nRight - It aligns the text closer to the Radio Group.\n\n\nWidth - With the help of width, you can define the number of columns in the grid that surrounds the widget. You can specify how close or far the text can be placed to the Radio Group.\nAuto - It automatically adjusts the position of the text based on the Radio Group's height.\n\n:::info\nColumns are the dashed lines (-----) that surround a widget when you try to drag and drop it on the canvas.\n:::\n\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Style                | Description                                              |\n| -------------------- | -------------------------------------------------------- |\n| Label Text Color | Allows you to set text color for the label.              |\n| Label Text Size  | Allows you to set the size of the label.                 |\n| Label Font Style | Allows you to choose a font style, i.e., bold or italic. |",
    "tag": "appsmith"
  },
  {
    "title": "Text",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/text.md",
    "content": "Text\nA text widget displays textual information. Whether you want to add a paragraph or a heading to a container, a text widget makes it easy to style and display text.\n\nProperties\nProperties allow you to edit the text widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties enable you to edit the text widget. All these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property            | Description                                                                                                                                                                                |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Text            | Sets the text to be displayed.                                                                                                                                                             |\n| Enable Scroll   | It enables scrolling within a widget's set boundary. It helps you not truncate long text and lets you display it inside a small area on the app.                                           |\n| Truncate text   | It truncates the text that goes beyond the text box size.                                                                                                                                  |\n| Visible         | It controls the widget's visibility on the page. When turned off, the widget would not be visible when the app is published.                                                                |\n| Animate Loading | Control\u2019s widget\u2019s loading animation on the page. When turned off, the widget will load without any skeletal animation. This can be controlled with JS until all the widgets are rendered. |\n| Disable link    | It parses any link in the widget as standard text.                                                                                                                                         |\n| Height        | It configures how a widget\u2019s height reacts to content changes. It has three possible configurations:Fixed: The height of the widget remains as set using drag and resize.Auto Height: The height of the widget reacts to content changes. Auto Height with limits: Same as Auto height, with a configurable option to set the minimum and maximum number of rows that can be occupied by the widget.                                      |\nLet's understand the widget properties in detail.\nText\nThe `Text` field takes the input for the text widget. You can also add `HTML` code in the Text field manually or dynamically to render it in the widget.\n\n:::info\nText field can only render inline CSS. If you want to use external CSS, we suggest using the iFrame widget.\n:::\nTruncate Text\nThis property shortens the text in the text box and further adds three ellipses at the bottom left of the widget. Clicking on the three ellipses opens up a pop-up showing all the text inside the text widget. It's enabled by default and truncation will only be applied if the text is longer than what can fit inside the given widget area.\n\nVisible\n`Visible` controls the widget\u2019s visibility on the app\u2019s page. The widget would not be visible on the published app if you turn off this property. You can also write a `JS`` code to link Visible\u2019s functionality to a user action. Click on `JS` next to the Visible to write JavaScript code.\nFor example, let\u2019s drag a checkbox widget `checkbox1` onto the canvas and bind it to the `Visible` property. To enable the `Visible` when the user checks the checkbox, add the following JavaScript code:\n`{{Checkbox1.isChecked}}`\nWhen you tick the checkbox, it will enable the Visible property, and the text widget will be visible in the app.\n\nDisable link\nIt prevents the input text from being parsed as a link. You can also write a `JS` code to link Disable the link\u2019s functionality to a user action. Click on `JS` next to the `Disable link` to write JavaScript code.\nFor example, let\u2019s drag a checkbox widget `checkbox1` onto the canvas and bind it to the `Disable link` property. To enable the `Disable link` when the user checks the checkbox, add the following JavaScript code:\n`{{Checkbox1.isChecked}}`\nWhen you tick the checkbox, it will enable the Disable link property, and the input will be parsed as text.\n\nBinding Properties\nThese properties help you share values between widgets and also allow you to easily access the widget property within Queries or JS functions.\n| Property      | Description                                                   | Code Snippet         |\n| ------------- | ------------------------------------------------------------- | -------------------- |\n| isVisible | This property indicates whether the widget is visible or not. | `{{Text.isVisible}}` |\n| text      | This property returns the widget's text value.                | `{{Text.text}}`      |\nStyles\nStyle properties allow you to modify the text widget visually. It has several options, such as -\n\nCell background color: It lets you choose the background color of the text widget.\nText color: It gives an option to change the color of the text.\nBorder color: It allows you to change the border color of the text widget.\nBorder width: You can define the width of the border here. It takes input in px.\nText size: It gives you an option to specify the text size.\nFont style: Using this property, you can modify your text visually.\nFont Family: Using this property, you can select a the font.\nText Align: This property focuses on the text alignment inside the text widget. It has three options - left, center, or right.\n",
    "tag": "appsmith"
  },
  {
    "title": "Input",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/input.md",
    "content": "Input\nThe input widget allows the user to enter or edit data such as text, number, email, etc. it's helpful in a form widget with custom validations.\n\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget properties\nThese properties allow you to edit the Input widget, and are present in the property pane of the widget. The following table lists all the widget properties.\n| Widget Property     | Description                                                                                                                                                                                            |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Data Type       | Sets the type of data you want to capture in the user input. Selecting a data type adds the associated validation to the user input. Choose from Single-line text, Multi-line text, Number, Password, or Email.                 |\n| Default text    | Sets the widget's default value before the user has made any changes.                                                                                                                                  |\n| Max Chars       | Sets a maximum length allowed for user input. Only appears when Data Type is set to Text.                                                                                                          |\n| Min             | Sets a minimum value allowed for user input. Only appears when Data Type is set to Number.                                                                                                         |\n| Max             | Sets a maximum value allowed for user input. Only appears when Data Type is set to Number.                                                                                                         |\n| Regex           | Used to add custom regex validation to perform on user input. When the input doesn't match the regex expression, the input is considered invalid.                                                     |\n| Valid           | Sets an expression to decide whether the user's input is considered valid. When the expression evaluates to `false`, the input is considered invalid and the widget shows its Error Message.   |\n| Error message   | Sets the text of the error message to display if user input is considered invalid.                                                                                                                     |\n| Placeholder     | Sets the placeholder text within the input box. Use to show a hint or example value to the user.                                                                                                       |\n| Tooltip         | Sets a tooltip for the widget. You can add hints or extra information about the required input from the user.                                                                                          |\n| Show step arrows              | Controls visibility of step arrows. Turning this toggle off hides the step arrows to increment or decrement the values in the widget.                                                                        |\n| Required        | Sets whether the input field is a mandatory field. When the input widget is within a Form widget, that Form's submit button automatically disables until a user adds input to the field.       |\n| Visible         | Controls widget's visibility on the page. When turned off: The widget isn't visible when the app is published. It appears translucent when in Edit mode.                                         |\n| Disabled        | Makes the widget un-clickable or unusable. The widget remains visible to the user, but user interaction isn't allowed.                                                                       |\n| Reset on Submit | Clears the value entered by the user after form submission.                                                                                                                                            |\n| Autofocus       | When enabled, the user's cursor focuses on the input box automatically on page load.                                                                                                           |\n| Animate Loading | When turned off, the widget loads without any skeletal animation. You can use a toggle switch to turn it on/off. You can also turn it off/on using javascript by enabling the JS label next to it. |\n| Spellcheck      | When enabled, user input is checked for spelling errors.                                                                                                                                          |\n| Height        | It configures how a widget\u2019s height reacts to content changes. It has three possible configurations:Fixed: The height of the widget remains as set using drag and resize.Auto Height: The height of the widget reacts to content changes. Auto Height with limits: Same as Auto height, with a configurable option to set the minimum and maximum number of rows that can be occupied by the widget.                                      |\nData type\nAs the name suggests, data type allows the user to set the type of data you want in the input box, like- \n\nSingle-line text\nMulti-line text\nNumber\nPassword\nEmail\n\nThe input box shows an error \"invalid input\" if the entered data doesn't match the data type or disable the invalid data type input. (If you select the data type as a number, you won't be able to enter text in the input box.)\n\nLabel\nThe property hosts a group of configurations that you can use to associate a display name and define a placement for the widget. These properties are usually useful when you want to design forms that follow a defined alignment for your form fields and give a professional look to your forms. Below are the properties that you can use:\nText\nIt allows you to set the display name of the input box. For example, if you want the user to enter a name in the input box, you can enter the text as \"Name.\"\n:::tip\nYou can leave the text empty if you don't want any display name for your input widget.\n:::\nPosition\nIt allows you to specify the placement of the label. You can select one of the available options:\n\nTop - It allows you to align the text at the top of the input box.\nLeft - It aligns the text to the left of the input box. When you select Left alignment, you get additional settings that you can use to control the alignment and define the text's width.\nAlignment - With the help of alignment, you can define the placement of the text in accordance with the position of the input box. You can choose:\nLeft - It aligns the text to the widget's left boundary that's away from the input box.\nRight - It aligns the text closer to the input box.\n\n\nWidth - With the help of width, you can define the number of columns in the grid that surrounds the widget. You can specify how close or far the text can be placed to the input box.\nAuto - It automatically adjusts the position of the text based on the input box's height.\n\n:::info\nColumns are the dashed lines (-----) that surround a widget when you try to drag, and drop it on the canvas.\n:::\n\nPlaceholder\nYou can set a proxy text/value inside the input box using the `placeholder` property. It can be any message or hint for the expected input.\n\nDefault text\nThis property lets you set a default value for the widget before the user has made any changes.\nOne good example of using this property is to bind it with a column of the selected row of a table. `Default text` fills the input widget with the value at that table's cell.\n\nRegex\nUsing `Regex` or Regular expression property, you can set specific constraints on the input you expect from the user.\nFor example, add a regular expression for entering a name. The name can contain only alphabets and space between the first and last name.\n`/^[a-z -]+$/i`\nIf you enter a value other than an alphabet or space (number of special characters), the widget shows an error message \"invalid input.\"\n\nError message\nIf a user enters an incorrect value, the input widget shows a message \"invalid input.\" You can change this message by using the `Error message` property to provide better feedback on the input given by the user.\n\nRequired\nEntering a value in the input box is mandatory when the required property is enabled. You can also write a JS code to link this property to a user action. Click on `JS` next to the `Required` to write JavaScript code.\nFor example, drag a checkbox widget `checkbox1` onto the canvas and bind it to the `Required` property. To enable the `Required` when the user checks the checkbox, add the following JavaScript code in the Required property:\n`{{Checkbox1.isChecked}}`\nWhen you tick the checkbox, it enables the Required property, and the input box shows an error message \"This field is required\" if you haven't entered any input.\n\nShow step arrows\n:::note\nThe Show step arrows property is only available for the number data type.\n:::\nWhen `Show step arrows` property is turned on, the step arrows are displayed and user can use them to increase or decrease the value inside the widget. You can also use JavaScript code to dynamically show or hide the step arrows based on certain conditions or events. This can be useful if you want to enable or disable the step arrows based on the current state of the widget or other factors.\n\nVisible\n`Visible` controls the widget's visibility on the app's page. The widget is visible on the published app if you turn off this property. You can also write a JS code that links the Visible property to a user action. Click on `JS` next to the `Visible` to write JavaScript code.\nFor example, drag a checkbox widget `checkbox1` onto the canvas and bind it to the `Visible` property. To enable the `Visible` when the user checks the checkbox, add the following JavaScript code:\n`{{Checkbox1.isChecked}}`\nWhen you tick the checkbox, it enables the Visible property, and the input box is visible in the app.\n\nDisabled\nIt disables the user from entering values in the input widget. The widget is visible (if Visible is enabled), but user input is allowed. You can also write a JS code that links the Disabled property to a user action. Click on `JS` next to the `Disabled` to write JavaScript code.\nFor example, drag a checkbox widget `checkbox1` onto the canvas and bind it to the `Disabled` property. To enable the `Disabled` when the user checks the checkbox, add the following JavaScript code:\n`{{Checkbox1.isChecked}}`\nWhen you tick the checkbox, it enables the Disabled property and prevent a user input in the input box.\n\nReset on submit\nWhen `Reset on Submit` is enabled, the input widget resets or clears the entered input after the user submits it. Use the event `onSubmit` to show a message when input is submitted. You'll see once the user submits and the message pops up, the input widget resets itself to its original state.\n\nAutofocus\nWhen you enable `Autofocus`, the cursor focuses on the input box whenever the widget is loaded.\n\nBinding properties\nThese properties allow you to bind your input widget with any other widget in queries or JS objects.\n| Binding Property | Description                                                                                                                  |\n| ---------------- | ---------------------------------------------------------------------------------------------------------------------------- |\n| isDisabled   | Reflects the state of the widget's Disabled setting (`bool`).                                                            |\n| isValid      | Reflects whether the widget's input is considered Valid (`bool`).                                                        |\n| isVisible    | Reflects the state of the widget's Visible setting (`bool`).                                                             |\n| text         | Contains the widget's text / user input, either as a string or number. depending on the widget's Data Type property. |\nText\nIt fetches the value that the user enters in the input widget. It changes when the default value changes or the user enters a new value in the input field.\nTo bind the text entered by the user in the input widget to another widget, open the property pane, and add the code snippet (enclosed in mustache syntax) given below:\n`{{<Input_widget_name>.text}}`\nWhere `<Input_widget_name>` is the name of your input box.\nFor example, take an Input widget `input1` and bind its text to a text widget. Drag a Text widget onto the canvas and add the following snippet to the Text property of the Text widget:\n`{{input1.text}}`\nThe Text widget displays the text present in the input widget.\n:::info\nProperty binding has other applications. For example, it helps in parsing the value entered in an input widget to a Query or JS function.\n:::\n\nEvents\n| Event             | Description                                                                                                                                                                                                                                              |\n| ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| onTextChanged | Sets an action to take place when the input's value is changed. Can be set from the GUI list of common actions (examples here), or you can define a custom JavaScript function to call instead.              |\n| onFocus      | Sets an action to take place when the input is focused. Can be set from the GUI list of common actions (examples here), or you can define a custom JavaScript function to call instead. |\n| onBlur      | Sets an action to take place when the input is blurred or loses focus. Can be set from the GUI list of common actions (examples here), or you can define a custom JavaScript function to call instead. |\n| onSubmit      | Sets an action to take place when the input is submitted with the ENTER key. Can be set from the GUI list of common actions (examples here), or you can define a custom JavaScript function to call instead. |\nLabel\nThe property hosts a group of configurations that you can use to associate a display name and define a placement for the widget. These properties are usually useful when you want to design forms that follow a defined alignment for your form fields and give a professional look to your forms. Below are the properties that you can use:\n| Label         | Description                                                                                          |   |\n| ------------- | ---------------------------------------------------------------------------------------------------- | - |\n| Text      | Sets the label text of the widget.                                                                   |   |\n| Position  | Sets where the label appears relative to the widget's input area. Choose between Left, Top, or Auto. |   |\n| Alignment | Sets whether the label is left- or right-aligned.                                                    |   |\n| Width     | Sets the width of the label. The number represents how many characters/columns wide the label is.    |   |\n| Label Styles         | Description                                                                                                                          |   |\n| -------------------- | ------------------------------------------------------------------------------------------------------------------------------------ | - |\n| Text Color       | Sets the text color for the label. Accepts valid CSS color values.       |   |\n| Text Size        | Sets the size of the label font. Accepts valid CSS font-size values. |   |\n| Label Font Style | Toggles font styles (bold or italic).                                                                                          |   |\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Style Property     | Description                                                                                                                                                                      |\n| ------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Icon           | Sets an icon to be included in the input field.                                                                                                                                  |\n| Icon Alignment | Sets whether the icon appears on the left or right of the input field.                                                                                                           |\n| Border Radius  | Rounds the corners of the widget's outer edge. With JS enabled, this accepts valid CSS border-radius values. |\n| Box Shadow     | Casts a drop shadow from the frame of the widget. With JS enabled, this accepts valid CSS box-shadow values.    |\n:::info\nThe icons use the Blueprint library. for more information, see the list of icons available at Blueprint.",
    "tag": "appsmith"
  },
  {
    "title": "Datepicker",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/datepicker.md",
    "content": "Datepicker\nDatepicker is used to capture the date and time input by a user. It can be used to filter data based on the input date range as well as to capture personal information such as date of birth.\n\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the Datepicker widget. All of these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property               | Description  |\n| ---------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Default Date       | Sets a default date that will be captured as user input unless it is changed by the user. The default date must be an ISO string using the following formats: - YYYY-MM-DD - YYYY-MM-DD HH:mm - ISO 8601 as mentioned in the moment documentation - Others following the ISO 8601 standard.This can also be populated using a moment object `{{ moment() }}` as well. |\n| Date Format        | The format of the date selected by the date picker.                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| Time Precision     | Decides whether a time is included within the Datepicker, and whether that time is to minute or second precision. With JS enabled, values may be \"None\", \"minute\", or \"second\".                                                                                                                                                                                                                                                                                                                                |\n| Required           | Sets whether the checkbox is a mandatory field. When the checkbox is within a Form widget, that Form's submit button will be automatically disabled until the Checkbox is checked.                                                                                                                                                                                                                                                                                                                             |\n| Visible            | Controls widget's visibility on the page. When turned off, the widget will not be visible when the app is published                                                                                                                                                                                                                                                                                                                                                                                            |\n| Disabled           | Disables input to the widget. The widget will remain visible to the user but user input will not be allowed.                                                                                                                                                                                                                                                                                                                                                                                                   |\n| Tooltip                             | It sets a tooltip for the widget. You can add hints or extra information about the required input from the user.    \n| Animate Loading    | When turned off, the widget will load without any skeletal animation. You can use a toggle switch to turn it on/off. You can also turn it off/on using javascript by enabling the JS label next to it.                                                                                                                                                                                                                                                                                                         |\n| Close On Selection | Sets whether the Datepicker menu will automatically close when the user clicks on a date.                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| Show Shortcuts     | Toggles an additional part of the Datepicker menu that allows the user to quickly select from options such as \"Today\", \"1 week ago\", etc.                                                                                                                                                                                                                                                                                                                                                                      |\n| Min Date           | Sets a minimum/earliest date allowed to be selected with the widget.                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| Max Date           | Sets a maximum/latest date allowed to be selected with the widget.                                                                                                                                                                                                                                                                                                                                                                                                                                             |\n| First Day Of Week  | Sets which day of the week appears first within the calendar of the Datepicker's menu. Accepts number values between 0 and 6.0 represents Sunday, 1 represents Monday, and so on.                                                                                                                                                                                                                                                                                                               |\n| Height        | It configures how a widget\u2019s height reacts to content changes. It has three possible configurations:Fixed: The height of the widget remains as set using drag and resize.Auto Height: The height of the widget reacts to content changes. Auto Height with limits: Same as Auto height, with a configurable option to set the minimum and maximum number of rows that can be occupied by the widget.                                      |\nBinding Properties\nThese properties allow you to bind your Datepicker widget with any other widget in queries or JS objects. The following table lists all the binding properties.\n| Binding Property  | Description                                                                                                                                                    |\n| ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| formattedDate | Contains the date value currently selected within the Datepicker widget. This value changes if the default value is updated or if the user inputs a new value. |\n| selectedDate  | This is the ISO date string selected in the Datepicker widget. This value changes if the default value is updated or if the user inputs a new value.           |\n| isDisabled    | Reflects the state of the widget's Disabled setting (bool).                                                                                              |\n| isVisible     | Reflects the state of the widget's Visible setting (bool).                                                                                               |\nEvents\nYou can define functions that will be called when these events are triggered in the widget.\n| Event              | Description                                                                                                                                                                                                                       |\n| ------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| onDateSelected | Sets an action to take place when a date is selected. Can be set from the GUI list of common actions (examples here), or you can define a custom JavaScript function to call instead. |\n| onFocus | Sets an action to take place when a datepicker is focused. Can be set from the GUI list of common actions (examples here), or you can define a custom JavaScript function to call instead. |\n| onBlur | Sets an action to take place when a datepicker loses focus. Can be set from the GUI list of common actions (examples here), or you can define a custom JavaScript function to call instead. |\nLabel\nThe property hosts a group of configurations that you can use to associate a display name and define a placement for the widget. These properties are usually useful when you want to design forms that follow a defined alignment for your form fields and give a professional look to your forms. Below are the properties that you can use:\n| Label         | Description                                                                                          |   |\n| ------------- | ---------------------------------------------------------------------------------------------------- | - |\n| Text      | Sets the label text of the widget.                                                                   |   |\n| Position  | Sets where the label appears relative to the widget's input area. Choose between Left, Top, or Auto. |   |\n| Alignment | Sets whether the label is left- or right-aligned.                                                    |   |\n| Width     | Sets the width of the label. The number represents how many characters/columns wide the label is.    |   |\n| Label Styles         | Description                                                                                                                          |   |\n| -------------------- | ------------------------------------------------------------------------------------------------------------------------------------ | - |\n| Text Color       | Sets the text color for the label. Accepts valid CSS color values.       |   |\n| Text Size        | Sets the size of the label font. Accepts valid CSS font-size values. |   |\n| Label Font Style | Toggles font styles (bold or italic).                                                                                          |   |\nText\nIt allows you to set the display name for the Datepicker. For example, if you want the user to select a date of joining, you can enter the text as \"Date of Joining.\"\n:::tip\nYou can leave the text empty if you don't want any display name for your Datepicker widget.\n:::\nPosition\nIt allows you to specify the placement of the label. You can select one of the available options:\n\nTop - It allows you to align the text at the top of the Datepicker.\nLeft - It aligns the text to the left of the Datepicker. When you select Left alignment, you get additional settings that you can use to control the alignment and define the text's width.\nAlignment - With the help of alignment, you can define the placement of the text in accordance with the position of the Datepicker. You can choose:\nLeft - It aligns the text to the widget's left boundary that is away from the Datepicker.\nRight - It aligns the text closer to the Datepicker.\n\n\nWidth - With the help of width, you can define the number of columns in the grid that surrounds the widget. You can specify how close or far the text can be placed to the Datepicker.\nAuto - It automatically adjusts the position of the text based on the Datepicker's height.\n\n:::info\nColumns are the dashed lines (-----) that surround a widget when you try to drag and drop it on the canvas.\n:::\n\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Style Property    | Description                                                                                                                                                                      |\n| ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Border Radius | Rounds the corners of the widget's outer edge. With JS enabled, this accepts valid CSS border-radius values. |\n| Box Shadow    | Casts a drop shadow from the frame of the widget. With JS enabled, this accepts valid CSS box-shadow values.    |\nMonth Picker\nTo select just a month rather than a particular date, you can convert the Select widget into a month picker. Drag a select widget to the canvas and enter the following snippet:\n`{{moment.months().map((v) => { return {label: v, value: v.toLowerCase()}})}}`\nYear Picker\nTo select just a year rather than a particular date or month, you can convert the Select widget into a year picker. Drag a select widget to the canvas and enter the following snippet:\n```\n{{ function()\n    { \n        let start_year = 1920; //change start year for year picker \n        let end_year = 2120; //change end year for year picker \n        let years = []; \n        for (let i = start_year;i<= end_year;i++)\n            { \n            let current_year_object = { \"label\":i.toString(), \"value\":i.toString()}\n            years.push(current_year_object) \n            } \n         return years; \n     }\n () }}",
    "tag": "appsmith"
  },
  {
    "title": "Modal",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/modal.md",
    "content": "Modal\nModal is a simple UI widget you can use when you want to create Dialogs, Popovers or Alerts.\n\nProperties\nProperties allow you to edit the Modal widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the Modal widget. All these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property            | Description                                                                 |\n| ------------------- | --------------------------------------------------------------------------- |\n| Scroll Contents | This property enables scrolling within the contents of the modal            |\n| Quick Dismiss   | Quickly dismisses or closes the Modal when the user taps outside the modal. |\n| Animate Loading | Allows you to control a widget\u2019s animation on the page load.                |\n| Height        | It configures how a widget\u2019s height reacts to content changes. It has three possible configurations:Fixed: The height of the widget remains as set using drag and resize.Auto Height: The height of the widget reacts to content changes. Auto Height with limits: Same as Auto height, with a configurable option to set the minimum and maximum number of rows that can be occupied by the widget.                                      |\nBinding Properties\nThese properties allow you to bind your Modal widget with any other widget in queries or JS objects.\n| Property      | Description                                                   |\n| ------------- | ------------------------------------------------------------- |\n| isOpen    | This property indicates whether the modal is open or not.     |\n| isVisible | This property indicates whether the widget is visible or not. |\nEvents\nThey are a set of actions that you can perform on the widget. The following table lists the actions:\n| Events      | Description                                                                                                                       |\n| ----------- | --------------------------------------------------------------------------------------------------------------------------------- |\n| onClose | This event triggers an action when the modal is closed. See a list of supported actions. |\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Styles               | Description                              |\n| -------------------- | ---------------------------------------- |\n| Background color | Sets the background color of the widget. |\n| Border Radius    | Allows you to define curved corners.     |\nReopening Created Modals\nSelecting the created modal listed in the Entity Explorer will open it in Edit mode.\n\nOpening Modals via Widgets",
    "tag": "appsmith"
  },
  {
    "title": "Container",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/container.md",
    "content": "Container\nWhen you organize your cupboard or home, you want to pack stuff in boxes and name them. Similarly, you can use a container widget to hold the widgets. A container widget serves as a logical group of related widgets. It gives your page a distinctive layout.\n\nYou can use a container widget to create rich UI by managing the design of each container differently. You can use different containers to segregate the components and define a logical separation.\nAdd to Canvas\nTo add a container widget to your canvas, drag a container widget from a widget pane available on the left navigation bar.\nNavigate to PAGES \u2014> Select Widget Tab \u2014> Write \"container\u201d in the search bar \u2014> Drag the widget on the canvas.\n:::tip\nYou can move the container widget along with the widgets embedded into it and position it on the screen according to your convenience. A container widget ensures that the layout of child widgets is intact and not disrupted.\n:::\nComponents\nA container widget stores one or more widgets and serves as a logical group defining a functionality. It can include any number of components based on your requirement.\nFor example, you have an app for a movie library that provides movie listing and search functionality. If you want to design this app, it will be easy to segregate your page into containers.\n\n\nParent Container - Drag a container widget on the canvas that takes care of the main layout.\nSearch Container - Add another container widget to the parent container. It serves as a search bar.\nInput box to capture the search term provided by the user.\nSearch button that triggers the search action.\nMovie Listing Container - Add one more container widget to the parent container. It takes care of the movie listing.\nThe table widget allows you to display the movie listing.\n\n:::info\nYou can create a hierarchy of containers and have one or more widgets embedded into it, including another container widget.\n:::\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the Container widget. All of these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property            | Description                                                                                                                                                                                            |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Visible         | Controls widget's visibility on the page. When turned off: The widget will not be visible when the app is published. It appears translucent when in Edit mode.  |\n| Animate Loading | When turned off, the widget will load without any skeletal animation. You can use a toggle switch to turn it on/off. You can also turn it off/on using javascript by enabling the JS label next to it. |\n| Scroll Contents | Enables scrolling in this widget when its contents are larger than its dimensions.  |\n| Height        | It configures how a widget\u2019s height reacts to content changes. It has three possible configurations:Fixed: The height of the widget remains as set using drag and resize.Auto Height: The height of the widget reacts to content changes. Auto Height with limits: Same as Auto height, with a configurable option to set the minimum and maximum number of rows that can be occupied by the widget.                                      |\nName of Widget\nAs soon as you select the widget, you can see an editable box available on top of the properties pane. You can use the default name supplied in the box or provide a meaningful name to the widget. You\u2019ll also see the default naming convention follows the pattern WidgetType followed by a number like `Container1`. The `number``{1}` is a running sequence and increments if you add more widgets of the same type, provided you have not given a unique name to your widget. For example, if you add two more container widgets to the canvas, then the default names for these widgets would be `Container``1``, Container``2``, and Container``3`.\n:::info\nIt\u2019s advisable to rename the widget to give some meaningful name. It makes it easy to pass parameters by using the widget name to the APIs or queries.\n:::\nVisible\nYou can use Visible to show or hide the widget. By default, visible is toggled on that's enabled, so the widget is visible on page load. This property particularly comes in handy when you want to hide/show a widget programmatically or hide a widget on page load and then show it when a particular condition or data is available.\n:::info\nWhen you set the visible property of a container widget to false, it\u2019ll hide the container widget and the child widgets embedded into the container. It's helpful to use the container widget\u2019s visible property instead of iterating and hiding each widget in a container.\n:::\nThere are two ways in which you can manipulate this property.\n\nEnable the JS label next to Visible and write the JavaScript code that can handle the show and hide of the widget by manipulating visible property.\nWrite your own JS object and JavaScript code to link to any other widget and manage the show/hide.\n\n:::tip\nYou can get the reference of visible property by using `{{widget_name.isVisible}}` in your code.\n:::\nFor example, let\u2019s drag a checkbox widget Checkbox1 onto the canvas. Rename the checkbox to ShowHideParentContainer and bind it to the Visible property of the container widget by enabling the JS label next to it. Add the following JavaScript code in the Visible property.\n`{{ShowHideParentContainer.isChecked}}`\nWhen you check the checkbox, it will enable the Visible property and shows the container widget and all its child. Whereas the uncheck on the checkbox will hide the widget and its child.\n\nScroll Contents\nWhen you want to embed a container with multiple widgets and save space, you can enable scroll contents by toggling it on. The scroll contents property enables a scroll bar to scroll the contents within a container.\nBinding Properties\nThese properties allow you to bind your Container widget with any other widget in queries or JS objects. The following table lists all the binding properties.\n| Binding Property    | Description                                                                                                                                       |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |\n| backgroundColor | Represents the widget's Background Color setting as a CSS color value (string). |\n| isVisible       | Reflects the state of the widget's Visible setting (bool).                                                                                  |\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Style Property       | Description                                                                                                                                                                      |\n| -------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Background Color | Sets the background color of the widget. Accepts  CSS color values.                                                  |\n| Border Color     | Sets the border color of the widget. Accepts  CSS color values.                                                      |\n| Border Width     | Sets the width of the widget's border. Accepts number values only, in px.                                                                                                      |\n| Border Radius    | Rounds the corners of the widget's outer edge. With JS enabled, this accepts valid CSS border-radius values. |",
    "tag": "appsmith"
  },
  {
    "title": "Form",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/form.md",
    "content": "Form\nA Form is the most widely used way of capturing a user\u2019s digital or handwritten information. Keeping this in mind, Appsmith provides a form widget that caters to all your needs to capture the user input and wire it to a database query or an API.\nForm widget serves as a parent widget that can store different widgets like texts to display what information to capture, an input box to capture the desired input from the user, a dropdown to allow selection, and many more. From building a user registration to a complex checkout or payment app, you can easily design the forms that best suit your business requirement with all these widgets at your disposal.\n\nAdd to Canvas\nTo add a form widget to your canvas, drag a form widget from a widget pane available on the left navigation bar.\nNavigate to PAGES \u2014> Select Widget Tab \u2014> Write Form in the search bar \u2014> Drag the widget on the canvas.\n\n:::tip\nYou can move the form widget along with the widgets embedded into it and position them on the screen according to your convenience.\n:::\nComponents\nA form widget stores one or more widgets to define a logical group for capturing information. Depending on the needs, the widget can store any number of widgets.\n:::tip\nYou can create a hierarchy of forms and have one or more form widgets embedded into it.\n:::\nOnce you drag a form widget on the canvas, you can see a text widget and two buttons by default embedded into it. You can add more widgets based on your requirements.\n\nTo add more widgets to your form, navigate to the left bar under PAGES, click on the Widget tab, and search for a widget like Text. Drag the widget on the form widget to embed it.\nEmployee Directory\nThere are a lot of use cases that you can build using a form widget like user registration, checkout, and so on. Let\u2019s take an example to build a search function for an employee directory. The search will look into the employee directory and filter the records based on the given search term. If you do not supply a search term, you can display all employees.\nSearch Employee Directory\nTo build this app, you can use a form widget to trigger the search with an input widget to capture the search term, embedded form buttons to trigger the search, reset the search term, and a table widget to display the search result.\n\nForm Button\nBy default, the form widget provides two buttons: Reset and Submit, which help reset the form fields to their original values or save the data by calling an API/Query. The form buttons have the same set of functionality as available for the button widget. This section will focus on the specific attributes that the reset and submit buttons have as embedded widgets in the form.\nReset Button\nThe form button with the name \u201cReset\u201d allows users to reset the form fields to their original values. Say you are building a search app and displaying search results based on the search term provided by the user. You can use the reset button to clear the search term instead of manually clearing the search term field.\nReset Form on Success\nIn the properties pane, for the reset button where you can see the property - Reset Form on Success that is on by default. This property lets you clear the form fields whenever you click the reset button.\n:::info\nYou can use the onClick property in conjunction with the reset form on success. For example, you are recording user actions on your app. You can use the onClick event to track the operation, and the reset form on success can clear the form fields.\n:::\nSubmit Button\nThe form button with the name \u201cSubmit\u201d allows you to add an action to capture the inputs provided by the user and then process it to generate results. In our search app, rename it to Search, and it captures the search term provided by the user. You can then bind a call to an API or a query to store/display the data.\nDisabled Invalid Forms\nIf you have mandatory fields in your form, say the search term, you can see a grayed-out submit button until the user supplies the search term. The platform provides this as an out-of-the-box functionality, and you don\u2019t have to add any additional code to achieve it. By default, the property is on, and you can toggle it off if you would like to disable it. You would want to disable the property, say you have a small data set for search and would want to fetch all the results if the user provides no search term. You can turn off the Disabled Invalid Forms property, and the submit button will be enabled on the form and perform the onClick action.\nReset Form on Success**\nThe property is on for a submit form button, and it clears the fields after the successful execution of an onClick event. You can turn it off if you would like to restore the values. For example, you would like to preserve the search term supplied by the user on the screen even after you fetch the search results. You can achieve this by turning off the property.\nDisplay Search Results\nNow that the search is in place, you can use the table widget to bind the query's response and display the results, as shown in the video. You can do a lot of manipulation in data in a table widget, like hiding some columns, format column values, and more. Read more on how to use the table widget to structure your data.\n\nYou saw that your form is a logical group of widgets that allows you to capture user-related information and perform an operation like a search.\n:::info\nYou can embed a lot of widgets into the form. Typically, all the widgets that can capture user input are eligible for embedding like input, checkbox, datepicker, select, etc.\n::: \nProperties\nThe widget properties allow you to enhance the look and feel of a form widget and personalize the same as per your needs. You can find the properties pane on the right side of the canvas.\n:::info\nEnsure that you select the widget to access its properties on the right bar.\n:::\nThe properties pane follows the same structure for almost all the widgets and includes or excludes properties not specific to the selected widget.\n| Property         | Description                                                           | Type   | Example                                                                                                                                                                                     | Code Snippet             |\n| -------------------- | ------------------------------------------------------------------------- | ---------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------- |\n| Name             | Allows you to provide a unique name to the widget                         | Formatting | In the example above for capturing the Job applicant\u2019s information app. We named a form widget SearchTermForm.                                                                              |                              |\n| Visible          | Allows you to show/hide a widget.                                         | Binding    | You can either use a toggle or code to turn it off/on.                                                                                                                                          | `{{widget_name.isVisible}}`  |\n| Animate Loading  | Allows you to control a widget\u2019s animation on the page load.              | Formatting | You can use a toggle to turn it on/off. When turned off, the widget will load without any skeletal animation. You can also turn it off/on using javascript by enabling the JS label next to it. |                              |\n| Scroll Contents  | Allows you to enable a scroll bar to scroll the contents.                 | Formatting | You can use a toggle to turn it on/off. Turning it on gives you the flexibility to embed more widgets in a small space.                                                                         |                              |\n| Background Color | Allows you to set the background color of the widget.                     | Formatting | You can select the color from the pallet or use an HTML Color Code.                                                                                                                             |                              |\n| Border Color     | Allows you to set a color for displaying the form's border.               | Formatting | You can select the color from the pallet or use an HTML Color Code.                                                                                                                             |                              |\n| Border Width     | Allows you to define the thickness of the border.                         | Formatting | You can supply a higher number for a thick border.                                                                                                                                              |                              |\n| Border Radius    | Allows you to define curved corners.                                      | Formatting | You can supply a higher number for a profound curve.                                                                                                                                            |                              |\n| Box Shadow       | Allows you to choose from the available shadow styles.                    | Formatting | You can choose one of the available shadow styles for the widget.                                                                                                                               |                              |\n| Shadow Color     | Allows you to set the color of the shadow.                                | Formatting | You can choose the color from the pallet or supply an HTML Color Code.                                                                                                                          |                              |\n| hasChanges       | It helps you to know if the form has been changed by the application user | Binding    | You can use the property to verify if any fields in the form have been changed.                                                                                                                 | `{{widget_name.hasChanges}}` |\n| data             | Allows you to access the data of embedded widgets.                        | Binding    | You can use the property to access the widget data.                                                                                                                                             | `{{widget_name.data}}`       |\n| Height            | It configures how a widget\u2019s height reacts to content changes. It has three possible configurations:Fixed: The height of the widget remains as set using drag and resize.Auto Height: The height of the widget reacts to content changes. Auto Height with limits: Same as Auto height, with a configurable option to set the minimum and maximum number of rows that can be occupied by the widget.                                      | Formatting    | You can use the property to access the widget data.                                                                                                                                             |       |\nGeneral\nYou can choose the properties under this head to name, show/hide, enable scrolling or animate the loading of the widget.\nLet\u2019s deep dive into the properties available under this head.\nName of Widget\nAs soon as you select the widget, you can see an editable box available on top of the properties pane. You can use the default name supplied in the box or provide a meaningful name to the widget. You\u2019ll also see the default naming convention follows the pattern WidgetType followed by a number. For example, `Form1`. The `number``{1}` is a running sequence and increments if you add more widgets of the same type, provided you have not given a unique name to your widget. For example, if you add two more form widgets to the canvas, then the default names for these widgets would be `Form1`, `Form2`, and `Form3`.\n:::tip\nIt\u2019s advisable to rename the widget to give some meaningful name. It makes it easy to pass parameters by using the widget name to the APIs or queries.\n:::\nVisible\nYou can use `Visible` to show or hide the widget. By default, `Visible` is toggled on that is enabled, so the widget is visible on page load. This property particularly comes in handy when you want to hide/show a widget programmatically or hide a widget on page load and then show it when a particular condition or data is available.\n:::info\nWhen you set the visible property of a form widget to false, it\u2019ll hide the form widget and the child widgets embedded into the form. It's useful to use the form widget\u2019s visible property instead of iterating and hiding each widget in a form.\n:::\nThere are two ways in which you can manipulate this property.\n\nEnable the JS label next to `Visible` and write the JavaScript code to control the widget's visibility.\nWrite your own JS object and JavaScript code to link to any other widget and manage the show/hide.\n\n:::tip\nYou can get the reference of visible property by using `{{widget_name.isVisible}}` in your code.\n:::\nFor example, let\u2019s drag a checkbox widget `Checkbox1` onto the canvas. Rename the checkbox to `ShowHideForm` and bind it to the Visible property of the form widget by enabling the JS label next to it. Add the following JavaScript code in the Visible property.\n`{{ShowHideForm.isChecked}}`\nWhen you check the checkbox, it will enable the Visible property and show the form widget and all its children. Whereas the uncheck on the checkbox will hide the widget and its children.\n\nScroll Contents\nYou can enable scroll contents em on when you want to embed multiple widgets. The scroll contents property enables a scroll bar to scroll the contents within a form.\nhasChanges\nWhenever the application is loaded the `hasChanges` property is set to false. Whenever the application user changes the values of the widgets embedded in the form, Appsmith sets the property `hasChanges` to true. You can use this property to verify if the fields are modified and can prompt the users with a confirmation message to save or discard the changes.\n\n`export default {\n    checkDataChanges: () => {\n        //checks if the form has changed.\n        if (EmployeeForm.hasChanges) {\n           showAlert(\"You have unsaved changes on the form. Please save to proceed.\");\n           return false;\n        }       \n    }\n}`\nYou can see that the `hasChanges` value can be read into the code, and the user can be prompted to save the data.\ndata\nYou can use the property data to access the values of embedded widgets in the form. For example, you have added an input widget with the name `FirstName` to form `EmployeeForm`. You can access the value provided by the user in the FirstName field by using the code snippet:\n`EmployeeForm.data.FirstName;`\n\nStyles\nChoose properties under this head to change the look and feel of the form. You can choose a background color, border color, width, and radius.\nLet\u2019s deep dive into the properties to enhance the look of your form widget.\nBackground Color\nYou can use the property background color to set the widget\u2019s background. You can select the available colors from the color pallet to change the background color. You can also use HTML color codes to change the background.\nBorder Color\nYou can use the property border-color to set the widget\u2019s border color. You can select the colors from the color pallet or supply HTML color codes to set the border color.\nBorder Width\nIt\u2019s often required to set a profound separation between UI elements, and then, you can use border width. Border width allows you to set how thick or thin the border is.\n:::tip\nYou can supply a higher number to have a thick border. However, a smaller number will result in a thin border.\n:::\nBorder Radius\nTo beautify the form widget, you might want rounded or curved corners. You can achieve this by setting a border-radius for the widget.\n:::info\nThe higher the number more profound are the curved corners.\n::: \nBox Shadow\nYou can use the box-shadow property to attach one or more shadows to the widget. That is, it adds a shadow effect to your widget. You can select one out of the popular available options for a shadow effect.\nShadow Color\nYou can choose from the popular color options to add a color effect to the widget shadow.",
    "tag": "appsmith"
  },
  {
    "title": "Camera",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/camera.md",
    "content": "Camera\nThe camera widget powers users to capture images and videos from their applications and share the data for further use.\nProperties\nProperties allow you to edit the camera widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the Camera widget. All of these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property     | Description                                                                                                                                                    |\n| ------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Mode     | Toggle between Image and Video modes.                                                                                                                          |\n| Visible  | Controls widget's visibility on the page. When turned off: The widget will not be visible when the app is published. It appears translucent when in Edit mode. |\n| Disabled | Makes the widget un-clickable or unusable. The widget will remain visible to the user but user interaction will not be allowed.                                |\n| Mirrored | Mirrors the image being captured, toggled on by default. Only available for image capture.                                                                     |\nBinding Properties\nThese properties allow you to bind your camera widget with any other widget in queries or JS objects. The following table lists all the binding properties.\n| Binding Property  | Description                                                                | Snippet                                    |\n| ------------------ | -------------------------------------------------------------------------- | ------------------------------------------ |\n| imageBlobURL   | Blob URL of the image to store the image for future use.                   | `{{<camerawidget_name>.imageBlobURL}}`     |\n| imageDataURL   | Data URL format of the image to embed it inline in different applications. | `{{<camerawidget_name>.`imageDataURL`}}`   |\n| imageRawBinary | Binary file format of the image to store the image for future use.         | `{{<camerawidget_name>.`imageRawBinary`}}` |\n| videoBlobURL   | Blob URL of the video to store the image for future use.                   | `{{<camerawidget_name>.`videoBlobURL`}}`   |\n| videoDataURL   | Data URL format of the video to embed it inline in different applications. | `{{<camerawidget_name>.`videoDataURL`}}`   |\n| videoRawBinary | Binary file format of the image to store the image for future use.         | `{{<camerawidget_name>.`videoRawBinary`}}` |\nEvents\n| Event           | Description                                                                                                                                                                                                                                            |\n| --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| onImageSave | Sets an action to take place when the user saves an image. Can be set from the GUI list of common actions (See a list of supported actions.), or you can define a custom JavaScript function to call instead. |",
    "tag": "appsmith"
  },
  {
    "title": "Image",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/image.md",
    "content": "Image\nYou can add images in the form of URLs or base64 strings. The Image widget supports popular formats such as JPG, PNG, SVG, WebP and GIF.\n\nDisplay static images\nYou can specify the image source using the Image property to display an image. The Image property can accept a URL, a data URI, or a base64 encoded image data as its input. For example, you can add this URL in the image property:\n`js\nhttps://jpeg.org/images/jpegsystems-home.jpg`\nYou can also set an image in the Default Image  property to be displayed if the image source fails to load or is invalid. \nInline SVG\nTo display inline SVG, paste your SVG content in the Image property and escape the special characters with the UTF-8 equivalents.\n`js\ndata:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100'%3E%3Ccircle cx='50' cy='50' r='40' stroke='green' stroke-width='4' fill='yellow' /%3E%3C/svg%3E`\nDisplay images dynamically\nFetch data from an API or query a data source. This allows you to display images that change based on user input or other components, such as a widget or query.\nYou can dynamically populate an image based on another widget. For example, suppose you have a Table displaying a list of users with their respective image URLs stored in a column.\nBind `{{Table1.selectedRow.image}}` in the Image property where \"Table1\" is the name of your table widget and \"image\" is the name of the column containing the image URL.\n\n\nDisplay images on table row selection\n\nAccess images\nTo access the data in an Image widget, use the `image` reference property in your JS code or queries as shown below.\n`js\n{{Image1.image}}`\nThis displays the image corresponding to the URL/Base64 specified in the Image property.\nDisplay images from S3 bucket\nTo fetch an image from S3, follow these steps:\n\nClick the + icon next to Queries/JS and choose your S3 datasource.\nSelect the \"Read file\" method from the Commands drop-down menu.\nProvide the required parameters for reading the file, including the bucket name, file path and file data type.\n\nOnce you have added all the required parameters in the Image property pane, add:\n`js\n{{<your_query_name>.data.fileData}}`\nDownload images\nYou can toggle the Enable Download property in the Image widget's property pane. Once enabled, a download icon appears on the image.\n\n\nDownload image\n\nAlternatively, you can use the built-in Download function and set it to run on the `onClick` event of the Image widget:\n`js\n{{download(Image1.image,'my-image-name','image/png')}}`\nProperties\nProperties allow you to customize the widget, connect it to other widgets and trigger events on user actions.\nWidget properties\n| Property            | Description                                                                                                                                                                                                                                                   |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Image           | Sets the source from which to render the image. Accepts an image URL, data URI, or base64 encoded image data.                                                                                                                                                 |\n| Default Image   | Sets a default image that would be displayed if no image is rendered via the Image property. Accepts an image URL, data URI, or base64 encoded image data.                                                                                                 |\n| Object Fit      | Sets how the image should be resized to fit its container. With JS enabled, accepts string values `auto`, `cover`, or `contain`. See CSS object-fit docs for reference on these behaviors. |\n| Max Zoom Level  | Sets the maximum allowable zoom level for the image view. With JS enabled, accepts number values.                                                                                                                                                           |\n| Visible         | Controls widget's visibility on the page. When turned off, the widget won't be visible when the app is published.  |\n| Animate Loading | Controls the widget\u2019s animation on page load.                          |\n| Enable Rotation | Toggles a control on the widget that allows the user to rotate the image.                                                                                                                                                                                     |\n| Enable Download | Toggles a control on the widget that allows the user to download the image.                                                                                                                                                                                   |\nReference properties\nThese properties can be referenced in other widgets, queries, or JS functions using the dot operator.\nProperty | Description                                                      |\n| ---------------- | ---------------------------------------------------------------- |\n| image        | Contains the URL of the image source (string).                 |\n| isVisible    | Reflects the state of the widget's Visible setting |\nStyle properties\nStyle properties allow you to change the look and feel of the widget.\n| Property    | Description                                                                                                                                                                      |\n| ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Border Radius | Rounds the corners of the widget's outer edge. With JS enabled, this accepts valid CSS border-radius values. |\n| Box Shadow    | Casts a drop shadow from the frame of the widget. With JS enabled, this accepts valid CSS box-shadow values.    |\nEvents\nThese are functions that are called when event listeners are triggered in the widget. Use actions to execute tasks based on user events.\n| Event       | Description                                                                                                                                                                                                                     |\n| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| onClick | Sets an action when the user clicks this widget. |\nFurther reading\n\nCamera widget\nFilepicker widget\n",
    "tag": "appsmith"
  },
  {
    "title": "Video",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/video.md",
    "content": "Video\nA widget for playing a variety of URLs, including file paths, YouTube, Facebook, Twitch, SoundCloud, Streamable, Vimeo, Wistia, Mixcloud, and DailyMotion.\n\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the video widget. All these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property            | Description                                                                                                          |\n| ------------------- | -------------------------------------------------------------------------------------------------------------------- |\n| URL             | Renders the video from the URL.                                                                                      |\n| Autoplay        | Plays video automatically, without action from a user.                                                               |\n| Visible         | Controls widget's visibility on the page. When turned off, the widget isn't visible when the app is published. |\n| Animate Loading | Allows you to control a widget\u2019s animation on the page load.                                                         |\nBinding Properties\nThese properties help you share values between widgets and also allow you to easily access the widget property within Queries or JS functions.\n| Property      | Description                                                              | Code Snippet          |\n| ------------- | ------------------------------------------------------------------------ | --------------------- |\n| autoPlay  | This parameter indicates whether the auto play feature is enabled. | `{{Video.autoPlay}}`  |\n| playState | This field shows whether a video is currently playing.            | `{{Video.playState}}` |\nEvents\nThey're a set of actions that you can perform on the widget. The following table lists the actions:\n| Events      | Description                                                                                                                |\n| ----------- | -------------------------------------------------------------------------------------------------------------------------- |\n| onPlay  | Sets the action to be run when the video plays. See a list of supported actions.  |\n| onPause | Sets the action to be run when the video pauses. See a list of supported actions. |\n| onEnd   | Sets the action to be run when the video ends. See a list of supported actions.   |\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Style                | Description                                            |\n| -------------------- | ------------------------------------------------------ |\n| Background color | Sets the widget's background color.                    |\n| Border Radius    | Allows you to define curved corners.                   |",
    "tag": "appsmith"
  },
  {
    "title": "Stat Box",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/stat-box.md",
    "content": "Stat Box\nStatbox widget shows and highlights essential statistics related to the application. The widget comes pre-built with a default layout which can change as per application requirements\n\nStat box Widgets\nStatbox widgets are a class of widgets used to show application information. Following are the stat box widgets Appsmith supports -\n\nIcon Button\nText\n\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the widget. All these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property            | Description                                                  |\n| ------------------- | ------------------------------------------------------------ |\n| Visible         | Controls the visibility of the widget.                       |\n| Animate Loading | Allows you to control a widget\u2019s animation on the page load. |\n| Scroll Contents | Enables scrolling for content inside the widget.             |\n| Height        | It configures how a widget\u2019s height reacts to content changes. It has three possible configurations:Fixed: The height of the widget remains as set using drag and resize.Auto Height: The height of the widget reacts to content changes. Auto Height with limits: Same as Auto height, with a configurable option to set the minimum and maximum number of rows that can be occupied by the widget.                                      |\nBinding Properties\nThese properties help you share values between widgets and also allow you to easily access the widget property within Queries or JS functions.\n| Property      | Description                                                   | Code Snippet             |\n| ------------- | ------------------------------------------------------------- | ------------------------ |\n| isVisible | This property indicates whether the widget is visible or not. | `{{Statbox1.isVisible}}` |\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Property            | Description                                                                                |\n| ------------------- | ------------------------------------------------------------------------------------------ |\n| backgroundColor | Control Statbox container background color.                                                |\n| Border Color    | Controls the color of the border, you can use an HTML color name, HEX, RGB, or RGBA value. |\n| Border Width    | Sets the value for border width.                                                           |\n| Border Radius   | Allows you to define curved corners.                                                       |",
    "tag": "appsmith"
  },
  {
    "title": "Checkbox Group",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/checkbox-group.md",
    "content": "Checkbox Group\nCheckbox group widget allows users to configure multiple checkboxes together.\n\nProperties\n| Property                    | Description                                                                                                                                               |\n| --------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| options                 | Sets a list of options for a user to select. Values must be unique.                                                                                       |\n| Default Selected Values | Sets values of the options checked by default.                                                                                                            |\n| Label                   | It is a group of properties that allows you to provide a name to the field and define the placement of the widget. Learn more. |\n| Inline                  | Whether the checkbox buttons are to be displayed inline horizontally.                                                                                     |\n| Required                | Makes input to the widget mandatory.                                                                                                                      |\n| Visible                 | Controls the visibility of the widget.                                                                                                                    |\n| Select All Options      | Controls whether select all control is shown.                                                                                                             |\n| Disabled                | Disables input to this widget.                                                                                                                            |\n| Height        | It configures how a widget\u2019s height reacts to content changes. It has three possible configurations:Fixed: The height of the widget remains as set using drag and resize.Auto Height: The height of the widget reacts to content changes. Auto Height with limits: Same as Auto height, with a configurable option to set the minimum and maximum number of rows that can be occupied by the widget.                                      |\nLabel\nThe property hosts a group of configurations that you can use to associate a display name and define a placement for the widget. These properties are usually useful when you want to design forms that follow a defined alignment for your form fields and give a professional look to your forms. Below are the properties that you can use:\nText\nIt allows you to set the display name for the Checkbox Group. For example, if you want the user to give their consent to the terms & conditions, you can enter the text as \"Terms & Conditions.\"\n:::tip\nYou can leave the text empty if you don't want any display name for your Checkbox Group widget.\n:::\nPosition\nIt allows you to specify the placement of the label. You can select one of the available options:\n\nTop - It allows you to align the text at the top of the Checkbox Group.\nLeft - It aligns the text to the left of the Checkbox Group. When you select Left alignment, you get additional settings that you can use to control the alignment and define the text's width.\nAlignment - With the help of alignment, you can define the placement of the text in accordance with the position of the Checkbox Group. You can choose:\nLeft - It aligns the text to the widget's left boundary that is away from the Checkbox Group.\nRight - It aligns the text closer to the Checkbox Group.\n\n\nWidth - With the help of width, you can define the number of columns in the grid that surrounds the widget. You can specify how close or far the text can be placed to the Checkbox Group.\nAuto - It automatically adjusts the position of the text based on the Checkbox Group's height.\n\n:::info\nColumns are the dashed lines (-----) that surround a widget when you try to drag and drop it on the canvas.\n:::\n\nActions\n| Action                | Description                                                                                                                          |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------ |",
    "tag": "appsmith"
  },
  {
    "title": "Rich Text Editor",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/rich-text-editor.md",
    "content": "Rich Text Editor\nThe Rich Text Editor is used to capture Rich Text input from a user. The input is captured in HTML format.\n\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the Rich text Editor widget. All these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property            | Description                                                                                                         |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------- |\n| Input Type      | Sets the input type of the default text property in the widget.                                                     |\n| Default Text    | This property sets the default text of the Rich Text Editor.                                                        |\n| Required        | Makes input to the widget mandatory.                                                                                |\n| Visible         | Controls widget's visibility on the page. When turned off, the widget will not be visible when the app is published |\n| Disable         | Disables input to the widget. The widget will remain visible to the user but a user input will not be allowed.      |\n| Animate Loading | Controls the loading of the widget.                                                                                 |\n| Hide toolbar    | Controls the visibility of the toolbar                                                                              |\n| Height        | It configures how a widget\u2019s height reacts to content changes. It has three possible configurations:Fixed: The height of the widget remains as set using drag and resize.Auto Height: The height of the widget reacts to content changes. Auto Height with limits: Same as Auto height, with a configurable option to set the minimum and maximum number of rows that can be occupied by the widget.                                      |\nLet's understand the widget properties in detail:\nInput Type\nAs the name suggests, input type allows you to set the type of text you want in the input box, HTML, or Markdown format. It sets the input type of the default text property in the widget.\nThe input box will show an error if the entered data does not match the input type. For example, If you select the input type as HTML, you won't be able to display Markdown text.\nDefault text\nThis property lets you set a default value for the widget before the user has made any changes.\nOnce you have selected an input type, you can add markdown/HTML text in the default text section. For example, if you want to use the markdown input type. You can either use the default text property or use an input widget to display the text. The video below demonstrates how to use the markdown input type.\n\n```\nMarkdown: \nMarkdown\nonly works in Markdown RTE\n\nHTML: \n HTML\n\nHTML works in both RTEs\n\n\nItem 1\n    \nSub-item 1\nSub-item 2\n\n\n```\n\n\n\n### Binding Properties\n\nThese properties help you share values between widgets and also allow you to easily access the widget property within Queries or JS functions.\n\n| Property       | Description                                                    | Code Snippet                     |\n| -------------- | -------------------------------------------------------------- | -------------------------------- |\n| **isDisabled** | This property indicates whether the widget is disabled or not. | `{{RichTextEditor1.isDisabled}}` |\n| **isVisible**  | This property indicates whether the widget is visible or not.  | `{{RichTextEditor1.isVisible}}`  |\n| **text**       | It fetches the value that the user has entered.                | `{{RichTextEditor1.text}}`       |\n\n### Events\n\nThey are a set of actions that you can perform on the widget.\n\n| Events           | Description                                                                                                                   |  \n| ---------------- | ----------------------------------------------------------------------------------------------------------------------------- | \n| **onTextChange** | Sets the action to be run when the user inputs text. See a list of [supported actions](../appsmith-framework/widget-actions/) |  \n\n### Label\n\nThe property hosts a group of configurations that you can use to associate a display name and define a placement for the widget. These properties are usually useful when you want to design forms that follow a defined alignment for your form fields and give a professional look to your forms. Below are the properties that you can use:\n\n| Label                | Description                                                  |\n| -------------------- | ------------------------------------------------------------ |\n| **Text**             | Sets the label text of the widget.                           |\n| **Position**         | Sets the label position of the widget.                       |\n| **Alignment**        | Sets the label alignment of the widget.                      |\n| **Width**            | Sets the label width of the widget as the number of columns. |\n| **Label Text Color** | Allows you to set text color for the label.                  |\n| **Label Text Size**  | Allows you to set the size of the label.                     |\n| **Label Font Style** | Allows you to choose a font style, i.e., bold or italic.     |\n\n#### **Text**\n\nIt allows you to set the display name for the Rich Text Editor. For example, if you want the user to write a cover letter, you can enter the text as \"Cover Letter.\"\n\n:::tip\nYou can leave the text empty if you don't want any display name for your Rich Text Editor widget.\n:::\n\n#### Position\n\nIt allows you to specify the placement of the label. You can select one of the available options:\n\n* Top - It allows you to align the text at the top of the Rich Text Editor.\n* Left - It aligns the text to the left of the Rich Text Editor. When you select **Left** alignment, you get additional settings that you can use to control the alignment and define the text's width.\n  * Alignment - With the help of alignment, you can define the placement of the text in accordance with the position of the Rich Text Editor. You can choose:\n    * Left - It aligns the text to the widget's left boundary that is away from the Rich Text Editor.\n    * Right - It aligns the text closer to the Rich Text Editor.\n  * Width - With the help of width, you can define the **number of columns** in the **grid** that surrounds the widget. You can specify how close or far the text can be placed to the Rich Text Editor.\n* Auto - It automatically adjusts the position of the text based on the Rich Text Editor's height.\n\n:::info\nColumns are the dashed lines (-----) that surround a widget when you try to drag and drop it on the canvas.\n:::\n\nHow to set the label properties?\n{% endembed %}\n\n\n### Styles\n\nStyle properties allow you to change the look and feel of the widget. \n\n| Style             | Description                                            |\n| ----------------- | ------------------------------------------------------ |\n| **Border Radius** | Allows you to define curved corners.                   |\n| **Box Shadow**    | Allows you to choose from the available shadow styles. |",
    "tag": "appsmith"
  },
  {
    "title": "Phone Input",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/phone-input.md",
    "content": "Phone Input\nThe phone input widget gives you an input field to capture a phone number as an input.\n\nProperties\nProperties allow you to edit the phone widget, connect it with other widgets and customize the user actions. Let's look into different types of properties.\nWidget Properties\nThese properties allow you to edit the phone widget. All these properties are present in the property pane of the widget. Given below is a table of widget properties.\n| Widget Property               | Description                                                                                                                                            |\n| ----------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Allow country code change | It enables/disables the dial code dropdown next to the input. If you enable this property, the User will change the dial code from the dropdown.       |\n| Default country code      | It sets the default dial code of the widget                                                                                                            |\n| Default text              | Sets the default text in the input widget before the user has made any changes. This field can be bound to a table's `selectedRow` to update a record. |\n| Enable formatting         | When turned on, the phone number typed into the input gets formatted based on the selected country code.                                               |\n| Regex                     | It is used to add custom validations you want to perform on user input.                                                                                |\n| Valid                     | It lets you define the validity of the input using a JS expression.                                                                                    |\n| Error message             | Sets the text of the error message to display if Regex validation fails.                                                                               |\n| Placeholder               | It sets a placeholder text inside the input. It displays an expected input or hints to the user.                                                       |\n| Tooltip                   | It sets a tooltip for the widget. You can add hints or extra information about the required input from the user.                                       |\n| Required                  | When turned on, user input is required and disables any form submission until the user enters something in the input box.                              |\n| Visible                   | It controls the widget's visibility on the page. When turned off, the widget will not be visible when the app is published                             |\n| Disabled                  | It disables input to the widget. The widget will remain visible to the user, but user input will not be allowed.                                       |\n| Reset on Submit           | It clears the value entered by the user after submitting.                                                                                              |\n| Autofocus                 | It focuses your cursor on the input box when it is loaded.                                                                                             |\n| Animate Loading           | Allows you to control a widget\u2019s animation on the page load.                                                                                           |\n| Height        | It configures how a widget\u2019s height reacts to content changes. It has three possible configurations:Fixed: The height of the widget remains as set using drag and resize.Auto Height: The height of the widget reacts to content changes. Auto Height with limits: Same as Auto height, with a configurable option to set the minimum and maximum number of rows that can be occupied by the widget.                                      |\nLet's understand the widget properties in detail.\nAllow Country Code Change\nIt enables/disables the dial code dropdown next to the input box. If you enable this property, the user can change the dial code from the dropdown.\n\nTooltip\nIt sets a tooltip for the widget. You can add hints or extra information about the required input from the user. The tooltip appears as \"?\" on the left of the input field.\n\nPlaceholder\nYou can set a proxy text/value inside the input box using the placeholder property. It can be any message or hint for the expected input.\n\nDefault text\nThis property lets you set a default value for the widget before the user has made any changes.\n\nRegex\nUsing Regex or Regular expression property, you can set specific constraints on the input you expect from the user.\nError Message\nIf a user enters an incorrect value, the input widget shows a message \u201cinvalid input.\u201d You can change this message by using the `Error message` property to provide better feedback on the input given by the user.\n\nRequired\nEntering a value in the input box is mandatory when the required property is enabled. You can also write a `JS` code to link this property to a user action. Click on `JS` next to the Required to write JavaScript code.\nFor example, let\u2019s drag a checkbox widget `checkbox1` onto the canvas and bind it to the `Required` property. To enable the `Required` when the user checks the checkbox, add the following JavaScript code in the Required property:\n`{{Checkbox1.isChecked}}`\nWhen you tick the checkbox, it will enable the Required property, and the input box will show an error message \u201cThis field is required\u201d if you have not entered any input.\n\nVisible\n`Visible` controls the widget\u2019s visibility on the app\u2019s page. The widget will not be visible on the published app if you turn off this property. You can also write a `JS` code to link Visible\u2019s functionality to a user action. Click on `JS` next to the Visible to write JavaScript code.\nFor example, let\u2019s drag a checkbox widget `checkbox1` onto the canvas and bind it to the `Visible` property. To enable the `Visible` when the user checks the checkbox, add the following JavaScript code:\n`{{Checkbox1.isChecked}}`\nWhen you tick the checkbox, it will enable the Visible property, and the input box will be visible in the app.\n\nDisabled\nIt disables the user from entering values in the widget. The widget will be visible (if Visible is enabled), but user input will not be allowed. You can also write a JS code to link Disabled\u2019s functionality to a user action. Click on `JS` next to the Visible to write JavaScript code.\nFor example, let\u2019s drag a checkbox widget `checkbox1` onto the canvas and bind it to the `Disabled` property. To enable the `Disabled` when the user checks the checkbox, add the following JavaScript code:\n`{{Checkbox1.isChecked}}`\nWhen you tick the checkbox, it will enable the Disabled property and prevent a user input in the input box.\n\nReset on Submit\nWhen `Reset on Submit` is enabled, the widget resets or clears the entered input after the user submits it.\\\nLet\u2019s use the event `onSubmit` to show a message when input is submitted. You\u2019ll see once the user submits and the message pops up, the input widget will reset itself to its original state.\n\nAutofocus\nWhen you enable `Autofocus`, the cursor focuses on the input box whenever the widget is loaded.\n\nBinding Properties\nThese properties help you share values between widgets and also allow you to easily access the widget property within Queries or JS functions.\n|                 |                                                                                                               |                                 |\n| --------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------- |\n| countryCode | It fetches the country code of the chosen currency.                                                           | `{{<widget_name>.countryCode}}` |\n| dialCode    | It fetches the dialing code of the chosen country.                                                            | `{{<widget_name>.dialCode}}`    |\n| isDisabled  | This property indicates whether the widget is disabled or not.                                                | `{{<widget_name>.isDisabled}}`  |\n| isVisible   | This property indicates whether the widget is visible or not.                                                 | `{{<widget_name>.`isVisible`}}` |\n| isValid     | This property indicates whether the input value is valid or not.                                              | `{{<widget_name>.isValid}}`     |\n| Text        | It fetches the phone number that the user enters in the input box.                                            | `{{<widget_name>.text}}`        |\n| Value       | It fetches the unformatted phone number, even if formatting is enabled. The value is of String data type. | `{{<widget_name.value}}`        |\nText\nIt fetches the formatted/unformatted (based on the enable formatting switch) phone number that the user enters in the input box. It changes when the default value changes or the user enters a new value in the input box. The value is of String data type.\nTo bind the text in the input widget to another widget, open the property pane of it, and add the code snippet given below:\n`{{<widget_name>.text}}`\nWhere  is the name of your input box.\nFor example, let's take an Input widget `Phoneinput1` and bind its text to a text widget. Drag a text widget onto the canvas and add the following snippet:\n`{{Phoneinput1.text}}`\nThe Text widget will then display the text present in the input widget.\n\nValue\nIt fetches the unformatted phone number, regardless of the enabled formatting flag. The value is of String data type.\nTo bind the value of the input widget to another widget, open the property pane of it, and add the code snippet given below:\n`{{<widget_name>.value}}`\nWhere  is the name of your input box.\nFor example, let's take an Input widget `Phoneinput1` and bind its value to a text widget. Drag a text widget onto the canvas and add the following snippet:\n`{{Phoneinput1.value}}`\n\ndialCode\nIt fetches the dialing code of the chosen country. For example, if the user has selected India. It fetches the value `+91`.\nTo bind the dial code, add the code snippet given below:\n`{{<widget_name>.dialCode}}`\nWhere  is the name of your input box.\nFor example, let's take an Input widget `Phoneinput1` and bind its dial code to a text widget. Drag a text widget onto the canvas and add the following snippet:\n`{{Phoneinput1.dialCode}}`\n\ncountryCode\nIt fetches the country code of the chosen currency. For example, if the user has selected India. It fetches the value `IN`.\nTo bind the country code, add the code snippet given below:\n`{{<widget_name>.countryCode}}`\nWhere  is the name of your input box.\nFor example, let's take an Input widget `Phoneinput1` and bind the selected country's code to a text widget. Drag a text widget onto the canvas and add the following snippet:\n`{{Phoneinput1.countryCode}}`\n\nEvents\nThey are a set of actions that you can perform on the widget. The following table lists the actions:\n| Event             | Description                                                                                                                                  |\n| ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------- |\n| onTextChanged | Sets the action to run when the user enters or changes its inputs. See a list of supported actions. |\n| onFocus | Sets the action to run when the input area in the phone widget is focused. See a list of supported actions. |\n| onBlur | Sets the action to run when the input area in the phone widget loses focus. See a list of supported actions. |\n| onSubmit      | Triggers an action on submit (when the enter key is pressed). See a list of supported actions.      |\nLabel\nThe property hosts a group of configurations that you can use to associate a display name and define a placement for the widget. These properties are usually useful when you want to design forms that follow a defined alignment for your form fields and give a professional look to your forms. Below are the properties that you can use:\n| Label         | Description                                                  |\n| ------------- | ------------------------------------------------------------ |\n| Text      | Sets the label text of the widget.                           |\n| Position  | Sets the label position of the widget.                       |\n| Alignment | Sets the label alignment of the widget.                      |\n| Width     | Sets the label width of the widget as the number of columns. |\n| Label Styles         | Description                                              |\n| -------------------- | -------------------------------------------------------- |\n| Text Color       | Allows you to set the text color for the label.          |\n| Text Size        | Allows you to set the size of the label.                 |\n| Label Font Style | Allows you to choose a font style, i.e., bold or italic. |\nText\nIt allows you to set the label of the Phone Input box. For example, if you want the user to enter a work mobile number for the Phone Input box, you can enter the text as \u201cWork.\u201d\n:::tip\nYou can leave the text empty if you don't want any display name for your Phone Input widget.\n:::\nPosition\nIt allows you to specify the placement of the label. You can select one of the available options:\n\nTop - It allows you to align the text at the top of the phone input box.\nLeft - It aligns the text to the left of the Phone Input box. When you select Left alignment, you get additional settings that you can use to control the alignment and define the text's width.\nAlignment - With the help of alignment, you can define the placement of the text in accordance with the position of the Phone Input box. You can choose:\nLeft - It aligns the text to the widget's left boundary that is away from the Phone Input box.\nRight - It aligns the text closer to the Phone Input box.\n\n\nWidth - With the help of width, you can define the number of columns in the grid that surrounds the widget. You can specify how close or far the text can be placed to the Phone Input box.\nAuto - It automatically adjusts the position of the text based on the Phone Input box's height.\n\n:::info\nColumns are the dashed lines (-----) that surround a widget when you try to drag and drop it on the canvas.\n:::\n\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Style             | Description                                                     |\n| ----------------- | --------------------------------------------------------------- |\n| Border Radius | Rounds the corner of the icon button's outer border edge.       |",
    "tag": "appsmith"
  },
  {
    "title": "Checkbox",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/checkbox.md",
    "content": "Checkbox\nCheckbox is a simple UI widget you can use when you want users to make a binary choice.\n\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the Checkbox widget. All of these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property             | Description                                                                                                                                                                                            |\n| -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Label            | Sets the text shown within the widget.  |\n| Position         | Sets whether the label of the checkbox is aligned to the left or right side of the widget.  |\n| Alignment        | Sets whether the checkbox is aligned to the left or right side of the widget.  |\n| Default Selected | Sets whether the checkbox begins checked or unchecked by default.  |\n| Required         | Sets whether the checkbox is a mandatory field. When the checkbox is within a Form widget, that Form's submit button will be automatically disabled until the Checkbox is checked. |\n| Visible          | Controls widget's visibility on the page. When turned off: The widget will not be visible when the app is published. It appears translucent when in Edit mode.  |\n| Disabled         | Makes the widget un-clickable or unusable. The widget will remain visible to the user but user interaction will not be allowed.   |\n| Animate Loading  | When turned off, the widget will load without any skeletal animation. You can use a toggle switch to turn it on/off. You can also turn it off/on using javascript by enabling the JS label next to it. |\n| Height        | It configures how a widget\u2019s height reacts to content changes. It has three possible configurations:Fixed: The height of the widget remains as set using drag and resize.Auto Height: The height of the widget reacts to content changes. Auto Height with limits: Same as Auto height, with a configurable option to set the minimum and maximum number of rows that can be occupied by the widget.                                      |\nBinding Properties\nThese properties allow you to bind your Checkbox widget with any other widget in queries or JS objects. The following table lists all the binding properties.\n| Binding Property | Description                                                       |\n| ---------------- | ----------------------------------------------------------------- |\n| isChecked    | Represents whether the checkbox is currently checked (bool).    |\n| isDisabled   | Reflects the state of the widget's Disabled setting (bool). |\n| isVisible    | Reflects the state of the widget's Visible setting (bool).  |\nEvents\nYou can define functions that will be called when these events are triggered in the widget.\n| Events            | Description                                                                                                                                   |\n| ----------------- | --------------------------------------------------------------------------------------------------------------------------------------------- |\n| onCheckChange | Sets the action to be run when the user checks/unchecks a checkbox. See a list of supported actions. |\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Style Property    | Description                                                                                                                                                                          |\n| ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Text Color    | Represents the widget's Text color setting as a CSS color value (string).                                          |\n| Text Size     | Sets the font size of the widget's Label text. Accepts CSS `font-size` values.                                                                                                   |\n| Accent Color  | Sets the widget's accent color, which appears as the fill color for the checkbox when checked. Accepts CSS color values. |",
    "tag": "appsmith"
  },
  {
    "title": "Progress",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/progress.md",
    "content": "Progress\nThe Progress widget indicates the progress of certain user performed or system triggered actions.\n\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the Progress bar widget. All these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property             | Description                                                                                                                                                                                                                                      |\n| -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Infinite loading | Control\u2019s the widget to be in an infinite loading state, which is useful if the progress values are not determinable. This can be switched on for queries or API calls that take time to return data.                                            |\n| Type             | The progress bar can be of linear or circular type.                                                                                                                                                                                              |\n| Progress         | Percentage of progress to be indicated to the user.                                                                                                                                                                                              |\n| Number of steps  | Progress bar can be broken down into multiple parts called steps, each step contains a fixed percentage of progress. Number of steps can be configured to break down the progress bar for better communication. Only supports positive integers. |\n| Show Result      | Controls widget\u2019s ability to show the current evaluated percentage as in number along with the progress.                                                                                                                                         |\n| Visible          | Controls widget's visibility on the page. When turned off, the widget will not be visible when the app is published.                                                                                                                             |\nBinding Properties\nThese properties allow you to bind your Progress bar widget with any other widget in queries or JS objects. The following table lists all the binding properties.\n| Property     | Description                                                      | Code Snippet                          |\n| ------------ | ---------------------------------------------------------------- | ------------------------------------- |\n| progress | It shows the current progress of the progress bar in percentage. | `{{<progress-widget_name>.progress}}` |\n| visible  | Visibility of the progress bar widget.                           | `{{<progress-widget_name>.visible}}`  |\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Styles         | Description                             |\n| -------------- | --------------------------------------- |",
    "tag": "appsmith"
  },
  {
    "title": "Select",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/select.md",
    "content": "Select\nThe select widget, (formerly known as dropdown), enables users to select one input from a predetermined list of permitted options. This document provides information on displaying options in the select widget and explains different properties.\n\nDisplay options manually\nTo manually display options in a Select widget, you can use the Options property. The Options property is used to specify the available options for the user to choose from. It allows you to set both the label and value for each item in the dropdown list. \nThe options must be specified as an array of objects, where each object has two properties: `label` and `value`. The `label` property represents the text that's displayed to the user, while the `value` property is the actual data that's stored and used in your application. For example:\n`javascript\n[\n  {\n    \"label\": \"Blue\",\n    \"value\": \"BLUE\"\n  },\n  {\n    \"label\": \"Green\",\n    \"value\": \"GREEN\"\n  }\n]`\nDisplay options dynamically\nInstead of creating a predetermined set of options, you can dynamically generate options by fetching data from an API or querying a data source.\nA Dropdown Options can be populated from a data source like an API / Query by transforming the incoming data to an array of (label, value). The transformation can be performed using JavaScript. So if the data is an array, it can be transformed using the Array.map function.\n`javascript\n// Query1.data is assumed to be an array here\n{{ Query1.data.map((row) => { \n      return { label: row.name, value: row.id } \n   }) \n}}`\nSample app - Dynamically Add Options to a Select Widget\nSet default value in options\nThe Default Selected Value property in a widget allows you to specify an initial value for the widget when it's first displayed. This is useful for pre-populating the widget or ensuring that a specific option is selected by default. To use this property, set its value to the value of the desired option from the Options property. \n`javascript\n[\n  {\n    \"label\": \"Blue\",\n    \"value\": \"BLUE\"\n  },\n  {\n    \"label\": \"Green\",\n    \"value\": \"GREEN\"\n  }\n]`\nFor example, if you want the default value to be `Blue`, set the Default Selected Value property to `BLUE`.\nAccess selected option\nThese properties allow you to bind your select widget with any other widget in queries or JS objects.\nThe selectedOptionValue in a Select widget is a value that represents the selected option in a  dropdown. It updates when the user selects a new option or the default value changes. \n`javascript\n{{widget_name.selectedOptionValue}}`\nThe selectedOptionLabel in a Select widget represents the label of the selected option in a dropdown. This property is used to display the label of the selected option in the widget and is updated whenever the user selects a different option from the dropdown list or if the default label changes. \n`javascript\n{{widget_name.selectedOptionLabel}}`\nServer side filtering\nThe Select widget has the option to configure server-side filtering, where search queries are sent to the back-end, and responses are used to populate options on the Select widget. You can implement server-side filtering of options in the Select widget by using the filterText binding property.\nThe filterText is a binding property in a Select widget that allows you to implement server-side filtering of options in the dropdown list. When enabling server-side filtering in the widget, please update the default value to contain both `label` and `value` in this format `{\"label\":<label>, \"value\": <value>}` if the default value isn't present in the default options.\n\nThe preceding video demonstrates how to enable Server Side Filtering, and you can also refer to this guide to learn more about Server-Side Searching or Filtering.\nSample app for Server Side Filtering.\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget properties\nThese properties are present in the property pane of the widget. The following table lists all the widget properties.\n|        Property        | Description                                                                                                                                    |\n| ------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------- |                                                                   \n| Options                               | Use to set labels and values for different items/options in the list of the dropdown widget. Options must be specified as an array of objects with a label and value property.                                            |\n| Default Selected Value            | Sets a default option that's captured as user input unless it's changed by the user.                                                                                                                                      |\n| Text                                  | Sets the label of the widget.                                                                                                                                                                                             |\n| Position                              | Sets the label position of the widget.                                                                                                                                                                                    |\n| Allow Searching                   | Makes the dropdown list filterable.                                                                                                                                                                                       |\n| Server Side Filtering | Enables server-side filtering via an API / Query request. Use this property when the Select widget's Option data is being bound to an API / Query.                                                                        |\n| Required                          | When turned on, it makes a user input mandatory and disables any form submission until input is made.                                                                                                                     |\n| Tooltip                               | It sets a tooltip for the widget. You can add hints or extra information about the required input from the user.                                                                          |\n| Placeholder                   | Sets the Placeholder of the dropdown widget.                                                                                                                                                                              |\n| Visible                   | Controls widget's visibility on the page. When turned off, the widget won't be visible when the app is published.                                                                 | `{{widget_name.isVisible}}`                   |\n|Disabled                   | Disables input/selection to the widget. The widget remains visible to the user but user input/selection won't be allowed.                                                         | `{{widget_name.isDisabled}}`                  |\n| Animate Loading                   | Controls the widget\u2019s animation on page load.                                                                                                                                                                             |\n| Height            | It configures how a widget\u2019s height reacts to content. Learn more about [Height Property changes.                                                                                                                                                             |\nReference properties\nThese properties allow you to bind your select widget with any other widget in queries or JS objects.\n|        Property         |                                               Description                                                                                   | \n| ------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------- |\n| filterText                        | The filter text for Server side. filtering                                                                                                                                      `|\n| **isDisabled**                    | This property indicates whether the widget is disabled or not.                                                                                                                            |\n| **isVisible**                         | This property indicates whether the widget is visible or not.                                                                                                                                 |\n| **selectedOptionValue**                   | This is the value of the option that's displayed in a Single Select dropdown. It changes if the default value of the dropdown changes or the user selects an option               |`{{widget_name.selectedOptionValue}}`|\n| **selectedOptionLabel**                       | This property indicates label of the selected option.`      |\nStyle properties\nStyle properties allow you to change the look and feel of the widget.\n| Events             | Description                                                                                                                                    |\n| ------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------- |\n| Font Color                    | Allows you to set text color for the label.                                                                                                                                                       |\n| Font Size                         | Allows you to set the size of the label.                                                                                                                                                                      |\n| Emphasis                                  | Allows you to choose a font style; bold or italic.                                                                                                                                                |\n| Border Radius                     | Rounds the corners of the widget's outer edge.                                                                                                                                                                        |\n| Box Shadow                            | Casts a drop shadow from the frame of the widget.                                                                                                                                                             |\nEvents\nThese are functions that are called when event listeners are triggered in the widget. Use actions to execute tasks based on user events.\n| Events             | Description                                                                                                                                    |\n| ------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------- |\n| onOptionChange | The \"onOptionChange\" property allows you to specify the action that should occur when the user selects an option in the dropdown list. This is an important feature that enables you to capture the user's input and perform specific actions in response.  |\n| onDropdownOpen | The \"onDropdownOpen\" property allows you to specify the action that should occur when the user opens the dropdown list. For example, you could use the \"onDropdownOpen\" event to retrieve data from a database, populate the options in the dropdown list, or display additional information to the user.   |\n| onDropdownClose | The \"onDropdownClose\" property allows you to specify the action that should occur when the user closes the dropdown list. For example, you could use the \"onDropdownClose\" event to store the selected option in a database, hide additional information, or reset the widget to its original state.  |\nTroubleshooting\n\n\nDefault value is missing in options\n\n\nDuplicate values found \n\n\nIf you run into any other issues while working with the Select widget, check out the guide on widget errors guide. If your issue isn't covered in the guide, please connect with support@appsmith.com or raise your query on the Discord Server.\nFurther reading\n\nFilter data based on user input\nData Access and Binding\nWidgets Reference\n",
    "tag": "appsmith"
  },
  {
    "title": "Map Chart",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/map-chart.md",
    "content": "Map Chart\nMap Chart widget is useful for data visualizations on a map. The visualizations can be used in dashboards to denote areas of interest.\n\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the Map chart widget. All these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property        | Description                                                                                                                                                                                                                                     |\n| --------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Map type    | It lets you select the maps of the world or continents to visualize data.                                                                                                                                                                       |\n| Title       | Sets the title to be displayed on top of the map chart.                                                                                                                                                                                         |\n| Visible     | Controls widget's visibility on the page. When turned off, the widget will not be visible when the app is published                                                                                                                             |\n| Data        | Information in a specified format (array \\) is to be displayed on the selected map type. To know what each `id` represents for a map, please refer to this documentation. |\n| Show Labels | When turned on, it shows the labels for each data point on the map chart.                                                                                                                                                                       |\nBinding Properties\nThese properties allow you to bind your Map chart widget with any other widget in queries or JS objects. The following table lists all the binding properties.\n| Internal Property     | Description                                                                                                                             |\n| --------------------- | --------------------------------------------------------------------------------------------------------------------------------------- |\n| selectedDataPoint | An object of the currently selected data point in the map. This object changes when the user selects a different data point in the map. |\n| isVisible         | This property indicates whether the widget is visible or not.                                                                           |\nEvents\nThey are a set of actions that you can perform on the widget.\n| Event                | Description                                                                                                                                             |\n| -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| onDataPointClick | Sets the action to be run when the user selects a distinct region in the map. See a list of supported actions. |\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Styles            |                                                                                                                                                                                                                                                                                                        |\n| ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Color range   | Controls the colour of a set of regions based on the range of values assigned. Accepts arrays of objects with the following keys: code (Color code to be applied), minValue (Minimum value for which this colour should be applied), maxValue (Maximum value for which this colour should be applied). |\n| Border Radius | Allows you to define curved corners.                                                                                                                                                                                                                                                                   |\n| Box Shadow    | Allows you to choose from the available shadow styles.                                                                                                                                                                                                                                                 |\nDisplaying Data\nMap chart\u2019s options can be populated from a data source like an API / Query by transforming the incoming data to an array of \\(id, value\\). For each \u201cMap type\u201d, each unique ID represents a fixed region in the map, which can be determined from the fusion map chart documentation.\nThe transformation can be performed using JavaScript. So if the data is an array, we can transform it using the Array.map function.\n```\n// Query1.data is assumed to be an array here\n{{ Query1.data.map((row) => {\n      return { id: row.name, value: row.id }\n   })\n}}",
    "tag": "appsmith"
  },
  {
    "title": "Audio",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/audio.md",
    "content": "Audio\nAudio widget allows you to play a variety of URLs, including file paths, YouTube, Facebook, Twitch, SoundCloud, Streamable, Vimeo, Wistia, Mixcloud, and DailyMotion.\n\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the Audio widget. All of these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property            | Description                                                                                                                                                                                                                                           |\n| ------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| URL             | URL of the audio source to play.                                                                                                                                                                                                                      |\n| Auto Play       | Plays audio automatically on page load, without any action from the user.                                                                                                                                                                             |\n| Visible         | Controls the widget's visibility on the page. When turned off: The widget will not be visible when the app is published. It appears translucent when in Edit mode.                                                                                    |\n| Animate Loading | When turned off, the widget will load without any skeletal animation. You can use a toggle switch to turn it on/off. You can also turn it off/on using JavaScript by clicking the JS label next to it and writing code that evaluates to a boolean. |\nBinding Properties\nThese properties allow you to bind your Audio widget with any other widget in queries or JS objects. The following table lists all the binding properties.\n| Binding Property | Description                                                                                                                                        |\n| ---------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |\n| autoPlay     | Reflects the state of the widget's Auto Play setting (bool).                                                                                 |\n| playState    | Shows whether the Audio widget is currently playing sound. Represented by a (string) with value \"NOT_STARTED\", \"PLAYING\", \"PAUSED\", or \"ENDED\". |\nEvents\nYou can define functions that will be called when these events are triggered in the widget.\n| Action      | Description                                                                                                                      |\n| ----------- | -------------------------------------------------------------------------------------------------------------------------------- |\n| onPlay  | Sets the action to run when the audio begins playing. See a list of supported actions.  |\n| onPause | Sets the action to run when the audio is paused. See a list of supported actions.       |",
    "tag": "appsmith"
  },
  {
    "title": "List",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/list.md",
    "content": "List\nThe List widget provides a way to iterate over a structured dataset(array of objects) and display the data in repeating sections without writing any code. Each list item can contain other widgets to display data or capture user input.\n\n:::info\nAlthough you can add many other widgets inside the List widget, currently, Appsmith fully supports only the Text and Image widgets inside a List.\n:::\nList components\nTypically, a List widget is a collection of other widgets you can embed to display data or capture user input. Once you drag a List widget on the canvas, it has embedded Image and Text widgets by default. You can add more widgets per your requirement on the first list item container. The widgets get replicated on the other list items automatically when a dataset is connected to the List. \nDisplay data in list items\nThe `Items` property can bind your dataset to the List widget. You can bind static or dynamic data generated by executing a query or a JS function.\nStatic data mapping\nYou can display static JSON data in the `Items` property for generating the list items.\nExample: see the JSON snippet below; a collection of books has details like `bookId`, `bookName`, and `price`.\n```javascript\n[\n{\n\n\n```\"bookId\": \"001\",\n\n\"bookName\": \"Artificial Intelligence for Business Leaders\",\n\n\"bookImage\": \"https://m.media-amazon.com/images/I/511Y1LSr0JL.jpg\",\n\n\"price\": \"INR 599\"\n```\n\n\n},\n{\n\n\n```\"bookId\": \"002\",\n\n\"bookName\": \"Bootstrap 4 Quick Start\",\n\n\"bookImage\": \"https://images-na.ssl-images-amazon.com/images/I/41GTBaVKAyL._SX404_BO1,204,203,200_.jpg\",\n\n\"price\": \"INR 439.90\u201d\n```\n\n\n}\n]\n```\nTo display the data in the List widget, add three Text widgets and one Image widget in the first list item.\nFollow the steps below to bind each JSON field to the widgets embedded in the List:\n\nSelect the Image widget and add  `{{currentItem.bookImage}}` under `Image` in the property pane. `currentItem` refers to the data for a particular item. All the list items get populated based on the corresponding data in the JSON object.\nYou can now see the image in the list item, as the image widget renders the image available on the URL supplied in JSON.\n\nSimilarly, you can bind `bookName`, `bookId`, and `price` to the embedded widgets in the List widget.\nDynamic data mapping\nIf you want to bind the response from a query or a JS function, then you can use mustache syntax (`{{ }}`). Use the format of `{{QUERY_NAME.data}}` to bind the data returned by the query. For example, You a query `GetAllEmployees`, bind the response in the `Items` property as shown below:\n```javascript\n{{GetAllEmployees.data}}\n```\nTo learn how to bind data from JS functions, see Display Data from JS function\nIf you are binding the dynamic data to the List widget, remember to use the  columns/attribute name to map to the individual widget as shown below:\n```javascript\n{{currentItem.}}\n```\nServer-side pagination\nLists are often required to display large data sets from queries, but browsers can only sometimes load all the data present in the database or might do so slowly. You can use server-side pagination when a client receives only a subset of data from large datasets. It allows you to define the data limit that a query call can render. Thus, allowing you to paginate the data and determine the pagination boundaries.\nFollow the steps below to paginate the responses and request smaller chunks of data at a time:\n\nEnable the Server Side Pagination property for the List.\nCall the query on the onPageChange event listener.\nSet the LIMIT and OFFSET clause in the query:\n\n`javascript\nSELECT * FROM users LIMIT {{ List1.pageSize }} OFFSET {{ (List1.pageNo - 1) * List1.pageSize }}`\nAccess list items\nYou can reference the values inside each item selected in the list using the `selectedItem` property as shown below:\n```javascript\n{{listName.selectedItem.fieldName}}\n```\nExample: in the preceding example, if you want to display the book name of the selected item in a Text widget of `List1`, bind it in the Text property of the Text widget as shown below \n```javascript\n{{List1.selectedItem.bookName}}\n```\nTo access the index of the selected item in the list, you can use the following:\n```javascript\n{{listName.selectedItemIndex}}\n```\nProperties\nProperties allow you to customize the widget, connect it to other widgets and trigger events on user actions.\nWidget properties\n| Property                   | Description                                                                                                                                                                                                                                               |\n| -------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Items                  | Allows you to bind static or dynamic data collection to the widget.                                                                                                                                                                                       |\n| Server-side Pagination | Enables you to implement pagination by limiting the number of results fetched per Query request.  |\n| Visible                | Controls widget's visibility on the page. When turned off: The widget is visible when the app is published. It appears translucent when in Edit mode.                                                                                            |\n| Animate Loading        | When turned off, the widget loads without any skeletal animation. You can use a toggle switch to turn it on/off. You can also turn it off/on using javascript by enabling the JS label next to it.                                                    |\nReference properties\nThese properties can be referenced in other widgets, queries, or JS functions using the dot operator.\n|  Property    | Description                                                                                                                                                                                                                               |\n| ------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| backgroundColor | Represents the widget's Background Color setting as a CSS color value (string). |\n| gridGap | Reflects the widget's Item Spacing property (number).|\n| isVisible       | Reflects the state of the widget's Visible setting.                                                                                                                                                                          |\n| items           | Contains an array of objects that each represents a widget within the list items and holds information about that widget's state.e.g. `[ { \"Text1\": { \"isVisible\": true, ... }, ... }, ... ]` |\n| listData        | Contains an array of objects that each represent a list item and its data.                                                                                                                                                            |\n| pageNo          | Contains a number representing which page of the list is currently displayed.                                                                                                                                                     |\n| pageSize        | Contains a number representing the number of list items that can fit on one page of the List widget.                                                                                                                                    |\n| selectedItem    | Contains an object representing the data of the selected list item.                                                                                                                                                             |\nStyle properties\nYou can make some formatting changes to enhance the look and feel of the widget by using styles.\n|  Property            | Description                                                                                                                                                                      |\n| ------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Background Color      | Sets the background color of the widget. Accepts  CSS color values.                                                  |\n| Item Background Color | Sets the background color of the list item cards. Accepts  CSS color values.                                         |\n| Item Spacing          |  Adds the padding to the list cells. It accepts Pixels(px) as a unit for the gap width between list item cards. Accepts number values.                                                                                            |\n| Border Radius         | Rounds the corners of the widget's outer edge. With JS enabled, this accepts valid CSS border-radius values. |\n| Box Shadow            | Casts a drop shadow from the widget's frame. With JS enabled, this accepts valid CSS box-shadow values.    |\nEvents\nWhen the event is triggered, these event handlers can run queries, JS code, or other supported actions.\n| Event               | Description                                                                                                                                                                                                                                             |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| onListItemClick | Sets an action when the user clicks on one of the list items.  |\n| onPageChange |Sets the action to run when the list's page changes. |",
    "tag": "appsmith"
  },
  {
    "title": "Widgets",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets",
    "content": "Widgets\nWidgets help the user in building the app layout. Users can store data from a Database or an API call, trigger events, etc.\nWidgets can be dragged from the widget pane, positioned on the canvas, and resized to fit the data they need to display. They also come with properties that can be visually edited to set their data, change their styles, and trigger actions from them.\n\nAdd to canvas\nIn the left navigation pane, navigate to PAGES\u2014> Select the \"Widget\" Tab\u2014> Choose your desired widget, and drag it onto the canvas. You can move it anywhere on the canvas by simply dragging it around.\nNaming a widget\nA widget must have a unique name that acts as an identifier on the page. It's used to access the properties of the widget everywhere in the application. In that sense, a name is like a variable in a programming language.\n:::info\nNote that JavaScript keywords and the window object methods and properties aren't valid as widget names.\n:::\nYou can access the various properties of the widget using the widget's name.\n`javascript\n{{ Table1.selectedRow.id }}`\nGrouping widgets\nAppsmith supports the grouping of widgets. When you group widgets, they're put in a container and can be moved together. To do this -\n\nSelect multiple widgets with Ctrl + Left Click\nNow click in the dotted square icon or press Ctrl + G\n\n\nCommon properties\nThe following properties are common across many of Appsmith's widgets. You can find them by selecting your widget and checking its properties pane, and you can use them to customize the details and behavior of your app.\n| Property            | Description                                                                                                                                                                                      |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Height        | It configures how a widget\u2019s height reacts to content changes. It has three possible configurations:Fixed: The height of the widget remains as set using drag and resize.Auto Height: The height of the widget reacts to content changes. Auto Height with limits: Same as Auto height, with a configurable option to set the minimum and maximum number of rows that can be occupied by the widget.                                      |\n| Disabled        | Makes the widget un-clickable or unusable. The widget remains visible to the user but user interaction won't be allowed.                                                                         |\n| Error Message   | Sets the text of the error message to display if user input is considered invalid.                                                                                                               |\n| Tooltip         | Sets a tooltip for the widget. You can add hints or extra information about the required input from the user.                                                                                    |\n| Regex           | Used to add custom regular expression validation to perform on user input. When the input doesn't match the regular expression, the input is considered invalid.                                 |\n| Placeholder     | Sets the placeholder text within the input box. Use to show a hint or example value to the user.                                                                                                 |\n| Required        | Sets whether the input field is a mandatory field. When the input widget is within a Form widget, that Form's submit button is automatically turned off until a user adds input to the field.    |\n| Valid           | Sets an expression to decide whether the user's input is considered valid. When the expression evaluates to `false`, the input is considered invalid and the widget shows its Error Message. |\n| Visible         | Controls widget's visibility on the page. When turned off: The widget won't be visible when the app is published. It appears translucent when in Edit mode.                                      |\n| Animate Loading | When turned off, the widget loads without any skeletal animation. You can use a toggle switch to turn it on/off.                                                                                 |\nLets understand these properties in detail.\nHeight\nThe Height property configures how a widget\u2019s height reacts to content changes. This is a configurable property. The configuration to this property can be found in the property pane under the section `General`, with the property name `Height`. It has three possible configurations:\n- Fixed\n- Auto Height\n- Auto Height with limits\nFixed\nWhen you choose the Height as fixed, The height of the widget remains as set during drag and resize. The widget doesn't change or adapt to any content changes,i.e, you have to adjust the height manually.\n\nAuto height\nAuto height is a capability in widgets to change height in response to content changes. While using Auto Height, there is no limit to how much a widget can grow in height. However, the minimum height possible for any widget is 4 rows. \n\nWhen a widget changes height, the layout adjusts to maintain the distance between the widget undergoing a height change and the sibling widgets below this widget occupying one or more of the same columns.\n\nWidgets which have auto height enabled, and are invisible in view and preview mode, let go of their occupied space, allowing widgets below to move up and occupy the now free space.\n\nAuto height with limits\nAppsmith provides an option to set the limits to which a widget can grow or shrink in height. This can be configured to be enabled by selecting `Auto height with limits` from the `Height` property in the `General` section of the property pane. Once enabled, select the widget, to find two handles which also work as the values for the minimum and maximum height a widget can occupy on the canvas. These handles can be dragged to configure the minimum and maximum height limits for the widget.\n\n:::note\n\nContainer and Form widgets have a minimum height of 10 rows by default, which can be changed by choosing auto height with limits.\nThe minimum height possible for any widget is 4 rows.\n\n:::\nDisabled\nIt disables the user from entering values in the input widget. The widget is visible (if Visible is enabled), but user input won't be allowed. You can also write a JS code to link Disabled's functionality to a user action. Click on `JS` next to the `Disabled` to write JavaScript code.\nFor example, drag a checkbox widget `Checkbox1` onto the canvas and bind it to the `Disabled` property. To enable the `Disabled` when the user checks the checkbox, add the following JavaScript code:\n`{{Checkbox1.isChecked}}`\nWhen you tick the checkbox, it enables the Disabled property and prevents interaction with the input box.\n\nError message\nIf a user enters an incorrect value, the input widget shows a message \"invalid input.\" You can change this message by using the `Error message` property to provide better feedback on the input given by the user.\n\nTooltip\nTooltips are often used to show the user extra information about an element on the page, or to give them extra hints on how to use something. They're usually hidden until a certain condition is met, such as the user's mouse cursor hovering over the element.\nThe Tooltip property in Appsmith is used to set the text that appears within a floating box near the widget when the user mouses over it. In some cases (such as the Input widget), the tooltip is applied to a small question mark icon set within the widget, and appears when the user's cursor is placed over the icon.\n\nPlaceholder\nYou can set a proxy text/value inside the input box using the `placeholder` property. It can be any message or hint for the expected input.\n\nRegex\nUsing `Regex` or Regular expression property, you can set specific constraints on the input you expect from the user.\nFor example, add a regular expression for entering a name. The name can contain only alphabetic characters and spaces between the first and last name.\n`/^[a-z -]+$/i`\nIf you enter a value other than an alphabetic or space (number of special characters), the widget shows an error message \"invalid input.\"\n\nRequired\nEntering a value in the input box is mandatory when the required property is enabled. You can also write a JS code to link this property to a user action. Click on `JS` next to the `Required` to write JavaScript code.\nFor example, drag a checkbox widget `Checkbox1` onto the canvas and bind it to the `Required` property. To enable the `Required` when the user checks the checkbox, add the following JavaScript code in the Required property:\n`{{Checkbox1.isChecked}}`\nWhen you tick the checkbox, it enables the Required property, and the input box shows an error message \"This field is required\" if you haven't entered any input.\n\nValid\nThe `Valid` property can be used to set a condition or expression that the user's input must meet in order for the widget to accept it. If the given condition isn't met, the widget shows a tooltip that contains the text that has been set within its Error Message property (or \"Invalid input\" if the property isn't set). Forms can also be configured such that they're not able to be submitted if one of their child widgets has user input that's considered invalid.\nTo see how the Valid property works, drag an Input widget onto the canvas and set the `Valid` property to the following:\n`{{Input1.text.length >= 3}}`\nNow when the field has fewer than three characters entered, a tooltip appears with the widget's Error Message, or the text \"Invalid input.\"\n\nVisible\n`Visible` controls the widget's visibility on the app's page. The widget won't be visible on the published app if you turn off this property. You can also write a JS code to link Visible's functionality to a user action. Click on `JS` next to the `Visible` to write JavaScript code.\nFor example, drag a checkbox widget `checkbox1` onto the canvas and bind it to the `Visible` property. To enable the `Visible` when the user checks the checkbox, add the following JavaScript code:\n`{{Checkbox1.isChecked}}`\nWhen you tick the checkbox, it enables the Visible property, and the input box will be visible in the app.",
    "tag": "appsmith"
  },
  {
    "title": "JSON Form",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/json-form.md",
    "content": "JSON Form\nThe JSON form widget is useful for quickly generating forms from JSON fields. You can bind this form to queries or APIs to update data instantly.\nJSON form abstracts away all the complexity in building the first draft of the forms. Your time is better spent building amazing apps than building long forms for CRUD workflows.\nAdd to Canvas\nTo add a JSON form widget to your canvas, drag a JSON form widget from a widget pane available on the left navigation bar.\nNavigate to PAGES \u2014> Select Widget Tab \u2014> Write \u201cJSON form\".\nNow that you have a JSON Form widget added to the canvas, you can move it anywhere on the canvas by simply dragging the widget.\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the JSON Form widget. All of these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property                  | Description                                                                                                                                                                                                                  |\n| ------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Title                 | Sets the text that appears at the top of the form as a title.                                                                                                                                                                |\n| Source Data           | Takes a JSON object whose data is used to generate the form layout.                                                                                                                                                        |\n| Auto Generate form    | When enabled, the form layout will update automatically when the field types inside the Source Data are changed.                                                                                                         |\n| Generate Form         | When Auto Generate Form is disabled, this button manually regenerates the form layout according to the field types in the Source Data object.                                                                        |\n| Field Configuration   | This is a list of the generated form fields. Click the gear icon to further customize any of these fields, or the eye icon to hide that field. They can also be re-ordered by dragging, and renamed by clicking their names. |\n| Add New Field         | Adds a new field in the form. Fields added this way are known as custom fields. You can delete these fields later.                                                                                                           |\n| Disable Invalid Forms | Disables the submit button when one or more of the form fields are considered invalid.                                                                                                                                       |\n| Animate Loading       | When turned off, the widget will load without any skeletal animation. You can use a toggle switch to turn it on/off. You can also turn it off/on using javascript by enabling the JS label next to it.                       |\n| Fixed Footer          | Makes the footer sticky for long forms, so the Submit and Reset buttons are always visible on long forms.                                                                                                                    |\n| Visible               | Controls widget's visibility on the page. When turned off: The widget will not be visible when the app is published. It appears translucent when in Edit mode.                                                               |\n| Hidden Fields in Data               | When turned on, the output data is updated to contain data from hidden fields. The hidden field values are referenced from the source data.                                                               |\n| Scroll Contents       | Makes the contents of the form scrollable.                                                                                                                                                                                   |\n| Show Reset            | When enabled, shows a reset button in the form allowing users to reset the form at any time.                                                                                                                                 |\n| Submit Button Label   | Sets the text for the label on the Submit button.                                                                                                                                                                            |\n| Reset Button Label    | Sets the text for the label on the Reset button.                                                                                                                                                                             |\n| Height        | It configures how a widget\u2019s height reacts to content changes. It has three possible configurations:Fixed: The height of the widget remains as set using drag and resize.Auto Height: The height of the widget reacts to content changes. In JSON form widget, auto height is enabled by default. Auto Height with limits: Same as Auto height, with a configurable option to set the minimum and maximum number of rows that can be occupied by the widget.                                      |\nLet's understand the widget properties in detail.\nSource Data\nThe source data field allows you to add JSON data for your form. Once you drag a new JSON form widget, you will see a default form rendered with some details. You can update the source data field to infer data to generate the form.\n\nIf your source data is coming from a table\u2019s selected row, then you can simply bind using the following snippet:\n\n`{{<tableName>.selectedRow}}`\n\n\nIf your source data is coming from an API or a DB query, you can bind it to source data using:\n\n`{{<queryName>.data}}`\n:::tip\nIf your data is an array type, you can mention the index value to get the source data as an object.\n:::\n\n\nYou can also provide static data directly in the form or use a JS object.\n\n\nWe recommend a few suggestions that will help you create user-friendly forms using JSON Form:\n\nYou can group the form manually into different sections. For such categorization, you can use a tab widget. With a tab widget, you can split the form into multiple subforms and share it with your users.\nYou can logically divide the items like arrays but cannot group the form manually. For such categorization, you can use the list widget to show all the arrays, and the details within an array can be shown in a JSON form.\n\n\n:::info\nCheck out our sample application demonstrating how you can use the list widget with JSON form.\n:::\nPost binding, the form is automatically generated and ready to use. We optimize the generated form to use the closest possible input field for the data type in the source data.\nAuto-Generate Form\nWhen you enable auto-generate form, the form fields are generated according to the source data (fields are generated according to the key-value pairs in the source data). Whenever there is a change in the source data, the form fields get updated automatically.\n\nWhen the auto-generate form is disabled, any change in the source data will not affect the Form field. You\u2019ll have to manually generate the form fields on demand by clicking on \u201cGenerate form.\u201d It prevents the removal of the fields that are essential in the form.\n\nField Configuration\nField configuration shows all the fields generated automatically in the forms. You can edit the fields to tweak properties like the field type and default value and bind specific actions by using editable properties.\nMost fields use the underlying data type-specific widget\u2019s properties to allow a full level of customization just like the widget would. For example, if the input type is text input, the editable properties are similar to the input widget in Appsmith.\n\nArray Field\nArrays are repeated sets of information(lists) that the user can add, update or remove, like the number of jobs a user has held. With array fields, the form supports adding, removing, and updating a group of fields together. It\u2019s very useful if the form user has multiple sets of the same data they need to add or update. You can check a sample app here.\nObject Field\nObjects are groups of fields clubbed together for easier management, like the details of a job a user has held. The form supports grouping fields together with object fields for a visual distinction. This can flow directly from the source data if its objects are used in it.\nObject fields can also be created within the form while customizing by adding a new field on the field configuration at the source level or within another array or object field.\nAdd New Field\nYou can also add new fields from the Add new field button in the Field configuration. These are called Custom fields. Once you add the field, you can customize it similar to any existing form field. For example, its \u201cproperty name\u201d can be updated within the field configuration for easier management of the form data. You can delete the custom fields later using the field configuration section in the widget.\n\nDisable Invalid Forms\nIt disables the Submit button for the form if the form fields don\u2019t meet the validation criteria, like, as a form field left empty that must be filled. For example, in the default JSON form, if we make the name text widget as required and turn on the `Disable Invalid form`, the Submit button will stay disabled till a name is entered in the text field.\nYou can also add JavaScript code to control the functionality of `Disable Invalid form` by clicking on the JS button.\nVisible\n`Visible` controls the widget\u2019s visibility on the app\u2019s page. The widget will not be visible on the published app if you turn off this property. You can also write a JS code to link Visible\u2019s functionality to a user action. Click on `JS` next to the Visible to write JavaScript code.\nFor example, let\u2019s drag a checkbox widget `checkbox1` onto the canvas and bind it to the `Visible` property. To enable the `Visible` when the user checks the checkbox, add the following JavaScript code:\n`{{Checkbox1.isChecked}}`\n\nWhen you tick the checkbox, it will enable the Visible property, and the JSON Form will be visible in the app.\nBinding Properties\nThese properties allow you to bind your JSON form widget with any other widget in queries or JS objects. The following table lists all the binding properties.\n| Binding Property | Description                                                                                                                                                                                                                                                                                                              | Code Snippet                   |\n| ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------ |\n| fieldState   | 8A JSON object describing the state of each field in the form. State data includes: isDisabled, isRequired, isVisible, and isValid (bool).e.g. `{ \"name\": {\"isVisible\": true, ... }, ... }` | `{{<widget_name>.fieldState}}` |\n| formData     | Contains a JSON object with the field names and their current values in the form.                                                                                                                                                                                                                                      | `{{<widget_name>.formData}}`   |\n| isValid      | Reflects whether the widget's inputs are considered Valid (bool).                                                                                                                                                                                                                                                  | `{{<widget_name>.isValid}}`    |\n| sourceData   | Conatins a JSON object of the original source data which was bound to the form.                                                                                                                                                                                                                                        | `{{<widget_name>.sourceData}}` |\nformData\n`formData` fetches the data entered by the user in the form of JSON format. You can pass this data to queries, or other widgets.\nFor example, let's take a JSON Form widget `JSONform1` and bind the data in the form fields to a text widget. Drag a Text widget onto the canvas and add the following snippet to the Text property of the Text widget:\n`{{JSONform1.formData}}`\n\nfieldState\n`fieldState` captures the state of the fields present in the form in JSON format. The states include the properties of the fields (widgets) like disabled, required, visible, etc.\n\nsourceData\n`sourceData` fetches the data coming from the source data that is bound to the form in a JSON format. The source data may have static JSON data or data coming in from a query or an API.\n\nEvents\n| Event name | Description                                                                                                                                                                                                                                               |\n| -------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| onSubmit   | Sets an an action to take place when the user clicks the Submit button on this form. Can be set from the GUI list of common actions (examples here), or you can define a custom JavaScript function to call instead. |\nForm Styles\nStyle properties allow you to change the look and feel of the widget.\n| Form Style           | Description                                                                                                                                                                      |\n| -------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Background Color | Sets the background color of the widget. Accepts CSS color values.                                                   |\n| Border Radius    | Rounds the corners of the widget's outer edge. With JS enabled, this accepts valid CSS border-radius values. |\n| Border Width     | Sets the width of the widget's border. Accepts number values only, in px.                                                                                                      |\n| Box Shadow       | Casts a drop shadow from the frame of the widget. With JS enabled, this accepts valid CSS box-shadow values.    |\n\nSubmit and Reset Button Styles\n| Button Style       | Description                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n| ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Button Color   | Sets the color of the widget's button. Accepts valid CSS color values.                                                                                                                                                                                                                                                                                                          |\n| Button Variant | Sets the the button style type to represent its significance - Primary, Secondary, or Tertiary. You can use JavaScript to set this field by writing code that evaluates to the string \"PRIMARY\", \"SECONDARY\", or \"TERTIARY\".                                                                                                                                                                                                              |\n| Border Radius  | Rounds the corners of the widget's outer edge. With JS enabled, this accepts valid CSS border-radius values.                                                                                                                                                                                                                                                            |\n| Box Shadow     | Casts a drop shadow from the frame of the widget. With JS enabled, this accepts valid CSS box-shadow values.                                                                                                                                                                                                                                                               |\n| Icon           | Sets an icon to be included on the button.                                                                                                                                                                                                                                                                                                                                                                                                  |\n| Placement      | Defines where the button's icon and label appear within the space of the button. Start: The icon and label appear at the left-most side of the button; Center: The icon and label appear in the center of the button space; Between: The icon and label appear at opposite ends of the button's space. You can use JavaScript to set this field by writing code that evaluates to the string \"START\", \"CENTER\", or \"BETWEEN\". |\n| Icon Alignment | Sets whether the icon appears on the left or right of the button's label text.                                                                                                                                                                                                                                                                                                                                                              |\n\n:::info\nAre you having trouble? Check out the JSON Form troubleshooting guide or reach out to us on Discord to get support or ask questions on our community forum.",
    "tag": "appsmith"
  },
  {
    "title": "Tabs",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/tabs.md",
    "content": "Tabs\nThe tabs widget is a special widget that contains multiple containers. Tabs can be used to contextually show UI to a user based on their choices.\n\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the widget. All these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property            | Description                                                                                                              |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------ |\n| Tabs            | This property lets you add and remove tabs from the widget. Tabs are uniquely identified by their tab names              |\n| Default Tab     | This property selects the tab which matches the corresponding name                                                       |\n| Show Tabs       | This property hides / shows the tabs in the tab widget. It can be used to create the illusion of dynamically changing UI |\n| Scroll Contents | This property enables scrolling within the contents of each tab                                                          |\n| Visible         | Controls widget's visibility on the page. When turned off, the widget isn't visible when the app is published      |\n| Animate Loading | Allows you to control a widget\u2019s animation on the page load.                                                             |\n| Height        | It configures how a widget\u2019s height reacts to content changes. It has three possible configurations:Fixed: The height of the widget remains as set using drag and resize.Auto Height: The height of the widget reacts to content changes. Auto Height with limits: Same as Auto height, with a configurable option to set the minimum and maximum number of rows that can be occupied by the widget.                                      |\nBinding Properties\nThese properties help you share values between widgets and also allow you to easily access the widget property within Queries or JS functions.\n| Widget Property | Description                                                   |\n| --------------- | ------------------------------------------------------------- |\n| isVisible   | This property indicates whether the widget is visible or not. |\n| selectedTab | Contains the id of the tab currently selected                  |\nEvents\nThey're a set of actions that you can perform on the widget. The following table lists the actions:\n| Events            | Description                                                                                                                      |\n| ----------------- | -------------------------------------------------------------------------------------------------------------------------------- |\n| onTabSelected | Sets the action to be run when the user selects a tab. See a list of supported actions. |\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Styles            | Description                                            |\n| ----------------- | ------------------------------------------------------ |\n| Border Radius | Allows you to define curved corners.                   |\n| Box Shadow    | Allows you to choose from the available shadow styles. |\nCreating Dynamic Views\nYou can create separate UIs in each tab container and dynamically switch between the containers by controlling the Default Tab property. The below code snippet demonstrates how you can control the selected tab based on the value the user sets in a dropdown\n`{{ Dropdown1.selectedOption === \"1\" ? \"Tab1\" : \"Tab2\" }}`\nTab Navigation\nBy manipulating the properties of a tab widget, it's possible to create a custom navigation scheme for the tab widget. This quick video show's how to setup tab navigation with the storeValue function and some JavaScript:\n",
    "tag": "appsmith"
  },
  {
    "title": "Maps",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/maps.md",
    "content": "Maps\nThe Map widget is used to display lat, long data on a google map and allows users to select locations on a map as lat, long.\n:::info IMPORTANT\nTo use the Maps widget on a self-hosted Appsmith, ensure that Google Maps is set up on your instance. For more information, see Configuring Google Maps on a self-hosted Appsmith instance.\n:::\n\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the Map widget. All these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Widget Property            | Description                                                                                                                                                                                |\n| -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Initial location       | This property sets the default location that the map should focus on.                                                                                                                      |\n| Default markers        | This property sets an array of default markers. Every default marker will have the following format: `{lat: number, long: number, title?: string, color?: string}` |\n| Map & Marker Centring  | Controls whether the clicked marker is centred on the map.                                                                                                                                 |\n| Enable search location | This property enables a search bar on the map which users can use to navigate                                                                                                              |\n| Enable pick location   | This property allows users to select a location on the map and moves the map marker to this location. The `selectedMarker` field is populated with this marker.                            |\n| Create new marker      | This property enables scrolling within the contents of each tab                                                                                                                            |\n| Visible                | Controls widget's visibility on the page. When turned off, the widget will not be visible when the app is published                                                                        |\n| Animate Loading        | Allows you to control a widget\u2019s animation on the page load.                                                                                                                               |\n| Zoom Level             | Sets the default zoom level of the map                                                                                                                                                     |\nBinding Properties\nThese properties allow you to bind your Map widget with any other widget in queries or JS objects. The following table lists all the binding properties.\n| Binding Property   | Description                                                   |\n| ------------------ | ------------------------------------------------------------- |\n| selectedMarker | This contains the marker object selected by the user          |\n| markers        | This contains the list of markers on the map                  |\n| isVisible      | This property indicates whether the widget is visible or not. |\nEvents\nThey are a set of actions that you can perform on the widget. The following table lists the actions:\n| Events              | Description                                                                                                                                       |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |\n| onMarkerClick   | Sets the action to be run when the user clicks a marker on the map. See a list of supported actions.     |\n| onMarkerCreated | Sets the action to be run when the user creates a new marker on the map. See a list of supported actions |\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Styles            | Description                                            |\n| ----------------- | ------------------------------------------------------ |\n| Border Radius | Allows you to define curved corners.                   |",
    "tag": "appsmith"
  },
  {
    "title": "Chart",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/chart.md",
    "content": "Chart\nWhen communicating with a larger audience, visual representation of data is beneficial. Its more readable and gives a better understanding of problems/achievements. You can drill down to view specific information when selecting a segment of data.\nA Chart widget is a visual representation of data. It allows you to visualize the bottlenecks in processes. With the root cause in hand, you can amend the methods to make calculated decisions.\n:::info\nAppsmith is integrated with FusionCharts and has acquired a re-distribution license. With this license, you can use FusionCharts on the Appsmith cloud and on-premise platform. The use of the license is permitted as long as what you are building on Appsmith isn't used to compete with FusionCharts.\nPlease be aware that the license doesn't include permission to use Fusion Maps. If you want to use this product, you may need to obtain a separate license.\n:::\n\nAdd to canvas\nTo add a chart widget to your canvas, drag a chart widget from a widget pane available on the left navigation bar.\nNavigate to PAGES\u2014> Select Widget Tab\u2014> Write \u201cchart\u201d in the search bar\u2014> Drag the widget on the canvas.\n\n:::info\nYou can move the chart widget and position it on the screen according to your convenience.\n:::\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\n:::info\nEnsure that you select the widget to access its properties on the sidebar to the right.\n:::\nThe properties pane follows the same structure for most of the widgets and includes or excludes properties not specific to the selected widget.\nWidget properties\nThese properties allow you to edit the Chart widget. These properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property                     | Description                                                                                                                                                                                                                           |\n| ---------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Series Title                    | Sets the title of the current Chart series.\n| Series Color                    | Sets the color of the current Chart series.\n| Series Data                    | Sets the data of the current Chart series.\n| Title                    | Sets the text that appears at the top of the chart as a title.                                                                                                                                                                     |\n| Chart Type               | Sets the type of Chart used to display data. Choose one of the charts from the available options, or create a custom chart (available from FusionCharts).              |\n| Visible                  | Controls widget's visibility on the page. When turned off: The widget won't be visible when the app is published. It appears translucent when in Edit mode.                                                                        |\n| Animate Loading          | When turned off, the widget loads without any skeletal animation. You can use a toggle switch to turn it on/off. You can also turn it off/on using javascript by enabling the JS label next to it.                                |\n| Allow Scroll             | Allows you to enable a scroll bar to scroll the contents of the chart.                                                                                                                                                                |\n| x-axis Label             | Sets the text which appears as a label for the x-axis.                                                                                                                                                                                |\n| y-axis Label             | Sets the text which appears as a label for the y-axis.                                                                                                                                                                                |\n| x-axis Label Orientation | Sets the size/rotation behavior for the x-axis label text. Chose from Auto, Slant, Rotate, or Stagger.                                                                                                                                |\n| Adaptive Axis            | Determines the scaling behavior of the y-axis. OFF: The y-axis begins at zero and spans to an upper limit based on the data points; ON: The y-axis starting and ending values are both determined based upon the data points. |\nGeneral\nYou can choose the properties under this head to name, show/hide, chart type, or animate the loading of the widget.\nLet\u2019s deep dive into the properties available under this head.\nName of Widget\nAs soon as you select the widget, you can see an editable box available on top of the properties pane.\nYou can use the default name in the box or provide a meaningful name to the widget. You\u2019ll also see the default naming convention follows the pattern WidgetType followed by a number.\n:::tip\nIt\u2019s advisable to rename the widget to give some meaningful name. It makes it easy to pass parameters by using the widget name to the APIs or queries.\n:::\nTitle of Widget\nWhen you are working with data, its crucial to understand what type of data it is. A title given to the chart lets you identify the data. It's especially beneficial to have multiple charts and refer them with names while presenting the data. With this property, you can provide a meaningful title to your chart.\nChart series\nUsing the chart series property, you can populated the chart with data and customize it. This allows you to add multiple sets of data to the chart and change various aspects of its appearance, such as the colors or labels, to make it more informative and visually appealing.\n\nSeries title\nThis property allows you to specify the name of the chart series. This can help you organize and label your data more effectively, making it easier to interpret and understand.\nSeries color\nThis property lets you to set the color of the data series on the chart. Currently, this only works with hexadecimal color codes. Additionally, this property can't be used with pie charts, because the concept of series color isn't applicable to pie chart.\nSeries data\nThis property allows you to set the data for the current chart series. It also enables you to connect the chart to a datasource (API or database query) and automatically populate the chart with that data. This can be a useful feature if you want to dynamically update the chart with real-time or changing data.\nChart type\nAppsmith platform offers several quick and easy ways to represent your data. With the Chart Type property, you can select one of the following types to visualize your data:\n\nLine Chart\nBar Chart\nPie Chart\nColumn Chart\nArea Chart\nCustom Chart\n\nLine chart\nA line chart represents the data by connecting the individual data points to form a line. It showcases the relationship between two sets of values and where one depends on the other. It shows how the value changes over time or how the different values change over time relative to each other.\nFor example, you are working on defect tracking for a project and want to express the data to visualize bugs raised, closed, and the active bugs that the team is working on for your sprint. You can group the defects raised in these categories and use a line chart to show bugs introduced for a 5-day window.\nLet\u2019s use a line chart to visualize the data.\n\nAs you can see in the video, you can use the `Chart Series` property head to supply the data and details related to identifying the data points.\n\n`Series Title` - the name of the series. In the example preceding, it's Total Bugs.\n`Series Data` - stores the data points for the total bugs.\n`X-axis Label` - to define a title for the x-axis.\n`Y-axis Label` - to define a title for the y-axis.\n\nTo get a comparative study, you can add data for each category: bugs raised, active bugs, and closed bugs. To add more series, click the button `+Add Series` and embed the data into `Series Data`, as shown in the video below.\n\nSimilar to cumulative open, you can also add details for active bugs.\n\nIn the series data, you can also bind it to fetch the defect data from an API/Query.\n\nHere, you saw that you fetched the data from an API call by using a mustache sign `GetClosedDefectCountFromAPI` and you can use as below:\n`{{GetClosedDefectCountFromAPI.data}}`\n:::tip\nWhen doing a comparative chart analysis, you can plot different data points to analyze their behavior in the same course of time by supplying the series data.\n:::\nBar chart\nA bar chart represents data points in the form of rectangles. You can use a bar chart to show comparisons between different groups or categories of data. Bar charts measure change over time.\n:::info\nExcept for the Custom Chart Type, you can change from one type of chart to another by selecting a different chart type.\n:::\nFor a bar chart also, you can add the data for the `x` and `y` axes and add them to series data.\nYou can add more series by clicking the `+Add Series` button and plot data points for a comparative study.\n\nPie chart\nA pie chart represents data points in a circle divided into slices. It designates the numerical proportions between the data points. Unlike bar or line charts, pie charts don't show changes over time. Each slice depicts the percentage occupied in a whole circle.\n:::info\nYou can only use a single series of data to plot a pie chart.\n:::\n\nColumn chart\nA column chart represents the change over time between different categories and represents the data points in the form of rectangles. In a column chart, groups are organized along the horizontal axis and values on the vertical axis.\n\n:::info\nThe main difference between a bar chart and a column chart is how the data is represented on the axis. A bar chart represents data horizontally: the values on the x-axis and categories on the y-axis. In contrast, a column chart represents the values on the y-axis and categories on the x-axis.\n:::\nLike bar charts for column charts also, you can add more categories by clicking the `+Add Series` button.\nArea chart\nAn area chart is a special data segment type of line chart where the data points are connected to form a line, and the space below the line is also filled to show the area occupied by a category.\nArea graphs effectively represent the fall and rise of data series over time.\n\nLike a line chart for an area chart also, you can add more categories and their data by clicking the `+Add Series` button.\nCustom chart\nAppsmith integrates with FusionCharts and provides a wide array of chart types that you can use as part of a custom chart.\nYou can select Custom Chart from the Chart Type dropdown to initialize it. On selecting the Custom Chart type, you can see a property Custom Fusion Chart where you can define the configuration of the FusionCharts.\n:::info\nFusionCharts offers almost 100+ variants. You can learn more about the charts from the FusionCharts official docs here.\n:::\nA custom chart configuration needs data in the form of two keys: type and datasource.\ntype\nThe type is used to define the chart type recognized by the FusionCharts. You can get a list of all the supported types available on FusionCharts.\ndatasource\nThe datasource defines the customization options and the data points to create a chart.\nIt has two attributes chart and data. The chart object can customize the chart and includes options like caption, xAxisName, and yAxisName.\nThe data attribute represents the data in an array format with the key-value pairs as `[{\u201clabel\u201d: \u201cstring value\u201d, \u201cvalue\u201d: \u201cstring value\u201d}]`\nBelow is an example configuration for the Custom Fusion Chart property:\n`{\n  \"type\": \"\",\n  \"dataSource\": {\n    \"chart\": {},\n    \"data\": []\n  }\n}`\nLet\u2019s take an example to create custom Fusioncharts.\n\nAs you can see, you can choose the `Custom Chart` option from the `Chart Type` property. Once you select the custom chart type, you can see a new property `Custom Fusion Chart`.\n:::tip\nYou can embed the configuration into the custom fusion chart property or can add an API/query data by using a mustache syntax to add the required configuration.\n:::\nTo plot a column chart in a 2-dimensional look and feel, you can use the configuration as below:\n`{\n  \"type\": \"column2d\",\n  \"dataSource\": {\n    \"chart\": {\n      \"caption\": \"Monthly Revenue for the year 2021\",\n      \"xAxisName\": \"Month\",\n      \"yAxisName\": \"Revenue\",\n      \"theme\": \"fusion\"\n    },\n    \"data\": [\n      {\n        \"label\": \"Jan\",\n        \"value\": 42000\n      },\n      {\n        \"label\": \"Feb\",\n        \"value\": 810000\n      },\n      {\n        \"label\": \"Mar\",\n        \"value\": 72000\n      },\n      {\n        \"label\": \"Apr\",\n        \"value\": 55000\n      },\n      {\n        \"label\": \"May\",\n        \"value\": 91000\n      }\n    ]\n  }\n}`\nIn the preceding code snippet, you\u2019ll see that you plotted a column chart to showcase the monthly revenue pattern for last year, say - 2021.\nSay you have multiple sister companies under your business name and are targeting to showcase the monthly revenue chart for Harry\u2019s SuperMart. In this case, you can use `subCaption` to define the company name.\n`\u201csubCaption\u201d: \"Harry's SuperMart\"`\n\nThe revenue displayed is in USD($), and in that case, you can choose a series (`y-axis`) to show `$` as a prefix. You can use `numberPrefix` and add the dollar($) sign.\n`\u201cnumberPrefix\": \"$\"`\n\nYou have a monthly target revenue of say $70,000 and would want to plot it in the chart. You can use `trendlines` to add this detail to your chart.\n`\"trendlines\": [\n    {\n      \"line\": [\n        {\n          \"startValue\": \"700000\",\n          \"valueOnRight\": \"1\",\n          \"displayvalue\": \"Monthly Target\"\n        }\n      ]\n    }\n  ]`\n\n:::info\n`trendlines` are vertical or horizontal lines that help users understand the emphasized data point. For example, a monthly target.\n:::\nExample custom charts\nBelow are a few examples of custom charts that you can use as a starting point.\nPareto 3D chart\nA Pareto chart is a type of bar graph. It represents the frequency of change. The bar graphs follow a pattern from the longest bars on the left to the shortest on the right. Pareto charts are used to identify the areas for improvement.\nLet\u2019s take an example of a Pareto 3D chart to visualize the data by combining a line chart and column chart.\n\n:::info\nYou can change the type of chart by changing the type in the configuration. For example, `\u201ctype\u201d: \u201cpareto3d\u201d`.\n:::\nBelow is a sample Pareto Chart with a 3-dimensional look and feel.\n`{\n  \"type\": \"pareto3d\",\n  \"dataSource\": {\n    \"chart\": {\n      \"caption\": \"Common Car Damages\",\n      \"subcaption\": \"PitStop Service Station\",\n      \"xaxisname\": \"Reported Cause\",\n      \"yaxisname\": \"No. of Occurences\",\n      \"theme\": \"fusion\"\n    },\n    \"data\": [\n      {\n        \"label\": \"Burned out bulb\",\n        \"value\": \"41\"\n      },\n      {\n        \"label\": \"Discharged Battery\",\n        \"value\": \"20\"\n      },\n      {\n        \"label\": \"Blown fuse\",\n        \"value\": \"14\"\n      },\n      {\n        \"label\": \"Worn brake pads\",\n        \"value\": \"11\"\n      },\n      {\n        \"label\": \"Flat\",\n        \"value\": \"9\"\n      },\n      {\n        \"label\": \"Others\",\n        \"value\": \"5\"\n      }\n    ]\n  }\n}`\nYou can add the below code snippet to have a customized tooltip.\n`\"plottooltext\": \"$label accounted for &lt;b>$datavalue&lt;/b> cars which came for repairs\"`\nPie 3D chart\nYou can also add a Pie 3D chart with the help of fusion charts.\nTake a quick look at the video to know-how.\n\nYou can use the following sample code snippet to add to the custom fusion chart property and plot a pie chart with a 3-dimensional look and feel.\n`{\n  \"type\": \"pie3d\",\n  \"dataSource\": {\n    \"chart\": {\n      \"caption\": \"Recommended Portfolio Split\",\n      \"subcaption\": \"For a net-worth of $1M\",\n      \"showvalues\": \"1\",\n      \"showpercentintooltip\": \"0\",\n      \"numberprefix\": \"$\",\n      \"enablemultislicing\": \"1\",\n      \"theme\": \"fusion\"\n    },\n    \"data\": [\n      {\n        \"label\": \"Equity\",\n        \"value\": \"300000\"\n      },\n      {\n        \"label\": \"Debt\",\n        \"value\": \"230000\"\n      },\n      {\n        \"label\": \"Bullion\",\n        \"value\": \"180000\"\n      },\n      {\n        \"label\": \"Real-estate\",\n        \"value\": \"270000\"\n      },\n      {\n        \"label\": \"Insurance\",\n        \"value\": \"20000\"\n      }\n    ]\n  }\n}`\nFor a sliced view, you can use a property `enablemultislicing`. Below is a code snippet that you can add to the chart property to have this effect.\n`\"enablemultislicing\": \"1\"`\nStacked Column 3D Chart\nA Stacked Column represents a part of the whole comparison over time across a different set of data. For example, you can use a fusion chart on Appsmith to plot a stacked column chart in a 3-dimensional view.\n\nYou can use the below code snippet to add and modify to see how a stacked column 3D chart works.\n`{\n  \"type\": \"stackedcolumn3d\",\n  \"dataSource\": {\n    \"chart\": {\n      \"caption\": \"Deaths reported because of insect bites in India\",\n      \"yaxisname\": \"Number of deaths reported\",\n      \"subcaption\": \"(As per government records)\",\n      \"plottooltext\": \"&lt;b>$dataValue&lt;/b> people died because of $seriesName in $label\",\n      \"showsum\": \"0\",\n      \"theme\": \"fusion\"\n    },\n    \"categories\": [\n      {\n        \"category\": [\n          {\n            \"label\": \"1994\"\n          },\n          {\n            \"label\": \"1995\"\n          },\n          {\n            \"label\": \"1996\"\n          },\n          {\n            \"label\": \"1997\"\n          }\n        ]\n      }\n    ],\n    \"dataset\": [\n      {\n        \"seriesname\": \"Hymenoptera\",\n        \"data\": [\n          {\n            \"value\": \"15622\"\n          },\n          {\n            \"value\": \"10612\"\n          },\n          {\n            \"value\": \"15820\"\n          },\n          {\n            \"value\": \"26723\"\n          }\n        ]\n      },\n      {\n        \"seriesname\": \"Diptera\",\n        \"data\": [\n          {\n            \"value\": \"3622\"\n          },\n          {\n            \"value\": \"2612\"\n          },\n          {\n            \"value\": \"5820\"\n          },\n          {\n            \"value\": \"6723\"\n          }\n        ]\n      }\n    ]\n  }\n}`\nVisible\nYou can use Visible to show or hide the widget. By default, visible is enabled, so the widget is visible on page load. This property particularly comes in handy when you want to hide/show a widget programmatically or hide a widget on page load and then show it when a particular condition or data is available.\nThere are two ways in which you can manipulate this property.\n\nEnable the `JS` label next to Visible and write the javascript code that can handle the show and hide of the widget by manipulating visible property.\nWrite your own JSObject and javascript code to link to any other widget and manage the show/hide.\n\n:::tip\nYou can get the reference of visible property by using `{{widget_name.isVisible}}` in your code.\n:::\nFor example, let\u2019s drag a checkbox widget `Checkbox1` onto the canvas and bind it to the Visible property of the chart widget by enabling the `JS` label next to it. Add the following javascript code in the Visible property.\n`{{Checkbox1.isChecked}}`\n\nWhen you tick the checkbox, it enables the Visible property, which makes the chart visible in the app.\nBinding properties\nThese properties allow you to bind your Chart widget with any other widget in queries or JS objects. The following table lists all the binding properties.\n| Binding Property      | Description                                                                                                                                               |\n| --------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| isVisible         | Reflects the state of the widget's Visible setting.                                                                                           |\n| selectedDataPoint | Contains an object which represents the data point that the user has most recently clicked (object containing: x, y, seriesTitle). Default undefined. |\n| xAxisName         | Contains the text of the Chart's x-axis Label setting.                                                                                     |\n| yAxisName         | Contains the text of the Chart's y-axis Label setting.                                                                                     |\nEvents\nYou might want to fetch more data based on clicks on a chart. Events on the chart capture the user interaction.\n| Event                | Description                                                                                                                                                                                                                                                       |\n| -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| onDataPointClick | Sets an action to take place when the user clicks on a data point. Can be set from the GUI list of common actions (See a list of supported actions.), or you can define a custom javascript function to call instead. |\nStyles\n| Style Property    | Description                                                                                                                                                                      |\n| ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Border Radius | Rounds the corners of the widget's outer edge. With JS enabled, this accepts valid CSS border-radius values. |\n| Box Shadow    | Casts a drop shadow from the frame of the widget. With JS enabled, this accepts valid CSS box-shadow values.    |",
    "tag": "appsmith"
  },
  {
    "title": "Iframe",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/iframe.md",
    "content": "\ndescription: Iframe widget is used to display iframes in your app.\nIframe\n\n:::info\n**Ensure you have your Iframe widgets sandboxed. By default, this is enabled for all Appsmith instances. See Security for more information.\n:::\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget properties\nThese properties allow you to edit the Iframe widget. All these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property            | Description                                                                                                                                                                                            |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| URL             | Sets the URL of the page to load within the iframe.                                                                                                                                                    |\n| srcDoc          | Provide HTML (and CSS within `<style>` tags) to render within the iframe instead of using a URL. When this property has a value, the widget's URL property is ignored.                         |\n| Title           | Sets a title for the iframe content. This title appears in the iframe's HTML tag (`<iframe ... title=\"MyTitle\">`) and on the widget's internal `IFrame1.title` property.                               |\n| Animate Loading | When turned off, the widget loads without any skeletal animation. You can use a toggle switch to turn it on/off. You can also turn it off/on using javascript by enabling the JS label next to it. |\nBinding properties\nThese properties allow you to bind your Iframe widget with any other widget in queries or JS objects. The following table lists all the binding properties.\n| Binding Property | Description                                                                                                                                                                                                                                                                                                                                      |\n| ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| isVisible    | Reflects the state of the widget's Visible setting (boolean).                                                                                                                                                                                                                                                                                 |\n| message      | Contains a message received from the embedded page via the JS postMessage() method. It may be of any type. The property is `undefined` before a message is received. |\n| source       | Contains the URL of the embedded page (string). Doesn't reflect the content set in the `srcDoc` property.                                                                                                                                                                                                      |\n| title        | Contains the title of the iframe as set in the widget's Title property (string).                                                                                                                                                                                                                                                           |\nLet\u2019s take a closer look at the message property.\nMessage\nThe iframe widget listens for messages sent from the page embedded within it. When this page sends data via the Javascript postmessage() function, Appsmith receives the message and exposes its content to the user on the iframe\u2019s `message` property.\nThe message content may be of any type; before any message is received, this property is undefined.\nYou can try out the message property by following the steps below:\n\n\n\nOn a blank canvas, drop a new iframe widget.\n\n\nEmbed a page that's able to send a message with `postMessage()`. In the iframe widget\u2019s settings, copy and paste the following snippet into its srcDoc property:\n\n\n```html\n   \n\n\n\n```\nYou\u2019ve created a simple HTML document in the iframe containing a text input, a button, and a script to handle sending the message.\n\n\nDrag and drop a new Text widget onto the canvas, and set its Text property to `{{Iframe1.message}}`.\n\n\nType a string into the iframe\u2019s input box and click the \"Send\u201d button. You should see your Text widget update to contain the string that you sent from the iframe.\n\n\n:::info\nWhen a message is received, Appsmith also executes any code or actions set within the iframe\u2019s onMessageReceived event. Try it out \u2013 set an action within the `onMessageReceived` event, and send another message to watch the results.\n:::\nEvents\nYou can define functions that's called when these events are triggered in the widget.\n| Action                | Description                                                                                                                                                                                                                                                                     |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| onURLChanged      | Sets the action to take place when the widget's URL is changed. It can be set from the GUI list of common actions (examples here), or you can define a custom JavaScript function to call instead.                                     |\n| onSrcDocChanged   | Sets the action to take place when the `srcDoc`property is changed. It can be set from the GUI list of common actions (examples here), or you can define a custom JavaScript function to call instead. |\n| onMessageReceived | Sets the action to take place when a `postMessage` event is received from the embedded page. It can be set from the GUI list of common actions (examples here), or you can define a custom JavaScript function to call instead.        |\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Style Properties   | Description                                                                                                                                                                      |\n| ------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Border Color   | Sets the color of the widget's border. Accepts valid CSS color values.                                               |\n| Border Opacity | Sets the opacity of the widget's border. Accepts a number (percentage).                                                                          |\n| Border Width   | Sets the width of the widget's border. Accepts a number (pixels)..                                                                                  |\n| Border Radius  | Rounds the corners of the widget's outer edge. With JS enabled, this accepts valid CSS border-radius values. |\n| Box Shadow     | Casts a drop shadow from the frame of the widget. With JS enabled, this accepts valid CSS box-shadow values.    |\nFurther reading",
    "tag": "appsmith"
  },
  {
    "title": "Switch",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/switch.md",
    "content": "Switch\nThe Switch is a simple UI widget you can use when you want users to make a binary choice.\n\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the widget. All these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property             | Description                                                                                                                      |\n| -------------------- | -------------------------------------------------------------------------------------------------------------------------------- |\n| Default Selected | This value is a boolean that is set to true if the switch is turned on.                                                          |\n| Visible          | Controls widget's visibility on the page. When turned off, the widget will not be visible when the app is published              |\n| Disabled         | Disables input/selection to the widget. The widget will remain visible to the user but user input/selection will not be allowed. |\n| Animate Loading  | Allows you to control a widget\u2019s animation on the page load.                                                                     |\n| Height        | It configures how a widget\u2019s height reacts to content changes. It has three possible configurations:Fixed: The height of the widget remains as set using drag and resize.Auto Height: The height of the widget reacts to content changes. Auto Height with limits: Same as Auto height, with a configurable option to set the minimum and maximum number of rows that can be occupied by the widget.                                      |\nBinding Properties\nThese properties help you share values between widgets and also allow you to easily access the widget property within Queries or JS functions.\n| Property         | Description                                                                  | Code Snippet                   |\n| ---------------- | ---------------------------------------------------------------------------- | ------------------------------ |\n| isDisabled   | This value is a boolean that is set to true if the switch is disabled.       | `{{widget_name.isDisabled}}`   |\n| isSwitchedOn | This value is a boolean that is set to true if the switch is turned on.      | `{{widget_name.isSwitchedOn}}` |\n| isVisible    | This value is a boolean that is set to true if the switch is set as visbile. | `{{widget_name.isVisible}}`    |\nEvents\nThey are a set of actions that you can perform on the widget. The following table lists the actions:\n| Events       | Description                                                                                                                          |\n| ------------ | ------------------------------------------------------------------------------------------------------------------------------------ |\n| onChange | Sets the action to be run when the user toggles the switch. See a list of supported actions |\nLabel\nThe property hosts a group of configurations that you can use to associate a display name and define a placement for the widget. These properties are usually useful when you want to design forms that follow a defined alignment for your form fields and give a professional look to your forms. Below are the properties that you can use:\n| Label         | Description                            |\n| ------------- | -------------------------------------- |\n| Label     | Sets the label of the switch.          |\n| Position  | Sets the label position of the widget. |\n| Alignment | Sets the alignment of the widget.      |\n| Label Style          | Description                                              |\n| -------------------- | -------------------------------------------------------- |\n| Text Color       | Allows you to set text color for the label.              |\n| Text Size        | Allows you to set the size of the label.                 |\n| Label Font Style | Allows you to choose a font style, i.e., bold or italic. |\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Style            |                                          |\n| ---------------- | ---------------------------------------- |",
    "tag": "appsmith"
  },
  {
    "title": "Code Scanner",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/code-scanner.md",
    "content": "Code Scanner\nBarcodes and QR codes are now found on a wide range of goods, including health bands, rental cars, checked baggage, and clothing purchased from supermarkets or retail stores. They each identify a thing or a person and encode significant information.\nThe Code Scanner widget allows you to scan a variety of barcodes and QR codes. Using this widget, you'll be able to enhance internal business operations and provide excellent customer service.\n\nUsage\nQR/Barcodes have taken off because they offer a clear and fast return on investment. It eliminates manual entry of product information at receiving, meaning there are far fewer opportunities for error. You can use a code scanner in the below scenarios:\n\nWarehouse- Companies need to know not just their current inventory levels, but the location of those products, always. With the help of a code scanner widget, employees can keep track of their warehouse inventories. They can use a code scanner in their app to scan codes rather than manually entering them.\nAsset Management- The most widely used system by businesses for tracking equipment, vehicles, and computers to support their everyday operations is the usage of barcodes. With the code scanner widget, you can keep track of equipment and the location of the assets and keep any pertinent maintenance and repair records.\nLogistics and Transportation industries- Effective track and trace methods offer logistics teams the ability to locate, track, and identify objects in real-time, providing better business insight and quicker problem-solving. QR-based tracking eliminates paperwork, reduces errors, and increases productivity.\n\nSupported QR/Barcode formats\nThe following formats for QR and barcodes are supported:\n| 1D product | 1D industrial | 2D          |\n| ---------- | ------------- | ----------- |\n| UPC-A      | Code 39       | QR Code     |\n| UPC-E      | Code 128      | Data Matrix |\n| EAN-8      | ITF           | Aztec       |\n| EAN-13     | RSS-14        | PDF 417     |\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\n| Property                                         | Type                 | Description                                                                                                                                                               | Code Snippet                 |\n|--------------------------------------------------|----------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------|\n| Scanner Layout | Formatting           | Sets the appearance and behaviour of the widget.                                                                                                                           | NA                           |\n| Text                     | Formatting           | Sets the label text of the widget.                                                                                                                                        | NA                           |\n| Visible                   | Binding & Formatting | Controls widget's visibility on the page. When turned off, the widget won't be visible when the app is published. Learn more about Visible Property|\nScanner layout\nThe behavior and appearance of the code scanner can be configured through the scanner layout property. If set to `Always on`, the scanner will be continuously visible and scanning. Alternatively, if `Click to Scan` is chosen, the scanner will be shown inside a modal and will begin scanning when the user presses the button.\n\nText\nText/Label is a widget property that lets you set the text inside the button, describing the function it performs. It displays static text on the button. For example, you can enter \"Scan Menu\" as the label for a button that scans the restaurant menu.\n\nValue\nValue is a binding property that fetches the response from the scanned code. To bind the value of the code scanner widget to another widget, open the property pane, and add the code snippet given below:\n`{{<your_widget>.value}}`\nFor example, lets take a Code Scanner widget (`CodeScanner1`) and bind its value to a text widget. Drag a text widget onto the canvas and add the following code:\n`{{CodeScanner1.value}}`\n\nEvents\nThey're' a set of actions that you can perform on the widget. For example, you can navigate to another page, show alert messages, open and close modals, and store data in local storage.\n| Event              | Description                                                                                                                                                 |\n| ------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| onCodeDetected | Triggers an action when a valid code is detected. See a list of supported actions. |\nonCodeDetected\nWhen a valid barcode or QR code is detected, this event triggers an action. The Appsmith framework allows triggering actions for widget events and inside JS Objects. Lets take an example to understand how the `onCodeDetected` event works.\nIn this example, the code response would be displayed using the Modal widget.\n\nSet the onCodeDetected event to open a New Modal, and choose to Create New.\nThis would open up a new modal; lets drag the text widget into the modal.\nIn the property section, add the following code:\n\n`{{CodeScanner1.value}}`\nWhenever a valid code is detected, a modal window displaying the code response shows up. The video below demonstrates how to achieve that.\n\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Style             | Description                                            |\n| ----------------- | ------------------------------------------------------ |\n| Icon          | Sets an icon to be included in the input field.        |\n| Position      | Sets the label position of the widget.                 |\n| Placement     | Sets the label alignment of the widget.                |\n| Button Color  | Allows you to set color for the button.                |\n| Border Radius | Allows you to define curved corners.                   |\n| Box Shadow    | Allows you to choose from the available shadow styles. |\nWhat's next\nThe following resources may come handy as you need to learn new tricks:\n\nCore Concepts\nAppsmith Framework\nJavaScript Editor\n\nTroubleshooting",
    "tag": "appsmith"
  },
  {
    "title": "Document Viewer",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/document-viewer.md",
    "content": "Document Viewer\nDocument viewer widget is used to show documents on a page. The widget currently supports the following extensions-\n\n.txt\n.pdf\n.ppt (not supported by base64)\n.pptx\n.docx\n.xlsx\n\n\nDocuments can be populated from a data source like API or Query in which the incoming data points to the URL of the file.\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the Document Viewer widget. All of these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property            | Description                                                                                                                                                                                            |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Document Link   | Source URL of the document, which must be one of the supported file types (see top of page). The file extension must be present as part of the URL.                                                    |\n| Visible         | Controls widget's visibility on the page. When turned off: The widget will not be visible when the app is published. It appears translucent when in Edit mode.                                         |\n| Animate Loading | When turned off, the widget will load without any skeletal animation. You can use a toggle switch to turn it on/off. You can also turn it off/on using javascript by enabling the JS label next to it. |\nGenerating PDF Documents\nGenerating reports or documents from a dataset is vital in many applications. The video below shows how to generate a PDF report on Appsmith.\n\nYou can also generate a PDF document using Carbone.io:",
    "tag": "appsmith"
  },
  {
    "title": "Switch Group",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/switch-group.md",
    "content": "Switch Group\nSwitch group widget captures user inputs from a set of binary choices. This widget captures multiple choices.\n\nDisplaying Data\nSwitch group\u2019s options can be populated from a data source like an API / Query by transforming the incoming data to an array of \\(label, value\\). The transformation can be performed using javascript. So if the data is an array, we can transform it using the Array.map function.\n`// Query1.data is assumed to be an array here\n{{ Query1.data.map((row) => {\n      return { label: row.name, value: row.id }\n   })\n}}`\nFiltering Data\nA Switch Group widget can show a set of binary choices for users. The selected values can be passed to an API using  `{{ SwitchGroup1.selectedValues }}` .\nForm Submission\nSwitch group widgets can capture a fixed set of choices for the user like, showing and hiding or enabling and disabling.\n:::info\nSome forms need to be pre-filled data from a table or API. We can bind the data to the default text property to enable this.\n:::\n`{{Table1.selectedRow.subscription_choices}}\n/**\n* Binding this to the default option will update the selected choices\n* of the Switch group widget with the subscription_choices of the selected row in Table1\n*/`\nRead more about submitting Input data to an API below.\nSending widget data in the post body\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the widget. All these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property                    | Description                                                                                                                                                                                |\n| --------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Placeholder             | Sets the Placeholder of the multi-select widget.                                                                                                                                           |\n| Default Selected Values | Sets a default option that will be captured as user input unless it is changed by the user. Multiple values can be provided as CSV or an array of value strings.                           |\n| Inline                  | Whether the checkbox buttons are to be displayed inline horizontally.                                                                                                                      |\n| Required                | Makes input of the widget mandatory.                                                                                                                                                       |\n| Visible                 | Controls widget's visibility on the page. When turned off, the widget will not be visible when the app is published                                                                        |\n| Disabled                | Disables input/selection to the widget. The widget will remain visible to the user, but user input/selection will not be allowed.                                                          |\n| Animate Loading         | Control\u2019s widget\u2019s loading animation on the page. When turned off, the widget will load without any skeletal animation. This can be controlled with JS until all the widgets are rendered. |\n| Alignment               | Controls the switch alignment on the page. Switches can be left or right-aligned.                                                                                                          |\n| Height        | It configures how a widget\u2019s height reacts to content changes. It has three possible configurations:Fixed: The height of the widget remains as set using drag and resize.Auto Height: The height of the widget reacts to content changes. Auto Height with limits: Same as Auto height, with a configurable option to set the minimum and maximum number of rows that can be occupied by the widget.                                      |\nBinding Properties\nThese properties help you share values between widgets and also allow you to easily access the widget property within Queries or JS functions\n| Property            | Description                                                                                                                                                              | Code Snippet                     |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------------------------------- |\n| Selected Values | An array of values of the options that are selected in a switch group. This value changes if the default values of the switch group change or the user changes a switch. | `{{widget_name.selectedValues}}` |\nEvents\nThey are a set of actions that you can perform on the widget. The following table lists the actions:\n|                       | Description                                                                                                                                            |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| onSelectionChange | Sets the action to be run when the user turns any of the switches on or off. See a list of supported actions. |\nLabel\nThe property hosts a group of configurations that you can use to associate a display name and define a placement for the widget. These properties are usually useful when you want to design forms that follow a defined alignment for your form fields and give a professional look to your forms. Below are the properties that you can use:\n| Label         | Description                                                  |   |\n| ------------- | ------------------------------------------------------------ | - |\n| Text      | Sets the label of the widget.                                |   |\n| Position  | Sets the label position of the widget.                       |   |\n| Alignment | Sets the label alignment of the widget.                      |   |\n| Width     | Sets the label width of the widget as the number of columns. |   |\nLet's understand the label properties in detail:\nText\nIt allows you to set the display name for the Switch Group. For example, if you want the user to select a payment option, you can enter the text as \"Payment Options.\"\n:::info\nYou can leave the text empty if you don't want any display name for your Switch Group widget.\n:::\nPosition\nIt allows you to specify the placement of the label. You can select one of the available options:\n\nTop - It allows you to align the text at the top of the Switch Group.\nLeft - It aligns the text to the left of the Switch Group. When you select Left alignment, you get additional settings that you can use to control the alignment and define the text's width.\nAlignment - With the help of alignment, you can define the placement of the text in accordance with the position of the Switch Group. You can choose:\nLeft - It aligns the text to the widget's left boundary that is away from the Switch Group.\nRight - It aligns the text closer to the Switch Group.\n\n\nWidth - With the help of width, you can define the number of columns in the grid that surrounds the widget. You can specify how close or far the text can be placed to the Switch Group.\nAuto - It automatically adjusts the position of the text based on the Switch Group's height.\n\n:::info\nColumns are the dashed lines (-----) that surround a widget when you try to drag and drop it on the canvas.\n:::\n\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Style                | Description                                              |\n| -------------------- | -------------------------------------------------------- |\n| Label Text Color | Allows you to set text color for the label.              |\n| Label Text Size  | Allows you to set the size of the label.                 |\n| Label Font Style | Allows you to choose a font style, i.e., bold or italic. |",
    "tag": "appsmith"
  },
  {
    "title": "Tree-select",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/tree-select.md",
    "content": "Tree-select\nA tree-select widget captures user inputs from a specified list of permitted options in which each option can then have child options associated with it.\n\nDisplaying Data\nTree-select options can be populated from a data source like an API / Query by transforming the incoming data to an array of \\(label, value\\). The transformation can be performed using javascript. So if the data is an array, we can transform it using the Array.map function.\n`// Query1.data is assumed to be an array here\n{{ Query1.data.map((row) => {\n      return { label: row.name, value: row.id, children: {label: row.child.label, value: row.child.value}}\n   })\n}}`\nFiltering Data\nA Tree-select widget can filter a dataset based on the user's input. The selected value can be passed to an API using`{{ TreeSelect1.selectedOptionValue }}` .\nForm Submission\nTree-select widgets can capture from a fixed set of options inside a form such as gender, role, status.\n:::info\nSome forms need to be pre-filled data from a table or API. We can bind the data to the default property to enable this\n:::\n`{{ Table1.selectedRow.gender }}\n/**\n* Binding this to the default option will update the selected option\n* of the TreeSelect widget with the gender of the selected row in Table1\n*/`\nRead more about submitting Input data to an API below.\nSending widget data in the post body\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the widget. All these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property                  | Description                                                                                                                                                                                                                                                                                 |\n| ------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Options               | It lets you set labels and values for different items/options in the list of the tree select widget. Options must be specified as an array of objects with a label and value property. The tree structure can be added to any option by adding the children field that should be an object. |\n| Default Value         | Sets a default option that will be captured as user input unless the user changes it.                                                                                                                                                                                                       |\n| Placeholder           | Sets the Placeholder of the multi-select widget.                                                                                                                                                                                                                                            |\n| Required              | When turned on, it makes a user input required and disables any form submission until the user makes an input.                                                                                                                                                                              |\n| Visible               | Controls widget's visibility on the page. When turned off, the widget will not be visible when the app is published                                                                                                                                                                         |\n| Disabled              | Disables input/selection to the widget. The widget will remain visible to the user but user input/selection will not be allowed.                                                                                                                                                            |\n| Tooltip                             | It sets a tooltip for the widget. You can add hints or extra information about the required input from the user.    \n| Animate Loading       | Control\u2019s widget\u2019s loading animation on the page. When turned off, the widget will load without any skeletal animation. This can be controlled with JS until all the widgets are rendered.                                                                                                  |\n| Clear all Selections  | When turned on, it allows users to clear the selection, which was the default or the selection made by them.                                                                                                                                                                                |\n| Expand all by default | It shows a dropdown in an expanded state when turned on, revealing all the children options.                                                                                                                                                                                                |\n| Height        | It configures how a widget\u2019s height reacts to content changes. It has three possible configurations:Fixed: The height of the widget remains as set using drag and resize.Auto Height: The height of the widget reacts to content changes. Auto Height with limits: Same as Auto height, with a configurable option to set the minimum and maximum number of rows that can be occupied by the widget.                                      |\nBinding Properties\nThese properties help you share values between widgets and also allow you to easily access the widget property within Queries or JS functions.\n| Property                | Description                                                                                                                                                                   | Code Snippet                         |\n| ----------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n| selectedOptionValue | This is the value of the option displayed in a Single Select dropdown. It changes if the default value of the dropdown changes or the user selects an option.                 | `{{TreeSelect.selectedOptionLabel}}` |\n| selectedOptionLabel | This is the Label of the option displayed in a Tree-Select dropdown. This label changes if the default value of the dropdown changes or the user changes an option selection. | `{{TreeSelect.selectedOptionLabel}}` |\n| isDisabled          | This property indicates whether the widget is disabled or not.                                                                                                                | `{{TreeSelect.isDisabled}}`          |\n| isValid             | This property indicates whether the widget is valid or not.                                                                                                                   | `{{TreeSelect.isValid}}`             |\n| isVisible           | This property indicates whether the widget is visible or not.                                                                                                                 | `{{TreeSelect.isVisible}}`           |\nEvents\nThey are a set of actions that you can perform on the widget. The following table lists the actions:\n| Events             | Description                                                                                                                 |\n| ------------------ | --------------------------------------------------------------------------------------------------------------------------- |\n| onOptionChange | Triggers an action when a user selects an option. See a list of supported actions. |\n| onDropdownOpen | Sets the action to be run when the user opens the dropdown. See a list of supported actions. |\n| onDropdownClose | Sets the action to be run when the user opens the dropdown. See a list of supported actions. |\nLabel\nThe property hosts a group of configurations that you can use to associate a display name and define a placement for the widget. These properties are usually useful when you want to design forms that follow a defined alignment for your form fields and give a professional look to your forms. Below are the properties that you can use:\n| Label         | Description                                                  |\n| ------------- | ------------------------------------------------------------ |\n| Text      | Sets the label of the widget.                                |\n| Position  | Sets the label position of the widget.                       |\n| Alignment | Sets the label alignment of the widget.                      |\n| Width     | Sets the label width of the widget as the number of columns. |\nLet's understand these properties in detail.\nText\nIt allows you to set the display name for the Tree-select. For example, if you want the user to select a category and its subcategories of fruits, you can enter the text as \"Fruits.\"\n:::tip\nYou can leave the text empty if you don't want any display name for your Tree-select widget.\n:::\nPosition\nIt allows you to specify the placement of the label. You can select one of the available options:\n\nTop - It allows you to align the text at the top of the Tree-select.\nLeft - It aligns the text to the left of the Tree-select. When you select Left alignment, you get additional settings that you can use to control the alignment and define the text's width.\nAlignment - With the help of alignment, you can define the placement of the text in accordance with the position of the Tree-select. You can choose:\nLeft - It aligns the text to the widget's left boundary that is away from the Tree-select.\nRight - It aligns the text closer to the Tree-select.\n\n\nWidth - With the help of width, you can define the number of columns in the grid that surrounds the widget. You can specify how close or far the text can be placed to the Tree-select.\nAuto - It automatically adjusts the position of the text based on the Tree-select's height.\n\n:::info\nColumns are the dashed lines (-----) that surround a widget when you try to drag and drop it on the canvas.\n:::\n\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Style                | Description                                              |\n| -------------------- | -------------------------------------------------------- |\n| Border Radius    | Allows you to define curved corners.                     |\n| Box Shadow       | Allows you to choose from the available shadow styles.   |\n| Label Font Style | Allows you to choose a font style, i.e., bold or italic. |\n| Label Text Color | Allows you to set text color for the label.              |",
    "tag": "appsmith"
  },
  {
    "title": "Rating",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/rating.md",
    "content": "Rating\nThe Rating widget is used to perform a quick rating operation on something.\n\nUse the Rate component to rate any sort of information from the connected data source. It's customizable and features rich.\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the Rating widget. All these properties are present in the property pane of the widget. The rating widget comes with the following settings:\n| Property             | Description                                                                                                                      |\n| -------------------- | -------------------------------------------------------------------------------------------------------------------------------- |\n| Max Rating       | The total number of stars you would like to rate the information with                                               |\n| Default Rating   | Sets the default option of the rating widget                                                                                     |\n| Tooltips         | Sets the tooltip content of starts. This expects an array of strings that can describe the values of each star   |\n| Size             | The star's sizes can be varied, default is set to `Medium`                                                                       |\n| Allow half stars | When toggled, half star ratings are accepted                                                                                     |\n| Visible          | Controls widget's visibility on the page. When turned off, the widget will not be visible when the app is published |\n| Disabled         | Disables input/selection to the widget. The widget will remain visible to the user but user input/selection will not be allowed. |\n| Read Only        | Disallows user input, but the stars retain their normal styling and the star's Tooltips remain visible when the user hovers with the mouse cursor. When the Disabled setting is on, the Read Only mode is ignored. |\n| Animate Loading  | Allows you to control a widget\u2019s animation on the page load.                                                                     |\n| Height        | It configures how a widget\u2019s height reacts to content changes. It has three possible configurations:Fixed: The height of the widget remains as set using drag and resize.Auto Height: The height of the widget reacts to content changes. Auto Height with limits: Same as Auto height, with a configurable option to set the minimum and maximum number of rows that can be occupied by the widget.                                      |\nBinding Properties\nThese properties help you share values between widgets and also allow you to easily access the widget property within Queries or JS functions.\n| Property      | Description                                                                                    | Code Snippet                |\n| ------------- | ---------------------------------------------------------------------------------------------- | --------------------------- |\n| isVisible | This property indicates whether the widget is visible or not.                                  | `{{widget_name.isVisible}}` |\n| maxCount  | This property indicates the total number of stars you would like to rate the information with. | `{{widget_name.maxCount}}`  |\n| value     | This property indicates the value selected by user.                                            | `{{widget_name.value}}`     |\nEvents\nThey are a set of actions that you can perform on the widget.\n| Events       | Description                                                                                                            |\n| ------------ | ---------------------------------------------------------------------------------------------------------------------- |\n| onChange | Triggers an action when the rate is changed. See a list of supported actions. |\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Style              | Description                                                                     |\n| ------------------ | ------------------------------------------------------------------------------- |\n| Active color   | Sets the color of stars for that are provided in the default rate. |",
    "tag": "appsmith"
  },
  {
    "title": "Multi-tree-select",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/multi-tree-select.md",
    "content": "Multi-tree-select\nThe multi-tree-select widget captures the user input from a specified list of permitted options, and these options can have child options within them. It captures multiple choices.\n\nDisplaying Data\nMulti-tree-select's options can be populated from a data source like an API / Query by transforming the incoming data to an array of (label, value). The transformation can be performed using JavaScript. So if the data is an array, we can transform it using the Array.map function.\n`// Query1.data is assumed to be an array here\n{{ Query1.data.map((row) => {\n      return { label: row.name, value: row.id, children: {label: row.child.label, value: row.child.value}\n   })\n}}`\nFiltering Data\nA Multi-tree-select widget can filter a dataset based on the user's input. The selected value can be passed to an API using `{{ MultiTreeSelect1.selectedOptionValues }}` .\nForm Submission\nThe multi-tree-select widget can capture from a fixed set of options inside a form such as a gender, role, and status.\n:::info\nSome forms need to be pre-filled data from a table or API. We can bind the data to the default text property to enable this.\n:::\n`{{ Table1.selectedRow.categories }}\n/**\n* Binding this to the default option will update the selected options\n* of the MultiTreeSelect widget with the gender of the selected row in Table1\n*/`\nRead more about submitting Input data to an API below.\nSending widget data in the post body\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the Muti-tree select widget. All these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property                  | Description                                                                                                                                                                                                                |\n| ------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Mode                  | Mode to display options.                                                                                                                                                                                                   |\n| Options               | It lets you set labels and values for different items/options in the list of the multi-select widget. Options must be specified as an array of objects with a label and value property and the optional children property. |\n| Default Value         | Sets a default option that will be captured as user input unless the user changes it. Multiple values can be provided as CSV or an array of value strings for a Multi-Select dropdown.                                     |\n| Placeholder           | Sets the Placeholder of the multi-select widget.                                                                                                                                                                           |\n| Required              | When turned on, it makes a user input required and disables any form submission until input is made.                                                                                                                       |\n| Visible               | Controls widget's visibility on the page. When turned off, the widget isn't visible when the app is published.                                                                                                       |\n| Disabled              | Disables input/selection to the widget. The widget remains visible to the user but user input/selection isn't allowed.                                                                                           |\n| Tooltip                             | It sets a tooltip for the widget. You can add hints or extra information about the required input from the user.    \n| Animate Loading       | Control\u2019s widget\u2019s loading animation on the page. When turned off, the widget loads without any skeletal animation. This can be controlled with JS until all the widgets are rendered.                                 |\n| Clear All Selections  | When turned on, it allows users to clear the selection which was the default or the selection made by them.                                                                                                                |\n| Expand all by default | It shows a dropdown in an expanded state when turned on, revealing all the children options.                                                                                                                               |\n| Height        | It configures how a widget\u2019s height reacts to content changes. It has three possible configurations:Fixed: The height of the widget remains as set using drag and resize.Auto Height: The height of the widget reacts to content changes. Auto Height with limits: Same as Auto height, with a configurable option to set the minimum and maximum number of rows that can be occupied by the widget.                                      |\nBinding Properties\nThese properties allow you to bind your widget with any other widget in queries or JS objects. The following table lists all the binding properties.\n| Property                 | Description                                                                                                                                                                              |\n| ------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| options              | This property shows the values of all the options.                                                                                                                                       |\n| isVisible            | This property indicates whether the widget is visible or not.                                                                                                                            |\n| isDisabled           | This property indicates whether the widget is disabled or not.                                                                                                                           |\n| isValid              | This property indicates whether the values are valid or not.                                                                                                                             |\n| selectedOptionValues | An array of values of the options are displayed in a MultiTree-Select dropdown. This value changes if the default values of the dropdown change or the user changes an option selection. |\n| selectedOptionLabels | An array of Labels of the options are displayed in a MultiTree-Select dropdown. This label changes if the default values of the dropdown change or the user changes an option selection. |\nEvents\nThey're a set of actions that you can perform on the widget. The following table lists the actions:\n| Events             | Description                                                                                                                                    |\n| ------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------- |\n| onOptionChange | Sets the action to be run when the user selects/unselects an option. See a list of supported actions. |\n| onDropdownOpen | Sets the action to be run when the user opens the dropdown. See a list of supported actions. |\n| onDropdownClose | Sets the action to be run when the user opens the dropdown. See a list of supported actions. |\nLabel\nThe property hosts a group of configurations that you can use to associate a display name and define a placement for the widget. These properties are usually useful when you want to design forms that follow a defined alignment for your form fields and give a professional look to your forms. Below are the properties that you can use:\n| Label         | Description                                                                                                        |\n| ------------- | ------------------------------------------------------------------------------------------------------------------ |\n| Text      | It's a group of properties that allows you to provide a name to the field and define the placement of the widget. |\n| Position  | Sets the label position of the widget.                                                                             |\n| Alignment | Sets the label alignment of the widget.                                                                            |\n| Width     | Sets the label width of the widget as the number of columns.                                                       |\nLet's understand these properties in detail:\nText\nIt allows you to set the display name for the Multi-tree-select widget. For example, if you want the user to add multiple categories, you can enter the text as \"Categories.\"\n:::tip\nYou can leave the text empty if you don't want any display name for your Multi-tree-select widget.\n:::\nPosition\nIt allows you to specify the placement of the label. You can select one of the available options:\n\nTop - It allows you to align the text at the top of the Multi-tree-select widget.\nLeft - It aligns the text to the left of the Multi-tree-select. When you select Left alignment, you get additional settings that you can use to control the alignment and define the text's width.\nAlignment - With the help of alignment, you can define the placement of the text in accordance with the position of the Multi-tree-select widget. You can choose:\nLeft - It aligns the text to the widget's left boundary that's away from the Multi-tree-select widget.\nRight - It aligns the text closer to the Multi-tree-select widget.\n\n\nWidth - With the help of width, you can define the number of columns in the grid that surrounds the widget. You can specify how close or far the text can be placed to the Multi-tree-select widget.\nAuto - It automatically adjusts the position of the text based on the Multi-tree-select widget's height.\n\n:::info\nColumns are the dashed lines (-----) that surround a widget when you try to drag and drop it on the canvas.\n:::\n\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Styles               | Description                                              |\n| -------------------- | -------------------------------------------------------- |\n| Border Radius    | Allows you to define curved corners.                     |\n| Box Shadow       | Allows you to choose from the available shadow styles.   |\n| Label Text Color | Allows you to set text color for the label.              |\n| Label Text Size  | Allows you to set the size of the label.                 |",
    "tag": "appsmith"
  },
  {
    "title": "Currency Input",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/currency-input.md",
    "content": "Currency Input\nThe currency input widget gives you an input field to capture a user's currency input.\n\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget properties\nThese properties allow you to edit the Currency Input widget, and are present in the property pane of the widget. The following table lists all the widget properties.\n| Property                  | Description                                                                                                                                                                                            |\n| ------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Allow currency change | Enables/disables a currency dropdown next to the input which the user can use to change the selected currency.                                                                                         |\n| Currency              | Sets the currency type for the widget. When using JS, accepts string ISO 4217 currency codes.                                                    |\n| Decimals              | Sets the number of digits allowed after the decimal separator (0, 1, or 2).                                                                                                                            |\n| Default text          | Sets the default text in the input widget before the user has made any changes. This field can be bound to a table's selectedRow to update a record                                                    |\n| Regex                 | it's used to add custom validations you want to perform on user input.                                                                                                                                |\n| Valid                 | Sets an expression to decide whether the user's input is considered valid. When the expression evaluates to `false`, the input is considered invalid and the widget shows Error Message.   |\n| Error message         | Sets the text of the error message to display if the user's input is considered invalid.                                                                                                               |\n| Placeholder           | Sets the placeholder text within the input box. Use to show a hint or example value to the user.                                                                                                       |\n| Tooltip               | Sets a tooltip that appears when the user hovers over the widget with the mouse. Use this to provide hints or extra information to the user.                                                           |\n| Required              | Sets whether the checkbox is a mandatory field. When the checkbox is within a Form widget, that Form's submit button is automatically disabled until the Checkbox is checked.                     |\n| Show step arrows              | Controls visibility of step arrows. Turning this toggle off hides the step arrows to increment or decrement the values in the widget.                                                                        |\n| Visible               | Controls widget's visibility on the page. When turned off: The widget isn't visible when the app is published. It appears translucent when in Edit mode.                                         |\n| Disabled              | Makes the widget un-clickable or unusable. The widget remains visible to the user but user interaction isn't allowed.                                                                        |\n| Reset on Submit       | Clears the value entered by the user after form submission.                                                                                                                                            |\n| Auto Focus            | When enabled, the user's cursor focuses on the input box automatically on page load.                                                                                                           |\n| Animate loading       | When turned off, the widget loads without any skeletal animation. You can use a toggle switch to turn it on/off. You can also turn it off/on using javascript by enabling the JS label next to it. |\n| Height        | It configures how a widget\u2019s height reacts to content changes. It has three possible configurations:Fixed: The height of the widget remains as set using drag and resize.Auto Height: The height of the widget reacts to content changes. Auto Height with limits: Same as Auto height, with a configurable option to set the minimum and maximum number of rows that can be occupied by the widget.                                      |\nAllow currency exchange\nIt enables/disables the currency dropdown next to the input box. If you enable this property, the user can change the currency from the dropdown.\n\nPlaceholder\nYou can set a proxy text/value inside the input box using the placeholder property. It can be any message or hint for the expected input.\n\nDefault text\nThis property lets you set a default value for the widget before the user has made any changes. The value must be a number datatype.\n\nRegex\nUsing Regex or Regular expression property, you can set specific constraints on the input you expect from the user.\nFor example, let\u2019s add a regular expression for entering a price in multiples of 5.\n`.*[05]$`\nIf you enter a value other than a multiple of 5, the widget shows an error message \u201cinvalid input.\u201d\n\nError message\nIf a user enters an incorrect value, the input widget shows a message \u201cinvalid input.\u201d You can change this message by using the `Error message` property to provide better feedback on the input given by the user.\n\nRequired\nEntering a value in the input box is mandatory when the required property is enabled. You can also write a `JS` code to link this property to a user action. Click on `JS` next to the Required to write JavaScript code.\nFor example, let\u2019s drag a checkbox widget `checkbox1` onto the canvas and bind it to the `Required` property. To enable the `Required` when the user checks the checkbox, add the following JavaScript code in the Required property:\n`{{Checkbox1.isChecked}}`\nWhen you tick the checkbox, it enables the Required property, and the input box shows an error message \u201cThis field is required\u201d if you haven't entered any input.\n\nShow step arrows\nWhen `Show step arrows` property is turned on, the step arrows are displayed and user can use them to increase or decrease the value inside the widget. You can also use JavaScript code to dynamically show or hide the step arrows based on certain conditions or events. This can be useful if you want to enable or disable the step arrows based on the current state of the widget or other factors.\n\nVisible\n`Visible` controls the widget\u2019s visibility on the app\u2019s page. The widget isn't visible on the published app if you turn off this property. You can also write a `JS` code to link the Visible property to a user action. Click on `JS` next to the `Visible` to write JavaScript code.\nFor example, drag a checkbox widget `checkbox1` onto the canvas and bind it to the `Visible` property. To enable the `Visible` when the user checks the checkbox, add the following JavaScript code:\n`{{Checkbox1.isChecked}}`\nWhen you tick the checkbox, it enables the Visible property, and the input box is visible in the app.\n\nDisabled\nIt prevents the user from entering values in the widget. The widget is visible (if Visible is enabled), but user input isn't allowed. You can also write a `JS` code to link the Disabled property to a user action. Click on `JS` next to the `Visible` to write JavaScript code.\nFor example, drag a checkbox widget `checkbox1` onto the canvas and bind it to the `Disabled` property. To enable the `Disabled` when the user checks the checkbox, add the following JavaScript code:\n`{{Checkbox1.isChecked}}`\nWhen you tick the checkbox, it enables the Disabled property and prevent a user input in the input box.\n\nReset on submit\nWhen `Reset on Submit` is enabled, the widget resets or clears the entered input after the user submits it.\\\nLet\u2019s use the event `onSubmit` to show a message when input is submitted. You\u2019ll see once the user submits and the message pops up, the currency input widget resets itself to its original state.\n\nAuto focus\nWhen you enable `Auto focus`, the cursor focuses on the input box whenever the widget is loaded.\n\nBinding properties\nThese properties allow you to bind your currency input widget with any other widget in queries or JS objects.\\\nThese properties help you share values between widgets and allow you to access the widget property within Queries or JS functions.\n| Property         | Description                                                                                                 |                                         |\n| ---------------- | ----------------------------------------------------------------------------------------------------------- | --------------------------------------- |\n| `countryCode`  | Contains the country code of the selected currency (string).                                              | `{{currency_widget_name.Countrycode}}`  |\n| `currencyCode` | Contains the __ ISO 4217 code of the selected currency. | `{{currency_widget_name.Currencycode}}` |\n| isDisabled   | Reflects the state of the widget's Disabled setting (`bool`).                                           | `{{currency_widget_name.isDisabled}}`   |\n| isValid      | Reflects whether the widget's input is considered Valid (`bool`).                                       | `{{currency_widget_name.isValid}}`      |\n| isVisible    | Reflects the state of the widget's Visible setting (`bool`).                                            | `{{currency_widget_name.isVisible}}`    |\n| text         | Contains the value of the widget's input, represented as a string.                                        | `{{currency_widget_name.text}}`         |\n| value        | Contains the value of the widget's input, represented as a number.                                        | `{{currency_widget_name.value}}`        |\nText\nIt fetches the formatted value that the user enters in the input box. It changes when the default value changes or the user enters a new value in the input box. The value is of String data type.\nTo bind the data in the currency input widget to another widget, open the property pane of it, and add the code snippet given below:\n`{{<currency_input_widget_name>.text}}`\nWhere `<currency_input_widget_name>` is the name of your input box.\nFor example, take the widget `currencyinput1` and bind its text to a text widget. Drag a text widget onto the canvas and add the following snippet:\n`{{currencyinput1.text}}`\nThe text widget then displays the data present in the currency input widget.\n\nThis property has many applications like it helps in parsing the values entered in the widget to a query.\nValue\nIt fetches the value that the user enters in the input box. The value is of the Number data type.\nTo bind this widget with another widget using this property, Open the property pane of the desired widget and enter the snippet given below:\n`{{<currency_widget_name>.value}}`\nWhere `<currency_input_widget_name>` is the name of your input box.\nFor example, bind a widget `currencyinput1` value to a text widget. Drag a text widget onto the canvas and add the following snippet:\n`{{currencyinput1.value}}`\nThe text widget then displays the value present in the currency input widget.\n\n`currencyCode`\nIt fetches the currency code of the chosen currency. For example, if the user has selected an American dollar. It fetches the value `USD`. A widget `currencyinput1` uses this property to display the selected currency\u2019s code in a text widget. Enter the code snippet given below:\n`{{currencyinput1.currencyCode}}`\n\n`countryCode`\nIt fetches the country code of the chosen currency. For example, if the user has selected an American dollar. It fetches the value `US.` A widget `currencyinput1` uses this property to display the selected currency\u2019s country code in a text widget. Enter the code snippet given below:\n`{{currencyinput1.currencyCode}}`\n\nEvents\n| Event             | Description                                                                                                                                                                                                                                              |\n| ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| onTextChanged | Sets an action to take place when the input's value is changed. Can be set from the GUI list of common actions (examples here), or you can define a custom JavaScript function to call instead. |\n| onFocus      | Sets an action to take place when the input area in the currency widget is focused. Can be set from the GUI list of common actions (examples here), or you can define a custom JavaScript function to call instead. |\n| onBlur      | Sets an action to take place when the input area in the currency widget loses focus. Can be set from the GUI list of common actions (examples here), or you can define a custom JavaScript function to call instead. |\n| onSubmit      | Sets an action to take place when the input is submitted with the ENTER key. Can be set from the GUI list of common actions (examples here), or you can define a custom JavaScript function to call instead. |\nLabel\nThe property hosts a group of configurations that you can use to associate a display name and define a placement for the widget. These properties are usually useful when you want to design forms that follow a defined alignment for your form fields and give a professional look to your forms. Below are the properties that you can use:\n| Label         | Description                                                                                          |   |\n| ------------- | ---------------------------------------------------------------------------------------------------- | - |\n| Text      | Sets the label text of the widget.                                                                   |   |\n| Position  | Sets where the label appears relative to the widget's input area. Choose between Left, Top, or Auto. |   |\n| Alignment | Sets whether the label is left- or right-aligned.                                                    |   |\n| Width     | Sets the width of the label. The number represents how many characters/columns wide the label is.    |   |\nText\nIt allows you to set the display name of the Currency Input. For example, if you want the user to enter an Item price on the currency input box, you can enter the text as \u201cItem Price.\u201d\n:::tip\nYou can leave the text empty if you don't want any display name for your Currency Input widget.\n:::\nPosition\nIt allows you to specify the placement of the label. You can select one of the available options:\n\nTop - It allows you to align the text at the top of the Currency Input box.\nLeft - It aligns the text to the left of the Currency Input box. When you select Left alignment, you get additional settings that you can use to control the alignment and define the text's width.\nAlignment - With the help of alignment, you can define the placement of the text in accordance with the position of the Currency Input box. You can choose:\nLeft - It aligns the text to the widget's left boundary that's away from the Currency Input box.\nRight - It aligns the text closer to the Currency Input box.\n\n\nWidth - With the help of width, you can define the number of columns in the grid that surrounds the widget. You can specify how close or far the text can be placed to the Currency Input box.\nAuto - It automatically adjusts the position of the text based on the Currency Input box's height.\n\n:::info\nColumns are the dashed lines (-----) that surround a widget when you try to drag, and drop it on the canvas.\n:::\nYou can leave the label empty if you don\u2019t want any labels.\n\n| Label Styles         | Description                                                                                                                          |   |\n| -------------------- | ------------------------------------------------------------------------------------------------------------------------------------ | - |\n| Text Color       | Sets the text color for the label. Accepts valid CSS color values.       |   |\n| Text Size        | Sets the size of the label font. Accepts valid CSS font-size values. |   |\n| Label Font Style | Toggles font styles (bold or italic).                                                                                          |   |\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Style Property    | Description                                                                                                                                                                      |\n| ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Border Radius | Rounds the corners of the widget's outer edge. With JS enabled, this accepts valid CSS border-radius values. |",
    "tag": "appsmith"
  },
  {
    "title": "Button Group",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/button-group.md",
    "content": "Button Group\nThe Button group widget represents a set of buttons in a group. Group can have simple buttons or menu buttons with drop-down items.\n\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the Button Group widget. All of these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property            | Description                                                                                                                                                                                            |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Orientation     | Sets whether the group buttons are listed Horizontally or Vertically.                                                                                                                                  |\n| Visible         | Controls widget's visibility on the page. When turned off: The widget will not be visible when the app is published. It appears translucent when in Edit mode.                                         |\n| Disabled        | Disables input to the widget. The widget will be visible to the user but a user input will not be allowed.                                                                                             |\n| Animate Loading | When turned off, the widget will load without any skeletal animation. You can use a toggle switch to turn it on/off. You can also turn it off/on using javascript by enabling the JS label next to it. |\nGroup buttons settings\nYou can customize each group button through a set of properties by clicking on the gear icon.\n| Property           | Description                                                                                                                                                    |\n| ------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| label          | Sets the text shown within a button.                                                                                                                           |\n| Button type    | Control whether this is a simple button, or a menu button with dropdown items.                                                                                 |\n| Button color   | Sets the background color of the button.                                                                                                                       |\n| Disabled       | Makes the button un-clickable or unusable. The button will remain visible to the user but user interaction will not be allowed.                                |\n| Visible        | Controls button's visibility on the page. When turned off: The button will not be visible when the app is published. It appears translucent when in Edit mode. |\n| Icon           | Gives a list of icons you can add to your buttons.                                                                                                             |\n| Icon Alignment | Sets the alignment of the selected icon.                                                                                                                       |\n| Menu items     | Array of menu items for a Menu-type button. This lets you add/remove/edit a menu item and customize the its settings.                                          |\n| Event       | Description                                                                                                                          |\n| ----------- | ------------------------------------------------------------------------------------------------------------------------------------ |\n| onClick | Sets an an action to take place when the user clicks on this widget, or you can define a custom JavaScript function to call instead. |\nMenu item settings\nFor the button of type \"Menu,\" you can add several options to be shown in a dropdown menu. Each menu item can now be customized through a set of properties by clicking on the gear icon.\n| Property             | Description                                                                                                                                                          |\n| -------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Label            | Sets the text shown within the menu item.                                                                                                                            |\n| Background Color | Sets the background color of a menu item.                                                                                                                            |\n| Text Color       | Sets the text color of a menu item.                                                                                                                                  |\n| Visible          | Controls menu item's visibility on the page. When turned off: The menu item will not be visible when the app is published. It appears translucent when in Edit mode. |\n| Disabled         | Makes the menu item un-clickable or unusable. The menu item will remain visible to the user but user interaction will not be allowed.                                |\n| Icon             | Choose from a list of icons you can add to your menu item.                                                                                                           |\n| Icon color       | Sets the icon color of the selected icon.                                                                                                                            |\n| Icon Alignment   | Sets the alignment of the selected icon.                                                                                                                             |\nEvents\nYou can define functions that will be called when these events are triggered in the widget.\n| Event       | Description                                                                                                                                                                                                                                                      |\n| ----------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| onClick | Sets an an action to take place when the user clicks on this widget. Can be set from the GUI list of common actions (See a list of supported actions.), or you can define a custom JavaScript function to call instead. |\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Style Property     | Description                                                                                                                                                                                                                    |\n| ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Button Variant | Sets the the button style type to represent its significance - Primary, Secondary, or Tertiary. You can use JavaScript to set this field by writing code that evaluates to the string \"PRIMARY\", \"SECONDARY\", or \"TERTIARY\". |\n| Border Radius  | Rounds the corners of the widget's outer edge. With JS enabled, this accepts valid CSS border-radius values.                                               |\n| Box Shadow     | Casts a drop shadow from the frame of the widget. With JS enabled, this accepts valid CSS box-shadow values.                                                  |\n:::info\nWe currently use the icons from Blueprint library. You can see the list of icons here.",
    "tag": "appsmith"
  },
  {
    "title": "Filepicker",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/filepicker.md",
    "content": "Filepicker\nFilepicker widget is used to allow users to upload files from their local machines to any cloud storage via API. Cloudinary and Amazon S3 have simple APIs for cloud storage uploads\n\nUpload file\nYou can upload files by creating a post API and referring to the base64 or binary version of the file in the post body. The data format is determined by the Data Type property in the property pane\n`{{ Filepicker1.files[0].data }}`\n:::info\nWhen you try to log the data, it appears in the blob format. But, if the user uses it in an API/query, it\u2019ll actually upload base64/binary data.\n:::\n:::tip\nif you are trying to upload large files, please increase the timeout in API configuration. Whenever the file is larger than 5mb it's stored as blob.\n:::\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget properties\nThese properties allow you to edit the Filepicker widget. All these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property                      | Type                 | Description                                                                                                                                                                                                                                                                                               | Code Snippet                |\n| ----------------------------- | -------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------- |\n| Label                     | Formatting           | Sets the text shown within the widget.                                                                                                                                                                                                                                                                    | NA                          |\n| Maximum No. of files      | Formatting           | Sets the maximum number of files allowed to be uploaded by a user.                                                                                                                                                                                                                                        | NA                          |\n| Maximum File Size         | Formatting           | Sets the maximum allowed size of each file that a user can upload.                                                                                                                                                                                                                                        | NA                          |\n| Allowed File Types        | Formatting           | Sets the allowed file types that a user can upload. Accepts an array of wildcards image/, exact mime types image/jpeg, or file extensions e.g.: '.jpg', '.jpeg', '.png', '.gif'] | NA                          |\n| Data Format               | Formatting           | Determines the data format of the files uploaded. Choose from Base64, Binary, , Text (plain), and Array(CSV).                                                                                                                                                                                             | NA                          |\n| Infer data-types from CSV | Formatting           | Controls if the arrays should try to infer the best possible data type based on the values in CSV files.                                                                                                                                                                                                  | NA                          |\n| Required                  | Validation           | Sets whether the checkbox is a mandatory field. When the checkbox is within a Form widget, that Form's submit button is automatically disabled until the Checkbox is checked.                                                                                                                        | NA                          |\n| Visible                   | Binding & Formatting | Controls widget's visibility on the page. When turned off: The widget won't be visible when the app is published. It appears translucent when in Edit mode.                                                                                                                                            | `{{FilePicker.isVisible}}`  |\n| Disabled                   | Binding & Formatting | Makes the widget un-clickable or unusable. The widget remains visible to the user but user interaction won't be allowed.                                                                                                                                                                           | `{{FilePicker.isDisabled}}` |\n| Animate Loading           | Formatting           | When turned off, the widget loads without any skeletal animation. You can use a toggle switch to turn it on/off. You can also turn it off/on using javascript by enabling the JS label next to it.                                                                                                    |                             |\n| files                     | Binding              | Contains an array of file objects selected by the user. Each file object contains the file data on its `data` property.                                                                                                                                                                                 | `{{FilePicker.files}}`      |\nData format\nDetermines the data format of the files uploaded. The following data formats are supported as of now:\n\nBase64\n\nBase64 is a group of binary-to-text encoding schemes representing binary data in an ASCII string format by translating it into a radix-64 representation. Base64 encodes binary files such as images within scripts, to avoid depending on external files.\nYou can upload your base64 file and call it using:\n```\n{{FilePicker1.files[0].data}}\n//here [0] represents index of the file.\n```\n:::info\nYou can use the Image widget to display images that are base64 encoded.\n:::\n\nBinary\n\nBinary files are a type of files that are used to store data in the form of contiguous bytes, in which the method of reading isn't defined. If you want to upload a binary file, choose Data Format as Binary and then upload your file.\n\nText\n\nText refers to data (file contents) that contain readable characters without their graphical representation or other elements. For example, you can upload your`.txt` file and use the following code to display it in a text widget:\n`{{FilePicker1.files[0].data}}`\n\n\nArray(CSV)\n\nWith the Array data format, CSV data is directly parsed into an array or array of objects that may be referenced throughout Appsmith. \nFor example, if you have data in a CSV format and want to display it in a table widget. \n\n\nSelect the Array(Only CSV) option.\nUpload your CSV file using the Filepicker widget\nAdd the following code in the table widget property:\n\n```\n{{FilePicker1.files[0].data}}\n//here [0] represents index of the file.\n```\nThis displays your CSV data in a tabular format.\n:::info\nCurrently, only CSV data is supported; XLS or other formats aren't supported.\n:::\nEvents\nYou can define functions to be called when these events are triggered in the widget. For example, you can navigate to another page,show alert messages,open and close modals,and store data in local storage.\n| Event               | Description                                                                                                                                                                                                                            |\n| ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| onFilesSelected | Sets an action to take place when the user selects a file. Can be set from the GUI list of common actions (examples here), or you can define a custom JavaScript function to call instead. |\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Style Property    | Description                                                                                                                                                                      |\n| ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Button Color  | Sets the color of the widget's button. Accepts valid CSS color values.                                               |\n| Border Radius | Rounds the corners of the widget's outer edge. With JS enabled, this accepts valid CSS border-radius values. |\n| Box Shadow    | Casts a drop shadow from the frame of the widget. With JS enabled, this accepts valid CSS box-shadow values.    |\n:::info\nTo learn how to upload or manage files on Cloudinary with the Filepicker widget, read this tutorial.\n:::\nFurther reading\nThe following resources should come in handy as you need to learn new tricks:\n\nConnecting to Datasources\nAppsmith Framework\nJavaScript Editor\nUploading a File to S3\nSend File Data with API Requests\n\nTroubleshooting",
    "tag": "appsmith"
  },
  {
    "title": "Icon Button",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/icon-button.md",
    "content": "Icon Button\nIcon button widget is just an icon, along with all other button properties.\n\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the Icon Button widget. All of these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property            | Description                                                                                                                                                                                            |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Tooltip         | Sets a tooltip that appears when the user hovers over the widget with the mouse. Use this to provide hints or extra information to the user.                                                           |\n| Disabled        | Makes the widget un-clickable or unusable. The widget will remain visible to the user but user interaction will not be allowed.                                                                        |\n| Visible         | Controls widget's visibility on the page. When turned off: The widget will not be visible when the app is published. It appears translucent when in Edit mode.                                         |\n| Animate Loading | When turned off, the widget will load without any skeletal animation. You can use a toggle switch to turn it on/off. You can also turn it off/on using javascript by enabling the JS label next to it. |\nBinding Properties\nThese properties allow you to bind your Icon Button widget with any other widget in queries or JS objects. The following table lists all the binding properties.\n| Binding Property | Description                                                      |\n| ---------------- | ---------------------------------------------------------------- |\n| isVisible    | Reflects the state of the widget's Visible setting (bool). |\nEvents\nYou can define functions that will be called when these events are triggered in the widget.\n| Event       | Description                                                                                                                                                                                                                                       |\n| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| onClick | Sets an an action to take place when the user clicks on this widget. Can be set from the GUI list of common actions (supported actions), or you can define a custom JavaScript function to call instead. |\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Style Property     | Description                                                                                                                                                                                                                    |\n| ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Icon           | Sets an icon to be included on the button.                                                                                                                                                                                     |\n| Button Color   | Sets the color of the widget's button. Accepts valid CSS color values.                                                                                             |\n| Button Variant | Sets the the button style type to represent its significance - Primary, Secondary, or Tertiary. You can use JavaScript to set this field by writing code that evaluates to the string \"PRIMARY\", \"SECONDARY\", or \"TERTIARY\". |\n| Border Radius  | Rounds the corners of the widget's outer edge. With JS enabled, this accepts valid CSS border-radius values.                                               |\n| Box Shadow     | Casts a drop shadow from the frame of the widget. With JS enabled, this accepts valid CSS box-shadow values.                                                  |\n:::info\nWe currently use the icons from Blueprint library. You can see the list of icons here.",
    "tag": "appsmith"
  },
  {
    "title": "Multi-select",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/multiselect.md",
    "content": "Multi-select\nMulti-select widget is used to capture user inputs from a specified list of permitted options. This widget captures multiple choices.\n\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the widget. All these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property                  | Description                                                                                                                                                                            |\n| ------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Options               | Let's you set labels and values for different items/options in the list of the multi-select widget. Options must be specified as an array of objects with a label and value property.  |\n| Default Value         | Sets a default option that will be captured as user input unless it is changed by the user. Multiple values can be provided as CSV or an array of strings for a Multi-Select dropdown. |\n| Placeholder           | Sets the Placeholder of the multi-select widget.                                                                                                                                       |\n| Required              | When turned on, it makes a user input required and disables any form submission until input is made.                                                                                   |\n| Visible               | Controls widget's visibility on the page. When turned off, the widget will not be visible when the app is published                                                                    |\n| Disabled              | Disables input/selection to the widget. The widget will remain visible to the user but user input/selection will not be allowed.                                                       |\n| Tooltip                             | It sets a tooltip for the widget. You can add hints or extra information about the required input from the user.    \n| Animate Loading       | Allows you to control a widget\u2019s animation on the page load.                                                                                                                           |\n| Filterable            | Makes the dropdown list filterable.                                                                                                                                                    |\n| Server Side Filtering | Enables server-side filtering via an API / Query request. Use this property when your Select option data is being bound to an API / Query.                                             |\n| Allow Select All      | Controls the visibility of `select all` option in the dropdown.                                                                                                                        |\n| Height        | It configures how a widget\u2019s height reacts to content changes. It has three possible configurations:Fixed: The height of the widget remains as set using drag and resize.Auto Height: The height of the widget reacts to content changes. Auto Height with limits: Same as Auto height, with a configurable option to set the minimum and maximum number of rows that can be occupied by the widget.                                      |\nBinding Properties\nThese properties allow you to bind your widget with any other widget in queries or JS objects. The following table lists all the binding properties.\n| Property                 | Description                                                                                                                                                                         |\n| ------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| filterText           | The filter text for Server side filtering                                                                                                                                           |\n| isVisible            | This property indicates whether the widget is visible or not.                                                                                                                       |\n| isDisabled           | This property indicates whether the widget is disabled or not.                                                                                                                      |\n| options              | This property shows the values of all the options.                                                                                                                                  |\n| selectedOptionLabels | An array of Labels of the options are displayed in a Multi-Select dropdown. This label changes if the default values of the dropdown change or the user changes an option selection |\n| selectedOptionValues | An array of values of the options are displayed in a Multi-Select dropdown. This value changes if the default values of the dropdown change or the user changes an option selection |\nEvents\nThey are a set of actions that you can perform on the widget. The following table lists the actions:\n| Events             | Description                                                                                                                                    |\n| ------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------- |\n| onOptionChange | Sets the action to be run when the user selects/unselects an option. See a list of supported actions. |\n| onDropdownOpen | Sets the action to be run when the user opens the dropdown. See a list of supported actions. |\n| onDropdownClose | Sets the action to be run when the user opens the dropdown. See a list of supported actions. |\nLabel\nThe property hosts a group of configurations that you can use to associate a display name and define a placement for the widget. These properties are usually useful when you want to design forms that follow a defined alignment for your form fields and give a professional look to your forms. Below are the properties that you can use:\n| Label         | Description                                                  |\n| ------------- | ------------------------------------------------------------ |\n| Text      | Sets the Placeholder of the multi-select widget.             |\n| Position  | Sets the label position of the widget.                       |\n| Alignment | Sets the label alignment of the widget.                      |\n| Width     | Sets the label width of the widget as the number of columns. |\nText\nIt allows you to set the display name for the Multi-select widget. For example, if you want the user to add multiple tags, you can enter the text as \"Tags.\"\n:::tip\nYou can leave the text empty if you don't want any display name for your Multi-select widget.\n:::\nPosition\nIt allows you to specify the placement of the label. You can select one of the available options:\n\nTop - It allows you to align the text at the top of the Multi-select widget.\nLeft - It aligns the text to the left of the Multi-select. When you select Left alignment, you get additional settings that you can use to control the alignment and define the text's width.\nAlignment - With the help of alignment, you can define the placement of the text in accordance with the position of the Multi-select widget. You can choose:\nLeft - It aligns the text to the widget's left boundary that is away from the Multi-select widget.\nRight - It aligns the text closer to the Multi-select widget.\n\n\nWidth - With the help of width, you can define the number of columns in the grid that surrounds the widget. You can specify how close or far the text can be placed to the Multi-select widget.\nAuto - It automatically adjusts the position of the text based on the Multi-select widget's height.\n\n:::info\nColumns are the dashed lines (-----) that surround a widget when you try to drag and drop it on the canvas.\n:::\n\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Styles               | Description                                              |\n| -------------------- | -------------------------------------------------------- |\n| Label Text Color | Allows you to set text color for the label.              |\n| Label Text Size  | Allows you to set the size of the label.                 |\n| Label Font Style | Allows you to choose a font style, i.e., bold or italic. |\n| Border Radius    | Allows you to define curved corners.                     |\n| Box Shadow       | Allows you to choose from the available shadow styles.   |\nDisplaying Data\nMulti-select options can be populated from a data source like an API / Query by transforming the incoming data to an array of (label, value). The transformation can be performed using javascript. So if the data is an array, we can transform it using the Array map function.\n`javascript\n// Query1.data is assumed to be an array here\n{{ Query1.data.map((row) => { \n      return { label: row.name, value: row.id } \n   }) \n}}`\nFiltering Data\nA MultiSelect widget can be used to filter a dataset based on the user's input. The selected value can be passed to an API using `{{ multiselect1.selectedOptionValues }}`.\nServer Side Filtering can also be enabled on the widget by enabling Server Side Filtering property. When enabling server-side filtering in the widget, please update the default value to contain both `label` and `value` in this format `{\"label\":<label>, \"value\": <value>}` if the default value is not present in the default options.\nForm Submission\nMulti-select widgets can be used to capture from a fixed set of options inside a form such as gender, role, and status.\n:::info\nSome forms need to be pre-filled data from a table or API. We can bind the data to the default text property to enable this.\n:::\n`{{ Table1.selectedRow.gender }}\n/**\n* Binding this to the default option will update the selected option \n* of the MultiSelect widget with the gender of the selected row in Table1\n*/`\nRead more about submitting Input data to an API below.",
    "tag": "appsmith"
  },
  {
    "title": "Audio Recorder",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/audio-recorder.md",
    "content": "Audio Recorder\nThe Audio recorder widget allows users to record using their microphone, listen to its playback and export the data to a data source.\n\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the Audio Recorder widget. All of these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Widget Property     | Description                                                                                                                                                                                            |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Disabled        | Makes the widget un-clickable or unusable. The widget will remain visible to the user but user interaction will not be allowed.                                                                        |\n| Visible         | Controls widget's visibility on the page. When turned off: The widget will not be visible when the app is published. It appears translucent when in Edit mode.                                         |\n| Animate Loading | When turned off, the widget will load without any skeletal animation. You can use a toggle switch to turn it on/off. You can also turn it off/on using javascript by clicking the JS label next to it. |\nBinding Properties\nThese properties allow you to bind your Audio Recorder widget with any other widget in queries or JS objects. The following table lists all the binding properties.\n| Binding Property | Description                                                                                   |\n| ---------------- | --------------------------------------------------------------------------------------------- |\n| blobURL      | Blob URL of the audio, used to store the audio for future use.                                |\n| dataURL      | Data URL format (Base64) of the audio, used to embed it inline within different applications. |\n| rawBinary    | The audio file in binary format, used to store the audio for future use.                      |\n| isVisible    | Reflects the state of the widget's Visible setting (bool).                              |\nEvents\nYou can define functions that will be called when these events are triggered in the widget.\n| Event                   | Description                                                                                                                    |\n| ----------------------- | ------------------------------------------------------------------------------------------------------------------------------ |\n| onRecordingStart    | Sets an action to be executed when recording starts. See a list of supported actions. |\n| onRecordingComplete | Sets an action to be executed when recording ends. See a list of supported actions.   |\nStyles\nStyle properties allow you to change the look and feel of the widget.\n| Style Property    | Description                                                                                                                                                                      |\n| ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Button Color  | Sets the color of the widget's button. With JS enabled, accepts valid CSS-sytnax color values (string).            |\n| Border Radius | Rounds the corners of the widget's outer edge. With JS enabled, this accepts valid CSS border-radius values. |\n| Box Shadow    | Casts a drop shadow from the frame of the widget. With JS enabled, this accepts valid CSS box-shadow values.    |",
    "tag": "appsmith"
  },
  {
    "title": "Divider",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/divider.md",
    "content": "Divider\nThe Divider widget is used to visually separate or compartmentalise different parts of your application.\n\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nWidget Properties\nThese properties allow you to edit the Divider widget. All of these properties are present in the property pane of the widget. The following table lists all the widget properties.\n| Property            | Description                                                                                                                                                                                            |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Orientation     | Sets whether the line of the widget is oriented horizontally or vertically. With JS enabled, accepted values are \"horizontal\" or \"vertical\".                                                           |\n| Visible         | Controls widget's visibility on the page. When turned off: The widget will not be visible when the app is published. It appears translucent when in Edit mode.                                         |\n| Animate Loading | When turned off, the widget will load without any skeletal animation. You can use a toggle switch to turn it on/off. You can also turn it off/on using javascript by enabling the JS label next to it. |\nBinding Properties\nThese properties allow you to bind your Divider widget with any other widget in queries or JS objects. The following table lists all the binding properties.\n| Property         | Description                                                                                                                                                                                               |\n| ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| capSide      | Reflects the widget's Cap Position style property, shows which sides of the divider line have a cap. Values are numbers, either -1 (left or top only), 0 (both sides), or 1 (right or bottom only). |\n| capType      | Reflects the widget's Cap style property, shows whether the divider line is capped with a dot, an arrow, or no cap. Values are strings \"dot\", \"arrow\", or \"nc\".                                     |\n| dividerColor | Contains the color of the divider line, represented as a hexadecimal color code.                                                                                                                          |\n| isVisible    | Reflects the state of the widget's Visible setting (bool).                                                                                                                                          |\n| orientation  | Reflects the Orientation property of the widget, values are strings either \"horizontal\" or \"vertical\".                                                                                              |\n| strokeStyle  | Reflects the widget's Dash Style property as a string with value either \"solid\", \"dashed\", or \"dotted\".                                                                                             |\n| thickness    | Reflects the thickness of the divider line as a number of pixels.                                                                                                                                       |\nStyle\nStyle properties allow you to change the look and feel of the widget.\n| Style Property    | Description                                                                                                                                                |\n| ----------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Dash Style    | Sets the type of line used for the divider, either Solid, Dashed, or Dotted. With JS enabled, accepts strings with value \"solid\", \"dashed\", or \"dotted\". |\n| Thickness     | Sets the thickness of the divider line in pixels. Accepts number values.                                                                                 |\n| Divider Color | Sets the color of the divider line. Accepts valid CSS colorvalues.                            |\n| Cap           | Sets the type of cap to use on the divider line; none, arrows, or dots. With JS enabled, accepts strings with value \"nc\", \"arrow\", or \"dot\".             |",
    "tag": "appsmith"
  },
  {
    "title": "Button",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/button",
    "content": "Button\nThis page describes how to use a Button widget to trigger actions and code in your application.\n\nTrigger actions with buttons\nTo execute an action or function when the Button widget is clicked, you must use the button's `onClick` event property. When the widget is clicked, it executes whatever function is contained in the `onClick` field.\nAppsmith has a number of built-in functions that can be selected with the GUI in the properties pane, or you can click the \"JS\" toggle next to onClick to allow writing custom code in this field instead.\nExample 1\nButtons are often used to execute queries. In the button's onClick field dropdown, you can find an \"Execute a query\" menu item that exposes a list of all the queries available on this page of your app. Once you select your query from the list, the button widget is ready for use.\nExample 2\nThere are some cases where you might want to create more complex flows:\nOnce you've selected a query (see prior example), two new fields appear in the properties pane: onSuccess and onError. You can use these fields to set up subsequent functions to run after your query completes. If the query is successful, the action in the onSuccess field is executed. If the query returns an error response, onError is executed.\nIf you'd like even more control or more complex workflows, consider writing custom code in a JS Object to handle the logic. Once you've created a function in the JS Object, you can set the button to execute it just like you did with the query before -- this time, look for your JS Object under the \"Execute a JS function\" menu item.\nButtons in forms\nButtons can have some special behaviors when they're located within the boundaries of a Form widget. Its form-specific behavior is controlled by two of the button's properties:\nDisabled invalid forms\nWhen this button property is turned on, the button is Disabled while the form has any required fields that are incomplete, or while any of the fields have input that's considered invalid.\nFor example, imagine that you have a form with an Input widget whose Required property is turned on. If that input field hasn't been completed by the user, then the button won't be usable.\nSimilarly, if an Input widget's Valid property is `{{ Input1.text.length > 5 }}` but the user input is only 2 characters long, the input is considered invalid and the button is disabled.\nReset form on success\nWhen this button property is turned on, the button can be used to reset all fields present in the form's area to their default state. This is useful for clearing inputs after the form is submitted; when both Disabled invalid forms and Reset form on success are turned on, submitting the form automatically resets the input fields so they can be used again.\nProperties\nProperties allow you to edit the widget, connect it with other widgets and customize the user actions.\nGeneral properties\nGeneral properties control the data and behavior of the widget. These properties are present in the properties pane of the widget.\n|    Property    |    Description    |\n| -------------- | ----------------- |\n| Label                    | Sets the text shown within the widget.   |\n| Tooltip                  | Sets a tooltip that appears when the user hovers over the widget with the mouse. Use this to provide hints or extra information to the user.         |\n| Google reCAPTCHA Key     | Providing a Google reCAPTCHA site key here adds a Google reCAPTCHA check to the button. The token is accessible from the API pane with the`recaptchaToken` key (see the Google reCAPTCHA docs). Read more about using Google reCAPTCHA Keys in Appsmith.  |\n| Google reCAPTCHA Version | Sets the Google reCAPTCHA version to use for the button, either v2 or v3.  |\n| Visible                  | Controls widget's visibility on the page. When turned off: The widget won't be visible in the published app. It appears translucent when in Edit mode.  |\n| Disabled                 | Makes the widget un-clickable or unusable. The widget remains visible to the user but user interaction won't be allowed.   |\n| Animate loading          | When turned off, the widget loads without any skeletal animation. You can use a toggle switch to turn it on/off. You can also turn it off/on using javascript by enabling the JS label next to it. |\nReference properties\nReference properties are used to access the widget's data and state using code. When using reference properties, substitute `<button_name>` in the examples below with the name of your button widget.\n|    Property     |    Description    |    Code Snippet    |\n| --------------- | ----------------- | ------------------ |\n| text               | Reflects the Label property, which contains the text shown in the button's area (string).      | `{{ <button_name>.text }}` |\n| googleRecaptchaKey | Reflects the Google reCAPTCHA Key property, contains the button's reCAPTCHA site key (string). Read more about using Google reCAPTCHA Keys in Appsmith. | `{{ <button_name>.googleRecaptchaKey }}` |\n| isVisible          | Reflects the state of the widget's Visible setting (bool).                                     | `{{ <button_name>.isVisible }}` |\n| isDisabled         | Reflects the state of the widget's Disabled setting (bool).                                    | `{{ <button_name>.isDisabled }}` |\nStyle properties\nStyle properties allow you to change the look and feel of the button. These properties are present in the properties pane of the widget.\n|    Style    | Description    |\n| ----------- | -------------- |\n| Button Color   | Sets the color of the widget's button. Accepts valid CSS color values.   |\n| Button Variant | Sets the button style type to represent its significance - Primary, Secondary, or Tertiary. You can use JavaScript to set this field by writing code that evaluates to the string \"PRIMARY\", \"SECONDARY\", or \"TERTIARY\".  |\n| Border Radius  | Rounds the corners of the widget's outer edge. With JS enabled, this accepts valid CSS border-radius values.  |\n| Box Shadow     | Casts a drop shadow from the frame of the widget. With JS enabled, this accepts valid CSS box-shadow values.    |\n| Icon           | Sets an icon to be included on the button. Uses icons from the Blueprint library. See the list of icons here.  |\n| Icon Alignment | Sets whether the icon appears on the left or right of the button's label text.  |\n| Placement      | Defines where the button's icon and label appear within the space of the button. Start: The icon and label appear at the left-most side of the button; Center: The icon and label appear in the center of the button space; Between: The icon and label appear at opposite ends of the button's space. You can use JavaScript to set this field by writing code that evaluates to the string \"START\", \"CENTER\", or \"BETWEEN\". |\nEvents\nThese event handlers can be used to run queries, JS code, or other supported actions when the event is triggered.\n|    Event    |    Description     |\n| ----------- | ------------------ |\n| onClick | Sets an action to take place when the user clicks on this widget. Can be set from the GUI list of built-in actions, or you can define a custom JavaScript function to call instead. |\nFurther reading\nYou may be interested in these pages that can come in handy with the Button widget:\n\nBuilt-in functions\nQueries\n",
    "tag": "appsmith"
  },
  {
    "title": "Re-Captcha",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/button/google-recaptcha.md",
    "content": "\ndescription: >-\n  Configure your Google reCAPTCHA to ensure only humans can submit forms and\n  click buttons\n\nRe-Captcha\nGoogle reCAPTCHA v3 is a service provided by Google that returns a user score without any interaction from the user. This can be integrated with buttons to prevent bots from clicking the button on your website without a human present.\n1. Go to the reCAPTCHA add site page\n2. Create a new site with version reCAPTCHA v3 and the domain `app.appsmith.com`\n\n3. Copy the site and secret key\n\n4. Paste the site key into the button reCAPTCHA field\n\n5. Configure the server-side integration on your backend\n:::note\nThe exact steps depend on your backend - see Google's reference for detailed instructions.\n:::\nThe user's reCAPTCHA response can be obtained in the API Pane with the `recaptchaToken` key.\nMake a `POST` request to `https://www.google.com/recaptcha/api/siteverify` with the `secret` (secret key) and `response` (user response) parameters to retrieve the score in a JSON format:\n`javascript\n{\n  \"success\": true|false,      // whether this request was a valid reCAPTCHA token for your site\n  \"score\": number             // the score for this request (0.0 - 1.0)\n  \"action\": string            // the action name for this request (important to verify)\n  \"challenge_ts\": timestamp,  // timestamp of the challenge load (ISO format yyyy-MM-dd'T'HH:mm:ssZZ)\n  \"hostname\": string,         // the hostname of the site where the reCAPTCHA was solved\n  \"error-codes\": [...]        // optional\n}`\nValidation Example\nNow that you have registered the site with Google Recaptcha let's validate that the recaptcha is working by using a button widget and adding an API on Appsmith. Follow these steps to validate the reCAPTCHA:\n\n Drag and drop a button widget onto the canvas\nAdd the site key to the button's Google reCAPTCHA Key property\n\n:::info\nNavigate to Google reCAPTCHA v3 Admin Console >> Select Settings for your site>> expand reCAPTCH Keys section >> click Copy Site Key\n:::\n\nNavigate to Explorer >> Add New Blank API >> Add details as below:\n Add Header `content-type` as `multipart/form-data`.\nSelect the HTTP Method as `POST`.\nAdd URL `https://www.google.com/recaptcha/api/siteverify`.\n\n\n\nSelect Body tab >> Add details as below:\nSelect `MULTIPART_FORM``_``DATA`.\nAdd key as response and bind the button's recaptchaToken property by using `{{<<BUTTON_NAME.recaptchaToken>>}}`.\nAdd key as secret and add your site's Recaptcha secret key.\n\n:::info\nNavigate to  Google reCAPTCHA v3 Admin Console >> Select Settings for your site>> expand reCAPTCH Keys section >> click Copy Secret Key\n:::\n\nOnce the above API is set up, click the button to trigger the validation. On successful validation, you'll see the response generated as below in the API response tab:\n```\n{\n  \"success\": true,\n  \"challenge_ts\": \"2022-08-09T12:55:40Z\",\n  \"hostname\": \"app.appsmith.com\",\n  \"score\": 0.9,\n  \"action\": \"submit\"\n}",
    "tag": "appsmith"
  },
  {
    "title": "Inline Editing",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/table/inline-editing.md",
    "content": "Inline Editing\nThe Table widget comes with features such as inline editing to provide a quick way to add and update data without needing to move away from the current screen.\n\nTo try this feature yourself, take a look at the sample app for inline editing.\nProperties\n| Property                                           | Type        | Definition                                                                                                                                                                                                                                                               | Code Snippet                   |\n| -------------------------------------------------- | ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------ |\n| Editable                 | Formatting  | Controls whether cells of the column are editable                                                             | NA                             |\n| Min                      | Validation  | Sets the minimum allowed value. Only available for columns that are type Number.                                                                               | NA                             |\n| Max                      | Validation  | Sets the maximum allowed value. Only available for columns that are type Number.                                                                              | NA                             |\n| Regex                    | Validation  | Enter a regular expression that user input must match to be considered valid. Displays an error message on failure.                                   | NA                             |\n| Valid                    | Validation  | Enter a JS expression that evaluates whether the user's input is valid.                                                                | NA                             |\n| Error Message            | Validation  | The error message displays if the input fails the Regex or Valid properties' checks.                                        | NA                             |\n| Required                 | Validation  | Makes input to the widget mandatory.                                                                          | NA                             |\n| Min Date                 | Validation  | Sets the minimum allowed date. Only available for columns that are type Date.                                                            | NA                             |\n| Max Date                 | Validation  | Sets the maximum allowed date. Only available for columns that are type Date.                                                            | NA                             |\n| Update Mode              | Formatting  | Controls the save experience of an edited cell. Single row - Cells can be saved using the Save/Discard column buttons.  Multi row - cells can be saved by using an onSubmit event of the column or through an external button widget. | NA                             |\n| updatedRows              | Binding     | Contains all the data of the edited table rows. Useful in Multi row update mode.                                                    | `{{Table1.updatedRows}}`       |\n| updatedRowIndices        | Binding     | Contains an array of indices of the table rows that have been edited. Useful in Multi row update mode.                                                        | `{{Table1.updatedRowIndices}}` |\n| updatedRow               | Binding     | Contains the all the data of the row that was recently updated. Useful in Single row update mode. | `{{Table1.updatedRow}}`|\n| Allow adding a row | Widget | Toggles a button in the table which allows users to submit new rows of data. Only columns marked as Editable can accept user input. Use code or a query in the onSave event to update the source of the table's data and reflect the user's changes. |\n| Default Values | Widget | The values to automatically populate the new row with when a user begins creating a new row. Expects an object with the same keys as the columns in the existing table data. |\n| isAddRowInProgress | Binding | Indicates whether a new row is currently being added by the user. | `Table1.isAddRowInProgress` |\n| newRow | Binding | This variable contains a reference to the new row object added by the user. | `Table1.newRow` |\n| isNewRow | Validation | When writing code for validation properties, this variable indicates whether the cells being validated are part of a new or an existing row. | `isNewRow` |\n| First Day of Week | Date Settings | Sets the first day of week that should be shown in the Date Picker while editing Date cells. Only available for columns that are type Date.  | `isNewRow` |\n| Show Shortcuts | Date Settings | Sets whether shortcuts should be shown in the Date Picker while editing Date cells. Only available for columns that are type Date.  | `isNewRow` |\nEvents\nThese event handlers can be used to run queries, JS code, or other supported actions when the event is triggered.\n| Events        | Description                                                                                                            |\n| ------------- | ---------------------------------------------------------------------------------------------------------------------- |\n| onSubmit  | Triggered when the user moves away from editing a cell by pressing the Enter key or clicking outside of the cell.      |\n| onSave    | Triggered when the user clicks the save button for a new or existing row.                                                |\n| onDiscard | Triggered when the user clicks the discard button for a new or existing row.                                             |\n| onDateSelected | Triggered when the user selects a date from Date Picker while editing a date type column.                                             |\n\nEditing cells\nThis feature enables users to make changes directly in the table cell. Currently, there are several column types support inline editing - Text, Number, Date, Switch, Select, and Checkbox. Custom user-added columns don't support inline editing at this time.\n\nThe properties that can be used for editing cells are explained in detail below.\nEditable\nThe Editable checkbox at the top of the Columns list in the property pane can be checked to make all the supported columns editable. You can also control editing using the checkbox next to each individual column in the list.\n\nYou can also use the JS toggle to control the `Editable` property in each column's settings. This is useful for making only a subset of the cells editable based on a condition. For example, if you only want cells containing a particular value to be editable:\n`javascript\n    // only cells with the text \"pending\" in the status column can be updated\n    {{ currentRow.status === \"pending\" }}`\n\nWhen a supported column is made editable, it displays a pencil edit icon when the user hovers their cursor over it. Click this icon or double-click the cell to begin making changes.\n\n\nOnce the user has finished editing a cell, they can perform either of the following actions to close editing:\n\nPress the Enter key or click outside the cell keeps the new value and close the input box.\nPress the Escape key to discard the new value and close the input box.\n\nThese edits are only reflected on the Table widget UI and aren't updated in the source of truth database. Learn how to save the changes you've made.\nValidation properties\nYou can implement user input validation to ensure that only certain values are entered in a cell. The validation features require the column to be editable, and the validation options can be found in a text or numeric column's settings.\nValid\nThe Valid property is an expression that determines whether the cell input is acceptable. When this expression evaluates to `false`, the input is considered invalid and the widget shows its Error Message. The following variables are available for binding:\n\n`currentRow` - accesses the values of the whole row that contains the editable cell.\n`currentIndex` - index of the current editable row.\n`editedValue` - the newly entered value of the editable cell.\n\nFor example, suppose you want the updated value to be `John`. In the Valid property field, add:\n`{{editedValue == \"John\"}}`\nIf a value other than \"John\" is added to the cell, an error is displayed. Similarly, the previously mentioned binding variables can be used to obtain other values and row indexes.\n\nError message\nThe error message appears if the regular expression (Regex) and/or the Valid property determine the input is invalid. If a user enters an incorrect value, the widget shows \"invalid input.\" by default. You can change this message by using the Error message property to provide better feedback to the user.\n\nRegex\nRegular expressions (regex) are patterns that describe valid user input. For example, the pattern `[a-zA-Z]` describes a string that contains only letters of the English alphabet. Using regular expressions in the Regex property of columns, you can set specific constraints on the input you expect from the user.\nWhen you add a regular expression to a column, all user input in that column is compared to the pattern; it's considered to be valid when it matches the expression, or invalid when it doesn't match. When input is invalid, the cell displays its Error message to the user in a tool-tip.\n\nFor example, add a regular expression for entering a name. The name can contain only alphabetical characters and spaces between the first and last name:\n`/^[a-z -]+$/i`\nIf you enter a value that contains something other than alphabetical or space characters, the widget shows an error message \"Invalid input.\"\nRequired\nMakes input to the widget mandatory. Sets whether a non-empty value must be entered for the editable cell input.\nMin\nSets the minimum allowed value. For example, you could set the minimum value to 2 if you only want values greater than 2. Any number entered that's less than 2 is considered invalid. Only available for columns that are type Number.\nMax\nSets the maximum allowed value. For example, you could set the maximum value to 100 if you only want values less than 100. Any number entered that's more than 100 is considered invalid. Only available for columns that are type Number.\n\nMin date\nSets the maximum allowed date. For example, you could set the minimum date to 1900/01/01 if you only want dates after that. Any date before 1900/01/01 can't be selected in the Date Picker. Only available for columns that are type Date.\nMax date\nSets the maximum allowed date. For example, you could set the maximum date to 2100/12/31 if you only want dates before that. Any date after 2100/12/31 can't be selected in the Date Picker. Only available for columns that are type Date.\n\nSaving edits\nThe changes made to the cells with inline editing are visible within the table, however they're not saved to the original datasource automatically.\nTo save the edits made to your table rows, you'll first need to set the table's Update mode, which determines the behavior and flow of making changes. Choose from Single row or Multi row mode.\nOnce this is done, configure your Save buttons to execute queries that update the table's source of data to save your changes permanently. \nThe properties that can be used for saving edited rows are explained in detail below:\nUpdate modes\nThese modes allow you to choose how to handle the flow of updating, saving, and discarding new values within editable tables.\nSingle row\nCells can be edited within a single row at a time, and then saved using the Save/Discard column buttons. While a row has pending edits, the user isn't allowed to begin editing other rows. Be sure to configure the Save/Discard buttons' onSave event to run a query that updates the table's datasource.\nWhen one or more columns of a table are Editable in Single row mode, a new table column is injected called `Save/Discard`. This new column contains a Save button and a Discard button, which execute the table's onSave and onDiscard events when clicked. Style options for these buttons are available in the `Save/Discard` column's settings in the Table widget's properties pane.\n\nThe `Save/Discard` column can't be deleted, only hidden; if the update mode is switched to Multi row or if editing is turned off in the table, this column automatically disappears.\n:::note\nWhile you are configuring the onSave or onDiscard events, you can use the `updatedRow` property to access the updated row data.\n:::\nAs an alternative to using the `Save/Discard` buttons and events, you can configure the onSubmit event in each column's settings to run a query that saves the new data. The onSubmit event takes place whenever the user clicks away from the edited cell, or presses the Enter key within it.\nAfter configuring your save button to send data back to your datasource, set up a success callback nested within the button's onClick to automatically pull the latest information into the table. In this example, `myAPI_get` is a query that refreshes the table data.\n`javascript\n{{\n  // in the button's onClick field\n  myAPI_update.run(\n    () => myAPI_get.run(), // success callback\n    () => {} // error callback\n  )\n}}`\nupdatedRow\nThis property contains the details of the row that was recently updated. This is available regardless of the Update mode, however it's most useful in Single row mode. Once edits have been made, this property contains an object that looks like:\n`javascript\n{\n  \"address\": \"<updated-address-value>\",\n    \"client-id\": \"<updated-client-id-value>\",\n    \"zone\": \"<updated-zone-value>\",\n  \"status\": \"<updated-status-value>\"\n}`\nThe default value for this property is an object with keys as column names and blank strings as its values. For example:\n`javascript\n{\n    \"address\": \"\",\n    \"client-id\": \"\",\n    \"zone\": \"\",\n  \"status\": \"\"\n}`\nThe new values become available as soon as a user updates a table cell and navigates away from it (triggering the onSubmit event).\nThe `updatedRow` property is reset to the default value whenever the cell changes are saved (onSave) or discarded (onDiscard).\nMulti row\nCells can be edited across any number of rows at a time. Updated rows are saved all at once by using an external Button widget, which you should place onto the canvas and configure to run a query that submits multiple rows to a datasource.\nIn this mode, users are free to choose when to save their edited rows. To facilitate this, take a look at this example of setting up a new Save button:\n\n\nIn your Table's properties pane, set your columns to be Editable and select Multi row mode.\nNavigate to your query that handles saving the user's changes, or create a new one. This query should be configured to submit multiple rows of data at a time to its datasource. For example, when using Google Sheets, you should use the Update Many type of query.\n\nWhen you make changes in the table, the affected rows are added to the table's `updatedRows` property. This `updatedRows` object contains all the information about those rows, including their indices, changed values, and their complete set of values.\n\nIn the query field that expects the data to send, use `Table1.updatedRows` to access your table data. The required format might vary depending on the type of datasource you use, but for this example with Google Sheets, it expects an array of row objects. Be sure to look at the datasource reference pages to see what format your datasource requires.\n\nTo get just an array containing the affected rows, you can use the JS map() method along with `Table1.updatedRows`:\n`javascript\n// in a Google Sheets \"Update Many\" query\n{{\n    Table1.updatedRows.map(row => {\n        return row.allFields\n    })  \n}}`\n\n\nBack on the canvas, drop a Button widget near the table. Update its label to \"Save All\" or whatever else you'd like.\n\n\nIn the button's onClick event, configure it to execute the Update Many query. Use either the dropdown menu or code:\n\n\n`javascript\n// in the button's onClick field\n{{myAPI_updateMany.run()}}`\n\nAdd a callback to automatically refresh the table after a successful query. In this example, `myAPI_get` is a query that refreshes the table data.\n\n\n`javascript\n{{\n  // in the button's onClick field\n  myAPI_updateMany.run(\n    () => myAPI_get.run(), // success callback\n    () => {} // error callback\n  )\n}}`\nNow you are ready to edit your table in any number of rows, and the \"Save All\" button should submit all your changes to the datasource and refresh the table.\nupdatedRows\nThis property contains all the details of the edited rows (only useful when Update mode is set to Multi row). It has the following structure:\n`javascript\n[\n  {\n    \"index\": 0, // Index of the row in tableData\n        \"PRIMARY_KEY\": \"PRIMARY_KEY_VALUE\", \n    \"updatedFields\": { // contains all the edited cell values from the row\n      \"address\": \"123 Maple St.\"\n    },\n    \"allFields\": { // contains all the cell values (including the edited cells) from the row\n      \"client-id\": \"1\",\n      \"address\": \"123 Maple St.\",\n      \"zone\": \"X\",\n      \"status\": \"processing\"\n    }\n  }\n]`\nupdatedRowIndices\nThis binding property displays the index number of the updated row. It contains an array of edited row indices.\nFor example, if you update the second and fourth rows of a table, the `updatedRowIndices` property contains the value:\n`javascript\n[ \n  1,\n  3\n]`\n\nAdding new rows\nIn addition to editing individual cells, you can use the Table UI to submit new rows of data.\n\n:::info Important\nIf you'd like to add new rows to your table, ensure that the columns in your Table's properties are marked as Editable. A column can only accept user input if its Editable property is checked.\n:::\n\nSelect your Table widget and turn on the Allow adding a row property.\nA new button should appear in the Table's header called 'Add new row'. Click this button to add a row of empty cells to the top of the table (or if the Table's Default Values property is filled, the new cells are created with that data).\nOnce the cells have been filled in with desired values, clicking the \"Save\" button closes the editing mode and executes the Table's onSave event. This event should contain code to execute a query that sends the new row to the datasource which supplies the table. Or, clicking \"Discard\" removes the new row from the table and triggers the onDiscard event.\n\nThe properties that can be used for adding new rows are explained in detail below:\nAllow adding a row\nWhen this property is turned on:\n  - Users are able to click a button on the table to create a new row of data. Users can only input data for columns that are marked as Editable in the table properties.\n  - The Default Values property and the onSave and onDiscard events appear in the table's properties pane under the Adding a row section. Use these to configure the table's behavior when adding new rows.\nDefault values\n\nThe values to automatically populate the new row with when a user begins creating a new row. Expects an object with the same keys as the columns in the existing table data.\nisAddRowInProgress\nWhile the \"Add new row\" mode is enabled in the Table widget, `isAddRowInProgress` is `true`. You can use this property for  providing visual feedback in the UI for the user or for enforcing specific validation rules for user input in new rows (See isNewRow).\nnewRow\nWhen a new row is being added to the Table, this property contains a reference to that new row object being added; otherwise, it is `undefined`. This is useful for accessing the user input to send it via query once the user is ready to submit the new data.\nisNewRow\n`isNewRow` can be used only within the Validation properties (Regex, Valid, Error Message, and Required). With it, you may set specific validation rules for new table rows that don't necessarily apply to editing existing cells.\nIn the following video example, the Table allows editing a client in \"Zone AE,\" however it doesn't allow adding any new rows in Zone AE.\n\n`javascript\n// in the Table widget's Valid property:\n{{isNewRow? currentRow.zone !== \"AE\" : true}}`\nA user may make any changes to existing rows, however they're not allowed to add any new row where the `zone` is `\"AE\"`.\n\nSaving new rows\nSaving new rows works much like submitting a form. Use the onSave event under the Adding a row section in the Table's property pane to execute a query or function that sends the new row to the underlying datasource.\n\nAs shown in the video, suppose that your table gets information from a query called `myAPI_get`, which is a GET request to a datasource called `myAPI`. After you add a new row to the table, to update the original datasource with the new data, you might execute a query like `myAPI_post`, which would be a POST request to `myAPI`. To add the newly added data to the POST request, you can use the Table's newRow attribute to reference the new row. When the POST request is successful, the `myAPI` datasource receives the new information, and the Table shows the new row the next time it updates.\nOnce the save button is configured to send the new row back to your datasource, set up a success callback nested within the button's onClick to automatically pull the latest information into the table.\n```javascript\n{{\n  // in the button's onClick field\n  myAPI_post.run(\n    () => myAPI_get.run(), // success callback to refresh table\n    () => {} // error callback\n  )\n}}",
    "tag": "appsmith"
  },
  {
    "title": "Table",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/table",
    "content": "\ntoc_min_heading_level: 2\ntoc_max_heading_level: 3\n\nTable\nThe table widget displays data in rows and columns. You can display data from an API in a table, trigger an action when a user selects a row, and even work with sizable paginated data sets.\n\nDisplay data in tables\nTo get data from a query to appear in a table widget, follow these steps:\n\nIf you don't already have a query that returns data from a datasource, create one first.\nClick on your table widget to open its properties pane.\nIn its properties pane, enter the following code snippet into its Table data property:\n    `javascript\n    // replace <query_name> with the name of your query\n    {{<query_name>.data}}`\n\nIf you are doing work on your data in a JS object before it goes into the table and you need to supply the data from there, you should instead reference whichever of the JS object's properties returns your final results. For example, if you have a JS object called `utils` with a function `formatData`, you might put the following snippet into the table's Table data field:\n`javascript\n{{ utils.formatData() }}`\nYou can look at how this is set up in this sample app.\nNow, the table widget should be populated with the data coming from the query. By default, this query also now runs automatically when the page loads. You can change this behavior from the query's settings page.\nTransform table data\nSome API / Query responses might have deeply nested, unnecessary, or unhelpfully formatted fields. These can be transformed to fit your needs by parsing and processing the data with JavaScript. The JS map() function is highly recommended for processing raw data from your queries to fit your table correctly.\nExample\n`https://api.github.com/repos/appsmithorg/appsmith/issues`\nBinding this API's response directly to a table would be unreadable like the image below:\n\nTo format this data, you can write a map function to parse the API response, format the data, and return an array of row objects that contain only the desired fields:\n```javascript\n{{ \n    fetch_issues.data.map((issue) => {\n        return {\n            user: issue.user.login,\n            assignees: issue.assignees.map((assignee) => assignee.login).join(\",\"),\n            title: issue.title,\n            number: \"#\" + issue.number,\n        };\n    });\n}}\n```\n\nColumn settings\nYou can configure your table columns individually in a variety of ways to best fit your needs. For more information about their settings, see column settings.\nAdd new columns\nYou can manually add a custom column to the table by clicking the \"+ ADD A NEW COLUMN\" button in the table's properties pane. These can be used for a wide variety of purposes, including adding button- or checkbox-type columns alongside your data. You can adjust the settings for this column just like any other.\nTable header options\nYou can customize which features are available for use in the table header. These features can be turned on or off via their related setting in the table's properties pane:\n\n\nSearch (toggle with Allow Searching)\nToggles visibility of the table widget's search bar.\n\n\nFilters (toggle with Allow Filtering)\nToggles visibility of the table widget's filtering options.\n\n\nDownload (toggle with Allow Download)\nThis button prompts the user to choose a file format (.CSV or Excel spreadsheet) and initiates the file download in the user's browser.\n\n\nCSV separator\nSets the separator character to use for formatting the downloaded .csv file. The default separator character is a comma `,`. This setting only applies when Allow Download is turned on.\n\n\n\n\nAdd a row (toggle with Allow adding a row)\nThis button inserts a new row into the table for the user to fill in. Read about inline editing for more details.\n\n\nPagination (toggle with Show Pagination)\nToggles visibility of the page cycle buttons and toggles showing the total number of records and pages in the header.\n\n\nPagination\nOnce the table widget has a set of records to display, it automatically shows as many rows as possible within its height. The remainder are placed on subsequent pages, which are navigable via the page buttons in the table header. (Show Pagination must be turned on in the table's properties).\nThe records are all held in memory regardless of whether they're currently visible on the table's page, so very large query responses and datasets can lead to performance degradation. For a strategy to handle paginating large datasets, see server side pagination.\nServer side pagination\nTables are often required to display large data sets from queries and APIs, but browsers can't always load all the data present in the database, or might do so very slowly. Appsmith supports responses of up to 5 MB at a time; larger responses result in this error (5009).\nTo paginate the responses and request smaller chunks of data at a time:\n\nEnable the server-side pagination property in the table\nCall the API / query via the onPageChange event\nConfigure pagination in the API / query using the Offset or Key-based pagination method.\n\n:::tip\nTurning on Server side pagination also enables the Total records property. This property is useful for helping to control the page buttons in the table header.\n:::\nOffset based pagination\nThis method uses the Table's page number to determine the offset of the records to fetch from the database. This method relies on the pageNo and pageSize values of the table to calculate the required pageOffset to fetch the correct records.\n`Table1.pageOffset = (Table1.pageNo - 1) * Table1.pageSize`\nThe pageOffset property (as well as pageNo and pageSize) can be used in the API / query by referencing it inside curly braces `{{ }}`.\n`sql\nSELECT * FROM users LIMIT {{ Table1.pageSize }} OFFSET {{ Table1.pageOffset }}`\n`https://mock-api.appsmith.com/users?page={{Table1.pageNo}}`\nKey based pagination\nThis method uses a value in the API response as the key to the following API call. This can be configured in the API settings by providing the Next & Previous URLs that the API should execute onPageChange.\n\nSort\nThe records in a table can be sorted by the value of a particular column by clicking on the column's header cell (where it shows the column's name). Clicking once sorts the rows by that column value in descending order, clicking again sorts in ascending order, and clicking a third time clears the sort. When the table is being sorted by a column, clicking the header of a different column automatically clears the first sort and begins sorting by the newly selected column.\nThe column sorting feature only works for users when Column Sorting is turned on in the table's properties. When this setting is turned off, you can still sort by column while using your app in Edit mode, but it won't work in View mode where the app is deployed.\nSearch\nWhen Allow Searching is turned on, the table header has a search bar that can be used to find records that have a value that matches the given search term. Search results include perfect matches as well as matches where the search term is contained somewhere within one of the row's values.\nYou can also set Default Search Text in the table's properties to narrow results automatically when the page loads.\nSearching large datasets may degrade performance, so it's recommended to set up server side search for your table. This strategy helps to only query the data that you need, instead of pulling records that aren't relevant to your search.\nServer side search\nServer side searching is useful for reducing unnecessary results from queries; rather than requesting lots of data from the server and then filtering it on the client, you can pass search terms to the server so it only fetches relevant results in the first place. This can significantly improve response times when working with large data sets.\nA search input is available on the table header to filter out records being displayed on the table. You can access the text in the search bar with `Table1.searchText`; anytime that text is changed, the table's `onSearchTextChange` event is triggered. Using the search text and the related event, you can configure your table to query its datasource for the appropriate results:\n\n\nCall the API / query with the onSearchTextChange event in the table's properties pane.\nPass the value of `Table1.searchText` within the API request / query.\n\nAs a SQL string:\n`sql\nSELECT * FROM users WHERE name LIKE {{\"%\" + Table1.searchText + \"%\"}} ORDER BY id LIMIT 10;`\nAs an API request with URL parameters:\n`https://mock-api.appsmith.com/users?name={{Table1.searchText}}`\nFilter\nWhen Allow Filtering is turned on, the table header has a \"Filters\" button, which can be used to find records where specific fields meet a given condition. For example, in an employee management dashboard, you might want to filter the table to show only records where the person's `Team Leader` is equal to `Alex Smith`. \nFiltering large datasets may degrade performance, so it's recommended to set up server side filter for your table. This strategy helps to only query the data that you need, instead of pulling records that aren't relevant to you.\nServer side filter\nServer side filtering uses the same principles as described in server side searching: some term or value is sent to the database or API to filter out unnecessary data from the requested dataset. In this case, you choose a value that records must match in order to be returned in the query's response.\nServer-side filtering requires using another widget, such as a Select widget, which you can use to provide users with a list of supported filters to choose from.\n\nDrag a select widget to the canvas and add options that you might use to filter your data\nSet the table widget's onOptionChange event to call your API / query \nPass the Select widget's `selectedOptionValue` within the API request / query string\n\nAs a SQL query:\n`sql\nSELECT * FROM users WHERE gender = {{genderDropdown.selectedOptionValue}};`\nAs an API request with URL parameters:\n`https://mock-api.appsmith.com/users?gender={{genderDropdown.selectedOptionValue}}`\nRefresh table data\nWhen changes are made to the datasource that supplies your table with data, the table won't automatically reflect these changes. Any time you submit new data to your datasource, be sure to use events and/or write code that re-runs the query that puts data into your table.\nExample 1:\nThis can be as simple as creating a button widget whose `onClick` event is bound to `<query_name>.run()`. Here, `<query_name>` is the name of the query that gets data for your table (and is probably referenced in the table's Table data field). When the button is clicked, the query is run, and the table is given fresh data.\nExample 2:\nWhen you submit new data to your datasource, re-run your original query as a success callback if the submission succeeds. Imagine you have a table whose data comes from your GET query `getData`, and a button that submits a form with new user input via a query called `sendNewData`:\n\nWhen the form is submitted via the button's `onClick`, it executes\n    `javascript\n    {{ sendNewData.run() }}`\nOn success, it executes `getData.run()` as a callback to get the latest version of the dataset that includes the new changes:\n    `javascript\n    {{ sendNewData.run(() => getData.run(), () => {}) }}`\n\nNow when `sendNewData` succeeds, your table automatically refreshes itself.\nUpdate table data in real time\nIf you want to update data in the table periodically without requiring users to trigger the refreshes, you can use the `setInterval` function.\nIn this example, you'll use the Switch widget `Switch1` to control this function and a table widget that uses the `getData` query.\n\nDrag and drop a switch widget onto the canvas.\nGo to its onChange event and toggle the `JS` option.\nIn the onChange field, paste the following code with any necessary changes:\n\n`javascript\n{{\n(() => {\n    if (Switch1.isSwitchedOn) {\n        setInterval(() => getData.run(), 2000, \"autoupdate\");\n    } else {\n        clearInterval(\"autoupdate\");\n    }\n})()\n}}`\nHere, the `setInterval` function calls the `getData` query every 2 seconds once the switch widget is turned on, or it stops the cycle if it's switched off.\n\nEdit cells and add rows\nThe Table widget comes with features that enable you to make and submit changes to your dataset from directly within the table. For more information about setting up this feature, see inline editing.\nProperties\nProperties allow you to edit the table, connect it with other widgets, and customize how the user interacts with it.\nGeneral\nGeneral properties control the data and behavior of the widget. These properties are present in the properties pane of the widget.\n| Property       | Definition |\n| ---------------|------------|\n| Table Data                 | Use this field to provide the data to be displayed in the table, either by writing an array of objects to display as table rows or by binding data from an API/Database using the mustache syntax, like `{{<query_name>.data}}`. |\n| Columns                    | Automatically populated from the Table Data. This lets you edit the column label, show/hide each column (with the eye icon), and also manage the individual column settings.   |\n| Primary key column | Assigns a unique column which helps maintain `selectedRows` and `triggeredRows` based on value. Affects the performance of caching the dataset for quick loading and access. |\n| Show Pagination | Toggles visibility for the page information and control buttons in the table header. |\n| Server Side Pagination     | Enables you to implement pagination by limiting the number of results fetched per API / query request. Use this property when your table data is bound to an API / query.                               |\n| Total Records | This number value is displayed in the table header to inform the user of how many records exist in the table. This property is only visible when you enable Server Side Pagination. |\n| Allow Searching | Toggles visibility of the search bar in the table header. |\n| Client Side Search | Sets search behavior for the search bar in the table header. When turned on, the bar searches only the data currently loaded in the table. Otherwise, it searches the entire data set. |\n| Default Search Text        | Sets the default search query for the search bar in the table header.     |\n| Allow Filtering | Toggles visibility for the \"Filters\" button and its features in the table header. |\n| Default Selected Row       | Sets which rows are selected in the table by default. When Enable multi-row selection is turned on, this setting expects an array of numbers corresponding to the indices of the selected rows. Otherwise, it expects a single number.    |\n| Enable multi-row selection | Allows multiple rows of a table to be selected at the same time. The rows are accessible by the `{{ Table1.selectedRows }}` property.         |\n| Column Sorting | Toggles whether table columns are sort-able. When turned on, users may click column headers to sort the table rows by that column's value. This setting only applies while the app is in View mode. |\n| Visible   | Controls the widget's visibility on the page. When turned off, the widget won't be visible when the app is published.        |\n| Animate Loading | When turned off, the widget loads without any skeletal animation. You can use a toggle switch to turn it on/off. You can also turn it off/on using javascript by enabling the JS label next to it. |\n| Allow Download | Toggles visibility of the \"Download\" button in the table header. When turned on, users are able to download the table data as a .csv file or Microsoft Excel file. |\n| CSV Separator | Sets the separator character to use for formatting the downloaded .csv file. Only applies when Allow Download is turned on. Default: `,` |\nReference\nReference properties are used to access the widget's data and state using code. When using reference properties, substitute `<table_name>` in the examples below with the name of your table widget.\n| Property       | Definition | Code Snippet |\n| ---------------|------------|--------------|\n| selectedRow        | Contains the data of the row selected by the user. It's an empty object if no row is selected. | `{{<table_name>.selectedRow}}`   |\n| selectedRows       | Contains an array of rows selected by the user when multi-select is enabled. It's [null] if no row is selected.    | `{{<table_name>.selectedRows}}`        |\n| triggeredRow       | When a user interacts with an actionable item (like button) in a row, `triggeredRow` fetches the data of that column.   | `{{<table_name>.triggeredRow}}`        |\n| isVisible          | Reflects whether the widget is visible or not.  | `{{<table_name>.isVisible}}`   |\n| sortOrder          | Reflects the current column sort criteria. For example, if table rows are being sorted by the value of column `id` in ascending order, this property contains `{\"column\": \"id\", \"order\": \"asc\"}`.   | `{{<table_name>.sortOrder}}`   |\n| tableData          | Contains all the table data in JSON format.      | `{{<table_name>.tableData}}`  |\n| selectedRowIndex   | Contains the index of the row selected by the user. Not applicable when multiple rows are selected.    | `{{<table_name>.selectedRowIndex}}`   |\n| selectedRowIndices | Contains an array of the index of the rows selected by the user. Not applicable when multi-row selection is turned off.    | `{{<table_name>.selectedRowIndices`}} |\n| filteredTableData  | Contains the data of the rows left after applying any selected filters, sort rule, or search terms. | `{{<table_name>.filteredTableData}}` |\n| pageNo             | Contains the current page number that the user is on. APIs can use it for pagination. | `{{<table_name>.pageNo}}`  |\n| pageOffset | Contains a calculated value to represent how many records to skip when using Server side pagination. Use this value in your query to fetch the correct set of results. | `{{<table_name>.pageOffset}}` |\n| pageSize           | Contains the number of rows that can fit inside a page of the table. Changes along with the height & row height of the table. | `{{<table_name>.pageSize}}`   |\n| searchText         | Contains the search text entered by the user in the Table. | `{{<table_name>.searchText}}`  |\nStyle\nStyle properties allow you to change the look and feel of the table. These properties are present in the properties pane of the widget.\n| Style                     | Description                                              |\n| ------------------------- | -------------------------------------------------------- |\n| Default Row Height    | Sets the height of the row in the table - short, default, or tall.  |\n| Text Size             | Sets the size of the text.                               |\n| Emphasis              | Sets a font style for text, such as bold or italic.|\n| Text Align            | Sets how text is aligned horizontally within the cells.  |\n| Vertical Alignment    | Sets where the cell contents are vertically positioned within the cells. |\n| Cell Background Color | Sets the background color of the table cells.            |\n| Text Color            | Sets the color for the text in the table.                |\n| Cell Borders          | Sets the border configuration for the table's cells. Default (all borders), horizontal borders only, or no borders. |\n| Border Radius         | Sets rounded-ness for the widget's corners.              |\n| Box Shadow            | Sets a shadow around the widget's edges.                 |\n| Border Color          | Sets the color of the widget's borders.                  |\n| Border Width          | Sets the thickness of the widget's borders.              |\nEvents\nThese event handlers can be used to run queries, JS code, or other supported actions when the event is triggered.\n| Action                 | Description               |\n| ---------------------- | ------------------------- |\n| onRowSelected      | Sets the action to run when the user selects a row.   |\n| onPageChange       | Sets the action to run when the table's page changes.  |\n| onPageSizeChange   | Sets the action to run when the table's height is changed. This event can only be triggered by developers working on the app, not by end users. For example, it can be used to set a Limit in your query dynamically. |\n| onSearchTextChange | Sets the action to run when the user enters a search text.     |\n| onSort             | Sets the action to run when the user sorts the data.          |\n\nTable data\nThis field is where you can supply data to the table. The table expects this field to be an array of objects, with each object representing a row of the table.\n\nData can be written manually in this field as an array, or retrieved from a query response by using mustache syntax ( `{{ }}` ) to reference the query. To see how to get query data into the table, check display data in tables.\nColumns\nThis property shows all the columns in the table, and it gets automatically populated from the Table Data. You can edit the column's name, hide/show a column, and customize more from the column settings.\n\nTotal records\nThe total records field stores the total number of rows in the table. It's useful in pagination as it helps in determining the number of pages, and then when to turn on/off the page control buttons in the table header. It's only visible when you enable Server Side Pagination.\n\nTo get the total record count of your data, follow the steps below:\n\nCreate a new query `get_count` for the data source connected to the table.\nIn the query window, enter a count query for the data.\n    `SQL\n    -- Postgres\n    SELECT COUNT(*) FROM <table_name>;`\nClick on Run and you can see the output in the response tab below.\n\nOnce the `get_count` query is successfully created, enter the following code to bind the query's output in the total records field:\n`javascript\n// Total records\n{{get_count.data[0].count}}`\nColumn sorting\nToggles whether table columns are sort-able. When turned on, users may click column headers to sort the table rows by that column's value. This setting only applies while the app is in View mode (where the app is deployed).\nselectedRow\nThe `selectedRow` property contains the data of the row that's selected within the Table. This may be useful for pulling data from the table to display specific records within other widgets. If no row is selected, `selectedRow` shows the column names with no data.\nYou can access the row data with `<table_name>.selectedRow`, and use dot or bracket notation with the column names to access the record's values:\n`javascript\n// access a row called \"id\" with dot notation\n{{Table1.selectedRow.id}}`\n`javascript\n// access a row called \"favorite color\" with bracket notation\n{{Table1.selectedRow[\"favorite color\"]}}`\nselectedRows\n`selectedRows` allows you to fetch the data from the table when the user selects multiple rows. To use this property, enable the multi-row selection option from the property pane of the table widget.\nTo bind table data to a widget, use the following snippet to access the selected table rows from within the widget's properties:\n`javascript\n// an array of row objects\n{{<table_name>.selectedRows}}`\nAn empty array `[]` is returned if no row is selected in the table.\ntriggeredRow\nIf your table has actionable items (like buttons) and a user interacts with it, triggeredRow fetches data from rows where that action has been performed. For example, if a button is pressed within the second row of a table, `<table_name>.triggeredRow` in that instance would contain all the data of the second row.\nTo bind a widget using this property, enter the code snippet given below:\n`javascript\n{{<table_name>.triggeredRow}}`\nselectedRowIndex\n`selectedRowIndex` gives you the index number of the selected row in the table. It's only applicable when one row is selected. If you have multiple or zero rows selected, it returns `-1`.\nTo bind a widget using this property, enter the code snippet given below:\n`javascript\n{{<table_name>.selectedRowIndex}}`\nselectedRowIndices\nselectedRowIndices gives you an array of the index numbers of the multiple rows selected in the table. It's only applicable when multiple rows are selected. You have to enable the \"multi-row selection\" from the property pane to use this property.\nTo bind a widget using this property, enter the code snippet given below:\n`javascript\n{{<table_name>.selectedRowIndices}}`\nfilteredTableData\n`filteredTableData` contains the data of the rows left after applying any selected filters, sorting rule, or search terms.\nTo use this property in a widget, enter the code snippet given below:\n`javascript\n{{<table_name>.filteredTableData}}`\npageNo\n`pageNo` gets the page number of the table that the user is currently viewing. This property can be used by APIs for pagination. To use this property in a widget, enter the code snippet given below:\n`javascript\n{{<table_name>.pageNo}}`\npageOffset\nThis value is calculated by multiplying the table's page number with the amount of records displayed per page. For example, if there are five records on each page, and the table is showing page three, then `Table1.pageOffset` should be equal to 10. Use this value in your query to fetch the correct set of results by asking it to skip the first 10 records.\n`javascript\n{{<table_name>.pageOffset}}`\npageSize\n`pageSize` shows the total number of rows displayed on a page of the table. `pageSize` can change upon resizing the table.\nTo bind a widget using this property, enter the code snippet given below:\n`javascript\n{{<table_name>.pageSize}}`\nsearchText\n`searchText` mirrors the text entered in the table's search bar by the user.\nTo bind a widget using this property, enter the code snippet given below:\n```javascript\n{{.searchText}}",
    "tag": "appsmith"
  },
  {
    "title": "Column Settings",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/table/column-settings.md",
    "content": "Column Settings\nYou can customize each table column individually through a set of properties by clicking on its gear icon in the table's properties pane.\n\nProperties\nThese common properties allow you to set the behavior of specific columns within the table widget.\n| Property       | Description  |\n| -------------- | -------------|\n| Column type    | Sets the type of cell to use in this column. There are a variety of different types that have different behaviors, such as buttons, switches, and more.  |\n| Computed Value |  It allows you to manipulate the value using JS expressions    |\n| Visible        | Controls the column's visibility on the page. When turned off, the column won't be visible.  |\n| Cell Wrapping  |Controls how overflowing contents of the column are handled. on - Contents get wrapped to the next line. off - Contents get ellipsis. |\n| Editable       | Controls whether cells of the column are editable.        |\nColumn type\nThis property allows you to select the type of cell to use in the column. Currently, the following column types are available:\n\nButton\nCheckbox\nDate\nIcon Button\nImage\nMenu Button\nNumber\nPlain Text\nSelect\nSwitch\nURL\nVideo\n\n\nButton\nThe button column type is a clickable cell that triggers an onClick event attached to it. For extra information about buttons, read about the Button widget.\nCheckbox\n\nThe checkbox column type represents something with two possible values - usually booleans True and False for checked and unchecked, respectively.\nThe checkbox column type supports inline editing and can be made Editable by turning on the Editable property in the column settings.\nDate\nThe date column type displays formatted date and time information. For more information on handling dates, read about the Datepicker widget.\nIcon button\nThe icon button column type contains a button that uses an icon as a label rather than text. It's a clickable cell that triggers an onClick event attached to it.\nFor extra information about icon buttons, read about the Icon Button widget.\nImage\nThe image column type parses the cell value as an image source URL or base64 data, and displays the resulting image within the table (or \"Invalid Image\" if the data isn't valid). The size of the image can be adjusted in the column's Style settings tab with the Image Size setting.\nFor more information about images in Appsmith, read about the Image widget.\nMenu Button\nThe menu button column type is a set of buttons in a group. Menus are sometimes hierarchically organized, allowing navigation through different levels of the menu structure.\nFor more information, read about the Menu Button widget.\nYou can also add menu items dynamically using the Menu Items Source as Dynamic.\n:::note\n You can use the `{{currentRow}}` binding inside the Source Data property for Menu Items. However, for configuring the menu items, you can only use {{currentItem}} and {{currentIndex}} bindings that reference the selected item, and it's index respectively on the menu button.\n:::\nNumber\nNumbers are stored in database columns as numeric data types. Typically, these data kinds are categorized by:\n\nPrecise Numeric Types - values that must maintain precision and scale. INTEGER, BIGINT, DECIMAL, NUMERIC, NUMBER, and MONEY.\nForms of Approximate Numbers - where the precision must be maintained and the scale may be floating. DOUBLE PRECISION, FLOAT, and REAL.\n\nThe number column type supports inline editing and can be made Editable by turning on the Editable property in the column settings.\nPlain text\nThe Plain text refers to data (such as file contents) that contain readable characters without graphical representation or other elements (floating-point numbers, images, etc.).\nThe plain text column type supports inline editing and can be made Editable by turning on the Editable property in the column settings.\nURL\nWhen the column type is URL, the table parses the cell contents as a hyperlink and the user may click the cell to be taken to the URL in a new browser tab. The only pieces of the URL that must be included are the domain and suffix (such as: example.com).\nVideo\nThe video column type displays videos within the table. The cell value should be a source file path or URL, such as YouTube, Facebook, Twitch, SoundCloud, Streamable, Vimeo, Wistia, Mixcloud, or DailyMotion. To read more about videos in Appsmith, take a look at the Video widget.\nSwitch\nThe Switch column type allows users to make a binary decision. Switches toggle the state of a single item on or off. It uses the boolean values True and False for the on and off states respectively, just like the checkbox.\nThe switch column type supports inline editing and can be made Editable by turning on the Editable property in the column settings.\nSelect\nThe select column type contains a drop-down list that offers options from a specified list of permitted inputs. For instance, you can use select type to capture values such as T-shirt size, gender, or favorite color. The list of choices for the select column should be placed in the Options property, as an array of objects with keys `label` and `value`:\n`javascript\n[\n  {\n    \"label\": \"abc\",\n    \"value\": \"abc\"\n  }\n]`\nFor more information about properties specific to this column type, read about the Select widget.\n\nThe select column type supports inline editing and can be made Editable by turning on the Editable property in the column settings.\nComputed value\nThe computed value field helps in creating custom table columns. For example, you can show a value calculated from the response of two different queries. This field also allows you to manipulate the value using JS expressions; For example, if you want to show the date time stamp in the human-readable format, you can use a `Moment.JS` function.\n\nYou can also access each row's column values with the `currentRow` property. `currentRow` is only accessible from inside the column properties pane. It can be helpful if you wish to merge multiple values/properties under a single column.\nIn the video below, the \"Email\" column is renamed to \"Contact\" and then the Computed Value property is used to merge the email and phone number into a single column.\n\nVisible\nThis controls the widget's visibility on the app's page. When turned off, the widget isn't visible in the published app. You can also use JS code to determine the widget's visibility programmatically. Click on `JS` next to the `Visible` field in the properties pane to write JavaScript code.\nFor example, drag a checkbox widget `Checkbox1` onto the canvas and bind it to the table's `Visible` property. To enable the `Visible` when the user checks the checkbox, add the following JavaScript code:\n`{{Checkbox1.isChecked}}`\nWhen you tick the checkbox, `Visible` is set to `true`, and the table becomes visible in the app.\n\nCell wrapping\nCell wrapping allows the contents of a cell to be wrapped to the following line instead of getting truncated. Cell wrapping can be enabled for a column or subset of cells in a column using `cell wrapping` property in column settings.\n\nEditable\nEditable controls the cell's edit-ability in the column. You can edit data in a cell of the column when it's turned on. Once a column has been made editable, an edit icon appears on the column header as an indicator. Currently, there are several column types support inline editing - Text, Number, Switch, Select, and Checkbox.\nIf you hover over any cell in the column, an edit icon appears. Click on the icon to edit the individual cell.\nBased on the Column type, you can edit the cell content. Once done, you can move away from the edit mode in two ways:\n\nEdited contents can be persisted on the Table cell by either pressing enter key or clicking anywhere outside the cell.\nEdited contents can be discarded by pressing the escape key.\n\n\nStyles\nDepending upon the column type, various style properties are available to change the look and feel of each column. For example, for a text column, you can have the following style properties-\n|     Property                    |         Description                                           |\n| ------------------------------- | ------------------------------------------------------------- |\n| Text Align                  | Sets the horizontal alignment of the text.                    |\n| Text Size                   | Sets the size of the text in the column.                      |\n| Font Style                  | Sets a font style for text, such as bold or italic.     |\n| Vertical Alignment          | Sets how the cell contents are vertically positioned.         |\n| Text Color                  | Sets the color of the text in the column.                     |\n| Cell Background             | Sets the background color for the cells in the column.        |",
    "tag": "appsmith"
  },
  {
    "title": "Range Slider",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/sliders/range-slider.md",
    "content": "\ndescription: >-\n  The Range Slider widget allows users to choose a range of values from\n  numerical data.\n\nRange Slider\nRange Sliders are great for allowing users to narrow and filter down large sets of data. They're often found in places such as online marketplaces, where an app might offer the ability to search for products based on a certain minimum and maximum price range.\n\nProperties\nProperties allow you to edit the Range Slider widget, connect it with other widgets and customize the user actions.\n| Property                | Type       | Description                                                                                                                                                                                                                                           | Code Snippet                   |\n| ----------------------- | ---------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------ |\n| Min Value           | Formatting | The starting/smallest possible value of the slider. The value may be negative and/or include decimals, however it must always be less than the Max Value. (number)                                                                              |                                |\n| Max Value           | Formatting | The ending/largest possible value of the slider. The value may be negative and/or include decimals, however it must always be greater than the Min Value. (number)                                                                              |                                |\n| Step Size           | Formatting | The increment by which the user can adjust the slider's value. This increment must be at least 0.1, and can't be greater than the Max Value. (number)                                                                                           |                                |\n| Min Range           | Formatting | The minimum distance allowed between the selected values. (number)                                                                                                                                                                                  |                                |\n| Default Start Value | Formatting | Sets an initial value to be captured as the starting value of the range, unless it's changed by the user. This value should be between the slider's Min Value and Max Value, and should be less than its Default End Value. (number)    |                                |\n| Default End Value   | Formatting | Sets an initial value to be captured as the ending value of the range, unless it's changed by the user. This value should be between the slider's Min Value and Max Value, and should be greater than its Default Start Value. (number) |                                |\n| Marks               | Formatting | An array of objects with keys `value` and `label` which define where reference labels should appear below the widget's slider. These labels can be shown or hidden with the Show Marks property toggle.                                         |                                |\n| Tooltip Always On   | Formatting | Hovering over the slider with the mouse cursor shows the slider's selected value in a tooltip; enabling this setting forces the tooltip to always be visible, regardless of the cursor's location. (bool)                                           |                                |\n| start               | Binding    | Represents the beginning value of the user's selected range. (number)                                                                                                                                                                               | `{{<widget-name>.startValue}}` |\n| end                 | Binding    | Represents the ending value of the user's selected range. (number)                                                                                                                                                                                  | `{{<widget-name>.endValue}}`   |\nThese properties allow you to perform formatting changes or bind it to any other widget in queries or JS objects.\nMin Value / Max Value\nThese properties represent the lower and upper bounds of values that can be selected with the slider. The Min Value determines the value at the far left end of the widget, and the Max Value determines the value at the far right end. Negative and/or decimal values are allowed, however the Min Value must always be less than the Max Value.\n\nStep Size\nThe `Step Size` property determines the smallest increment by which the user may adjust the value selected by the slider. Smaller values for this property (can't be smaller than 0.1) result in finer control of the selection, whereas larger step sizes result in coarser control.\n\nMin Range\nThis property represents the minimum difference allowed between the low and high ends of the user's selection. This value can't be less than 0.1.\n\nDefault Start / End Value\nSets an initial start/end value for the range to be captured as user input unless it's changed by the user.\n\nMarks\nMarks appear along the bottom of the widget as labels for the different values along the slider. Using the `Marks` property, which is an array of objects with keys `label` and `value`, you can define where these marks appear and how they're labeled. Each mark appears below the place where its `value` is located on the slider, and has the text from its corresponding `label`.\n\nTooltip Always On\nWhen this property is enabled, the widget's tooltip is always visible, and shows the currently selected value on the slider. If this setting is turned off, the tooltip is only visible when the user is hovering over the slider with their mouse cursor.\n\nStart / End\nThese binding properties allow you to access the values that have been selected with the Range Slider. For example, if the selected slider range is `45` to `80`, then the `start` and `end` values would look like:\n```\n{{RangeSlider1.start}}\n// 45\n{{RangeSlider1.end}}\n// 80\n```\n\nEvents\nEach variant of the Slider widget has events that are called when the user adjusts the widget's values:\n| Event        | Description                                                                                                                                                                                                                                                                                       | Example                                                                  |\n| ------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ |\n| onStartValueChange | Sets an action to take place when the user changes the range's start value. Can be set from the GUI list of common actions (See a list of supported actions), or you can define a custom JavaScript function to call instead. | Filtering a dataset according to user input. |\n| onEndValueChange   | Sets an action to take place when the user changes the range's end value. Can be set from the GUI list of common actions (See a list of supported actions), or you can define a custom JavaScript function to call instead.   | Filtering a dataset according to user input. |",
    "tag": "appsmith"
  },
  {
    "title": "Sliders",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/sliders",
    "content": "Sliders\nSliders are useful widgets that allow you to capture user input related to a range of data, and offer visual feedback to users as they select values.\nUsage\nAppsmith provides different types of slider widgets that you could use:\n\nCategory Slider - Useful for a fixed set of incremental values like t-shirt sizes or ratings.\nNumber Slider - Useful for numerical data like percentages or temperatures.\nRange Slider - Useful for numerical ranges of data like temperatures and pressures.\n\nClick on the available slider links to learn more.\n\nCategory Slider\nNumber Slider\nRange Slider\n\nStyles\nStyle properties allow you to control the look and feel of your widgets.\n| Size  | Sets the size of the widget on the canvas; choose from S (Small/4px), M (Medium/6px), or L (Large/8px).                    |\n| --------- | -------------------------------------------------------------------------------------------------------------------------------------- |",
    "tag": "appsmith"
  },
  {
    "title": "Number Slider",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/sliders/number-slider.md",
    "content": "\ndescription: >-\n  The Number Slider widget allows users to choose a numerical value from a range\n  of data.\n\nNumber Slider\nUse the Number Slider when you want to allow the user to select a numerical value from a set range of possible data. For example, it may be used to set a variable for some calculation while only allowing values within a reasonable range.\n\nProperties\nProperties allow you to edit the Number Slider widget, connect it with other widgets and customize the user actions.\n| Property                                                            | Type       | Description                                                                                                                                                                                                            | Code Snippet              |\n| ------------------------------------------------------------------- | ---------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------- |\n| Min Value       | Formatting | The starting/smallest possible value of the slider. The value may be negative and/or include decimals, however it must always be less than the Max Value. (number)                                               |                           |\n| Max Value       | Formatting | The ending/largest possible value of the slider. The value may be negative and/or include decimals, however it must always be greater than the Min Value. (number)                                               |                           |\n| Step Size                 | Formatting | The increment by which the user can adjust the slider's value. This increment must be at least 0.1, and can't be greater than the Max Value. (number)                                                            |                           |\n| Default Value         | Formatting | Sets an initial number to be captured as user input unless it's changed by the user. This value should be between the slider's Min Value and Max Value. (number)                                             |                           |\n| Marks                         | Formatting | An array of objects with keys `value` and `label` which define where reference labels should appear below the widget's slider. These labels can be shown or hidden with the Show Marks property toggle. (bool) |                           |\n| Show Marks               | Formatting | Toggles on/off the widget's reference labels below the slider element. (bool)                                                                                                                                        |                           |\n| Visible                                  | Formatting | Controls widget's visibility on the page. When turned off: The widget won't be visible when the app is published. It appears translucent when in Edit mode. (bool)                                                   |                           |\n| Disabled                                | Formatting | Makes the widget un-clickable or unusable. The widget remains visible to the user, but user interaction won't be allowed. (bool)                                                                                     |                           |\n| Animate Loading                                                 | Formatting | When turned off, the widget loads without any skeletal animation. You can use a toggle switch to turn it on/off. You can also turn it off/on using JavaScript by enabling the JS label next to it. (bool)            |                           |\n| Tooltip Always On | Formatting | Hovering over the slider with the mouse cursor shows the slider's selected value in a tooltip; enabling this setting forces the tooltip to always be visible, regardless of the cursor's location. (bool)            |                           |\n| value                         | Binding    | Represents the value which is currently selected in the widget. (number)                                                                                                                                             | `{{<widget-name>.value}}` |\nThese properties allow you to perform formatting changes or bind it to any other widget in queries or JS objects.\nMin Value / Max Value\nThese properties represent the lower and upper bounds of values that can be selected with the slider. The Min Value determines the value at the far left end of the widget, and the Max Value determines the value at the far right end. Negative and or decimal values are allowed however, the Min Value must always be less than the Max Value.\n\nStep Size\nThe `Step Size` property determines the smallest increment by which the user may adjust the value selected by the slider. Smaller values for this property (can't be smaller than 0.1) result in finer control of the selection, whereas larger step sizes result in coarser control.\n\nDefault Value\nSets an initial number to be captured as user input unless it's changed by the user.\n\nMarks\nMarks appear along the bottom of the widget as labels for the different values along the slider. Using the `Marks` property, which is an array of objects with keys `label` and `value`, you can define where these marks appear and how they're labeled. Each mark appears below the place where its `value` is located on the slider, and has the text from its corresponding `label`.\n\nShow Marks\nThis property is a toggle that enables/disables the marks along the bottom of the slider.\n\nTooltip Always On\nWhen this property is enabled, the widget's tooltip is always visible, and shows the currently selected value on the slider. If this setting is turned off, the tooltip is only visible when the user hovers over the slider with their mouse cursor.\n\nValue\nThis binding property allows you to access the value that has been selected with the slider. For example, if the selected value is `50`, then the `value` property would look like:\n`{{NumberSlider1.value}}\n// 50`\n\nEvents\nEach variant of the Slider widget has events that are called when the user adjusts the widget's values:\n| Event        | Description                                                                                                                                                                                                                                                                                       | Example                                                                  |\n| ------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ |\n| onChange | Sets an action to take place when the user changes the slider's value. Can be set from the GUI list of common actions (See a list of supported actions), or you can define a custom JavaScript function to call instead. | Fetching a certain page or image from a range based upon user selection. |",
    "tag": "appsmith"
  },
  {
    "title": "Category Slider",
    "source": "https://github.com/appsmithorg/appsmith-docs/tree/main/website/docs/reference/widgets/sliders/category-slider.md",
    "content": "\ndescription: >-\n  The Category Slider widget allows users to choose from a fixed set of\n  incremental values.\n\nCategory Slider\nThe Category Slider widget can be useful for situations where users must provide feedback from a fixed set of ascending options. Surveys, for example, often have questions that ask respondents to rate how much they agree or disagree with certain statements (that is, Strongly agree/ agree/ disagree/ strongly disagree).\n\nProperties\nProperties allow you to edit the Category Slider widget, connect it with other widgets and customize the user actions.\n| Property                                                      | Type       | Description                                                                                                                                                                                            | Code Snippet              |\n| ------------------------------------------------------------- | ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------- |\n| Options             | Formatting | An array of objects with keys `value` and `label` which define the possible selections that the user can make with the slider.                                                                       |                           |\n| Default Value | Formatting | Sets an initial option to be captured as user input unless it's changed by the user. This property should be set to match the `value` attribute of your desired option from the Options object.    |                           |\n| Show Marks       | Formatting | Toggles on/off the widget's reference labels below the slider element.                                                                                                                                 |                           |\n| Visible                            | Formatting | Controls widget's visibility on the page. When turned off: The widget won't be visible when the app is published. It appears translucent when in Edit mode.                                            |                           |\n| Disabled                          | Formatting | Makes the widget un-clickable or unusable. The widget will remain visible to the user but user interaction won't be allowed.                                                                           |                           |\n| Animate Loading                                           | Formatting | When turned off, the widget will load without any skeletal animation. You can use a toggle switch to turn it on/off. You can also turn it off/on using JavaScript by enabling the JS label next to it. |                           |\n| value                 | Binding    | Represents the value the value which is currently selected in the widget.                                                                                                                              | `{{<widget-name>.value}}` |\nThese properties allow you to perform formatting changes or bind it to any other widget in queries or JS objects.\nOptions\nUse the `Options` property to define the set of choices that the user may choose from with the slider. This property should be an array of objects, each with a `label` key (text to be displayed to the user) and a `value` key (the corresponding value to use within your widgets and code).\n\nDefault Value\nSets an initial option to be captured as user input unless it's changed by the user. Please note that this property should be set to match the `value` attribute of your desired option from the Options object.\n\nShow Marks\nThis property is a toggle that enables/disables the label markings along the bottom of the slider.\n\nValue\nThis binding property allows you to access the value that has been selected with the slider. For example, if the selected value is `\"agree\"`, then the `value` property would look like:\n`{{CategorySlider1.value}}\n// agree`\n\nEvents\nEach variant of the Slider widget has events that are called when the user adjusts the widget's values:\n| Event        | Description                                                                                                                                                                                                                                                                                       | Example                                                                  |\n| ------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ |\n| onChange | Sets an action to take place when the user changes the slider's value. Can be set from the GUI list of common actions (See a list of supported actions), or you can define a custom JavaScript function to call instead. | Fetching a certain page or image from a range based upon user selection. |",
    "tag": "appsmith"
  }
]