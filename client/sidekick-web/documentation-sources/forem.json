[
  {
    "title": "Forem Developer Docs",
    "source": "https://github.com/forem/forem-docs/tree/main/",
    "content": "Forem Developer Docs\nWelcome to Forem's developer documentation! The docs are built using Docusaurus 2, a React and Markdown based documentation website generator.\nOur developer docs are meant to be used as a way to find instructions to setup a local instance of Forem, documentation on the architecture of Forem, how to contribute, and many other useful documents.\nIf you have launched a Forem community of your own and are looking for documentation on how to manage that community, please see our Admin Docs\nTechnical Overview\nMost of the configuration here is not too different from the basic `preset-classic` of Docusaurus. The main folders are:\n- `docs`: where the documentation lives\n- `src`: any custom CSS, components or pages\n- `static/img`: any image files\nInstallation\n`console\ngit clone https://github.com/forem/forem-docs.git\nyarn install`\nLocal Development\nOnce installed:\n`console\nyarn start`\nThis command starts a local development server and opens up a browser window. Most changes are reflected live without having to restart the server.\nAll relevant Markdown files are in `docs/`. To update any docs, simply update the Markdown file with your favorite Markdown editor.\nYou can also add new files to the relevant sections.\nFor other types of contributions outside of text changes to Markdown files, please see Docusaurus' docs for additional info.\nSearch\nOn production, search is run by Algolia, specifically their DocSearch service.\nThe service scrapes the website every 24 hours or so, so new contributions to the docs may take about that long to update.\nTesting Production Builds\nTo see if your changes will build (for ex. you made added some screenshots) you can run:\n`console\nyarn build`",
    "tag": "forem"
  },
  {
    "title": "Licensing",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/licensing.md",
    "content": "\nsidebar_position: 12\nLicensing\nThis program is free software: you can redistribute it and/or modify it under\nthe terms of the GNU Affero General Public License as published by the Free\nSoftware Foundation, either version 3 of the License, or (at your option) any\nlater version. Please see the\nLICENSE file in our\nrepository for the full text.\nLike many open source projects, we require that contributors provide us with a\nContributor License Agreement (CLA). By submitting code to the Forem project,\nyou are granting us a right to use that code under the terms of the CLA.\nOur version of the CLA was adapted from the Microsoft Contributor License\nAgreement, which they generously made available to the public domain under\nCreative Commons CC0 1.0 Universal.\nWhere can I learn more about the AGPL-3 license?\nPlease refer to the official\n\u201cWhy the Affero GPL\u201d and the\nFAQ page on\nGNU.org for full details regarding this license.\nWhy does Forem have a CLA?\nThe Contributor License Agreement (CLA) is a legal document in which you state\nthat you are entitled to contribute your code to the Forem codebase, and are\nwilling to have it used in distributions and derivative work.\nThe CLA helps provide confidence to future users that they will be allowed to\nuse the Forem codebase without fear that a contributor will try to withdraw\npermissions at a later date.\nAm I giving away the copyright of my contributions?\nNo. You are granting Forem/DEV a license to use and distribute your contribution\nwithout further restriction, not assigning the copyright.\nWhat if I have other questions?\nPlease check out our main repository or send an email to",
    "tag": "forem"
  },
  {
    "title": "API",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/api.md",
    "content": "\nslug: /api\ntitle: API\n\nAPI\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nThere are two versions of the API: version 0 and version 1. All V0 endpoints are available in V1: we will \nbe adding V1 documentation for these endpoints in the future. Right now we recommend calling V0 endpoints with `accept` and \n`api-key` headers.\nVersion 0\nThis is the legacy API. It is deprecated and will be removed in a future release. Clients can continue to use\nit as is, but we recommend using the version 1 API.\nVersion 1\nThis is the current version of the API. It is the recommended way to interact with Forem. Version 1 requires clients\nto use an `accept` header, and many endpoints (but not all) require `api-key` header. \nThe `accept` header must be set to `application/vnd.forem.api-v1+json`.\nThe `api-key` header must be set to the API key for the user. This API key can be generated by the user via their",
    "tag": "forem"
  },
  {
    "title": "FAQs",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/faqs.md",
    "content": "\nsidebar_position: 10\nFAQs\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nFrequently Asked Questions\nHow do I log in after starting up Forem for the first time?\nSeeding the database create an admin user (see\nDatabase) with the following\ncredentials:\n`email: admin@forem.local\npassword: password`\nOnce logged in as this admin user, you can turn on any authentication methods\nyou'd like (see Authentication)\nHow do I build my local copy of the Ruby source code documentation?\n`shell\ncd docs\nmake ruby-doc`\nThen open `.static/ruby-doc/index.html` in the `docs` directory and browse the\nRuby documentation\nHow do I enable logging to standard output in development?\nBy default Rails logs to `log.development.log`.\nIf, instead, you wish to log to `STDOUT` you can add the variable:\n`shell\nexport RAILS_LOG_TO_STDOUT=true`\nto your own `.env` file.\nHow do I see comments in the Feed?\nOn the home Feed, we only show comments above certain \"score\". It's likely the\ncomments in the local environment will never meet this score. If you want to see\ncomments locally, you will need to update the score of your local comments\nmanually. Here's how:\n\nOpen the terminal.\nRun `rails dbconsole` to open the PostgreSQL terminal. Alternatively, run\n   `psql PracticalDeveloper_development` to open `psql`, the PostgreSQL\n   terminal.\nEnter `update comments set score = 30;`.\nType `exit` to leave the PostgreSQL terminal.\n\n\nNote: dbconsole reads database information from config/database.yml which is\nalways better since database configs might change in the future.\n\nOnce you refresh the app, you should be able to see some comments in the Feed.\nHow do I make someone follow me on my local environment?\nIn certain cases, for example when testing various functionalities, you may need\nto be able to make some user follow you. Here's how:\n\nOpen the rails console by running `rails c` in your terminal.\nGet any user you want to follow you, for example `user = User.first`.\nThen make this user follow you: `user.follow(your_username)`.\n\nBoom, you have a new follower!\nHow do I remove / leave organization I created?\n\nOpen the rails console by running `rails c` in your terminal.\nEnter the following commands:\n   `ruby\n   user = User.find_by(username: \"your_username\")\n   organization_id = Organization.find_by(slug: \"organization_slug\").id\n   user.organization_memberships.where(organization_id: organization_id).destroy_all`\n\nHow do I add credits to my account?\nIf you ever want to add Listings locally, you must have credits on your account\nto \"pay\" for listing. Here's how:\n\nOpen the rails console `rails console`.\nEnter the following commands:\n\n`ruby\n   user = User.find_by(username: \"your_username\")\n   Credit.add_to(user, 1000)`\n^ This will add 1000 credits to your account. But you know, you can't really buy",
    "tag": "forem"
  },
  {
    "title": "Troubleshooting",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/troubleshooting.md",
    "content": "\nsidebar_position: 11\nTroubleshooting\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nTests\nConnection timeout\nWhile running test cases, if you get an error message\n`postgresql connection timeout`, please re-run the tests by increasing the\nstatement timeout, for example:\n`shell\nSTATEMENT_TIMEOUT=10000 bundle exec rspec`\nPostgreSQL\nHow do I fix the Error `role \"ec2-user\" does not exist` on an AWS instance?\nAfter installing and configuring PostgreSQL on an AWS EC2 (or AWS Cloud9)\ninstance and running `bin/setup`, this error could occur.\nTo fix it, run the following two commands in a terminal (assuming your\nPostgreSQL user is named postgres):\n`sudo -u postgres createuser -s ec2-user\nsudo -u postgres createdb ec2-user`\nThe first command creates the user ec2-user and the second one creates the\ndatabase for this user because every user needs its database. Even if the first\ncommand fails, run the second command to create the missing database.\nCORS\nIf you are experiencing CORS issues locally or need to display more information\nabout the CORS headers, add the following variable to your `.env`:\n```shell\nexport DEBUG_CORS=true",
    "tag": "forem"
  },
  {
    "title": "Introduction \ud83d\udc4b",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/intro.md",
    "content": "\nsidebar_position: 1\nslug: /\n\nIntroduction \ud83d\udc4b\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nWelcome to Forem's developer documentation \ud83c\udf31\nOn this site you'll find instructions to setup a local instance of\nForem, documentation on the architecture of\nForem, how to contribute, and many other useful\ndocuments.\nThis documentation site is the product of a number of volunteer contributors\nworking alongside the Forem Core Team, special thanks to all those who have\ncontributed to the documentation.\n:::important\nTo set up and self-host your own Forem we suggest using our Forem Self-host Installation Documentation",
    "tag": "forem"
  },
  {
    "title": "Styles",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/frontend/styles.md",
    "content": "\nsidebar_position: 9\nStyles\nThe majority of the CSS in the application is written in\nSASS. There are a few places in the code base that\nhave style blocks in ERB templates, for inlining critical CSS (good). There are\nalso some styles that live in ERB templates that are not critical CSS (bad).\nThat is a bit of refactoring that needs to be done. PRs welcome!\nImportant files when working with SASS in the project:\n\nvariables:\n  /app/assets/stylesheets/variables.scss\nmixins:\n  /app/assets/stylesheets/_mixins.scss\n\nSASS is compiled and served using\nSprockets which packages static\nassets in Rails.\nFor more about branding, theming or design in general in regards to Forem, refer\nto the Design Guide documentation.\nCrayons\nCrayons is the design system used by Forem. A\nstorybook listing the various elements is available\nat https://storybook.forem.com/\nYou can also run it locally with the following command:\n```\n$ yarn storybook",
    "tag": "forem"
  },
  {
    "title": "Additional Info",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/frontend/tips.md",
    "content": "\nsidebar_position: 10\nAdditional Info\nAbout query selectors\nJavaScript has many different query selectors, some seemingly interchangeable,\nfor example:\n\n`document.head` and `document.body`\n`document.getElementById`, `document.getElementsByClassName` and\n  `document.getElementsByTagName`\n`document.querySelector` and `document.querySelectorAll`\n\nKnowing which to use for optimal performance depends on the situation, but a\ngood rule of thumb is:\n\nto access the head of the document, use `document.head` over\n  `document.getElementsByTagName('head')`\nto access the body of the document, use `document.body` over\n  `document.getElementsByTagName('body')`\nto access an element by id use `document.getElementById('id')` over\n  `document.querySelector('#id')`\nto access one element by class name use\n  `document.getElementsByClassName('className')[0]` over\n  `document.querySelector('.className')`\nto access multiple elements by class name use\n  `document.getElementsByClassName('className')` over\n  `document.querySelectorAll('.className')`\nto access one element by tag name use\n  `document.getElementsByTagName('tagName')[0]` over\n  `document.querySelector('tagName')`\nto access multiple elements by tag name use\n  `document.getElementsByTagName('tagName')` over\n  `document.querySelectorAll('tagName')`\n\nIn most cases `querySelector` and `querySelectorAll` should be used only on\nselectors more sophisticated than a simple id, class or tag name.\nResources\n\nForem PR 6380\nWhy is getElementsByTagName() faster than querySelectorAll()?\n",
    "tag": "forem"
  },
  {
    "title": "Linting and Formatting",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/frontend/linting-formatting.md",
    "content": "\nsidebar_position: 8\nLinting and Formatting\nThe project uses eslint with the\nPrettier plugin. eslint\nhandles linting, but eslint rules related to code formatting, they get handled\nby prettier. For the most part, out of the box rules provided by the\nconfigurations that are extended are used but there are some tweaks.\nForem also has some objects that live in the global scope, e.g. InstantClick. The\neslint globals section of the eslint configuration is what enables these to be\nreported as existing when eslint runs.\n`javascript\nglobals: {\n  InstantClick: false,\n  filterXSS: false,\n}`\nHusky and lint-staged\nThe code base uses a pre-commit hook that is enabled by the\nhusky and\nlint-staged tools. The pre-commit hook\nruns eslint before frontend code is committed. If there are any issues that can\nautomatically be fixed, eslint will fix them. If there are linting issues that\ncannot be resolved, the commit fails and the changes need to be handled",
    "tag": "forem"
  },
  {
    "title": "Liquid Tags",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/frontend/liquid-tags.md",
    "content": "\nsidebar_position: 5\nLiquid Tags\nLiquid tags are special elements of the\nForem Markdown editor.\nThey are custom embeds that are added via a `{% %}` syntax.\nLiquid is a templating language developed\nby Shopify.\nLiquid embeds are for tweets, like `{% tweet 765282762081329153 %}` or a Forem\nuser profile preview, like `{% user jess %}` etc.\nThey make for good community contributions because they can be extended and\nimproved consistently. It is truly how we extend the functionality of the\neditor. At the moment, there could be a lot of work refactoring and improving\nexisting liquid tags, in addition to adding new ones.\nLiquid tags are sort of like functions, which have a name and take arguments.\nDevelop them with that mindset in terms of naming things. They should be\ndocumented but also intuitive. They should also be fairly flexible in the\narguments they take. Currently, this could use improvements.\nNote: Liquid tags are \"compiled\" when an article is saved. So you will need to\nre-save articles to see HTML changes.\nHere is a bunch of liquid tags supported on Forem:\n`liquid\n{% link https://dev.to/kazz/boost-your-productivity-using-markdown-1be %}\n{% user jess %}\n{% tag git %}\n{% devcomment 2d1a %}\n{% podcast https://dev.to/basecspodcast/s2e2--queues-irl %}\n{% twitter 834439977220112384 %}\n{% glitch earthy-course %}\n{% github forem/forem %}\n{% youtube dQw4w9WgXcQ %}\n{% vimeo 193110695 %}\n{% twitch ClumsyPrettiestOilLitFam %}\n{% slideshare rdOzN9kr1yK5eE %}\n{% codepen https://codepen.io/twhite96/pen/XKqrJX %}\n{% stackblitz ball-demo %}\n{% codesandbox ppxnl191zx %}\n{% jsfiddle https://jsfiddle.net/link2twenty/v2kx9jcd %}\n{% dotnetfiddle https://dotnetfiddle.net/PmoDip %}\n{% replit @WigWog/PositiveFineOpensource %}\n{% stackery deeheber lambda-layer-example layer-resource %}\n{% nexttech https://nt.dev/s/6ba1fffbd09e %}\n{% instagram BXgGcAUjM39 %}\n{% speakerdeck 7e9f8c0fa0c949bd8025457181913fd0 %}\n{% soundcloud https://soundcloud.com/user-261265215/dev-to-review-episode-1 %}\n{% spotify spotify:episode:5V4XZWqZQJvbddd31n56mf %}\n{% blogcast 1234 %}\n{% kotlin https://pl.kotl.in/owreUFFUG %}\n{% wikipedia https://en.wikipedia.org/wiki/Wikipedia %}\n{% reddit https://www.reddit.com/r/aww/comments/ag3s4b/ive_waited_28_years_to_finally_havr_my_first_pet %}`\nHow liquid tags are developed\nLiquid tags are a matter of parsing the \"arguments\" and serving relevant\nJavaScript.\nLiquid tags go in the `app/liquid_tags` folder. All liquid tags inherit from the\nbase, like so...\n`ruby\nclass KotlinTag < LiquidTagBase`\nEach liquid tag contains an `initialize` method which takes arguments and calls\n`super`. It also has a `render` method which calls the appropriate view.\n```ruby\n  def initialize(_tag_name, link, _parse_context)\n    super\n    stripped_link = ActionController::Base.helpers.strip_tags(link)\n    the_link = stripped_link.split.first\n    @embedded_url = KotlinTag.embedded_url(the_link)\n  end\ndef render(_context)\n    ApplicationController.render(\n      partial: PARTIAL,\n      locals: {\n        url: @embedded_url\n      }\n    )\n  end\n```\nView files can be found in `app/views/liquids`.\nEach new liquid tag should be accompanied by instructions in\n`app/views/pages/_editor_guide_text.html.erb`.\nLiquid Tags should also be accompanied by tests in `spec/liquid_tags` which\nconfirm expected behavior.\nSome Liquid Tags are constructed using HTML and CSS within the app, and some are\nconstructed by displaying an iframe of an external site.\nCSS for Liquid Tags are found in `app/assets/stylesheets/ltags`. Liquid tag\nclasses should generally be prepended by `ltag__`. e.g. `ltag__tag__content`\netc.\nHere is an example of a good Liquid Tag pull request...\nhttps://github.com/forem/forem/pull/3801\nRestricting liquid tags by roles\nTo only allow users with specific roles to use a liquid tag, you need to define\na `VALID_ROLES` constant on the liquid tag itself. It needs to be an `Array` of\nvalid roles. For single resource roles, it needs to be an `Array` with\nthe role and the resource. Here's an example:\n`ruby\nclass NewLiquidTag < LiquidTagBase\n  VALID_ROLES = [\n    :admin,\n    [:restricted_liquid_tag, LiquidTags::UserSubscriptionTag]\n  ].freeze\nend`\nHere we are saying that the `UserSubscriptionTag` is only usable by users with\nthe `admin` role or with a role of `:restricted_liquid_tag` and a specified\nresource of `LiquidTags::UserSubscriptionTag`.\n`LiquidTags::UserSubscriptionTag` is a resource model so we that can play nicely\nwith the [Rolify][rolify] gem. See /admin for more information.\nREMINDER: if you do not define a `VALID_ROLES` constant, the liquid tag will\nbe usable by all users by default.\nRestricting liquid tags by context\nContext, in terms of a liquid tag, is where a liquid tag is being used (i.e.\n`Article`, `Comment`, etc.). In other words, if you want to make a liquid tag\nthat can only be used in articles, you need to restrict the liquid tag by\ncontext.\nTo do this you need to add a `VALID_CONTEXTS` constant on the liquid tag itself.\nIt needs to be an `Array` of class names that are valid. For example, to\nrestrict a liquid tag to only be usable in articles you would do:\n`ruby\nclass NewLiquidTag < LiquidTagBase\n  VALID_CONTEXTS = %w[Article].freeze\nend`\nREMINDER: if you do not define a `VALID_CONTEXTS` constant the liquid tag will\nbe usable in all contexts by default.",
    "tag": "forem"
  },
  {
    "title": "Accessibility",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/frontend/accessibility.md",
    "content": "\nsidebar_position: 7\nAccessibility\nTo make Forem the most inclusive community platform around, accessibility should\nbe considered to enable people with disabilities to create and consume content.\nThe Basics\nForem UI changes should consider accessibility wherever possible. Common issues\nto watch out for in frontend code:\n\nAdequate color contrast\nSemantic structure and headings\nAlternative text for images\nUnique button and link text\nAccessible forms with labels\nVisible keyboard focus styles\n\nMore Advanced Things\nIf you're working on something JavaScript-heavy or animated, there are a few\nadditional considerations for accessibility:\n\nForem Accessibility Tests\nIntro to ARIA\nHandle focus for client-side interactions\nReducing motion with CSS media queries\nLinting with eslint-plugin-jsx-a11y\nTesting with Jest-axe\n\nAccessibility Testing\nSee a list of testing steps to follow during development or for a Pull Request\nreview on the\nForem Accessibility Testing Docs.\nResources\nThere's a wealth of information out there to learn about digital accessibility!\nHere are some resources:\n\nW3C's Web Accessibility Initiative\nWeb Content Accessibility Guidelines\nARIA Authoring Practices\nWebAIM\nA11y Project\nDeque University\nReact Accessibility Docs (most\n  will apply to Preact)\nThe Importance of Manual Accessibility Testing\n",
    "tag": "forem"
  },
  {
    "title": "Tracking",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/frontend/tracking.md",
    "content": "\nsidebar_position: 6\nTracking\nAhoy.js\nFor first-party analytics, we use the\nahoy.js library, which tracks visits and\nevents. This library works in conjunction with the `ahoy_matey` gem, which is\ndocumented in our backend tracking guide.\nConfiguration\nThe configuration for `ahoy.js` lives in `app/assets/javascripts/base.js.erb`.\nSince we do not track user cookies on the backend, we have configured\n`ahoy.js`'s defaults to match that on the frontend.\nEvents\nIn order to track an event, use the `ahoy.track` function:\n`javascript\nahoy.track(name, properties);`\nThis function will send a `POST` request to the `/ahoy/events` endpoint on our\nbackend with the `name` and `properties` of the event. The backend endpoint will\nalso create a corresponding `Ahoy::Visit` for the event if one does not exist",
    "tag": "forem"
  },
  {
    "title": "Dynamic Imports",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/frontend/dynamic-imports.md",
    "content": "\nsidebar_position: 3\nDynamic Imports\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nDynamic imports\nare supported in all major browsers except for Edge\n(EdgeHTML version) and Internet\nExplorer which are both unsupported browsers for Forem. They allow you to import\nJavaScript dynamically instead of statically. Why is this important?\nPerformance.\nShould you use them everywhere? No. They are a great tool when you need to load\na JavaScript module on the fly for functionality that is not needed immediately\nfor the page to be usable.\nHere are a couple of examples of dynamic import usage on Forem:\n\nThe\n  Onboarding flow.\nIn\n  homepage\n  (followed tags).\n\nForem uses webpacker, so what webpack will do is\ncreate separate bundles for code that is dynamically imported. So not only do we\nend up loading code only when we need it, we also end up with smaller bundle\nsizes in the frontend.\nFor a great deep dive into dynamic imports, there is a great article from\ncommunity member @goenning about dynamic import\nusage,",
    "tag": "forem"
  },
  {
    "title": "Philosophy",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/frontend/philosophy.md",
    "content": "\nsidebar_position: 1\nPhilosophy\nArchitecture\nOur application is server side-rendered with an\"Islands Architecture\".\nThe general idea of an \u201cIslands\u201d architecture is to render HTML pages on the server, and inject placeholders or slots around highly dynamic regions. These placeholders/slots contain the server-rendered HTML output from their corresponding widget. They denote regions that can then be \"hydrated\" on the client into small self-contained widgets, reusing their server-rendered initial HTML.\nThe Islands architecture permits us to add pockets of interactivity to the application. A DOM element becomes the root of that particular interactivity, typically rendering a Preact component.\nCurrent JavaScript Approaches\nThe current JavaScript approaches described below are:\n\nInitializers & the asset pipeline (Legacy)\nPacks & Webpacker\nPreact\nStimulus JS (Legacy)\nInline Scripts\n\nYou can also read more about the Overlaps & Challenges.\nWith these options, we sometimes need to decide what rendering mechanism to use for the frontend, we advise the usage of:\n- Vanilla JavaScript where we need to do some basic interactivity, e.g. adding an event listener, minimal form validation, etc. The preferred way of incorporating the JavaScript is through pack files.\n- Preact for complex interactivity: search bar, autocomplete, multi-autocomplete, post subscription button, accessible colour picker.\nExamples\nVanilla JavaScript\nBootstrapping dropdowns on a blog post page with JavaScript to make them interactive and accessible.\nPreact\nThe comment subscription component source is an excellent example of this.\nThe initial potential component state is loaded, a subscribe button. If the user has not subscribed to comments of a post, the Preact component renders, but the VDOM diff determines there is nothing to do, so the server-side rendered markup remains the same. When a user subscribed to post comments and the page loads, the server-side rendered subscribe button renders, and then the comment subscription component renders the button in the unsubscribe state.",
    "tag": "forem"
  },
  {
    "title": "InstantClick",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/frontend/instant-click.md",
    "content": "\nsidebar_position: 4\nInstantClick\nLike the InstantClick tag line says, \u201cInstantClick is\na JavaScript library that dramatically speeds up your website, making navigation\neffectively instant in most cases.\u201d.\nRead more about InstantClick in the developer documentation.\nThe way it works is if a user hovers over a hyperlink, chances are their\nintentions are to click on it. InstantClick will start prefetching the page\nwhile a user is hovering over a hyperlink, so that by the time they do click on\nit, it's instantaneous. On mobile devices, preloading starts on\ntouchstart.\nAside from prefetching pages, InstantClick also allows you to customize what\nhappens when an InstantClick page changes.\n`javascript\n// Found in https://github.com/forem/forem/blob/main/app/javascript/packs/githubRepos.jsx#L11)\nwindow.InstantClick.on(\"change\", () => {\n  loadElement();\n});`\nYou can also decide whether or not to reevaluate a script in an InstantClick\nloaded page via the `data-no-instant` attribute.\n`javascript\n// Found in https://github.com/forem/forem/blob/main/app/assets/javascripts/utilities/buildCommentHTML.js.erb#L80\nfunction actions(comment) {\n  if (comment.newly_created) {\n    return '<div class=\"actions\" data-comment-id=\"'+comment.id+'\" data-path=\"'+comment.url+'\">\\\n        <span class=\"current-user-actions\" style=\"display: '+ (comment.newly_created ? 'inline-block' : 'none') +';\">\\\n          <a data-no-instant=\"\" href=\"'+comment.url+'/delete_confirm\" class=\"edit-butt\" rel=\"nofollow\">DELETE</a>\\\n          <a href=\"'+comment.url+'/edit\" class=\"edit-butt\" rel=\"nofollow\">EDIT</a>\\\n        </span>\\\n      <a href=\"#\" class=\"toggle-reply-form\" rel=\"nofollow\">REPLY</a>\\\n    </div>';\n  } else {\n...`\nFor more information on this, see the\nEvents and script re-evaluation in InstantClick\ndocumentation.",
    "tag": "forem"
  },
  {
    "title": "Debugging",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/frontend/debugging.md",
    "content": "\nsidebar_position: 7\nDebugging\nIn Browser\nBrowsers ship with their own developer tools. These are amazing tools to help\nyou debug your web application. Consider learning how to use them.\n\nChrome Developer Tools\nFirefox Developer Tools\nSafari Developer Tools\n\nVisual Studio Code\nVisual Studio Code (VS Code) is a popular\neditor that allows you to debug many languages including JavaScript. Thanks to\nremote debugging technologies, we can debug our frontend code in VS Code. When\nyou clone the Forem repository and open the project in VS Code, you will be\nprompted to install recommended extensions which include the\nChrome Debugger\nand the\nEdge Debugger.\nSetup:\n\nRefer to the respective debugger extension documentation above to ensure that\n  your browser is running with remote debugging enabled.\nOnce you have your local installation of Forem running, you can attach to\n  either the Chrome or Edge Debugger.\n\n\n\nFrom there you can do all the usual stuff that you would do while debugging\n  JavaScript in the browser: setting breakpoints, setting\n  logpoints,\n  watches etc.\n\nWhere is My Editor Debug Configuration?\nIf you do not see your editor here, consider contributing to the documentation.\n\ud83d\ude09\nPreact Developer Tools\nPreact has their\nown developer tools in the form\nof a browser extension. The Forem codebase is configured out of the box to",
    "tag": "forem"
  },
  {
    "title": "Initializers & the asset pipeline",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/frontend/javascript-approaches/initializers.md",
    "content": "\nsidebar_position: 1\nInitializers & the asset pipeline\n\napp/assets/javascripts/initializers\n\n:::important\nWhen refactoring or adding new functionality that lives in the asset pipeline, strongly consider moving it to Packs and Webpacker.\n:::\nThe asset pipeline is where we have the \"legacy\" JavaScript. It's legacy in the sense that it's not EcmaScript Modules (ESM). It's a bunch of JS files concatenated together being served using Sprockets which packages static assets. They are available globally.\nThis source code is not transpiled, only packaged and minified, and will be limited to whatever flavor of JavaScript can run on the user's web browser.\n`app/assets/javascripts/application.js` contains the manifest JavaScript file which is included globally in the primary template, `app/views/layouts/application.html.erb`.\n`application.js` automatically includes all JS files via the statement:\n`//= require_tree .`\nOne JS file in particular, `app/assets/javascripts/initializePage.js`, bootstraps the majority of the functionality and calls its initializers on every page. You will notice, within this file, that major sections of the websites are bootstrapped, for example:\n`initializeBaseTracking();\ninitializeCommentsPage();\ninitEditorResize();\ninitLeaveEditorWarning();\ninitializeArticleReactions();\ninitNotifications();\ninitializeSplitTestTracking();`\nAll the \"initializers\" are in `/app/assets/javascripts/initializers`.\nAnother example of an initializer is `initializeArticleReactions.js` which fetches reaction counts and adds click listeners. It adds interactivity to buttons in `app/views/articles/_reaction_button.html.erb`.\nIt's useful to note that some html.erb views reference function names directly, e.g. `handleCommentSubmit` in `initializeCommentsPage.js.erb.`\n`base.js.erb` concatenates all the files together and gives us `base.js` in production/development environments.",
    "tag": "forem"
  },
  {
    "title": "Pack Files & Webpacker",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/frontend/javascript-approaches/packs.md",
    "content": "\ntitle: Pack Files & Webpacker\nsidebar_position: 2\n\nPack Files & Webpacker\n\napp/javascript/packs\n\nThe Webpacker (a gem which allows us to use webpack in a Rails app) serves and manages the JavaScript code and allows us to write our code in ESM via \"pack\" files. Pack files are Webpacker's name for a webpack entry point. Each pack represents an entry point, and allows us to only load what we need.\nThey are mounted in views as needed via `<%= javascript_packs_with_chunks_tag \"packName\", defer: true %>` (one or more packs can be referenced in this tag), and are usually loaded and run async with `defer: true`\nThe include statement corresponds to the pack `app/javascript/packs/packName.js`\nIf you have more than one webpacker pack on the page, you need to include it in\nthe same `javascript_packs_with_chunks_tag` call. The reason being is it avoids\nloading split chunks multiple times.\n`erb\n<%= javascript_packs_with_chunks_tag \"webShare\", \"someOtherPack\", defer: true %>`\nExample\nfollowButtons.js initializes the functionality of the follow buttons that are rendered in many places. Each view that requires follow button functionality must include the pack.\nWebpack aliases\nThe project uses\nwebpack aliases.\nThe aliases used in the project can be found under `alias` in\nhttps://github.com/forem/forem/blob/main/config/webpack/environment.js\nI'm sure you've had to reference a component or utility file in JavaScript, and it looks something like this.\n`import { somethingExported } from '../../../../awesome-something';\n...`\nIf you move files around, that import folder path will change. Maybe it's this now.\n`import { somethingExported } from '../awesome-something';\n...`\nwebpack provides an aliases concept that allows you to alias a folder with a name instead. The above could now become.\n// @utilities is the alias to the actual folder\nimport { somethingExported } from '@utilities/awesome-something';\n...\nAliases allow webpack to locate the correct folder for files when bundling things up and make it easier for developers to move code around. On its own, it will work for webpack, but your editor or other parts of your frontend setup might not be aware of it. As we saw above, we use them for Preact to alias the `'react'` and `'react-dom'` packages to use React 3rd party components.\nWe use eslint in our project, so to avoid module not found errors, we configure eslint to be mindful of the aliases.\nWe use Storybook to build our components in isolation and showcase our design system. Storybook uses webpack under the hood, so it needs to be aware of the same aliases we have configured in our application's webpack configuration.\nThe last puzzle piece is making your editor aware of the aliases. Not everyone uses VS Code, but if you do, VS Code has a jsconfig.json that can make it aware of project aliases.\nMore reading:\n\nwebpack aliases\njsonfig.json in VS Code\nStorybook and Webpack\nEnhance Jest configuration with Module Aliases\nimport-js/eslint-plugin-import\n\nCode splitting & caching\nUnder the hood, we have Webpacker configured for code splitting. This means if two pack files import the same files/code, a common chunk is created so as to avoid downloading the same file more than once.\nIt should be noted that a new build being deployed doesn't mean that a user has to re-download all the Javascript code over again the next time they visit. Webpacker (webpack) uses content hashing, so unless the contents of the generated file change, the same file will remain in the browser cache.\nAdditional Resources\nFor more information in regards to `javascript_packs_with_chunks_tag`, see\nhttps://github.com/rails/webpacker/blob/master/lib/webpacker/helper.rb\nAside from the Webpacker repository, see also Ross Kaffenberger's\nvisual guide to Webpacker.\nIf you're interested in bundles sizes and what's contained within them for a",
    "tag": "forem"
  },
  {
    "title": "Preact",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/frontend/javascript-approaches/preact.md",
    "content": "\ntitle: Preact\nsidebar_position: 3\n\nPreact\nPreact is an alternative to React with the same modern\nAPI.\nPreact components are packaged using Webpacker and the\nPreact code is located in `app/javascript`.\nPreact components get loaded via webpacker's helper function\n`javascript_packs_with_chunks_tag`.\nHow we use Preact\nOur approach to Preact follows the Islands Architecture pattern: a server-side rendered app that has pockets of interactivity. Think of it as multi mini-applications existing in the frontend.\nWe render as much as we can server-side, and then use Preact to enhance the parts of that server-rendered page that require richer interactivity. Preact is used to either render new content into a placeholder container in the HTML, or (preferably) to replace a server-rendered piece of UI with one that offers a richer experience\nExample: Preact `<ColorPicker />`\nWe have a Preact `<ColorPicker />` component which offers both a popover color picker, and a plain text input for a color. When we use this component, we first render a plain text input server-side. This text input is fully functional, and if no JavaScript is loaded, a user can still complete the hex code of their choice. When the page loads, we asynchronously find these plain text inputs and dynamically replace them with the richer Preact experience.\nOther examples include our `Modal` and `Snackbar` components where we load the components in to replace or enhance parts of a server-rendered view.\nIn some cases Preact \"takes over\" from a server-rendered, plainer, version of the same (e.g. articleForm.jsx and app/views/articles/_v2_form.html.erb) - try clicking 'Create Post' with JS disabled \ud83d\ude09\n A note on dynamic imports \nUnlike the backend, it's costly downloading frontend assets (HTML, CSS, JS), which is why we should only ever download what we need to render a page in a usable state. From there we can load enhanced interactivity, like the page feed, or modals. The general pattern is only load something when you need it.\nThis is why you\u2019ll find dynamic imports in our code.\nHere are some sections of code worth checking out:\n\nOnboarding\nPausing animated gifs on a post\nLoading Modals in the member details view in the admin section. The Modal code isn't loaded until someone requests the first modal. From there it's dynamically loaded and then required imports continue to be accessible/cached for the next time we need it.\n\nCumulative Layout Shift (CLS)\nRender the client-side component's initial markup server-side to avoid cumulative layout shift (CLS) entirely or as best as possible. Preact's virtual dom (VDOM) usage is smart enough to determine if the component needs to rerender markup, even from the initial server-side rendered markup.\nPropTypes\nPreact supports\nPropTypes. When\ncreating Preact components, please ensure that you have defined your PropTypes.\nCommon PropTypes\nUsing PropTypes can be repetitive. Some duplication is normal, like when a\nPropType is a string or a number. But for commonly-used PropTypes, like the user\nentity, you can use the provided common PropTypes, located in the\n`/app/javascript/common-prop-types`, as shown below.\n```javascript\nimport PropTypes from \"prop-types\";\nexport const userPropTypes = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  profile_image_url: PropTypes.string.isRequired,\n  summary: PropTypes.string.isRequired,\n});\n```\nUsing Common PropTypes\nCommon PropTypes are imported just like any other\nJavaScript Module.\nFor example, here are two scenarios where a component needs to use the\n`tagPropTypes`.\nIn the example below, our component `SomeComponentUsingTags` has a `tags` prop,\nwhich is an array of the tag entity. PropTypes have a built-in method called\n`arrayOf` that allows you to define a prop as an array of something. In our\ncase, this is the tag entity, so we can use the `tagPropTypes` PropType.\n```jsx\nimport { h } from \"preact\";\nimport PropTypes from \"prop-types\";\nimport { tagPropTypes } from \"../../../components/common-prop-types\";\nconst SomeComponentUsingTags = ({ tags = [] }) => (\n\n\n    {tags.map((tag) => (\n      {tag.name}\n    ))}\n  \n);\nSomeComponentUsingTags.displayName = \"SomeComponentUsingTags\";\nSomeComponentUsingTags.propTypes = {\n  tags: PropTypes.arrayOf(tagPropTypes).isRequired,\n};\n```\nIn the following example, the `SomeComponentUsingOneTag` component has a `tag`\nprop representing a single tag. In this case, we can just the `tagPropTypes` on\ntheir own to represent the shape of the `tag` prop.\n```jsx\nimport { h } from \"preact\";\nimport { tagPropTypes } from \"../../../components/common-prop-types\";\nconst SomeComponentUsingOneTag = ({ tag }) => {tag.name};\nSomeComponentUsingOneTag.displayName = \"SomeComponentUsingTags\";\nSomeComponentUsingOneTag.propTypes = {\n  tag: tagPropTypes.isRequired,\n};\n```\nManaging State\nOne thing to note about our usage of Preact is that there are no state management libraries in play, only component state. The lack of a state management library is intentional and enforced by the nature of Islands architecture. There is no main root component where global state management can live.\nAlthough there is no state management library in play, data attributes on DOM elements sometimes simulate it, e.g. user data.\nFor a more complex component state, use the useReducer hook. The multiselect autocomplete component (source code) is a great example of this.\nIt's a judgment call to use useReducer. If you notice you're juggling many useState hooks, it's time to consider useReducer.\nBenefiting from the React Ecosystem\nPreact ships with a thin compatibility layer if you're consuming 3rd party components from the React ecosystem. The react and react-dom packages are already aliased for you in our webpack configuration for the application and the Webpack configuration for Storybook.\nIt also allows you to use functionality that is not in the core of Preact, e.g. forwardRef, createPortal, memo etc. To use those though, you need to explicitly import them from 'preact/compat'\nHere are some examples of the compatibility layer in use:\n\nMentionAutocompleteTextArea component\n",
    "tag": "forem"
  },
  {
    "title": "Overlaps & Challenges",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/frontend/javascript-approaches/overlaps-and-challenges.md",
    "content": "\ntitle: Overlap and Challenges\nsidebar_position: 6\n\nOverlaps & Challenges\nOverlaps\nThere are some overlaps of the different JavaScript appraoches that we've outlined below:\nWebpacker code in initializers\n\napp/javascript/packs/base.jsx\n\ne.g. Preact Modal, MentionAutocompleteTextArea\n\nAdded to the Forem namespace on the window object in `base.jsx`\nTypically in an ESM world, we shouldn't require code to live on the window object, but due to the nature of the application, it's required so that non-ESM code can consume it\nCan then be accessed via e.g. `window.Forem.showModal()`, e.g. see `app/assets/javascripts/initializers/initializeCommentsPage.js.erb` where we replace the vanilla textarea with the mention autocomplete one\n\nStimulus JS code\nThe following Stimulus related code will be removed once we completely remove Stimulus from our application.\nPreact in Stimulus JS\ne.g. `app/javascript/admin/controllers/modal_controller.js`\n\nIn some cases we want our reusable Preact components in the admin area, e.g. Modals.\nWe can dynamically import and render in the Stimulus controller\nCurrently only used for Modal and Snackbar & is a relatively new pattern for us\n\nStimulus JS in packs (creator onboarding)\ne.g. `loadCreatorSettings` in base.jsx\n\nAllows us to use admin controllers in the main user-facing views\nSpecifically added for the new creator onboarding flow\n\nChallenges\nBelow are some of the challenges that we experience when working within this structure. We're currently working on improving the state of JavaScript and removing some of the challenges.\n\nNon-initializer code needed by initializers, needing to add functions to the window.Forem namespace\nSome initializer code re-runs on every page with unintended consequences\nAsync loading vs progressive enhancement (including testing challenges like Cypress attempting to click a button that doesn't have a handler attached yet)\nOptimistic UI updates and silent failures (e.g. failed follow button click)\nDuplication - e.g. the feed is loaded in multiple ways (server-side and Preact client-side), comment HTML exists in initializer JS code and html.erb code.\n",
    "tag": "forem"
  },
  {
    "title": "Code coverage",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/tests/code-coverage.md",
    "content": "\nsidebar_position: 4\nCode coverage\nCodecov\nWe use Codecov to track code coverage. Codecov leaves a comment PR's that indicate the a percentage change in code coverage compared to main. We encourage you to keep the code coverage percentage at 80% and above.\nRails\nRspec will generate code coverage at the end of the tests.\nTo get the code coverage of the entire Rails codebase, you must run the full\nRuby test suite. You can run the full test suite with the `rspec` command:\n`shell\nbundle exec rspec`\nor\n`shell\nbin/rspec`\nTo get the code coverage of a single file, you can run:\n`shell\nbundle exec rspec spec/models/user_spec.rb`\nor\n`shell\nbin/rspec spec/models/user_spec.rb`\nTo get the code coverage of a particular spec in a single file, append the\nline-number for that spec:\n`shell\nbundle exec rspec spec/models/user_spec.rb:24`\nor\n`shell\nbin/rspec spec/models/user_spec.rb:24`\nOnce your tests have completed, the `coverage/index.html` will be regenerated\nwith some stats concerning the overall health of our test suite including a code\ncoverage metric.\nA few things to note:\n\n\"Coverage\" indicates whether or not the test suite runs through the code in\n  question. It does not equate to actually testing for functionality, and\n  shouldn\u2019t be thought of that way.\nRunning Rspec in general will overwrite the existing `coverage/index.html` so,\n  if you want to reference the results of a particular run, save a copy of the\n  file before re-running the test suite.\n\nTo turn off coverage report generation please set environment variable\n`COVERAGE` value to `false`.\nPreact\nPreact tests will generate code coverage at the end of the tests.\nTo get the code coverage of the Preact codebase, you must run the full JS test\nsuite. You can run the full test suite with the npm task `test`:\n`shell\nnpm run test`\nor\n`shell\nyarn test`\nOnce the tests have completed, the test coverage metric will be visible in the\nterminal window. Please note that jest will fail if test coverage thresholds are",
    "tag": "forem"
  },
  {
    "title": "Philosophy",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/tests/philosophy.md",
    "content": "\nsidebar_position: 1\nPhilosophy\nTests\nWhen adding any new features to the application, we always write tests alongside our code. This may be in the form of testing:\n\nthe user interface interactions from the end users perspective through Cypress end to end tests.\nthe interaction from a request perspective through integration tests.\na single function/method in isolation with its possible inputs and outputs through unit and functional tests.\nJavaScript code whether it be logic in a pack file or a Preact component through frontend tests.\n\nWe also encourage manual, accessibility and regression when the need arises.\nWe track our code coverage in each new PR using Codecov.\nQA",
    "tag": "forem"
  },
  {
    "title": "End to End Tests",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/tests/types/e2e-tests.md",
    "content": "\ntitle: End to End Tests\nsidebar_position: 1\n\nEnd to End Tests\nWe use Cypress, a JavaScript based framework, for end to end (E2E) testing. It is from the perspective of the end user and replaces our Rails Feature Testing\nYou can find tests and associated utilities in the `cypress` directory:\n`cypress\n\u251c\u2500\u2500 fixtures (Any hard-coded data, e.g. test users, images)\n\u251c\u2500\u2500 e2e (The actual tests, grouped by user flow)\n\u251c\u2500\u2500 plugins (Cypress plugins)\n\u251c\u2500\u2500 utils (Any abstracted utilities that are common across the tests)\n\u251c\u2500\u2500 support (Where custom commands are found and added)`\nAdditional tools used\nWe enhance our use of Cypress with a couple of additional packages.\ncypress-testing-library\nWe use\ncypress-testing-library\nfor custom Cypress commands and utilities to improve how we write our tests.\nThis package is part of the Testing Library\nfamily that we also use in front-end tests, offering a\nsimilar API.\ncypress-rails\nWe use the cypress-rails gem to\nstart a test web server that runs a rails test environment (`RAILS_ENV=test`).\nIt also resets the database between test runs by starting a database transaction\nat the beginning of a test and performs a rollback at the end of a test being\nrun. The cypress-rails gem also provides a rake task that allows us to\ncoordinate all this work.\nHow to run E2E tests locally\n1. From the command line, run `yarn e2e`\nNote: If you want to run E2E tests for the creator onboarding flow, you can run\n`yarn e2e:creator-onboarding-seed`.\nSome initial setup and checks will automatically run as part of this command:\n\n`bundle check`: You will be prompted to run `bundle install` if gems for the\n  project are not up to date.\n`yarn install`: will ensure front-end packages are up to date.\n\n2. You will then be prompted to set up the end to end (E2E) test database\n```\nDo you need to set up your end to end (E2E) testing database?\nAnswer yes if this is your first time running E2E tests on your local machine or you need to recreate your E2E test database. (y/n)\n```\nType `y` if you need to install the E2E test database. Typically you only need\nto do this the first time you run e2e tests, but you can also run it if:\n\nyou have added additional seed data to `seeds_e2e.rb`\nyour data based might be corrupted and you want to reset it back to its\n  original state\n\n3. Ready to run tests!\nThe\nCypress test runner\nwill open and you are now ready to run end to end tests.\nWhile the test runner is open, any new or updated tests will be dynamically\nreflected in the UI.\n\nE2E Tests on CI/CD\nE2E tests automatically run on a dedicated build node on Travis. It runs\nheadless via the `bin/e2e-ci` command. These tests currently do not run in\nparallel with Knapsack Pro as there were issues integrating the cypress-rails\ngem with the\nknapsack-pro-cypress npm\npackage.\nWriting Cypress tests\nSeed data\nWhen the E2E test database is set up (via the `yarn e2e` command), it is seeded\nwith the data in\nspec/support/seeds/seeds_e2e.rb.\nThis seeds file can be added to as needed, and the new data will be reflected\nwhen you next run `yarn e2e` and select `y` to the question \"Do you need to set\nup your end to end (E2E) testing database?\".\nTest setup\nAny individual test setup steps can be included in the `beforeEach` hook. You\nwill almost always want to call the\ncustom Cypress command:\n`js\ncy.testSetup();`\nThis makes sure that previous cookies are cleared, and the Rails database state\nis reset (e.g. clearing any articles or changes made in previous tests).\nSome other useful custom commands for setting up tests include:\n\n`cy.loginAndVisit(user, url)`: Logs in the given user and navigates to the\n  URL, waiting for any user login side effects to complete.\n`cy.loginUser(user)`: Logs in the given user, without routing to any page.\n  This is handy if you need to complete any other setup steps before visiting\n  the page under test.\n`cy.createArticle(articleData)`: Creates an article for the currently\n  logged in user. The response returns the URL path to the new article, e.g:\n  `response.body.current_state_path`\n`cy.visitAndWaitForUserSideEffects(url)`: Visits the given page and waits\n  for any user related network requests to complete to make sure the UI is in a\n  'ready' state for testing. Particularly useful if you couldn't use\n  `cy.loginAndVisit`.\n`cy.signOutUser()`: Logs out the current user and returns to the home\n  page, waiting on any side effects completing.\n\nYou can\nsee all custom commands in the Cypress support.commands.js file\nFinding elements\nIn almost all cases, we use\ncypress-testing-library\ncommands to find elements in tests.\nThe most robust way to do this is to find by role and accessible name, e.g.:\n`js\ncy.findByRole(\"button\", { name: \"Log in\" });`\nWe favor `findByRole` queries where possible because:\n\nIt is more specific and reliable than e.g. `cy.findByText('Log in')` -\n  narrowing our selector to only buttons helps us make sure we match with the\n  correct element.\nIt will only return accessible elements. For example, any element with\n  `display: none` or similar property that would stop a user from perceiving or\n  interacting with the element will not be returned.\nIt draws attention to problematic HTML that could impact users of assistive\n  technology. For example, if the \"Log in\" button was actually a `div`, it won't\n  be returned by the above selector.\nIt can help highlight issues with accessible names. For example, if\n  `cy.findByRole('link', { name: 'Profile' })` returns 10 links for different\n  profiles, we can readily identify an accessibility issue where screen reader\n  users would not be able to differentiate between the links.\n\nScoping selectors\nCypress allows for a few methods to scope our element selectors to specific\nsections of the page. Scoping to a smaller area of the page can allow us to\nselect elements more easily, and focus in on the area of the app under test.\nChaining\nOne way to scope your selector is to chain it off of a previous selector. For\nexample, the below code will find the article link contained within the `<main>`\nelement, ignoring any similar links the header, etc:\n`js\ncy.findByRole(\"main\").findByRole(\"link\", { name: \"My article\" });`\nThis is particularly useful if you only need to find a single element in the\ngiven section of the page.\nUsing the `within` callback\nAnother way to scope your selectors is by using the `within` method. This scopes\nany selectors in the callback to the given element, and can be particularly\nuseful if you want to conduct all of your test steps within the same container.\nFor example, the below code will find the \"profile preview\" card, and then scope\nall queries to that card alone, ignoring any other content on the page:\n`js\ncy.findByTestId(\"profile-preview-card\").within(() => {\n  cy.findByRole(\"link\", { name: \"User profile\" });\n  cy.findByRole(\"button\", { name: \"Follow\" });\n});`\nBest practice in selecting elements\nWe tend to follow the\ntesting-library guiding principles\nfor selecting elements:\n\nThe more your tests resemble the way your software is used, the more\nconfidence they can give you.\n\nYou can\nfind the suggested priority order of testing-library queries on their website,\nbut as a general rule, we try to favor queries which are accessible to\neveryone - i.e. how would a user find a \"Log in\" button? They'd look for a\nbutton with the name \"Log in\", so `cy.findByRole('button', { name: 'Log in' })`\nseems like a good fit\nAvoid selecting elements by classname or any other property that our users\nwouldn't be aware of. If you need to find an element that doesn't have an\nobvious semantic HTML or accessible name query, then give your element a\n`data-testid` and use `cy.findByTestId('my-element')` to find it in your test.\nThis should be a last resort, and will likely be most useful for scoping\nselectors.\nFor further reading, check out\nKent C. Dodd's article on making UI tests resilient to change.\nCommon gotchas\nWe've noticed some common \"gotchas\" that can cause flakiness in our Cypress\ntests.\n1. Route changes should be followed by a unique selector\nIf the page changes, for example if your test steps click on a link to an\narticle, then it's important to make your next selector unique to the new page.\nThis makes sure that Cypress doesn't find a matching element on the page you\njust left.\nSee the examples below of how to make these route changes more robust.\n\ud83d\udeab Before: Route changes, but we find the `main` element on the previous page\n`js\ncy.findByRole(\"main\").findByRole(\"link\", { name: \"Test article\" }).click();\n// After clicking the link we can _sometimes_ accidentally get a reference to the 'main' element on the page we just left\ncy.findByRole(\"main\").findByRole(\"button\", { name: \"Share post\" });\n// Cypress fails to find the 'Share post' button inside the previous page's `main` element, and the test fails`\n\u2705 After: Route changes, and we find a unique element before proceeding\n`js\ncy.findByRole(\"main\").findByRole(\"link\", { name: \"Test article\" }).click();\n// The 'Share post' button doesn't exist on the page we just left, so Cypress will wait for it to be shown on the new page\ncy.findByRole(\"button\", { name: \"Share post\" });`\n2. Interactive elements must be initialized before clicking\nIn a lot of places we present views in Rails-generated HTML and asynchronously\nattach JavaScript event listeners after the page has loaded. This means that in\nan automated test environment it is possible to click a button before its click\nhandler has been attached.\nFor this reason, it's important to double check how a feature's click handlers\nare initialized and, if necessary, use the `pipe` command from cypress-pipe to retry a click action until the expected state is achieved. See this Cypress blog post on \"When can the test click?\".\nPlease note this should only be used on rare occasions where the click handler is added asynchronously. Use `pipe` as a last resort.\n\ud83d\udeab Before: We click a button before the click handler has been initialized in the JS\n`js\n// We immediately try to click a button that's initialized asynchronously in JS. Sometimes the test will fail as the click handler is not yet attached.\ncy.findByRole(\"button\", { name: \"Expand dropdown menu\" }).click();`\n\u2705 After: We use `pipe` to retry the command until the button is in the correct state\n```js\n// The pipe command should be passed a named function to allow it to show up in logs properly\nconst click = ($el) => $el.click();\n// The click will be retried until the button correctly updates its state\ncy.findByRole(\"button\", { name: \"Expand dropdown menu\" })\n  .pipe(click)\n  .should(\"have.attr\", \"aria-expanded\", \"true\");\n```\n3. Lingering network requests interfere with test setup or new user login\nBefore each test we usually call `cy.testSetup()` to ensure cookies are cleared\nand a user may be logged in fresh. However, if a previous test triggered\nuser-related network requests, and didn't wait until their completion, then\noccasionally responses to these requests interfere with test setup and cause the\nprevious user to be persisted.\nThis is particularly prevalent in very short tests, but can also happen if you\ntry in the middle of a test to sign out as one user, and immediately log back in\nas another.\nThis issue is best avoided by:\n\nUtilising custom Cypress commands (e.g. `cy.loginAndVisit(user, url)`,\n  `cy.visitAndWaitForUserSideEffects(url)`, `cy.signOutUser()`) that help ensure\n  side effects from network requests are accounted for\nSplitting tests into 'single user' tests (i.e. avoid logging in as multiple\n  users in the same test)\n\n\ud83d\udeab Before: Using the `cy.visit(url)` command directly without awaiting side effects\n```js\nbeforeEach(() => {\n  cy.testSetup();\n  cy.fixture(\"users/articleEditorV2User.json\").as(\"user\");\ncy.get(\"@user\").then(() => {\n    cy.loginUser(user).then(() => {\n      // The `visit` command does not take user-related network requests into account. If a test runs quickly, the responses may bleed into the next test setup\n      cy.visit(\"/dashboard\");\n    });\n  });\n});\n```\n\u2705 After: Using the custom `loginAndVisit` command\n```js\nbeforeEach(() => {\n  cy.testSetup();\n  cy.fixture(\"users/articleEditorV2User.json\").as(\"user\");\ncy.get(\"@user\").then(() => {\n    // The custom command logs in the user and visits the page, ensuring that user-related network requests are awaited\n    cy.loginAndVisit(user, \"/dashboard\");\n  });\n});\n```\n4. Visiting a page very briefly can cause expected elements to be null in async code\nCypress can visit a page and execute an action (e.g. click a link to another page), far faster than a human user can. Doing so can cause unexpected failures in some of our asynchronously run JavaScript.\nFor example, we visit a post only to find and click the \"Edit\" button, taking us to a new page. When the post page is shown, some async work is triggered to check if the current user is subscribed to comments, and update the comment subscription component. This is triggered async, after the \"Edit\" button is shown on the page. During the Cypress test run, the \"Edit\" button is found and clicked so quickly that the JavaScript has not yet updated the comment subscription component. When the JS does attempt to update the component using `document.getElementById('comment-subscription')`, we're already on a new page and the expected container is not in the DOM. If this case is not handled in the code, an unhandled error may occur and cause the test to fail.\nIn \"normal\" app usage, it's pretty unlikely a user would be able to trigger the same (and even if they did, the error would be unlikely to affect their user experience). However, in this case, remedying the test means making our app code more robust by checking an element exists before completing any operations on it.\n\ud83d\udeab Before: Async app code assumes element always exists on page\n`js\nconst container = document.getElementById(\"comment-subscription\");\n// When container is null, an error is thrown on next line\nconst { articleId } = container.dataset;`\n\u2705 After: Async app code verifies element exists before acting on it\n`js\nconst container = document.getElementById(\"comment-subscription\");\nif (container) {\n  const { articleId } = container.dataset;\n  // Any other steps to be completed\n}`\nAdditional Resources\n\nCypress documentation\nMaking your UI tests resilient to change\n  by Kent C. Dodds\nStatic vs Unit vs Integration vs E2E Testing for Frontend Apps\n",
    "tag": "forem"
  },
  {
    "title": "Unit and Functional Tests",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/tests/types/unit-functional-tests.md",
    "content": "\nsidebar_position: 5\nUnit and Functional Tests\nA unit test is about testing a single function/method in isolation with all of\nits possible outputs.\nA functional test is about testing a single functionality, which can span\nmultiple methods and a controller.\nOther common terms in Rails are \"model tests,\" \"controller tests,\" and others.\nYou can find model tests in `spec/models`, controller tests in\n`spec/controllers` and additional functional tests in various directories within\nthe `spec` directory.\nYou can run all models tests, for example, with:\n`shell\nbundle exec rspec spec/models`\nTo run an individual file you can use, for example:\n`shell\nbundle exec rspec spec/models/user_spec.rb`\nTo run a specific test case you can use, for example:\n`shell\nbundle exec rspec spec/models/user_spec.rb:10`\nwhere `10` is the line number of the test case that you want to execute.\nTesting Controllers\nHistorically, it has been common to use Rspec to write tests for Rails\ncontrollers. This pattern isn't necessarily discouraged in the Forem codebase,\nbut Rspec has introduced a more effective way to test controllers via Request\nSpecs.\nRequest specs test the actions on a controller across the entire stack,\neffectively acting as Integration Tests. You can read more about request specs\nin our documentation on Integration Tests.\nYou can read the official guide Testing Rails Applications to",
    "tag": "forem"
  },
  {
    "title": "Integration Tests",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/tests/types/integration-tests.md",
    "content": "\nsidebar_position: 4\nIntegration Tests\nAn integration test is a test that measures the interaction of multiple systems\nor parts of your application. They are meant to aspects like the requests and responses coming back from the server, data that ahs changed, business objects that has implemented. We\u2019re not looking to testpage interactivity here, thats can be found in the end to end tests.\nIntegration tests can be found in the directory `spec/requests`.\nYou can run all integration tests with:\n`shell\nbundle exec rspec spec/requests`\nTo run an individual file you can use:\n`shell\nbundle exec rspec spec/requests/stories_show_spec.rb`\nTo run a specific test case you can use:\n`shell\nbundle exec rspec spec/requests/stories_show_spec.rb:10`",
    "tag": "forem"
  },
  {
    "title": "Frontend Tests",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/tests/types/frontend-tests.md",
    "content": "\nsidebar_position: 3\nFrontend Tests\nA Frontend test will test JavaScript code whether it be some logic in a pack file or a Preact component.\nThe test code is located within the same directory as each component, inside a\n`__tests__` directory.\n`shell\n$ tree app/javascript/article-form -L 1\napp/javascript/article-form\n\u251c\u2500\u2500 __tests__\n\u2514\u2500\u2500 articleForm.jsx`\nThe testing library being used is Jest.\n\nFor unit tests, use jest's expect API\nFor integration tests, use\n  preact-testing-library.\n\nRunning Tests\nYou can run those tests with:\n`shell\nnpm run test`\nor\n`shell\nyarn test`\nShould you want to view only a single jest test, you can run:\n`shell\nnpx jest app/javascript/<path-to-file>`\nRunning Tests in Watch Mode\nYou can run frontend tests in watch mode by running one of the following\ncommands:\n`shell\nnpm run test:watch`\nor\n`shell\nyarn test:watch`\nIn watch mode, after the first test run, jest provides several options for\nfiltering tests. These filtering options are enhanced via the\njest-watch-typeahead\nwatch plugin. It allows you to filter by test filename or test name.\n\nDebugging a Test\nTo troubleshoot any of your jest test files, add a debugger and run:\n`shell\nnode --inspect-brk node_modules/.bin/jest --watch --runInBand <path-to-file>`\nYou can read more about troubleshooting\nhere.\nAt the end of the test's execution, you will see the code coverage for the\nPreact components in our codebase.\nIf tests require utility modules, create them in a `utilities` folder under the\n`__tests__` folder. Jest is configured to not treat the `utilities` folder as a\ntest suite.\nYou can also debug jest in your favorite editor. See the",
    "tag": "forem"
  },
  {
    "title": "Feature Tests (Legacy)",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/tests/types/feature-tests.md",
    "content": "\nsidebar_position: 2\nFeature Tests (Legacy)\n:::important\nWe no longer actively add feature tests to `/spec/system` since we have added Cypress as a tool for our end-to-end testing. Hence, we are in the process of replicating the current `/spec/system` tests in Cypress and in the future we will only use Rails Feature Tests if for some reason a test cannot be implemented in Cypress due to any limitations. You can read more about our e2e testing.\n:::\nFeature tests are tests from the perspective of the end-user.\nIn the Rails world, we sometimes refer to these as Feature or System tests. A\ntool called Capybara is included to help us simulate a human's actions inside of\nour tests.\nGenerally, we are simulating what a user could do from their web browser and\nensuring that the app behaves as intended. When a feature is heavily reliant on\ninteraction from a user via the browser, it's a good idea to write automated\nFeature tests to uncover any bugs that might not be apparent from manual\ntesting.\nIt's important to note that Rails System tests can be fairly slow, so it's\nbetter to focus on testing core functionality or pieces of your code that you\nthink might be prone to regressions. Another strategy we use to help us keep\nFeature tests fast is `:aggregate_failures`. `:aggregate_failures` allows us\nto make multiple assertions within a single test. The flag signals to Rspec to\nrun each assertion and then report all of the failures back to us rather than\njust the first failure. This saves time because we only have to setup the\nconditions for the spec once and then make all of our assertions instead of\nsetting up the conditions repeatedly for each individual assertion.\nFeature tests can be found in the directory `spec/system`.\nYou can run all Feature tests with:\n`shell\nbundle exec rspec spec/system`\nTo run an individual file you can use:\n`shell\nbundle exec rspec spec/system/user_views_a_reading_list_spec.rb`\nTo run a specific test case you can use:\n`shell\nbundle exec rspec spec/system/user_views_a_reading_list_spec.rb:10`\nwhere `10` is the line number of the test case that you want to execute.\nYou can read the official guide\nTesting Rails Applications\nto learn more.\nTest Flags\nWhen creating tests using Rspec we have the ability to add flags to those tests\nthat will signal to Rspec to run certain commands before, after, or around the\ntest example.\n`js: true` Flag\n`js: true` indicates that we want the JavaScript on the page to be executed when\nthe page is rendered, and a headless chrome instance will be initialized to do\nso (instead of the default\nrack_test driver).\nIf you are debugging a `js: true` spec and want to see the browser, you can set\n`HEADLESS=false` before running a spec:\n```shell\nHEADLESS=false bundle exec rspec spec/app/system",
    "tag": "forem"
  },
  {
    "title": "Manual Tests",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/tests/other-focus-areas/manual-tests.md",
    "content": "\nsidebar_position: 2\nManual Tests\nWe try to automate as much as possible, but particularly for frontend changes it\nis usually necessary to verify work with a manual test. When manually testing a\nfeature, it's useful to check:\n\nDoes the UI look consistent across different desktop browsers?\nIs the UI optimised for a mobile layout?\nDoes the feature behave consistently across desktop and mobile browsers?\nIs the feature accessible? (See the\n  Accessibility testing docs)\n\nTips for testing on mobile\nFor features involving touch interactions it becomes more important to test on\nactual mobile devices, rather than using the browser dev-tools device simulator.\nThere can be some platform-specific differences in how these touch events are\nhandled and it's useful to make sure a feature is checked on both android and\niOS.\nOne way to run your development code on your own mobile device is to use\nngrok. ngrok is a free tool that allows you to access your\n`localhost:3000` via a standard URL. To use it:\n\nFollow ngrok's instructions to download/install the tool\n  (there is a free tier)\nRun `ngrok http 3000` in your terminal\nCopy the URL given in response (e.g. `xxxxxxxxx.ngrok.io`) and add it to your\n  `.env` file's `APP_DOMAIN` value (replacing `localhost:3000`)\nStart the app via `bin/startup` as usual\nVisit the ngrok URL on your mobile (to save copying the text, you could use a\n  QR code generator on your\n",
    "tag": "forem"
  },
  {
    "title": "Regression Testing",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/tests/other-focus-areas/regression-tests.md",
    "content": "\nsidebar_position: 3\nRegression Testing\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nRegression testing is a technique for detecting breaking changes over time in a\ncodebase.\nProper Regression testing is one of the most powerful tools in a programmer's\narsenal for avoiding the bugs that crop up as a project grows in size.\nGenerally speaking, Regression testing is accomplished by a combination of\nFeature tests and Integration tests\nperformed on areas where bugs have been found in the past. As it happens,\nsoftware bugs tend to exist in groups; writing tests around buggy code will\nalmost always uncover new bugs as code evolves.\nThe practice of Regression testing usually takes place after code has been\nwritten, and is used to detect if recent changes have introduced new bugs by\nbreaking previously functional software.\nThere is no perfect prescribed method for Regression testing, and it has evolved\nwith the introduction of [Continuous Integration][ci] practices like the ones\nthat Forem uses. However, CI doesn't replace the need for Regression testing.\nRegression tests should still be added to the codebase when bugs are discovered.\nIf you submit a bug patch to the Forem application, you might be asked to write\na Regression test around your patch to help warn future Forem contributors if\nthat bug ever makes another appearance. This practice has the added benefit of",
    "tag": "forem"
  },
  {
    "title": "Accessibility Tests",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/tests/other-focus-areas/accessibility-tests.md",
    "content": "\nsidebar_position: 1\nAccessibility Tests\nAccessibility testing is a form of automated and manual testing that helps us\nidentify some of the potential accessibility concerns on Forem. See also, the\nForem Frontend Accessibility docs.\nMany accessibility (a11y) issues are not obvious to everyone who contributes to\nthe Forem project, therefore leaning on tools to help us identify these issues\nis a good practice.\nIt's a good idea to use browser plugins while you're developing to keep an eye\nout for these issues, as well as including automated tests to catch regressions\nin future changes.\nThe axe devtools extension is a great place to get\nstarted. It works in both Firefox and Chrome. Use an extension like this one to\nfind potential a11y issues in your workflow.\nAutomated testing in Preact\nAn overarching a11y testing strategy isn't currently in place for the Forem\napplication, but there are some automated tools you can take advantage of in\nthis project.\nIt is important to note that automated accessibility testing is only effective\nat finding ~30% of accessibility issues. It's important to do manual a11y\ntesting as well.\nWhen you're writing Preact components, you can include some basic a11y testing\nin your unit tests with jest-axe.\nIf you're still curious\nthere are some great talks on accessibility for developers.\nPR Review Checklist\nPull Requests should include accessibility testing to prevent barriers from\nmaking it into the codebase. Sometimes issues found may be out of scope for a\nparticular PR \u2013 those can be opened as separate issues to be followed up on.\nTest the functionality in Forem-supported browsers for accessibility impact:\nChrome and Firefox were popular for Windows screen reader users in 2019\naccording to WebAIM.\nSafari is the most common choice for Voiceover users on the Mac, even if Chrome\nis widely used for development. Mobile browsers are worth checking, too.\n\nKeyboard: navigate the page without using a mouse or trackpad.\nCan you reach and operate the interactive controls like menus, buttons, and\n     other widgets?\nCan you see your focus point on the screen, and does the focus style have\n     adequate contrast?\nDoes your focus point get lost or hidden behind any layers with items\n     needing to be disabled/hidden?\nRun a browser extension.\nUse axe,\n     Accessibility Insights, Chrome's\n     Lighthouse Audit, or\n     WAVE\n     to run accessibility tests in the DevTools.\nPrioritize relevant, higher-impact violations and issues first.\nTest color contrast.\nPay extra attention to color contrast findings in your browser extension\n     tests, since it's the most common accessibility issue on the internet.\nThe\n     Chrome color picker with contrast ratio line\n     and\n     WebAIM contrast checker\n     are helpful tools for tweaking colors to meet\n     WCAG requirements.\n\nAdditional accessibility tests for PR reviews\n\nScreen reader testing\nGet feedback from people who use screen readers regularly if at all\n     possible.\nUnderstand that if you're a new screen reader user, there might be a\n     learning curve that can impact your results.\nNavigate through a UI change using a screen reader such as Mac\n     Voiceover with Safari, and\n     NVDA with Firefox or Chrome on\n     Windows.\nZoom and magnification\nIn the web browser, try zooming in from 200% to 500%.\nWould the layout or change of functionality be impacted by someone needing\n     to magnify their screen? Are there alternative styling or other solutions\n",
    "tag": "forem"
  },
  {
    "title": "Admin Guide",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/admin/admin-guide.md",
    "content": "\nsidebar_position: 1\nAdmin Guide\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nThe Forem application contains a rudimentary administration dashboard that lives\nbehind the admin route.\nThe admin dashboard is made up of a series of views that range from\nadministration tools to simplified reports. These tools are used by users with\nthe `admin` or `super_admin` roles to administrate the Forem application.\nAuthorization for these tools is handled by the [Rolify][rolify] gem.\nCurrently, a workaround exists to give access to certain `admin` views via\nRolify by assigning the role `single_resource_admin` to a user.\n`single_resource_admin` users are given access to a Ruby class. In the codebase,\nthere are admin models, not backed by database tables, that exist for this\npurpose. For example, if you needed to give a user access to only\n`/admin/apps/welcome`, you'd run the following command in the Rails console:\n`ruby\nuser = User.find(some_user_id)\nuser.add_role(:single_resource_admin, Welcome)`\nThis gives the user administration privileges on the controller associated with\nan almost empty Rails model that lives in `app/models/admin/welcome.rb`:\n`ruby\nclass Welcome < ApplicationRecord\n  resourcify\n  # This class exists to take advantage of Rolify for limiting authorization\n  # on admin reports.\n  # NOTE: It is not backed by a database table and should not be expected to\n  # function like a traditional Rails model\nend`\nNow that user will be able to access the view at `admin/welcome`. The same\nworkaround has been implemented for most of the admin views.",
    "tag": "forem"
  },
  {
    "title": "Admin Search",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/admin/admin-search.md",
    "content": "\nsidebar_position: 2\nAdmin Search\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nFor admin views that need to take advantage of searching and filtering, we've\nchosen to use Ransack.\nRansack is a Ruby gem that makes searching relatively painless. It has excellent\ndocumentation, but if you're looking for an example of how it's being used on\nForem, we've implemented it to help searching and sorting user reports.\nThe view responsible for managing user reports can be found at\n`/admin/moderation/reports` and Ransack can be seen in use on the\nindex action of the admin/feedback_messages_controller.\nFor Forem, Ransack is being used exclusively in admin, for search problems in\nother parts of the app we use [PostgreSQL Full Text Search][postgres_fts].",
    "tag": "forem"
  },
  {
    "title": "Authentication",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/backend/authentication.md",
    "content": "\nsidebar_position: 2\nAuthentication\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nAuthentication is handled by Devise\nand OmniAuth.\nOn Forem you can authenticate through Facebook, GitHub, Twitter or Apple. Please check out\nthe respective guides on how to authenticate:\n\nForem authentication\nApple authentication\nFacebook authentication\nGithub authentication\nGoogle authentication\nTwitter authentication\n\nWe may add other authentication providers in the future. Please check back\nagain, or search",
    "tag": "forem"
  },
  {
    "title": "Data Update Scripts",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/backend/data-update-scripts.md",
    "content": "\nsidebar_position: 9\nData Update Scripts\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nWhat are Data Update Scripts?\nData Update Scripts were introduced in\nthis PR and allow us to run any data\nupdates we might need. For example, if we added a column to the database and\nthen wanted to backfill that column with data, rather than going and manually\ndoing it in a console, we would use a DataUpdateScript.\nHow it works\nFirst off, we added a\nDataUpdateScript model\nto Rails and a corresponding database table. This table is what we use to keep\ntrack of what scripts have been run and which ones have not/still need to be.\nTo create a script you can use our custom Rails generator:\n`rails generate data_update BackfillColumnForArticles`\nThis will create a simple Ruby class like below and all you have to do is fill\nin the code it will run.\n`ruby\nmodule DataUpdateScripts\n  class BackfillColumnForArticles\n    def run\n      # Place your data update logic here\n      # Make sure your code is idempotent and can be run safely\n      # multiple times at any time\n    end\n  end\nend`\nThe generator will also automatically create the corresponding spec file.\n```ruby\nrequire \"rails_helper\"\nrequire Rails.root.join(\n  \"lib/data_updates/20201103042915_backfill_column_for_articles.rb\",\n)\ndescribe DataUpdateScripts::BackfillColumnForArticles do\n  pending \"add some examples to (or delete) #{FILE}\"\nend\n```\nWhile we encourage adding tests for data update scripts, you can skip spec\ncreation by adding the `--no-spec` option to the `rails generate` command:\n`rails generate data_update BackfillColumnForArticles --no-spec`\nOnce your script is in place then you can either run `rails data_updates:run`\nmanually or you can let our setup script handle it. In our local\nbin/setup script you will\nsee we have added an additional task to update data. This kicks off the rake\ntask `data_updates:run` for you.\nThe rake task itself will check the `lib/data_update_scripts` folder to see if\nthere are any new scripts that need to be run. It does this by reading all of\nthe files and then checking to see if they have a corresponding database entry.\nIf they do not, then we create a new one and run the script. If a database entry\nalready exists and it indicates the script has been run, then we skip that\nscript.\nIn production\nDataUpdateScripts are also run automatically when a production deploy goes out.\nHowever, to ensure the new code they need to use has been deployed we use a\nDataUpdateWorker\nvia Sidekiq and set it to run 10 minutes after the deploy script has completed.\nBest practices\nWorking with large collections of rows\nFrom time to time, scripts need to operate on a large amount of rows; in those\ncases we encourage:\n\nadding explicit logging to the script\nreversing the order, to start processing the most recent records first\n\nFor example:\n```ruby\ndef run\n  Article.find_each(order: :desc).with_index do |article, index|\n    Rails.logging.info(\"...\") if index % 1000 == 0 # this will log every 1000 articles\n\n\n```article.save\n```\n\n\nend\nend",
    "tag": "forem"
  },
  {
    "title": "Notifications",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/backend/notifications.md",
    "content": "\nsidebar_position: 15\nNotifications\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nSince notifications are run asynchronously, we'll want to make sure jobs are\nrunning: `bundle exec sidekiq`. If that's not running, you won't receive any\nnotifications. You might need to create another account to pass notifications\nback and forth if you're doing this all through the UI.\nOtherwise, you can generate notifications from the Rails console and run the\nclass methods from `app/models/notification.rb`. For example:\n```ruby\nfollow notification\nme = User.last\nfollow = User.first.follow(me)\nNotification.send_new_follower_notification_without_delay(follow)\nreaction notification\nrxn = Reaction.create(\nuser_id: 1,\ncategory: \"like\",\nreactable: me.articles.last, # this assumes you have an article written\n)\nNotification.send_reaction_notification_without_delay(rxn, me)\n```\nNotice you have to run these methods `without_delay` since this is assuming jobs",
    "tag": "forem"
  },
  {
    "title": "Push Notifications",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/backend/push-notifications.md",
    "content": "\nsidebar_position: 18\nPush Notifications\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nDelivery\nForem instances rely on Rpush to deliver push notifications. This decision was heavily influenced by the desire to provide as much flexibility as possible to Creators. In order to do this, Forem instances can register and configure a `ConsumerApp`.\nThese consumer apps represent mobile applications that users use to browse and consume content on a Forem. Authenticated users of a specific Forem instance can register a `Device` associated to a `ConsumerApp`. With these pieces we are able to deliver push notifications to users devices.\nThe `ConsumerApp` configuration page can be found at `/admin/apps/consumer_apps`. The official Forem apps are supported by default and require their secret credential to be provided via ENV variable.\nRpush Implementation\nWe use Rpush's `rpush-redis` implementation (read this thread for the reasons why), hence all `Rpush` models are persisted in Redis.",
    "tag": "forem"
  },
  {
    "title": "Sign in with Apple Authentication",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/backend/auth-apple.md",
    "content": "\ntitle: Apple Authentication\nsidebar_position: 7\n\nSign in with Apple Authentication\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nForem allows you to authenticate using\nSign in with Apple. In order\nto use this authentication method you'll need to be enrolled to the\nApple Developer Program in order to\nretrieve the necessary credentials and an HTTPS supported URL for the callback\nconfiguration (HTTP won't work). Then you'll need to provide the keys to the\nRails application.\nApple Developer Portal Configuration\nRegister/Sign in to your Apple Developer\nAccount.\nService ID Configuration\n\nCreate a Service ID\n\n\n\nName the Service and finalize the registration\n\n\n\nConfigure Domains and Subdomains & the callback URL. This example uses\n   ngrok for HTTPS support.\n\n\nKey Configuration\n\nRegister a new Key.\n   Enable the \"Sign in with Apple\" option and configure it so it's associated\n   with the corresponding App ID\n\n\n\nDownload the Key\n\n\nConfiguring the Rails Application\nNow with both the Service ID and Key you'll need to enable Apple Authentication\nand pass in the credentials in the admin dashboard\n`/admin/customization/config`.\n\nFill in each of the configuration fields.\nMake sure the PEM key is copied exactly the way it appears in the file you downloaded from the Apple Developer portal, including newlines. If this isn't done correctly users will encounter an `Invalid curve name` error. Make sure a newline is added at the very end of the Apple PEM field.\n\nSave the changes and you're ready.\nEmail configuration\nApple uses what they call Private Email Relay Service to hide user's emails. For\nthis to work first\ncreate a new email source.\n\nEmails sent need to be authenticated and the configuration depends on the\ndifferent providers available:\n\nMailchimp\nSendGrid\n",
    "tag": "forem"
  },
  {
    "title": "Twitter Authentication",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/backend/auth-twitter.md",
    "content": "\nsidebar_position: 5\nTwitter Authentication\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nForem allows you to authenticate using Twitter. In order to use this\nauthentication method in local development, you will need to setup a Twitter App\nand retrieve its keys. Then you'll need to provide these keys to the Rails\napplication.\nSign up\n\n\nSign in to your Twitter account.\n\n\nIn order to get the API keys, you will have to\n   apply for a developer account.\n   Click the Apply button.\n\n\n\n\nSetup your Twitter account. Be sure you have your phone number and email\n   address filled in.\n\n\n\nFill in your account information and give a name to your developer\n   account.\n\n\n\nWrite down the reasons that you want to use Twitter API. Mention Forem's\n   community and describe the issues and tests and things that you want to work\n   on. Copy it, you might use it later ;)\n\n\n\nRead :) and accept the Terms and Conditions.\n\n\n\n\nVerify your email address once more, and you will be done.\n\n\nYou are done.\n\n\nGet API keys\n\n\nSign up or sign in\n   to your Twitter developer account.\n\n\nFrom Apps dashboard, click on Create and app.\n\n\n\n\nFill in the app name, description, and URL `https://dev.to`.\n\n\n\nCheck the Enable Sign in with Twitter option and fill in the Callback URL\n   `http://localhost:3000/users/auth/twitter/callback` (or whatever port you run\n   Forem on).\n\n\n\nFill in the information, Terms of Service `http://dev.to/terms` and\n   Privacy policy `http://dev.to/privacy`.\n\n\n\nWrite down (or paste) the things that you will work on. Press Create.\n\n\n\nReview the\n   Twitter Developer Terms\n   and agree to do nothing sketchy.\n\n\n\n\nThe app is all set!\n\n\nOne more change: From the app dashboard, go to Permissions and check\n   Request email addresses from users option.\n\n\n\n\n\nFrom the same dashboard access the Keys and tokens and add them to your\n    `.env` file accordingly (name of Twitter key -> name of our `ENV` variable).\n    Be sure to copy the access token and access token secret right away\n    because it will be hidden from you in the future.\n`text\nAPI key -> TWITTER_KEY\nAPI secret key -> TWITTER_SECRET`\n\n",
    "tag": "forem"
  },
  {
    "title": "GitHub Authentication",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/backend/auth-github.md",
    "content": "\nsidebar_position: 6\nGitHub Authentication\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nForem allows you to authenticate using GitHub. To use this authentication method\nin local development, you will need to set up a GitHub App and retrieve its\nkeys. Then you'll need to provide these keys to the Rails application.\n\n\nClick this link to create a new OAuth application in your Github account -\n   you will be redirected to sign in to Github account if you have not already.\n\n\nFill in the form with an application name, description, and the URL\n   `http://localhost:3000/users/auth/github/callback`. Replace the port `3000` if you run Forem on another\n   port.\n\n\n\n\nYou will be redirected to the app's Developer settings. Here you will\n   find the keys. Add them to your `.env` file accordingly (name of GitHub key\n   -> name of our `ENV` variable):\n\n`text\n   Client ID -> GITHUB_KEY\n   Client Secret -> GITHUB_SECRET`\n",
    "tag": "forem"
  },
  {
    "title": "Forem Authentication",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/backend/auth-forem.md",
    "content": "\ntitle: Forem Authentication\nsidebar_position: 4\n\nForem Authentication\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nForem allows you to authenticate using the Forem Passport service. Enabling this authentication provider is highly encouraged in order to benefit from the many Forem Ecosystem integrations (i.e. mobile apps).\nBetter integration with the `/admin` dashboard is currently under development but in the mean time you will be able to enable the Forem Authentication provider with the following steps:\n\nCreate an account in https://passport.forem.com\nUse the Forem Creator Setup to create new credentials for your Forem site\nYou will receive the `Key` and `Secret` credentials for your site\nThe instance logo will take a few moments to sync\nEnable the Forem Authentication provider in your Forem admin dashboard\n",
    "tag": "forem"
  },
  {
    "title": "Scheduled Jobs",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/backend/scheduled-jobs.md",
    "content": "\nsidebar_position: 16\nScheduled Jobs\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nAs in the Technical Overview, We use\nHeroku Scheduler for\nscheduled jobs. As the name suggests, this is for regularly recurring tasks that\nneed to be run every day, week, month, year, decade, and century.\nTasks are implemented in `forem/lib/tasks/fetch.rake`, typically in the form of:\n`task some_unique_task_name:, [optional_arg] => :environment do |optional_arg|\n  ... do your thing here ...\nend`\nYou can explore the\nofficial Heroku documentation\nfor defining tasks and read through tasks we have implemented for busting cache,\nawarding badges, and more.\nIn your Pull Request, communicate with a Forem Core Team Member to discuss at\nwhat frequency and ensure your task is scheduled on Heroku once your code is",
    "tag": "forem"
  },
  {
    "title": "Tracking",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/backend/tracking.md",
    "content": "\nsidebar_position: 19\nTracking\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nVisits & Events\nFor first-party analytics, we use the\nahoy_matey gem, which tracks visits and\nevents.\nWe intentionally choose to limit what user data we track and persist, and have\nopted to follow the GDPR compliance standards\nset by Ahoy. By default, we\nhave configured the Ahoy library to mask IP addresses, disable geocode tracking,\nand not track user cookies.\nVisits\nAhoy creates an `Ahoy::Visit` record for each visit that it tracks.\nBy default, we have turned off visit tracking in the `ApplicationController`:\n`ruby\nskip_before_action :track_ahoy_visit`\nWe currently only create visits on the server-side when they are required to be\ncreated by events. Visits can be re-enabled for specific controller actions if\nnecessary, but this should be done so with explicit care.\nWe do not collect any personal user data when tracking visits. Our collected\ndata is limited to the user's `id`. Each user has a unique `visitor_token`,\nwhile each visit to the site is marked with a unique `visit_token`.\nEvents\nAhoy creates an `Ahoy::Event` record for each event that it tracks. If no visit\nis recorded for a user when an event is tracked, Ahoy will simultaneously create\nan `Ahoy::Visit` for the event being tracked.\nEvents can be tracked in a controller action on the backend, or with JavaScript\non the frontend. Learn more about tracking events with JavaScript in our\nfrontend tracking guide.\nWhen an event is tracked, it should include a `name` and a `properties` hash.\nWhen adding new events, be sure that the name is unique per-event. The\nproperties will help you differentiate between events.\nIn order to track a specific event in a controller, use the `ahoy.track` call:\n```ruby\nclass YourController < ApplicationController\n  after_action :track_my_action\nprotected\ndef track_my_action\n    ahoy.track \"A specific description of your event\", request.path_parameters\n  end\nend\n```\nEvent tracking can be enabled for specific controller actions, but should be\ndone so with explicit care.\nMessages\nFor email analytics, we use the\nahoy_messages gem, which tracks a\nhistory of email messages sent to users.\nAhoy creates an `Ahoy::Message` record for each email sent by default, but can",
    "tag": "forem"
  },
  {
    "title": "Roles",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/backend/roles.md",
    "content": "\nsidebar_position: 13\nRoles\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nWhat is a role?\nIf authorization is about who has permission to be allowed to do what you want\nto do, then Roles are common patterns of authorization across users - reducing\nthe administrative overhead.\nWhy do I need to know about roles?\nSome bugs can only be seen for users with specific roles. You will need to\nchange the role to reproduce a problem.\nHow do we implement roles in Forem?\nRoles are implemented in this application using Rolify. The list of roles\ncan be found in app/models/role.rb and you can search for [has_role in the\ncodebase][3] to find which pages need which roles.\nA new user starts without any roles, and there is no administrative way of\nadding roles to users yet. To assign a user a role you will have to run commands\nat the console.\nExample of adding permissions to a user\n\nopen the Rails console\n\n`shell\nrails console`\n\nafter verifying the user `test_user_name` is missing the `trusted` role we\n  proceed to add it and then verify the role has been added:\n\n```ruby\n\nuser = User.find_by(username: \"test_user_name\")\nuser.has_role?(:trusted)\n=> false\nuser.add_role(:trusted)\n=> #\nuser.has_role?(:trusted)\n=> true\n```\n\nAnother common requirement is changing to the administrative role, and an\nexample of this is found [on the admin page][5].\nVerification\nA more complex query to list all the users and their roles:\n`ruby\nUser.joins(:roles).order(:id).group(:id).pluck(:id, :username, Arel.sql(\"array_agg(roles.name)\"))`\nFurther Reading\n\nRolify README.md\n[What is the purpose of Rolify?][4]\n[Admin][5]\n",
    "tag": "forem"
  },
  {
    "title": "Google OAuth2 Authentication",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/backend/auth-google.md",
    "content": "\nsidebar_position: 6\nGoogle OAuth2 Authentication\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nForem allows you to authenticate using Google OAuth2. To use this authentication method\nin local development, you will need to set up Google client application and retrieve its\nkeys. Then you'll need to provide these keys to the Rails application.\nGoogle Admin Console.\n\n\nClick this link to create a new OAuth application in your Google console -\n   you will be redirected to sign in to Google account if you have not already.\n\n\nGo to OAuth Consent Screen section. Set the Publishing Status to Testing\n\n\n\n\n\nAdd your test user email to the Test Users section\n\n\n\nGo to the Credentials section and at the top of the screen click Create Credentials -> OAuth Client ID\n\n\n\nSelect Web Application as the Application Type, and name it\n\n\n\nUnder Authorized Redirect URIs add the URI `http://localhost:3000/users/auth/google_oauth2/callback`. Replace the port `3000`\n   if you  run Forem on another port.\n\n\n\nOn the resulting screen you'll find your app's Client ID and Client Secret. Make a note of them.\n\n\n\nClick  OAuth Consent Screen in the sidebar, then click Edit App next to your app's name\n\n\n\nFill out the information on the resulting Edit App Registration screen, then click Next Step\n\n\n\nOn the next screen, Scopes, click Add or Remove Scopes\n\n\n\nClick the checkboxes next to the first two unlabeled scopes in the Updated Selected Scopes section\n\n\n\nComplete the rest of the app registration screens\n\nYour Forem\n\nEnable the Google Authentication provider in the admin dashboard, entering the Client ID and Client Key from step 7.\n\n",
    "tag": "forem"
  },
  {
    "title": "Configuration",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/backend/configuration.md",
    "content": "\nsidebar_position: 8\nConfiguration\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nWe currently use the following gems for configuring the application:\n\ndotenv\nrails-settings-cached\nvault\n\ndotenv\nThis gem is used for configuring environment variables for test and development\nenvironments. Examples:\n\n`REDIS_URL`\n`FASTLY_API_KEY`\n`STRIPE_SECRET_KEY`\n\nSettings managed via your ENV can be found in\ninstallation section of your operating system) and viewed at\n`/admin/customization/config` (see the Admin guide):\n\nTests always load the sample environment (and ignore the .env file). If you need to customize tests, add the environment variables to a file named .env.test.local. This prevents your development secrets from being present during test execution.\nrails-settings-cached\nWe use this gem for managing settings used within the app's business logic.\nExamples:\n\n`Settings::General.main_social_image`\n`Settings::RateLimit.follow_count_daily`\n`Settings::Authentication.twitter_secret`\n\nThese settings can be accessed via the\nSettings::General\nobject and various models in the `Settings::` namespace and viewed / modified\nvia `/admin/customization/config` (see the Admin guide).\n\nVault\nThe vault Ruby gem allows us to interact with\nVault. In a nutshell, Vault is\na tool for securely storing and accessing secrets. It is completely optional for\nrunning a Forem. To access it we use the wrapper `AppSecrets`.\n```ruby\nclass AppSecrets\n  def self.\n    result = Vault.kv(namespace).read(key)&.data&.fetch(:value) if ENV[\"VAULT_TOKEN\"].present?\n    result ||= ApplicationConfig[key]\n\n\n```result\n```\n\n\nrescue Vault::VaultError\n    ApplicationConfig[key]\n  end\ndef self.[]=(key, value)\n    Vault.kv(namespace).write(key, value: value)\n  end\ndef self.namespace\n    ENV[\"VAULT_SECRET_NAMESPACE\"]\n  end\n  private_class_method :namespace\nend\n```\nWe attempt to access a secret from Vault if it is enabled, i.e. if the\n`VAULT_TOKEN` is present. If Vault is not enabled or if we cannot find the\nsecret in it, then we fallback to fetching the secret from the\n`ApplicationConfig`.\nOne advantage of using Vault with Forem is that it allows you to update your\nsecrets easily through the application rather than having to mess with ENV\nfiles. If you would like to try out Vault, follow our",
    "tag": "forem"
  },
  {
    "title": "Internationalization (i18n)",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/backend/internationalization.md",
    "content": "\nsidebar_position: 12\nInternationalization (i18n)\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nWhat is internationalization (i18n)?\nTo over simplify the concept a bit, internalization (i18n for short) is the\nprocess of making the platform more user-friendly in various languages for\npeople around the globe. This includes, but is certainly not limited to, things\nlike making the site available in different languages, changing currency values\nto match your region, changing date formats, etc.\nWhat do we currently support?\nWe introduced some routing to lay the groundwork for a more comprehensive i18n\nimplementation.\nWhat is the goal?\nWe want everyone to feel included, regardless of where they're located or what\nlanguage(s) they speak. The goal is to make the platform available in various\nlanguages.\nHow do you get involved?\nThe following is a high level outline of an approach to internationalization.\nThis is by no means set in stone.\nWe encourage you to open a pull request (PR) to this documentation or to\ncontribute to internationalization with your ideas - we're\nopen-source!\nRouting\nWe have logic for routes setup. You can visit a page and add `/locale/:locale`\nto the beginning of the path. For example, if you visit the homepage, you can\nadd `/locale/fr-ca` for French, Canadian where `fr` is the language code and\n`ca` is the region code.\nSetting up languages under this \"sub-folder\" approach helps with Search Engine\nOptimization (SEO), routing, and more.\nCurrently, the various language routes will not do anything - it will stil show\nthe site in English (US).\nOnce i18n is up and running, users will be able to select their preferred\nlanguage to view the platform in. These routes will be the location of various\nlanguages.\nTranslating content\nThere are many ways to translate static content on the platform. To start, we\ncan explore tools like i18n-tasks which\nalso has an option to leverage Google Translate programmatically. We'll need to\ncreate locale files (likely `.yml`) to house the translations.\nSearch Engine Optimization (SEO)\nIt seems search engines, especially Google, don't particularly like content on a\npage to be in multiple languages. To account for this on pages like articles, we\ncan try an approach using the canonical URL for the language the article was\nwritten in.\nFor example, if we detect an article is written in Spanish, we can set the\ncanonical URL for that article to be `/locale/es/username/article-slug`. We can\nthen hide comments that are not in the same language as the article/rest of the\npage (Spanish in this example) only for the views the crawlers would see. That\nway, when the search engine crawler hits an article written in Spanish, the\ncrawler will see the entire page in Spanish. We will not hide comments for the\nviews that real users see.\nCaching\nThe platform relies on edge caching, especially with regards to articles. To\naccount for this, we'll need to add logic at the edge that understands what\nlanguages the platform currently supports and where to look up the language\nvariant in the cache.\nIf the edge doesn't pick up on a user selected preference (possibly sent as an\nadditional header or cookie), the edge will look at the `Accept-Language` header\nand normalize it. The header can include more specific preferences and look\nsomething like: `Accept-Language: fr-ca, fr;q=0.9, en;q=0.8, de;q=0.7, *;q=0.5`.\nThere are 2 things going on here. 1) A user can specify country/region variants\nfor a language - `fr-ca` (French - Canada) and `fr-fr` (French - France). For\nsimplicity's sake, we want to normalize that sort of preference to `fr` to\nstart. 2) A user can specify priority using the q argument. We'll want to\ninterpret the user's priority preferences to match their highest priority\nlanguage with one we currently support.\nOnce the edge is aware of what language it should be looking for, it will set\nthe cache key accordingly.\nWe also make use of fragment caching in several places. We need to update the\nkeys for those caches to account for `locale` so we're not mistakenly serving a\ncached fragment in a different language than intended.\nAdditional considerations\n\nTranslating URLs. For the best SEO result, we should also translate URLs\n  themselves into various languages. Something like the `/about` page could be\n  translated, for example. For now, we aren't going to account for this.\nTranslating dynamic/user generated content. For now, we plan to not\n  automatically translate any dynamic/user generated content (articles,\n  comments, listings, etc.). In the future we could explore what that looks\n  like, how a user can opt-in/out of that, etc.\n\nStyles, design, and UI\nWe'll want to expand some design aspects to support other languages that may be\nright-to-left, have different spacings, have special characters, etc.\nNext steps\nA few next steps we can take on the road to internationalization.\n\nUpdate our logic to allow special characters/encodings in URLs. Currently, we\n  generate slugs on dynamic content like articles and tags that may include\n  characters that make the URL\n  invalid.Here is a good example.\n  We want to update this logic so these characters work in URLs as expected.\nAllow Forem Admins to set a \"default language\". Currently, if a user doesn't\n  select a language preference, it defaults to English (\"en\").\nClean up some code. There are some places we're hard-coding strings on the\n  frontend. We'll want to explore moving that sort data to the backend to unify\n  where and how we're translating.\nTranslate areas of the site into English (US) first to ensure things are still\n  working. In other words, have the platform adhere to the default locale\n  instead of hard-coded strings.\nStart translating!\n\nResources\n\nRails Guides - Rails Internationalization (I18n)\ni18n-tasks\nGoogle: Managing multi-regional and multilingual sites\n",
    "tag": "forem"
  },
  {
    "title": "Metrics",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/backend/metrics.md",
    "content": "\nsidebar_position: 17\nMetrics\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nTime series data\nWe track point-in-time data by sending data points to Datadog using\nStatdsd.\nCurrently, we run a daily metric fetching job in `fetch.rake` which is called\nvia the Heroku scheduler. If we wanted to do other frequencies like hourly, etc.\nwe could add similar tasks.\nThe rake task calls `Metrics::RecordDailyUsageWorker.perform_async`, which\nperforms algorithms to come up with data points to send, for example:\n`ruby\nDataDogStatsClient.count(\"users.active_days_past_week\", one_day_users, tags: { resource: \"users\", group: \"new_users, day_count: 1 })`\nIf you want to create a new periodic data send, follow this pattern to do so.\nVendor-Agnostic\nWhile we currently are not vendor-agnostic in how we do this (Heroku/Datadog),\nit is set up in a way that could become so in the future. The main pattern is\n`Every x minutes/hours/etc. send aggregate data to warehouse where it can be examined on a timeseries basis`.\nThis could, in the future, be bundled right into the platform using an open\nsource timeseries database and data visualization.\nOnce in Datadog, dashboards can created using",
    "tag": "forem"
  },
  {
    "title": "Facebook Authentication",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/backend/auth-facebook.md",
    "content": "\nsidebar_position: 5\nFacebook Authentication\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nForem allows you to authenticate using Facebook. In order to use this\nauthentication method in local development, you will need to setup a Facebook\nApp and retrieve its keys. Then you'll need to provide these keys to the Rails\napplication.\nSign up\n\n\nSign in to your Facebook account.\n\n\nIn order to get the API keys, you will have to\n   convert your account to a developer account.\n\n\nGet API keys\n\n\nSign up or sign in to\n   your Facebook developer account.\n\n\nFrom My Apps dashboard, click on Add a New App.\n\n\n\n\nSelect For Everything Else\n\n\n\nFill in the app display name and contact email, then click on Create App\n   ID\n\n\n\nOn the Add a Product screen, click Set Up under the Facebook\n   Login section\n\n\n\nIgnore the quickstart options, and click Settings -> Basic in the sidebar\n\n\n\nFrom the basic settings screen dashboard copy the App ID and App\n   Secret values to your `.env` file accordingly (name of Facebook key -> name\n   of our `Settings::General` variable).\n\n`text\n   APP ID -> FACEBOOK_APP_ID\n   API secret -> FACEBOOK_APP_SECRET`\n\nConfigure the Facebook App\n\nFrom the basic settings screen dashboard set your application's domain name\n   in App Domains field, and be sure to click Save Changes\n\n\n\nNaviate to Facebook Login --> Settings, and enter the following callback\n   URL in the field Valid OAuth Redirect URIs:\n\n`https://<your domain>>/users/auth/facebook/callback`",
    "tag": "forem"
  },
  {
    "title": "Service Objects",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/backend/service-objects.md",
    "content": "\nsidebar_position: 20\nService Objects\nService objects are Plain Old Ruby Objects (POROs) which encapsulate a whole\nbusiness process/user interaction. We rely on these objects in our codebase to remove complexity from the Models and Controller.\nOur services are located in `app/services` with the corresponding specs in\n`spec/services`.\nNaming Conventions for Service Objects\n\nWe prefer to namespace our Service Objects especially when we potentially see the addition of more services under that namespace. This is adviseable rather than cluttering the root folder.\nWe namespace services in a plural form to avoid running into problems with Rails naming conventions. For example `Reactions::` instead of `Reaction::`.\nTo distinguish services from models we often follow the VerbNoun naming convention for services, like `HomePage::FetchArticles` instead of `HomePage::ArticleRetrieval`. However, sometimes the naming of the service may not fit within this convention and if you can rationalize about why you should use a different name then we will leave it to your discretion.\nWe encourage you to keep the namespaces to be the same across services, workers etc.\n\n.call Pattern\nWe use the `.call` pattern when creating services. This makes it clear and consistent to identify where our primary logic for the service lies.\nFor example: We'd prefer `result = ProfileFields::Add.call` vs `result = ProfileFields::Add.result`.\nHowever, as with the naming conventions if you can rationalize about why you should use a custom method name then we will leave it to your discretion.\nSkeleton of a Service Object\nMost Services Objects will contain the following skeleton:\n```ruby\nclass ImportUsers\n  def self.call(arg1)\n    new(arg1).call\n  end\ndef initialize(arg1)\n    @arg1 = arg1\n  end\ndef call\n    # import code goes here\n  end\nend\n```\nGenerating Service Objects\nTo make our services more consistent we use a custom Rails generator. Some usage\nexamples:\nGenerate a non-namespaced service\n`$ rails generate service DoTheThing`\n```ruby\napp/services/do_the_thing.rb\nclass DoTheThing\n  def self.call\n    new.call\n  end\ndef call\n  end\nend\n```\n```ruby\nspec/services/do_the_thing_spec.rb\nrequire \"rails_helper\"\nRSpec.describe DoTheThing, type: :service do\n  pending \"add some examples to (or delete) #{FILE}\"\nend\n```\nIf there are arguments for your service you can generate it as follows:\n`$ rails generate service DoTheThing arg1 arg2`\nGenerate a namespaced service\n`$ rails generate service things/dothem arg1 arg2`\n```ruby\napp/services/things/do_them.rb\nclass Things::DoThem\n  def self.call(arg1, arg2)\n    new(arg1, arg2).call\n  end\ndef initialize(arg1, arg2)\n    @arg1 = arg1\n    @arg2 = arg2\n  end\ndef call\n  end\nend\n```\n```ruby\nspec/services/things/do_them_spec.rb\nrequire \"rails_helper\"\nRSpec.describe Things::DoThem, type: :service do\n  pending \"add some examples to (or delete) #{FILE}\"\nend",
    "tag": "forem"
  },
  {
    "title": "Audit Log",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/backend/audit-log.md",
    "content": "\nsidebar_position: 1\nAudit Log\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nTo help maintain accountability for users with elevated permissions the Forem\napplication has a special model that records certain actions.\nFor example, when a user with the `trusted` role creates a negative reaction on\nan article a record is created with certain information about that action.\nThat record (which we call an `AuditLog`) looks something like this:\n```ruby\n<AuditLog:0x00005629f019a490\nid: 1,\n category: \"moderator.audit.log\",\n created_at: Thu, 07 May 2020 20:25:31 UTC +00:00,\n data:\n  {\"action\"=>\"create\", \"category\"=>\"vomit\", \"controller\"=>\"reactions\", \"reactable_id\"=>\"16\", \"reactable_type\"=>\"Article\"},\n roles: [\"trusted\"],\n slug: \"create\",\n updated_at: Thu, 07 May 2020 20:25:31 UTC +00:00,\n user_id: 21>\n```\nYou can see from this record that the user with an id of `21` created a vomit\nreaction on the article with an id of `16`. If that's not obvious to you from\nthis object, don't worry, just take our word on it.\nYou can find an example of `Audit::Logger` in action in\n`app/controllers/admin/reactions_controller.rb`:\n`ruby\n  after_action only: [:update] do\n    Audit::Logger.log(:moderator, current_user, params.dup)\n  end`\nThis code creates a record to indicate that a someone modified a reaction from\nthe admin controller.\nIt's a good idea to add a similar `after_action` to any controller action that\nmight benefit from increased transparency.\nAdditionally, the `AuditLog` is used to track important actions performed on a\nuser's account, e.g. adding or removing a credit card:\n```ruby\n {\n\n\n```category: \"user.credit_card.edit\",\n```\n\n\ncreated_at: Tue, 21 Jul 2020 06:35:13 +03 +03:00,\n        data: {\n         \"action\" => \"create\",\n     \"controller\" => \"stripe_active_cards\",\n    \"user_action\" => \"add\"\n  },\n          id: 4,\n       roles: [],\n        slug: \"credit_card_add\",\n  updated_at: Tue, 21 Jul 2020 06:35:13 +03 +03:00,\n     user_id: 53\n}",
    "tag": "forem"
  },
  {
    "title": "Emails",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/backend/emails.md",
    "content": "\nsidebar_position: 10\nEmails\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nSetting up email\nIf you would like to enable transactional email using services like SendGrid or\nMailgun, you can configure it by using the following environment variables:\n`shell\nSMTP_ADDRESS=         # ie. \"smtp.sendgrid.net\"\nSMTP_PORT=            # ie. 587\nSMTP_DOMAIN=\nSMTP_USER_NAME=\nSMTP_PASSWORD=\nSMTP_AUTHENTICATION=  # defaults to :plain`\nWe follow the standard `ActionMailer` configuration. For more info, please check out Rails' official documentation.\nPreviewing emails in development\nYou can view email previews at http://localhost:3000/rails/mailers.\nPreviews are setup in the directory `spec/mailers/previews`.\nOverriding mailer templates\nTo update the contents of emails that the app sends, edit the views under\n`app/views/mailers`. Note that this app uses the\ndevise_invitable gem for",
    "tag": "forem"
  },
  {
    "title": "Fastly",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/backend/fastly.md",
    "content": "\nsidebar_position: 11\nFastly\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nWhat is Fastly?\nFastly is a third party service we use for caching on\nthe edge. It allows us to scale up and serve our millions of visitors quickly\nand efficiently.\nIf you want to learn more about we use Fastly, check out this\ntalk that one of our founders,\n@benhalpern, gave at RailsConf 2018 talking about how we\nmade our app so fast it went viral.\nFastly offers many different configurations (conditions,\nsnippets, etc.).\nSnippets\nSnippets, in general, are \"short blocks of VCL logic that can be included\ndirectly in your service configurations. They're ideal for adding small sections\nof code when you don't need more complex, specialized configurations that\nsometimes require custom VCL.\"\nYou can learn more about VCL snippets on\nFastly's website\nAdding query string parameters to a safe list\nIn the context of contributing, here's what you need to know about Fastly. In\norder for our servers to receive any sort of query string parameters in a\nrequest, they must first be marked as safe in Fastly. For example, if you're\ncreating a new API endpoint or updating an existing one to accept new\nparameters, you'll need to update Fastly.\nThe reason we have a safe list of parameters in Fastly this way is so we don't\nhave to consider junk parameters when busting the caches. Check out our\nEdgeCache services\nto see examples of this.\nPreviously this was a manual process done by an internal team member. Now we do\nit programmatically using the Fastly\ngem.\nHow it works\nWe created a new file, `config/fastly/safe_params_list.vcl`, to house all of the\nsafe params in Fastly.\nIf you need to update this list, simply update this file. It's as easy as that!\nThis is a VCL file and you'll see a little Regex checking for a list of safe\nparams.\nFastly is not setup for development.\nIn production\nIf you have Fastly configured in Production, all Fastly configs are updated\nautomatically when a production deploy goes out.\nWe do this by executing `bin/rails fastly:update_configs` in our",
    "tag": "forem"
  },
  {
    "title": "Additional Database options",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/backend/database.md",
    "content": "\nsidebar_position: 0\nAdditional Database options\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nSeed Data\nBy default, the amount of articles and users generated is quite tiny so that\ncontributors experience a quick installation. If you require more data for your\nlocal installation, you can tune amount of data generated with the environment\nvariable `SEEDS_MULTIPLIER`.\nThis variable, which defaults to `1`, allows the developer to increase the size\nof their local DB. For example:\n`shell\nSEEDS_MULTIPLIER=2 rails db:setup`\nwill result in creating double the default amount of items in the database.\nIt's currently used only for `articles` and `users`.\nIt can also be used for `rails db:seed` and `rails db:reset`.\nDefault Admin User\nSeed data creates a handful of regular users, and a single admin user that can\nbe used to log into the application with the Email login option:\n`email: admin@forem.local\npassword: password`\nOther seed modes\nTo put your local forem into \"starter mode\", as it would be for a new creator,\nuse `MODE=STARTER` i.e...\n`shell\nMODE=STARTER rails db:setup`",
    "tag": "forem"
  },
  {
    "title": "Deploying Forem",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/maintainers/deploying.md",
    "content": "Deploying Forem\nAnyone with the ability to merge PRs on GitHub can deploy the application.\nWhenever a PR is merged the code is deployed. When deploying complex code, be\nsure that other team members are around to help if something goes wrong.\nGenerally, it's a good idea to keep the SRE team in the loop on high risk\ndeploys. However, deployments are our collective responsibility, so it's\nimportant to monitor your deploys. You can see deployment status on\nTravis-ci.com and in the #deployment-pipeline channel on Slack. Be prepared to\nrollback or push a fix for any deployment!\nDeployment and CI/CD Process\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nOverview\nForem relies on GitHub and Travis to deploy continuously to Heroku. If a Pull\nRequest is merged it will automatically be deployed to production once the build\nsteps complete successfully. The process currently takes about 20 minutes to\ncomplete and will need a few additional minutes before the change goes live.\nTravis Stages\nThe following stages can be explored in our\n.travis.yml and\nProcfile. Our Travis CI\nprocess consists of 2 stages.\n\nRunning our test suite in 3 parallel jobs.\nDeploying the application.\n\nStage 1: Running Tests\nIn stage 1, we use KnapsackPro to divide our Rspec\ntests evenly between 3 different jobs (virtual machines). This ensures that each\njob takes relatively the same amount of time to run. After running our Rspec\ntests, we then run a series of other checks. These additional checks are split\nup between the different jobs. Here is a list of those additional checks that\nare run.\n\nJob 0 is where we run JavaScript tests, Preact tests, and coverage checks.\nJob 1 is where Travis builds Storybook to ensure its integrity, and where we\n  check for any known vulnerabilities using `bundle-audit`.\nJob 2 is where Travis fires up a Rails console to ensure the application loads\n  properly.\n\nIf all of the jobs pass then we move on to Stage 2 of the Travis CI process.\nStage 2: Deploying\nIf the build was kicked off from a pull request being created or updated this\nstage will do nothing. If the branch has been merged into main, then this stage\nwill kick off a deploy. The deploy will run in its own job deploying our\napplication to Heroku.\nPrior to deploying the code, Heroku will run database migrations and do some\nfinal checks (more information on that below) to make sure everything is working\nas expected. If these all succeed, then the deploy completes and our team is\nnotified.\nDeploying to Heroku\nWe use Heroku's\nRelease Phase feature.\nUpon deploy, the app installs dependencies, bundles assets, and gets the app\nready for launch. However, before it launches and releases the app Heroku runs a\nrelease script on a one-off dyno. If that release script/step succeeds the new\napp is released on all of the dynos. If that release script/step fails then the\ndeploy is halted and we are notified.\nThe name of the script we use is `release-tasks.sh` and its in our root\ndirectory. During this release step we do a few checks.\n\nWe first check the DEPLOY_STATUS environment variable. In the event that we\n   want to prevent deploys, for example after a rollback, we will set\n   DEPLOY_STATUS to \"blocked\". This will cause the release script to exit with a\n   code of 1 which will halt the deploy. This ensures that we don't accidentally\n   push out code while we are waiting for a fix or running other tasks.\nWe run any outstanding migrations. This ensures that a migration finishes\n   successfully before the code that uses it goes live.\nWe run any data update scripts that need to be run. A data update script is\n   one that allows us to update data in the background separate from a\n   migration.\nFollowing updating all of our datastores we use the Rails runner to output a\n   simple string. Executing a Rails runner command ensures that we can boot up\n   the entire app successfully before it is deployed. We deploy asynchronously,\n   so the website is running the new code a few minutes after deploy. A new\n",
    "tag": "forem"
  },
  {
    "title": "Pull Requests",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/maintainers/pull_requests.md",
    "content": "\nsidebar_position: 1\nPull Requests\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nGeneral\n\nWe generally follow a branch naming convention of\n  `<user>/<feature>-<issue number>`, e.g. `sloan/make-things-awesome-5555`.\n  Issue numbers can be omitted when unavailable, e.g. for things like quick\n  fixes, spikes, experiments, etc.\nPush early and often, you don\u2019t need to wait until you\u2019re finished to get\n  feedback. Please use GitHub draft PRs when you have a work-in-progress (WIP)\n  PR, or when you have a PR that is contingent on something else to be merged.\n  We prefer draft PRs rather than adding \"DO NOT MERGE\" to a PR's title. Any PR\n  that is not a draft should be ready to be merged by anyone once it has been\n  reviewed.\nPlease follow our pull request template. Provide context for reviewers, when\n  in doubt err on the side of too much information.\nCore team members are not required to review draft PRs. To explicitly request\n  feedback, please assign or mention people.\n\nPR Reviews\nPR review is the Core Team's opportunity to weigh-in on changes before they go\ninto production.\nKeep in mind that our team is distributed across the world. It's a good idea to\nleave far-reaching PRs open for a day, to give everyone a change to share their\nthoughts.\n\nWe require 2 approvals from core team members for each PR:\nOne from the same team because they have context and are working towards the\n    same goal as you.\nOne from outside your team for the following reasons:\nA different perspective from someone who has less context\nTo leverage our different strengths and garner additional insights\n  spreading knowledge and code exposure throughout the team\nTo avoid overloading individuals\n\n\nTag people that you\u2019d like to review your PR using GitHub\u2019s \u2018Reviewers\u2019\n  function.\nBe kind! The goal here is to work together on shipping good code, not to judge\n  people.\nFor serious issues, use Github\u2019s \u201cRequest changes\u201d feature. This should be\n  reserved for serious problems, e.g.\nDoesn\u2019t do what the issue said\nForeseeable performance problems\nProvable security issues\nBreaks existing functionality\nEverything else can be posted as a comment, but it\u2019s up to the original PR\n  author whether or not they want to incorporate the changes.\nPlease keep style discussions to an absolute minimum, that time is better\n  spent making a PR for the configuration of our various lint tools.\nIf you make changes to your PR, please re-request feedback from previous\n  reviewers.\n\nMerging Pull Requests\nAt the time of writing, we tend to prefer squashing PRs into a single commit and\nmerging them. This is easily (and safely) achieved using the GitHub UI.\nAll required CI checks should be green.\nCore team members are responsible for merging their own pull requests and pull\nrequests issued by those outside the core team.\nOnce a PR is merged, it might need to be deployed. Deployment is a team\nresponsibility, and everyone on the core team should be comfortable deploying\ncode. For more information, read the",
    "tag": "forem"
  },
  {
    "title": "Contributing to Forem",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/contributing-guide/forem.md",
    "content": "\nsidebar_position: 2\nContributing to Forem\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nWe expect contributors to abide by our underlying\nCode of Conduct. All discussions about this\nproject must be respectful and harassment-free.\nRemember that communication is the lifeblood of any Open Source project. We are\nall working on this together, and we are all benefiting from this software.\nIt's very easy to misunderstand one another in asynchronous, text-based\nconversations. When in doubt, assume everyone has the best intentions.\nIf you feel anyone has violated our Code of Conduct, you should anonymously\ncontact the team with our abuse report form.\nWhere to contribute\nAll issues labeled\nready for dev\nand\nbug\nare up for grabs. Please note that issues with the\nForem team label are\ninternal tasks that will be completed by a Forem\ncore team member.\n\ngood first issue\n  issues are meant for newer developers.\n\nPRs without an associated issue may still be merged, but the core team will\nfocus on changes that solve existing issues. We strongly encourage creating an\nissue before working on a PR!\nWhen in doubt, ask a\ncore team member by mentioning us\non the issue.\nDocumentation is almost always a great place to start contributing to a new\nproject. Forem is an Open Source, community-driven project. Therefore, providing\nand maintaining quality documentation is one of our most important jobs. You can\nfind more information in our\ndocs guide!\nRefactoring, which involves improving the code without modifying behavior,\nis a great place to help out! Generally speaking, you can rely on existing tests\nto ensure that your refactor doesn't introduce any unexpected behavior. If an\narea isn't well tested, you might be asked to include a regression test with\nyour refactoring PR. Refactors can touch many files, so we encourage breaking\nbig changes into small PRs.\nFixing bugs is a super fast way to improve the experience for our users!\nWhen you're fixing bugs, we appreciate communication in a GitHub issue. If an\nissue exists, please claim that issue and link it in your PR, otherwise creating\nan issue is the best first step! Be sure to surround bug fixes with ample tests;\nbugs are magnets for other bugs. Write tests around bugs!\nFeatures tend to be subjective and might spur some debate. The Forem core\nteam uses an internal RFC (\"request for comments\") process to assess and\nprioritize new features. This process is intended to provide a consistent and\nstandardized path for new changes to enter the Forem ecosystem. If you'd like to\npropose a new feature, please visit forem.dev to start a\ndiscussion around a new feature (or chime in on a pre-existing discussion!).\nThere may be some open issues in our repository that we think evolve into\nimpactful features. For such issues, we use the\npotential RFC label in\norder to highlight the potential feature to the Forem core team members so that\nsomeone from the team can champion that feature.\nYou can learn more about our internal RFC process and how we use forem.dev\nhere\nHow to contribute\n\nFork the project and clone\n   it to your local machine. Follow the installation guide,\n   for example, the Mac guide!\nCreate a branch with your GitHub username and the ID of the\n   issue, for example:\n   `git checkout -b USERNAME/some-new-feature-1234`\nCode and commit your changes. Bonus points if you write a\n   good commit message:\n   `git commit -m 'Add some feature'`\nPush to the branch: `git push -u origin USERNAME/some-new-feature-1234`\nCreate a pull request\n   for your branch. \ud83c\udf89\n\nContribution guidelines\nCreate an issue\nNobody's perfect. Something doesn't work? Something could be better? Check to\nsee if the issue already exists, and if it does, leave a comment to get our\nattention! If the issue doesn't already exist, feel free to create a new one. A\ncore team member will triage incoming issues.\nPlease note: core team members may update the title of an issue to reflect the\ndiscussion.\nPlease include tests\nSome areas of the project could use updated tests, and new features should\nalways include test coverage. Feel free to read our testing section for guides, such as the front end tests page.\nCode quality\nWe use Code Cov to  incentivize us to write tests and increase coverage.\nWe deliver the coverage metrics directly into the PR to promote more code coverage, especially in pull requests where new features and bug fixes commonly occur.\nWe encourage you to always increase the code coverage with any new feature or bug fix.\nConsider accessibility in UI changes\nIf the change you're proposing touches a user interface, include accessibility\nin your approach. This includes things like color contrast, keyboard\naccessibility, screen reader labels, and other common requirements. For more\ninformation, check out the\nForem Accessibility docs page.\nPlease use inclusive language\nInclusion and respect are core tenets of our\nCode of Conduct. We expect thoughtful language\nall the way down to the code. Some technical metaphors are alienating or\ntriggering. We ask that contributors go the extra mile to submit code which is\ninclusive in nature.\nIf you unintentionally use language deemed harmful, there is no shame. We will\nwork together to find a better alternative. Being thoughtful about language also\nencourages more thoughtful code!\nCreate a pull request\n\nTry to keep the pull requests small. A pull request should try its very best\n  to address only a single concern.\nFor work in progress pull requests, please use the\n  Draft PR\n  feature.\nMake sure all tests pass and add additional tests for the code you submit.\n  More info here.\nDocument your reasoning behind the changes. Explain why you wrote the code in\n  the way you did. The code should explain what it does.\nIf there's an existing issue, reference to it by adding something like\n  `References/Closes/Fixes/Resolves #123`, where 123 is the issue number.\n  More info here.\nPlease fill out the PR Template when making a PR.\nAll commits in a pull request will be squashed when merged.\n\nPlease note: a core team member may close your PR if it has gone stale or if we\ndon't plan to merge the code.\nPull request reviews\nAll community pull requests are reviewed by our core team.\n\nAll contributors must sign the CLA.\nYou will be asked from CLAassistant. You\n    can confirm the signing status and signed content at\n    https://cla-assistant.io/forem/forem.\nAll required checks are expected to pass on each PR.\nIn the case of flaky or unrelated test failures, a core team member will\n    restart CI.\nWe require 2 approvals from core team members for each PR.\nRequested Changes must be resolved (with code or discussion) before merging.\nIf you make changes to a PR, be sure to re-request a review.\nStyle discussions are generally discouraged in PR reviews; make a PR to the\n  linter configurations instead.\nYour code will be deployed shortly after it is merged.\n\nA note on \"force pushing\"\nAfter you submit your pull request, one of the members of the core team will\nreview your code.\nPlease avoid force pushing unless you need to rebase with the main branch.\nIf feedback is provided, any changes should be contained in new commits. Please\ndon't force push or worry about squashing your commits.\nForce pushing (despite being useful) has some drawbacks. GitHub doesn't always\nkeep the review history, which results in lost context for the reviewers.\nWe squash every PR before merging, so there is no need to force push!\nThe bottom line\nWe are all humans trying to work together to improve the community. Always be",
    "tag": "forem"
  },
  {
    "title": "Contributing to the API Specification Docs",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/contributing-guide/api.md",
    "content": "\nsidebar_position: 3\nContributing to the API Specification Docs\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nThe v0 and v1 APIs are described with the OpenAPI 3 specification.\nSwagger.io has\ngreat docs that are\nhelpful to understand the specification better.\nWhere you can find the spec file\nWe auto-generate the v0 documentation from `api_v0.yml`, and v1 documentation from the `api_v1.json`, both \nlocated within the `/docs` directory. We use ReDoc to turn the OpenAPI\n3 format into a readable and searchable HTML documentation.\nUpdating API docs\nThere should be very infrequent reasons to update the v0 documentation. If must make changes to the v0 API docs, \nmake sure to bump the version at the top of `api_v0.yml`, in `info.version`.\nv1 API documentation is generated from the file `api_v1.json` which is generated via the Forem source code via the rswag gem. To add to the documentation: create or add to an existing\ndocumentation test under `spec/requests/api/v1/docs`. Run the documentation suite via the command\n`shell\nSWAGGER_DRY_RUN=0 RAILS_ENV=test rails rswag PATTERN=\"spec/requests/api/v1/docs/*_spec.rb\"`\nAn OpenAPI 3 spec file will be generated at `swagger/v1/api_v1.json`. Copy this file to the root of the forem-docs project, then refer to the \nforem-docs readme to rebuild the documentation site.\nRunning and editing the docs locally\nIf you want to browse the documentation locally you can use:\n`shell\nyarn api-docs:serve`\nThis will let you browse the auto-generated version of the doc locally, and it\nwill reload the documentation after every change of the specification file.\nLinting and validation\nWe use spectral and\nibm-openapi-validator to validate\nthe spec file. The validation is performed as a `pre-commit` hook.\nYou can also manually validate the document, running:\n`shell\nyarn api-docs:lint`\nIf you have Visual Studio Code, we suggest you install the following extensions\nthat enable validation and navigation within the spec file:\n\nOpenAPI (Swagger) editor\n",
    "tag": "forem"
  },
  {
    "title": "Contributing to the Docs",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/contributing-guide/docs.md",
    "content": "\nsidebar_position: 1\nContributing to the Docs\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nContributing to Forem's developer documentation\nContributions to the documentation are always appreciated! Thank you for making\nan effort to improve the developer experience of contributing to the DEV\nproject.\nRunning the documentation locally\nLike Forem, this site is open source and the code is hosted on GitHub.\nIf you find any incorrect information, or a even a typo, we'd love to see a pull\nrequest. Follow these steps to get the documentation site running locally.\nForem's documentation is built with Docusaurus.\nOnce installed, you should run `yarn start` in the root of the `forem-docs`.\n`shell\nyarn start`\nThis will start a server where you can browse the documentation:\nhttp://localhost:3000/\nIf you add new pages or rename existing pages, those changes will be to take\neffect shortly, so you don't need to restart the server.\nSince our documentation is built on Docusaurus, which is built on Netlify, you\ncan use the generated deploy preview link to check out your documentation\nchanges.\nOnce you make a PR, click on \"Show all checks\" and find the \"deploy/netlify\"\nrow. If your deploy preview is ready, you can click on \"Details\" to see the\npreview. Please note that the deploy preview only reflects any documentation\nchanges you make (and not any changes elsewhere in the app).\nUseful links\nThe docs are a collection of Markdown files that also utilize\nFrontMatter.\nFor more information on how to use Docusaurus, read the Docusaurus\ndocs.\nRegarding language & style\nWe ask that you avoid trivializing terms when contributing to documentation.\nThis includes words like \"just\", \"simply\", \"easy\", \"obvious\", and\n\"straightforward\". You can learn more about why we want to avoid this kind of\nlanguage in this blog post.\nGenerally speaking, the documentation hosted on this site is informal. There is\nno need to make things more complicated by writing these articles like a\ntextbooks.\nHowever, it's expected that contributions to these documents are reasonably\nstructured and mostly free of spelling and grammar errors. For this reason, if\nyou submit a PR you might be asked to make changes before your PR is merged.\nPrettier is used to autowrap lines in these files to 80 characters. Using 80\ncharacters per line allows us to retain a more specific git history over time.\nIf lines are not wrapped, changing a comma in a paragraph would attribute the\nentire paragraph to one commit. By line wrapping we are helping git to correctly\nattribute smaller changes to their commits. This keeps information from getting\nlost over time.\nFor more information on effective technical writing, check out\n[writethedocs.org][writethedocs].",
    "tag": "forem"
  },
  {
    "title": "Keeping Your Fork in Sync",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/getting-started/syncing.md",
    "content": "\nsidebar_position: 6\nKeeping Your Fork in Sync\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nNow that you have a fork of Forem's source code, there is work you will need to\ndo to keep it updated.\nSetup your upstream\nInside your Forem directory, add a remote to the official Forem repo:\n`shell\ngit remote add upstream https://github.com/forem/forem.git`\nRebasing from upstream\nDo this prior to creating each branch for a PR:\nMake sure you are on the main branch:\n`shell\n$ git status\nOn branch main\nYour branch is up-to-date with 'origin/main'.`\nIf you aren't on `main`, finish your work and checkout the `main` branch:\n`shell\ngit checkout main`\nDo a pull with rebase against `upstream`:\n`shell\ngit pull --rebase upstream main`\nThis will pull down all of the changes to the official `main` branch, without\nmaking an additional commit in your local repo.\n(Optional) Force push your updated `main` branch to your GitHub fork\n`shell\ngit push origin main --force`\nThis will overwrite the `main` branch of your fork.\nKeeping your branch up to date\nSometimes, your forked branch may get out of date. To get it up to date it,\ncarry out the following steps:\nRebase from upstream once again:\n`shell\ngit checkout main\ngit pull --rebase upstream main`\nCheckout your feature branch locally and merge main back into your branch:\n`shell\ngit checkout <feature-branch-name>\ngit merge main`\nMerge any conflicts in editor if necessary:\n`shell\ngit commit -m \"Fix merge conflicts\"`\nPush the changes back to your origin feature branch:\n`shell\ngit push origin <feature-branch-name>`\nAfter you've fetched new commits from upstream, run `./bin/setup`, and it will\ninstall new gems, npm packages, update database, and restart Rails server.\nAdditional resources",
    "tag": "forem"
  },
  {
    "title": "Committing",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/getting-started/commiting.md",
    "content": "\nsidebar_position: 4\nCommitting\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nCommitting and pre-commit hooks\nCommit messages\nWe encourage people to write\nmeaningful commit messages.\nStyle guide\nThis project follows\nthoughtbot's Ruby Style Guide,\nusing Rubocop along with\nRubocop-Rspec as the code analyzer.\nIf you have Rubocop installed with your text editor of choice, you should be up\nand running.\nFor the frontend, ESLint and\nprettier are used. ESLint's recommended\nrules along with Preact's recommended rules are used for code-quality.\nFormatting is handled by prettier. If you have ESLint installed with your text\neditor of choice, you should be up and running.\nHusky hooks\nWhen commits are made, a git precommit hook runs via\nhusky and\nlint-staged. ESLint, prettier, and\nRubocop will run on your code before it's committed. If there are linting errors\nthat can't be automatically fixed, the commit will not happen. You will need to\nfix the issue manually then attempt to commit again.\nNote: if you've already installed the husky\npackage at least once (used for pre-commit npm script), you will need to run\n`yarn --force` or `npm install --no-cache`. For some reason, the post-install\nscript of husky does not run when the package is pulled from yarn or npm's",
    "tag": "forem"
  },
  {
    "title": "Creating a Branch",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/getting-started/branching.md",
    "content": "\nsidebar_position: 3\nCreating a Branch\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nCreating a feature/bug branch\nWhen you are working on a bug, feature, or improvement, you will need to create\na branch.\nBranches names should be prefixed with your own GitHub username. If they have an\nassociated issue, the issue ID should be added as a suffix. For example:\n`shell\ngit checkout -b USERNAME/that-new-feature-1234`\nor\n`shell\ngit checkout -b USERNAME/fixing-that-bug-1234`\nwhere `USERNAME` should be replaced by your username on GitHub and `1234` is the\nID of the issue tied to your pull request. If there is no related issue, you can\nleave the number out.\nNOTE: It is ok if your branch name shows up as",
    "tag": "forem"
  },
  {
    "title": "Suggested Workflow",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/getting-started/workflow.md",
    "content": "\nsidebar_position: 2\nSuggested Workflow\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nWe use Spring, and it is already included in\nthe project.\n\nUse the provided bin stubs to automatically start Spring, i.e.\n    `bin/rails server`, `bin/rspec spec/models/`, `bin/rails db:migrate`.\nIf Spring isn't picking up on new changes, use `spring stop`. For example,\n    Spring should always be restarted if there's a change in the environment\n    keys.\nCheck Spring's status whenever with `spring status`.\n\nCaveat: `bin/rspec` is not equipped with Spring because it affects Simplecov's\nresult. Instead, use `bin/spring rspec`.\nSynchronizing a fork with upstream / integrate latest changes\nWhen changes in the upstream repository happen, the fork does not get those\nautomatically and this is by design. To integrate the changes to the upstream\nrepo that were committed since you cloned your fork or synced the last time, use\nthe following script: `./scripts/sync_fork.sh` This will fetch the changes and\nmerge them into your current workspace.\nUse this:\n\nto get commits from upstream main into your branch\nto sync with latest changes from upstream main before continuing with a new\n  feature on your current branch\n\nAfter you've fetched new commits from upstream, run `./bin/setup`, and it will\ninstall new gems, npm packages, update database, and restart Rails server.\nStart the app by running `./bin/startup`, if it's not already running.\nStart over / discard all your changes\nSometimes it is necessary to start over from the beginning or reset the current\nworkspace to the state of the upstream branch. Use the helper\n`./scripts/clean_fork.sh` to set your fork to the exact same state as the\nupstream main branch.\nUse this:\n\nbefore working on a new feature\nbefore creating a new branch to make sure to have all the latest changes in\n  your fork also.\n\nAfter you've done that, run `./bin/setup`, and it will update gems, npm\npackages, update database, and restart Rails server.",
    "tag": "forem"
  },
  {
    "title": "Preparing a Pull Request",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/getting-started/pull-request.md",
    "content": "\nsidebar_position: 5\nPreparing a Pull Request\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\n\nTry to keep the pull requests small. A pull request should try its very best\n  to address only a single concern.\nIf you plan to do further work after the PR has been submitted, please use the\n  Draft PR\n  feature.\nMake sure all tests pass and add additional tests for the code you submit.\n  More info here.\nDocument your reasoning behind the changes. Explain why you wrote the code in\n  the way you did. The code should explain what it does.\nIf there's an existing issue related to the pull request, reference to it by\n  adding something like `References/Closes/Fixes/Resolves #305`, where 305 is\n  the issue number.\n  More info here.\nPlease fill out the PR Template when making a PR.\nUse Reviewers section to request for reviews.\nAll commits in a pull request will be squashed when merged, but when your PR\n  is approved and passes our CI, it will eventually be live on production!\n\nIf the pull request affects the public API in any way, a post on Forem from the\nForem Team account should accompany it. This is the duty of the core team to",
    "tag": "forem"
  },
  {
    "title": "Starting the Application",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/getting-started/start-app.md",
    "content": "\nsidebar_position: 1\nStarting the Application\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nWe're a Rails app, and we use Webpacker to manage some of our\nJavaScript.\nStarting the application\nStart the application, Webpack, and our job runner Sidekiq by\nrunning:\n`shell\nbin/startup`\n(This just runs `foreman start -f Procfile.dev`, for notes on how to install\nForeman, please see Other Tools)\nThen point your browser to http://localhost:3000/ to view the site. To log in\nuse the admin account created by default (see\nDatabase)\nIf you run into issues while trying to run `bin/setup` and the error message\nisn't helpful, try running `bin/rails s -p 3000`. For example, you may need to\n`yarn install` before starting the app.\nIf Sidekiq is producing errors similar to\n`No such file or directory - [SOME FILE]`, you may need to start Sidekiq by\nitself once to help it initialize itself fully. You can use the command\n`bundle exec sidekiq` to do this.\nIf you're working on Forem regularly, you can use `alias start=\"bin/startup\"` to\nmake this even easier. \ud83d\ude0a\nIf you're using `pry` for debugging in Rails, note that using `foreman` and\n`pry` together works, but it's not as clean as `bin/rails server`.\nHere are some singleton commands you may need, usually in a separate\ninstance/tab of your shell.\n\nRunning the job Sidekiq server (if using `bin/rails server`) -- this is mostly\n  for notifications and emails: `bundle exec sidekiq`\n\nCurrent gotchas: potential environment issues with external services need to be\nworked out.\nStarting the application (advanced)\nTo have additional control in your local environment, you might prefer using an\nadvanced setup to start the application by using Overmind.\nThe prerequisite is to install Overmind, a process manager which\ntakes advantage of [tmux][tmux].\nThis will allow you to launch all your app's processes in the same terminal,\nnavigate the logs of each service separately, restart each service separately\nand have a better debugging experience.\nAfter installing Overmind, launch the application:\n`shell\novermind s -f Procfile.dev`\nDebugging the Rails application\nOvermind lets you easily step through the Rails application in a\ndebugging session.\nUsing the `pry` gem, you can add a `binding.pry` to set a breakpoint in the\nmethod you're trying to debug; the application will halt its execution there.\nYou can then connect to the web server by opening a separate terminal window and\ntyping:\n`shell\novermind c web`\nThis will open up a [tmux][tmux] window pane at the debugging statement\nposition, which will look something like this:\n```ruby\npry(#)> whereami\nFrom: /forem/app/controllers/admin/overview_controller.rb:8 Admin::OverviewController#index:\n\n\n```5: def index\n6:   a = \"Hello debugger\"\n7:   binding.pry\n```\n\n\n=> 8: end\n```\nInspecting the logs of each service\nOvermind launches the various services required for our local setup: `web` (the\nRails web server), `webpacker` (the server managing JavaScript) and `sidekiq`\n(the server managing the asynchronous queue).\nIf, for example, you want to inspect just the Sidekiq logs, you can open a\nseparate terminal window to look at those logs specifically:\n`shell\novermind c sidekiq`\nThis will open a `tmux` console, which will allow you to browse only the\nSidekiq logs.\nThere are also some handy `tmux` shortcuts that you may find useful.\n\nThe shortcut `C-b [` (Control-b-open square bracket) activates \"scroll\n  mode\", which allows you to use the arrows up and down and inspect the logs.\nThe shortcut `q` deactivates \"scroll mode\".\n\nPlease refer to [tmux][tmux] documentation for more information around `tmux`\nconfiguration and for additional shortcuts.\nResources\nOther than the official Overmind and [tmux][tmux] documentation, you\nmay find the following resources useful:\n\nRails quick tips #6: tmux, tmuxinator and Overmind\nGive Your Terminal Super Powers: tmux Cheatsheet!\nIntroducing Overmind and Hivemind\n",
    "tag": "forem"
  },
  {
    "title": "Vault",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/getting-started/installation/vault.md",
    "content": "\nsidebar_position: 8\nVault\nInstalling\nTo install Vault follow the\nVault installation instructions. If\nyou have a Mac, you can install\nVault using Homebrew. You can validate\nthat you have it installed by running the following command.\n`bash\nvault -h`\nAfter Vault has been installed, the next step is to start up a Vault server.\n`vault server -dev`\nThis will give you an output that looks like this:\n```\n==> Vault server configuration:\n\n\n```         Api Address: http://127.0.0.1:8200\n                 Cgo: disabled\n     Cluster Address: https://127.0.0.1:8201\n          Listener 1: tcp (addr: \"127.0.0.1:8200\", cluster address: \"127.0.0.1:8201\", max_request_duration: \"1m30s\", max_request_size: \"33554432\", tls: \"disabled\")\n           Log Level: info\n               Mlock: supported: false, enabled: false\n       Recovery Mode: false\n             Storage: inmem\n             Version: Vault v1.4.2\n         Version Sha: 18f1c494be8b06788c2fdda1a4296eb3c4b174ce+CHANGES\n```\n\n\nWARNING! dev mode is enabled! In this mode, Vault runs entirely in-memory\nand starts unsealed with a single unseal key. The root token is already\nauthenticated to the CLI, so you can immediately begin using Vault.\nYou may need to set the following environment variable:\n\n\n```$ export VAULT_ADDR='http://127.0.0.1:8200'\n```\n\n\nThe unseal key and root token are displayed below in case you want to\nseal/unseal the Vault or re-authenticate.\nUnseal Key: \nRoot Token: \nDevelopment mode should NOT be used in production installations!\n```\nConfiguring\nOnce Vault is installed and running, the next step is to configure it to work\nwith your application. Since we want multiple applications (in production) to be\nable to use the same Vault infrastructure, we control access with\nVault policies and\ndifferent\nkey/value secret paths.\nIn the following examples, `VAULT_SECRET_NAMESPACE` will be the secret path\nwhere your secrets are stored. This can be any string (except \"secrets\" since\nthat exists by default) of your choosing, for example `local-secrets`.\n`VAULT_POLICY_NAME` will be the name of the policy that we use to control access\nto `VAULT_SECRET_NAMESPACE`. Once again, this should be a string. For example,\n`local-policy`.\nTo set up a policy and secret path run the following commands:\n```\nvault secrets enable -path=/ kv-v2\nvault policy write VAULT_POLICY_NAME -<<EOF\ngrant permission to new VAULT_SECRET_NAMESPACE path\npath \"VAULT_SECRET_NAMESPACE/data/*\" {\n  capabilities = [\"create\", \"update\", \"read\"]\n}\nEOF\nvault token create -policy=VAULT_POLICY_NAME\n```\nThe final command will give you the following output:\n```\nKey                  Value\n---                  -----\ntoken                important-policy-token\ntoken_accessor       another-less-important-token\ntoken_duration       768h\ntoken_renewable      true\ntoken_policies       [\"default\" VAULT_POLICY_NAME]\nidentity_policies    []\npolicies             [\"default\" VAULT_POLICY_NAME]\n```\nThe `token` output from above is what you will use in your application to access\nVault. All that is left to do is set the appropriate ENV variables in your\n`.env` file.\n`shell\nexport VAULT_TOKEN=important-policy-token export VAULT_SECRET_NAMESPACE=<your\nnamespace from above>`\nRestart your application to start using Vault. One easy way to see it in action\nis via the Rails console.\n```ruby\nEnabled Example\n[3] pry(main)> AppSecrets[\"TEST_SET\"]=\"success\"\n=> \"success\"\n[4] pry(main)> AppSecrets[\"TEST_SET\"]\n=> \"success\"\nDisabled Example\n[2] pry(main)> AppSecrets[\"TEST_SET\"]=\"success\"\nVault::MissingTokenError: Missing Vault token! I cannot make requests to Vault without a token. Please\nset a Vault token in the client:\n\n\n```Vault.token = \"1234\"\n```\n\n\nor authenticate with Vault using the Vault CLI:\n\n\n```$ vault auth ...\n```\n\n\nor set the environment variable $VAULT_TOKEN to the token value:\n\n\n```$ export VAULT_TOKEN=\"...\"\n```\n\n\nPlease refer to the documentation for more examples.",
    "tag": "forem"
  },
  {
    "title": "MacOS",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/getting-started/installation/mac.md",
    "content": "\nsidebar_position: 1\nMacOS\nInstalling Forem on macOS\nInstalling prerequisites\nRuby\n\nNote: MacOS ships with a version of Ruby, needed for various operating\n   systems. To avoid causing an issue with your operating system you should use\n   a version manager for Ruby.\n\nIf you don't already have a Ruby version manager, we highly recommend\n   rbenv. This will allow you to have\n   different versions running on a per project basis. The MacOS system version\n   of Ruby will stay intact while giving you the ability to use the version\n   needed for this Forem project. Please follow their\n   installation guide.\n\nWith the Ruby version manager, install the Ruby version listed on our badge.\n   (i.e. with rbenv: `rbenv install $(cat .ruby-version)`)\n\nNote: The repository must be forked and cloned before running the\n   `rbenv install $(cat .ruby-version)` command.\nYarn\nPlease refer to their installation guide.\nPostgreSQL\nForem requires PostgreSQL version 11 or higher to run.\nThe easiest way to get started is to use\nPostgres.app. Alternatively, check out the official\nPostgreSQL site for more installation options.\nFor additional configuration options, check our\nPostgreSQL setup guide.\nImageMagick\nForem uses ImageMagick to manipulate images on\nupload.\nYou can install ImageMagick by issuing the following command:\n`shell\nbrew install imagemagick`\nRedis\nForem requires Redis version 6.0 or higher to run.\nWe recommend using Homebrew:\n`shell\nbrew install redis`\nyou can follow the post installation instructions, we recommend using\n`brew services` to start Redis in the background:\n`shell\nbrew services start redis`\nYou can test if it's up and running by issuing the following command:\n`shell\nredis-cli ping`\nNPM\nForem requires a specific version of Node Package Manager (NPM).  You can use Node Version Management (NVM) to help you manage your NPM setup. (see NVM vs. NPM vs. Yarn).\n`shell\nbrew install nvm\nnvm install $(cat .nvmrc)`\nYou can also manage your NPM with asdf.\nInstalling Forem\n\nFork Forem's repository, e.g. https://github.com/forem/forem/fork\n\nClone your forked repository in one of two ways:\n\n\ne.g. with HTTPS: `git clone https://github.com/<your-username>/forem.git`\n\n\ne.g. with SSH: `git clone git@github.com:<your-username>/forem.git`\n\n\nInstall bundler with `gem install bundler`\n\n\nNote: If you are using a Mac with an M1 CPU that uses Ruby compiled for ARM, you may need to force the platform that Bundler uses to `ruby`. This will allow you to build the C extensions used by Forem's dependencies.\nTo force the platform to use `ruby`, you can either:\n\nset `BUNDLE_FORCE_RUBY_PLATFORM=true` in the shell environment\nrun `bundle config set force_ruby_platform true` to set `ruby` in Bundler globally\n\n\n\nSet up your environment variables/secrets\n\n\nTake a look at `.env_sample` to see all the `ENV` variables we use and the\n     fake default provided for any missing keys.\n     If you don't need to override any environment variables, continue with\n     the next step as our setup script will automatically create a default\n     `.env` file.\n\nIf you use a remote computer as dev env, you need to set `APP_DOMAIN`\n     variable to the remote computer's domain name.\nThe backend guide will show you how to get free API keys for\n     additional services that may be required to run certain parts of the app.\n\nFor any key that you wish to enter/replace, follow the steps below.\n\nCreate `.env` by copying from the provided template (i.e. with bash:\n    `cp .env_sample .env`). This is a personal file that is ignored in git.\nObtain the development variable and apply the key you wish to\n    enter/replace. i.e.:\n\n`shell\n  export CLOUDINARY_API_KEY=\"SOME_REAL_SECURE_KEY_HERE\"\n  export CLOUDINARY_API_SECRET=\"ANOTHER_REAL_SECURE_KEY_HERE\"\n  export CLOUDINARY_CLOUD_NAME=\"A_CLOUDINARY_NAME\"`\n\n\nYou do not need \"real\" keys for basic development. Some features require\n     certain keys, so you may be able to add them as you go. The test environment\n     is isolated from changes to the .env file, if you want to set variables in both\n     test and development, use a file named .env.local, or modify .env.test.local\n     and .env.development.local.\n\n\nRun `bin/setup`\n\n\nPossible error messages\nError: `rbenv install hangs at ruby-build: using readline from homebrew`\nSolution:\nStackoverflow answer\n`RUBY_CONFIGURE_OPTS=--with-readline-dir=\"$(brew --prefix readline)\" rbenv install 2.0.0`\nError:\n`__NSPlaceholderDate initialize] may have been in progress in another thread when fork() was called`\nSolution: Run the command `export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES`\n(or `set -x OBJC_DISABLE_INITIALIZE_FORK_SAFETY YES` in fish shell)\n\nError: `User does not have CONNECT privilege.`\nSolution: Complete the steps outlined in the\nPostgreSQL setup guide.\n\nError:\n`rbenv: version '<version number>' is not installed (set by /Path/To/Local/Repository/.ruby-version)`\nSolution: Run the command `rbenv install <version number>`\n\nError: `ruby-build: definition not found: <version number>` when `rbenv` was\ninstalled via `brew`.\n```shell\nruby-build: definition not found: \nSee all available versions with `rbenv install --list`.\nIf the version you need is missing, try upgrading ruby-build:\n```\nSolution: Run the following to update `ruby-build`,\n`brew update && brew upgrade ruby-build`. After that, rerun\n`rbenv install <version number>` and that version will get installed.\n\nError:\n`shell\n== Preparing database ==\n    Sorry, you can't use byebug without Readline. To solve this, you need to\n    rebuild Ruby with Readline support. If using Ubuntu, try `sudo apt-get\n    install libreadline-dev` and then reinstall your Ruby.\nrails aborted!\nLoadError: dlopen(/Users/<username>/.rbenv/versions/2.6.5/lib/ruby/2.6.0/x86_64-darwin18/readline.bundle, 9): Library not loaded: /usr/local/opt/readline/lib/libreadline.<some version number>.dylib`\nSolution: Run\n`ln -s /usr/local/opt/readline/lib/libreadline.dylib /usr/local/opt/readline/lib/libreadline.<some version number>.dylib`\nfrom the command line then run `bin/setup` again. You may have a different\nversion of libreadline, so replace `<some version number>` with the version that\nerrored.\n\nError:\n`shell\nPG::Error: ERROR:  invalid value for parameter \"TimeZone\": \"UTC\"\n: SET time zone 'UTC'`\nSolution: Restart your Postgres.app, or, if you installed PostgreSQL with\nHomebrew, restart with:\n`shell\nbrew services restart postgresql`\nIf that doesn't work, reboot your Mac.\n\nError:\n`shell\nERROR:  Error installing pg:\n  ERROR: Failed to build gem native extension.\n  [...]\nCan't find the 'libpq-fe.h header\n*** extconf.rb failed ***`\nSolution: You may encounter this when installing PostgreSQL with the\nPostgres.app. Try restarting the app and reinitializing the database. If that\ndoesn't work, install PostgreSQL with Homebrew instead:\n`brew install postgresql`\n\nError:\n`shell\nnode-pre-gyp ERR! stack Error: Failed to execute '/Users/yourusername/.nvm/versions/node/v14.17.6/bin/node /Users/yourusername/.nvm/versions/node/v14.17.6/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js configure --fallback-to-build --module=/Users/yourusername/Code/forem/node_modules/canvas/build/Release/canvas.node --module_name=canvas --module_path=/Users/yourusername/Code/forem/node_modules/canvas/build/Release --napi_version=8 --node_abi_napi=napi --napi_build_version=0 --node_napi_label=node-v83 --python=/opt/homebrew/opt/python@3.9/bin/python3' (1)`\nSolution:\nOn an M1 Mac, this is due to there not being a prebuilt release for the node-canvas JavaScript package. You can get it to build itself from source if you install the following packages via the `arm64` version of Homebrew:\n`shell\nbrew install pkg-config cairo pango libpng jpeg giflib librsvg`\n\n\nIf you encountered any errors that you subsequently resolved, **please\n",
    "tag": "forem"
  },
  {
    "title": "Imgproxy",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/getting-started/installation/imgproxy.md",
    "content": "\nsidebar_position: 7\nImgproxy\nImgproxy is a standalone server for resizing images. It is optional and you do\nnot need it to start Forem locally. We are currently only using it in Forem\nCloud.\nInstallation\n\nMacOS: install via homebrew with `brew install imgproxy`.\nWindows: please install\n  via docker.\nLinux: you can either use\n  docker installation or\n  build from source.\n\nFor more options not covered here, please take a look at the\nofficial installation documentation.\nUsage\n\nGenerate a key/salt pair by running the following in your terminal twice.\n   Copy those values to your `.env` in the next step\n\n`echo $(xxd -g 2 -l 64 -p /dev/random | tr -d '\\n')`\n\nIn your `.env`, add the following.\n\n`export IMGPROXY_ENDPOINT='http://localhost:8080'\n   export IMGPROXY_KEY='1b1c9aae804e070b0864f2547fba7ce8ff31bf7..........'\n   export IMGPROXY_SALT='8c6d449d4fc2cada5bab538826cae709d2ade9f.........'`\n\n\nStart the Forem app server normally.\n\n\nStart Imgproxy in a terminal with the key and salt.\n\n\n```\n   # If you installed via homebrew or using the binary.\n\nIMGPROXY_KEY='your key' IMGPROXY_SALT='your salt' imgproxy\n\n# If you are using Docker or Podman. The commands are identical for both\n\ndocker run -p 8080:8080 \\\n      -e IMGPROXY_KEY=\"your key\" \\\n      -e IMGPROXY_SALT=\"your salt\" \\\n      -it darthsim/imgproxy\n   ```\n\n\nThat's it :)\n\nYou should verify it's working by starting the Forem app locally and see that\neach image is loaded properly, or run the following command while the Forem app\nis running:\n```\n\ncurl -I http://localhost:8080/unsafe/aHR0cDovL2xvY2Fs/aG9zdDozMDAwL2Fz/c2V0cy8xLnBuZw\n\nHTTP/1.1 200 OK\nServer: imgproxy\nX-Request-Id: GYvCGXb98JUwL3ujwpjzh\nDate: Tue, 27 Oct 2020 16:11:37 GMT\n```\nSidenote\n\nBecause Imgproxy is a standalone server of its own, all image URLs given to it\n  need to be absolute URLs.\nWhen working with Docker or Podman on Linux, provide the host network option\n",
    "tag": "forem"
  },
  {
    "title": "Installing Forem on Windows 10",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/getting-started/installation/windows.md",
    "content": "\ntitle: Windows\nInstalling Forem on Windows 10\nInstalling prerequisites\nThese prerequisites assume you're working on a `64-bit Windows 10` operating\nsystem machine\n\nupdated to version 1903, Build 18362 or higher for x64 system\nupdated to version 2004, Build 19041 or higher for ARM64 system\n\nFor further information regarding system requirements, head over to the\nMicrosoft Docs\nor\nMicrosoft's blog on extending WSL 2 Support.\nTo check your Windows version, press `Win Logo key` + `R`, type `winver`, then\nclick OK.\nThere are other ways to get Forem running on lower versions, but we recommend a\ncomplete WSL 2 installation.\nInstalling WSL\nSince Forem's codebase is using the Ruby on Rails framework, we will need to\ninstall the Windows Subsystem for Linux (WSL). Some dependencies used by the\nsource code triggered errors when installing on Windows, so using WSL allows you\nto work on the software and not having to fix gem incompatibilities.\nFollow the instructions for\nInstalling the Windows Subsystem for Linux.\nOnce you've installed WSL, complete all the instructions under the following\nsections in the link above:\n\nUpdate to WSL 2.\nEnable the \"Virtual Machine Platform\" optional component.\n   Be sure to reboot your machine after this step.\nSet WSL 2 as your default version.\n\nOnce all the steps mentioned above are completed,\ninstall Ubuntu 18.04 on Windows.\nOn your first run, the system will ask for username and password. Take note of\nboth since it will be used for `sudo` commands. More information about the\nprocess can be found at\ncreate a user account and password for your new Linux distribution\nInstalling rbenv\n`rbenv` is a version manager for Ruby applications which allows one to guarantee\nthat the Ruby version in development environment matches production. First,\ninstall Ruby language dependencies before installing `rbenv`:\n`shell\nsudo apt-get update\nsudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev software-properties-common libffi-dev`\nNow, we install rbenv using the following\ncommands:\n```shell\ncd\ngit clone https://github.com/rbenv/rbenv.git ~/.rbenv\necho 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.bashrc\necho 'eval \"$(rbenv init -)\"' >> ~/.bashrc\nexec $SHELL\ngit clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build\necho 'export PATH=\"$HOME/.rbenv/plugins/ruby-build/bin:$PATH\"' >> ~/.bashrc\nexec $SHELL\n```\nOne can verify `rbenv` installation using the `rbenv-doctor` script with the\nfollowing commands:\n`shell\ncurl -fsSL https://raw.githubusercontent.com/rbenv/rbenv-installer/main/bin/rbenv-doctor | bash`\nInstalling nvm\nAs a pre-requisite to install Rails, Node.js needs to be installed.\nnvm is a Node.js version manager that helps a\ndeveloper select a specific Node.js version for development.\nTo install `nvm`, follow the instructions outlined in the\nofficial nvm documentation.\nBe sure to reload the shell with the command `exec $SHELL` after the\ninstallation is complete.\nRun the following command to verify that `nvm` is installed:\n`shell\ncommand -v nvm`\nIf the shell outputs `nvm`, the installation is successful. Installation of the\ncorrect Node.js version will be done in a later part of the installation\nprocess.\nYarn\nThe fastest way to install Yarn for WSL would be from Debian package repository.\nConfigure the repository with the following commands:\n`shell\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list`\nSince we do not have Node.js installed yet, we will be installing Yarn without\nthe default Node.js with the following command:\n`shell\nsudo apt update && sudo apt install --no-install-recommends yarn`\nTo verify Yarn's installation, run the command `yarn -v`. It should print\n`Yarn requires Node.js 4.0 or higher to be installed.`. This indicates that the\nYarn installation succeeded but Node.js still needs to be installed for it to\nwork fully. We install Node.js later on in the installation process.\nPostgreSQL\nForem requires PostgreSQL version 11 or higher. To Install PostgreSQL on WSL,\nfollow steps under the\nPostgreSQL APT Repository\nsection.\nOnce Installed, perform the following steps in order to set up a username and\npassword for PostgreSQL:\n\nUse `sudo -i service postgresql start` to start the server.\nNext, replace `$YOUR_USERNAME` in the following commands with your Linux\n   Username and execute them:\n\n`shell\n   sudo -u postgres createuser -s $YOUR_USERNAME\n   createdb\n   sudo -u $YOUR_USERNAME psql`\n\nYou should now be in PostgreSQL's shell interface. Execute `\\password` to set\n   a password for your PostgreSQL user.\nBe sure to make a note of your username and password for future use. Exit\n   PostgreSQL by executing the command `\\quit`.\n\nFor additional configuration options, check our\nPostgreSQL setup guide.\nImageMagick\nForem uses ImageMagick to manipulate images on\nupload.\nImageMagick can be installed to WSL via installing its\nimagemagick package with the\nfollowing command:\n`shell\nsudo apt update && sudo apt install imagemagick`\nTo verify its installation, run `identify -version` command.\nRedis\nForem requires Redis version 6.0 or higher.\nWe recommend to follow\nthis guide to run Redis under\nWSL.\nInstalling Forem\n\nFork Forem's repository, eg. https://github.com/forem/forem/fork\nClone your forked repository, eg.\n   `git clone https://github.com/<your-username>/forem.git`\nOpen the cloned forem folder in terminal with `cd forem`. Next, install Ruby\n   with the following commands:\n\n`shell\n   rbenv install $(cat .ruby-version)\n   rbenv global $(cat .ruby-version)\n   ruby -v`\n\nInstall Node.js with the following set of commands:\n\n`shell\n   nvm install $(cat .nvmrc)\n   nvm use $(cat .nvmrc)\n   node -v\n   yarn -v`\n\nInstall bundler with `gem install bundler`\n\nSet up your environment variables/secrets\n\n\nTake a look at `.env_sample`. This file lists all the `ENV` variables we\n     use and provides a fake default for any missing keys.\n\nIf you use a remote computer as dev env, you need to set `APP_DOMAIN`\n     variable to the remote computer's domain name.\nThe backend guide will show you how to get free API keys for\n     additional services that may be required to run certain parts of the app.\n\nFor any key that you wish to enter/replace:\n\nCreate `.env` by copying from the provided template (ie. with bash:\n    `cp .env_sample .env`). This is a personal file that is ignored in git.\n    If you don't need to override any environment variables, continue with\n    the next step as our setup script will automatically create a default\n    `.env` file.\nObtain the development variable and apply the key you wish to\n    enter/replace. ie:\n\n`shell\n export GITHUB_KEY=\"SOME_REAL_SECURE_KEY_HERE\"\n export GITHUB_SECRET=\"ANOTHER_REAL_SECURE_KEY_HERE\"`\n\n\nYou do not need \"real\" keys for basic development. Some features require\n     certain keys, so you may be able to add them as you go. The test environment\n     is isolated from changes to the .env file, if you want to set variables in both\n     test and development, use a file named .env.local, or modify .env.test.local\n     and .env.development.local.\n\n\nAfter ensuring that the PostgreSQL server and the Redis server are running,\n   run `bin/setup`.\n\n\n\nThe `bin/setup` script is responsible for installing a variety of\ndependencies. One can find it inside the `bin` folder by the name of\n`setup`.\n\nIts first task is to install the `bundler` gem. Next, it will make\n  `bundler` install all the gems, including `Rails`, located in `Gemfile`\n  in the root of the repository. It also installs `foreman`.\nIt then installs JavaScript dependencies using the script in `bin/yarn`\n  file. These dependencies are located in `package.json` in the root of the\n  repository.\nNext, it uses various Rake files located inside the `lib` folder for the\n  PostgreSQL database creation and updation.\nFinally it cleans up all the log files and restarts the Puma server.\n\n\nPossible error messages\n\n\nThere is a possibility that you might encounter a statement timeout when\n   seeding the database for the first time. Please increase the value of\n   `statement_timeout` to `9999999` in `config/database.yml`.\n\n\nIf the installation process failed with the following error\n   `ERROR: Error installing pg`. Please consider installing the following\n   package `libpq-dev` :\n\n\n`bash\nsudo apt-get install libpq-dev`\n\nIf the command `bin/setup` fails at installing `cld-0.8.0` with the warnings\n   `'aclocal-1.10' is missing on your system` and\n   `'automake-1.10' is missing on your system`. Please install `automake-1.10`\n   using the commands below.\n\n`shell\ncd\nsudo apt-get update\nsudo apt-get install autoconf\nwget https://ftp.gnu.org/gnu/automake/automake-1.10.tar.gz\ntar xf automake-1.10.tar.gz\ncd automake-1.10/\n./configure --prefix=/usr/local\nmake`\nWSL2 and System test\nIn WSL2, hostname/IP address are no longer shared between Windows and Linux.\nThere are currently two work-arounds.\n\n\nUse dockerized selenium, ie docker-selenium. You will need docker for the\n   following steps\n\n\n`docker run -d --name selenium-hub -p 4444:4444 selenium/hub:3.141.59-20200409`\n\n`CH=$(docker run --rm --name=ch --link selenium-hub:hub -v /dev/shm:/dev/shm selenium/node-chrome:3.141.59-20200409)`\nAdd `export SELENIUM_URL=\"http://localhost:4444/wd/hub\"` to your `.env`\n\nRun your System test!\n\n\nPort forward with `socats` (more info needed).\n\n\n\nIf you encountered any errors that you subsequently resolved, please\nconsider updating this section with your errors and their solutions.\n\nWSL2 and End to End Tests\nIn order to run Cypress Test Runner, a few extra setup steps are required to run GUIs\nnatively inside of WSL2.\nThis guide explains",
    "tag": "forem"
  },
  {
    "title": "Linux",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/getting-started/installation/linux.md",
    "content": "\nsidebar_position: 3\nLinux\nInstalling Forem on Linux\nInstalling prerequisites\nThese prerequisites assume you're working on a Linux-based operating system,\nbut they have only been tested on Ubuntu 18.04.\nRuby\n\nIf you don't already have a Ruby version manager, we highly recommend\n   rbenv. Please follow their\n   installation guide.\nWith the Ruby version manager, install the Ruby version listed on our badge.\n   (ie with rbenv: `rbenv install $(cat .ruby-version)`)\n\nFor very detailed rbenv installation directions on several distros, please visit\nDigitalOcean's guide.\nYarn\nThere are two ways to install Yarn.\n\nYarn's official\n  installation guide\n  (recommended).\nDigitalOcean's detailed tutorial\n  describes how to install\n  Node version Manager. By installing NVM\n  you can select a Node version, use `16` (matches Forem's .nvmrc and package.json files);\n  the guide will also explain how to install NPM. This way you'll have Node, NPM, and then\n  you can run `npm install -g yarn` to install Yarn.\n\nPostgreSQL\nForem requires PostgreSQL version 11 or higher.\n\nRun\n   `sudo apt update && sudo apt install postgresql postgresql-contrib libpq-dev`.\nTo test the installation you can run `sudo -u postgres psql` which should\n   open a PostgreSQL prompt. Exit the prompt by running `\\q` then run\n   `sudo -u postgres createuser -s $YOUR_USERNAME` where `$YOUR_USERNAME` is the\n   username you are currently logged in as.\n\nThere are more than one ways to setup PostgreSQL. For additional configuration,\ncheck out our PostgreSQL setup guide or the official\nPostgreSQL site for further information.\nImageMagick\nForem uses ImageMagick to manipulate images on\nupload.\nPlease refer to ImageMagick's\ninstructions on how to install\nit.\nRedis\nForem requires Redis version 6.0 or higher.\nWe recommend following Digital Ocean's extensive guides\nHow to Install and Secure Redis\nto setup Redis.\nInstalling Forem\n\nFork Forem's repository, e.g. https://github.com/forem/forem/fork\nClone your forked repository, e.g.\n   `git clone https://github.com/<your-username>/forem.git`\nInstall bundler with `gem install bundler`\n\nSet up your environment variables/secrets\n\n\nTake a look at `.env_sample`. This file lists all the `ENV` variables we\n     use and provides a fake default for any missing keys.\n\nIf you use a remote computer as dev env, you need to set `APP_DOMAIN`\n     variable to the remote computer's domain name.\nThe backend guide will show you how to get free API keys for\n     additional services that may be required to run certain parts of the app.\n\nFor any key that you wish to enter/replace:\n\nCreate `.env` by copying from the provided template (i.e. with bash:\n    `cp .env_sample .env`). This is a personal file that is ignored in git.\n    If you don't need to override any environment variables, continue with\n    the next step as our setup script will automatically create a default\n    `.env` file.\nObtain the development variable and apply the key you wish to\n    enter/replace. i.e.:\n\n`shell\n  export CLOUDINARY_API_KEY=\"SOME_REAL_SECURE_KEY_HERE\"\n  export CLOUDINARY_API_SECRET=\"ANOTHER_REAL_SECURE_KEY_HERE\"\n  export CLOUDINARY_CLOUD_NAME=\"A_CLOUDINARY_NAME\"`\n\n\nYou do not need \"real\" keys for basic development. Some features require\n     certain keys, so you may be able to add them as you go. The test environment\n     is isolated from changes to the .env file, if you want to set variables in both\n     test and development, use a file named .env.local, or modify .env.test.local\n     and .env.development.local.\n\n\nRun `bin/setup`\n\n\nPossible error messages\nWhile installing, you might run into an error due to the `pg` gem requiring\nPostgreSQL libraries. If so, please run `sudo apt-get install libpq-dev` before\nretrying.\nWhile installing, you might run into an error due to the `sass-rails` gem\nrequiring `sassc`, which requires the `g++` compiler. If so, please run\n`sudo apt-get install g++` before retrying.\nWhile installing, if you didn't install `node` or `nvm` manually, you might run\ninto an error due to an older system node version being present, which can cause\nissues while `yarn` is installing packages. If so, you'll need to\ninstall nvm and then",
    "tag": "forem"
  },
  {
    "title": "Gitpod",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/getting-started/installation/gitpod.md",
    "content": "\nsidebar_position: 5\nGitpod\nIf you prefer working on a cloud IDE, you can spin up your own instance of Forem\nin the cloud, using Gitpod.\n\nFork the Forem repository. Navigate to https://github.com/forem/forem and click on the Fork button.\n\n\n\nCopy the URL of your forked repository, e.g. https://github.com/forked-user/forem\nIn the browser address bar enter, e.g. https://gitpod.io/#https://github.com/forked-user/forem, where the URL after `https://gitpod.io/#` is the forked repository address. Note: If it's your first time using Gitpod, you will be redirected to their sign in/sign up flow.\nGitpod will load your forked version of Forem. If it's the first time doing this, it will take several minutes. All the pieces you need for your cloud environment are installing, including Ruby gems and npm packages.\n\n\n\n\nThe IDE opens\n\n\n\nGitpod prompts to install the recommended extensions. It's not required, but it will provide a better editing experience.\n\n\n\nIt will still take a few minutes to prepare the workspace.\nTwo terminal sessions will be running. The one named `Open Site: gp` with the prompt `Awaiting port 3000...`.\n\n\nThis will remain until the web server is started which is running in the other terminal session named `Forem Server: bash`.\n\n\nThe local Forem development instance loads in the Gitpod browser preview window.\n\n\n\nYou can now code, review, or try out the project.\n\nAdditional information:\n\nThe Forem local development instance ships with one user, the admin account. The email for the user is `admin@forem.local` and the password is `password`.\nMore about Gitpod in this article on dev.to about Gitpod and Forem (previously DEV).\nAlthough other methods of authentication are available, only email will work.\n\n\nTo use other forms of authentication, they need to be configured. Visit the Authentication section to configure social logins.\n- Instead of manually building a Gitpod URL and pasting it in the browser's address bar, consider installing the Gitpod browser extension.\nGitHub CLI\nForem\u2019s Gitpod configuration ships with the GitHub CLI. You can create a pull request right from the command line by running the following command: `gh pr create`. \ud83e\udd2f\n\nThe first time you use the GitHub CLI in Gitpod for any remote commands, like `gh pr create`, you will need to authenticate to GitHub via the GitHub CLI, i.e. `gh auth login`.\n\nIt is recommended to login to GitHub via SSH.\n\nFollow the instructions from the GitHub CLI to finish logging in. The browser login to Github will open in the Gitpod preview browser window and fail to load. Copy the URL from the Gitpod browser preview window and paste it in a browser tab address bar instead to complete the authentication to GitHub.",
    "tag": "forem"
  },
  {
    "title": "PostgreSQL",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/getting-started/installation/postgresql.md",
    "content": "\nsidebar_position: 6\nPostgreSQL\nSetup your application with PostgreSQL\nFollow the instructions in the installation guide below that corresponds to your\noperating system:\n\nmacOS\nPostgres.app: PostgreSQL installation as a Mac\n     app\nHomebrew: if you use Homebrew you can easily install\n     PostgreSQL with `brew install postgresql`\nLinux (Ubuntu)\nUbuntu 18.04\nUbuntu 20.04\nWindows\n\nYou can find all installation options for a variety of operating systems\non the official PostgreSQL download page.\nConfiguration\nBy default, the application is configured to connect to a local database named\n`PracticalDeveloper_development`. If you need to specify a username and a\npassword, you can go about it by using the environment variable `DATABASE_URL`\nwith a connection string.\nThe\nofficial Rails guides\ngo into depth on how Rails merges the existing `database.yml` with the\nconnection string.\nSetup `DATABASE_URL` in .env\n\n\nOpen your `.env`\n\n\nAdd the following:\n\n\n`shell\nexport DATABASE_URL=postgresql://USERNAME:PASSWORD@localhost`\n\nReplace `USERNAME` with your database username, `PASSWORD` with your database\n   password.\n\nYou can find more details on connection strings in\nPostgreSQL's own documentation.\nNOTE: due to how Rails merges `database.yml` and `DATABASE_URL` it's recommended\nnot to add the database name in the connection string. This will default to your\ndevelopment database name also during tests, which will effectively empty the\ndevelopment DB each time tests are run.\nBecause the test environment is loaded separately, if you are running tests and need to provide a postgresql url, set the `DATABASE_TEST_URL` variable in a file named .env.test.local\n```shell\nOptional: If your test database is in a different url, be sure to set this.\nexport DATABASE_URL_TEST=postgresql://USERNAME:PASSWORD@localhost\n```\nConnection Pooling\nWe use PgBouncer to manage connection pooling.\nDatabase pooling creates a shared pool of connections to our database, rather\nthan creating new connection each time. PgBouncer is a wrapper around our\ndatabase connection and ensures that we only have a finite set of \"cached\"\nconnections to the database. This means that our app doesn't need to actually\nconnect to the database, it only needs to connect to the pool of connections.\nThe number of connections to the database (the connection limit) is dependent on\nour\nHeroku Postgres plan.",
    "tag": "forem"
  },
  {
    "title": "Containers",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/getting-started/installation/containers.md",
    "content": "\nsidebar_position: 4\nContainers\nInstalling Forem using Containers\nIf you encounter any errors with our Container setup, please kindly\nreport any issues!\nInstalling prerequisites\nThese prerequisites assume you're working on an operating system supported by\nDocker or Podman.\nChoosing a Container Engine\nA container engine is software that runs and manages containers on a computer.\nOne of the most widely known Container Engines is Docker, but there are many\nother Container Engines available, such as Podman,\nCRI-O, and\nLXD.\nForem supports two Container Engines: Docker and Podman.\nDocker\nForem can be setup with Docker and Docker Compose on macOS or Linux systems.\nDocker is available for many different operating systems. You may use Docker as\nyour Container Engine on both macOS and Linux workstations. As of right now\nDocker is the only Container Engine for macOS and we recommend you follow the\nDocker Desktop on Mac,\ninstall instructions to get Docker and Docker Compose installed.\nDocker also works well on Linux distributions that have not moved to cgroup v2.\nYou can install it by following their\nInstallation per distro to get Docker\nand you can install Docker Compose by following these\ninstructions.\nPodman\nForem can be setup with Podman and Podman Compose on Linux systems.\nPodman is an FOSS project that provides a Container Engine\nthat is daemonless which only runs on Linux systems. It can be run as the root\nuser or as a non-privileged user. It also provides a Docker-compatible command\nline interface. Podman is available on many different Linux distributions and it\ncan be installed by following these\ninstructions.\nPodman Compose is a an early\nproject under development that is implementing docker-compose like experience\nwith Podman. You can install it by following these\ninstructions.\nSetting up Forem\n\nFork Forem's repository, e.g. https://github.com/forem/forem/fork\nClone your forked repository, eg.\n    `git clone https://github.com/<your-username>/forem.git`\n\nSet up your environment variables/secrets\n\n\nCreate `.env` by copying from the provided template`.env_sample` (i.e.\n    with bash: `cp .env_sample .env`).\n\n`.env` is a personal file that is ignored in git.\n`.env` lists all the `ENV` variables we use and provides a fake\n  default for any missing keys.\n\n\n\nFor any key that you wish to enter/replace:\n\nYou do not need \"real\" keys for basic development. Some features\n  require certain keys, so you may be able to add them as you go.\n  The test environment is isolated from changes to the .env file, if\n  you want to set variables in both test and development, use a file\n  named .env.local, or modify .env.test.local and .env.development.local.\nThe backend guide will show you how to get free API keys\n  for additional services that may be required to run certain parts of\n  the app.\nObtain the development variable and apply the key you wish to\n  enter/replace. i.e.:\n\n`shell\nexport CLOUDINARY_API_KEY=\"SOME_REAL_SECURE_KEY_HERE\"\nexport CLOUDINARY_API_SECRET=\"ANOTHER_REAL_SECURE_KEY_HERE\"\nexport CLOUDINARY_CLOUD_NAME=\"A_CLOUDINARY_NAME\"`\n\n\n\n\nRunning Forem with Docker via docker-compose\n\nRun `bin/container-setup`\nThat's it! Navigate to http://localhost:3000\n\nThe script executes the following steps:\n\n`docker-compose build`\n`docker-compose up`\n\nRunning Forem with Podman via podman-compose\n\nRun `bin/container-setup`\nThat's it! Navigate to http://localhost:3000\n\nThe script executes the following steps:\n\n`podman-compose build`\n`podman-compose up`\n\nKnown Problems & Solutions\nDocker on Mac\n\nIn case `rails server` starts with the following message:\n\n`shell\n  Data update scripts need to be run before you can start the application. Please run rails data_updates:run (RuntimeError)`\nrun the following command:\n```shell\n  docker-compose run rails bundle exec rails data_updates:run",
    "tag": "forem"
  },
  {
    "title": "Language",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/design-guide/language.md",
    "content": "\nsidebar_position: 2\nLanguage\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nHuman Language\nForem is built on concepts, and those concepts have names. Here are some language concepts to be aware of and some known \"gotchas\" where there may be multiple terms currently being used.\nThis is an incomplete first take. It is also written down so that it can be changed when needed. No language concept is set in stone. And no concept is exclusively english. As we internationalize we need to evolve our notion of this, and it will remain important that we settle on unified terms so that we limit conceptual sprawl.\nPost\nA main published unit on sites are officially called posts. The gotcha is that they are currently called `Article` in the codebase. This is because the original version of the site had much more the concept of the pure \"article\" but as the site has evolved and the purposes of Forem have evolved, we have diversified the use of a post idea. Just as a \"tweet\" could be used for different things: An announcement, a question, the start of a thread, etc. we also have a broad idea of what a post is \"for\", and all concepts are built off of this.\nComment\nA single comment is the unit of follow up dialog that lives underneath a post. Comments have some associated terminology.\n\nA Discussion is the collection of all comments under a post. Discussion is a word that implies a certain civility.\nA thread is a single line of comments and their reply comments within a full discussion.\nA comment within a thread may be thought of as a \"reply\" contextually, but it is still a comment.\n\nReaction\nThe remotional responses to an article or comment, a click of a button to let the author know how one feels. The phrase \"reaction\" is used in the app, but should mostly be implied. Reactions are purposefully lightweight in nature.\nTag\nA tag is the main unit of organized content on a Forem.\nUser\nA signed up account is generically referred to as a \"user\", but contextually we've called them \"members\" or \"people\", there may be some need for unification here.\nListing",
    "tag": "forem"
  },
  {
    "title": "Theming Guidelines",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/design-guide/theming.md",
    "content": "\nsidebar_position: 3\nTheming Guidelines\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nForem supports different themes, such as Default, Night, Pink.\nYou can switch the theme at http://localhost:3000/settings/ux in the \"Style\nCustomization\" section.\nThese themes are powered by\nCSS custom properties,\nloaded at runtime by JavaScript via `layouts/_user_config.html.erb`.\nAn example of how it works:\n```javascript\ntry {\n  const bodyClass = localStorage.getItem('config_body_class');\nif (bodyClass) {\n    document.body.className = bodyClass;\n\n\n```if (bodyClass.includes('night-theme')) {\n  document.getElementById('body-styles').innerHTML = '<style><%= Rails.application.assets[\"themes/night.css\"].to_s.squish.html_safe %></style>';\n} else if (bodyClass.includes('ten-x-hacker-theme')) {\n  document.getElementById('body-styles').innerHTML = '<style><%= Rails.application.assets[\"themes/hacker.css\"].to_s.squish.html_safe %></style>'\n} else if (bodyClass.includes('pink-theme')) {\n  document.getElementById('body-styles').innerHTML = '<style><%= Rails.application.assets[\"themes/pink.css\"].to_s.squish.html_safe %></style>'\n} else if(bodyClass.includes('minimal-light-theme')) {\n  document.getElementById('body-styles').innerHTML = '<style><%= Rails.application.assets[\"themes/minimal.css\"].to_s.squish.html_safe %></style>'\n}\n...\n```\n\n\n```\nWithin SCSS files located at `app/assets/stylesheets` you can use `var()`\nstatements, which will call these CSS custom properties. If a CSS custom\nproperty is not defined `var()` will fall back on the second parameter provided,\nwhich can be a SCSS variable defined in `app/assets/stylesheets/variables.scss`.\nAn example of how to use `var()`:\n`scss\ndiv {\n  color: var(--theme-color, $black);\n}`\nNote that fallback values aren't used to fix the browser compatibility. If the\nbrowser doesn't support CSS custom Properties, the fallback value won't help. To\nprevent this issue on older browsers, we need to write our styles like this:\n`scss\ndiv {\n  color: $black;\n  color: var(--theme-color, $black);\n}`\nThis can be too much work and browser fallback can be forgotten. For a better\ndeveloper experience, you should use the two mixins defined in\n`app/assets/stylesheets/_mixins.scss` called `themeable` and\n`themeable-important`. They take three arguments. The first argument is the CSS\nproperty like `color` or `background`, the second argument is the CSS custom\nproperty name (without `--`) like `theme-color`, and the third argument is the\nCSS value, i.e., `$black` or `white`.\nMake sure to import the mixin in your SCSS file and use it like this:\n`scss\ndiv {\n  @include themeable(color, theme-color, $black);\n}`\n`themeable-important` is used when a CSS variable requires `!important` as a\npostfix of the CSS property's value where the CSS variable is being used. You\ncan use it the same way you would use `themeable` mixin, but you should avoid\n`!important` if possible.\nOther user config\nIn addition to themes, users can also directly configure their preferred fonts",
    "tag": "forem"
  },
  {
    "title": "Branding Guidelines",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/design-guide/branding.md",
    "content": "\nsidebar_position: 1\nBranding Guidelines\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nForem Theme\nForem's design inspiration is meant to be a throwback. In personality and\ndesign, it is ATARI inspired. Magazines like PAPER are also an inspiration in\nterms of being a\nbold contrast with some more indy.\nWe also think in terms of how people use the Forem brand for their own purposes.\nProfiles are very much public-facing records of what people have put out into\nthe world. `dev.to/{username}` is your developer identity.\nImagine a developer's face with the DEV heading above them. If we existed in the\n80's, we would have been \"DEV MAGAZINE,\" with the exact same branding.\nBranding Rules\n\nJoystick should be used for\n  logos, not for headlines/phrases.\nBlack and white is our default logo, but the logo can be drawn in any color.\nForem/DEV is \"old school cool.\"\nWe use bold shadows (no gradient) for boxes.\nWe have a minimal approach to importing dependencies, so few if any custom\n  fonts on-site for that reason.\nRefer to the `variables.scss`\nfile in our main repo\n  to reference commonly-used colors and fonts.\n\nDesign License Info\n\nWe use the Joystick font by\n  Neale Davidson and Pixel Sagas for the DEV Logo.\n  We have a commercial license.\nWe use EmojiOne icons from JoyPixels. We have a\n",
    "tag": "forem"
  },
  {
    "title": "Configuring Forem",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/creators/configure-forem.md",
    "content": "Configuring Forem\nBasic Site Configuration Guide for Forem\nOverview\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nAs a Forem admin, one of the first steps of managing your site will be to tailor\nyour content, branding and other important details based on your community\ngoals. This is made simple by the configuration page which can be found at\nhttps://your.forem.url/admin/customization/config.\nWe advise that you first complete the minimum set up before sending out your\nForem link to your community.\nComplete your Set Up, Configure your Forem\nOnce your Forem instance is set up for the first time, you will most likely see\nthe following banner:\n\nThis banner indicates that the Forem configuration process hasn't been completed\nyet.\nWhen you click on the link on banner, it will take you to the configuration page\n(i.e. https://your.forem.url/admin/customization/config).\nOn this page you will see that the Get Started section is expanded. It contains\nall the mandatory fields that need to be filled out in order for the site to be\nin a usable state. Once it is filled out and submitted, the banner will then\ndisappear.\nAccess and Permissions\nThe following permissions are required to be able to view and/or edit the config\npage:\n`Role: super_admin`\nWhen providing this role to a user they will be able to access the config page.\nHowever, this page will be a read only view for them. They will see the\nfollowing:\n\n`Role: single_resource_admin`\nWhen providing this role to a user they will be able to access the config page,\nand they will be able to edit the config variables.\n\nThe first admin of your Forem will be given the highest permissions. Thereafter,\nthey can provide the necessary permissions to subsequent users via the\nhttps://your.forem.url/admin/permissions.\nThe Configuration Sections\nCurrently, the configuration page is split into 3 sections. They are as follows:\n\nA Get Started section that contains all required fields. These are the\n  fields that are required to be filled out, in order to get your Forem in a\n  usable state.\nAn All Settings section that contains all the possible variables\n  that you can configure on the site. This section is broken down into sub\n  sections, whereby each subsection will contain a description of what it does,\n  and then list the fields that are available for configuration. Each field will\n  also contain a concise description of what it is used for.\nAn Environment Variables section that provides a read-only view of the\n  environment variables that are available to be set on the server. If your\n  instance is hosted by Forem, please get in touch with customer support to\n  change any of these variables.\n\n\nAll required fields are marked as such. In addition, you will notice that we\nhave set some defaults for certain fields, you may amend them as you see\nrelevant for your Forem.\nUpdating your configurations\nIn order to update any of the variables within the Get Started and All Settings sections, you will set the new value and then navigate to the end\nof the section where you will verify that you would like to make the change by\ntyping the following sentence:\n`My username is <specify your username here> and this action is 100% safe and appropriate.`\nYou will now see your updated values and the changes on your site will be in\neffect.",
    "tag": "forem"
  },
  {
    "title": "Stack",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/technical-overview/stack.md",
    "content": "\nsidebar_position: 1\nStack\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\n\ud83d\udd11 Key App tech/services\nFor the Forem tech stack we use:\n\nPuma as the web server\nPostgreSQL as the primary database and for Full Text Search\nRedis to store cached data\nFastly for edge caching\nCloudinary and/or Imgproxy for image manipulation/serving\nHoneybadger for error monitoring\nSidekiq and Active Job for background workers\nRansack for internal search\nRedcarpet and Rouge to parse Markdown\nCarrierwave, Fog and AWS S3 for image upload/storage\nInstantClick (a modified version) instead of Turbolinks to accelerate navigation\nImageMagick to manipulate images on upload\nHeroku for hosting\nSendgrid for transactional mailing\nMailchimp for marketing/outreach emails\nCounterCulture to keep track of association counts (counter caches)\nRolify for role management\nPundit for authorization to proxy traffic\nPreact for some of the frontend. See the Frontend Guide for more info\nDocusaurus for beautiful and SEO-friendly documentation\nGit for version control\n",
    "tag": "forem"
  },
  {
    "title": "Internationalization (i18n)",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/technical-overview/i18n.md",
    "content": "\nsidebar_position: 7\nInternationalization (i18n)\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nForem's internationalization is currently in its early stages. You are encouraged to follow patterns laid out here, but it is not yet required for every pull request until further development and stabilization of the feature.\nThis development is a matter of translation as well as decoupling of copy from code. As this functionality is new, best practices in this area are still a work in progress.\ni18n features and direction\nAdmins can choose a default locale among those currently supported. This feature is not complete and marked as experimental. This functionality will translate the display of the site (buttons, labels, etc.) and not user-generated content. It does not use the browser's locale as a hint. It only allows admins to set a default locale.\nThe site is also translatable via the dedicated path of `/locale/:locale`. So if a user types in `/locale/fr` they will get the french translation. This is also experimental and not technically \"in use\", but it does lay the framework for future development where we detect the language of the user-generated content on the page and serve the locale URL as the canonical page (not the one visible to the end user, they will still see the locale determined by the admin).\nFuture development should include members overriding the default locale as a setting so that any Forem user can use any Forem in their native language. This could involve additional caching complexity and is not yet in the works.\nWe are currently not localizing the admin backend at all, as that area has more nuanced communication and is generally less mature than the member-facing site.\nContributing\nThe most helpful contributions are anything that gets the project a step closer to full localization. A PR that tries to do it all at once will not be as helpful. Any opportunity to remove copy entirely that is not necessary is also a step in the right direction and can be considered at pull-request time as an option, though that has a higher chance of being rejected due to the change to product functionality vs an objective improvement to localization.\nWe use standard Rails localization practices. We have files related to each locale such as `config/locales/fr.yml`.\nThe yml file will look like this...\n```yml\nfr:\n  core:\n    add_comment: Ajouter un commentaire\n    comment: Commentaire\n    copy_link: Copier le lien\n    create_account: Cr\u00e9er un profil\n```\nAnd in HTML, these can be used as helpers, such as...\n```html\n<%= t(\"core.add_comment\") %>\n```\n`t` in this view helper context is short for `I18n.translate`. Check out the linked Rails guide for full information about how to use all standard translation and localization functionality.\ni18n.js\nWe use the i18n.js gem to pass values to JavaScript. Our frontend code is currently divided into old asset pipeline code in `app/assets/javascripts` and modern Rails JS practices at `app/javascript`. In the asset pipeline you should directly use `I18n.t` and in `app/javascript`, there is a wrapper at `app/javascript/utilities/locale.js` you can include as you go. This is all subject to change in the name of code quality improvements.\nThis should generally be abstracted away for you if you follow above patterns, but for your information, we store translations in the view like this:\n```html\n\n\n```\nAnd originally access them in JavaScript like this:\n`js\nconst translationsDiv = document.getElementById('i18n-translations')`\nThis approach helps ensure we don't need to ship all translations in JS files, but is somewhat naive and could be improved over time.\ni18n-tasks",
    "tag": "forem"
  },
  {
    "title": "Architecture",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/technical-overview/architecture.md",
    "content": "\nsidebar_position: 2\nArchitecture\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nA few high-level things to know\nWe are a Ruby on Rails app\nRuby on Rails is a web framework heavy on conventions over configuration. All else equal, we should try to follow Rails convention. We are currently on version 7.x.x.\nWe cache many content pages on the edge\nTo decrease loading time, we use edge-caching extensively. Taking advantage of edge-caching means that we do not go all the way to the server to render every page. However this means that, on cached pages, we don't have access to helper methods like `current_user`. A page is edge-cached through our CDN (Fastly) if the controller contains this line for the relevant action:\n\n\n```before_action :set_cache_control_headers\n```\n\n\nWe also use server-side caching: Rails caching. If you see `Rails.cache` or `<%= cache ... %>`, this is code affected in production by caching.\nContent precision\nIn some situations we may want more precise content than in others. Often when we do not need a precise number, it offers an opportunity to either estimate the content or bust the cache less frequently.\nExamples\n\nWe use the `estimated_count` for a more efficient query of registered users on the home page. We have deemed that this is probably close enough.\nOn posts and comment trees without recent comments, we do not asynchronously fetch the absolute latest individual reaction counts for logged-out users because this number is likely to be correct without the async call, and if it is off-by-one, we can make the choice that it is not important that it be more precise than this.\n\nWe Mostly defer scripts for usage performance improvements\nTo avoid blocking the initial render, we use the `defer` attribute to accelerate page renders. This practice results in a faster page load, and doesn't leave users waiting on heavy assets. However, this practice limits our ability to manipulate layout with JavaScript. As a rule, you should avoid relying on JavaScript for layout when working on Forem.\nWe have also experimented with different techniques involving inline CSS\nWe attempt to reduce our bundle size\nWe use PreactJS, a lightweight alternative to ReactJS, and we try to reduce our bundle size with dynamic imports.\nWorst technical debt\nThe most widespread elements of technical debt in this application reside on the frontend. We use both the \"old\" approach (files in the `/assets` folder) and \"new\" approach (files in the `app/javascript` folder) for loading JavaScript into our Rails app.\nWe also have overgrown and inconsistent CSS. This is an area we'd love to see contributions from the community.\nWe also have inconsistencies and issues with how we bust caching on the edge. Ideally, we could practice resource-based purging as described in the Fastly Rails docs, but we bust specific URLs via `EdgeCache::Bust#call`.\nThe algorithm behind the feed\nThe home feed is based on a combination of recent collective posts that are cached and delivered the same to everyone in the HTML, and additional articles fetched from a PostgreSQL Full Text Search index after page load. To determine which posts a user sees, they are ranked based on the user's followed tags, followed users, and relative weights for each tag. Additional fetched articles also follow this general pattern.\nCurrently, the top post on the home feed, which must have a cover image, is shared among all users.\nInter-page navigation\nForem uses a variation of \"instant click\", via InstantClick, which swaps out page content instead of making full-page requests. This approach is similar to the one used by the Rails gem `Turbolinks`, but our approach is more lightweight. The library is modified to work specifically with this Rails app and does not swap out reused elements like the navigation bar or the footer. The code for this functionality is viewable in `app/assets/javascripts/base.js.erb`.\nThere are a few caveats regarding this approach. Using our approach means a non-trivial amount of functionality is reloaded on page change. A similar amount of reloading occurs when using `window.InstantClick.on('change', someFunction)`. This results in code that looks something like this:\n\n\n    1\n    2\n\n\nIn some circumstances, this practice means the developer should pay special attention to the declaration of variables and functions. JavaScript may behave differently than expected.\nAbstracting and removing these caveats is a long term goal, and contribution on that front is welcome!\nWe use the parameter `i=i` (i for internal) to indicate to the backend that we only want the \"internal\" version of the page (the one without the top nav and footer, etc.)\nURLS and constraints\nBecause we use the top directory for user-generated pages, we need to be aware of some constraints. `some-forem.com/sophia` could be a user, a page, an organization, or a previously banished user. We allow users to retain two redirects and should use `:moved_permanently` when a user changes their username.\nBecause we may silently insert `?i=i` on the frontend to indicate internal nav, we need to maintain that parameter if we are redirecting. We use the method `redirect_permanently_to(location)` to encompass all of this behavior.\nGeneral app concepts\nArticles (or posts)\nArticles are the primary form of user generated content in the application. An Article has many comments and taggings through the acts-as-taggable gem, belongs to a single user (and possibly an organization), and is the core unit of content.\nCollections (or series)\nAlthough the source code refers to them as \"collections\" groups of articles are referred to, throughout the user interface, as \"series\". They represent a collection of articles relating to the same topic, indeed, a series.\nComments\nComments belong to articles or other content (they are generally polymorphic). They belong first and foremost to the user in our design, which is reflected by the URL (`/username/tag-slug`), but they are present in communal areas of the application. They are threaded, but they flatten out gradually to avoid infinitely branching threads.\nUsers\nThe user is the authorization/identity component of logging into the app. It is also the public profile/authorship/etc. belonging to the people who use the app.\nWhile \"user\" is a perfectly good technical name, it is a fairly cold way to refer to humans, so we should prefer labeling people as members, or by their name/username.\nTags\nTags are used to organize user generated content. Each tag has a set of rules which are used for moderation. Each tag is a de facto community complete with community moderators.\nSome tags behave as \"flare,\" highlighting certain articles when viewed from the index page. Tags that act as \"flare\" are defined in the `FlareTag` object. In cases of multiple flare tags, the tag displayed is determined by its hierarchy.\nListings\nListings are classified ads. They are similar to posts in some ways, but with more limitations. They are designed to be categorized into market areas. They also make use of tags.\nCredits\nCredits are the currency of the platform which users can use to buy listings. The functionality of credits may be expanded in the future.\nOrganizations\nUsers can belong to organizations, which have their own profile pages where posts can be published etc. This can be any group endeavor such as a company, an open source project, or any standalone publication on Forem.\nReactions\nHearts (also referred to as likes) and bookmarks. Reactions are the medium for displaying appreciation for content. Bookmarks have the unique functionality of saving an article in the user's reading list.\nFollows\nHow a user keeps track of the tags, users, or articles they care about. Follows impact a user's home feed and notifications.\nFollows can have a \"score\" which indicates how much a user wants to see the element in their feed. Currently we only calculate these for tag follows, but it could be expanded to users. The user can set an \"explicit\" score, and the system also calculates an \"implicit\" score based on their activity.\nRoles\nThrough the \"rolify\" gem, users can have roles like \"admin\", etc. A role can also be associated with a model or a model instance. Such as \"moderator of javascript tag\"\nNotes\nNotes are an internal tool admins can use to leave information about things. Example: \"This user was warned for spammy content\".\nPages\n`Pages` in the admin dashboard represent static pages to be served on the site. Admins are in full control to create and customize them to their needs using markdown or custom HTML. Pages are configured with a `slug` and they will be served on either the `/page/slug` or `/slug` path.\nIn order to ease development of custom HTML Pages in local environments the rake task `pages:sync` is available. It will listen to changes made to a local HTML file and sync its contents to an existing Page in the database with the matching `slug`.\nExample: `rake pages:sync[slug,/absolute/path/to/file.html]`\n",
    "tag": "forem"
  },
  {
    "title": "Caching",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/technical-overview/caching.md",
    "content": "\nsidebar_position: 8\nCaching\nThis has been adapted from The Three Caches of Forem // Take on Rules\nIn the Forem code base, we make extensive use of various caching strategies. And as with any cache, we always run the risk of not invalidating the right caches.\nYou can read more about our response caching strategies here:\nhttps://dev.to/devteam/caching-at-dev-11el\nWe also dive more into Rails Caching which touches on (Fragment Caching)and Database Caching below.\nAt a high level, we leverage caches to improve performance. Let\u2019s start of by introducing by detailing what a Response Document and Fragment is.\nThe response document is a single file sent from the server in response to a request.\nRemember that what you see rendered in your browser is almost always from the combination of many response documents sent from the server: HTML documents, Javascript files, CSS files, and XHR that modify the DOM.\nTo build a single response document, the server often assembles multiple fragments to form that singular document. In Ruby on Rails this is done with like layouts, views, and partial views.\nRails Caching\nWe use the Rails cache to store all kinds of things, mostly fragments that we use to build the response document.\nEach entry we put into the Rails cache has a unique key. When we use the cache, we check if the key exists. If so we use what\u2019s in the cache for that key. Otherwise, we run the cached logic and put it in the cache with that key.\nWhat does that key look like? It depends. But in a general sense it often includes a timestamp. Let\u2019s create a quick and arbitrary example.\nLet\u2019s say it is very expensive to generate the HTML for an article\u2019s card. We choose to cache the article\u2019s card\u2019s HTML. The key for that might like like the following: `article-<article_id>-<article_last_updated_at>`\nThen when we check the cache, we use the article\u2019s ID and when it was last updated. In this way, older updates to the article might still be in the cache, but we\u2019re not going to fetch those.\nThere are more complicated strategies we use. As part of the site\u2019s layout we cache information; the community name, tracking analytics, last deploy date, last commit id, and more.\nWhen an admin makes a site wide change, that prompts to use a new key; so long as we remember to update the attributes in the key. This pull request resolved one of the issues (in a not yet available in production) when we didn\u2019t update the attribute keys.\nYou can learn more about Caching with Rails over at the Rails Guides.\nDatabase Caching\nThe last is database caching. We cache an article\u2019s tag list, user, and organization information (if applicable). These are cached as fields on the articles table. The purpose of these cached attributes is performance. Where possible, we prefer to minimize joins for queries that we frequently perform (e.g. get me a list of articles being a very common query for a Forem).\nOn 2022-03-08 we reported an issue where changing an organization\u2019s image should invalidate the associated articles cached organization (Issue #17041). The solution is whenever we update an organization we should revisit each article associated with that organization.\nThis pull request looked to fix the reported error and provides points in the code where we're caching at the database layer.\nWay-finding in the Era of Caching",
    "tag": "forem"
  },
  {
    "title": "Feature flags",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/technical-overview/feature-flags.md",
    "content": "\nsidebar_position: 6\nFeature flags\nWe sometimes employ feature flags to develop features that aren't fully formed\nat the moment of deployment. They can also be employed to roll out features in\nproduction incrementally.\nFeature flags are meant to be temporary and part of a rollout plan resulting in\ntheir removal.\nSince we do not expose feature flags to Forem Creators, we have built in the concept of an extension which ties in closely with Feature Flags. You can view Extensions at `/admin/advanced/extensions`.\nCreating a new feature flag\nTo create a new feature flag, we use\ndata update scripts so that they can be made\navailable over the entire Forem fleet, for example:\n`shell\nbundle exec rails g data_update AddAwesomeAlgorithmFeatureFlag`\nThis will generate a script and its spec. Once done, you can add the new feature\nflag like this:\n`ruby\nmodule DataUpdateScripts\n  class AddAwesomeAlgorithmFeatureFlag\n    def run\n      FeatureFlag.add(:awesome_algorithm)\n    end\n  end\nend`\nand then start using it right away.\nGuarding a feature behind a flag\nOnce the feature flag is added, you can start using it to hide the feature\nbehind a boolean flag:\n`ruby\nif FeatureFlag.enabled?(:awesome_algorithm)\n  # call the new code\nelse\n  # call the previous code\nend`\nor, for example in a view:\n`erb\n<% if FeatureFlag.enabled?(:blue_button) %>\n  <%= render \"blue_button\" %>\n<% else %>\n  <%= render \"good_old_button\" %>\n<% end %>`\nEnabling/disabling a feature flag globally\nAs mentioned, feature flags can be used to test a work in progress feature or to\ntest a new approach directly in production.\nTo enable such a feature:\n\nLog in to the Forem\nGo to `/admin/feature_flags` (it requires the\n  tech_admin role)\nClick on the flag you want to enable and press \"Fully Enable\".\n\n\nRemoving a feature flag\nOnce the feature has been validated and finalized or discarded, please remember\nto remove its flag with a final data update script, for example:\n`shell\nbundle exec rails g data_update RemoveAwesomeAlgorithmFeatureFlag`\n`ruby\nmodule DataUpdateScripts\n  class AwesomeAlgorithmFeatureFlag\n    def run\n      FeatureFlag.remove(:awesome_algorithm)\n    end\n  end\nend`",
    "tag": "forem"
  },
  {
    "title": "A/B testing",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/technical-overview/ab-testing.md",
    "content": "\nsidebar_position: 5\nA/B testing\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nWe use the Field Test gem for conducting\nsimple A/B tests.\nIf you want to propose an A/B test of a feature, you may make a pull request\nwhich defines the hypotheses and what admins should look for to declare a\nwinner. As A/B tests are going to have results that may differ from Forem to\nForem, the process is relatively immature. In the future we may have more\nstudies that can return anonymous ecosystem-wide results.\nA/B tests are inherently the most useful in large Forems, where qualitative\nfeedback may be more useful on small Forems. As such, DEV is\nour largest Forem and therefore can provide us with the most feedback for our\nexisting A/B tests. However, we must keep in mind that DEV results may not apply\nwell to future large Forems. We should seek to re-run useful experiments within\nthe ecosystem after time has passed.\nCreating a new A/B test\nFollow the guidelines of the field test gem and add the test info to\nconfig/field_test.yml.\nThen where you want to trigger the variant, you'll add some code like this:\n`ruby\n  test_variant = field_test(:follow_implicit_points, participant: user)\n  case test_variant\n  when \"no_implicit_score\"\n    0\n  when \"half_weight_after_log\"\n    Math.log(occurrences + bonus + 1) * 0.5\n  when \"double_weight_after_log\"\n    Math.log(occurrences + bonus + 1) * 2.0\n  when \"double_bonus_before_log\"\n    Math.log(occurrences + (bonus * 2) + 1)\n  when \"without_weighting_bonus\"\n    Math.log(occurrences + 1)\n  else # base - Our current \"default\" implementation\n    Math.log(occurrences + bonus + 1) # + 1 in all cases is to avoid log(0) => -infinity\n  end`\nWhich would find or create the test variant for that user in particular. If this\ncode is not called in the controller or view, you'll need to first include the\ngem helpers at the top of the file...\n`include FieldTest::Helpers`\nTo record a successful field test outcome, you should call something like this\n`ruby\n    Users::RecordFieldTestEventWorker\n      .perform_async(user_id, :follow_implicit_points, \"user_creates_reaction\")`\nAnd modify that class as needed to determine whether to record the successful",
    "tag": "forem"
  },
  {
    "title": "Compatibility",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/technical-overview/compatibility.md",
    "content": "\nsidebar_position: 4\nCompatibility\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\nTo go along with effective administration and putting user security and\nwell-being first, for a Forem to be most useful, it maximizes its technical\ncompatibility.\nCompatibility means:\n\nStaying updated. We need to maintain overall compatibility by keeping the\n  ecosystem close to the latest version as proactively as we can.\nMaintaining all programmatic interfaces, whether they be the\n  API or Forem meta tags which can be consumed for\n  Forem validation.\nMaintaining human interfaces which allow users to find where they need to go\n  and conduct all necessary customizations.\nMaintaining great performance such that the web-based Forem ecosystem can\n  provide a great experience in all network conditions and in comparison to more\n  closed ecosystems.\n\nMeta tags\nThe canonical meta tags which are expected to be present as a component of\nvalidation are as follows:\n`html\n<meta property=\"forem:name\" content=\"My great friends\" />\n<meta property=\"forem:logo\" content=\"https://mygreatfriends.com/logo.png\" />\n<meta property=\"forem:domain\" content=\"mygreatfriends.com\" />`\nThis list may evolve over time. If you want to propose a new meta tag which\ncould improve the efficacy of an ecosystem app, please feel free to open an",
    "tag": "forem"
  },
  {
    "title": "Feed",
    "source": "https://github.com/forem/forem-docs/tree/main/docs/technical-overview/feed.md",
    "content": "\nsidebar_position: 3\nFeed\n:::important\nWe\u2019re currently making rapid changes to the product so our docs may be out of date. If you need help, please email yo@forem.com.\n:::\n\"The feed\"\nThe Forem feed is perhaps the core functionality of the service. It's an adaptation of a concept popularized by other social platforms in the past two decades, and it is something we need to develop with care in a way that empowers individual communities and users.\nThe core nature of \"the feed\" is that it needs to evolve and be flexible. We will learn new ideas over time. We need to take into account metrics, but also question the relevance and \"goodness\" of certain metrics. We want folks finding fulfilling and enriching content, not necessarily addictive content.\nHowever, we are in the fairly naive early days of the feed, so primarily it is a matter of flexibility and experimentation.\nThere are three conceptual \"feeds\":\n\nRelevant :: articles that are most relevant to the user's stated preferences\nLatest :: the most recent list of articles\nTop :: a mix of high quality and much discussed articles within a given time frame\n\nFeed style\nEach Forem can have a feed style set by the admin of that community (originally implemented in a PR from mid-2020).\nCurrently, we have three styles:\n\n`basic` :: hide the cover image from the feed view\n`compact` :: a more minimal feed style\n`rich` :: always displays the cover image in the feed\n\nOver time, we'll continue to improve and expand our feed style options.\nSee the Settings::UserExperience code for the current state styles.\nFeed strategy\nEach Forem can have a feed strategy set by the admin of that community (originally implemented in a late-2020 PR). Currently, we have two strategies: `basic` and `large_forem_experimental`. The \"experimental\" component dictates that there is some split testing, but generally these are just cues for an underlying algorithm which can change liberally.\nThe feed endpoint is driven by the `feeds_controller` and the content is found in objects such as `Articles::Feeds::Basic` and `Articles::Feeds::VariantQuery`. We should lean toward adaptability and versatility in the long run here, even if we are just at the beginning of this transparent journey.",
    "tag": "forem"
  }
]