[
  {
    "title": "d3-shape",
    "source": "https://github.com/d3/d3-shape/tree/main/",
    "content": "d3-shape\nVisualizations typically consist of discrete graphical marks, such as symbols, arcs, lines and areas. While the rectangles of a bar chart may be easy enough to generate directly using SVG or Canvas, other shapes are complex, such as rounded annular sectors and centripetal Catmull\u2013Rom splines. This module provides a variety of shape generators for your convenience.\nAs with other aspects of D3, these shapes are driven by data: each shape generator exposes accessors that control how the input data are mapped to a visual representation. For example, you might define a line generator for a time series by scaling fields of your data to fit the chart:\n`js\nconst line = d3.line()\n    .x(d => x(d.date))\n    .y(d => y(d.value));`\nThis line generator can then be used to compute the `d` attribute of an SVG path element:\n`js\npath.datum(data).attr(\"d\", line);`\nOr you can use it to render to a Canvas 2D context:\n`js\nline.context(context)(data);`\nFor more, read Introducing d3-shape.\nInstalling\nIf you use npm, `npm install d3-shape`. You can also download the latest release on GitHub. For vanilla HTML in modern browsers, import d3-shape from jsDelivr:\n```html\n\n```\nFor legacy environments, you can load d3-shape\u2019s UMD bundle; a `d3` global is exported:\n```html\n\n\n\n```\nAPI Reference\n\nArcs\nPies\nLines\nAreas\nCurves\nCustom Curves\nLinks\nSymbols\nCustom Symbol Types\nStacks\n\nNote: all the methods that accept arrays also accept iterables and convert them to arrays internally.\nArcs\n\nThe arc generator produces a circular or annular sector, as in a pie or donut chart. If the absolute difference between the start and end angles (the angular span) is greater than \u03c4, the arc generator will produce a complete circle or annulus. If it is less than \u03c4, the arc\u2019s angular length will be equal to the absolute difference between the two angles (going clockwise if the signed difference is positive and anticlockwise if it is negative). If the absolute difference is less than \u03c4, the arc may have rounded corners and angular padding. Arcs are always centered at \u27e80,0\u27e9; use a transform (see: SVG, Canvas) to move the arc to a different position.\nSee also the pie generator, which computes the necessary angles to represent an array of data as a pie or donut chart; these angles can then be passed to an arc generator.\n# d3.arc() \u00b7 Source\nConstructs a new arc generator with the default settings.\n# arc(arguments\u2026) \u00b7 Source\nGenerates an arc for the given arguments. The arguments are arbitrary; they are simply propagated to the arc generator\u2019s accessor functions along with the `this` object. For example, with the default settings, an object with radii and angles is expected:\n```js\nconst arc = d3.arc();\narc({\n  innerRadius: 0,\n  outerRadius: 100,\n  startAngle: 0,\n  endAngle: Math.PI / 2\n}); // \"M0,-100A100,100,0,0,1,100,0L0,0Z\"\n```\nIf the radii and angles are instead defined as constants, you can generate an arc without any arguments:\n```js\nconst arc = d3.arc()\n    .innerRadius(0)\n    .outerRadius(100)\n    .startAngle(0)\n    .endAngle(Math.PI / 2);\narc(); // \"M0,-100A100,100,0,0,1,100,0L0,0Z\"\n```\nIf the arc generator has a context, then the arc is rendered to this context as a sequence of path method calls and this function returns void. Otherwise, a path data string is returned.\n# arc.centroid(arguments\u2026) \u00b7 Source\nComputes the midpoint [x, y] of the center line of the arc that would be generated by the given arguments. The arguments are arbitrary; they are simply propagated to the arc generator\u2019s accessor functions along with the `this` object. To be consistent with the generated arc, the accessors must be deterministic, i.e., return the same value given the same arguments. The midpoint is defined as (startAngle + endAngle) / 2 and (innerRadius + outerRadius) / 2. For example:\n\nNote that this is not the geometric center of the arc, which may be outside the arc; this method is merely a convenience for positioning labels.\n# arc.innerRadius([radius]) \u00b7 Source\nIf radius is specified, sets the inner radius to the specified function or number and returns this arc generator. If radius is not specified, returns the current inner radius accessor, which defaults to:\n`js\nfunction innerRadius(d) {\n  return d.innerRadius;\n}`\nSpecifying the inner radius as a function is useful for constructing a stacked polar bar chart, often in conjunction with a sqrt scale. More commonly, a constant inner radius is used for a donut or pie chart. If the outer radius is smaller than the inner radius, the inner and outer radii are swapped. A negative value is treated as zero.\n# arc.outerRadius([radius]) \u00b7 Source\nIf radius is specified, sets the outer radius to the specified function or number and returns this arc generator. If radius is not specified, returns the current outer radius accessor, which defaults to:\n`js\nfunction outerRadius(d) {\n  return d.outerRadius;\n}`\nSpecifying the outer radius as a function is useful for constructing a coxcomb or polar bar chart, often in conjunction with a sqrt scale. More commonly, a constant outer radius is used for a pie or donut chart. If the outer radius is smaller than the inner radius, the inner and outer radii are swapped. A negative value is treated as zero.\n# arc.cornerRadius([radius]) \u00b7 Source\nIf radius is specified, sets the corner radius to the specified function or number and returns this arc generator. If radius is not specified, returns the current corner radius accessor, which defaults to:\n`js\nfunction cornerRadius() {\n  return 0;\n}`\nIf the corner radius is greater than zero, the corners of the arc are rounded using circles of the given radius. For a circular sector, the two outer corners are rounded; for an annular sector, all four corners are rounded. The corner circles are shown in this diagram:\n\nThe corner radius may not be larger than (outerRadius - innerRadius) / 2. In addition, for arcs whose angular span is less than \u03c0, the corner radius may be reduced as two adjacent rounded corners intersect. This is occurs more often with the inner corners. See the arc corners animation for illustration.\n# arc.startAngle([angle]) \u00b7 Source\nIf angle is specified, sets the start angle to the specified function or number and returns this arc generator. If angle is not specified, returns the current start angle accessor, which defaults to:\n`js\nfunction startAngle(d) {\n  return d.startAngle;\n}`\nThe angle is specified in radians, with 0 at -y (12 o\u2019clock) and positive angles proceeding clockwise. If |endAngle - startAngle| \u2265 \u03c4, a complete circle or annulus is generated rather than a sector.\n# arc.endAngle([angle]) \u00b7 Source\nIf angle is specified, sets the end angle to the specified function or number and returns this arc generator. If angle is not specified, returns the current end angle accessor, which defaults to:\n`js\nfunction endAngle(d) {\n  return d.endAngle;\n}`\nThe angle is specified in radians, with 0 at -y (12 o\u2019clock) and positive angles proceeding clockwise. If |endAngle - startAngle| \u2265 \u03c4, a complete circle or annulus is generated rather than a sector.\n# arc.padAngle([angle]) \u00b7 Source\nIf angle is specified, sets the pad angle to the specified function or number and returns this arc generator. If angle is not specified, returns the current pad angle accessor, which defaults to:\n`js\nfunction padAngle() {\n  return d && d.padAngle;\n}`\nThe pad angle is converted to a fixed linear distance separating adjacent arcs, defined as padRadius * padAngle. This distance is subtracted equally from the start and end of the arc. If the arc forms a complete circle or annulus, as when |endAngle - startAngle| \u2265 \u03c4, the pad angle is ignored.\nIf the inner radius or angular span is small relative to the pad angle, it may not be possible to maintain parallel edges between adjacent arcs. In this case, the inner edge of the arc may collapse to a point, similar to a circular sector. For this reason, padding is typically only applied to annular sectors (i.e., when innerRadius is positive), as shown in this diagram:\n\nThe recommended minimum inner radius when using padding is outerRadius * padAngle / sin(\u03b8), where \u03b8 is the angular span of the smallest arc before padding. For example, if the outer radius is 200 pixels and the pad angle is 0.02 radians, a reasonable \u03b8 is 0.04 radians, and a reasonable inner radius is 100 pixels. See the arc padding animation for illustration.\nOften, the pad angle is not set directly on the arc generator, but is instead computed by the pie generator so as to ensure that the area of padded arcs is proportional to their value; see pie.padAngle. See the pie padding animation for illustration. If you apply a constant pad angle to the arc generator directly, it tends to subtract disproportionately from smaller arcs, introducing distortion.\n# arc.padRadius([radius]) \u00b7 Source\nIf radius is specified, sets the pad radius to the specified function or number and returns this arc generator. If radius is not specified, returns the current pad radius accessor, which defaults to null, indicating that the pad radius should be automatically computed as sqrt(innerRadius * innerRadius + outerRadius * outerRadius). The pad radius determines the fixed linear distance separating adjacent arcs, defined as padRadius * padAngle.\n# arc.context([context]) \u00b7 Source\nIf context is specified, sets the context and returns this arc generator. If context is not specified, returns the current context, which defaults to null. If the context is not null, then the generated arc is rendered to this context as a sequence of path method calls. Otherwise, a path data string representing the generated arc is returned.\n# arc.digits([digits]) \u00b7 Source\nIf digits is specified, sets the maximum number of digits after the decimal separator and returns this arc generator. If digits is not specified, returns the current maximum fraction digits, which defaults to 3. This option only applies when the associated context is null, as when this arc generator is used to produce path data.\nPies\nThe pie generator does not produce a shape directly, but instead computes the necessary angles to represent a tabular dataset as a pie or donut chart; these angles can then be passed to an arc generator.\n# d3.pie() \u00b7 Source\nConstructs a new pie generator with the default settings.\n# pie(data[, arguments\u2026]) \u00b7 Source\nGenerates a pie for the given array of data, returning an array of objects representing each datum\u2019s arc angles. Any additional arguments are arbitrary; they are simply propagated to the pie generator\u2019s accessor functions along with the `this` object. The length of the returned array is the same as data, and each element i in the returned array corresponds to the element i in the input data. Each object in the returned array has the following properties:\n\n`data` - the input datum; the corresponding element in the input data array.\n`value` - the numeric value of the arc.\n`index` - the zero-based sorted index of the arc.\n`startAngle` - the start angle of the arc.\n`endAngle` - the end angle of the arc.\n`padAngle` - the pad angle of the arc.\n\nThis representation is designed to work with the arc generator\u2019s default startAngle, endAngle and padAngle accessors. The angular units are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator, you should specify angles in radians, with 0 at -y (12 o\u2019clock) and positive angles proceeding clockwise.\nGiven a small dataset of numbers, here is how to compute the arc angles to render this data as a pie chart:\n`js\nconst data = [1, 1, 2, 3, 5, 8, 13, 21];\nconst arcs = d3.pie()(data);`\nThe first pair of parens, `pie()`, constructs a default pie generator. The second, `pie()(data)`, invokes this generator on the dataset, returning an array of objects:\n`json\n[\n  {\"data\":  1, \"value\":  1, \"index\": 6, \"startAngle\": 6.050474740247008, \"endAngle\": 6.166830023713296, \"padAngle\": 0},\n  {\"data\":  1, \"value\":  1, \"index\": 7, \"startAngle\": 6.166830023713296, \"endAngle\": 6.283185307179584, \"padAngle\": 0},\n  {\"data\":  2, \"value\":  2, \"index\": 5, \"startAngle\": 5.817764173314431, \"endAngle\": 6.050474740247008, \"padAngle\": 0},\n  {\"data\":  3, \"value\":  3, \"index\": 4, \"startAngle\": 5.468698322915565, \"endAngle\": 5.817764173314431, \"padAngle\": 0},\n  {\"data\":  5, \"value\":  5, \"index\": 3, \"startAngle\": 4.886921905584122, \"endAngle\": 5.468698322915565, \"padAngle\": 0},\n  {\"data\":  8, \"value\":  8, \"index\": 2, \"startAngle\": 3.956079637853813, \"endAngle\": 4.886921905584122, \"padAngle\": 0},\n  {\"data\": 13, \"value\": 13, \"index\": 1, \"startAngle\": 2.443460952792061, \"endAngle\": 3.956079637853813, \"padAngle\": 0},\n  {\"data\": 21, \"value\": 21, \"index\": 0, \"startAngle\": 0.000000000000000, \"endAngle\": 2.443460952792061, \"padAngle\": 0}\n]`\nNote that the returned array is in the same order as the data, even though this pie chart is sorted by descending value, starting with the arc for the last datum (value 21) at 12 o\u2019clock.\n# pie.value([value]) \u00b7 Source\nIf value is specified, sets the value accessor to the specified function or number and returns this pie generator. If value is not specified, returns the current value accessor, which defaults to:\n`js\nfunction value(d) {\n  return d;\n}`\nWhen a pie is generated, the value accessor will be invoked for each element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. The default value accessor assumes that the input data are numbers, or that they are coercible to numbers using valueOf. If your data are not simply numbers, then you should specify an accessor that returns the corresponding numeric value for a given datum. For example:\n```js\nconst data = [\n  {\"number\":  4, \"name\": \"Locke\"},\n  {\"number\":  8, \"name\": \"Reyes\"},\n  {\"number\": 15, \"name\": \"Ford\"},\n  {\"number\": 16, \"name\": \"Jarrah\"},\n  {\"number\": 23, \"name\": \"Shephard\"},\n  {\"number\": 42, \"name\": \"Kwon\"}\n];\nconst arcs = d3.pie()\n    .value(d => d.number)\n    (data);\n```\nThis is similar to mapping your data to values before invoking the pie generator:\n`js\nconst arcs = d3.pie()(data.map(d => d.number));`\nThe benefit of an accessor is that the input data remains associated with the returned objects, thereby making it easier to access other fields of the data, for example to set the color or to add text labels.\n# pie.sort([compare]) \u00b7 Source\nIf compare is specified, sets the data comparator to the specified function and returns this pie generator. If compare is not specified, returns the current data comparator, which defaults to null. If both the data comparator and the value comparator are null, then arcs are positioned in the original input order. Otherwise, the data is sorted according to the data comparator, and the resulting order is used. Setting the data comparator implicitly sets the value comparator to null.\nThe compare function takes two arguments a and b, each elements from the input data array. If the arc for a should be before the arc for b, then the comparator must return a number less than zero; if the arc for a should be after the arc for b, then the comparator must return a number greater than zero; returning zero means that the relative order of a and b is unspecified. For example, to sort arcs by their associated name:\n`js\npie.sort((a, b) => a.name.localeCompare(b.name));`\nSorting does not affect the order of the generated arc array which is always in the same order as the input data array; it merely affects the computed angles of each arc. The first arc starts at the start angle and the last arc ends at the end angle.\n# pie.sortValues([compare]) \u00b7 Source\nIf compare is specified, sets the value comparator to the specified function and returns this pie generator. If compare is not specified, returns the current value comparator, which defaults to descending value. The default value comparator is implemented as:\n`js\nfunction compare(a, b) {\n  return b - a;\n}`\nIf both the data comparator and the value comparator are null, then arcs are positioned in the original input order. Otherwise, the data is sorted according to the data comparator, and the resulting order is used. Setting the value comparator implicitly sets the data comparator to null.\nThe value comparator is similar to the data comparator, except the two arguments a and b are values derived from the input data array using the value accessor, not the data elements. If the arc for a should be before the arc for b, then the comparator must return a number less than zero; if the arc for a should be after the arc for b, then the comparator must return a number greater than zero; returning zero means that the relative order of a and b is unspecified. For example, to sort arcs by ascending value:\n`js\npie.sortValues((a, b) => a - b);`\nSorting does not affect the order of the generated arc array which is always in the same order as the input data array; it merely affects the computed angles of each arc. The first arc starts at the start angle and the last arc ends at the end angle.\n# pie.startAngle([angle]) \u00b7 Source\nIf angle is specified, sets the overall start angle of the pie to the specified function or number and returns this pie generator. If angle is not specified, returns the current start angle accessor, which defaults to:\n`js\nfunction startAngle() {\n  return 0;\n}`\nThe start angle here means the overall start angle of the pie, i.e., the start angle of the first arc. The start angle accessor is invoked once, being passed the same arguments and `this` context as the pie generator. The units of angle are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator, you should specify an angle in radians, with 0 at -y (12 o\u2019clock) and positive angles proceeding clockwise.\n# pie.endAngle([angle]) \u00b7 Source\nIf angle is specified, sets the overall end angle of the pie to the specified function or number and returns this pie generator. If angle is not specified, returns the current end angle accessor, which defaults to:\n`js\nfunction endAngle() {\n  return 2 * Math.PI;\n}`\nThe end angle here means the overall end angle of the pie, i.e., the end angle of the last arc. The end angle accessor is invoked once, being passed the same arguments and `this` context as the pie generator. The units of angle are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator, you should specify an angle in radians, with 0 at -y (12 o\u2019clock) and positive angles proceeding clockwise.\nThe value of the end angle is constrained to startAngle \u00b1\u00a0\u03c4, such that |endAngle - startAngle| \u2264 \u03c4.\n# pie.padAngle([angle]) \u00b7 Source\nIf angle is specified, sets the pad angle to the specified function or number and returns this pie generator. If angle is not specified, returns the current pad angle accessor, which defaults to:\n`js\nfunction padAngle() {\n  return 0;\n}`\nThe pad angle here means the angular separation between each adjacent arc. The total amount of padding reserved is the specified angle times the number of elements in the input data array, and at most |endAngle - startAngle|; the remaining space is then divided proportionally by value such that the relative area of each arc is preserved. See the pie padding animation for illustration. The pad angle accessor is invoked once, being passed the same arguments and `this` context as the pie generator. The units of angle are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator, you should specify an angle in radians.\nLines\n\nThe line generator produces a spline or polyline, as in a line chart. Lines also appear in many other visualization types, such as the links in hierarchical edge bundling.\n# d3.line([x][, y]) \u00b7 Source, Examples\nConstructs a new line generator with the default settings. If x or y are specified, sets the corresponding accessors to the specified function or number and returns this line generator.\n# line(data) \u00b7 Source, Examples\nGenerates a line for the given array of data. Depending on this line generator\u2019s associated curve, the given input data may need to be sorted by x-value before being passed to the line generator. If the line generator has a context, then the line is rendered to this context as a sequence of path method calls and this function returns void. Otherwise, a path data string is returned.\n# line.x([x]) \u00b7 Source, Examples\nIf x is specified, sets the x accessor to the specified function or number and returns this line generator. If x is not specified, returns the current x accessor, which defaults to:\n`js\nfunction x(d) {\n  return d[0];\n}`\nWhen a line is generated, the x accessor will be invoked for each defined element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. The default x accessor assumes that the input data are two-element arrays of numbers. If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor. For example, if `x` is a time scale and `y` is a linear scale:\n```js\nconst data = [\n  {date: new Date(2007, 3, 24), value: 93.24},\n  {date: new Date(2007, 3, 25), value: 95.35},\n  {date: new Date(2007, 3, 26), value: 98.84},\n  {date: new Date(2007, 3, 27), value: 99.92},\n  {date: new Date(2007, 3, 30), value: 99.80},\n  {date: new Date(2007, 4,  1), value: 99.47},\n  \u2026\n];\nconst line = d3.line()\n    .x(d => x(d.date))\n    .y(d => y(d.value));\n```\n# line.y([y]) \u00b7 Source, Examples\nIf y is specified, sets the y accessor to the specified function or number and returns this line generator. If y is not specified, returns the current y accessor, which defaults to:\n`js\nfunction y(d) {\n  return d[1];\n}`\nWhen a line is generated, the y accessor will be invoked for each defined element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. The default y accessor assumes that the input data are two-element arrays of numbers. See line.x for more information.\n# line.defined([defined]) \u00b7 Source, Examples\nIf defined is specified, sets the defined accessor to the specified function or boolean and returns this line generator. If defined is not specified, returns the current defined accessor, which defaults to:\n`js\nfunction defined() {\n  return true;\n}`\nThe default accessor thus assumes that the input data is always defined. When a line is generated, the defined accessor will be invoked for each element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. If the given element is defined (i.e., if the defined accessor returns a truthy value for this element), the x and y accessors will subsequently be evaluated and the point will be added to the current line segment. Otherwise, the element will be skipped, the current line segment will be ended, and a new line segment will be generated for the next defined point. As a result, the generated line may have several discrete segments. For example:\n\nNote that if a line segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps. In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points.\n# line.curve([curve]) \u00b7 Source, Examples\nIf curve is specified, sets the curve factory and returns this line generator. If curve is not specified, returns the current curve factory, which defaults to curveLinear.\n# line.context([context]) \u00b7 Source, Examples\nIf context is specified, sets the context and returns this line generator. If context is not specified, returns the current context, which defaults to null. If the context is not null, then the generated line is rendered to this context as a sequence of path method calls. Otherwise, a path data string representing the generated line is returned.\n# line.digits([digits]) \u00b7 Source\nIf digits is specified, sets the maximum number of digits after the decimal separator and returns this line generator. If digits is not specified, returns the current maximum fraction digits, which defaults to 3. This option only applies when the associated context is null, as when this line generator is used to produce path data.\n# d3.lineRadial() \u00b7 Source, Examples\n\nConstructs a new radial line generator with the default settings. A radial line generator is equivalent to the standard Cartesian line generator, except the x and y accessors are replaced with angle and radius accessors. Radial lines are always positioned relative to \u27e80,0\u27e9; use a transform (see: SVG, Canvas) to change the origin.\n# lineRadial(data) \u00b7 Source, Examples\nEquivalent to line.\n# lineRadial.angle([angle]) \u00b7 Source, Examples\nEquivalent to line.x, except the accessor returns the angle in radians, with 0 at -y (12 o\u2019clock).\n# lineRadial.radius([radius]) \u00b7 Source, Examples\nEquivalent to line.y, except the accessor returns the radius: the distance from the origin \u27e80,0\u27e9.\n# lineRadial.defined([defined])\nEquivalent to line.defined.\n# lineRadial.curve([curve]) \u00b7 Source, Examples\nEquivalent to line.curve. Note that curveMonotoneX or curveMonotoneY are not recommended for radial lines because they assume that the data is monotonic in x or y, which is typically untrue of radial lines.\n# lineRadial.context([context])\nEquivalent to line.context.\nAreas\n\nThe area generator produces an area, as in an area chart. An area is defined by two bounding lines, either splines or polylines. Typically, the two lines share the same x-values (x0 = x1), differing only in y-value (y0 and y1); most commonly, y0 is defined as a constant representing zero. The first line (the topline) is defined by x1 and y1 and is rendered first; the second line (the baseline) is defined by x0 and y0 and is rendered second, with the points in reverse order. With a curveLinear curve, this produces a clockwise polygon.\n# d3.area([x][, y0][, y1]) \u00b7 Source\nConstructs a new area generator with the default settings. If x, y0 or y1 are specified, sets the corresponding accessors to the specified function or number and returns this area generator.\n# area(data) \u00b7 Source\nGenerates an area for the given array of data. Depending on this area generator\u2019s associated curve, the given input data may need to be sorted by x-value before being passed to the area generator. If the area generator has a context, then the area is rendered to this context as a sequence of path method calls and this function returns void. Otherwise, a path data string is returned.\n# area.x([x]) \u00b7 Source\nIf x is specified, sets x0 to x and x1 to null and returns this area generator. If x is not specified, returns the current x0 accessor.\n# area.x0([x]) \u00b7 Source\nIf x is specified, sets the x0 accessor to the specified function or number and returns this area generator. If x is not specified, returns the current x0 accessor, which defaults to:\n`js\nfunction x(d) {\n  return d[0];\n}`\nWhen an area is generated, the x0 accessor will be invoked for each defined element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. The default x0 accessor assumes that the input data are two-element arrays of numbers. If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor. For example, if `x` is a time scale and `y` is a linear scale:\n```js\nconst data = [\n  {date: new Date(2007, 3, 24), value: 93.24},\n  {date: new Date(2007, 3, 25), value: 95.35},\n  {date: new Date(2007, 3, 26), value: 98.84},\n  {date: new Date(2007, 3, 27), value: 99.92},\n  {date: new Date(2007, 3, 30), value: 99.80},\n  {date: new Date(2007, 4,  1), value: 99.47},\n  \u2026\n];\nconst area = d3.area()\n    .x(d => x(d.date))\n    .y1(d => y(d.value))\n    .y0(y(0));\n```\n# area.x1([x]) \u00b7 Source\nIf x is specified, sets the x1 accessor to the specified function or number and returns this area generator. If x is not specified, returns the current x1 accessor, which defaults to null, indicating that the previously-computed x0 value should be reused for the x1 value.\nWhen an area is generated, the x1 accessor will be invoked for each defined element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. See area.x0 for more information.\n# area.y([y]) \u00b7 Source\nIf y is specified, sets y0 to y and y1 to null and returns this area generator. If y is not specified, returns the current y0 accessor.\n# area.y0([y]) \u00b7 Source\nIf y is specified, sets the y0 accessor to the specified function or number and returns this area generator. If y is not specified, returns the current y0 accessor, which defaults to:\n`js\nfunction y() {\n  return 0;\n}`\nWhen an area is generated, the y0 accessor will be invoked for each defined element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. See area.x0 for more information.\n# area.y1([y]) \u00b7 Source\nIf y is specified, sets the y1 accessor to the specified function or number and returns this area generator. If y is not specified, returns the current y1 accessor, which defaults to:\n`js\nfunction y(d) {\n  return d[1];\n}`\nA null accessor is also allowed, indicating that the previously-computed y0 value should be reused for the y1 value. When an area is generated, the y1 accessor will be invoked for each defined element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. See area.x0 for more information.\n# area.defined([defined]) \u00b7 Source\nIf defined is specified, sets the defined accessor to the specified function or boolean and returns this area generator. If defined is not specified, returns the current defined accessor, which defaults to:\n`js\nfunction defined() {\n  return true;\n}`\nThe default accessor thus assumes that the input data is always defined. When an area is generated, the defined accessor will be invoked for each element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. If the given element is defined (i.e., if the defined accessor returns a truthy value for this element), the x0, x1, y0 and y1 accessors will subsequently be evaluated and the point will be added to the current area segment. Otherwise, the element will be skipped, the current area segment will be ended, and a new area segment will be generated for the next defined point. As a result, the generated area may have several discrete segments. For example:\n\nNote that if an area segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps. In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points.\n# area.curve([curve]) \u00b7 Source\nIf curve is specified, sets the curve factory and returns this area generator. If curve is not specified, returns the current curve factory, which defaults to curveLinear.\n# area.context([context]) \u00b7 Source\nIf context is specified, sets the context and returns this area generator. If context is not specified, returns the current context, which defaults to null. If the context is not null, then the generated area is rendered to this context as a sequence of path method calls. Otherwise, a path data string representing the generated area is returned.\n# area.digits([digits]) \u00b7 Source\nIf digits is specified, sets the maximum number of digits after the decimal separator and returns this area generator. If digits is not specified, returns the current maximum fraction digits, which defaults to 3. This option only applies when the associated context is null, as when this area generator is used to produce path data.\n# area.lineX0() \u00b7 Source\n# area.lineY0() \u00b7 Source\nReturns a new line generator that has this area generator\u2019s current defined accessor, curve and context. The line\u2019s x-accessor is this area\u2019s x0-accessor, and the line\u2019s y-accessor is this area\u2019s y0-accessor.\n# area.lineX1() \u00b7 Source\nReturns a new line generator that has this area generator\u2019s current defined accessor, curve and context. The line\u2019s x-accessor is this area\u2019s x1-accessor, and the line\u2019s y-accessor is this area\u2019s y0-accessor.\n# area.lineY1() \u00b7 Source\nReturns a new line generator that has this area generator\u2019s current defined accessor, curve and context. The line\u2019s x-accessor is this area\u2019s x0-accessor, and the line\u2019s y-accessor is this area\u2019s y1-accessor.\n# d3.areaRadial() \u00b7 Source\n\nConstructs a new radial area generator with the default settings. A radial area generator is equivalent to the standard Cartesian area generator, except the x and y accessors are replaced with angle and radius accessors. Radial areas are always positioned relative to \u27e80,0\u27e9; use a transform (see: SVG, Canvas) to change the origin.\n# areaRadial(data)\nEquivalent to area.\n# areaRadial.angle([angle]) \u00b7 Source\nEquivalent to area.x, except the accessor returns the angle in radians, with 0 at -y (12 o\u2019clock).\n# areaRadial.startAngle([angle]) \u00b7 Source\nEquivalent to area.x0, except the accessor returns the angle in radians, with 0 at -y (12 o\u2019clock). Note: typically angle is used instead of setting separate start and end angles.\n# areaRadial.endAngle([angle]) \u00b7 Source\nEquivalent to area.x1, except the accessor returns the angle in radians, with 0 at -y (12 o\u2019clock). Note: typically angle is used instead of setting separate start and end angles.\n# areaRadial.radius([radius]) \u00b7 Source\nEquivalent to area.y, except the accessor returns the radius: the distance from the origin \u27e80,0\u27e9.\n# areaRadial.innerRadius([radius]) \u00b7 Source\nEquivalent to area.y0, except the accessor returns the radius: the distance from the origin \u27e80,0\u27e9.\n# areaRadial.outerRadius([radius]) \u00b7 Source\nEquivalent to area.y1, except the accessor returns the radius: the distance from the origin \u27e80,0\u27e9.\n# areaRadial.defined([defined])\nEquivalent to area.defined.\n# areaRadial.curve([curve]) \u00b7 Source\nEquivalent to area.curve. Note that curveMonotoneX or curveMonotoneY are not recommended for radial areas because they assume that the data is monotonic in x or y, which is typically untrue of radial areas.\n# areaRadial.context([context])\nEquivalent to line.context.\n# areaRadial.lineStartAngle() \u00b7 Source\n# areaRadial.lineInnerRadius() \u00b7 Source\nReturns a new radial line generator that has this radial area generator\u2019s current defined accessor, curve and context. The line\u2019s angle accessor is this area\u2019s start angle accessor, and the line\u2019s radius accessor is this area\u2019s inner radius accessor.\n# areaRadial.lineEndAngle() \u00b7 Source\nReturns a new radial line generator that has this radial area generator\u2019s current defined accessor, curve and context. The line\u2019s angle accessor is this area\u2019s end angle accessor, and the line\u2019s radius accessor is this area\u2019s inner radius accessor.\n# areaRadial.lineOuterRadius() \u00b7 Source\nReturns a new radial line generator that has this radial area generator\u2019s current defined accessor, curve and context. The line\u2019s angle accessor is this area\u2019s start angle accessor, and the line\u2019s radius accessor is this area\u2019s outer radius accessor.\nCurves\nWhile lines are defined as a sequence of two-dimensional [x, y] points, and areas are similarly defined by a topline and a baseline, there remains the task of transforming this discrete representation into a continuous shape: i.e., how to interpolate between the points. A variety of curves are provided for this purpose.\nCurves are typically not constructed or used directly, instead being passed to line.curve and area.curve. For example:\n`js\nconst line = d3.line(d => d.date, d => d.value)\n    .curve(d3.curveCatmullRom.alpha(0.5));`\n# d3.curveBasis(context) \u00b7 Source\n\nProduces a cubic basis spline using the specified control points. The first and last points are triplicated such that the spline starts at the first point and ends at the last point, and is tangent to the line between the first and second points, and to the line between the penultimate and last points.\n# d3.curveBasisClosed(context) \u00b7 Source\n\nProduces a closed cubic basis spline using the specified control points. When a line segment ends, the first three control points are repeated, producing a closed loop\u00a0with C2 continuity.\n# d3.curveBasisOpen(context) \u00b7 Source\n\nProduces a cubic basis spline using the specified control points. Unlike basis, the first and last points are not repeated, and thus the curve typically does not intersect these points.\n# d3.curveBumpX(context) \u00b7 Source\n\nProduces a B\u00e9zier curve between each pair of points, with horizontal tangents at each point.\n# d3.curveBumpY(context) \u00b7 Source\n\nProduces a B\u00e9zier curve between each pair of points, with vertical tangents at each point.\n# d3.curveBundle(context) \u00b7 Source\n\nProduces a straightened cubic basis spline using the specified control points, with the spline straightened according to the curve\u2019s beta, which defaults to 0.85. This curve is typically used in hierarchical edge bundling to disambiguate connections, as proposed by Danny Holten in Hierarchical Edge Bundles: Visualization of Adjacency Relations in Hierarchical Data. This curve does not implement curve.areaStart and curve.areaEnd; it is intended to work with d3.line, not d3.area.\n# bundle.beta(beta) \u00b7 Source\nReturns a bundle curve with the specified beta in the range [0, 1], representing the bundle strength. If beta equals zero, a straight line between the first and last point is produced; if beta equals one, a standard basis spline is produced. For example:\n`js\nconst line = d3.line().curve(d3.curveBundle.beta(0.5));`\n# d3.curveCardinal(context) \u00b7 Source\n\nProduces a cubic cardinal spline using the specified control points, with one-sided differences used for the first and last piece. The default tension is 0.\n# d3.curveCardinalClosed(context) \u00b7 Source\n\nProduces a closed cubic cardinal spline using the specified control points. When a line segment ends, the first three control points are repeated, producing a closed loop. The default tension is 0.\n# d3.curveCardinalOpen(context) \u00b7 Source\n\nProduces a cubic cardinal spline using the specified control points. Unlike curveCardinal, one-sided differences are not used for the first and last piece, and thus the curve starts at the second point and ends at the penultimate point. The default tension is 0.\n# cardinal.tension(tension) \u00b7 Source\nReturns a cardinal curve with the specified tension in the range [0, 1]. The tension determines the length of the tangents: a tension of one yields all zero tangents, equivalent to curveLinear; a tension of zero produces a uniform Catmull\u2013Rom spline. For example:\n`js\nconst line = d3.line().curve(d3.curveCardinal.tension(0.5));`\n# d3.curveCatmullRom(context) \u00b7 Source\n\nProduces a cubic Catmull\u2013Rom spline using the specified control points and the parameter alpha, which defaults to 0.5, as proposed by Yuksel et al. in On the Parameterization of Catmull\u2013Rom Curves, with one-sided differences used for the first and last piece.\n# d3.curveCatmullRomClosed(context) \u00b7 Source\n\nProduces a closed cubic Catmull\u2013Rom spline using the specified control points and the parameter alpha, which defaults to 0.5, as proposed by Yuksel et al. When a line segment ends, the first three control points are repeated, producing a closed loop.\n# d3.curveCatmullRomOpen(context) \u00b7 Source\n\nProduces a cubic Catmull\u2013Rom spline using the specified control points and the parameter alpha, which defaults to 0.5, as proposed by Yuksel et al. Unlike curveCatmullRom, one-sided differences are not used for the first and last piece, and thus the curve starts at the second point and ends at the penultimate point.\n# catmullRom.alpha(alpha) \u00b7 Source\nReturns a cubic Catmull\u2013Rom curve with the specified alpha in the range [0, 1]. If alpha is zero, produces a uniform spline, equivalent to curveCardinal with a tension of zero; if alpha is one, produces a chordal spline; if alpha is 0.5, produces a centripetal spline. Centripetal splines are recommended to avoid self-intersections and overshoot. For example:\n`js\nconst line = d3.line().curve(d3.curveCatmullRom.alpha(0.5));`\n# d3.curveLinear(context) \u00b7 Source\n\nProduces a polyline through the specified points.\n# d3.curveLinearClosed(context) \u00b7 Source\n\nProduces a closed polyline through the specified points by repeating the first point when the line segment ends.\n# d3.curveMonotoneX(context) \u00b7 Source\n\nProduces a cubic spline that preserves monotonicity in y, assuming monotonicity in x, as proposed by Steffen in A simple method for monotonic interpolation in one dimension: \u201ca smooth curve with continuous first-order derivatives that passes through any given set of data points without spurious oscillations. Local extrema can occur only at grid points where they are given by the data, but not in between two adjacent grid points.\u201d\n# d3.curveMonotoneY(context) \u00b7 Source\n\nProduces a cubic spline that preserves monotonicity in x, assuming monotonicity in y, as proposed by Steffen in A simple method for monotonic interpolation in one dimension: \u201ca smooth curve with continuous first-order derivatives that passes through any given set of data points without spurious oscillations. Local extrema can occur only at grid points where they are given by the data, but not in between two adjacent grid points.\u201d\n# d3.curveNatural(context) \u00b7 Source\n\nProduces a natural cubic spline with the second derivative of the spline set to zero at the endpoints.\n# d3.curveStep(context) \u00b7 Source\n\nProduces a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes at the midpoint of each pair of adjacent x-values.\n# d3.curveStepAfter(context) \u00b7 Source\n\nProduces a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes after the x-value.\n# d3.curveStepBefore(context) \u00b7 Source\n\nProduces a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes before the x-value.\nCustom Curves\nCurves are typically not used directly, instead being passed to line.curve and area.curve. However, you can define your own curve implementation should none of the built-in curves satisfy your needs using the following interface. You can also use this low-level interface with a built-in curve type as an alternative to the line and area generators.\n# curve.areaStart() \u00b7 Source\nIndicates the start of a new area segment. Each area segment consists of exactly two line segments: the topline, followed by the baseline, with the baseline points in reverse order.\n# curve.areaEnd() \u00b7 Source\nIndicates the end of the current area segment.\n# curve.lineStart() \u00b7 Source\nIndicates the start of a new line segment. Zero or more points will follow.\n# curve.lineEnd() \u00b7 Source\nIndicates the end of the current line segment.\n# curve.point(x, y) \u00b7 Source\nIndicates a new point in the current line segment with the given x- and y-values.\nLinks\n\nThe link shape generates a smooth cubic B\u00e9zier curve from a source point to a target point. The tangents of the curve at the start and end are either vertical, horizontal or radial.\n# d3.link(curve) \u00b7 Source\nReturns a new link generator using the specified curve. For example, to visualize links in a tree diagram rooted on the top edge of the display, you might say:\n`js\nconst link = d3.link(d3.curveBumpY)\n    .x(d => d.x)\n    .y(d => d.y);`\n# d3.linkVertical() \u00b7 Source\nShorthand for d3.link with d3.curveBumpY; suitable for visualizing links in a tree diagram rooted on the top edge of the display. Equivalent to:\n`js\nconst link = d3.link(d3.curveBumpY);`\n# d3.linkHorizontal() \u00b7 Source\nShorthand for d3.link with d3.curveBumpX; suitable for visualizing links in a tree diagram rooted on the left edge of the display. Equivalent to:\n`js\nconst link = d3.link(d3.curveBumpX);`\n# link(arguments\u2026) \u00b7 Source\nGenerates a link for the given arguments. The arguments are arbitrary; they are simply propagated to the link generator\u2019s accessor functions along with the `this` object. For example, with the default settings, an object expected:\n`js\nlink({\n  source: [100, 100],\n  target: [300, 300]\n});`\n# link.source([source]) \u00b7 Source\nIf source is specified, sets the source accessor to the specified function and returns this link generator. If source is not specified, returns the current source accessor, which defaults to:\n`js\nfunction source(d) {\n  return d.source;\n}`\n# link.target([target]) \u00b7 Source\nIf target is specified, sets the target accessor to the specified function and returns this link generator. If target is not specified, returns the current target accessor, which defaults to:\n`js\nfunction target(d) {\n  return d.target;\n}`\n# link.x([x]) \u00b7 Source\nIf x is specified, sets the x-accessor to the specified function or number and returns this link generator. If x is not specified, returns the current x-accessor, which defaults to:\n`js\nfunction x(d) {\n  return d[0];\n}`\n# link.y([y]) \u00b7 Source\nIf y is specified, sets the y-accessor to the specified function or number and returns this link generator. If y is not specified, returns the current y-accessor, which defaults to:\n`js\nfunction y(d) {\n  return d[1];\n}`\n# link.context([context]) \u00b7 Source\nIf context is specified, sets the context and returns this link generator. If context is not specified, returns the current context, which defaults to null. If the context is not null, then the generated link is rendered to this context as a sequence of path method calls. Otherwise, a path data string representing the generated link is returned. See also d3-path.\n# link.digits([digits]) \u00b7 Source\nIf digits is specified, sets the maximum number of digits after the decimal separator and returns this link generator. If digits is not specified, returns the current maximum fraction digits, which defaults to 3. This option only applies when the associated context is null, as when this link generator is used to produce path data.\n# d3.linkRadial() \u00b7 Source\nReturns a new link generator with radial tangents. For example, to visualize links in a tree diagram rooted in the center of the display, you might say:\n`js\nconst link = d3.linkRadial()\n    .angle(d => d.x)\n    .radius(d => d.y);`\n# linkRadial.angle([angle]) \u00b7 Source\nEquivalent to link.x, except the accessor returns the angle in radians, with 0 at -y (12 o\u2019clock).\n# linkRadial.radius([radius]) \u00b7 Source\nEquivalent to link.y, except the accessor returns the radius: the distance from the origin \u27e80,0\u27e9.\nSymbols\nSymbols provide a categorical shape encoding as is commonly used in scatterplots. Symbols are always centered at \u27e80,0\u27e9; use a transform (see: SVG, Canvas) to move the symbol to a different position.\n# d3.symbol([type][, size]) \u00b7 Source, Examples\nConstructs a new symbol generator of the specified type and size. If not specified, type defaults to a circle, and size defaults to 64.\n# symbol(arguments\u2026) \u00b7 Source\nGenerates a symbol for the given arguments. The arguments are arbitrary; they are simply propagated to the symbol generator\u2019s accessor functions along with the `this` object. For example, with the default settings, no arguments are needed to produce a circle with area 64 square pixels. If the symbol generator has a context, then the symbol is rendered to this context as a sequence of path method calls and this function returns void. Otherwise, a path data string is returned.\n# symbol.type([type]) \u00b7 Source\nIf type is specified, sets the symbol type to the specified function or symbol type and returns this symbol generator. If type is a function, the symbol generator\u2019s arguments and this are passed through. (See selection.attr if you are using d3-selection.) If type is not specified, returns the current symbol type accessor, which defaults to:\n`js\nfunction type() {\n  return circle;\n}`\nSee symbolsFill and symbolsStroke for built-in symbol types. To implement a custom symbol type, pass an object that implements symbolType.draw.\n# symbol.size([size]) \u00b7 Source\nIf size is specified, sets the size to the specified function or number and returns this symbol generator. If size is a function, the symbol generator\u2019s arguments and this are passed through. (See selection.attr if you are using d3-selection.) If size is not specified, returns the current size accessor, which defaults to:\n`js\nfunction size() {\n  return 64;\n}`\nSpecifying the size as a function is useful for constructing a scatterplot with a size encoding. If you wish to scale the symbol to fit a given bounding box, rather than by area, try SVG\u2019s getBBox.\n# symbol.context([context]) \u00b7 Source\nIf context is specified, sets the context and returns this symbol generator. If context is not specified, returns the current context, which defaults to null. If the context is not null, then the generated symbol is rendered to this context as a sequence of path method calls. Otherwise, a path data string representing the generated symbol is returned.\n# symbol.digits([digits]) \u00b7 Source\nIf digits is specified, sets the maximum number of digits after the decimal separator and returns this symbol generator. If digits is not specified, returns the current maximum fraction digits, which defaults to 3. This option only applies when the associated context is null, as when this symbol generator is used to produce path data.\n# d3.symbolsFill \u00b7 Source\n\nAn array containing a set of symbol types designed for filling: circle, cross, diamond, square, star, triangle, and wye. Useful for constructing the range of an ordinal scale should you wish to use a shape encoding for categorical data.\n# d3.symbolsStroke \u00b7 Source\nAn array containing a set of symbol types designed for stroking: circle, plus, times, triangle2, asterisk, square2, and diamond2. Useful for constructing the range of an ordinal scale should you wish to use a shape encoding for categorical data.\n# d3.symbolAsterisk \u00b7 Source\nThe asterisk symbol type; intended for stroking.\n# d3.symbolCircle \u00b7 Source\nThe circle symbol type; intended for either filling or stroking.\n# d3.symbolCross \u00b7 Source\nThe Greek cross symbol type, with arms of equal length; intended for filling.\n# d3.symbolDiamond \u00b7 Source\nThe rhombus symbol type; intended for filling.\n# d3.symbolDiamond2 \u00b7 Source\nThe rotated square symbol type; intended for stroking.\n# d3.symbolPlus \u00b7 Source\nThe plus symbol type; intended for stroking.\n# d3.symbolSquare \u00b7 Source\nThe square symbol type; intended for filling.\n# d3.symbolSquare2 \u00b7 Source\nThe square2 symbol type; intended for stroking.\n# d3.symbolStar \u00b7 Source\nThe pentagonal star (pentagram) symbol type; intended for filling.\n# d3.symbolTriangle \u00b7 Source\nThe up-pointing triangle symbol type; intended for filling.\n# d3.symbolTriangle2 \u00b7 Source\nThe up-pointing triangle symbol type; intended for stroking.\n# d3.symbolWye \u00b7 Source\nThe Y-shape symbol type; intended for filling.\n# d3.symbolTimes \u00b7 Source\nThe X-shape symbol type; intended for stroking.\n# d3.pointRadial(angle, radius) \u00b7 Source, Examples\nReturns the point [x, y] for the given angle in radians, with 0 at -y (12 o\u2019clock) and positive angles proceeding clockwise, and the given radius.\nCustom Symbol Types\nSymbol types are typically not used directly, instead being passed to symbol.type. However, you can define your own symbol type implementation should none of the built-in types satisfy your needs using the following interface. You can also use this low-level interface with a built-in symbol type as an alternative to the symbol generator.\n# symbolType.draw(context, size)\nRenders this symbol type to the specified context with the specified size in square pixels. The context implements the CanvasPathMethods interface. (Note that this is a subset of the CanvasRenderingContext2D interface!)\nStacks\n\nSome shape types can be stacked, placing one shape adjacent to another. For example, a bar chart of monthly sales might be broken down into a multi-series bar chart by product category, stacking bars vertically. This is equivalent to subdividing a bar chart by an ordinal dimension (such as product category) and applying a color encoding.\nStacked charts can show overall value and per-category value simultaneously; however, it is typically harder to compare across categories, as only the bottom layer of the stack is aligned. So, chose the stack order carefully, and consider a streamgraph. (See also grouped charts.)\nLike the pie generator, the stack generator does not produce a shape directly. Instead it computes positions which you can then pass to an area generator or use directly, say to position bars.\n# d3.stack() \u00b7 Source\nConstructs a new stack generator with the default settings.\n# stack(data[, arguments\u2026]) \u00b7 Source\nGenerates a stack for the given array of data, returning an array representing each series. Any additional arguments are arbitrary; they are simply propagated to accessors along with the `this` object.\nThe series are determined by the keys accessor; each series i in the returned array corresponds to the ith key. Each series is an array of points, where each point j corresponds to the jth element in the input data. Lastly, each point is represented as an array [y0, y1] where y0 is the lower value (baseline) and y1 is the upper value (topline); the difference between y0 and y1 corresponds to the computed value for this point. The key for each series is available as series.key, and the index as series.index. The input data element for each point is available as point.data.\nFor example, consider the following table representing monthly sales of fruits:\nMonth   | Apples | Bananas | Cherries | Durians\n--------|--------|---------|----------|---------\n 1/2015 |   3840 |    1920 |      960 |     400\n 2/2015 |   1600 |    1440 |      960 |     400\n 3/2015 |    640 |     960 |      640 |     400\n 4/2015 |    320 |     480 |      640 |     400\nThis might be represented in JavaScript as an array of objects:\n`js\nconst data = [\n  {month: new Date(2015, 0, 1), apples: 3840, bananas: 1920, cherries: 960, durians: 400},\n  {month: new Date(2015, 1, 1), apples: 1600, bananas: 1440, cherries: 960, durians: 400},\n  {month: new Date(2015, 2, 1), apples:  640, bananas:  960, cherries: 640, durians: 400},\n  {month: new Date(2015, 3, 1), apples:  320, bananas:  480, cherries: 640, durians: 400}\n];`\nTo produce a stack for this data:\n```js\nconst stack = d3.stack()\n    .keys([\"apples\", \"bananas\", \"cherries\", \"durians\"])\n    .order(d3.stackOrderNone)\n    .offset(d3.stackOffsetNone);\nconst series = stack(data);\n```\nThe resulting array has one element per series. Each series has one point per month, and each point has a lower and upper value defining the baseline and topline:\n`js\n[\n  [[   0, 3840], [   0, 1600], [   0,  640], [   0,  320]], // apples\n  [[3840, 5760], [1600, 3040], [ 640, 1600], [ 320,  800]], // bananas\n  [[5760, 6720], [3040, 4000], [1600, 2240], [ 800, 1440]], // cherries\n  [[6720, 7120], [4000, 4400], [2240, 2640], [1440, 1840]], // durians\n]`\nEach series in then typically passed to an area generator to render an area chart, or used to construct rectangles for a bar chart.\n# stack.keys([keys]) \u00b7 Source\nIf keys is specified, sets the keys accessor to the specified function or array and returns this stack generator. If keys is not specified, returns the current keys accessor, which defaults to the empty array. A series (layer) is generated for each key. Keys are typically strings, but they may be arbitrary values. The series\u2019 key is passed to the value accessor, along with each data point, to compute the point\u2019s value.\n# stack.value([value]) \u00b7 Source\nIf value is specified, sets the value accessor to the specified function or number and returns this stack generator. If value is not specified, returns the current value accessor, which defaults to:\n`js\nfunction value(d, key) {\n  return d[key];\n}`\nThus, by default the stack generator assumes that the input data is an array of objects, with each object exposing named properties with numeric values; see stack for an example.\n# stack.order([order]) \u00b7 Source\nIf order is specified, sets the order accessor to the specified function or array and returns this stack generator. If order is not specified, returns the current order accessor, which defaults to stackOrderNone; this uses the order given by the key accessor. See stack orders for the built-in orders.\nIf order is a function, it is passed the generated series array and must return an array of numeric indexes representing the stack order. For example, the default order is defined as:\n`js\nfunction orderNone(series) {\n  let n = series.length;\n  const o = new Array(n);\n  while (--n >= 0) o[n] = n;\n  return o;\n}`\nThe stack order is computed prior to the offset; thus, the lower value for all points is zero at the time the order is computed. The index attribute for each series is also not set until after the order is computed.\n# stack.offset([offset]) \u00b7 Source\nIf offset is specified, sets the offset accessor to the specified function and returns this stack generator. If offset is not specified, returns the current offset acccesor, which defaults to stackOffsetNone; this uses a zero baseline. See stack offsets for the built-in offsets.\nThe offset function is passed the generated series array and the order index array; it is then responsible for updating the lower and upper values in the series array. For example, the default offset is defined as:\n`js\nfunction offsetNone(series, order) {\n  if (!((n = series.length) > 1)) return;\n  for (let i = 1, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {\n    s0 = s1, s1 = series[order[i]];\n    for (let j = 0; j < m; ++j) {\n      s1[j][1] += s1[j][0] = s0[j][1];\n    }\n  }\n}`\nStack Orders\nStack orders are typically not used directly, but are instead passed to stack.order.\n# d3.stackOrderAppearance(series) \u00b7 Source\nReturns a series order such that the earliest series (according to the maximum value) is at the bottom.\n# d3.stackOrderAscending(series) \u00b7 Source\nReturns a series order such that the smallest series (according to the sum of values) is at the bottom.\n# d3.stackOrderDescending(series) \u00b7 Source\nReturns a series order such that the largest series (according to the sum of values) is at the bottom.\n# d3.stackOrderInsideOut(series) \u00b7 Source\nReturns a series order such that the earliest series (according to the maximum value) are on the inside and the later series are on the outside. This order is recommended for streamgraphs in conjunction with the wiggle offset. See Stacked Graphs\u2014Geometry & Aesthetics by Byron & Wattenberg for more information.\n# d3.stackOrderNone(series) \u00b7 Source\nReturns the given series order [0, 1, \u2026 n - 1] where n is the number of elements in series. Thus, the stack order is given by the key accessor.\n# d3.stackOrderReverse(series) \u00b7 Source\nReturns the reverse of the given series order [n - 1, n - 2, \u2026 0] where n is the number of elements in series. Thus, the stack order is given by the reverse of the key accessor.\nStack Offsets\nStack offsets are typically not used directly, but are instead passed to stack.offset.\n# d3.stackOffsetExpand(series, order) \u00b7 Source\nApplies a zero baseline and normalizes the values for each point such that the topline is always one.\n# d3.stackOffsetDiverging(series, order) \u00b7 Source\nPositive values are stacked above zero, negative values are stacked below zero, and zero values are stacked at zero.\n# d3.stackOffsetNone(series, order) \u00b7 Source\nApplies a zero baseline.\n# d3.stackOffsetSilhouette(series, order) \u00b7 Source\nShifts the baseline down such that the center of the streamgraph is always at zero.\n# d3.stackOffsetWiggle(series, order) \u00b7 Source",
    "tag": "d3-shape"
  }
]