"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultisessionAppSupport = exports.AuthenticateWithRedirectCallback = exports.RedirectToCreateOrganization = exports.RedirectToOrganizationProfile = exports.RedirectToUserProfile = exports.RedirectToSignUp = exports.RedirectToSignIn = exports.ClerkLoading = exports.ClerkLoaded = exports.SignedOut = exports.SignedIn = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const AuthContext_1 = require("../contexts/AuthContext");
const IsomorphicClerkContext_1 = require("../contexts/IsomorphicClerkContext");
const SessionContext_1 = require("../contexts/SessionContext");
const StructureContext_1 = require("../contexts/StructureContext");
const withClerk_1 = require("./withClerk");
const SignedIn = ({ children }) => {
    const { userId } = (0, AuthContext_1.useAuthContext)();
    if (userId) {
        return react_1.default.createElement(react_1.default.Fragment, null, children);
    }
    return null;
};
exports.SignedIn = SignedIn;
const SignedOut = ({ children }) => {
    const { userId } = (0, AuthContext_1.useAuthContext)();
    if (userId === null) {
        return react_1.default.createElement(react_1.default.Fragment, null, children);
    }
    return null;
};
exports.SignedOut = SignedOut;
const ClerkLoaded = ({ children }) => {
    const isomorphicClerk = (0, IsomorphicClerkContext_1.useIsomorphicClerkContext)();
    if (!isomorphicClerk.loaded) {
        return null;
    }
    return react_1.default.createElement(StructureContext_1.LoadedGuarantee, null, children);
};
exports.ClerkLoaded = ClerkLoaded;
const ClerkLoading = ({ children }) => {
    const isomorphicClerk = (0, IsomorphicClerkContext_1.useIsomorphicClerkContext)();
    if (isomorphicClerk.loaded) {
        return null;
    }
    return react_1.default.createElement(react_1.default.Fragment, null, children);
};
exports.ClerkLoading = ClerkLoading;
exports.RedirectToSignIn = (0, withClerk_1.withClerk)((_a) => {
    var { clerk } = _a, props = tslib_1.__rest(_a, ["clerk"]);
    const { client, session } = clerk;
    // TODO: Remove temp use of __unstable__environment
    const { __unstable__environment } = clerk;
    const hasActiveSessions = client.activeSessions && client.activeSessions.length > 0;
    react_1.default.useEffect(() => {
        if (session === null && hasActiveSessions && __unstable__environment) {
            const { afterSignOutOneUrl } = __unstable__environment.displayConfig;
            void clerk.navigate(afterSignOutOneUrl);
        }
        else {
            void clerk.redirectToSignIn(props);
        }
    }, []);
    return null;
}, 'RedirectToSignIn');
exports.RedirectToSignUp = (0, withClerk_1.withClerk)((_a) => {
    var { clerk } = _a, props = tslib_1.__rest(_a, ["clerk"]);
    react_1.default.useEffect(() => {
        void clerk.redirectToSignUp(props);
    }, []);
    return null;
}, 'RedirectToSignUp');
exports.RedirectToUserProfile = (0, withClerk_1.withClerk)(({ clerk }) => {
    react_1.default.useEffect(() => {
        clerk.redirectToUserProfile();
    }, []);
    return null;
}, 'RedirectToUserProfile');
exports.RedirectToOrganizationProfile = (0, withClerk_1.withClerk)(({ clerk }) => {
    react_1.default.useEffect(() => {
        clerk.redirectToOrganizationProfile();
    }, []);
    return null;
}, 'RedirectToOrganizationProfile');
exports.RedirectToCreateOrganization = (0, withClerk_1.withClerk)(({ clerk }) => {
    react_1.default.useEffect(() => {
        clerk.redirectToCreateOrganization();
    }, []);
    return null;
}, 'RedirectToCreateOrganization');
exports.AuthenticateWithRedirectCallback = (0, withClerk_1.withClerk)((_a) => {
    var { clerk } = _a, handleRedirectCallbackParams = tslib_1.__rest(_a, ["clerk"]);
    react_1.default.useEffect(() => {
        void clerk.handleRedirectCallback(handleRedirectCallbackParams);
    }, []);
    return null;
}, 'AuthenticateWithRedirectCallback');
const MultisessionAppSupport = ({ children }) => {
    const session = (0, SessionContext_1.useSessionContext)();
    return react_1.default.createElement(react_1.default.Fragment, { key: session ? session.id : 'no-users' }, children);
};
exports.MultisessionAppSupport = MultisessionAppSupport;
