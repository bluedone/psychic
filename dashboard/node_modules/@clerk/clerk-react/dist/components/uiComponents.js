"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationSwitcher = exports.CreateOrganization = exports.OrganizationProfile = exports.UserButton = exports.UserProfile = exports.SignUp = exports.SignIn = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const withClerk_1 = require("./withClerk");
// README: <Portal/> should be a class pure component in order for mount and unmount
// lifecycle props to be invoked correctly. Replacing the class component with a
// functional component wrapped with a React.memo is not identical to the original
// class implementation due to React intricacies such as the useEffectâ€™s cleanup
// seems to run AFTER unmount, while componentWillUnmount runs BEFORE.
// More information can be found at https://clerkinc.slack.com/archives/C015S0BGH8R/p1624891993016300
// The function Portal implementation is commented out for future reference.
// const Portal = React.memo(({ props, mount, unmount }: MountProps) => {
//   const portalRef = React.createRef<HTMLDivElement>();
//   useEffect(() => {
//     if (portalRef.current) {
//       mount(portalRef.current, props);
//     }
//     return () => {
//       if (portalRef.current) {
//         unmount(portalRef.current);
//       }
//     };
//   }, []);
//   return <div ref={portalRef} />;
// });
// Portal.displayName = 'ClerkPortal';
class Portal extends react_1.default.PureComponent {
    constructor() {
        super(...arguments);
        this.portalRef = react_1.default.createRef();
    }
    componentDidUpdate(prevProps) {
        if (prevProps.props.appearance !== this.props.props.appearance) {
            this.props.updateProps({ node: this.portalRef.current, props: this.props.props });
        }
    }
    componentDidMount() {
        if (this.portalRef.current) {
            this.props.mount(this.portalRef.current, this.props.props);
        }
    }
    componentWillUnmount() {
        if (this.portalRef.current) {
            this.props.unmount(this.portalRef.current);
        }
    }
    render() {
        return react_1.default.createElement("div", { ref: this.portalRef });
    }
}
exports.SignIn = (0, withClerk_1.withClerk)((_a) => {
    var { clerk } = _a, props = tslib_1.__rest(_a, ["clerk"]);
    return (react_1.default.createElement(Portal, { mount: clerk.mountSignIn, unmount: clerk.unmountSignIn, updateProps: clerk.__unstable__updateProps, props: props }));
}, 'SignIn');
exports.SignUp = (0, withClerk_1.withClerk)((_a) => {
    var { clerk } = _a, props = tslib_1.__rest(_a, ["clerk"]);
    return (react_1.default.createElement(Portal, { mount: clerk.mountSignUp, unmount: clerk.unmountSignUp, updateProps: clerk.__unstable__updateProps, props: props }));
}, 'SignUp');
exports.UserProfile = (0, withClerk_1.withClerk)((_a) => {
    var { clerk } = _a, props = tslib_1.__rest(_a, ["clerk"]);
    return (react_1.default.createElement(Portal, { mount: clerk.mountUserProfile, unmount: clerk.unmountUserProfile, updateProps: clerk.__unstable__updateProps, props: props }));
}, 'UserProfile');
exports.UserButton = (0, withClerk_1.withClerk)((_a) => {
    var { clerk } = _a, props = tslib_1.__rest(_a, ["clerk"]);
    return (react_1.default.createElement(Portal, { mount: clerk.mountUserButton, unmount: clerk.unmountUserButton, updateProps: clerk.__unstable__updateProps, props: props }));
}, 'UserButton');
exports.OrganizationProfile = (0, withClerk_1.withClerk)((_a) => {
    var { clerk } = _a, props = tslib_1.__rest(_a, ["clerk"]);
    return (react_1.default.createElement(Portal, { mount: clerk.mountOrganizationProfile, unmount: clerk.unmountOrganizationProfile, updateProps: clerk.__unstable__updateProps, props: props }));
}, 'OrganizationProfile');
exports.CreateOrganization = (0, withClerk_1.withClerk)((_a) => {
    var { clerk } = _a, props = tslib_1.__rest(_a, ["clerk"]);
    return (react_1.default.createElement(Portal, { mount: clerk.mountCreateOrganization, unmount: clerk.unmountCreateOrganization, updateProps: clerk.__unstable__updateProps, props: props }));
}, 'CreateOrganization');
exports.OrganizationSwitcher = (0, withClerk_1.withClerk)((_a) => {
    var { clerk } = _a, props = tslib_1.__rest(_a, ["clerk"]);
    return (react_1.default.createElement(Portal, { mount: clerk.mountOrganizationSwitcher, unmount: clerk.unmountOrganizationSwitcher, updateProps: clerk.__unstable__updateProps, props: props }));
}, 'OrganizationSwitcher');
