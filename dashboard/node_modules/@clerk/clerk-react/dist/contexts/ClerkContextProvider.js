"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClerkContextProvider = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const isomorphicClerk_1 = tslib_1.__importDefault(require("../isomorphicClerk"));
const deriveState_1 = require("../utils/deriveState");
const AuthContext_1 = require("./AuthContext");
const ClientContext_1 = require("./ClientContext");
const IsomorphicClerkContext_1 = require("./IsomorphicClerkContext");
const OrganizationContext_1 = require("./OrganizationContext");
const SessionContext_1 = require("./SessionContext");
const UserContext_1 = require("./UserContext");
function ClerkContextProvider(props) {
    const { isomorphicClerkOptions, initialState, children } = props;
    const { isomorphicClerk: clerk, loaded: clerkLoaded } = useLoadedIsomorphicClerk(isomorphicClerkOptions);
    const [state, setState] = react_1.default.useState({
        client: clerk.client,
        session: clerk.session,
        user: clerk.user,
        organization: clerk.organization,
        lastOrganizationInvitation: null,
        lastOrganizationMember: null,
    });
    react_1.default.useEffect(() => {
        return clerk.addListener(e => setState(Object.assign({}, e)));
    }, []);
    const derivedState = (0, deriveState_1.deriveState)(clerkLoaded, state, initialState);
    const clerkCtx = react_1.default.useMemo(() => ({ value: clerk }), [clerkLoaded]);
    const clientCtx = react_1.default.useMemo(() => ({ value: state.client }), [state.client]);
    const { sessionId, session, userId, user, orgId, actor, lastOrganizationInvitation, lastOrganizationMember, organization, orgRole, orgSlug, } = derivedState;
    const authCtx = react_1.default.useMemo(() => {
        const value = { sessionId, userId, actor, orgId, orgRole, orgSlug };
        return { value };
    }, [sessionId, userId, actor, orgId, orgRole, orgSlug]);
    const userCtx = react_1.default.useMemo(() => ({ value: user }), [userId, user]);
    const sessionCtx = react_1.default.useMemo(() => ({ value: session }), [sessionId, session]);
    const organizationCtx = react_1.default.useMemo(() => {
        const value = {
            organization: organization,
            lastOrganizationInvitation: lastOrganizationInvitation,
            lastOrganizationMember: lastOrganizationMember,
        };
        return { value };
    }, [orgId, organization, lastOrganizationInvitation, lastOrganizationMember]);
    return (
    // @ts-expect-error
    react_1.default.createElement(IsomorphicClerkContext_1.IsomorphicClerkContext.Provider, { value: clerkCtx },
        react_1.default.createElement(ClientContext_1.ClientContext.Provider, { value: clientCtx },
            react_1.default.createElement(SessionContext_1.SessionContext.Provider, { value: sessionCtx },
                react_1.default.createElement(OrganizationContext_1.OrganizationContext.Provider, { value: organizationCtx },
                    react_1.default.createElement(AuthContext_1.AuthContext.Provider, { value: authCtx },
                        react_1.default.createElement(UserContext_1.UserContext.Provider, { value: userCtx }, children)))))));
}
exports.ClerkContextProvider = ClerkContextProvider;
const useLoadedIsomorphicClerk = (options) => {
    const [loaded, setLoaded] = react_1.default.useState(false);
    const isomorphicClerk = react_1.default.useMemo(() => isomorphicClerk_1.default.getOrCreateInstance(options), []);
    react_1.default.useEffect(() => {
        isomorphicClerk.__unstable__updateProps({ appearance: options.appearance });
    }, [options.appearance]);
    react_1.default.useEffect(() => {
        isomorphicClerk.__unstable__updateProps({ options });
    }, [options.localization]);
    react_1.default.useEffect(() => {
        isomorphicClerk.addOnLoaded(() => setLoaded(true));
    }, []);
    return { isomorphicClerk, loaded };
};
