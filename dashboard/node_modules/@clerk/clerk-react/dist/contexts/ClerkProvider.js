"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.__internal__setErrorThrowerOptions = exports.ClerkProvider = void 0;
const tslib_1 = require("tslib");
const shared_1 = require("@clerk/shared");
const react_1 = tslib_1.__importDefault(require("react"));
const errors_1 = require("../errors");
const utils_1 = require("../utils");
Object.defineProperty(exports, "__internal__setErrorThrowerOptions", { enumerable: true, get: function () { return utils_1.__internal__setErrorThrowerOptions; } });
const ClerkContextProvider_1 = require("./ClerkContextProvider");
const StructureContext_1 = require("./StructureContext");
(0, utils_1.__internal__setErrorThrowerOptions)({
    packageName: '@clerk/clerk-react',
});
function ClerkProviderBase(props) {
    const { initialState, children } = props, restIsomorphicClerkOptions = tslib_1.__rest(props, ["initialState", "children"]);
    const { frontendApi = '', publishableKey = '', Clerk: userInitialisedClerk } = restIsomorphicClerkOptions;
    if (!userInitialisedClerk) {
        if (!publishableKey && !frontendApi) {
            utils_1.errorThrower.throwMissingPublishableKeyError();
        }
        else if (publishableKey && !(0, shared_1.isPublishableKey)(publishableKey)) {
            utils_1.errorThrower.throwInvalidPublishableKeyError({ key: publishableKey });
        }
        else if (!publishableKey && frontendApi && !(0, shared_1.isLegacyFrontendApiKey)(frontendApi)) {
            utils_1.errorThrower.throwInvalidFrontendApiError({ key: frontendApi });
        }
    }
    return (react_1.default.createElement(StructureContext_1.StructureContext.Provider, { value: StructureContext_1.StructureContextStates.noGuarantees },
        react_1.default.createElement(ClerkContextProvider_1.ClerkContextProvider, { initialState: initialState, isomorphicClerkOptions: restIsomorphicClerkOptions }, children)));
}
const ClerkProvider = (0, utils_1.withMaxAllowedInstancesGuard)(ClerkProviderBase, 'ClerkProvider', errors_1.multipleClerkProvidersError);
exports.ClerkProvider = ClerkProvider;
ClerkProvider.displayName = 'ClerkProvider';
